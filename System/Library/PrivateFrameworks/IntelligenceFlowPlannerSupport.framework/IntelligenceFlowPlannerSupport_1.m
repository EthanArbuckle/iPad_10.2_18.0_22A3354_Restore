_BYTE *sub_23F709B5C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F709B64);
  return sub_23F6B6EB0((_BYTE *)a1, a2 + 18);
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.CodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.CodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AddCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AddCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AddAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AddAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.SubtractCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.SubtractCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.SubtractAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.SubtractAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.DivideCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.DivideCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.DivideAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.DivideAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.MultiplyCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.MultiplyCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.MultiplyAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.MultiplyAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.ExponentCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.ExponentCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.EqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.EqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.NotEqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.NotEqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.InCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.InCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.GreaterThanEqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.GreaterThanEqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.GreaterThanCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.GreaterThanCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.LessThanEqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.LessThanEqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.LessThanCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.LessThanCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AndCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AndCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.OrCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.OrCodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport26UpdateParametersExpressionV10UpdateKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F709D00 + 4 * byte_23FB511D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F709D34 + 4 * byte_23FB511D0[v4]))();
}

uint64_t sub_23F709D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F709D40);
  return result;
}

_BYTE *sub_23F709D48(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F709D50);
  return sub_23F6B6EB0((_BYTE *)a1, a2 + 1);
}

ValueMetadata *type metadata accessor for PrefixExpression.CodingKeys()
{
  return &type metadata for PrefixExpression.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport16PrefixExpressionV8PrefixOpOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F709DBC + 4 * byte_23FB511DF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F709DF0 + 4 * byte_23FB511DA[v4]))();
}

uint64_t sub_23F709DF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F709DFCLL);
  return result;
}

_BYTE *sub_23F709E04(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F709E0CLL);
  return sub_23F6B6EB0((_BYTE *)a1, a2 + 2);
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.CodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.CodingKeys;
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.PlusCodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.PlusCodingKeys;
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.MinusCodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.MinusCodingKeys;
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.NotCodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.NotCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ValueExpression.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23F709EA8 + 4 * byte_23FB511E9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23F709EDC + 4 * byte_23FB511E4[v4]))();
}

uint64_t sub_23F709EDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F709EE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F709EECLL);
  return result;
}

uint64_t sub_23F709EF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F709F00);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23F709F04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F709F0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ValueExpression.CodingKeys()
{
  return &type metadata for ValueExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.NullCodingKeys()
{
  return &type metadata for ValueExpression.NullCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.BoolCodingKeys()
{
  return &type metadata for ValueExpression.BoolCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.IntCodingKeys()
{
  return &type metadata for ValueExpression.IntCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.DoubleCodingKeys()
{
  return &type metadata for ValueExpression.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.StringCodingKeys()
{
  return &type metadata for ValueExpression.StringCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.ArrayCodingKeys()
{
  return &type metadata for ValueExpression.ArrayCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.SymbolCodingKeys()
{
  return &type metadata for ValueExpression.SymbolCodingKeys;
}

uint64_t storeEnumTagSinglePayload for Expression.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_23F709FE4 + 4 * byte_23FB511F3[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_23F70A018 + 4 * byte_23FB511EE[v4]))();
}

uint64_t sub_23F70A018(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F70A020(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F70A028);
  return result;
}

uint64_t sub_23F70A034(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F70A03CLL);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_23F70A040(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F70A048(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Expression.CodingKeys()
{
  return &type metadata for Expression.CodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ValueCodingKeys()
{
  return &type metadata for Expression.ValueCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.StatementIdCodingKeys()
{
  return &type metadata for Expression.StatementIdCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.PrefixCodingKeys()
{
  return &type metadata for Expression.PrefixCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.InfixCodingKeys()
{
  return &type metadata for Expression.InfixCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.DotCodingKeys()
{
  return &type metadata for Expression.DotCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.IndexCodingKeys()
{
  return &type metadata for Expression.IndexCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.UpdateParametersCodingKeys()
{
  return &type metadata for Expression.UpdateParametersCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.CallCodingKeys()
{
  return &type metadata for Expression.CallCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.SayCodingKeys()
{
  return &type metadata for Expression.SayCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.PickCodingKeys()
{
  return &type metadata for Expression.PickCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ConfirmCodingKeys()
{
  return &type metadata for Expression.ConfirmCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.SearchCodingKeys()
{
  return &type metadata for Expression.SearchCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.PickOneCodingKeys()
{
  return &type metadata for Expression.PickOneCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ResolveToolCodingKeys()
{
  return &type metadata for Expression.ResolveToolCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.UndoCodingKeys()
{
  return &type metadata for Expression.UndoCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.RejectCodingKeys()
{
  return &type metadata for Expression.RejectCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.CancelCodingKeys()
{
  return &type metadata for Expression.CancelCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.GetMentionedAppsCodingKeys()
{
  return &type metadata for Expression.GetMentionedAppsCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.NoMatchingToolCodingKeys()
{
  return &type metadata for Expression.NoMatchingToolCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ContinuePlanningCodingKeys()
{
  return &type metadata for Expression.ContinuePlanningCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.EndOfPlanCodingKeys()
{
  return &type metadata for Expression.EndOfPlanCodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport14OpenExpressionV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F70A1F4 + 4 * byte_23FB511F8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F70A214 + 4 * byte_23FB511FD[v4]))();
}

_BYTE *sub_23F70A1F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F70A214(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F70A21C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F70A224(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F70A22C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F70A234(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Expression.OpenCodingKeys()
{
  return &type metadata for Expression.OpenCodingKeys;
}

unint64_t sub_23F70A254()
{
  unint64_t result;

  result = qword_256EA5AA8;
  if (!qword_256EA5AA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB526E4, &type metadata for Expression.OpenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AA8);
  }
  return result;
}

unint64_t sub_23F70A294()
{
  unint64_t result;

  result = qword_256EA5AB0;
  if (!qword_256EA5AB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB528DC, &type metadata for Expression.CancelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AB0);
  }
  return result;
}

unint64_t sub_23F70A2D4()
{
  unint64_t result;

  result = qword_256EA5AB8;
  if (!qword_256EA5AB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52994, &type metadata for Expression.RejectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AB8);
  }
  return result;
}

unint64_t sub_23F70A314()
{
  unint64_t result;

  result = qword_256EA5AC0;
  if (!qword_256EA5AC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52A4C, &type metadata for Expression.UndoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AC0);
  }
  return result;
}

unint64_t sub_23F70A354()
{
  unint64_t result;

  result = qword_256EA5AC8;
  if (!qword_256EA5AC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52B04, &type metadata for Expression.ResolveToolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AC8);
  }
  return result;
}

unint64_t sub_23F70A394()
{
  unint64_t result;

  result = qword_256EA5AD0;
  if (!qword_256EA5AD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52BBC, &type metadata for Expression.PickOneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AD0);
  }
  return result;
}

unint64_t sub_23F70A3D4()
{
  unint64_t result;

  result = qword_256EA5AD8;
  if (!qword_256EA5AD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52C74, &type metadata for Expression.SearchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AD8);
  }
  return result;
}

unint64_t sub_23F70A414()
{
  unint64_t result;

  result = qword_256EA5AE0;
  if (!qword_256EA5AE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52D2C, &type metadata for Expression.ConfirmCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AE0);
  }
  return result;
}

unint64_t sub_23F70A454()
{
  unint64_t result;

  result = qword_256EA5AE8;
  if (!qword_256EA5AE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52DE4, &type metadata for Expression.PickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AE8);
  }
  return result;
}

unint64_t sub_23F70A494()
{
  unint64_t result;

  result = qword_256EA5AF0;
  if (!qword_256EA5AF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52E9C, &type metadata for Expression.SayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AF0);
  }
  return result;
}

unint64_t sub_23F70A4D4()
{
  unint64_t result;

  result = qword_256EA5AF8;
  if (!qword_256EA5AF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52F54, &type metadata for Expression.CallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5AF8);
  }
  return result;
}

unint64_t sub_23F70A514()
{
  unint64_t result;

  result = qword_256EA5B00;
  if (!qword_256EA5B00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5300C, &type metadata for Expression.UpdateParametersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B00);
  }
  return result;
}

unint64_t sub_23F70A554()
{
  unint64_t result;

  result = qword_256EA5B08;
  if (!qword_256EA5B08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB530C4, &type metadata for Expression.IndexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B08);
  }
  return result;
}

unint64_t sub_23F70A594()
{
  unint64_t result;

  result = qword_256EA5B10;
  if (!qword_256EA5B10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5317C, &type metadata for Expression.DotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B10);
  }
  return result;
}

unint64_t sub_23F70A5D4()
{
  unint64_t result;

  result = qword_256EA5B18;
  if (!qword_256EA5B18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53234, &type metadata for Expression.InfixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B18);
  }
  return result;
}

unint64_t sub_23F70A614()
{
  unint64_t result;

  result = qword_256EA5B20;
  if (!qword_256EA5B20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB532EC, &type metadata for Expression.PrefixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B20);
  }
  return result;
}

unint64_t sub_23F70A654()
{
  unint64_t result;

  result = qword_256EA5B28;
  if (!qword_256EA5B28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB533A4, &type metadata for Expression.StatementIdCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B28);
  }
  return result;
}

unint64_t sub_23F70A694()
{
  unint64_t result;

  result = qword_256EA5B30;
  if (!qword_256EA5B30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5345C, &type metadata for Expression.ValueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B30);
  }
  return result;
}

unint64_t sub_23F70A6D4()
{
  unint64_t result;

  result = qword_256EA5B38;
  if (!qword_256EA5B38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53514, &type metadata for Expression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B38);
  }
  return result;
}

unint64_t sub_23F70A714()
{
  unint64_t result;

  result = qword_256EA5B40;
  if (!qword_256EA5B40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB535CC, &type metadata for ValueExpression.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B40);
  }
  return result;
}

unint64_t sub_23F70A754()
{
  unint64_t result;

  result = qword_256EA5B48;
  if (!qword_256EA5B48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53684, &type metadata for ValueExpression.ArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B48);
  }
  return result;
}

unint64_t sub_23F70A794()
{
  unint64_t result;

  result = qword_256EA5B50;
  if (!qword_256EA5B50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5373C, &type metadata for ValueExpression.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B50);
  }
  return result;
}

unint64_t sub_23F70A7D4()
{
  unint64_t result;

  result = qword_256EA5B58;
  if (!qword_256EA5B58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB537F4, &type metadata for ValueExpression.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B58);
  }
  return result;
}

unint64_t sub_23F70A814()
{
  unint64_t result;

  result = qword_256EA5B60;
  if (!qword_256EA5B60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB538AC, &type metadata for ValueExpression.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B60);
  }
  return result;
}

unint64_t sub_23F70A854()
{
  unint64_t result;

  result = qword_256EA5B68;
  if (!qword_256EA5B68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53964, &type metadata for ValueExpression.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B68);
  }
  return result;
}

unint64_t sub_23F70A894()
{
  unint64_t result;

  result = qword_256EA5B70;
  if (!qword_256EA5B70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53A6C, &type metadata for ValueExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B70);
  }
  return result;
}

unint64_t sub_23F70A8D4()
{
  unint64_t result;

  result = qword_256EA5B78;
  if (!qword_256EA5B78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53C14, &type metadata for PrefixExpression.PrefixOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B78);
  }
  return result;
}

unint64_t sub_23F70A914()
{
  unint64_t result;

  result = qword_256EA5B80;
  if (!qword_256EA5B80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53CCC, &type metadata for PrefixExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B80);
  }
  return result;
}

unint64_t sub_23F70A954()
{
  unint64_t result;

  result = qword_256EA5B88;
  if (!qword_256EA5B88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54374, &type metadata for InfixExpression.InfixOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B88);
  }
  return result;
}

unint64_t sub_23F70A994()
{
  unint64_t result;

  result = qword_256EA5B90;
  if (!qword_256EA5B90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5442C, &type metadata for InfixExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B90);
  }
  return result;
}

unint64_t sub_23F70A9D4()
{
  unint64_t result;

  result = qword_256EA5B98;
  if (!qword_256EA5B98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB544E4, &type metadata for DotExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5B98);
  }
  return result;
}

unint64_t sub_23F70AA14()
{
  unint64_t result;

  result = qword_256EA5BA0;
  if (!qword_256EA5BA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5459C, &type metadata for IndexExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BA0);
  }
  return result;
}

unint64_t sub_23F70AA54()
{
  unint64_t result;

  result = qword_256EA5BA8;
  if (!qword_256EA5BA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54654, &type metadata for UpdateParametersExpression.UpdateParameter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BA8);
  }
  return result;
}

unint64_t sub_23F70AA94()
{
  unint64_t result;

  result = qword_256EA5BB0;
  if (!qword_256EA5BB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB547AC, &type metadata for UpdateParametersExpression.UpdateKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BB0);
  }
  return result;
}

unint64_t sub_23F70AAD4()
{
  unint64_t result;

  result = qword_256EA5BB8;
  if (!qword_256EA5BB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54864, &type metadata for UpdateParametersExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BB8);
  }
  return result;
}

unint64_t sub_23F70AB14()
{
  unint64_t result;

  result = qword_256EA5BC0;
  if (!qword_256EA5BC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5491C, &type metadata for CallExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BC0);
  }
  return result;
}

unint64_t sub_23F70AB54()
{
  unint64_t result;

  result = qword_256EA5BC8;
  if (!qword_256EA5BC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB549D4, &type metadata for SayExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BC8);
  }
  return result;
}

unint64_t sub_23F70AB94()
{
  unint64_t result;

  result = qword_256EA5BD0;
  if (!qword_256EA5BD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54A8C, &type metadata for PickExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BD0);
  }
  return result;
}

unint64_t sub_23F70ABD4()
{
  unint64_t result;

  result = qword_256EA5BD8;
  if (!qword_256EA5BD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54B44, &type metadata for ConfirmExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BD8);
  }
  return result;
}

unint64_t sub_23F70AC14()
{
  unint64_t result;

  result = qword_256EA5BE0;
  if (!qword_256EA5BE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54BFC, &type metadata for SearchExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BE0);
  }
  return result;
}

unint64_t sub_23F70AC54()
{
  unint64_t result;

  result = qword_256EA5BE8;
  if (!qword_256EA5BE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54CB4, &type metadata for PickOneExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BE8);
  }
  return result;
}

unint64_t sub_23F70AC94()
{
  unint64_t result;

  result = qword_256EA5BF0;
  if (!qword_256EA5BF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54D6C, &type metadata for ResolveToolExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BF0);
  }
  return result;
}

unint64_t sub_23F70ACD4()
{
  unint64_t result;

  result = qword_256EA5BF8;
  if (!qword_256EA5BF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54E24, &type metadata for UndoExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5BF8);
  }
  return result;
}

unint64_t sub_23F70AD14()
{
  unint64_t result;

  result = qword_256EA5C00;
  if (!qword_256EA5C00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54EDC, &type metadata for RejectExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C00);
  }
  return result;
}

unint64_t sub_23F70AD54()
{
  unint64_t result;

  result = qword_256EA5C08;
  if (!qword_256EA5C08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54F94, &type metadata for CancelExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C08);
  }
  return result;
}

unint64_t sub_23F70AD94()
{
  unint64_t result;

  result = qword_256EA5C10;
  if (!qword_256EA5C10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5504C, &type metadata for OpenExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C10);
  }
  return result;
}

unint64_t sub_23F70ADD4()
{
  unint64_t result;

  result = qword_256EA5C18;
  if (!qword_256EA5C18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54FBC, &type metadata for OpenExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C18);
  }
  return result;
}

unint64_t sub_23F70AE14()
{
  unint64_t result;

  result = qword_256EA5C20;
  if (!qword_256EA5C20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54FE4, &type metadata for OpenExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C20);
  }
  return result;
}

unint64_t sub_23F70AE54()
{
  unint64_t result;

  result = qword_256EA5C28;
  if (!qword_256EA5C28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54F04, &type metadata for CancelExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C28);
  }
  return result;
}

unint64_t sub_23F70AE94()
{
  unint64_t result;

  result = qword_256EA5C30;
  if (!qword_256EA5C30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54F2C, &type metadata for CancelExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C30);
  }
  return result;
}

unint64_t sub_23F70AED4()
{
  unint64_t result;

  result = qword_256EA5C38;
  if (!qword_256EA5C38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54E4C, &type metadata for RejectExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C38);
  }
  return result;
}

unint64_t sub_23F70AF14()
{
  unint64_t result;

  result = qword_256EA5C40;
  if (!qword_256EA5C40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54E74, &type metadata for RejectExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C40);
  }
  return result;
}

unint64_t sub_23F70AF54()
{
  unint64_t result;

  result = qword_256EA5C48;
  if (!qword_256EA5C48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54D94, &type metadata for UndoExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C48);
  }
  return result;
}

unint64_t sub_23F70AF94()
{
  unint64_t result;

  result = qword_256EA5C50;
  if (!qword_256EA5C50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54DBC, &type metadata for UndoExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C50);
  }
  return result;
}

unint64_t sub_23F70AFD4()
{
  unint64_t result;

  result = qword_256EA5C58;
  if (!qword_256EA5C58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54CDC, &type metadata for ResolveToolExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C58);
  }
  return result;
}

unint64_t sub_23F70B014()
{
  unint64_t result;

  result = qword_256EA5C60;
  if (!qword_256EA5C60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54D04, &type metadata for ResolveToolExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C60);
  }
  return result;
}

unint64_t sub_23F70B054()
{
  unint64_t result;

  result = qword_256EA5C68;
  if (!qword_256EA5C68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54C24, &type metadata for PickOneExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C68);
  }
  return result;
}

unint64_t sub_23F70B094()
{
  unint64_t result;

  result = qword_256EA5C70;
  if (!qword_256EA5C70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54C4C, &type metadata for PickOneExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C70);
  }
  return result;
}

unint64_t sub_23F70B0D4()
{
  unint64_t result;

  result = qword_256EA5C78;
  if (!qword_256EA5C78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54B6C, &type metadata for SearchExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C78);
  }
  return result;
}

unint64_t sub_23F70B114()
{
  unint64_t result;

  result = qword_256EA5C80;
  if (!qword_256EA5C80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54B94, &type metadata for SearchExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C80);
  }
  return result;
}

unint64_t sub_23F70B154()
{
  unint64_t result;

  result = qword_256EA5C88;
  if (!qword_256EA5C88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54AB4, &type metadata for ConfirmExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C88);
  }
  return result;
}

unint64_t sub_23F70B194()
{
  unint64_t result;

  result = qword_256EA5C90;
  if (!qword_256EA5C90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54ADC, &type metadata for ConfirmExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C90);
  }
  return result;
}

unint64_t sub_23F70B1D4()
{
  unint64_t result;

  result = qword_256EA5C98;
  if (!qword_256EA5C98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB549FC, &type metadata for PickExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5C98);
  }
  return result;
}

unint64_t sub_23F70B214()
{
  unint64_t result;

  result = qword_256EA5CA0;
  if (!qword_256EA5CA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54A24, &type metadata for PickExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CA0);
  }
  return result;
}

unint64_t sub_23F70B254()
{
  unint64_t result;

  result = qword_256EA5CA8;
  if (!qword_256EA5CA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54944, &type metadata for SayExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CA8);
  }
  return result;
}

unint64_t sub_23F70B294()
{
  unint64_t result;

  result = qword_256EA5CB0;
  if (!qword_256EA5CB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5496C, &type metadata for SayExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CB0);
  }
  return result;
}

unint64_t sub_23F70B2D4()
{
  unint64_t result;

  result = qword_256EA5CB8;
  if (!qword_256EA5CB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5488C, &type metadata for CallExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CB8);
  }
  return result;
}

unint64_t sub_23F70B314()
{
  unint64_t result;

  result = qword_256EA5CC0;
  if (!qword_256EA5CC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB548B4, &type metadata for CallExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CC0);
  }
  return result;
}

unint64_t sub_23F70B354()
{
  unint64_t result;

  result = qword_256EA5CC8;
  if (!qword_256EA5CC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB547D4, &type metadata for UpdateParametersExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CC8);
  }
  return result;
}

unint64_t sub_23F70B394()
{
  unint64_t result;

  result = qword_256EA5CD0;
  if (!qword_256EA5CD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB547FC, &type metadata for UpdateParametersExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CD0);
  }
  return result;
}

unint64_t sub_23F70B3D4()
{
  unint64_t result;

  result = qword_256EA5CD8;
  if (!qword_256EA5CD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB546CC, &type metadata for UpdateParametersExpression.UpdateKind.AppendCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CD8);
  }
  return result;
}

unint64_t sub_23F70B414()
{
  unint64_t result;

  result = qword_256EA5CE0;
  if (!qword_256EA5CE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB546F4, &type metadata for UpdateParametersExpression.UpdateKind.AppendCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CE0);
  }
  return result;
}

unint64_t sub_23F70B454()
{
  unint64_t result;

  result = qword_256EA5CE8;
  if (!qword_256EA5CE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5467C, &type metadata for UpdateParametersExpression.UpdateKind.ReplaceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CE8);
  }
  return result;
}

unint64_t sub_23F70B494()
{
  unint64_t result;

  result = qword_256EA5CF0;
  if (!qword_256EA5CF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB546A4, &type metadata for UpdateParametersExpression.UpdateKind.ReplaceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CF0);
  }
  return result;
}

unint64_t sub_23F70B4D4()
{
  unint64_t result;

  result = qword_256EA5CF8;
  if (!qword_256EA5CF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5471C, &type metadata for UpdateParametersExpression.UpdateKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5CF8);
  }
  return result;
}

unint64_t sub_23F70B514()
{
  unint64_t result;

  result = qword_256EA5D00;
  if (!qword_256EA5D00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54744, &type metadata for UpdateParametersExpression.UpdateKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D00);
  }
  return result;
}

unint64_t sub_23F70B554()
{
  unint64_t result;

  result = qword_256EA5D08;
  if (!qword_256EA5D08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB545C4, &type metadata for UpdateParametersExpression.UpdateParameter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D08);
  }
  return result;
}

unint64_t sub_23F70B594()
{
  unint64_t result;

  result = qword_256EA5D10;
  if (!qword_256EA5D10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB545EC, &type metadata for UpdateParametersExpression.UpdateParameter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D10);
  }
  return result;
}

unint64_t sub_23F70B5D4()
{
  unint64_t result;

  result = qword_256EA5D18;
  if (!qword_256EA5D18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5450C, &type metadata for IndexExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D18);
  }
  return result;
}

unint64_t sub_23F70B614()
{
  unint64_t result;

  result = qword_256EA5D20;
  if (!qword_256EA5D20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54534, &type metadata for IndexExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D20);
  }
  return result;
}

unint64_t sub_23F70B654()
{
  unint64_t result;

  result = qword_256EA5D28;
  if (!qword_256EA5D28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54454, &type metadata for DotExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D28);
  }
  return result;
}

unint64_t sub_23F70B694()
{
  unint64_t result;

  result = qword_256EA5D30;
  if (!qword_256EA5D30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5447C, &type metadata for DotExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D30);
  }
  return result;
}

unint64_t sub_23F70B6D4()
{
  unint64_t result;

  result = qword_256EA5D38;
  if (!qword_256EA5D38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5439C, &type metadata for InfixExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D38);
  }
  return result;
}

unint64_t sub_23F70B714()
{
  unint64_t result;

  result = qword_256EA5D40;
  if (!qword_256EA5D40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB543C4, &type metadata for InfixExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D40);
  }
  return result;
}

unint64_t sub_23F70B754()
{
  unint64_t result;

  result = qword_256EA5D48;
  if (!qword_256EA5D48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54294, &type metadata for InfixExpression.InfixOp.AssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D48);
  }
  return result;
}

unint64_t sub_23F70B794()
{
  unint64_t result;

  result = qword_256EA5D50;
  if (!qword_256EA5D50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB542BC, &type metadata for InfixExpression.InfixOp.AssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D50);
  }
  return result;
}

unint64_t sub_23F70B7D4()
{
  unint64_t result;

  result = qword_256EA5D58;
  if (!qword_256EA5D58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54244, &type metadata for InfixExpression.InfixOp.AddCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D58);
  }
  return result;
}

unint64_t sub_23F70B814()
{
  unint64_t result;

  result = qword_256EA5D60;
  if (!qword_256EA5D60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5426C, &type metadata for InfixExpression.InfixOp.AddCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D60);
  }
  return result;
}

unint64_t sub_23F70B854()
{
  unint64_t result;

  result = qword_256EA5D68;
  if (!qword_256EA5D68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB541F4, &type metadata for InfixExpression.InfixOp.AddAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D68);
  }
  return result;
}

unint64_t sub_23F70B894()
{
  unint64_t result;

  result = qword_256EA5D70;
  if (!qword_256EA5D70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5421C, &type metadata for InfixExpression.InfixOp.AddAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D70);
  }
  return result;
}

unint64_t sub_23F70B8D4()
{
  unint64_t result;

  result = qword_256EA5D78;
  if (!qword_256EA5D78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB541A4, &type metadata for InfixExpression.InfixOp.SubtractCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D78);
  }
  return result;
}

unint64_t sub_23F70B914()
{
  unint64_t result;

  result = qword_256EA5D80;
  if (!qword_256EA5D80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB541CC, &type metadata for InfixExpression.InfixOp.SubtractCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D80);
  }
  return result;
}

unint64_t sub_23F70B954()
{
  unint64_t result;

  result = qword_256EA5D88;
  if (!qword_256EA5D88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54154, &type metadata for InfixExpression.InfixOp.SubtractAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D88);
  }
  return result;
}

unint64_t sub_23F70B994()
{
  unint64_t result;

  result = qword_256EA5D90;
  if (!qword_256EA5D90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5417C, &type metadata for InfixExpression.InfixOp.SubtractAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D90);
  }
  return result;
}

unint64_t sub_23F70B9D4()
{
  unint64_t result;

  result = qword_256EA5D98;
  if (!qword_256EA5D98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54104, &type metadata for InfixExpression.InfixOp.DivideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5D98);
  }
  return result;
}

unint64_t sub_23F70BA14()
{
  unint64_t result;

  result = qword_256EA5DA0;
  if (!qword_256EA5DA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5412C, &type metadata for InfixExpression.InfixOp.DivideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DA0);
  }
  return result;
}

unint64_t sub_23F70BA54()
{
  unint64_t result;

  result = qword_256EA5DA8;
  if (!qword_256EA5DA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB540B4, &type metadata for InfixExpression.InfixOp.DivideAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DA8);
  }
  return result;
}

unint64_t sub_23F70BA94()
{
  unint64_t result;

  result = qword_256EA5DB0;
  if (!qword_256EA5DB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB540DC, &type metadata for InfixExpression.InfixOp.DivideAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DB0);
  }
  return result;
}

unint64_t sub_23F70BAD4()
{
  unint64_t result;

  result = qword_256EA5DB8;
  if (!qword_256EA5DB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54064, &type metadata for InfixExpression.InfixOp.MultiplyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DB8);
  }
  return result;
}

unint64_t sub_23F70BB14()
{
  unint64_t result;

  result = qword_256EA5DC0;
  if (!qword_256EA5DC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5408C, &type metadata for InfixExpression.InfixOp.MultiplyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DC0);
  }
  return result;
}

unint64_t sub_23F70BB54()
{
  unint64_t result;

  result = qword_256EA5DC8;
  if (!qword_256EA5DC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB54014, &type metadata for InfixExpression.InfixOp.MultiplyAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DC8);
  }
  return result;
}

unint64_t sub_23F70BB94()
{
  unint64_t result;

  result = qword_256EA5DD0;
  if (!qword_256EA5DD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5403C, &type metadata for InfixExpression.InfixOp.MultiplyAssignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DD0);
  }
  return result;
}

unint64_t sub_23F70BBD4()
{
  unint64_t result;

  result = qword_256EA5DD8;
  if (!qword_256EA5DD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53FC4, &type metadata for InfixExpression.InfixOp.ExponentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DD8);
  }
  return result;
}

unint64_t sub_23F70BC14()
{
  unint64_t result;

  result = qword_256EA5DE0;
  if (!qword_256EA5DE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53FEC, &type metadata for InfixExpression.InfixOp.ExponentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DE0);
  }
  return result;
}

unint64_t sub_23F70BC54()
{
  unint64_t result;

  result = qword_256EA5DE8;
  if (!qword_256EA5DE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53F74, &type metadata for InfixExpression.InfixOp.EqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DE8);
  }
  return result;
}

unint64_t sub_23F70BC94()
{
  unint64_t result;

  result = qword_256EA5DF0;
  if (!qword_256EA5DF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53F9C, &type metadata for InfixExpression.InfixOp.EqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DF0);
  }
  return result;
}

unint64_t sub_23F70BCD4()
{
  unint64_t result;

  result = qword_256EA5DF8;
  if (!qword_256EA5DF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53F24, &type metadata for InfixExpression.InfixOp.NotEqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5DF8);
  }
  return result;
}

unint64_t sub_23F70BD14()
{
  unint64_t result;

  result = qword_256EA5E00;
  if (!qword_256EA5E00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53F4C, &type metadata for InfixExpression.InfixOp.NotEqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E00);
  }
  return result;
}

unint64_t sub_23F70BD54()
{
  unint64_t result;

  result = qword_256EA5E08;
  if (!qword_256EA5E08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53ED4, &type metadata for InfixExpression.InfixOp.InCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E08);
  }
  return result;
}

unint64_t sub_23F70BD94()
{
  unint64_t result;

  result = qword_256EA5E10;
  if (!qword_256EA5E10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53EFC, &type metadata for InfixExpression.InfixOp.InCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E10);
  }
  return result;
}

unint64_t sub_23F70BDD4()
{
  unint64_t result;

  result = qword_256EA5E18;
  if (!qword_256EA5E18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53E84, &type metadata for InfixExpression.InfixOp.GreaterThanEqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E18);
  }
  return result;
}

unint64_t sub_23F70BE14()
{
  unint64_t result;

  result = qword_256EA5E20;
  if (!qword_256EA5E20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53EAC, &type metadata for InfixExpression.InfixOp.GreaterThanEqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E20);
  }
  return result;
}

unint64_t sub_23F70BE54()
{
  unint64_t result;

  result = qword_256EA5E28;
  if (!qword_256EA5E28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53E34, &type metadata for InfixExpression.InfixOp.GreaterThanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E28);
  }
  return result;
}

unint64_t sub_23F70BE94()
{
  unint64_t result;

  result = qword_256EA5E30;
  if (!qword_256EA5E30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53E5C, &type metadata for InfixExpression.InfixOp.GreaterThanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E30);
  }
  return result;
}

unint64_t sub_23F70BED4()
{
  unint64_t result;

  result = qword_256EA5E38;
  if (!qword_256EA5E38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53DE4, &type metadata for InfixExpression.InfixOp.LessThanEqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E38);
  }
  return result;
}

unint64_t sub_23F70BF14()
{
  unint64_t result;

  result = qword_256EA5E40;
  if (!qword_256EA5E40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53E0C, &type metadata for InfixExpression.InfixOp.LessThanEqualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E40);
  }
  return result;
}

unint64_t sub_23F70BF54()
{
  unint64_t result;

  result = qword_256EA5E48;
  if (!qword_256EA5E48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53D94, &type metadata for InfixExpression.InfixOp.LessThanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E48);
  }
  return result;
}

unint64_t sub_23F70BF94()
{
  unint64_t result;

  result = qword_256EA5E50;
  if (!qword_256EA5E50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53DBC, &type metadata for InfixExpression.InfixOp.LessThanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E50);
  }
  return result;
}

unint64_t sub_23F70BFD4()
{
  unint64_t result;

  result = qword_256EA5E58;
  if (!qword_256EA5E58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53D44, &type metadata for InfixExpression.InfixOp.AndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E58);
  }
  return result;
}

unint64_t sub_23F70C014()
{
  unint64_t result;

  result = qword_256EA5E60;
  if (!qword_256EA5E60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53D6C, &type metadata for InfixExpression.InfixOp.AndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E60);
  }
  return result;
}

unint64_t sub_23F70C054()
{
  unint64_t result;

  result = qword_256EA5E68;
  if (!qword_256EA5E68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53CF4, &type metadata for InfixExpression.InfixOp.OrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E68);
  }
  return result;
}

unint64_t sub_23F70C094()
{
  unint64_t result;

  result = qword_256EA5E70;
  if (!qword_256EA5E70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53D1C, &type metadata for InfixExpression.InfixOp.OrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E70);
  }
  return result;
}

unint64_t sub_23F70C0D4()
{
  unint64_t result;

  result = qword_256EA5E78;
  if (!qword_256EA5E78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB542E4, &type metadata for InfixExpression.InfixOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E78);
  }
  return result;
}

unint64_t sub_23F70C114()
{
  unint64_t result;

  result = qword_256EA5E80;
  if (!qword_256EA5E80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5430C, &type metadata for InfixExpression.InfixOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E80);
  }
  return result;
}

unint64_t sub_23F70C154()
{
  unint64_t result;

  result = qword_256EA5E88;
  if (!qword_256EA5E88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53C3C, &type metadata for PrefixExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E88);
  }
  return result;
}

unint64_t sub_23F70C194()
{
  unint64_t result;

  result = qword_256EA5E90;
  if (!qword_256EA5E90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53C64, &type metadata for PrefixExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E90);
  }
  return result;
}

unint64_t sub_23F70C1D4()
{
  unint64_t result;

  result = qword_256EA5E98;
  if (!qword_256EA5E98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53B34, &type metadata for PrefixExpression.PrefixOp.PlusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5E98);
  }
  return result;
}

unint64_t sub_23F70C214()
{
  unint64_t result;

  result = qword_256EA5EA0;
  if (!qword_256EA5EA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53B5C, &type metadata for PrefixExpression.PrefixOp.PlusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EA0);
  }
  return result;
}

unint64_t sub_23F70C254()
{
  unint64_t result;

  result = qword_256EA5EA8;
  if (!qword_256EA5EA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53AE4, &type metadata for PrefixExpression.PrefixOp.MinusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EA8);
  }
  return result;
}

unint64_t sub_23F70C294()
{
  unint64_t result;

  result = qword_256EA5EB0;
  if (!qword_256EA5EB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53B0C, &type metadata for PrefixExpression.PrefixOp.MinusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EB0);
  }
  return result;
}

unint64_t sub_23F70C2D4()
{
  unint64_t result;

  result = qword_256EA5EB8;
  if (!qword_256EA5EB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53A94, &type metadata for PrefixExpression.PrefixOp.NotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EB8);
  }
  return result;
}

unint64_t sub_23F70C314()
{
  unint64_t result;

  result = qword_256EA5EC0;
  if (!qword_256EA5EC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53ABC, &type metadata for PrefixExpression.PrefixOp.NotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EC0);
  }
  return result;
}

unint64_t sub_23F70C354()
{
  unint64_t result;

  result = qword_256EA5EC8;
  if (!qword_256EA5EC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53B84, &type metadata for PrefixExpression.PrefixOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EC8);
  }
  return result;
}

unint64_t sub_23F70C394()
{
  unint64_t result;

  result = qword_256EA5ED0;
  if (!qword_256EA5ED0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53BAC, &type metadata for PrefixExpression.PrefixOp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5ED0);
  }
  return result;
}

unint64_t sub_23F70C3D4()
{
  unint64_t result;

  result = qword_256EA5ED8;
  if (!qword_256EA5ED8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5398C, &type metadata for ValueExpression.NullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5ED8);
  }
  return result;
}

unint64_t sub_23F70C414()
{
  unint64_t result;

  result = qword_256EA5EE0;
  if (!qword_256EA5EE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB539B4, &type metadata for ValueExpression.NullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EE0);
  }
  return result;
}

unint64_t sub_23F70C454()
{
  unint64_t result;

  result = qword_256EA5EE8;
  if (!qword_256EA5EE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB538D4, &type metadata for ValueExpression.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EE8);
  }
  return result;
}

unint64_t sub_23F70C494()
{
  unint64_t result;

  result = qword_256EA5EF0;
  if (!qword_256EA5EF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB538FC, &type metadata for ValueExpression.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EF0);
  }
  return result;
}

unint64_t sub_23F70C4D4()
{
  unint64_t result;

  result = qword_256EA5EF8;
  if (!qword_256EA5EF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5381C, &type metadata for ValueExpression.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5EF8);
  }
  return result;
}

unint64_t sub_23F70C514()
{
  unint64_t result;

  result = qword_256EA5F00;
  if (!qword_256EA5F00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53844, &type metadata for ValueExpression.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F00);
  }
  return result;
}

unint64_t sub_23F70C554()
{
  unint64_t result;

  result = qword_256EA5F08;
  if (!qword_256EA5F08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53764, &type metadata for ValueExpression.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F08);
  }
  return result;
}

unint64_t sub_23F70C594()
{
  unint64_t result;

  result = qword_256EA5F10;
  if (!qword_256EA5F10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5378C, &type metadata for ValueExpression.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F10);
  }
  return result;
}

unint64_t sub_23F70C5D4()
{
  unint64_t result;

  result = qword_256EA5F18;
  if (!qword_256EA5F18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB536AC, &type metadata for ValueExpression.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F18);
  }
  return result;
}

unint64_t sub_23F70C614()
{
  unint64_t result;

  result = qword_256EA5F20;
  if (!qword_256EA5F20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB536D4, &type metadata for ValueExpression.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F20);
  }
  return result;
}

unint64_t sub_23F70C654()
{
  unint64_t result;

  result = qword_256EA5F28;
  if (!qword_256EA5F28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB535F4, &type metadata for ValueExpression.ArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F28);
  }
  return result;
}

unint64_t sub_23F70C694()
{
  unint64_t result;

  result = qword_256EA5F30;
  if (!qword_256EA5F30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5361C, &type metadata for ValueExpression.ArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F30);
  }
  return result;
}

unint64_t sub_23F70C6D4()
{
  unint64_t result;

  result = qword_256EA5F38;
  if (!qword_256EA5F38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5353C, &type metadata for ValueExpression.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F38);
  }
  return result;
}

unint64_t sub_23F70C714()
{
  unint64_t result;

  result = qword_256EA5F40;
  if (!qword_256EA5F40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53564, &type metadata for ValueExpression.SymbolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F40);
  }
  return result;
}

unint64_t sub_23F70C754()
{
  unint64_t result;

  result = qword_256EA5F48;
  if (!qword_256EA5F48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB539DC, &type metadata for ValueExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F48);
  }
  return result;
}

unint64_t sub_23F70C794()
{
  unint64_t result;

  result = qword_256EA5F50;
  if (!qword_256EA5F50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53A04, &type metadata for ValueExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F50);
  }
  return result;
}

unint64_t sub_23F70C7D4()
{
  unint64_t result;

  result = qword_256EA5F58;
  if (!qword_256EA5F58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB533CC, &type metadata for Expression.ValueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F58);
  }
  return result;
}

unint64_t sub_23F70C814()
{
  unint64_t result;

  result = qword_256EA5F60;
  if (!qword_256EA5F60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB533F4, &type metadata for Expression.ValueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F60);
  }
  return result;
}

unint64_t sub_23F70C854()
{
  unint64_t result;

  result = qword_256EA5F68;
  if (!qword_256EA5F68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53314, &type metadata for Expression.StatementIdCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F68);
  }
  return result;
}

unint64_t sub_23F70C894()
{
  unint64_t result;

  result = qword_256EA5F70;
  if (!qword_256EA5F70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5333C, &type metadata for Expression.StatementIdCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F70);
  }
  return result;
}

unint64_t sub_23F70C8D4()
{
  unint64_t result;

  result = qword_256EA5F78;
  if (!qword_256EA5F78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5325C, &type metadata for Expression.PrefixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F78);
  }
  return result;
}

unint64_t sub_23F70C914()
{
  unint64_t result;

  result = qword_256EA5F80;
  if (!qword_256EA5F80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53284, &type metadata for Expression.PrefixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F80);
  }
  return result;
}

unint64_t sub_23F70C954()
{
  unint64_t result;

  result = qword_256EA5F88;
  if (!qword_256EA5F88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB531A4, &type metadata for Expression.InfixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F88);
  }
  return result;
}

unint64_t sub_23F70C994()
{
  unint64_t result;

  result = qword_256EA5F90;
  if (!qword_256EA5F90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB531CC, &type metadata for Expression.InfixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F90);
  }
  return result;
}

unint64_t sub_23F70C9D4()
{
  unint64_t result;

  result = qword_256EA5F98;
  if (!qword_256EA5F98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB530EC, &type metadata for Expression.DotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5F98);
  }
  return result;
}

unint64_t sub_23F70CA14()
{
  unint64_t result;

  result = qword_256EA5FA0;
  if (!qword_256EA5FA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53114, &type metadata for Expression.DotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FA0);
  }
  return result;
}

unint64_t sub_23F70CA54()
{
  unint64_t result;

  result = qword_256EA5FA8;
  if (!qword_256EA5FA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53034, &type metadata for Expression.IndexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FA8);
  }
  return result;
}

unint64_t sub_23F70CA94()
{
  unint64_t result;

  result = qword_256EA5FB0;
  if (!qword_256EA5FB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5305C, &type metadata for Expression.IndexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FB0);
  }
  return result;
}

unint64_t sub_23F70CAD4()
{
  unint64_t result;

  result = qword_256EA5FB8;
  if (!qword_256EA5FB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52F7C, &type metadata for Expression.UpdateParametersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FB8);
  }
  return result;
}

unint64_t sub_23F70CB14()
{
  unint64_t result;

  result = qword_256EA5FC0;
  if (!qword_256EA5FC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52FA4, &type metadata for Expression.UpdateParametersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FC0);
  }
  return result;
}

unint64_t sub_23F70CB54()
{
  unint64_t result;

  result = qword_256EA5FC8;
  if (!qword_256EA5FC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52EC4, &type metadata for Expression.CallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FC8);
  }
  return result;
}

unint64_t sub_23F70CB94()
{
  unint64_t result;

  result = qword_256EA5FD0;
  if (!qword_256EA5FD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52EEC, &type metadata for Expression.CallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FD0);
  }
  return result;
}

unint64_t sub_23F70CBD4()
{
  unint64_t result;

  result = qword_256EA5FD8;
  if (!qword_256EA5FD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52E0C, &type metadata for Expression.SayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FD8);
  }
  return result;
}

unint64_t sub_23F70CC14()
{
  unint64_t result;

  result = qword_256EA5FE0;
  if (!qword_256EA5FE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52E34, &type metadata for Expression.SayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FE0);
  }
  return result;
}

unint64_t sub_23F70CC54()
{
  unint64_t result;

  result = qword_256EA5FE8;
  if (!qword_256EA5FE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52D54, &type metadata for Expression.PickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FE8);
  }
  return result;
}

unint64_t sub_23F70CC94()
{
  unint64_t result;

  result = qword_256EA5FF0;
  if (!qword_256EA5FF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52D7C, &type metadata for Expression.PickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FF0);
  }
  return result;
}

unint64_t sub_23F70CCD4()
{
  unint64_t result;

  result = qword_256EA5FF8;
  if (!qword_256EA5FF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52C9C, &type metadata for Expression.ConfirmCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA5FF8);
  }
  return result;
}

unint64_t sub_23F70CD14()
{
  unint64_t result;

  result = qword_256EA6000;
  if (!qword_256EA6000)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52CC4, &type metadata for Expression.ConfirmCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6000);
  }
  return result;
}

unint64_t sub_23F70CD54()
{
  unint64_t result;

  result = qword_256EA6008;
  if (!qword_256EA6008)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52BE4, &type metadata for Expression.SearchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6008);
  }
  return result;
}

unint64_t sub_23F70CD94()
{
  unint64_t result;

  result = qword_256EA6010;
  if (!qword_256EA6010)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52C0C, &type metadata for Expression.SearchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6010);
  }
  return result;
}

unint64_t sub_23F70CDD4()
{
  unint64_t result;

  result = qword_256EA6018;
  if (!qword_256EA6018)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52B2C, &type metadata for Expression.PickOneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6018);
  }
  return result;
}

unint64_t sub_23F70CE14()
{
  unint64_t result;

  result = qword_256EA6020;
  if (!qword_256EA6020)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52B54, &type metadata for Expression.PickOneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6020);
  }
  return result;
}

unint64_t sub_23F70CE54()
{
  unint64_t result;

  result = qword_256EA6028;
  if (!qword_256EA6028)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52A74, &type metadata for Expression.ResolveToolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6028);
  }
  return result;
}

unint64_t sub_23F70CE94()
{
  unint64_t result;

  result = qword_256EA6030;
  if (!qword_256EA6030)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52A9C, &type metadata for Expression.ResolveToolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6030);
  }
  return result;
}

unint64_t sub_23F70CED4()
{
  unint64_t result;

  result = qword_256EA6038;
  if (!qword_256EA6038)
  {
    result = MEMORY[0x242674E5C](&unk_23FB529BC, &type metadata for Expression.UndoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6038);
  }
  return result;
}

unint64_t sub_23F70CF14()
{
  unint64_t result;

  result = qword_256EA6040;
  if (!qword_256EA6040)
  {
    result = MEMORY[0x242674E5C](&unk_23FB529E4, &type metadata for Expression.UndoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6040);
  }
  return result;
}

unint64_t sub_23F70CF54()
{
  unint64_t result;

  result = qword_256EA6048;
  if (!qword_256EA6048)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52904, &type metadata for Expression.RejectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6048);
  }
  return result;
}

unint64_t sub_23F70CF94()
{
  unint64_t result;

  result = qword_256EA6050;
  if (!qword_256EA6050)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5292C, &type metadata for Expression.RejectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6050);
  }
  return result;
}

unint64_t sub_23F70CFD4()
{
  unint64_t result;

  result = qword_256EA6058;
  if (!qword_256EA6058)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5284C, &type metadata for Expression.CancelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6058);
  }
  return result;
}

unint64_t sub_23F70D014()
{
  unint64_t result;

  result = qword_256EA6060;
  if (!qword_256EA6060)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52874, &type metadata for Expression.CancelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6060);
  }
  return result;
}

unint64_t sub_23F70D054()
{
  unint64_t result;

  result = qword_256EA6068;
  if (!qword_256EA6068)
  {
    result = MEMORY[0x242674E5C](&unk_23FB527FC, &type metadata for Expression.GetMentionedAppsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6068);
  }
  return result;
}

unint64_t sub_23F70D094()
{
  unint64_t result;

  result = qword_256EA6070;
  if (!qword_256EA6070)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52824, &type metadata for Expression.GetMentionedAppsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6070);
  }
  return result;
}

unint64_t sub_23F70D0D4()
{
  unint64_t result;

  result = qword_256EA6078;
  if (!qword_256EA6078)
  {
    result = MEMORY[0x242674E5C](&unk_23FB527AC, &type metadata for Expression.NoMatchingToolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6078);
  }
  return result;
}

unint64_t sub_23F70D114()
{
  unint64_t result;

  result = qword_256EA6080;
  if (!qword_256EA6080)
  {
    result = MEMORY[0x242674E5C](&unk_23FB527D4, &type metadata for Expression.NoMatchingToolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6080);
  }
  return result;
}

unint64_t sub_23F70D154()
{
  unint64_t result;

  result = qword_256EA6088;
  if (!qword_256EA6088)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5275C, &type metadata for Expression.ContinuePlanningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6088);
  }
  return result;
}

unint64_t sub_23F70D194()
{
  unint64_t result;

  result = qword_256EA6090;
  if (!qword_256EA6090)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52784, &type metadata for Expression.ContinuePlanningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6090);
  }
  return result;
}

unint64_t sub_23F70D1D4()
{
  unint64_t result;

  result = qword_256EA6098;
  if (!qword_256EA6098)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5270C, &type metadata for Expression.EndOfPlanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA6098);
  }
  return result;
}

unint64_t sub_23F70D214()
{
  unint64_t result;

  result = qword_256EA60A0;
  if (!qword_256EA60A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52734, &type metadata for Expression.EndOfPlanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA60A0);
  }
  return result;
}

unint64_t sub_23F70D254()
{
  unint64_t result;

  result = qword_256EA60A8;
  if (!qword_256EA60A8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB52654, &type metadata for Expression.OpenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA60A8);
  }
  return result;
}

unint64_t sub_23F70D294()
{
  unint64_t result;

  result = qword_256EA60B0;
  if (!qword_256EA60B0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5267C, &type metadata for Expression.OpenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA60B0);
  }
  return result;
}

unint64_t sub_23F70D2D4()
{
  unint64_t result;

  result = qword_256EA60B8;
  if (!qword_256EA60B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB53484, &type metadata for Expression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA60B8);
  }
  return result;
}

unint64_t sub_23F70D314()
{
  unint64_t result;

  result = qword_256EA60C0;
  if (!qword_256EA60C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB534AC, &type metadata for Expression.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA60C0);
  }
  return result;
}

uint64_t sub_23F70D3AC()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F70D3C8()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F70D3E0()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F70D3F0()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F70D40C()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F70D420@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v1, v2);
}

uint64_t sub_23F70D434@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_23F70D444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_23F70D458()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F70D46C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_23F70D47C()
{
  return sub_23FB2FB18();
}

void sub_23F70D48C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F8CA8(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_23F70D49C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23F70D4A8()
{
  return swift_getEnumCaseMultiPayload();
}

_QWORD *sub_23F70D4B8()
{
  _QWORD *v0;

  return sub_23F6ADC98(v0, v0[3]);
}

uint64_t sub_23F70D4D8@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_23F70D4E8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F70D4F0()
{
  return sub_23FB2FB18();
}

_QWORD *sub_23F70D508(_QWORD *a1)
{
  uint64_t v1;

  return sub_23F6ADC98(a1, v1);
}

uint64_t sub_23F70D520()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F70D53C()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F70D554()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D560()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 144);
}

uint64_t sub_23F70D56C()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F70D578()
{
  uint64_t v0;

  return v0;
}

void sub_23F70D58C(uint64_t a1)
{
  sub_23F6B4EEC(a1);
}

void sub_23F70D594(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F6F5920(a1, v3, a3);
}

uint64_t sub_23F70D59C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D5B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D5C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_23F6FEA10(a1, a2, a3);
  return v3;
}

void sub_23F70D5E8(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_23F6F8CA8(a1, *(_QWORD *)(a3 - 256), a2);
}

void sub_23F70D5F4()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_23F6F8C88(v1, v0);
}

uint64_t sub_23F70D600()
{
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_23F70D618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, a3, a4);
}

uint64_t sub_23F70D620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, a3);
}

uint64_t sub_23F70D628()
{
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

void sub_23F70D63C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6F8C88(a1, v1);
}

uint64_t sub_23F70D644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 88));
}

void sub_23F70D654(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

uint64_t sub_23F70D65C()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F70D66C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23F70D678()
{
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_23F70D6A0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

uint64_t sub_23F70D6CC()
{
  uint64_t v0;

  return v0;
}

void sub_23F70D6DC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6F8C88(a1, v1);
}

_QWORD *sub_23F70D6E4(_QWORD *a1)
{
  uint64_t v1;

  return sub_23F6ADC98(a1, v1);
}

uint64_t sub_23F70D710()
{
  return type metadata accessor for DotExpression(0);
}

uint64_t sub_23F70D728@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_23F70D730()
{
  JUMPOUT(0x242674E5CLL);
}

uint64_t sub_23F70D744()
{
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_23F70D750()
{
  return sub_23FB2FCB0();
}

uint64_t sub_23F70D764()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D780()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F70D78C()
{
  return sub_23FB2FB18();
}

void sub_23F70D7A4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_23F70D7C0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_23F70D7DC(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_23F70D7F8()
{
  return 0;
}

uint64_t sub_23F70D814()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D82C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D850()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D868()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D890()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70D8A0()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 20);
}

uint64_t sub_23F70D8B8(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v1);
}

uint64_t sub_23F70D8D4()
{
  uint64_t v0;

  return v0;
}

void sub_23F70D8EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F8CA8(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_23F70D8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 96));
}

uint64_t sub_23F70D90C()
{
  return sub_23FB2FADC();
}

uint64_t sub_23F70D91C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23F6FEA10(v2, v1, v0);
}

uint64_t sub_23F70D938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_23F70D944()
{
  return sub_23FB2FA40();
}

uint64_t sub_23F70D968()
{
  return 1;
}

void sub_23F70D978()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
}

uint64_t sub_23F70D990()
{
  return sub_23FB2FCB0();
}

uint64_t sub_23F70D998()
{
  return sub_23FB2FADC();
}

uint64_t sub_23F70D9B8()
{
  return sub_23FB2FC68();
}

uint64_t sub_23F70D9C8()
{
  return type metadata accessor for InfixExpression(0);
}

uint64_t sub_23F70D9D0()
{
  return type metadata accessor for DotExpression(0);
}

uint64_t sub_23F70D9E4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

unint64_t sub_23F70D9F0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 18;
  return sub_23F705194();
}

unint64_t sub_23F70D9FC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 18;
  return sub_23F6FEB98();
}

unint64_t sub_23F70DA08()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 17;
  return sub_23F7051D0();
}

unint64_t sub_23F70DA14()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 17;
  return sub_23F6FEBD4();
}

uint64_t sub_23F70DA20()
{
  uint64_t v0;

  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(*(_QWORD *)(v0 - 88));
}

unint64_t sub_23F70DA28()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 21;
  return sub_23F6FEAE4();
}

unint64_t sub_23F70DA34()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 16;
  return sub_23F70520C();
}

unint64_t sub_23F70DA40()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 16;
  return sub_23F6FEC10();
}

unint64_t sub_23F70DA4C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 15;
  return sub_23F705248();
}

unint64_t sub_23F70DA58()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 15;
  return sub_23F6FEC4C();
}

unint64_t sub_23F70DA64()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 14;
  return sub_23F705284();
}

unint64_t sub_23F70DA70()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 14;
  return sub_23F6FEC88();
}

unint64_t sub_23F70DA7C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 13;
  return sub_23F7052C0();
}

unint64_t sub_23F70DA88()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 13;
  return sub_23F6FECC4();
}

uint64_t sub_23F70DA94()
{
  uint64_t v0;

  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
}

unint64_t sub_23F70DA9C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 12;
  return sub_23F7052FC();
}

unint64_t sub_23F70DAA8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 12;
  return sub_23F6FED3C();
}

uint64_t sub_23F70DAB4()
{
  return sub_23FB2FA70();
}

unint64_t sub_23F70DAC0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 11;
  return sub_23F705338();
}

unint64_t sub_23F70DACC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 11;
  return sub_23F6FED78();
}

uint64_t sub_23F70DAD8()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 20);
}

void sub_23F70DAEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F6F8CA8(a1, *(_QWORD *)(v3 - 120), a3);
}

unint64_t sub_23F70DAF8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 10;
  return sub_23F705374();
}

unint64_t sub_23F70DB04()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 10;
  return sub_23F6FEDF0();
}

unint64_t sub_23F70DB10()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 9;
  return sub_23F7053B0();
}

unint64_t sub_23F70DB1C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 9;
  return sub_23F6FEE2C();
}

unint64_t sub_23F70DB28()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 8;
  return sub_23F7053EC();
}

unint64_t sub_23F70DB34()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 8;
  return sub_23F6FEE68();
}

unint64_t sub_23F70DB40()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 7;
  return sub_23F705428();
}

unint64_t sub_23F70DB4C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 7;
  return sub_23F6FEEE0();
}

uint64_t sub_23F70DB58()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23F70DB64()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 6;
  return sub_23F705464();
}

unint64_t sub_23F70DB70()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 6;
  return sub_23F6FEF58();
}

unint64_t sub_23F70DB7C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 89) = 6;
  return sub_23F704DB8();
}

uint64_t sub_23F70DB88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F70DB9C()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23F70DBBC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 5;
  return sub_23F7054A0();
}

unint64_t sub_23F70DBC8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 5;
  return sub_23F6FEF94();
}

unint64_t sub_23F70DBD4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 90) = 5;
  return sub_23F704DF4();
}

unint64_t sub_23F70DBE0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 4;
  return sub_23F7054DC();
}

unint64_t sub_23F70DBEC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 4;
  return sub_23F6FEFD0();
}

unint64_t sub_23F70DBF8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 105) = 4;
  return sub_23F704E30();
}

uint64_t sub_23F70DC04@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

unint64_t sub_23F70DC10()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
  return sub_23F705518();
}

unint64_t sub_23F70DC1C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 3;
  return sub_23F6FF00C();
}

unint64_t sub_23F70DC28()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 106) = 3;
  return sub_23F704E6C();
}

uint64_t sub_23F70DC34()
{
  uint64_t v0;

  return v0;
}

void sub_23F70DC40()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_23F6F8C88(v1, v0);
}

void sub_23F70DC4C()
{
  uint64_t v0;

  sub_23F6B4EEC(v0);
}

unint64_t sub_23F70DC58()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_23F704FF0();
}

unint64_t sub_23F70DC64()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_23F705554();
}

unint64_t sub_23F70DC70()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 2;
  return sub_23F6FF048();
}

unint64_t sub_23F70DC7C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 107) = 2;
  return sub_23F704EA8();
}

uint64_t sub_23F70DC88(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t sub_23F70DC94()
{
  return sub_23FB2FCB0();
}

uint64_t sub_23F70DCA0()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23F70DCB4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_23F705838();
}

unint64_t sub_23F70DCC0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_23F705590();
}

unint64_t sub_23F70DCCC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 1;
  return sub_23F6FF084();
}

unint64_t sub_23F70DCD8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 108) = 1;
  return sub_23F704EE4();
}

unint64_t sub_23F70DCE4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_23F70502C();
}

void sub_23F70DCF0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
}

uint64_t sub_23F70DD04()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return v0 - 66;
}

uint64_t sub_23F70DD18()
{
  uint64_t v0;

  return v0 - 72;
}

uint64_t sub_23F70DD2C()
{
  return sub_23FB2FCC8();
}

unint64_t sub_23F70DD5C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 20;
  return sub_23F6FEB20();
}

unint64_t sub_23F70DD68()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 19;
  return sub_23F6FEB5C();
}

uint64_t sub_23F70DD74(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t updated;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v17 = a1;
  v18 = a2;
  updated = type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
  v7 = *(_QWORD *)(updated - 8);
  MEMORY[0x24BDAC7A8](updated);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_23F711280();
    v11 = v20;
    v12 = *(_QWORD *)(type metadata accessor for AST.Update(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v16 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v17(v13, &v19);
      if (v4)
        break;
      v4 = 0;
      v20 = v11;
      v14 = *(_QWORD *)(v11 + 16);
      if (v14 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_23F711280();
        v11 = v20;
      }
      *(_QWORD *)(v11 + 16) = v14 + 1;
      sub_23F6F594C((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v14, type metadata accessor for UpdateParametersExpression.UpdateParameter);
      v13 += v16;
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_23F70DEEC(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v17 = sub_23FB2C764();
  v6 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_23F711208();
    v10 = v21;
    v11 = *(_QWORD *)(sub_23FB2C4B8() - 8);
    v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v16 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v18(v12, &v20);
      if (v4)
        break;
      v4 = 0;
      v21 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      if (v13 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        sub_23F711208();
        v10 = v21;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13, v8, v17);
      v12 += v16;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_23F70E068(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23F70E22C(a1, a2, a3, a4, type metadata accessor for SpeechRequestCandidate, (void (*)(BOOL, unint64_t, uint64_t))sub_23F711FC4, (uint64_t (*)(_QWORD))MEMORY[0x24BE527D8]);
}

uint64_t sub_23F70E094(void (*a1)(__int128 *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _BYTE *i;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_23F712494(0, v5, 0);
    v6 = v35;
    for (i = (_BYTE *)(a3 + 56); ; i += 32)
    {
      v9 = *((_QWORD *)i - 1);
      v10 = *i;
      v26 = *(_OWORD *)(i - 24);
      v27 = v9;
      v28 = v10;
      swift_bridgeObjectRetain();
      a1(&v29, &v26);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v11 = v29;
      v13 = v30;
      v12 = v31;
      v14 = v32;
      v15 = v33;
      v16 = v34;
      v35 = v6;
      v18 = *(_QWORD *)(v6 + 16);
      v17 = *(_QWORD *)(v6 + 24);
      if (v18 >= v17 >> 1)
      {
        v24 = v29;
        v22 = v34;
        v23 = v31;
        v20 = v33;
        sub_23F712494(v17 > 1, v18 + 1, 1);
        v16 = v22;
        v12 = v23;
        v15 = v20;
        v11 = v24;
        v6 = v35;
      }
      *(_QWORD *)(v6 + 16) = v18 + 1;
      v19 = v6 + 56 * v18;
      *(_OWORD *)(v19 + 32) = v11;
      *(_QWORD *)(v19 + 48) = v13;
      *(_QWORD *)(v19 + 56) = v12;
      *(_QWORD *)(v19 + 64) = v14;
      *(_BYTE *)(v19 + 72) = v15;
      *(_QWORD *)(v19 + 80) = v16;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_23F70E200(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23F70E22C(a1, a2, a3, a4, type metadata accessor for Session.Event, (void (*)(BOOL, unint64_t, uint64_t))sub_23F711A00, type metadata accessor for Session.Event.Payload);
}

uint64_t sub_23F70E22C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(BOOL, unint64_t, uint64_t), uint64_t (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  void (*v24)(BOOL, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  v10 = v7;
  v27 = a1;
  v28 = a2;
  v26 = a5;
  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v23 - v14;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v29 = MEMORY[0x24BEE4AF8];
    v24 = a6;
    a6(0, v16, 0);
    v17 = v29;
    v18 = *(_QWORD *)(a7(0) - 8);
    v19 = a3 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v25 = *(_QWORD *)(v18 + 72);
    while (1)
    {
      v27(v19);
      if (v10)
        break;
      v10 = 0;
      v29 = v17;
      v21 = *(_QWORD *)(v17 + 16);
      v20 = *(_QWORD *)(v17 + 24);
      if (v21 >= v20 >> 1)
      {
        v24(v20 > 1, v21 + 1, 1);
        v17 = v29;
      }
      *(_QWORD *)(v17 + 16) = v21 + 1;
      sub_23F6F594C((uint64_t)v15, v17+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v21, v26);
      v19 += v25;
      if (!--v16)
        return v17;
    }
    swift_release();
  }
  return v17;
}

uint64_t sub_23F70E3B0()
{
  return sub_23F70E580();
}

uint64_t sub_23F70E3BC()
{
  return sub_23F70E3D4();
}

uint64_t sub_23F70E3C8()
{
  return sub_23F70E3D4();
}

uint64_t sub_23F70E3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  sub_23F714048();
  v3 = sub_23F6916B8(v2);
  if (v1)
  {
    v4 = sub_23F713F10();
    sub_23F6B4F58(v4, v5, v6);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return sub_23F713EE0(v0, v7, 1, v3);
}

unint64_t sub_23F70E424(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    sub_23F7CBC6C(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = sub_23FB2F7A0();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        sub_23FB2F83C();
      v5 = sub_23FB2F848();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t sub_23F70E500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23FB29498();
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = 1;
  }
  else
  {
    sub_23F713D84(result, v5, a1, a2);
    v7 = 0;
  }
  v8 = type metadata accessor for ToolboxCustomKeyResult(0);
  return sub_23F70D618(a2, v7, 1, v8);
}

uint64_t sub_23F70E580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;

  sub_23F714048();
  v3 = v2(0);
  if (v1)
  {
    v4 = sub_23F713F10();
    sub_23F6F5920(v4, v5, v6);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return sub_23F713EE0(v0, v7, 1, v3);
}

void sub_23F70E5D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v3 = type metadata accessor for Expression(0);
  MEMORY[0x24BDAC7A8](v3);
  v22 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ProgramStatement(0);
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v24 = (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - v8;
  v29 = MEMORY[0x24BEE4AF8];
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v19 = v1;
    v10 = 0;
    v11 = type metadata accessor for ProgramStatement;
    v20 = a1;
    v21 = v3;
    v12 = (uint64_t)v22;
    while (v10 < *(_QWORD *)(a1 + 16))
    {
      v13 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      v27 = *(_QWORD *)(v25 + 72);
      v28 = v13;
      sub_23F6F5920(a1 + v13 + v27 * v10, (uint64_t)v9, v11);
      sub_23F6F5920((uint64_t)&v9[*(int *)(v26 + 20)], v12, type metadata accessor for Expression);
      v14 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
      sub_23F6D3508(v12, type metadata accessor for Expression);
      if (v14 == 6)
      {
        v15 = v11;
        sub_23F6F594C((uint64_t)v9, v24, v11);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_23F711244();
        v16 = v29;
        v17 = *(_QWORD *)(v29 + 16);
        if (v17 >= *(_QWORD *)(v29 + 24) >> 1)
        {
          sub_23F711244();
          v16 = v29;
        }
        *(_QWORD *)(v16 + 16) = v17 + 1;
        v18 = v16 + v28 + v17 * v27;
        v11 = v15;
        sub_23F6F594C(v24, v18, v15);
        a1 = v20;
      }
      else
      {
        sub_23F6D3508((uint64_t)v9, v11);
      }
      if (v23 == ++v10)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
  }
}

void ExpressionConverter.transcript.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F6B4F58(v1, a1, &qword_256EA60C8);
}

void ExpressionConverter.transcript.setter(uint64_t a1)
{
  uint64_t v1;

  sub_23F710E80(a1, v1, &qword_256EA60C8);
}

uint64_t (*ExpressionConverter.transcript.modify())()
{
  return nullsub_1;
}

void ExpressionConverter.init(transcript:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for Session.Transcript(0);
  sub_23F693EC8();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v4, v5, v6, v7);
  sub_23F710E80(a1, a2, &qword_256EA60C8);
}

void ExpressionConverter.toExpression(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  char *v45;

  type metadata accessor for UndoExpression(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B51A4();
  sub_23F6916B8(&qword_256EA49D8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B6580();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F693E0C();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B6580();
  sub_23F6916B8(&qword_256EA60D0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  type metadata accessor for AST.Update(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  sub_23F70D434(v8);
  v9 = sub_23FB2C4B8();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F693E0C();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6D3D14();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6D3D14();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6D3D14();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6D3D14();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B6580();
  sub_23F70D434(v16);
  v17 = sub_23FB2C764();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F693E0C();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6D3D14();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6B6580();
  v31 = sub_23F70D434(v30);
  type metadata accessor for AST.FlatValue(v31);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F713FE0();
  v36 = MEMORY[0x24BDAC7A8](v35);
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6D3D14();
  sub_23F713E20();
  v38 = MEMORY[0x24BDAC7A8](v37);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v40 = MEMORY[0x24BDAC7A8](v39);
  MEMORY[0x24BDAC7A8](v40);
  type metadata accessor for AST.FlatExpr(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F6BD134();
  sub_23F6F5920(a1, v43 - v42, v44);
  v45 = (char *)sub_23F70ED60 + 4 * word_23FB567F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F70ED60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  sub_23F6F594C(v0, v2, type metadata accessor for AST.FlatValue);
  sub_23F6F5920(v2, v1, type metadata accessor for AST.FlatValue);
  if (swift_getEnumCaseMultiPayload() != 8)
  {
    sub_23F6D3928(v1);
    sub_23F6F5920(v2, v3, type metadata accessor for AST.FlatValue);
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      v6 = *(_QWORD *)(v4 - 416);
      sub_23F6B633C(v6, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 32));
      v7 = *(_QWORD *)(v4 - 120);
      sub_23F70F8BC(v6, *(_QWORD *)(v4 - 128));
      if (v7)
      {
        sub_23F713ED0();
        sub_23F6D3508(v2, type metadata accessor for AST.FlatValue);
        goto LABEL_10;
      }
      sub_23F713ED0();
      sub_23F6D3508(v2, type metadata accessor for AST.FlatValue);
      sub_23F713E30();
      sub_23F713E50();
    }
    else
    {
      sub_23F6D3928(v3);
      v8 = *(_QWORD *)(v4 - 120);
      AST.FlatValue.toValueExpression.getter(v4 - 112);
      sub_23F6D3928(v2);
      if (v8)
        goto LABEL_10;
      v9 = *(_BYTE *)(v4 - 96);
      v10 = *(_QWORD *)(v4 - 128);
      *(_OWORD *)v10 = *(_OWORD *)(v4 - 112);
      *(_BYTE *)(v10 + 16) = v9;
      sub_23F713E30();
      sub_23F713E50();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  sub_23F6D3508(v2, type metadata accessor for AST.FlatValue);
  v5 = *(_QWORD *)(v4 - 392);
  sub_23F713F84(v5, v1);
  sub_23F713F84(*(_QWORD *)(v4 - 128), v5);
  sub_23F713E30();
  sub_23F713F50();
  swift_storeEnumTagMultiPayload();
LABEL_10:
  sub_23F6B5100();
}

void sub_23F70F8BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a2;
  v3 = v2;
  v36 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v36);
  v37 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for StatementResult(0);
  MEMORY[0x24BDAC7A8](v33);
  v34 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23F6916B8(&qword_256EA60C8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23F6916B8(&qword_256EA6528);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23F6916B8(&qword_256EA6530);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Session.Event(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B4F58(v3, (uint64_t)v9, &qword_256EA60C8);
  v19 = type metadata accessor for Session.Transcript(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v9, 1, v19) == 1)
  {
    v20 = &qword_256EA60C8;
    v21 = (uint64_t)v9;
LABEL_5:
    sub_23F6B4F84(v21, v20);
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    swift_allocError();
    v24 = v23;
    v25 = sub_23FB2C4B8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, a1, v25);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  sub_23F6D3508((uint64_t)v9, type metadata accessor for Session.Transcript);
  sub_23F7E0E00();
  swift_bridgeObjectRelease();
  v22 = sub_23F6916B8(&qword_256EA6538);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, v22) == 1)
  {
    v20 = &qword_256EA6528;
    v21 = (uint64_t)v12;
    goto LABEL_5;
  }
  sub_23F6F594C((uint64_t)&v12[*(int *)(v22 + 48)], (uint64_t)&v15[*(int *)(v13 + 48)], type metadata accessor for Session.Event);
  sub_23F6F594C((uint64_t)&v15[*(int *)(v13 + 48)], (uint64_t)v18, type metadata accessor for Session.Event);
  v26 = v37;
  sub_23F6F5920((uint64_t)&v18[*(int *)(v16 + 28)], v37, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 31)
  {
    sub_23F6D3508((uint64_t)v18, type metadata accessor for Session.Event);
    v27 = v26;
    v28 = v34;
    sub_23F6F594C(v27, v34, type metadata accessor for StatementResult);
    v29 = v28 + *(int *)(v33 + 32);
    v30 = sub_23FB2C764();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v35, v29, v30);
    sub_23F6D3508(v28, type metadata accessor for StatementResult);
  }
  else
  {
    sub_23F6D3508(v26, type metadata accessor for Session.Event.Payload);
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    swift_allocError();
    *v31 = 0xD000000000000027;
    v31[1] = 0x800000023FB321E0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23F6D3508((uint64_t)v18, type metadata accessor for Session.Event);
  }
}

void AST.FlatValue.toValueExpression.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  _QWORD v11[10];

  v11[4] = a1;
  v2 = sub_23FB2C764();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B631C();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B6580();
  v11[7] = v4;
  v5 = type metadata accessor for AST.FlatValue(0);
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B631C();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F713FE0();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6F5920(v1, (uint64_t)v11 - v8, v9);
  v11[6] = v5;
  v10 = (char *)sub_23F70FDE4 + 4 * byte_23FB56818[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F70FDE4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_23F6D3508(v0, type metadata accessor for AST.FlatValue);
  type metadata accessor for ExpressionConverterError(0);
  sub_23F710EC0();
  sub_23F6B5AD4();
  v3 = v2;
  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 88) = 0xE000000000000000;
  sub_23FB2F7AC();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 96) = 0x2065707954;
  *(_QWORD *)(v1 - 88) = 0xE500000000000000;
  AST.FlatValue.description.getter();
  sub_23FB2F254();
  sub_23F693E04();
  sub_23FB2F254();
  v4 = *(_QWORD *)(v1 - 88);
  *v3 = *(_QWORD *)(v1 - 96);
  v3[1] = v4;
  sub_23F713F74();
  swift_willThrow();
  sub_23F6B5100();
}

uint64_t AST.FlatValue.toStatementId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;

  v2 = v1;
  type metadata accessor for AST.FlatValue(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v7 = v6 - v5;
  sub_23F6F5920(v2, v6 - v5, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 8)
  {
    v10 = sub_23FB2C764();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, v7, v10);
  }
  else
  {
    sub_23F713FFC(EnumCaseMultiPayload, type metadata accessor for AST.FlatValue);
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    sub_23F6B5AD4();
    v13 = v12;
    sub_23FB2F7AC();
    swift_bridgeObjectRelease();
    AST.FlatValue.description.getter();
    sub_23FB2F254();
    swift_bridgeObjectRelease();
    *v13 = 0xD000000000000018;
    v13[1] = 0x800000023FB32130;
    sub_23F713F74();
    return swift_willThrow();
  }
}

uint64_t AST.InfixOp.toInfixOp.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_23F7102E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[2];

  v4 = sub_23FB2C4B8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AST.FlatValue(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6F5920(a1, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 9)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_23F7109AC((uint64_t)v7, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else if (EnumCaseMultiPayload == 8)
  {
    v13 = sub_23FB2C764();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a2, v10, v13);
  }
  else
  {
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    swift_allocError();
    *v14 = 0xD000000000000025;
    v14[1] = 0x800000023FB321B0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23F6D3508((uint64_t)v10, type metadata accessor for AST.FlatValue);
  }
}

void sub_23F710498(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t updated;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v33 = a3;
  v31 = a2;
  v30 = sub_23FB2C764();
  v6 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23F6916B8(&qword_256EA6518);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AST.FlatValue(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v29 - v16;
  v18 = (int *)type metadata accessor for AST.Update(0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + v18[5]) + 16) != 1)
    goto LABEL_4;
  sub_23F70E580();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, v12) == 1)
  {
    sub_23F6B4F84((uint64_t)v11, &qword_256EA6518);
LABEL_4:
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    v19 = swift_allocError();
    *v20 = 0xD000000000000026;
    v20[1] = 0x800000023FB32150;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_5;
  }
  v29 = a4;
  sub_23F6F594C((uint64_t)v11, (uint64_t)v17, type metadata accessor for AST.FlatValue);
  sub_23F6F5920((uint64_t)v17, (uint64_t)v15, type metadata accessor for AST.FlatValue);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v22 = *v15;
    v21 = v15[1];
    v23 = v18[7];
    v24 = *(_BYTE *)(a1 + v18[6]);
    v25 = v32;
    sub_23F7102E0(a1 + v23, (uint64_t)v8);
    v19 = v25;
    sub_23F6D3508((uint64_t)v17, type metadata accessor for AST.FlatValue);
    if (!v25)
    {
      v27 = v29;
      *v29 = v22;
      v27[1] = v21;
      v27[2] = 0;
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v27 + 25) = v24;
      updated = type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)v27 + *(int *)(updated + 28), v8, v30);
      return;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23F6D3508((uint64_t)v15, type metadata accessor for AST.FlatValue);
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    v19 = swift_allocError();
    *v26 = 0xD000000000000029;
    v26[1] = 0x800000023FB32180;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23F6D3508((uint64_t)v17, type metadata accessor for AST.FlatValue);
  }
LABEL_5:
  *v33 = v19;
}

void AST.UpdateKind.toUpdateKind.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void sub_23F7107BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[2];

  v4 = sub_23FB2C4B8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AST.FlatValue(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6F5920(a1, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 9)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_23F7109AC((uint64_t)v7, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else if (EnumCaseMultiPayload == 8)
  {
    v13 = sub_23FB2C764();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a2, v10, v13);
  }
  else
  {
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    swift_allocError();
    *v14 = 0xD000000000000025;
    v14[1] = 0x800000023FB321B0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23F6D3508((uint64_t)v10, type metadata accessor for AST.FlatValue);
  }
}

void sub_23F71097C(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23F70F8BC(a1, a3);
  if (v3)
    *a2 = v3;
}

void sub_23F7109AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a2;
  v3 = v2;
  v41 = a1;
  v4 = sub_23F6916B8(&qword_256EA6540);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProgramStatement(0);
  MEMORY[0x24BDAC7A8](v6);
  v39 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v40);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23F6916B8(&qword_256EA60C8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23F6916B8(&qword_256EA6528);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23F6916B8(&qword_256EA6530);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Session.Event(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B4F58(v3, (uint64_t)v12, &qword_256EA60C8);
  v22 = type metadata accessor for Session.Transcript(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, v22) == 1)
  {
    sub_23F6B4F84((uint64_t)v12, &qword_256EA60C8);
    v23 = v41;
LABEL_9:
    type metadata accessor for ExpressionConverterError(0);
    sub_23F710EC0();
    swift_allocError();
    v33 = v32;
    v34 = sub_23FB2C4B8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v33, v23, v34);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  sub_23F6D3508((uint64_t)v12, type metadata accessor for Session.Transcript);
  v23 = v41;
  sub_23F7E0E00();
  swift_bridgeObjectRelease();
  v24 = sub_23F6916B8(&qword_256EA6538);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v24) == 1)
  {
    sub_23F6B4F84((uint64_t)v15, &qword_256EA6528);
    goto LABEL_9;
  }
  sub_23F6F594C((uint64_t)&v15[*(int *)(v24 + 48)], (uint64_t)&v18[*(int *)(v16 + 48)], type metadata accessor for Session.Event);
  sub_23F6F594C((uint64_t)&v18[*(int *)(v16 + 48)], (uint64_t)v21, type metadata accessor for Session.Event);
  sub_23F6F5920((uint64_t)&v21[*(int *)(v19 + 28)], (uint64_t)v9, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_23F6D3508((uint64_t)v21, type metadata accessor for Session.Event);
    sub_23F6D3508((uint64_t)v9, type metadata accessor for Session.Event.Payload);
    goto LABEL_9;
  }
  v25 = swift_bridgeObjectRetain();
  v26 = v37;
  sub_23F70E5D0(v25);
  v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v38;
  sub_23F7A12C4(v28, v38);
  swift_bridgeObjectRelease();
  v30 = (uint64_t)v39;
  sub_23FAE3688(0xD000000000000080, 0x800000023FB32210, 169, 0xD00000000000001BLL, 0x800000023FB322A0);
  sub_23F6B4F84(v29, &qword_256EA6540);
  sub_23F6D3508((uint64_t)v21, type metadata accessor for Session.Event);
  if (!v26)
  {
    v31 = sub_23FB2C764();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v36, v30, v31);
    sub_23F6D3508(v30, type metadata accessor for ProgramStatement);
  }
}

uint64_t sub_23F710E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA2798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23F710E80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_23F6B6B88(a1, a2, a3);
  sub_23F6B5FFC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_23F694CC8();
}

uint64_t type metadata accessor for ExpressionConverterError(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA6210);
}

unint64_t sub_23F710EC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA60E0;
  if (!qword_256EA60E0)
  {
    v1 = type metadata accessor for ExpressionConverterError(255);
    result = MEMORY[0x242674E5C](&unk_23FB568B0, v1);
    atomic_store(result, (unint64_t *)&qword_256EA60E0);
  }
  return result;
}

void sub_23F710F00(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_23F71097C(a1, a2, a3);
}

void sub_23F710F1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23F7107BC(a1, a2);
}

uint64_t sub_23F710F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v31;

  v4 = sub_23FB2C4B8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v8 = v7 - v6;
  type metadata accessor for ExpressionConverterError(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B631C();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v31 - v14);
  sub_23F6916B8(&qword_256EA6248);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6BD134();
  v19 = v18 - v17;
  v21 = (_QWORD *)(v18 - v17 + *(int *)(v20 + 48));
  sub_23F6F5920(a1, v18 - v17, type metadata accessor for ExpressionConverterError);
  sub_23F6F5920(a2, (uint64_t)v21, type metadata accessor for ExpressionConverterError);
  if (sub_23F714010() != 1)
  {
    sub_23F6F5920(v19, (uint64_t)v15, type metadata accessor for ExpressionConverterError);
    v26 = *v15;
    v25 = v15[1];
    if (sub_23F714010() != 1)
    {
      if (v26 == *v21 && v25 == v21[1])
      {
        v29 = swift_bridgeObjectRelease_n();
      }
      else
      {
        v28 = sub_23FB2FB78();
        swift_bridgeObjectRelease();
        v29 = swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          sub_23F714040(v29, type metadata accessor for ExpressionConverterError);
          goto LABEL_8;
        }
      }
      sub_23F714040(v29, type metadata accessor for ExpressionConverterError);
      v22 = 1;
      return v22 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    sub_23F6B4F84(v19, &qword_256EA6248);
LABEL_8:
    v22 = 0;
    return v22 & 1;
  }
  sub_23F6F5920(v19, v12, type metadata accessor for ExpressionConverterError);
  if (sub_23F714010() != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v5 + 32))(v8, v21, v4);
  v22 = sub_23FB2C4A0();
  v23 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v23(v8, v4);
  v24 = ((uint64_t (*)(uint64_t, uint64_t))v23)(v12, v4);
  sub_23F714040(v24, type metadata accessor for ExpressionConverterError);
  return v22 & 1;
}

void sub_23F711194(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_23F7125A0(a1, a2, a3, *v3);
  *v3 = v4;
}

_QWORD *sub_23F7111B0(_QWORD *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *result;

  result = sub_23F71267C(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_23F7111CC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711208()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711244()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711280()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7112BC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7112F8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711334()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711370()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7113AC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7113E8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711424()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711460()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71149C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7114D8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711514()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711550()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71158C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7115C8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711604()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711640()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71167C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7116B8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7116F4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711730()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71176C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7117A8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7117E4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711820()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71185C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711898()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7118D4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711910()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71194C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711988()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7119C4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711A00()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711A3C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711A78()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711AB4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711AF0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711B2C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711B68()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711BA4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712844();
  *v0 = v1;
}

void sub_23F711BD8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711C14()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711C50()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711C8C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711CC8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711D04()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711D40()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712788();
  *v0 = v1;
}

void sub_23F711D74()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712788();
  *v0 = v1;
}

void sub_23F711DA8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711DE4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711E20()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711E5C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711E98()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711ED4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711F10()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711F4C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711F88()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F711FC4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F712000()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71203C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F712078()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7120B4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7120F0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712788();
  *v0 = v1;
}

void sub_23F712124()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712788();
  *v0 = v1;
}

void sub_23F712158()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F712194()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7121D0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712844();
  *v0 = v1;
}

void sub_23F712204()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F712240()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71227C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7122B8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7122F4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F712330()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F71236C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7123A8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

char *sub_23F7123E4(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_23F712934(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_23F712400()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712C00();
  *v0 = v1;
}

void sub_23F71243C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712C00();
  *v0 = v1;
}

char *sub_23F712478(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_23F712A14(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

uint64_t sub_23F712494(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23F712AF4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_23F7124B0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7124EC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F712528()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712C00();
  *v0 = v1;
}

void sub_23F712564()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F712CD8();
  *v0 = v1;
}

void sub_23F7125A0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;

  if ((a3 & 1) != 0)
  {
    sub_23F713E9C();
    if (v7 != v8)
    {
      sub_23F713F68();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    sub_23F6916B8(&qword_256EA2948);
    v11 = sub_23F713F5C();
    v12 = j__malloc_size((const void *)v11);
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  if ((a1 & 1) != 0)
  {
    sub_23F7551C0((char *)(a4 + 32), v9, (char *)(v11 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23F83AA3C();
  }
  sub_23F713F08();
  sub_23F694C84();
}

void sub_23F712658()
{
  sub_23F712C00();
}

_QWORD *sub_23F71267C(_QWORD *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23F6916B8(&qword_256EA46C0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    sub_23F755280(v12, v8, v10 + 4);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23F83AB88(v12, v8);
  }
  swift_release();
  return v10;
}

void sub_23F712764()
{
  sub_23F712C00();
}

void sub_23F712788()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD *);
  void (*v2)(uint64_t, uint64_t, _QWORD *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;

  sub_23F71402C();
  if ((v6 & 1) != 0)
  {
    sub_23F713E9C();
    if (v10 != v11)
    {
      sub_23F713F68();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (v13)
  {
    sub_23F713FB4(v4, v5, v6, v7, v8);
    v14 = (_QWORD *)sub_23F713F5C();
    v15 = j__malloc_size(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = v14 + 4;
  v17 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v17, v12, v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v17, v12, v16);
  }
  sub_23F713F08();
}

void sub_23F712844()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD *);
  void (*v2)(uint64_t, uint64_t, _QWORD *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;

  sub_23F71402C();
  if ((v6 & 1) != 0)
  {
    sub_23F713E9C();
    if (v10 != v11)
    {
      sub_23F713F68();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (v13)
  {
    sub_23F713FB4(v4, v5, v6, v7, v8);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = v14 + 4;
  v17 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v17, v12, v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v17, v12, v16);
  }
  sub_23F713F08();
}

void sub_23F712910()
{
  sub_23F712C00();
}

char *sub_23F712934(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23F6916B8(&qword_256EA64C8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_23F755740(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23F83B30C(v13, v8, v12);
  }
  swift_release();
  return v10;
}

char *sub_23F712A14(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23F6916B8(&qword_256EA6250);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_23F755864(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23F83B3C4(v13, v8, v12);
  }
  swift_release();
  return v10;
}

uint64_t sub_23F712AF4(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23F6916B8(&qword_256EA6258);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23F7558BC((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23F83B458();
  }
  swift_release();
  return v10;
}

void sub_23F712BDC()
{
  sub_23F712C00();
}

void sub_23F712C00()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  sub_23F713F9C();
  if ((v9 & 1) != 0)
  {
    sub_23F713E9C();
    if (v13 != v14)
    {
      sub_23F713F68();
      if (v13)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v12 = v8;
  }
  v15 = *(_QWORD *)(v0 + 16);
  if (v12 <= v15)
    v16 = *(_QWORD *)(v0 + 16);
  else
    v16 = v12;
  if (!v16)
    goto LABEL_17;
  sub_23F713FB4(v7, v8, v9, v10, v11);
  sub_23F6916B8(v4);
  v17 = (_QWORD *)sub_23F713EAC();
  v18 = j__malloc_size(v17);
  if (!v5)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v6 == 0x8000000000000000 && v5 == -1)
    goto LABEL_22;
  v17[2] = v15;
  v17[3] = 2 * ((uint64_t)(v18 - v6) / v5);
LABEL_17:
  v20 = sub_23F6916B8(v4);
  v21 = sub_23F713F30(v20);
  if ((v3 & 1) != 0)
  {
    v2(v21);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v21);
  }
  sub_23F713F08();
  sub_23F693DDC();
}

void sub_23F712CD8()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  void (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  sub_23F713F9C();
  if ((v9 & 1) != 0)
  {
    sub_23F713E9C();
    if (v13 != v14)
    {
      sub_23F713F68();
      if (v13)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v12 = v8;
  }
  v15 = *(_QWORD *)(v0 + 16);
  if (v12 <= v15)
    v16 = *(_QWORD *)(v0 + 16);
  else
    v16 = v12;
  if (!v16)
    goto LABEL_17;
  sub_23F713FB4(v7, v8, v9, v10, v11);
  v4(0);
  v17 = (_QWORD *)sub_23F713EAC();
  v18 = j__malloc_size(v17);
  if (!v5)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v6 == 0x8000000000000000 && v5 == -1)
    goto LABEL_22;
  v17[2] = v15;
  v17[3] = 2 * ((uint64_t)(v18 - v6) / v5);
LABEL_17:
  v20 = ((uint64_t (*)(_QWORD))v4)(0);
  v21 = sub_23F713F30(v20);
  if ((v3 & 1) != 0)
  {
    v2(v21);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v21);
  }
  sub_23F713F08();
  sub_23F693DDC();
}

uint64_t sub_23F712DB0(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  BOOL v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v4 = v3;
  v42 = a1;
  v43 = a2;
  v6 = sub_23FB2C764();
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AST.FlatValue(0);
  v41 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA6520);
  result = sub_23FB2F98C();
  v13 = 0;
  v44 = a3;
  v45 = result;
  v16 = *(_QWORD *)(a3 + 64);
  v15 = a3 + 64;
  v14 = v16;
  v17 = 1 << *(_BYTE *)(v15 - 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v36 = v15;
  v37 = (unint64_t)(v17 + 63) >> 6;
  v38 = result + 64;
  if ((v18 & v14) == 0)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v19));
  v21 = (v19 - 1) & v19;
  for (i = v20 | (v13 << 6); ; i = __clz(__rbit64(v24)) + (v13 << 6))
  {
    v26 = *(_QWORD *)(v44 + 56);
    v27 = (uint64_t *)(*(_QWORD *)(v44 + 48) + 16 * i);
    v28 = v27[1];
    v47 = *v27;
    sub_23F6F5920(v26 + *(_QWORD *)(v41 + 72) * i, (uint64_t)v11, type metadata accessor for AST.FlatValue);
    swift_bridgeObjectRetain();
    v42(v11);
    if (v4)
    {
      swift_bridgeObjectRelease();
      v34 = v45;
      swift_release();
      sub_23F6D3508((uint64_t)v11, type metadata accessor for AST.FlatValue);
      return v34;
    }
    v46 = v21;
    v29 = v11;
    sub_23F6D3508((uint64_t)v11, type metadata accessor for AST.FlatValue);
    *(_QWORD *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v30 = v45;
    v31 = (_QWORD *)(*(_QWORD *)(v45 + 48) + 16 * i);
    *v31 = v47;
    v31[1] = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v39 + 32))(*(_QWORD *)(v30 + 56) + *(_QWORD *)(v39 + 72) * i, v8, v40);
    v32 = *(_QWORD *)(v30 + 16);
    v23 = __OFADD__(v32, 1);
    v33 = v32 + 1;
    if (v23)
      break;
    *(_QWORD *)(v30 + 16) = v33;
    v11 = v29;
    v4 = 0;
    v19 = v46;
    if (v46)
      goto LABEL_4;
LABEL_5:
    v23 = __OFADD__(v13++, 1);
    if (v23)
      goto LABEL_28;
    if (v13 >= v37)
      return v45;
    v24 = *(_QWORD *)(v36 + 8 * v13);
    if (!v24)
    {
      v25 = v13 + 1;
      if (v13 + 1 >= v37)
        return v45;
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (v24)
        goto LABEL_14;
      v25 = v13 + 2;
      if (v13 + 2 >= v37)
        return v45;
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (v24)
      {
LABEL_14:
        v13 = v25;
        goto LABEL_15;
      }
      v25 = v13 + 3;
      if (v13 + 3 < v37)
      {
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_29;
            if (v13 >= v37)
              return v45;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_15;
          }
        }
        goto LABEL_14;
      }
      return v45;
    }
LABEL_15:
    v21 = (v24 - 1) & v24;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void sub_23F7130C8(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  sub_23F710498(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

uint64_t *initializeBufferWithCopyOfBuffer for ExpressionConverter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(sub_23F6916B8(&qword_256EA60C8) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)type metadata accessor for Session.Transcript(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, (uint64_t)v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      v8 = sub_23FB2C4B8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = v6[5];
      v10 = (uint64_t *)((char *)a1 + v9);
      v11 = (uint64_t *)((char *)a2 + v9);
      v12 = v11[1];
      *v10 = *v11;
      v10[1] = v12;
      v13 = v6[6];
      v14 = (uint64_t *)((char *)a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      v17 = v6[7];
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      *(uint64_t *)((char *)a1 + v6[8]) = *(uint64_t *)((char *)a2 + v6[8]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
    }
  }
  return a1;
}

uint64_t destroy for ExpressionConverter(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = type metadata accessor for Session.Transcript(0);
  result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_23FB2C4B8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for ExpressionConverter(char *a1, char *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (int *)type metadata accessor for Session.Transcript(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, (uint64_t)v4))
  {
    v5 = sub_23F6916B8(&qword_256EA60C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v6 = sub_23FB2C4B8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = v4[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *((_QWORD *)v9 + 1);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *((_QWORD *)v8 + 1) = v10;
    v11 = v4[6];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = v4[7];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    *(_QWORD *)&a1[v4[8]] = *(_QWORD *)&a2[v4[8]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, (uint64_t)v4);
  }
  return a1;
}

char *assignWithCopy for ExpressionConverter(char *a1, char *a2)
{
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v4 = (int *)type metadata accessor for Session.Transcript(0);
  v5 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, (uint64_t)v4);
  v6 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, (uint64_t)v4);
  if (!v5)
  {
    if (!v6)
    {
      v19 = sub_23FB2C4B8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(a1, a2, v19);
      v20 = v4[5];
      v21 = &a1[v20];
      v22 = &a2[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23 = v4[6];
      v24 = &a1[v23];
      v25 = &a2[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v26 = v4[7];
      v27 = &a1[v26];
      v28 = &a2[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&a1[v4[8]] = *(_QWORD *)&a2[v4[8]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_23F6D3508((uint64_t)a1, type metadata accessor for Session.Transcript);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    v17 = sub_23F6916B8(&qword_256EA60C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  v7 = sub_23FB2C4B8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = v4[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  v11 = v4[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  v14 = v4[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  *(_QWORD *)&a1[v4[8]] = *(_QWORD *)&a2[v4[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, (uint64_t)v4);
  return a1;
}

char *initializeWithTake for ExpressionConverter(char *a1, char *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (int *)type metadata accessor for Session.Transcript(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, (uint64_t)v4))
  {
    v5 = sub_23F6916B8(&qword_256EA60C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v6 = sub_23FB2C4B8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    *(_OWORD *)&a1[v4[5]] = *(_OWORD *)&a2[v4[5]];
    *(_OWORD *)&a1[v4[6]] = *(_OWORD *)&a2[v4[6]];
    *(_OWORD *)&a1[v4[7]] = *(_OWORD *)&a2[v4[7]];
    *(_QWORD *)&a1[v4[8]] = *(_QWORD *)&a2[v4[8]];
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, (uint64_t)v4);
  }
  return a1;
}

char *assignWithTake for ExpressionConverter(char *a1, char *a2)
{
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (int *)type metadata accessor for Session.Transcript(0);
  v5 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, (uint64_t)v4);
  v6 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, (uint64_t)v4);
  if (!v5)
  {
    if (!v6)
    {
      v10 = sub_23FB2C4B8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(a1, a2, v10);
      v11 = v4[5];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v15 = *(_QWORD *)v13;
      v14 = *((_QWORD *)v13 + 1);
      *(_QWORD *)v12 = v15;
      *((_QWORD *)v12 + 1) = v14;
      swift_bridgeObjectRelease();
      v16 = v4[6];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v20 = *(_QWORD *)v18;
      v19 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = v20;
      *((_QWORD *)v17 + 1) = v19;
      swift_bridgeObjectRelease();
      v21 = v4[7];
      v22 = &a1[v21];
      v23 = &a2[v21];
      v25 = *(_QWORD *)v23;
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
      swift_bridgeObjectRelease();
      *(_QWORD *)&a1[v4[8]] = *(_QWORD *)&a2[v4[8]];
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_23F6D3508((uint64_t)a1, type metadata accessor for Session.Transcript);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    v8 = sub_23F6916B8(&qword_256EA60C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    return a1;
  }
  v7 = sub_23FB2C4B8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  *(_OWORD *)&a1[v4[5]] = *(_OWORD *)&a2[v4[5]];
  *(_OWORD *)&a1[v4[6]] = *(_OWORD *)&a2[v4[6]];
  *(_OWORD *)&a1[v4[7]] = *(_OWORD *)&a2[v4[7]];
  *(_QWORD *)&a1[v4[8]] = *(_QWORD *)&a2[v4[8]];
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, (uint64_t)v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionConverter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F71384C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA60C8);
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ExpressionConverter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F713890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA60C8);
  return sub_23F70D618(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ExpressionConverter(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EA6160);
}

void sub_23F7138DC()
{
  unint64_t v0;

  sub_23F713944();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_23F713944()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256EA6170)
  {
    type metadata accessor for Session.Transcript(255);
    v0 = sub_23FB2F65C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256EA6170);
  }
}

uint64_t *sub_23F713998(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2C4B8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23F713A54(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_bridgeObjectRelease();
  v2 = sub_23FB2C4B8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

_QWORD *sub_23F713AA4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_23FB2C4B8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_23F713B34(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for ExpressionConverterError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_23F713BE4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23FB2C4B8();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_23F713C70(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for ExpressionConverterError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2C4B8();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23F713D14()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2C4B8();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_23F713D84(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0 || 1 << *(_BYTE *)(a3 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for ToolboxCustomKeyResult(0);
    sub_23F6F5920(v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * a1, a4, type metadata accessor for ToolboxCustomKeyResult);
    return;
  }
LABEL_8:
  __break(1u);
}

void sub_23F713E20()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_23F713E30()
{
  return type metadata accessor for Expression(0);
}

uint64_t sub_23F713E38()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 32))(*(_QWORD *)(v1 - 128), v0, *(_QWORD *)(v1 - 160));
}

uint64_t sub_23F713E50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F713E5C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v2, v1);
}

void sub_23F713E6C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F70F8BC(v1, a1);
}

uint64_t sub_23F713E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_23F713EAC()
{
  return swift_allocObject();
}

uint64_t sub_23F713ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_23F713EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, a3, a4);
}

uint64_t sub_23F713EF0@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23F713F08()
{
  return swift_release();
}

uint64_t sub_23F713F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

uint64_t sub_23F713F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

uint64_t sub_23F713F50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F713F5C()
{
  return swift_allocObject();
}

uint64_t sub_23F713F74()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23F713F7C@<X0>(uint64_t a1@<X8>)
{
  return AST.FlatValue.toStatementId.getter(a1);
}

uint64_t sub_23F713F84(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_23F713F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_23F713FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_23F6916B8(a5);
}

uint64_t sub_23F713FD4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 128);
}

uint64_t sub_23F713FF4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_23F713FFC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(v2, a2);
}

uint64_t sub_23F714010()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F714018(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_23F714040(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(v2, a2);
}

uint64_t sub_23F71405C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 128);
}

uint64_t sub_23F714070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v16 = a2;
  v15 = sub_23FB2C764();
  v4 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_23F711208();
    v8 = v18;
    v9 = (unint64_t *)(a1 + 32);
    while (1)
    {
      v10 = *v9++;
      v17 = v10;
      sub_23F6A3728(v10);
      sub_23F714868(&v17);
      v11 = v10;
      if (v2)
        break;
      sub_23F6A3764(v11);
      v18 = v8;
      v12 = *(_QWORD *)(v8 + 16);
      if (v12 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23F711208();
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v6, v15);
      if (!--v7)
        return v8;
    }
    sub_23F6A3764(v11);
    swift_release();
  }
  return v8;
}

void sub_23F7141D8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1;
    v21 = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v2, 0);
    v4 = sub_23F7AE664(v3);
    if ((v4 & 0x8000000000000000) == 0)
    {
      v6 = v4;
      if (v4 < 1 << *(_BYTE *)(v3 + 32))
      {
        v7 = v3 + 64;
        v18 = v3 + 64;
        while ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v5 != *(_DWORD *)(v3 + 36))
            goto LABEL_21;
          v20 = v5;
          v8 = v3;
          v9 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v6);
          swift_bridgeObjectRetain();
          sub_23F6A3728(v9);
          swift_bridgeObjectRetain();
          sub_23F6A3728(v9);
          swift_bridgeObjectRelease();
          sub_23F6A3764(v9);
          if ((v9 >> 59) & 0x1E | (v9 >> 2) & 1)
          {
            sub_23F71482C();
            swift_allocError();
            *(_QWORD *)v16 = a2;
            *(_BYTE *)(v16 + 8) = 1;
            sub_23F6A3728(a2);
            swift_willThrow();
            swift_bridgeObjectRelease();
            sub_23F6A3764(v9);
            swift_release();
            sub_23F6A3764(a2);
            return;
          }
          v19 = v2;
          v11 = *(_QWORD *)(v9 + 16);
          v10 = *(_QWORD *)(v9 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_23F6A3764(v9);
          v13 = *(_QWORD *)(v21 + 16);
          v12 = *(_QWORD *)(v21 + 24);
          if (v13 >= v12 >> 1)
            sub_23F711194(v12 > 1, v13 + 1, 1);
          *(_QWORD *)(v21 + 16) = v13 + 1;
          v14 = v21 + 16 * v13;
          *(_QWORD *)(v14 + 32) = v11;
          *(_QWORD *)(v14 + 40) = v10;
          if ((uint64_t)v6 >= -(-1 << *(_BYTE *)(v8 + 32)))
            goto LABEL_22;
          v7 = v18;
          if ((*(_QWORD *)(v18 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
            goto LABEL_23;
          v3 = v8;
          if (v20 != *(_DWORD *)(v8 + 36))
            goto LABEL_24;
          v15 = sub_23FB2F740();
          v2 = v19 - 1;
          if (v19 == 1)
          {
            sub_23F6A3764(a2);
            return;
          }
          v6 = v15;
          if ((v15 & 0x8000000000000000) == 0)
          {
            v5 = *(_DWORD *)(v8 + 36);
            if (v15 < 1 << *(_BYTE *)(v8 + 32))
              continue;
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
LABEL_25:
    __break(1u);
  }
  else
  {
    sub_23F6A3764(a2);
  }
}

uint64_t ExpressionFlattener.init(statementIdCounter:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4B00];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v2;
  a2[2] = result;
  return result;
}

unint64_t static ExpressionFlattener.flatten(statementIdCounter:program:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5[4];

  v2 = *a2;
  v5[1] = MEMORY[0x24BEE4AF8];
  v5[2] = MEMORY[0x24BEE4B00];
  v5[3] = a1;
  v5[0] = v2;
  swift_retain();
  v3 = ExpressionFlattener.flatten(program:)(v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t ExpressionFlattener.flatten(program:)(uint64_t *a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t result;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v4 = sub_23FB2E7F8();
  v27 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v26 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23FB2C764();
  v28 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  if (v10)
  {
    v25 = v4;
    swift_bridgeObjectRetain();
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(v9 + 8 * v11 + 32);
      if (v12 >> 62)
        break;
      v30 = *(_QWORD *)(v12 + 16);
      v13 = v30;
      swift_retain();
      sub_23F6A3728(v13);
      sub_23F714868(&v30, (uint64_t)v8);
      if (v2)
      {
        swift_release();
        sub_23F717D54();
        return sub_23F6A3764(v13);
      }
      ++v11;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
      swift_release();
      sub_23F6A3764(v13);
      if (v10 == v11)
      {
        sub_23F717D54();
        goto LABEL_7;
      }
    }
    swift_retain();
    sub_23F717D54();
    v15 = v26;
    sub_23FB2E3D8();
    swift_retain_n();
    v16 = sub_23FB2E7E0();
    v17 = sub_23FB2F5F0();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v30 = v28;
      *(_DWORD *)v18 = 136315138;
      v24 = v18 + 4;
      v19 = v18;
      swift_retain();
      v20 = sub_23F6ABAB8(0, v12);
      v22 = v21;
      swift_release();
      v29 = sub_23F69334C(v20, v22, (uint64_t *)&v30);
      sub_23FB2F680();
      sub_23F717D5C();
      sub_23F717D54();
      _os_log_impl(&dword_23F68F000, v16, v17, "cannot flatten non-expr statement: %s", v19, 0xCu);
      swift_arrayDestroy();
      sub_23F693DD0();
    }

    sub_23F717D5C();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v25);
    sub_23F71482C();
    swift_allocError();
    *(_QWORD *)v23 = v12 | 1;
    *(_BYTE *)(v23 + 8) = 0;
    return swift_willThrow();
  }
  else
  {
LABEL_7:
    result = *v1;
    *v1 = MEMORY[0x24BEE4AF8];
  }
  return result;
}

unint64_t sub_23F71482C()
{
  unint64_t result;

  result = qword_256EA6548;
  if (!qword_256EA6548)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5696C, &unk_250FF29B0);
    atomic_store(result, (unint64_t *)&qword_256EA6548);
  }
  return result;
}

void sub_23F714868(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t updated;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  int64_t v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(_QWORD);
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  BOOL v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t *, char *, uint64_t);
  uint64_t *v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  char *v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  char v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  unint64_t v154;
  BOOL v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  uint64_t v161;
  char v162;
  unint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  BOOL v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  char v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  unint64_t v198;
  uint64_t v199;
  int v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  char *v205;
  uint64_t v206;
  BOOL v207;
  unint64_t v208;
  uint64_t v209;
  int v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  char *v215;
  BOOL v216;
  unint64_t v217;
  uint64_t v218;
  int v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240[2];
  unint64_t v241;
  _QWORD v242[6];
  unint64_t v243;

  v237 = a1;
  v234 = (char *)a2;
  updated = type metadata accessor for AST.UpdateParameters();
  MEMORY[0x24BDAC7A8](updated);
  v231 = (uint64_t)&v225 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UndoExpression(0);
  MEMORY[0x24BDAC7A8](v4);
  v228 = (uint64_t)&v225 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = type metadata accessor for Expression(0);
  v6 = MEMORY[0x24BDAC7A8](v233);
  v229 = (char *)&v225 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v232 = (uint64_t *)((char *)&v225 - v8);
  v9 = sub_23F6916B8(&qword_256EA49D8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v227 = (uint64_t)&v225 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v230 = (char *)&v225 - v12;
  v13 = sub_23FB2C764();
  v14 = *(_QWORD *)(v13 - 8);
  v238 = v13;
  v239 = v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v225 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v20);
  v22 = MEMORY[0x24BDAC7A8]((char *)&v225 - v21);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v225 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v225 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v225 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v225 - v35;
  v37 = MEMORY[0x24BDAC7A8](v34);
  v39 = (char *)&v225 - v38;
  v40 = MEMORY[0x24BDAC7A8](v37);
  v42 = (char *)&v225 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40);
  v45 = (char *)&v225 - v44;
  v46 = MEMORY[0x24BDAC7A8](v43);
  v48 = (char *)&v225 - v47;
  v49 = MEMORY[0x24BDAC7A8](v46);
  v57 = (char *)&v225 - v56;
  v58 = *v237;
  switch((v58 >> 59) & 0x1E | (v58 >> 2) & 1)
  {
    case 0uLL:
      v59 = *(_QWORD *)(v58 + 16);
      v60 = *(_QWORD *)(v58 + 24);
      v61 = *(_QWORD *)(v235 + 8);
      swift_bridgeObjectRetain_n();
      v62 = (uint64_t)v230;
      sub_23F694B3C(v59, v60, v61);
      swift_bridgeObjectRelease();
      v63 = v238;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v62, 1, v238) == 1)
      {
        sub_23F717CD8(v62);
        v64 = v232;
        *v232 = v59;
        v64[1] = v60;
        *((_BYTE *)v64 + 16) = 5;
        swift_storeEnumTagMultiPayload();
        sub_23F716630((uint64_t)v64, (uint64_t)v48);
        sub_23F6F5978((uint64_t)v64, type metadata accessor for Expression);
        (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v234, v48, v63);
      }
      else
      {
        swift_bridgeObjectRelease();
        v111 = *(void (**)(char *, uint64_t, uint64_t))(v239 + 32);
        v111(v57, v62, v63);
        v111(v234, (uint64_t)v57, v63);
      }
      return;
    case 1uLL:
      v69 = swift_projectBox();
      (*(void (**)(char *, uint64_t, uint64_t))(v239 + 16))(v234, v69, v238);
      return;
    case 2uLL:
      __asm { BR              X10 }
      return;
    case 3uLL:
      v100 = *(_BYTE *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      v65 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      v240[0] = v65;
      sub_23F6A3728(v65);
      v101 = v236;
      sub_23F714868(v240);
      if (v101)
        goto LABEL_43;
      v117 = type metadata accessor for PrefixExpression(0);
      v118 = v229;
      v119 = v238;
      v120 = v239;
      (*(void (**)(char *, char *, uint64_t))(v239 + 16))(&v229[*(int *)(v117 + 20)], v36, v238);
      *v118 = v100;
      swift_storeEnumTagMultiPayload();
      sub_23F716630((uint64_t)v118, (uint64_t)v234);
      sub_23F6A3764(v65);
      sub_23F6F5978((uint64_t)v118, type metadata accessor for Expression);
      v121 = *(void (**)(char *, uint64_t))(v120 + 8);
      v122 = v36;
      v123 = v119;
      goto LABEL_56;
    case 4uLL:
      v103 = *(unsigned __int8 *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      v65 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      v71 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      switch(*(_BYTE *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x10))
      {
        case 0:
          v240[0] = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          v243 = v71;
          sub_23F6A3728(v65);
          sub_23F6A3728(v71);
          v104 = v236;
          sub_23F714868(&v243);
          if (!v104)
          {
            sub_23F7168B4(v240, v45, (uint64_t)v234);
            (*(void (**)(_BYTE *, uint64_t))(v239 + 8))(v45, v238);
          }
          sub_23F6A3764(v71);
          sub_23F6A3764(v65);
          return;
        case 2:
          v240[0] = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          v243 = v71;
          v134 = (uint64_t)v234;
          v135 = 1;
          goto LABEL_79;
        case 4:
          v240[0] = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          v243 = v71;
          v134 = (uint64_t)v234;
          v135 = 3;
          goto LABEL_79;
        case 6:
          v240[0] = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          v243 = v71;
          v134 = (uint64_t)v234;
          v135 = 5;
          goto LABEL_79;
        case 8:
          v240[0] = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          v243 = v71;
          v134 = (uint64_t)v234;
          v135 = 7;
LABEL_79:
          sub_23F716B78(v135, v240, &v243, v134);
          break;
        default:
          v240[0] = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          sub_23F6A3728(v65);
          sub_23F6A3728(v71);
          v133 = v236;
          sub_23F714868(v240);
          if (v133)
            goto LABEL_9;
          v240[0] = v71;
          sub_23F714868(v240);
          AST.InfixOp.toInfixOp.getter(v103, v240);
          LODWORD(v237) = LOBYTE(v240[0]);
          v236 = type metadata accessor for InfixExpression(0);
          v151 = v232;
          v152 = v238;
          v153 = *(void (**)(char *, char *, uint64_t))(v239 + 16);
          v153((char *)v232 + *(int *)(v236 + 20), v42, v238);
          v153((char *)v151 + *(int *)(v236 + 24), v39, v152);
          *(_BYTE *)v151 = (_BYTE)v237;
          swift_storeEnumTagMultiPayload();
          sub_23F716630((uint64_t)v151, (uint64_t)v234);
          sub_23F6A3764(v71);
          sub_23F6A3764(v65);
          sub_23F6F5978((uint64_t)v151, type metadata accessor for Expression);
          v141 = *(void (**)(char *, uint64_t))(v239 + 8);
          v141(v39, v152);
          v142 = v42;
          v143 = v152;
          goto LABEL_81;
      }
      return;
    case 5uLL:
      v65 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      v66 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      v67 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      v240[0] = v65;
      sub_23F6A3728(v65);
      swift_bridgeObjectRetain();
      v68 = v236;
      sub_23F714868(v240);
      if (v68)
        goto LABEL_6;
      v113 = v238;
      v114 = v239;
      v115 = v232;
      (*(void (**)(uint64_t *, char *, uint64_t))(v239 + 16))(v232, v33, v238);
      v116 = (uint64_t *)((char *)v115 + *(int *)(type metadata accessor for DotExpression(0) + 20));
      *v116 = v66;
      v116[1] = v67;
      swift_storeEnumTagMultiPayload();
      sub_23F716630((uint64_t)v115, (uint64_t)v234);
      sub_23F6A3764(v65);
      sub_23F6F5978((uint64_t)v115, type metadata accessor for Expression);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v33, v113);
      return;
    case 6uLL:
      v70 = v52;
      v65 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      v71 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      v240[0] = v65;
      sub_23F6A3728(v65);
      sub_23F6A3728(v71);
      v72 = v236;
      sub_23F714868(v240);
      if (v72)
      {
LABEL_9:
        sub_23F6A3764(v71);
        goto LABEL_43;
      }
      v240[0] = v71;
      sub_23F714868(v240);
      v137 = v238;
      v138 = *(void (**)(uint64_t *, char *, uint64_t))(v239 + 16);
      v139 = v232;
      v138(v232, v30, v238);
      v140 = type metadata accessor for IndexExpression(0);
      v138((uint64_t *)((char *)v139 + *(int *)(v140 + 20)), v70, v137);
      swift_storeEnumTagMultiPayload();
      sub_23F716630((uint64_t)v139, (uint64_t)v234);
      sub_23F6A3764(v71);
      sub_23F6A3764(v65);
      sub_23F6F5978((uint64_t)v139, type metadata accessor for Expression);
      v141 = *(void (**)(char *, uint64_t))(v239 + 8);
      v141(v70, v137);
      v142 = v30;
      v143 = v137;
LABEL_81:
      v141(v142, v143);
      return;
    case 7uLL:
      v230 = v19;
      v231 = v55;
      v229 = v54;
      v226 = v53;
      v65 = 0xFFFFFFFFFFFFFFBLL;
      v237 = (unint64_t *)v58;
      v73 = v58 & 0xFFFFFFFFFFFFFFBLL;
      v75 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      v74 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      v76 = *(unint64_t **)((v58 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      v77 = v75 == 7954803 && v74 == 0xE300000000000000;
      if (v77 || (v78 = v51, v79 = v50, v80 = v49, (sub_23FB2FB78() & 1) != 0))
      {
        v81 = swift_bridgeObjectRetain();
        sub_23F78F084(v81, v242);
        v82 = v242[0];
        v83 = v242[1];
        v84 = v242[3];
        v79 = v242[4];
        v85 = (unint64_t)(v242[2] + 64) >> 6;
        v237 = v76;
        swift_bridgeObjectRetain();
        v86 = MEMORY[0x24BEE4AF8];
        v87 = v238;
        if (!v79)
          goto LABEL_17;
LABEL_16:
        v88 = __clz(__rbit64(v79));
        v79 &= v79 - 1;
        v89 = v88 | (v84 << 6);
        while (1)
        {
          v94 = *(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v89);
          if (((v94 >> 59) & 0x1E | (v94 >> 2) & 1) != 1)
          {
            sub_23F71482C();
            swift_allocError();
            *(_QWORD *)v112 = v94 | 3;
            *(_BYTE *)(v112 + 8) = 0;
            sub_23F6A3728(v94);
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            return;
          }
          v95 = swift_projectBox();
          (*(void (**)(char *, uint64_t, uint64_t))(v239 + 16))(v26, v95, v87);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23F753F14();
            v86 = v98;
          }
          v96 = *(_QWORD *)(v86 + 16);
          v74 = v96 + 1;
          if (v96 >= *(_QWORD *)(v86 + 24) >> 1)
          {
            sub_23F753F14();
            v86 = v99;
          }
          *(_QWORD *)(v86 + 16) = v74;
          v97 = v86
              + ((*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80))
              + *(_QWORD *)(v239 + 72) * v96;
          v87 = v238;
          (*(void (**)(unint64_t, char *, uint64_t))(v239 + 32))(v97, v26, v238);
          if (v79)
            goto LABEL_16;
LABEL_17:
          v90 = v84 + 1;
          if (__OFADD__(v84, 1))
            break;
          if (v90 >= v85)
            goto LABEL_57;
          v91 = *(_QWORD *)(v83 + 8 * v90);
          v92 = v84 + 1;
          if (!v91)
          {
            v92 = v84 + 2;
            if (v84 + 2 >= v85)
              goto LABEL_57;
            v91 = *(_QWORD *)(v83 + 8 * v92);
            if (!v91)
            {
              v92 = v84 + 3;
              if (v84 + 3 >= v85)
                goto LABEL_57;
              v91 = *(_QWORD *)(v83 + 8 * v92);
              if (!v91)
              {
                v92 = v84 + 4;
                if (v84 + 4 >= v85)
                  goto LABEL_57;
                v91 = *(_QWORD *)(v83 + 8 * v92);
                if (!v91)
                {
                  v92 = v84 + 5;
                  if (v84 + 5 >= v85)
                    goto LABEL_57;
                  v91 = *(_QWORD *)(v83 + 8 * v92);
                  if (!v91)
                  {
                    v92 = v84 + 6;
                    if (v84 + 6 >= v85)
                      goto LABEL_57;
                    v91 = *(_QWORD *)(v83 + 8 * v92);
                    if (!v91)
                    {
                      v93 = v84 + 7;
                      while (v93 < v85)
                      {
                        v91 = *(_QWORD *)(v83 + 8 * v93++);
                        if (v91)
                        {
                          v92 = v93 - 1;
                          goto LABEL_34;
                        }
                      }
LABEL_57:
                      swift_bridgeObjectRelease();
                      swift_release();
                      v124 = v232;
                      *v232 = v86;
                      goto LABEL_58;
                    }
                  }
                }
              }
            }
          }
LABEL_34:
          v79 = (v91 - 1) & v91;
          v89 = __clz(__rbit64(v91)) + (v92 << 6);
          v84 = v92;
        }
        __break(1u);
        goto LABEL_131;
      }
      v225 = v73;
      v125 = v75 == 1801677168 && v74 == 0xE400000000000000;
      v126 = v238;
      if (v125 || (sub_23FB2FB78() & 1) != 0)
      {
        v127 = v76[2];
        swift_bridgeObjectRetain();
        v128 = v236;
        if (v127 != 1)
          goto LABEL_91;
        v129 = sub_23F7AE664(v76);
        if ((v131 & 1) == 0)
        {
          if (*((_DWORD *)v76 + 9) == v130)
          {
            if (v129 != 1 << *((_BYTE *)v76 + 32))
            {
              sub_23F7AE768(&v241, v129, v130, 0, (uint64_t)v76);
              v82 = v241;
              v132 = (v241 >> 59) & 0x1E;
              swift_bridgeObjectRetain();
              sub_23F6A3728(v82);
              swift_bridgeObjectRelease();
              sub_23F6A3764(v82);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              sub_23F6A3728(v82);
              swift_bridgeObjectRelease();
              if ((v132 & 0xFFFFFFFE | (v82 >> 2) & 1) == 6)
              {
                v74 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
                v83 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
                sub_23F6A3728(v74);
                sub_23F6A3728(v83);
                sub_23F6A3764(v82);
                if (((v83 >> 59) & 0x1E | (v83 >> 2) & 1) == 2
                  && *(_BYTE *)((v83 & 0xFFFFFFFFFFFFFFBLL) + 0x20) == 1)
                {
                  v87 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
                  v240[0] = v74;
                  sub_23F714868(v240);
                  if (!v128)
                  {
LABEL_131:
                    v180 = v232;
                    (*(void (**)(uint64_t *, unint64_t, uint64_t))(v239 + 16))(v232, v79, v238);
                    *(uint64_t *)((char *)v180 + *(int *)(type metadata accessor for PickExpression(0) + 20)) = v87;
                    swift_storeEnumTagMultiPayload();
                    sub_23F716630((uint64_t)v180, (uint64_t)v234);
                    sub_23F6A3764(v74);
                    sub_23F6A3764(v83);
                    swift_bridgeObjectRelease();
                    sub_23F6A3764(v82);
                    sub_23F6F5978((uint64_t)v180, type metadata accessor for Expression);
                    (*(void (**)(unint64_t, uint64_t))(v239 + 8))(v79, v238);
                    return;
                  }
                  swift_bridgeObjectRelease();
                  sub_23F6A3764(v82);
                  sub_23F6A3764(v83);
                  v102 = v74;
LABEL_44:
                  sub_23F6A3764(v102);
                  return;
                }
                sub_23F6A3764(v83);
                v154 = v74;
              }
              else
              {
                v154 = v82;
              }
              sub_23F6A3764(v154);
              swift_bridgeObjectRelease();
              goto LABEL_97;
            }
LABEL_91:
            swift_bridgeObjectRelease();
            goto LABEL_92;
          }
          __break(1u);
          goto LABEL_166;
        }
        goto LABEL_200;
      }
      v144 = v75 == 0x6D7269666E6F63 && v74 == 0xE700000000000000;
      v145 = v236;
      if (v144 || (sub_23FB2FB78() & 1) != 0)
      {
        v146 = v76[2];
        swift_bridgeObjectRetain();
        if (v146 != 1)
          goto LABEL_91;
        v147 = sub_23F7AE664(v76);
        if ((v149 & 1) != 0)
        {
          __break(1u);
LABEL_204:
          v224 = v147;
          swift_bridgeObjectRelease();
          v184 = v232;
          *v232 = v75;
          v184[1] = v74;
          v184[2] = v224;
LABEL_141:
          swift_storeEnumTagMultiPayload();
          sub_23F716630((uint64_t)v184, (uint64_t)v234);
          v107 = type metadata accessor for Expression;
          v136 = (uint64_t)v184;
          goto LABEL_80;
        }
        if (*((_DWORD *)v76 + 9) == v148)
        {
          if (v147 == 1 << *((_BYTE *)v76 + 32))
            goto LABEL_91;
          sub_23F7AE768(&v241, v147, v148, 0, (uint64_t)v76);
          v65 = v241;
          swift_bridgeObjectRetain();
          sub_23F6A3728(v65);
          swift_bridgeObjectRelease();
          sub_23F6A3764(v65);
          swift_bridgeObjectRelease();
          v240[0] = v65;
          v167 = v78;
          sub_23F714868(v240);
          if (!v145)
          {
            v168 = v239;
            v169 = v232;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v239 + 16))(v232, v167, v126);
            swift_storeEnumTagMultiPayload();
            sub_23F716630((uint64_t)v169, (uint64_t)v234);
            swift_bridgeObjectRelease();
            sub_23F6A3764(v65);
            sub_23F6F5978((uint64_t)v169, type metadata accessor for Expression);
            (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v167, v126);
            return;
          }
          goto LABEL_6;
        }
        __break(1u);
        goto LABEL_179;
      }
      v155 = v75 == 0x686372616573 && v74 == 0xE600000000000000;
      if (v155 || (sub_23FB2FB78() & 1) != 0)
      {
        v156 = v76[2];
        swift_bridgeObjectRetain();
        v157 = v76;
        if (!v156)
          goto LABEL_91;
        v158 = sub_23F78C6DC();
        if ((v159 & 1) != 0
          && (v160 = *(_QWORD *)(v76[7] + 8 * v158), ((v160 >> 59) & 0x1E | (v160 >> 2) & 1) == 2)
          && (v161 = v160 & 0xFFFFFFFFFFFFFFBLL, !*(_BYTE *)(v161 + 32)))
        {
          v162 = *(_BYTE *)(v161 + 16) & 1;
        }
        else
        {
          v162 = 0;
        }
        if (!v157[2])
          goto LABEL_91;
        v163 = sub_23F78C6DC();
        if ((v164 & 1) == 0)
          goto LABEL_91;
        v82 = *(_QWORD *)(v157[7] + 8 * v163);
        sub_23F6A3728(v82);
        swift_bridgeObjectRelease();
        if (((v82 >> 59) & 0x1E | (v82 >> 2) & 1) != 2
          || *(_BYTE *)((v82 & 0xFFFFFFFFFFFFFFBLL) + 0x20) != 3)
        {
LABEL_97:
          sub_23F6A3764(v82);
LABEL_92:
          sub_23F71482C();
          swift_allocError();
          *(_QWORD *)v150 = v237;
          *(_BYTE *)(v150 + 8) = 1;
          swift_retain();
LABEL_93:
          swift_willThrow();
          return;
        }
        v165 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
        v166 = v232;
        *v232 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
        v166[1] = v165;
        *((_BYTE *)v166 + 16) = 0;
        *((_BYTE *)v166 + 17) = v162;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        sub_23F716630((uint64_t)v166, (uint64_t)v234);
        sub_23F6A3764(v82);
        v107 = type metadata accessor for Expression;
        v136 = (uint64_t)v166;
LABEL_80:
        sub_23F6F5978(v136, v107);
        return;
      }
      v170 = v75 == 0x656E6F5F6B636970 && v74 == 0xE800000000000000;
      if (v170 || (sub_23FB2FB78() & 1) != 0)
      {
        v171 = v76[2];
        swift_bridgeObjectRetain();
        if (v171 != 1)
          goto LABEL_91;
        v172 = sub_23F7AE664(v76);
        if ((v174 & 1) == 0)
        {
          if (*((_DWORD *)v76 + 9) == v173)
          {
            if (v172 == 1 << *((_BYTE *)v76 + 32))
              goto LABEL_91;
            sub_23F7AE768(&v241, v172, v173, 0, (uint64_t)v76);
            v65 = v241;
            swift_bridgeObjectRetain();
            sub_23F6A3728(v65);
            swift_bridgeObjectRelease();
            sub_23F6A3764(v65);
            swift_bridgeObjectRelease();
            v240[0] = v65;
            sub_23F714868(v240);
            if (v145)
              goto LABEL_6;
            v175 = v239;
            v176 = v232;
            v177 = v80;
            v178 = v80;
            v179 = v238;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v239 + 16))(v232, v178, v238);
            goto LABEL_128;
          }
          __break(1u);
          goto LABEL_188;
        }
        goto LABEL_207;
      }
      v181 = v75 == 0x5F65766C6F736572 && v74 == 0xEC0000006C6F6F74;
      if (v181 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_23F7141D8((uint64_t)v76, (unint64_t)v237);
        if (v145)
        {
LABEL_138:
          swift_bridgeObjectRelease();
          return;
        }
        v183 = v182;
        swift_bridgeObjectRelease();
        v184 = v232;
        *v232 = v183;
        goto LABEL_141;
      }
      v185 = v75 == 1868852853 && v74 == 0xE400000000000000;
      if (v185 || (sub_23FB2FB78() & 1) != 0)
      {
        v186 = swift_bridgeObjectRetain();
        v187 = sub_23F7AE664(v186);
        if ((v189 & 1) == 0)
        {
          if (*((_DWORD *)v76 + 9) != v188)
          {
            __break(1u);
LABEL_200:
            __break(1u);
            goto LABEL_201;
          }
          if (v187 == 1 << *((_BYTE *)v76 + 32))
          {
            swift_bridgeObjectRelease();
            v190 = v227;
            v191 = v238;
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v227, 1, 1, v238);
            v192 = v228;
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v228, 1, 1, v191);
            sub_23F717D18(v190, v192, &qword_256EA49D8);
            v124 = v232;
            sub_23F6F594C(v192, (uint64_t)v232, type metadata accessor for UndoExpression);
LABEL_58:
            swift_storeEnumTagMultiPayload();
            sub_23F716630((uint64_t)v124, (uint64_t)v234);
            sub_23F6F5978((uint64_t)v124, type metadata accessor for Expression);
            return;
          }
          sub_23F7AE768(&v241, v187, v188, 0, (uint64_t)v76);
          v65 = v241;
          swift_bridgeObjectRetain();
          sub_23F6A3728(v65);
          swift_bridgeObjectRelease();
          sub_23F6A3764(v65);
          v193 = v76[2];
          swift_bridgeObjectRelease();
          if (v193 != 1)
          {
LABEL_166:
            sub_23F71482C();
            swift_allocError();
            *(_QWORD *)v206 = v237;
            *(_BYTE *)(v206 + 8) = 1;
            swift_retain();
            swift_willThrow();
            goto LABEL_6;
          }
          v240[0] = v65;
          v194 = v236;
          sub_23F714868(v240);
          if (v194)
          {
LABEL_6:
            swift_bridgeObjectRelease();
LABEL_43:
            v102 = v65;
            goto LABEL_44;
          }
          v179 = v238;
          v175 = v239;
          v195 = v227;
          v177 = v231;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v239 + 16))(v227, v231, v238);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v195, 0, 1, v179);
          v196 = v228;
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v228, 1, 1, v179);
          sub_23F717D18(v195, v196, &qword_256EA49D8);
          v176 = v232;
          sub_23F6F594C(v196, (uint64_t)v232, type metadata accessor for UndoExpression);
          goto LABEL_128;
        }
        goto LABEL_208;
      }
      v197 = v75 == 0x7463656A6572 && v74 == 0xE600000000000000;
      if (!v197 && (sub_23FB2FB78() & 1) == 0)
      {
        v207 = v75 == 0x6C65636E6163 && v74 == 0xE600000000000000;
        if (!v207 && (sub_23FB2FB78() & 1) == 0)
        {
LABEL_179:
          if (v75 == 0xD000000000000010 && v74 == 0x800000023FB322C0 || (sub_23FB2FB78() & 1) != 0)
          {
            v124 = v232;
            goto LABEL_58;
          }
          if (v75 == 0xD000000000000012 && v74 == 0x800000023FB322E0 || (sub_23FB2FB78() & 1) != 0)
          {
            v124 = v232;
            goto LABEL_58;
          }
LABEL_188:
          v216 = v75 == 1852141679 && v74 == 0xE400000000000000;
          if (!v216 && (sub_23FB2FB78() & 1) == 0)
          {
LABEL_201:
            swift_bridgeObjectRetain();
            v222 = swift_bridgeObjectRetain();
            v223 = v236;
            v147 = sub_23F717A3C(v222, v235);
            if (v223)
            {
              swift_bridgeObjectRelease();
              goto LABEL_138;
            }
            goto LABEL_204;
          }
          v217 = v76[2];
          swift_bridgeObjectRetain();
          if (v217 != 1)
            goto LABEL_91;
          v218 = sub_23F7AE664(v76);
          if ((v220 & 1) != 0)
          {
LABEL_212:
            __break(1u);
            JUMPOUT(0x23F7165A0);
          }
          if (*((_DWORD *)v76 + 9) == v219)
          {
            if (v218 == 1 << *((_BYTE *)v76 + 32))
              goto LABEL_91;
            sub_23F7AE768(&v241, v218, v219, 0, (uint64_t)v76);
            v65 = v241;
            swift_bridgeObjectRetain();
            sub_23F6A3728(v65);
            swift_bridgeObjectRelease();
            sub_23F6A3764(v65);
            swift_bridgeObjectRelease();
            v240[0] = v65;
            v221 = v236;
            sub_23F714868(v240);
            if (v221)
              goto LABEL_6;
            v179 = v238;
            v175 = v239;
            v176 = v232;
            v177 = v226;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v239 + 16))(v232, v226, v238);
LABEL_128:
            swift_storeEnumTagMultiPayload();
            sub_23F716630((uint64_t)v176, (uint64_t)v234);
            swift_bridgeObjectRelease();
            sub_23F6A3764(v65);
            sub_23F6F5978((uint64_t)v176, type metadata accessor for Expression);
            v121 = *(void (**)(char *, uint64_t))(v175 + 8);
            v122 = (char *)v177;
            goto LABEL_129;
          }
          goto LABEL_209;
        }
        v208 = v76[2];
        swift_bridgeObjectRetain();
        if (v208 != 1)
          goto LABEL_91;
        v209 = sub_23F7AE664(v76);
        if ((v211 & 1) != 0)
          goto LABEL_211;
        if (*((_DWORD *)v76 + 9) == v210)
        {
          if (v209 == 1 << *((_BYTE *)v76 + 32))
            goto LABEL_91;
          sub_23F7AE768(&v241, v209, v210, 0, (uint64_t)v76);
          v65 = v241;
          swift_bridgeObjectRetain();
          sub_23F6A3728(v65);
          swift_bridgeObjectRelease();
          sub_23F6A3764(v65);
          swift_bridgeObjectRelease();
          v240[0] = v65;
          v212 = v236;
          sub_23F714868(v240);
          if (v212)
            goto LABEL_6;
          v179 = v238;
          v213 = v239;
          v214 = v232;
          v215 = v229;
          (*(void (**)(uint64_t *, char *, uint64_t))(v239 + 16))(v232, v229, v238);
          swift_storeEnumTagMultiPayload();
          sub_23F716630((uint64_t)v214, (uint64_t)v234);
          swift_bridgeObjectRelease();
          sub_23F6A3764(v65);
          sub_23F6F5978((uint64_t)v214, type metadata accessor for Expression);
          v121 = *(void (**)(char *, uint64_t))(v213 + 8);
          v122 = v215;
          goto LABEL_129;
        }
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
        goto LABEL_212;
      }
      v198 = v76[2];
      swift_bridgeObjectRetain();
      if (v198 != 1)
        goto LABEL_91;
      v199 = sub_23F7AE664(v76);
      if ((v201 & 1) != 0)
        goto LABEL_210;
      if (*((_DWORD *)v76 + 9) != v200)
      {
        __break(1u);
        goto LABEL_206;
      }
      if (v199 == 1 << *((_BYTE *)v76 + 32))
        goto LABEL_91;
      sub_23F7AE768(&v241, v199, v200, 0, (uint64_t)v76);
      v65 = v241;
      swift_bridgeObjectRetain();
      sub_23F6A3728(v65);
      swift_bridgeObjectRelease();
      sub_23F6A3764(v65);
      swift_bridgeObjectRelease();
      v240[0] = v65;
      v202 = v236;
      sub_23F714868(v240);
      if (v202)
        goto LABEL_6;
      v179 = v238;
      v203 = v239;
      v204 = v232;
      v205 = v230;
      (*(void (**)(uint64_t *, char *, uint64_t))(v239 + 16))(v232, v230, v238);
      swift_storeEnumTagMultiPayload();
      sub_23F716630((uint64_t)v204, (uint64_t)v234);
      swift_bridgeObjectRelease();
      sub_23F6A3764(v65);
      sub_23F6F5978((uint64_t)v204, type metadata accessor for Expression);
      v121 = *(void (**)(char *, uint64_t))(v203 + 8);
      v122 = v205;
LABEL_129:
      v123 = v179;
LABEL_56:
      v121(v122, v123);
      return;
    case 0x13uLL:
      v105 = swift_projectBox();
      v106 = v231;
      sub_23F6F5920(v105, v231, (uint64_t (*)(_QWORD))type metadata accessor for AST.UpdateParameters);
      sub_23F716DB4(v106, (uint64_t)v234);
      v107 = (uint64_t (*)(_QWORD))type metadata accessor for AST.UpdateParameters;
      v136 = v106;
      goto LABEL_80;
    default:
      v108 = v58 | 2;
      v109 = *v237;
      sub_23F71482C();
      swift_allocError();
      *(_QWORD *)v110 = v108;
      *(_BYTE *)(v110 + 8) = 0;
      sub_23F6A3728(v109);
      goto LABEL_93;
  }
}

void sub_23F716630(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = sub_23F6916B8(&qword_256EA6550);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Expression(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23FB2C764();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ProgramStatement(0);
  v28 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v27 = (uint64_t)&v27 - v19;
  v20 = (unsigned int *)(v2[2] + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  sub_23FB2C74C();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  sub_23F6F5920(a1, (uint64_t)v10, type metadata accessor for Expression);
  v22 = sub_23FB2ED5C();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v7, 1, 1, v22);
  v23 = (uint64_t)&v18[*(int *)(v15 + 24)];
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v23, 1, 1, v22);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v14, v11);
  sub_23F6F594C((uint64_t)v10, (uint64_t)&v18[*(int *)(v15 + 20)], type metadata accessor for Expression);
  sub_23F717D18((uint64_t)v7, v23, &qword_256EA6550);
  v24 = v27;
  sub_23F6F594C((uint64_t)v18, v27, type metadata accessor for ProgramStatement);
  sub_23F83A96C();
  v25 = *(_QWORD *)(*v2 + 16);
  sub_23F83A9D8(v25);
  v26 = *v2;
  *(_QWORD *)(v26 + 16) = v25 + 1;
  sub_23F6F594C(v24, v26+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v25, type metadata accessor for ProgramStatement);
  *v2 = v26;
}

uint64_t sub_23F7168B4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void (*v24)(_BYTE *, _BYTE *, uint64_t);
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  uint64_t updated;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, uint64_t, uint64_t);
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v41 = type metadata accessor for Expression(0);
  MEMORY[0x24BDAC7A8](v41);
  v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_23FB2C764();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v35[-v13];
  v15 = sub_23F6916B8(&qword_256EA49D8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = *a1;
  if ((*a1 >> 59) & 0x1E | (*a1 >> 2) & 1)
  {
    v40 = a3;
    v43 = v18;
    v19 = v42;
    result = sub_23F717234((uint64_t)v12, &v43);
    if (!v19)
    {
      v24 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32);
      v38 = v21;
      v39 = result;
      v37 = v22;
      v42 = 0;
      v36 = v23;
      v24(v14, v12, v8);
      v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16);
      v25(v7, v14, v8);
      sub_23F6916B8(&qword_256EA62F0);
      updated = type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
      v27 = *(unsigned __int8 *)(*(_QWORD *)(updated - 8) + 80);
      v28 = (v27 + 32) & ~v27;
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_23FB47010;
      v30 = v29 + v28;
      v25((_BYTE *)(v30 + *(int *)(updated + 28)), a2, v8);
      v31 = v38;
      *(_QWORD *)v30 = v39;
      *(_QWORD *)(v30 + 8) = v31;
      *(_QWORD *)(v30 + 16) = v37;
      *(_BYTE *)(v30 + 24) = v36 & 1;
      *(_BYTE *)(v30 + 25) = 1;
      *(_QWORD *)&v7[*(int *)(type metadata accessor for UpdateParametersExpression(0) + 20)] = v29;
      swift_storeEnumTagMultiPayload();
      sub_23F716630((uint64_t)v7, v40);
      sub_23F6F5978((uint64_t)v7, type metadata accessor for Expression);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
    }
  }
  else
  {
    v32 = *(_QWORD *)(v18 + 16);
    v33 = *(_QWORD *)(v18 + 24);
    v34 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
    v34(v17, (uint64_t)a2, v8);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v8);
    swift_bridgeObjectRetain();
    sub_23F7D32A4((uint64_t)v17, v32, v33);
    return ((uint64_t (*)(uint64_t, _BYTE *, uint64_t))v34)(a3, a2, v8);
  }
  return result;
}

uint64_t sub_23F716B78@<X0>(int a1@<W0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  void (*v32)(_BYTE *, uint64_t);
  _BYTE v33[12];
  int v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;

  LODWORD(v38) = a1;
  v39 = a4;
  v6 = type metadata accessor for Expression(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_23FB2C764();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v33[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BDAC7A8](v11);
  v40 = &v33[-v15];
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v33[-v16];
  v18 = *a2;
  v42 = *a3;
  v19 = v41;
  result = sub_23F714868(&v42);
  if (!v19)
  {
    v35 = v6;
    v36 = v13;
    v37 = v17;
    v41 = v9;
    v42 = v18;
    v21 = v40;
    sub_23F714868(&v42);
    AST.InfixOp.toInfixOp.getter(v38, &v42);
    v34 = v42;
    v22 = type metadata accessor for InfixExpression(0);
    v23 = v8;
    v24 = &v8[*(int *)(v22 + 20)];
    v38 = v10;
    v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16);
    v26 = v41;
    v25(v24, v21, v41);
    v27 = *(int *)(v22 + 24);
    v28 = v26;
    v29 = &v8[v27];
    v30 = v37;
    v25(v29, v37, v26);
    *v23 = v34;
    swift_storeEnumTagMultiPayload();
    v31 = v36;
    sub_23F716630((uint64_t)v23, (uint64_t)v36);
    sub_23F6F5978((uint64_t)v23, type metadata accessor for Expression);
    v42 = v18;
    sub_23F7168B4(&v42, v31, v39);
    v32 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
    v32(v31, v28);
    v32(v21, v28);
    return ((uint64_t (*)(_BYTE *, uint64_t))v32)(v30, v28);
  }
  return result;
}

void sub_23F716DB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;

  v41 = a2;
  v39 = type metadata accessor for Expression(0);
  MEMORY[0x24BDAC7A8](v39);
  v40 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
  v44 = *(_QWORD *)(updated - 8);
  v45 = updated;
  v5 = MEMORY[0x24BDAC7A8](updated);
  v47 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v38 - v7;
  v9 = sub_23FB2C764();
  v48 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for AST.UpdateParameters() + 20);
  v38 = a1;
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(v12 + 64);
  v42 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v43 = (unint64_t)(v14 + 63) >> 6;
  v46 = v12;
  swift_bridgeObjectRetain();
  v17 = 0;
  v18 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v50 = v18;
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v43)
      goto LABEL_28;
    v22 = *(_QWORD *)(v42 + 8 * v17);
    if (!v22)
      break;
LABEL_16:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_17:
    v24 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * v20);
    v25 = *v24;
    v26 = v24[1];
    v27 = *(_QWORD *)(v46 + 56) + 16 * v20;
    v28 = *(_BYTE *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    v53 = v29;
    sub_23F6A3728(v29);
    swift_bridgeObjectRetain();
    sub_23F6A3728(v29);
    v31 = v51;
    v30 = v52;
    sub_23F714868(&v53);
    v52 = v30;
    if (v30)
    {
      swift_bridgeObjectRelease();
      sub_23F6A3764(v29);
      sub_23F6A3764(v29);
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    sub_23F6A3764(v29);
    swift_bridgeObjectRetain();
    sub_23F6A3728(v29);
    sub_23F6A3764(v29);
    swift_bridgeObjectRetain();
    sub_23F6A3728(v29);
    swift_bridgeObjectRelease();
    sub_23F6A3764(v29);
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(&v8[*(int *)(v45 + 28)], v31, v49);
    *(_QWORD *)v8 = v25;
    *((_QWORD *)v8 + 1) = v26;
    *((_QWORD *)v8 + 2) = 0;
    v8[24] = 1;
    v8[25] = v28;
    sub_23F6F5920((uint64_t)v8, v47, type metadata accessor for UpdateParametersExpression.UpdateParameter);
    v18 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F753F00();
      v18 = v33;
    }
    v32 = *(_QWORD *)(v18 + 16);
    if (v32 >= *(_QWORD *)(v18 + 24) >> 1)
    {
      sub_23F753F00();
      v18 = v34;
    }
    *(_QWORD *)(v18 + 16) = v32 + 1;
    sub_23F6F594C(v47, v18+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v32, type metadata accessor for UpdateParametersExpression.UpdateParameter);
    swift_bridgeObjectRelease();
    sub_23F6A3764(v29);
    sub_23F6F5978((uint64_t)v8, type metadata accessor for UpdateParametersExpression.UpdateParameter);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v49);
  }
  v23 = v17 + 1;
  if (v17 + 1 >= v43)
    goto LABEL_28;
  v22 = *(_QWORD *)(v42 + 8 * v23);
  if (v22)
    goto LABEL_15;
  v23 = v17 + 2;
  if (v17 + 2 >= v43)
    goto LABEL_28;
  v22 = *(_QWORD *)(v42 + 8 * v23);
  if (v22)
    goto LABEL_15;
  v23 = v17 + 3;
  if (v17 + 3 >= v43)
  {
LABEL_28:
    v36 = (uint64_t)v40;
    v35 = v41;
    v37 = v38;
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v36, v37, v49);
    *(_QWORD *)(v36 + *(int *)(type metadata accessor for UpdateParametersExpression(0) + 20)) = v18;
    swift_storeEnumTagMultiPayload();
    sub_23F716630(v36, v35);
    sub_23F6F5978(v36, type metadata accessor for Expression);
    return;
  }
  v22 = *(_QWORD *)(v42 + 8 * v23);
  if (v22)
  {
LABEL_15:
    v17 = v23;
    goto LABEL_16;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v43)
      goto LABEL_28;
    v22 = *(_QWORD *)(v42 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_23F717234(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v5 = sub_23FB2C764();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v28 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v28 - v13;
  v15 = *a2;
  if (((1 << ((v15 >> 59) & 0x1E | ((v15 & 4) != 0))) & 0x1FFF9F) != 0)
  {
    sub_23F71482C();
    swift_allocError();
    *(_QWORD *)v16 = v15;
    *(_BYTE *)(v16 + 8) = 0;
    sub_23F6A3728(v15);
    swift_willThrow();
    return a1;
  }
  v31 = a1;
  if (((v15 >> 59) & 0x1E | (v15 >> 2) & 1) == 5)
  {
    v18 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
    a1 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
    v32 = v18;
    sub_23F6A3728(v18);
    swift_bridgeObjectRetain();
    sub_23F714868(&v32);
    if (!v2)
    {
      sub_23F6A3764(v18);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v31, v14, v5);
      return a1;
    }
    swift_bridgeObjectRelease();
    v19 = v18;
    goto LABEL_9;
  }
  v21 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
  v20 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
  v32 = v21;
  sub_23F6A3728(v21);
  v30 = v20;
  sub_23F6A3728(v20);
  v22 = sub_23F717234(v9, &v32);
  if (v2)
  {
    sub_23F6A3764(v30);
    v19 = v21;
LABEL_9:
    sub_23F6A3764(v19);
    return a1;
  }
  a1 = v22;
  v29 = v21;
  v23 = v30;
  v24 = (v30 >> 59) & 0x1E;
  v25 = v9;
  v26 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v26(v12, v25, v5);
  if ((v24 & 0xFFFFFFFE | (v23 >> 2) & 1) == 2 && *(_BYTE *)((v23 & 0xFFFFFFFFFFFFFFBLL) + 0x20) == 1)
  {
    sub_23F6A3764(v29);
    sub_23F6A3764(v23);
    v26((char *)v31, v12, v5);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_23F71482C();
    swift_allocError();
    *(_QWORD *)v27 = v23 | 3;
    *(_BYTE *)(v27 + 8) = 0;
    sub_23F6A3728(v23);
    swift_willThrow();
    sub_23F6A3764(v29);
    sub_23F6A3764(v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  return a1;
}

uint64_t static ExpressionFlattener.BuiltinIdentifiers.say.getter()
{
  return 7954803;
}

void static ExpressionFlattener.BuiltinIdentifiers.pick.getter()
{
  sub_23F717D68();
}

uint64_t static ExpressionFlattener.BuiltinIdentifiers.confirm.getter()
{
  return 0x6D7269666E6F63;
}

void static ExpressionFlattener.BuiltinIdentifiers.search.getter()
{
  sub_23F717D70();
}

uint64_t static ExpressionFlattener.BuiltinIdentifiers.pickOne.getter()
{
  return 0x656E6F5F6B636970;
}

uint64_t static ExpressionFlattener.BuiltinIdentifiers.resolveTool.getter()
{
  return 0x5F65766C6F736572;
}

unint64_t static ExpressionFlattener.BuiltinIdentifiers.noMatchingTool.getter()
{
  return 0xD000000000000010;
}

void static ExpressionFlattener.BuiltinIdentifiers.undo.getter()
{
  sub_23F717D68();
}

void static ExpressionFlattener.BuiltinIdentifiers.reject.getter()
{
  sub_23F717D70();
}

void static ExpressionFlattener.BuiltinIdentifiers.cancel.getter()
{
  sub_23F717D70();
}

unint64_t static ExpressionFlattener.BuiltinIdentifiers.getMentionedApps.getter()
{
  return 0xD000000000000012;
}

void static ExpressionFlattener.BuiltinIdentifiers.open.getter()
{
  sub_23F717D68();
}

uint64_t destroy for ExpressionFlattener()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *_s30IntelligenceFlowPlannerSupport19ExpressionFlattenerVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ExpressionFlattener(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ExpressionFlattener(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionFlattener(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionFlattener(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ExpressionFlattener()
{
  sub_23F694C70();
}

void type metadata accessor for ExpressionFlattener.BuiltinIdentifiers()
{
  sub_23F694C70();
}

uint64_t sub_23F7177E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23F717824(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

unint64_t sub_23F717824(unint64_t result, char a2)
{
  int v2;

  if ((a2 & 1) != 0)
    v2 = 4;
  else
    v2 = 0;
  switch(v2 & 0xFFFFFFFC | result & 3)
  {
    case 0uLL:
    case 4uLL:
      goto LABEL_6;
    case 1uLL:
      result = swift_retain();
      break;
    case 2uLL:
    case 3uLL:
      result &= 0xFFFFFFFFFFFFFFFCLL;
LABEL_6:
      result = sub_23F6A3728(result);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_23F717868(uint64_t a1)
{
  return sub_23F717878(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

unint64_t sub_23F717878(unint64_t result, char a2)
{
  int v2;

  if ((a2 & 1) != 0)
    v2 = 4;
  else
    v2 = 0;
  switch(v2 & 0xFFFFFFFC | result & 3)
  {
    case 0uLL:
    case 4uLL:
      goto LABEL_6;
    case 1uLL:
      result = swift_release();
      break;
    case 2uLL:
    case 3uLL:
      result &= 0xFFFFFFFFFFFFFFFCLL;
LABEL_6:
      result = sub_23F6A3764(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23F7178BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23F717824(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_23F717878(v5, v6);
  return a1;
}

uint64_t sub_23F71790C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_23F717878(v5, v6);
  return a1;
}

uint64_t sub_23F717948(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x3FC && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 1019;
    }
    else
    {
      v2 = (*(_DWORD *)a1 & 3 | (4 * *(unsigned __int8 *)(a1 + 8))) ^ 0x3FF;
      if (v2 >= 0x3FB)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_23F717994(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 1020;
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = -a2 & 3;
      *(_BYTE *)(result + 8) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_23F7179E4(int *a1)
{
  int v1;
  int v2;

  v1 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = 4;
  else
    v2 = 0;
  return v2 & 0xFFFFFFFC | v1 & 3;
}

_QWORD *sub_23F717A00(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFFFCLL;
  return result;
}

uint64_t sub_23F717A10(uint64_t result, char a2)
{
  *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFCLL | a2 & 3;
  *(_BYTE *)(result + 8) = (a2 & 4) != 0;
  return result;
}

void type metadata accessor for ExpressionFlattenerError()
{
  sub_23F694C70();
}

uint64_t sub_23F717A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v34 = a2;
  v4 = sub_23FB2C764();
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA6520);
  result = sub_23FB2F98C();
  v8 = result;
  v9 = 0;
  v33 = a1;
  v12 = *(_QWORD *)(a1 + 64);
  v11 = a1 + 64;
  v10 = v12;
  v13 = 1 << *(_BYTE *)(v11 - 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v10;
  v28 = v11;
  v29 = (unint64_t)(v13 + 63) >> 6;
  v30 = result + 64;
  v35 = result;
  if ((v14 & v10) == 0)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v16 | (v9 << 6); ; i = __clz(__rbit64(v19)) + (v9 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * i);
    v22 = *v21;
    v23 = v21[1];
    v36 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * i);
    v24 = v36;
    swift_bridgeObjectRetain();
    sub_23F6A3728(v24);
    sub_23F714868(&v36);
    if (v2)
    {
      swift_bridgeObjectRelease();
      v8 = v35;
      swift_release();
      sub_23F6A3764(v24);
      return v8;
    }
    sub_23F6A3764(v24);
    *(_QWORD *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v8 = v35;
    v25 = (_QWORD *)(*(_QWORD *)(v35 + 48) + 16 * i);
    *v25 = v22;
    v25[1] = v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v31 + 32))(*(_QWORD *)(v8 + 56) + *(_QWORD *)(v31 + 72) * i, v6, v32);
    v26 = *(_QWORD *)(v8 + 16);
    v18 = __OFADD__(v26, 1);
    v27 = v26 + 1;
    if (v18)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(_QWORD *)(v8 + 16) = v27;
    if (v15)
      goto LABEL_4;
LABEL_5:
    v18 = __OFADD__(v9++, 1);
    if (v18)
      goto LABEL_28;
    if (v9 >= v29)
      return v8;
    v19 = *(_QWORD *)(v28 + 8 * v9);
    if (!v19)
      break;
LABEL_15:
    v15 = (v19 - 1) & v19;
  }
  v20 = v9 + 1;
  if (v9 + 1 >= v29)
    return v8;
  v19 = *(_QWORD *)(v28 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v9 + 2;
  if (v9 + 2 >= v29)
    return v8;
  v19 = *(_QWORD *)(v28 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v9 + 3;
  if (v9 + 3 >= v29)
    return v8;
  v19 = *(_QWORD *)(v28 + 8 * v20);
  if (v19)
  {
LABEL_14:
    v9 = v20;
    goto LABEL_15;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v29)
      return v35;
    v19 = *(_QWORD *)(v28 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_15;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23F717CD8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA49D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23F717D18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_23F6916B8(a3);
  sub_23F6B5FFC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_23F694CC8();
}

uint64_t sub_23F717D54()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F717D5C()
{
  return swift_release_n();
}

uint64_t static FeatureStoreWrapper.runReplayableOperation<A, B>(interactionId:input:_:)()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23FB2C554();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F6B796C;
  return sub_23FB2C53C();
}

ValueMetadata *type metadata accessor for FeatureStoreWrapper()
{
  return &type metadata for FeatureStoreWrapper;
}

uint64_t sub_23F717E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(sub_23F72E218() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = AST.FlatValue.description.getter();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_23F711194(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23F717F40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(sub_23F6916B8(&qword_256EA27D8) - 8);
    v5 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v12 = *v5;
      v13 = v5[1];
      swift_bridgeObjectRetain();
      v7 = sub_23FB2F254();
      AST.FlatValue.description.getter(v7);
      sub_23FB2F254();
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v14 + 16);
      v8 = *(_QWORD *)(v14 + 24);
      if (v9 >= v8 >> 1)
        sub_23F711194(v8 > 1, v9 + 1, 1);
      v5 = (uint64_t *)((char *)v5 + v6);
      *(_QWORD *)(v14 + 16) = v9 + 1;
      v10 = v14 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v12;
      *(_QWORD *)(v10 + 40) = v13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void AST.FlatValue.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;

  sub_23F6B50E8();
  v1 = sub_23F72E034();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F72E0DC();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for AST.FlatValue(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B53AC();
  sub_23F72E0C0(v0, v4, v5);
  sub_23F72E2E0();
  v6 = (char *)sub_23F718144 + 4 * byte_23FB569D0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F718144()
{
  sub_23F693DDC();
}

uint64_t type metadata accessor for AST.FlatValue(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA6AB0);
}

uint64_t AST.FlatAssignExpr.name.getter()
{
  sub_23F6B54F8();
  return sub_23F6B5994();
}

void AST.FlatAssignExpr.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  sub_23F694C84();
}

uint64_t (*AST.FlatAssignExpr.name.modify())()
{
  return nullsub_1;
}

void AST.FlatAssignExpr.expr.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for AST.FlatAssignExpr(0);
  sub_23F72E068(v0 + *(int *)(v1 + 20), v2, type metadata accessor for AST.FlatExpr);
  sub_23F694CC8();
}

void AST.FlatAssignExpr.expr.setter(uint64_t a1)
{
  uint64_t v2;

  sub_23F72E308();
  sub_23F7232E0(a1, v2, type metadata accessor for AST.FlatExpr);
  sub_23F694CC8();
}

uint64_t (*AST.FlatAssignExpr.expr.modify())()
{
  sub_23F72E308();
  return nullsub_1;
}

void AST.FlatAssignExpr.init(name:expr:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;

  *a4 = a1;
  a4[1] = a2;
  sub_23F72E308();
  sub_23F6F594C(a3, v5, type metadata accessor for AST.FlatExpr);
  sub_23F694CC8();
}

uint64_t AST.FlatAssignExpr.description.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  sub_23FB2F254();
  type metadata accessor for AST.FlatAssignExpr(0);
  AST.FlatExpr.description.getter();
  sub_23FB2F254();
  sub_23F693E04();
  return v2;
}

void static AST.FlatAssignExpr.== infix(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v22 = *a1 == *a2 && a1[1] == a2[1];
  if (v22 || (sub_23F6B5280() & 1) != 0)
  {
    v23 = *(int *)(type metadata accessor for AST.FlatAssignExpr(0) + 20);
    static AST.FlatExpr.== infix(_:_:)((uint64_t)a1 + v23, (uint64_t)a2 + v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20);
  }
  else
  {
    sub_23F694CC8();
  }
}

void static AST.FlatExpr.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  _QWORD v91[33];
  uint64_t v92;
  char *v93;

  sub_23F6B50E8();
  a19 = v20;
  a20 = v21;
  v92 = v22;
  v93 = (char *)v23;
  v24 = sub_23F6916B8(&qword_256EA27A0);
  sub_23F6B53F8(v24, (uint64_t)&a12);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F6B5314((uint64_t)v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6916B8(&qword_256EA2798);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B6580();
  sub_23F70D434(v29);
  v30 = sub_23FB2C4B8();
  v91[31] = *(_QWORD *)(v30 - 8);
  v91[32] = v30;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F693E0C();
  v91[20] = v32;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6D3D14();
  v91[19] = v34;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6B6580();
  v40 = sub_23F70D434(v39);
  type metadata accessor for AST.FlatValue(v40);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F693E0C();
  v91[15] = v42;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6D3D14();
  v91[16] = v44;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6D3D14();
  v91[18] = v46;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v48);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v49);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v50);
  sub_23F6D3D14();
  v91[14] = v51;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v52);
  sub_23F6D3D14();
  v91[17] = v53;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v54);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v55);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v56);
  sub_23F6B6580();
  v58 = sub_23F70D434(v57);
  type metadata accessor for AST.FlatExpr(v58);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v59);
  sub_23F693E0C();
  v91[30] = v60;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v61);
  v91[29] = (char *)v91 - v62;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v63);
  sub_23F6D3D14();
  v91[24] = v64;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v65);
  sub_23F6D3D14();
  v91[26] = v66;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v67);
  v91[28] = (char *)v91 - v68;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v69);
  sub_23F6D3D14();
  v91[22] = v70;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v71);
  sub_23F6D3D14();
  v91[27] = v72;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v73);
  v91[23] = (char *)v91 - v74;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v75);
  sub_23F6D3BD8();
  v77 = MEMORY[0x24BDAC7A8](v76);
  MEMORY[0x24BDAC7A8](v77);
  sub_23F6D3A70();
  MEMORY[0x24BDAC7A8](v78);
  sub_23F6D3D14();
  v91[25] = v79;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v80);
  sub_23F6D3D14();
  v91[21] = v81;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v82);
  sub_23F713FE0();
  MEMORY[0x24BDAC7A8](v83);
  sub_23F72E190();
  MEMORY[0x24BDAC7A8](v84);
  sub_23F6916B8(&qword_256EA6578);
  sub_23F693E20();
  v86 = MEMORY[0x24BDAC7A8](v85);
  v88 = (char *)v91 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = (uint64_t)&v88[*(int *)(v86 + 48)];
  sub_23F6F5920(v92, (uint64_t)v88, type metadata accessor for AST.FlatExpr);
  v92 = v89;
  sub_23F6F5920((uint64_t)v93, v89, type metadata accessor for AST.FlatExpr);
  v93 = v88;
  v90 = (char *)sub_23F7189B4 + 4 * word_23FB569DC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F7189B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_23F72DF8C();
  sub_23F6F5920(v3, v0, v4);
  v5 = *(_QWORD *)(v2 - 104);
  if (sub_23F72DF38())
  {
    sub_23F6D3508(v0, type metadata accessor for AST.FlatValue);
    sub_23F6B4F84(v1, &qword_256EA6578);
  }
  else
  {
    v6 = v5;
    v7 = *(_QWORD *)(v2 - 352);
    sub_23F6F594C(v6, v7, type metadata accessor for AST.FlatValue);
    static AST.FlatValue.== infix(_:_:)();
    sub_23F6D3928(v7);
    sub_23F6D3928(v0);
    sub_23F6D3508(v1, type metadata accessor for AST.FlatExpr);
  }
  sub_23F693DDC();
}

uint64_t sub_23F719474(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919973477 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F719548(char a1)
{
  if ((a1 & 1) != 0)
    return 1919973477;
  else
    return 1701667182;
}

uint64_t sub_23F719568()
{
  char *v0;

  return sub_23F719548(*v0);
}

uint64_t sub_23F719570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F719474(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F719594()
{
  sub_23F721530();
  return sub_23FB2FD10();
}

uint64_t sub_23F7195BC()
{
  sub_23F721530();
  return sub_23FB2FD1C();
}

uint64_t AST.FlatAssignExpr.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  sub_23F6916B8(&qword_256EA6580);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23F6ADC98(a1, a1[3]);
  sub_23F721530();
  sub_23F6B63A4();
  v8[15] = 0;
  sub_23FB2FADC();
  if (!v1)
  {
    type metadata accessor for AST.FlatAssignExpr(0);
    sub_23F6B6360();
    sub_23F72E324();
    sub_23F72156C(&qword_256EA6590, (void (*)(uint64_t))type metadata accessor for AST.FlatExpr);
    sub_23F70D4F0();
  }
  return sub_23F6B56E0((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
}

void AST.FlatAssignExpr.init(from:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23F6B5220();
  v5 = v4;
  v14 = v6;
  sub_23F72E324();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5BD8(v8, v13);
  sub_23F6916B8(&qword_256EA6598);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B53AC();
  v10 = type metadata accessor for AST.FlatAssignExpr(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B52B0();
  sub_23F6ADC98(v5, v5[3]);
  sub_23F721530();
  sub_23FB2FCB0();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v5);
  }
  else
  {
    *v1 = sub_23FB2FA40();
    v1[1] = v12;
    sub_23F6B6360();
    sub_23F72156C(&qword_256EA65A0, (void (*)(uint64_t))type metadata accessor for AST.FlatExpr);
    sub_23FB2FA7C();
    sub_23F6B51EC(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_23F6F594C(v15, (uint64_t)v1 + *(int *)(v10 + 20), type metadata accessor for AST.FlatExpr);
    sub_23F6F5920((uint64_t)v1, v14, type metadata accessor for AST.FlatAssignExpr);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v5);
    sub_23F6D3508((uint64_t)v1, type metadata accessor for AST.FlatAssignExpr);
  }
  sub_23F6B5100();
}

void sub_23F7198F4()
{
  AST.FlatAssignExpr.init(from:)();
}

uint64_t sub_23F719908(_QWORD *a1)
{
  return AST.FlatAssignExpr.encode(to:)(a1);
}

void AST.FlatValue.isStatement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for AST.FlatValue(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F72DFF0(v2, v3);
  sub_23F72E388();
  sub_23F6D3DAC(v0);
  sub_23F694C84();
}

void AST.FlatValue.isIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for AST.FlatValue(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F72DFF0(v2, v3);
  sub_23F72E388();
  sub_23F6D3DAC(v0);
  sub_23F694C84();
}

uint64_t AST.FlatValue.asString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  sub_23F72E218();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B5298();
  sub_23F72E068(v1, v3, v4);
  if (sub_23F72DFE0() == 3)
    return *(_QWORD *)v0;
  sub_23F6D3508(v0, type metadata accessor for AST.FlatValue);
  return 0;
}

void AST.FlatValue.asStatement.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  type metadata accessor for AST.FlatValue(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6F5920(v2, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload() == 8)
  {
    v8 = sub_23F6B58C8();
    v9 = sub_23F6B5994();
    sub_23F72E0C8(v9, v10, v11);
    v12 = a1;
    v13 = 0;
    v14 = v8;
  }
  else
  {
    sub_23F6D3508((uint64_t)v6, type metadata accessor for AST.FlatValue);
    v14 = sub_23F6B58C8();
    v12 = a1;
    v13 = 1;
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v12, v13, 1, v14);
  sub_23F694C84();
}

void static AST.FlatValue.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD v28[10];
  uint64_t v29;
  char *v30;

  sub_23F6B50E8();
  v29 = v0;
  v30 = (char *)v1;
  v2 = sub_23F72E034();
  v28[6] = *(_QWORD *)(v2 - 8);
  v28[7] = v2;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  v28[1] = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23F6B58C8();
  v28[2] = *(_QWORD *)(v5 - 8);
  v28[3] = v5;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v28[0] = v7;
  sub_23F72E218();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693E0C();
  v28[9] = v9;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  v28[5] = (char *)v28 - v11;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6D3D14();
  v28[8] = v13;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  v28[4] = (char *)v28 - v15;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F72E1A4();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F70DD48();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F713FE0();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6D3A70();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6916B8(&qword_256EA65A8);
  sub_23F693E20();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t)&v25[*(int *)(v23 + 48)];
  sub_23F6F5920(v29, (uint64_t)v25, type metadata accessor for AST.FlatValue);
  v29 = v26;
  sub_23F6F5920((uint64_t)v30, v26, type metadata accessor for AST.FlatValue);
  v30 = v25;
  v27 = (char *)sub_23F719D28 + 4 * byte_23FB56A04[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F719D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  v1 = sub_23F72E04C();
  sub_23F72E068(v1, v2, v3);
  if (sub_23F72DF7C())
    sub_23F6B4F84(v0, &qword_256EA65A8);
  else
    sub_23F6D3508(v0, type metadata accessor for AST.FlatValue);
  sub_23F693DDC();
}

uint64_t AST.FlatValue.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_23F6B50E8();
  sub_23F72E034();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v13);
  v14 = sub_23F72E0DC();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F693EB0();
  sub_23F72E218();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B53AC();
  sub_23F72E0C0(v12, v16, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_23F71A140 + 4 * byte_23FB56A0F[EnumCaseMultiPayload]))(EnumCaseMultiPayload, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_23F71A140()
{
  sub_23FB2FC68();
  return sub_23FB2FC74();
}

uint64_t sub_23F71A2C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  char v16;

  v2 = a1 == 1819047278 && a2 == 0xE400000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1819242338 && a2 == 0xE400000000000000;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 7630441 && a2 == 0xE300000000000000;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x656C62756F64 && a2 == 0xE600000000000000;
        if (v8 || (sub_23FB2FB78() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x676E69727473 && a2 == 0xE600000000000000;
          if (v9 || (sub_23FB2FB78() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x7961727261 && a2 == 0xE500000000000000;
            if (v10 || (sub_23FB2FB78() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              v11 = a1 == 1952672100 && a2 == 0xE400000000000000;
              if (v11 || (sub_23FB2FB78() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                v12 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
                if (v12 || (sub_23FB2FB78() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  v13 = a1 == 0x656C626169726176 && a2 == 0xE800000000000000;
                  if (v13 || (sub_23FB2FB78() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else
                  {
                    v14 = a1 == 0x6E656D6574617473 && a2 == 0xE900000000000074;
                    if (v14 || (sub_23FB2FB78() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 9;
                    }
                    else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else
                    {
                      v16 = sub_23FB2FB78();
                      swift_bridgeObjectRelease();
                      if ((v16 & 1) != 0)
                        return 10;
                      else
                        return 11;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_23F71A6D0()
{
  return 11;
}

uint64_t sub_23F71A6D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F71A704 + 4 * byte_23FB56A1A[a1]))(1819047278, 0xE400000000000000);
}

uint64_t sub_23F71A704()
{
  return 1819242338;
}

uint64_t sub_23F71A710()
{
  return 7630441;
}

uint64_t sub_23F71A720()
{
  return 0x656C62756F64;
}

uint64_t sub_23F71A734()
{
  return 0x676E69727473;
}

uint64_t sub_23F71A748()
{
  return 0x7961727261;
}

uint64_t sub_23F71A75C()
{
  return 1952672100;
}

uint64_t sub_23F71A768()
{
  return 0x6C6F626D7973;
}

uint64_t sub_23F71A77C()
{
  return 0x6E656D6574617473;
}

uint64_t sub_23F71A798()
{
  return 0x696669746E656469;
}

uint64_t sub_23F71A7B4()
{
  return 0x656C626169726176;
}

uint64_t sub_23F71A7CC()
{
  sub_23F7228AC();
  return sub_23FB2FD10();
}

uint64_t sub_23F71A7F4()
{
  sub_23F7228AC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71A81C()
{
  sub_23F722A18();
  return sub_23FB2FD10();
}

uint64_t sub_23F71A844()
{
  sub_23F722A18();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71A86C()
{
  unsigned __int8 *v0;

  return sub_23F71A6D8(*v0);
}

uint64_t sub_23F71A874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F71A2C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F71A898@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23F71A6D0();
  *a1 = result;
  return result;
}

uint64_t sub_23F71A8BC()
{
  sub_23F7226C0();
  return sub_23FB2FD10();
}

uint64_t sub_23F71A8E4()
{
  sub_23F7226C0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71A90C()
{
  sub_23F7227EC();
  return sub_23FB2FD10();
}

uint64_t sub_23F71A934()
{
  sub_23F7227EC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71A95C()
{
  sub_23F7229A0();
  return sub_23FB2FD10();
}

uint64_t sub_23F71A984()
{
  sub_23F7229A0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71A9AC()
{
  sub_23F7226FC();
  return sub_23FB2FD10();
}

uint64_t sub_23F71A9D4()
{
  sub_23F7226FC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71A9FC()
{
  sub_23F7229DC();
  return sub_23FB2FD10();
}

uint64_t sub_23F71AA24()
{
  sub_23F7229DC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71AA4C()
{
  sub_23F722A54();
  return sub_23FB2FD10();
}

uint64_t sub_23F71AA74()
{
  sub_23F722A54();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71AA9C()
{
  sub_23F722738();
  return sub_23FB2FD10();
}

uint64_t sub_23F71AAC4()
{
  sub_23F722738();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71AAEC()
{
  sub_23F722964();
  return sub_23FB2FD10();
}

uint64_t sub_23F71AB14()
{
  sub_23F722964();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71AB3C()
{
  sub_23F7227B0();
  return sub_23FB2FD10();
}

uint64_t sub_23F71AB64()
{
  sub_23F7227B0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71AB8C()
{
  sub_23F722774();
  return sub_23FB2FD10();
}

uint64_t sub_23F71ABB4()
{
  sub_23F722774();
  return sub_23FB2FD1C();
}

void AST.FlatValue.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45[15];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = sub_23F6916B8(&qword_256EA65B0);
  v58[0] = *(_QWORD *)(v4 - 8);
  v58[1] = v4;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_23F72E034();
  v55 = *(_QWORD *)(v57 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v54 = v8;
  v53 = sub_23F6916B8(&qword_256EA65B8);
  v51 = *(_QWORD *)(v53 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B658C(v10, v45[0]);
  v52 = sub_23FB2C764();
  v50 = *(_QWORD *)(v52 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B57D8(v12, v45[0]);
  v13 = sub_23F6916B8(&qword_256EA65C0);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F70D7DC(v15, v45[0]);
  v16 = sub_23F6916B8(&qword_256EA65C8);
  sub_23F6B53F8(v16, (uint64_t)&v63);
  sub_23F72DE4C(v17);
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B5314((uint64_t)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = sub_23F6916B8(&qword_256EA65D0);
  sub_23F72DE4C(*(_QWORD *)(v47 - 8));
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B5314((uint64_t)v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = sub_23F6916B8(&qword_256EA65D8);
  sub_23F72DE4C(*(_QWORD *)(v46 - 8));
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B5314((uint64_t)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = sub_23F6916B8(&qword_256EA65E0);
  sub_23F6B53F8(v24, (uint64_t)&v62);
  sub_23F72DE4C(v25);
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B5314((uint64_t)v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_23F6916B8(&qword_256EA65E8);
  sub_23F6B53F8(v28, (uint64_t)&v61);
  sub_23F72DE4C(v29);
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B51A4();
  sub_23F6B5314(v31);
  v32 = sub_23F6916B8(&qword_256EA65F0);
  sub_23F6B53F8(v32, (uint64_t)&v59);
  sub_23F72DE4C(v33);
  MEMORY[0x24BDAC7A8](v34);
  sub_23F6B51A4();
  sub_23F6B5314(v35);
  v36 = sub_23F6916B8(&qword_256EA65F8);
  sub_23F6B53F8(v36, (uint64_t)v58);
  sub_23F72DE4C(v37);
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6B5314((uint64_t)v45 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_23F6916B8(&qword_256EA6600);
  MEMORY[0x24BDAC7A8](v40);
  v41 = sub_23F70D7F8();
  type metadata accessor for AST.FlatValue(v41);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F693EB0();
  v60 = sub_23F6916B8(&qword_256EA6608);
  v58[2] = *(_QWORD *)(v60 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6B52B0();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7226C0();
  v59 = v1;
  sub_23FB2FCC8();
  sub_23F6F5920(v61, v2, type metadata accessor for AST.FlatValue);
  v44 = (char *)sub_23F71AF8C + 4 * byte_23FB56A25[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F71AF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  sub_23F72E4D0();
  sub_23F72E2EC();
  v2 = *(_QWORD *)(v1 - 120);
  sub_23FB2FAA0();
  sub_23F72E530();
  sub_23FB2FAE8();
  sub_23F6B56E0(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 416) + 8));
  v3 = sub_23F6B54C8();
  v4(v3, v2);
  sub_23F70D684();
}

void AST.FlatValue.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[9];

  sub_23F6B53C4();
  AST.FlatValue.hash(into:)((uint64_t)v8, v0, v1, v2, v3, v4, v5, v6, v7, v8[0], v8[1], v8[2]);
  sub_23F6B5608();
  sub_23F6B5398();
}

void AST.FlatValue.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76[14];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[12];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;

  v81[8] = a2;
  v8 = sub_23F6916B8(&qword_256EA66A0);
  sub_23F6B53F8(v8, (uint64_t)&v89);
  v81[11] = v9;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5544(v11, v76[0]);
  v80 = sub_23F6916B8(&qword_256EA66A8);
  sub_23F72DE4C(*(_QWORD *)(v80 - 8));
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5560(v13, v76[0]);
  v79 = sub_23F6916B8(&qword_256EA66B0);
  sub_23F72DE4C(*(_QWORD *)(v79 - 8));
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B5848(v15, v76[0]);
  v16 = sub_23F6916B8(&qword_256EA66B8);
  sub_23F6B53F8(v16, (uint64_t)&v88);
  sub_23F72DE4C(v17);
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B658C(v19, v76[0]);
  v78 = sub_23F6916B8(&qword_256EA66C0);
  sub_23F72DE4C(*(_QWORD *)(v78 - 8));
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B557C(v21, v76[0]);
  v22 = sub_23F6916B8(&qword_256EA66C8);
  sub_23F6B53F8(v22, (uint64_t)&v86);
  sub_23F72DE4C(v23);
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B57D8(v25, v76[0]);
  v26 = sub_23F6916B8(&qword_256EA66D0);
  sub_23F6B53F8(v26, (uint64_t)&v85);
  sub_23F72DE4C(v27);
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B5BF4(v29, v76[0]);
  v30 = sub_23F6916B8(&qword_256EA66D8);
  sub_23F6B53F8(v30, (uint64_t)&v84);
  v85 = v31;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F6B5528(v33, v76[0]);
  v77 = sub_23F6916B8(&qword_256EA66E0);
  sub_23F72DE4C(*(_QWORD *)(v77 - 8));
  MEMORY[0x24BDAC7A8](v34);
  sub_23F70D7DC(v35, v76[0]);
  v36 = sub_23F6916B8(&qword_256EA66E8);
  sub_23F6B53F8(v36, (uint64_t)&v82);
  sub_23F72DE4C(v37);
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6B5314((uint64_t)v76 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_23F6916B8(&qword_256EA66F0);
  v81[9] = *(_QWORD *)(v40 - 8);
  v81[10] = v40;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F6B5314((uint64_t)v76 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = sub_23F6916B8(&qword_256EA66F8);
  v83 = *(_QWORD *)(v43 - 8);
  v84 = v43;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B5298();
  v82 = sub_23F72E218();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v46);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v48);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v49);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v50);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v52);
  sub_23F72E190();
  MEMORY[0x24BDAC7A8](v53);
  sub_23F72E168();
  MEMORY[0x24BDAC7A8](v54);
  sub_23F72E1A4();
  MEMORY[0x24BDAC7A8](v55);
  v57 = (char *)v76 - v56;
  v58 = a1[3];
  v87 = a1;
  sub_23F6ADC98(a1, v58);
  sub_23F7226C0();
  v86 = v2;
  v59 = v88;
  sub_23FB2FCB0();
  if (!v59)
  {
    v76[2] = v5;
    v76[3] = v4;
    v76[4] = v3;
    v76[5] = v6;
    v60 = v84;
    v88 = v57;
    v61 = v86;
    v62 = sub_23FB2FA94();
    if (*(_QWORD *)(v62 + 16))
    {
      sub_23F72E3B4((uint64_t)v81);
      v64 = *(unsigned __int8 *)(v63 + 32);
      sub_23F6B4E44(1, v65, v62, v63 + 32, 0, v66);
      v68 = v67;
      v70 = v69;
      sub_23F693E04();
      if (v68 == v70 >> 1)
        __asm { BR              X9 }
      v61 = v86;
    }
    v72 = v82;
    v71 = v83;
    sub_23FB2F818();
    sub_23F6B5AD4();
    v74 = v73;
    sub_23F6916B8(&qword_256EA1870);
    *v74 = v72;
    sub_23FB2FA04();
    v75 = sub_23F72E07C();
    sub_23F6B5DAC(v75, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v61, v60);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v87);
  sub_23F70D684();
}

void sub_23F71BFA0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AST.FlatValue.init(from:)(a1, a2);
}

void sub_23F71BFB4(_QWORD *a1)
{
  AST.FlatValue.encode(to:)(a1);
}

uint64_t sub_23F71BFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[9];

  sub_23FB2FC5C();
  AST.FlatValue.hash(into:)((uint64_t)v9, v0, v1, v2, v3, v4, v5, v6, v8, v9[0], v9[1], v9[2]);
  return sub_23FB2FC8C();
}

void AST.FlatExpr.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  char *v16;
  uint64_t v17;

  sub_23F6B50E8();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B631C();
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B6580();
  v17 = v3;
  sub_23F72E034();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B5544(v5, v17);
  sub_23F6916B8(&qword_256EA27D0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B631C();
  sub_23F72E168();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for AST.Update(0);
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_23F70D7F8();
  type metadata accessor for AST.FlatValue(v9);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F693E0C();
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6D3BD8();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6580();
  sub_23F72E324();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F72E32C(v0, v14, v15);
  v16 = (char *)&loc_23F71C1B0 + dword_23F71CCA4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F71C1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_23F72DFE8(v0, *(_QWORD *)(v1 - 160));
  sub_23F72E344();
  v2 = sub_23F6B63F4();
  sub_23F6D3508(v2, v3);
  sub_23F693DDC();
}

uint64_t sub_23F71CCF4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  char v22;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x786966657270 && a2 == 0xE600000000000000;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x7869666E69 && a2 == 0xE500000000000000;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 7630692 && a2 == 0xE300000000000000;
        if (v8 || (sub_23FB2FB78() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
          if (v9 || (sub_23FB2FB78() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0xD000000000000010 && a2 == 0x800000023FB30E90 || (sub_23FB2FB78() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v10 = a1 == 1819042147 && a2 == 0xE400000000000000;
            if (v10 || (sub_23FB2FB78() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              v11 = a1 == 7954803 && a2 == 0xE300000000000000;
              if (v11 || (sub_23FB2FB78() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                v12 = a1 == 1801677168 && a2 == 0xE400000000000000;
                if (v12 || (sub_23FB2FB78() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  v13 = a1 == 0x6D7269666E6F63 && a2 == 0xE700000000000000;
                  if (v13 || (sub_23FB2FB78() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    v14 = a1 == 0x686372616573 && a2 == 0xE600000000000000;
                    if (v14 || (sub_23FB2FB78() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else
                    {
                      v15 = a1 == 0x656E4F6B636970 && a2 == 0xE700000000000000;
                      if (v15 || (sub_23FB2FB78() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 11;
                      }
                      else
                      {
                        v16 = a1 == 0x5465766C6F736572 && a2 == 0xEB000000006C6F6FLL;
                        if (v16 || (sub_23FB2FB78() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 12;
                        }
                        else
                        {
                          v17 = a1 == 0x69686374614D6F6ELL && a2 == 0xEE006C6F6F54676ELL;
                          if (v17 || (sub_23FB2FB78() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 13;
                          }
                          else
                          {
                            v18 = a1 == 1868852853 && a2 == 0xE400000000000000;
                            if (v18 || (sub_23FB2FB78() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 14;
                            }
                            else
                            {
                              v19 = a1 == 0x7463656A6572 && a2 == 0xE600000000000000;
                              if (v19 || (sub_23FB2FB78() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 15;
                              }
                              else
                              {
                                v20 = a1 == 0x6C65636E6163 && a2 == 0xE600000000000000;
                                if (v20 || (sub_23FB2FB78() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 16;
                                }
                                else if (a1 == 0xD000000000000010 && a2 == 0x800000023FB30E70
                                       || (sub_23FB2FB78() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 17;
                                }
                                else
                                {
                                  v21 = a1 == 0x616C50664F646E65 && a2 == 0xE90000000000006ELL;
                                  if (v21 || (sub_23FB2FB78() & 1) != 0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 18;
                                  }
                                  else if (a1 == 0xD000000000000010 && a2 == 0x800000023FB30EB0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 19;
                                  }
                                  else
                                  {
                                    v22 = sub_23FB2FB78();
                                    swift_bridgeObjectRelease();
                                    if ((v22 & 1) != 0)
                                      return 19;
                                    else
                                      return 20;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_23F71D450()
{
  return 20;
}

uint64_t sub_23F71D458(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F71D488 + 4 * byte_23FB56A46[a1]))(0x65756C6176, 0xE500000000000000);
}

uint64_t sub_23F71D488()
{
  return 0x786966657270;
}

uint64_t sub_23F71D49C()
{
  return 0x7869666E69;
}

unint64_t sub_23F71D4C8()
{
  return 0xD000000000000010;
}

uint64_t sub_23F71D608()
{
  sub_23F722F68();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D630()
{
  sub_23F722F68();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D658()
{
  sub_23F722C94();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D680()
{
  sub_23F722C94();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D6A8()
{
  unsigned __int8 *v0;

  return sub_23F71D458(*v0);
}

uint64_t sub_23F71D6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F71CCF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F71D6D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23F71D450();
  *a1 = result;
  return result;
}

uint64_t sub_23F71D6F8()
{
  sub_23F722BA4();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D720()
{
  sub_23F722BA4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D748()
{
  sub_23F722E38();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D770()
{
  sub_23F722E38();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D798()
{
  sub_23F722BE0();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D7C0()
{
  sub_23F722BE0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D7E8()
{
  sub_23F723098();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D810()
{
  sub_23F723098();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D838()
{
  sub_23F722C1C();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D860()
{
  sub_23F722C1C();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D888()
{
  sub_23F722C58();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D8B0()
{
  sub_23F722C58();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D8D8()
{
  sub_23F72305C();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D900()
{
  sub_23F72305C();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D928()
{
  sub_23F7230D4();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D950()
{
  sub_23F7230D4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D978()
{
  sub_23F722D48();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D9A0()
{
  sub_23F722D48();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71D9C8()
{
  sub_23F722E74();
  return sub_23FB2FD10();
}

uint64_t sub_23F71D9F0()
{
  sub_23F722E74();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DA18()
{
  sub_23F722DC0();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DA40()
{
  sub_23F722DC0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DA68()
{
  sub_23F723110();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DA90()
{
  sub_23F723110();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DAB8()
{
  sub_23F722CD0();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DAE0()
{
  sub_23F722CD0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DB08()
{
  sub_23F722D84();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DB30()
{
  sub_23F722D84();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DB58()
{
  sub_23F722EB0();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DB80()
{
  sub_23F722EB0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DBA8()
{
  sub_23F722DFC();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DBD0()
{
  sub_23F722DFC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DBF8()
{
  sub_23F722D0C();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DC20()
{
  sub_23F722D0C();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DC48()
{
  sub_23F722FA4();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DC70()
{
  sub_23F722FA4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F71DC98()
{
  sub_23F72314C();
  return sub_23FB2FD10();
}

uint64_t sub_23F71DCC0()
{
  sub_23F72314C();
  return sub_23FB2FD1C();
}

void AST.FlatExpr.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102[17];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[8];
  _QWORD v120[4];
  uint64_t v121;
  uint64_t v122;

  sub_23F6B5220();
  a19 = v21;
  a20 = v22;
  v23 = sub_23F6916B8(&qword_256EA6730);
  v119[0] = *(_QWORD *)(v23 - 8);
  v119[1] = v23;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B658C(v25, v102[0]);
  v118 = sub_23F6916B8(&qword_256EA6738);
  v116 = *(_QWORD *)(v118 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B5528(v27, v102[0]);
  v113 = sub_23F6916B8(&qword_256EA6740);
  sub_23F72DE4C(*(_QWORD *)(v113 - 8));
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B5314((uint64_t)v102 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117 = sub_23F6916B8(&qword_256EA6748);
  sub_23F72DE4C(*(_QWORD *)(v117 - 8));
  MEMORY[0x24BDAC7A8](v30);
  sub_23F70D7DC(v31, v102[0]);
  v112 = sub_23F6916B8(&qword_256EA6750);
  sub_23F72DE4C(*(_QWORD *)(v112 - 8));
  MEMORY[0x24BDAC7A8](v32);
  sub_23F6B5314((uint64_t)v102 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111 = sub_23F6916B8(&qword_256EA6758);
  sub_23F72DE4C(*(_QWORD *)(v111 - 8));
  MEMORY[0x24BDAC7A8](v34);
  sub_23F6B5314((uint64_t)v102 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6916B8(&qword_256EA2798);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6B5314((uint64_t)v102 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_23F6916B8(&qword_256EA6760);
  sub_23F6B53F8(v38, (uint64_t)&v122);
  sub_23F72DE4C(v39);
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6B51A4();
  sub_23F6B5314(v41);
  v109 = sub_23F6916B8(&qword_256EA6768);
  sub_23F72DE4C(*(_QWORD *)(v109 - 8));
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B5314((uint64_t)v102 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = sub_23F6916B8(&qword_256EA6770);
  sub_23F72DE4C(*(_QWORD *)(v108 - 8));
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B51A4();
  sub_23F6B5314(v45);
  v46 = sub_23F6916B8(&qword_256EA6778);
  sub_23F6B53F8(v46, (uint64_t)&a10);
  sub_23F72DE4C(v47);
  MEMORY[0x24BDAC7A8](v48);
  sub_23F6B5314((uint64_t)v102 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = sub_23F6916B8(&qword_256EA6780);
  sub_23F72DE4C(*(_QWORD *)(v106 - 8));
  MEMORY[0x24BDAC7A8](v50);
  sub_23F6B5314((uint64_t)v102 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_23F6916B8(&qword_256EA6788);
  sub_23F6B53F8(v52, (uint64_t)v120);
  sub_23F72DE4C(v53);
  MEMORY[0x24BDAC7A8](v54);
  sub_23F6B51A4();
  v107 = v55;
  v56 = sub_23F72E034();
  v119[6] = *(_QWORD *)(v56 - 8);
  v119[7] = v56;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v57);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v58);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v59);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v60);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v61);
  sub_23F6B6580();
  v119[2] = v62;
  v105 = sub_23F6916B8(&qword_256EA6790);
  sub_23F72DE4C(*(_QWORD *)(v105 - 8));
  MEMORY[0x24BDAC7A8](v63);
  sub_23F6B51A4();
  sub_23F6B5314(v64);
  v65 = sub_23F6916B8(&qword_256EA6798);
  sub_23F6B53F8(v65, (uint64_t)v119);
  sub_23F72DE4C(v66);
  MEMORY[0x24BDAC7A8](v67);
  sub_23F6B51A4();
  sub_23F6B5314(v68);
  v104 = sub_23F6916B8(&qword_256EA67A0);
  sub_23F72DE4C(*(_QWORD *)(v104 - 8));
  MEMORY[0x24BDAC7A8](v69);
  sub_23F6B51A4();
  sub_23F6B5314(v70);
  v71 = sub_23F6916B8(&qword_256EA67A8);
  sub_23F6B53F8(v71, (uint64_t)&v116);
  sub_23F72DE4C(v72);
  MEMORY[0x24BDAC7A8](v73);
  sub_23F6B51A4();
  sub_23F6B5314(v74);
  v75 = sub_23F6916B8(&qword_256EA67B0);
  sub_23F6B53F8(v75, (uint64_t)&v114);
  sub_23F72DE4C(v76);
  MEMORY[0x24BDAC7A8](v77);
  sub_23F6B51A4();
  sub_23F6B5314(v78);
  v79 = sub_23F6916B8(&qword_256EA67B8);
  sub_23F6B53F8(v79, (uint64_t)&v115);
  sub_23F72DE4C(v80);
  MEMORY[0x24BDAC7A8](v81);
  sub_23F6B51A4();
  sub_23F6B5314(v82);
  v83 = sub_23F6916B8(&qword_256EA67C0);
  sub_23F6B53F8(v83, (uint64_t)&v110);
  sub_23F72DE4C(v84);
  MEMORY[0x24BDAC7A8](v85);
  sub_23F6B51A4();
  sub_23F6B5314(v86);
  v103 = sub_23F6916B8(&qword_256EA67C8);
  sub_23F72DE4C(*(_QWORD *)(v103 - 8));
  MEMORY[0x24BDAC7A8](v87);
  sub_23F6B51A4();
  v89 = sub_23F70D434(v88);
  v119[5] = type metadata accessor for AST.FlatValue(v89);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v90);
  sub_23F693E0C();
  v119[4] = v91;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v92);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v93);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v94);
  v119[3] = (char *)v102 - v95;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v96);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v97);
  sub_23F72E168();
  MEMORY[0x24BDAC7A8](v98);
  sub_23F72E324();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v99);
  sub_23F6B573C();
  v121 = sub_23F6916B8(&qword_256EA67D0);
  v120[0] = *(_QWORD *)(v121 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v100);
  sub_23F693EB0();
  sub_23F72E43C();
  sub_23FB2FCC8();
  sub_23F6F5920(v120[2], v20, type metadata accessor for AST.FlatExpr);
  v101 = (char *)sub_23F71E3AC + 4 * word_23FB56A5A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F71E3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23F6F594C(v1, v0, type metadata accessor for AST.FlatValue);
  *(_BYTE *)(v2 - 104) = 0;
  sub_23F72314C();
  v3 = *(_QWORD *)(v2 - 120);
  v4 = *(_QWORD *)(v2 - 112);
  sub_23F6B5610();
  sub_23F72156C(&qword_256EA6658, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
  sub_23F72DF70();
  sub_23F72DF24(v2 - 352);
  sub_23F6D3928(v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v3, v4);
  sub_23F6B5100();
}

void AST.FlatExpr.init(from:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106[32];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;

  sub_23F6B5220();
  v127 = v0;
  v7 = v6;
  v117 = v8;
  v9 = sub_23F6916B8(&qword_256EA68A8);
  v120 = *(_QWORD *)(v9 - 8);
  v121 = v9;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5560(v11, v106[0]);
  v119 = sub_23F6916B8(&qword_256EA68B0);
  sub_23F72DE4C(*(_QWORD *)(v119 - 8));
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B658C(v13, v106[0]);
  v14 = sub_23F6916B8(&qword_256EA68B8);
  sub_23F6B53F8(v14, (uint64_t)&v126);
  sub_23F72DE4C(v15);
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B57D8(v17, v106[0]);
  v18 = sub_23F6916B8(&qword_256EA68C0);
  sub_23F6B53F8(v18, (uint64_t)&v129);
  v118 = v19;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B5848(v21, v106[0]);
  v22 = sub_23F6916B8(&qword_256EA68C8);
  sub_23F6B53F8(v22, (uint64_t)&v127);
  sub_23F72DE4C(v23);
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B557C(v25, v106[0]);
  v26 = sub_23F6916B8(&qword_256EA68D0);
  sub_23F6B53F8(v26, (uint64_t)&v124);
  sub_23F72DE4C(v27);
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B5BF4(v29, v106[0]);
  v114 = sub_23F6916B8(&qword_256EA68D8);
  sub_23F72DE4C(*(_QWORD *)(v114 - 8));
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B5314((uint64_t)v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_23F6916B8(&qword_256EA68E0);
  sub_23F6B53F8(v32, (uint64_t)&v122);
  sub_23F72DE4C(v33);
  MEMORY[0x24BDAC7A8](v34);
  sub_23F70D7DC(v35, v106[0]);
  v115 = sub_23F6916B8(&qword_256EA68E8);
  sub_23F72DE4C(*(_QWORD *)(v115 - 8));
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6B5314((uint64_t)v106 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_23F6916B8(&qword_256EA68F0);
  sub_23F6B53F8(v38, (uint64_t)&v123);
  sub_23F72DE4C(v39);
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6B5528(v41, v106[0]);
  v42 = sub_23F6916B8(&qword_256EA68F8);
  sub_23F6B53F8(v42, (uint64_t)&v117);
  sub_23F72DE4C(v43);
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B5314((uint64_t)v106 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = sub_23F6916B8(&qword_256EA6900);
  sub_23F6B53F8(v46, (uint64_t)&v118);
  sub_23F72DE4C(v47);
  MEMORY[0x24BDAC7A8](v48);
  sub_23F6B5314((uint64_t)v106 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = sub_23F6916B8(&qword_256EA6908);
  sub_23F72DE4C(*(_QWORD *)(v112 - 8));
  MEMORY[0x24BDAC7A8](v50);
  sub_23F6B5314((uint64_t)v106 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = sub_23F6916B8(&qword_256EA6910);
  sub_23F72DE4C(*(_QWORD *)(v113 - 8));
  MEMORY[0x24BDAC7A8](v52);
  sub_23F6B5314((uint64_t)v106 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  v109 = sub_23F6916B8(&qword_256EA6918);
  sub_23F72DE4C(*(_QWORD *)(v109 - 8));
  MEMORY[0x24BDAC7A8](v54);
  sub_23F6B5314((uint64_t)v106 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111 = sub_23F6916B8(&qword_256EA6920);
  sub_23F72DE4C(*(_QWORD *)(v111 - 8));
  MEMORY[0x24BDAC7A8](v56);
  sub_23F6B5314((uint64_t)v106 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  v110 = sub_23F6916B8(&qword_256EA6928);
  sub_23F72DE4C(*(_QWORD *)(v110 - 8));
  MEMORY[0x24BDAC7A8](v58);
  sub_23F6B5314((uint64_t)v106 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = sub_23F6916B8(&qword_256EA6930);
  sub_23F6B53F8(v60, (uint64_t)&v116);
  sub_23F72DE4C(v61);
  MEMORY[0x24BDAC7A8](v62);
  sub_23F6B5314((uint64_t)v106 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = sub_23F6916B8(&qword_256EA6938);
  sub_23F72DE4C(*(_QWORD *)(v108 - 8));
  MEMORY[0x24BDAC7A8](v64);
  sub_23F6B51A4();
  sub_23F6B5314(v65);
  v107 = sub_23F6916B8(&qword_256EA6940);
  sub_23F72DE4C(*(_QWORD *)(v107 - 8));
  MEMORY[0x24BDAC7A8](v66);
  sub_23F6B51A4();
  v124 = v67;
  v125 = sub_23F6916B8(&qword_256EA6948);
  v123 = *(_QWORD *)(v125 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v68);
  sub_23F6B5BD8(v69, v106[0]);
  v122 = sub_23F72E324();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v70);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v71);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v72);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v73);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v74);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v75);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v76);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v77);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v78);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v79);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v80);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v81);
  sub_23F72E190();
  MEMORY[0x24BDAC7A8](v82);
  sub_23F72E1A4();
  MEMORY[0x24BDAC7A8](v83);
  sub_23F72E168();
  MEMORY[0x24BDAC7A8](v84);
  sub_23F6D3A70();
  MEMORY[0x24BDAC7A8](v85);
  sub_23F70DD48();
  MEMORY[0x24BDAC7A8](v86);
  v88 = (char *)v106 - v87;
  v126 = v7;
  sub_23F72E43C();
  v89 = v127;
  sub_23FB2FCB0();
  if (!v89)
  {
    v106[1] = v5;
    v106[2] = v1;
    v106[3] = v4;
    v106[5] = v3;
    v106[4] = v2;
    v90 = v125;
    v127 = v88;
    v91 = v128;
    v92 = sub_23FB2FA94();
    if (*(_QWORD *)(v92 + 16))
    {
      sub_23F72E3B4((uint64_t)&v107);
      v94 = *(unsigned __int8 *)(v93 + 32);
      sub_23F6B4E44(1, v95, v92, v93 + 32, 0, v96);
      v98 = v97;
      v100 = v99;
      sub_23F693E04();
      if (v98 == v100 >> 1)
        __asm { BR              X9 }
      v91 = v128;
    }
    v102 = v122;
    v101 = v123;
    sub_23FB2F818();
    sub_23F6B5AD4();
    v104 = v103;
    sub_23F6916B8(&qword_256EA1870);
    *v104 = v102;
    sub_23FB2FA04();
    v105 = sub_23F72E07C();
    sub_23F6B5DAC(v105, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v91, v90);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v126);
  sub_23F6B5100();
}

void sub_23F71F96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  sub_23F72E4DC();
  sub_23F723110();
  v2 = *(_QWORD *)(v1 - 336);
  sub_23F72DE98();
  if (!v0)
  {
    *(_BYTE *)(v1 - 72) = 0;
    sub_23F6AEA68();
    sub_23F72E418();
    sub_23F72DF08();
    sub_23F6916B8(&qword_256EA6100);
    type metadata accessor for AST.FlatValue(0);
    sub_23F72E4DC();
    sub_23F72156C(&qword_256EA6710, v3);
    sub_23F72E258();
    sub_23F72DF08();
    sub_23F6B56E0(v2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 672) + 8));
    sub_23F6B51C8();
    sub_23F72DED4();
    sub_23F72E20C();
    JUMPOUT(0x23F7206DCLL);
  }
  sub_23F6B51C8();
  sub_23F70D94C();
  JUMPOUT(0x23F71F948);
}

void sub_23F71F9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v1 - 72) = 2;
  sub_23F7230D4();
  v2 = *(_QWORD *)(v1 - 312);
  sub_23F72DEC8();
  if (!v0)
  {
    *(_BYTE *)(v1 - 72) = 0;
    sub_23F6AEA10();
    v3 = *(_QWORD *)(v1 - 728);
    sub_23F6B6CAC();
    v4 = v3 + *(int *)(sub_23F6916B8(&qword_256EA60F8) + 48);
    sub_23F72E218();
    sub_23F72E4DC();
    sub_23F72156C(&qword_256EA6710, v5);
    sub_23F6B6CAC();
    *(_QWORD *)(v1 - 136) = v4;
    v6 = *(_QWORD *)(v1 - 728);
    *(_BYTE *)(v1 - 72) = 2;
    sub_23F6B6CAC();
    sub_23F6B6420(v2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 568) + 8));
    sub_23F6B51C8();
    sub_23F72DF5C();
    swift_storeEnumTagMultiPayload();
    v7 = *(_QWORD *)(v1 - 112);
    sub_23F6F594C(v6, v7, type metadata accessor for AST.FlatExpr);
    sub_23F6F594C(v7, *(_QWORD *)(v1 - 192), type metadata accessor for AST.FlatExpr);
    JUMPOUT(0x23F71F958);
  }
  sub_23F6B51C8();
  sub_23F72E03C();
  JUMPOUT(0x23F71F950);
}

void sub_23F71FE50()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = 11;
  sub_23F722DC0();
  sub_23F72DE98();
  if (!v0)
  {
    sub_23F72E034();
    sub_23F72156C(&qword_256EA6700, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    sub_23F72E058();
    sub_23F72DE5C();
    sub_23F72DE74(v1 - 352);
    sub_23F6B51C8();
    sub_23F72DED4();
    sub_23F72E20C();
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x23F7208B4);
  }
  sub_23F6B51C8();
  sub_23F70D94C();
  JUMPOUT(0x23F71F948);
}

void sub_23F71FEDC()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = 12;
  sub_23F722D84();
  sub_23F72DE98();
  if (!v0)
  {
    sub_23F6916B8(&qword_256EA1918);
    sub_23F723188(&qword_256EA1930, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_23F72E2F8();
    sub_23F72DE5C();
    sub_23F72DE74(v1 - 344);
    sub_23F6B51C8();
    sub_23F72DED4();
    sub_23F72E118(*(_QWORD *)(v1 - 72));
    JUMPOUT(0x23F71FF68);
  }
  sub_23F6B51C8();
  sub_23F70D94C();
  JUMPOUT(0x23F71F948);
}

void sub_23F71FF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);

  *(_BYTE *)(v2 - 72) = 13;
  sub_23F722D48();
  sub_23F72DEC8();
  if (!v1)
  {
    v3 = sub_23F70D6CC();
    v4(v3, *(_QWORD *)(v2 - 424));
    sub_23F6B51C8();
    sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8));
    sub_23F72E0F8();
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x23F7208C0);
  }
  sub_23F6B51C8();
  JUMPOUT(0x23F71F950);
}

void sub_23F71FFF0()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = 14;
  sub_23F722D0C();
  sub_23F72DE98();
  if (!v0)
  {
    sub_23F72E034();
    sub_23F72156C(&qword_256EA6700, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    sub_23F72E058();
    sub_23FB2FA34();
    sub_23F72DE74(v1 - 328);
    sub_23F6B51C8();
    sub_23F72DED4();
    sub_23F72E20C();
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x23F7208B4);
  }
  sub_23F6B51C8();
  sub_23F70D94C();
  JUMPOUT(0x23F71F948);
}

void sub_23F72008C()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = 15;
  sub_23F722CD0();
  sub_23F72DE98();
  if (!v0)
  {
    sub_23F72E034();
    sub_23F72156C(&qword_256EA6700, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    sub_23F72E058();
    sub_23F72DE5C();
    sub_23F72DE74(v1 - 320);
    sub_23F6B51C8();
    sub_23F72DED4();
    sub_23F72E20C();
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x23F7208B4);
  }
  sub_23F6B51C8();
  sub_23F70D94C();
  JUMPOUT(0x23F71F948);
}

void sub_23F720114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 72) = 16;
  sub_23F722C94();
  sub_23F72DE98();
  if (v0)
    JUMPOUT(0x23F720140);
  sub_23F72E034();
  sub_23F72156C(&qword_256EA6700, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
  sub_23F72E230();
  sub_23F72DE5C();
  sub_23F72DEFC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_23F6B51C8();
  sub_23F72DED4();
  JUMPOUT(0x23F7207E0);
}

void sub_23F72014C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);

  *(_BYTE *)(v2 - 72) = 17;
  sub_23F722C58();
  sub_23F72DEC8();
  if (!v1)
  {
    v3 = sub_23F70D6CC();
    v4(v3, *(_QWORD *)(v2 - 376));
    sub_23F6B51C8();
    sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8));
    sub_23F72E0F8();
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x23F7208C0);
  }
  sub_23F6B51C8();
  JUMPOUT(0x23F71F950);
}

void sub_23F7201BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  *(_BYTE *)(v2 - 72) = 18;
  sub_23F722C1C();
  sub_23F72DEC8();
  if (!v1)
  {
    v3 = sub_23F70D6CC();
    sub_23F6B563C(v3, v4);
    sub_23F6B51C8();
    sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8));
    sub_23F72E0F8();
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x23F7208C0);
  }
  sub_23F6B51C8();
  JUMPOUT(0x23F71F950);
}

void sub_23F720224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 72) = 19;
  sub_23F722BE0();
  v4 = *(_QWORD *)(v3 - 200);
  sub_23F72E2A0();
  sub_23F72DEC8();
  if (v1)
    JUMPOUT(0x23F720258);
  sub_23F6B56E0(v4, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F6B51C8();
  sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 8));
  sub_23F72E0F8();
  JUMPOUT(0x23F72037CLL);
}

void sub_23F72090C()
{
  AST.FlatExpr.init(from:)();
}

#error "23F720928: call analysis failed (funcsize=5)"

void AST.Update.lhs.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F6F5920(v1, a1, type metadata accessor for AST.FlatValue);
}

void AST.Update.lhs.setter(uint64_t a1)
{
  uint64_t v1;

  sub_23F7232E0(a1, v1, type metadata accessor for AST.FlatValue);
}

uint64_t (*AST.Update.lhs.modify())()
{
  return nullsub_1;
}

uint64_t AST.Update.path.getter()
{
  type metadata accessor for AST.Update(0);
  return swift_bridgeObjectRetain();
}

void AST.Update.path.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(int *)(sub_23F72E464() + 20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v2) = v0;
  sub_23F694C84();
}

uint64_t (*AST.Update.path.modify())()
{
  type metadata accessor for AST.Update(0);
  return nullsub_1;
}

void AST.Update.kind.getter()
{
  _BYTE *v0;
  uint64_t v1;

  *v0 = *(_BYTE *)(v1 + *(int *)(sub_23F72E34C() + 24));
  sub_23F694CC8();
}

void AST.Update.kind.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_BYTE *)(v1 + *(int *)(type metadata accessor for AST.Update(0) + 24)) = v2;
  sub_23F694CC8();
}

uint64_t (*AST.Update.kind.modify())()
{
  type metadata accessor for AST.Update(0);
  return nullsub_1;
}

void AST.Update.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F72E34C();
  sub_23F72E068(v0 + *(int *)(v1 + 28), v2, type metadata accessor for AST.FlatValue);
  sub_23F694CC8();
}

void AST.Update.value.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F72E464();
  sub_23F7232E0(v0, v1 + *(int *)(v2 + 28), type metadata accessor for AST.FlatValue);
  sub_23F694CC8();
}

uint64_t (*AST.Update.value.modify())()
{
  type metadata accessor for AST.Update(0);
  return nullsub_1;
}

void AST.Update.init(lhs:path:kind:value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8;
  int *v9;

  v8 = *a3;
  sub_23F6F594C(a1, a5, type metadata accessor for AST.FlatValue);
  v9 = (int *)type metadata accessor for AST.Update(0);
  *(_QWORD *)(a5 + v9[5]) = a2;
  *(_BYTE *)(a5 + v9[6]) = v8;
  sub_23F6F594C(a4, a5 + v9[7], type metadata accessor for AST.FlatValue);
}

#error "23F720BA4: call analysis failed (funcsize=31)"

uint64_t sub_23F720BE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 7563372 && a2 == 0xE300000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1752457584 && a2 == 0xE400000000000000;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 1684957547 && a2 == 0xE400000000000000;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = sub_23FB2FB78();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_23F720D64(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F720D90 + 4 * byte_23FB56AAA[a1]))(7563372, 0xE300000000000000);
}

uint64_t sub_23F720D90()
{
  return 1752457584;
}

uint64_t sub_23F720DA0()
{
  return 1684957547;
}

uint64_t sub_23F720DB0()
{
  return 0x65756C6176;
}

uint64_t sub_23F720DC4()
{
  unsigned __int8 *v0;

  return sub_23F720D64(*v0);
}

uint64_t sub_23F720DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F720BE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F720DF0()
{
  sub_23F72330C();
  return sub_23FB2FD10();
}

uint64_t sub_23F720E18()
{
  sub_23F72330C();
  return sub_23FB2FD1C();
}

void AST.Update.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[2];

  sub_23F6B5220();
  v2 = v0;
  v4 = v3;
  v5 = sub_23F6916B8(&qword_256EA6968);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6ADC98(v4, v4[3]);
  sub_23F72330C();
  sub_23F6B63A4();
  sub_23F72E218();
  sub_23F72156C(&qword_256EA6658, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
  sub_23F70D4F0();
  if (!v1)
  {
    v9[1] = *(_QWORD *)(v2 + *(int *)(type metadata accessor for AST.Update(0) + 20));
    sub_23F6B6360();
    sub_23F6916B8(&qword_256EA6668);
    sub_23F7228E8();
    sub_23F70D4F0();
    sub_23F6AEFD0();
    sub_23F70D4F0();
    sub_23F70D4F0();
  }
  sub_23F6B56E0((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_23F6B5100();
}

void AST.Update.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_23F6B5220();
  v16 = v15;
  v28 = v17;
  type metadata accessor for AST.FlatValue(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B631C();
  v21 = v19 - v20;
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B6580();
  v29 = v23;
  v30 = sub_23F6916B8(&qword_256EA6978);
  v24 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v25 = sub_23F70D7F8();
  v26 = (int *)type metadata accessor for AST.Update(v25);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F6B573C();
  sub_23F6ADC98(v16, v16[3]);
  sub_23F72330C();
  sub_23FB2FCB0();
  if (v12)
  {
    sub_23F72E47C();
  }
  else
  {
    sub_23F72156C(&qword_256EA6710, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    sub_23F72E258();
    sub_23F72E1B8();
    sub_23F6F594C(v29, v14, type metadata accessor for AST.FlatValue);
    sub_23F6916B8(&qword_256EA6668);
    sub_23F6B6360();
    sub_23F722B14();
    sub_23F72E1B8();
    *(_QWORD *)(v14 + v26[5]) = v31;
    sub_23F6AF00C();
    sub_23FB2FA7C();
    *(_BYTE *)(v14 + v26[6]) = a12;
    sub_23F72E258();
    sub_23F72E1B8();
    sub_23F6B56E0(v13, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    sub_23F6F594C(v21, v14 + v26[7], type metadata accessor for AST.FlatValue);
    sub_23F6F5920(v14, v28, type metadata accessor for AST.Update);
    sub_23F72E47C();
    sub_23F6D3508(v14, type metadata accessor for AST.Update);
  }
  sub_23F6B5100();
}

void sub_23F7212C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  _BYTE vars8[6];

  AST.Update.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

void sub_23F7212D8()
{
  AST.Update.encode(to:)();
}

uint64_t sub_23F7212EC()
{
  uint64_t v0;

  v0 = sub_23F6916B8(&qword_256EA6988);
  sub_23F6D3418(v0, qword_256EA6560);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA6560);
  return sub_23FB2D64C();
}

BOOL static PiranaHelper.isPiranaVariable(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  sub_23F6916B8(&qword_256EA6980);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B5298();
  if (qword_256EA0A68 != -1)
    swift_once();
  v2 = sub_23F6916B8(&qword_256EA6988);
  sub_23F6BF1A4(v2, (uint64_t)qword_256EA6560);
  sub_23F723348();
  sub_23F723384(&qword_256EA6998, &qword_256EA6988);
  sub_23FB2F0E0();
  v3 = sub_23F6916B8(&qword_256EA69A0);
  v4 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v0, 1, v3) != 1;
  sub_23F6B4F84(v0, &qword_256EA6980);
  return v4;
}

void sub_23F721484(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_23F6916B8(&qword_256EA27D8) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7DC9C4();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_23F7215A0(v6);
  *a1 = v3;
}

uint64_t type metadata accessor for AST.FlatAssignExpr(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA6A08);
}

uint64_t type metadata accessor for AST.FlatExpr(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EA6B58);
}

unint64_t sub_23F721530()
{
  unint64_t result;

  result = qword_256EA6588;
  if (!qword_256EA6588)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59778, &_s14FlatAssignExprV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6588);
  }
  return result;
}

void sub_23F72156C(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    sub_23F72E3C8();
  }
  sub_23F694CC8();
}

void sub_23F7215A0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;

  v2 = v1;
  v143 = sub_23F6916B8(&qword_256EA27D8);
  v4 = *(_QWORD *)(v143 - 8);
  v5 = MEMORY[0x24BDAC7A8](v143);
  v137 = (uint64_t)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v147 = (uint64_t)&v129 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v129 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v129 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v140 = (uint64_t *)((char *)&v129 - v16);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v139 = (uint64_t *)((char *)&v129 - v18);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v135 = (uint64_t *)((char *)&v129 - v20);
  MEMORY[0x24BDAC7A8](v19);
  v134 = (uint64_t *)((char *)&v129 - v21);
  v150 = a1;
  v22 = a1[1];
  v23 = sub_23FB2FB30();
  if (v23 >= v22)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (v22)
        sub_23F721FF4(0, v22, 1, v150);
      return;
    }
    goto LABEL_159;
  }
  v24 = v23;
  v131 = sub_23F6F05AC(v22 / 2);
  v132 = v22;
  v141 = v25;
  v142 = v4;
  if (v22 <= 0)
  {
LABEL_123:
    v27 = MEMORY[0x24BEE4AF8];
    v68 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_124:
    if (v68 < 2)
    {
LABEL_135:
      swift_bridgeObjectRelease();
      if (v132 >= -1)
        goto LABEL_136;
      goto LABEL_163;
    }
    v121 = *v150;
    while (1)
    {
      v122 = v68 - 2;
      if (v68 < 2)
        break;
      if (!v121)
        goto LABEL_167;
      v123 = v27;
      v124 = *(_QWORD *)(v27 + 32 + 16 * v122);
      v125 = *(_QWORD *)(v27 + 32 + 16 * (v68 - 1) + 8);
      sub_23F722254(v121 + *(_QWORD *)(v142 + 72) * v124, v121 + *(_QWORD *)(v142 + 72) * *(_QWORD *)(v27 + 32 + 16 * (v68 - 1)), v121 + *(_QWORD *)(v142 + 72) * v125, v141);
      if (v2)
        goto LABEL_121;
      if (v125 < v124)
        goto LABEL_154;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7DB834();
        v123 = v128;
      }
      if (v122 >= *(_QWORD *)(v123 + 16))
        goto LABEL_155;
      v126 = (_QWORD *)(v123 + 32 + 16 * v122);
      *v126 = v124;
      v126[1] = v125;
      v127 = *(_QWORD *)(v123 + 16);
      if (v68 > v127)
        goto LABEL_156;
      memmove((void *)(v123 + 32 + 16 * (v68 - 1)), (const void *)(v123 + 32 + 16 * v68), 16 * (v127 - v68));
      *(_QWORD *)(v123 + 16) = v127 - 1;
      v68 = v127 - 1;
      v27 = v123;
      if (v127 <= 2)
        goto LABEL_135;
    }
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
    return;
  }
  v130 = v24;
  v26 = 0;
  v27 = MEMORY[0x24BEE4AF8];
  v28 = v22;
  v146 = v11;
  v144 = v14;
  while (1)
  {
    v29 = v26;
    v30 = v26 + 1;
    v138 = v26;
    if (v26 + 1 >= v28)
    {
      v38 = v26 + 1;
    }
    else
    {
      v133 = v2;
      v31 = *v150;
      v32 = *(_QWORD *)(v4 + 72);
      v33 = v134;
      v34 = v26;
      sub_23F6B4F58(*v150 + v32 * v30, (uint64_t)v134, &qword_256EA27D8);
      v145 = v31;
      v149 = v32;
      v35 = v31 + v32 * v34;
      v36 = v135;
      sub_23F6B4F58(v35, (uint64_t)v135, &qword_256EA27D8);
      v37 = *v33 == *v36 && v33[1] == v36[1];
      LODWORD(v148) = v37 ? 0 : sub_23FB2FB78();
      sub_23F6B4F84((uint64_t)v135, &qword_256EA27D8);
      sub_23F6B4F84((uint64_t)v134, &qword_256EA27D8);
      v29 = v138;
      v4 = v142;
      if (v138 + 2 >= v28)
      {
        v41 = v138 + 2;
      }
      else
      {
        v39 = v149 * v30;
        v40 = v145;
        v41 = v138 + 2;
        v42 = v149 * (v138 + 2);
        while (1)
        {
          v43 = v139;
          sub_23F6B4F58(v40 + v42, (uint64_t)v139, &qword_256EA27D8);
          v44 = v140;
          sub_23F6B4F58(v40 + v39, (uint64_t)v140, &qword_256EA27D8);
          v45 = *v43 == *v44 && v43[1] == v44[1];
          v46 = v45 ? 0 : sub_23FB2FB78();
          sub_23F6B4F84((uint64_t)v140, &qword_256EA27D8);
          sub_23F6B4F84((uint64_t)v139, &qword_256EA27D8);
          if (((v148 ^ v46) & 1) != 0)
            break;
          v40 += v149;
          ++v41;
          v11 = v146;
          if (v41 >= v28)
          {
            v41 = v28;
            v4 = v142;
            goto LABEL_25;
          }
        }
        v4 = v142;
        v11 = v146;
LABEL_25:
        v29 = v138;
      }
      if ((v148 & 1) != 0)
      {
        if (v41 < v29)
          goto LABEL_160;
        v38 = v41;
        if (v29 < v41)
        {
          v148 = v28;
          v129 = v27;
          v47 = 0;
          v48 = v149 * (v41 - 1);
          v49 = v41 * v149;
          v50 = v29;
          v51 = v29 * v149;
          do
          {
            if (v50 != v38 + v47 - 1)
            {
              v52 = v145;
              if (!v145)
                goto LABEL_166;
              v53 = v145 + v51;
              sub_23F6B4EC0(v145 + v51, v137, &qword_256EA27D8);
              if (v51 < v48 || v53 >= v52 + v49)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v51 != v48)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_23F6B4EC0(v137, v52 + v48, &qword_256EA27D8);
              v11 = v146;
              v38 = v41;
            }
            ++v50;
            --v47;
            v48 -= v149;
            v49 -= v149;
            v51 += v149;
          }
          while (v50 < v38 + v47);
          v2 = v133;
          v4 = v142;
          v27 = v129;
          v29 = v138;
          v28 = v148;
          goto LABEL_45;
        }
      }
      else
      {
        v38 = v41;
      }
      v2 = v133;
    }
LABEL_45:
    if (v38 < v28)
    {
      if (__OFSUB__(v38, v29))
        goto LABEL_158;
      if (v38 - v29 < v130)
      {
        if (__OFADD__(v29, v130))
          goto LABEL_161;
        if (v29 + v130 >= v28)
          v55 = v28;
        else
          v55 = v29 + v130;
        if (v55 < v29)
          goto LABEL_162;
        if (v38 != v55)
        {
          v56 = v11;
          v129 = v27;
          v133 = v2;
          v145 = *(_QWORD *)(v4 + 72);
          v148 = v38 * v145;
          v149 = v145 * (v38 - 1);
          v136 = v55;
          do
          {
            v57 = 0;
            v58 = v138;
            while (1)
            {
              v59 = *v150;
              v60 = v144;
              sub_23F6B4F58(v148 + v57 + *v150, (uint64_t)v144, &qword_256EA27D8);
              sub_23F6B4F58(v149 + v57 + v59, (uint64_t)v56, &qword_256EA27D8);
              if (*v60 == *(_QWORD *)v56 && v60[1] == *((_QWORD *)v56 + 1))
                break;
              v62 = sub_23FB2FB78();
              sub_23F6B4F84((uint64_t)v56, &qword_256EA27D8);
              sub_23F6B4F84((uint64_t)v60, &qword_256EA27D8);
              if ((v62 & 1) == 0)
                goto LABEL_65;
              v63 = *v150;
              if (!*v150)
                goto LABEL_164;
              v64 = v63 + v149 + v57;
              sub_23F6B4EC0(v63 + v148 + v57, v147, &qword_256EA27D8);
              swift_arrayInitWithTakeFrontToBack();
              sub_23F6B4EC0(v147, v64, &qword_256EA27D8);
              v56 = v146;
              v57 -= v145;
              if (v38 == ++v58)
                goto LABEL_65;
            }
            sub_23F6B4F84((uint64_t)v56, &qword_256EA27D8);
            sub_23F6B4F84((uint64_t)v60, &qword_256EA27D8);
LABEL_65:
            ++v38;
            v149 += v145;
            v148 += v145;
          }
          while (v38 != v136);
          v38 = v136;
          v2 = v133;
          v27 = v129;
          v11 = v56;
          v29 = v138;
        }
      }
    }
    if (v38 < v29)
      goto LABEL_157;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v149 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23F7DB74C(0, *(_QWORD *)(v27 + 16) + 1, 1, (char *)v27);
      v27 = v119;
    }
    v67 = *(_QWORD *)(v27 + 16);
    v66 = *(_QWORD *)(v27 + 24);
    v68 = v67 + 1;
    if (v67 >= v66 >> 1)
    {
      sub_23F7DB74C(v66 > 1, v67 + 1, 1, (char *)v27);
      v27 = v120;
    }
    v69 = v2;
    *(_QWORD *)(v27 + 16) = v68;
    v70 = v27 + 32;
    v71 = (uint64_t *)(v27 + 32 + 16 * v67);
    v72 = v149;
    *v71 = v138;
    v71[1] = v72;
    if (v67)
      break;
    v68 = 1;
LABEL_115:
    v28 = v150[1];
    v26 = v149;
    v2 = v69;
    v4 = v142;
    if (v149 >= v28)
      goto LABEL_124;
  }
  while (1)
  {
    v73 = v68 - 1;
    if (v68 >= 4)
    {
      v78 = v70 + 16 * v68;
      v79 = *(_QWORD *)(v78 - 64);
      v80 = *(_QWORD *)(v78 - 56);
      v84 = __OFSUB__(v80, v79);
      v81 = v80 - v79;
      if (v84)
        goto LABEL_142;
      v83 = *(_QWORD *)(v78 - 48);
      v82 = *(_QWORD *)(v78 - 40);
      v84 = __OFSUB__(v82, v83);
      v76 = v82 - v83;
      v77 = v84;
      if (v84)
        goto LABEL_143;
      v85 = v68 - 2;
      v86 = (uint64_t *)(v70 + 16 * (v68 - 2));
      v88 = *v86;
      v87 = v86[1];
      v84 = __OFSUB__(v87, v88);
      v89 = v87 - v88;
      if (v84)
        goto LABEL_144;
      v84 = __OFADD__(v76, v89);
      v90 = v76 + v89;
      if (v84)
        goto LABEL_146;
      if (v90 >= v81)
      {
        v108 = (uint64_t *)(v70 + 16 * v73);
        v110 = *v108;
        v109 = v108[1];
        v84 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v84)
          goto LABEL_152;
        v101 = v76 < v111;
        goto LABEL_104;
      }
    }
    else
    {
      if (v68 != 3)
      {
        v102 = *(_QWORD *)(v27 + 32);
        v103 = *(_QWORD *)(v27 + 40);
        v84 = __OFSUB__(v103, v102);
        v95 = v103 - v102;
        v96 = v84;
        goto LABEL_98;
      }
      v75 = *(_QWORD *)(v27 + 32);
      v74 = *(_QWORD *)(v27 + 40);
      v84 = __OFSUB__(v74, v75);
      v76 = v74 - v75;
      v77 = v84;
    }
    if ((v77 & 1) != 0)
      goto LABEL_145;
    v85 = v68 - 2;
    v91 = (uint64_t *)(v70 + 16 * (v68 - 2));
    v93 = *v91;
    v92 = v91[1];
    v94 = __OFSUB__(v92, v93);
    v95 = v92 - v93;
    v96 = v94;
    if (v94)
      goto LABEL_147;
    v97 = (uint64_t *)(v70 + 16 * v73);
    v99 = *v97;
    v98 = v97[1];
    v84 = __OFSUB__(v98, v99);
    v100 = v98 - v99;
    if (v84)
      goto LABEL_149;
    if (__OFADD__(v95, v100))
      goto LABEL_151;
    if (v95 + v100 >= v76)
    {
      v101 = v76 < v100;
LABEL_104:
      if (v101)
        v73 = v85;
      goto LABEL_106;
    }
LABEL_98:
    if ((v96 & 1) != 0)
      goto LABEL_148;
    v104 = (uint64_t *)(v70 + 16 * v73);
    v106 = *v104;
    v105 = v104[1];
    v84 = __OFSUB__(v105, v106);
    v107 = v105 - v106;
    if (v84)
      goto LABEL_150;
    if (v107 < v95)
      goto LABEL_115;
LABEL_106:
    v112 = v73 - 1;
    if (v73 - 1 >= v68)
    {
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    if (!*v150)
      goto LABEL_165;
    v113 = v27;
    v114 = (uint64_t *)(v70 + 16 * v112);
    v115 = *v114;
    v116 = (_QWORD *)(v70 + 16 * v73);
    v117 = v116[1];
    sub_23F722254(*v150 + *(_QWORD *)(v142 + 72) * *v114, *v150 + *(_QWORD *)(v142 + 72) * *v116, *v150 + *(_QWORD *)(v142 + 72) * v117, v141);
    if (v69)
      break;
    if (v117 < v115)
      goto LABEL_139;
    if (v73 > *(_QWORD *)(v113 + 16))
      goto LABEL_140;
    *v114 = v115;
    *(_QWORD *)(v70 + 16 * v112 + 8) = v117;
    v118 = *(_QWORD *)(v113 + 16);
    if (v73 >= v118)
      goto LABEL_141;
    v27 = v113;
    v68 = v118 - 1;
    memmove((void *)(v70 + 16 * v73), v116 + 2, 16 * (v118 - 1 - v73));
    *(_QWORD *)(v113 + 16) = v118 - 1;
    v11 = v146;
    if (v118 <= 2)
      goto LABEL_115;
  }
  v2 = v69;
LABEL_121:
  swift_bridgeObjectRelease();
  if (v132 < -1)
  {
    __break(1u);
    goto LABEL_123;
  }
LABEL_136:
  *(_QWORD *)(v131 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_23F721FF4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = a1;
  v31 = sub_23F6916B8(&qword_256EA27D8);
  v7 = MEMORY[0x24BDAC7A8](v31);
  v35 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (uint64_t *)((char *)&v28 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (uint64_t *)((char *)&v28 - v13);
  v34 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v37 = v15 * (v34 - 1);
    v32 = (char *)&v28 - v13;
    v33 = v15;
    v36 = v15 * v34;
    v16 = &qword_256EA27D8;
    while (2)
    {
      v17 = 0;
      v18 = v30;
      while (1)
      {
        v19 = *a4;
        sub_23F6B4F58(v36 + v17 + *a4, (uint64_t)v14, v16);
        sub_23F6B4F58(v37 + v17 + v19, (uint64_t)v11, v16);
        if (*v14 == *v11 && v14[1] == v11[1])
          break;
        v21 = sub_23FB2FB78();
        sub_23F6B4F84((uint64_t)v11, v16);
        sub_23F6B4F84((uint64_t)v14, v16);
        if ((v21 & 1) != 0)
        {
          v22 = *a4;
          if (!*a4)
          {
            __break(1u);
            return;
          }
          v23 = v11;
          v24 = v16;
          v25 = a4;
          v26 = v22 + v37 + v17;
          v27 = v24;
          sub_23F6B4EC0(v22 + v36 + v17, v35, v24);
          swift_arrayInitWithTakeFrontToBack();
          sub_23F6B4EC0(v35, v26, v27);
          v17 -= v33;
          ++v18;
          a4 = v25;
          v16 = v27;
          v11 = v23;
          v14 = v32;
          if (v34 != v18)
            continue;
        }
        goto LABEL_13;
      }
      sub_23F6B4F84((uint64_t)v11, v16);
      sub_23F6B4F84((uint64_t)v14, v16);
LABEL_13:
      v37 += v33;
      v36 += v33;
      if (++v34 != v29)
        continue;
      break;
    }
  }
}

void sub_23F722254(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  BOOL v35;
  unint64_t v36;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v45;
  int64_t v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v52 = a4;
  v54 = a3;
  v53 = sub_23F6916B8(&qword_256EA27D8);
  v6 = MEMORY[0x24BDAC7A8](v53);
  v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x24BDAC7A8](v6);
  v57 = (uint64_t *)((char *)&v51 - v10);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (uint64_t *)((char *)&v51 - v12);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (uint64_t *)((char *)&v51 - v15);
  v17 = *(_QWORD *)(v14 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v18 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v17 == -1)
    goto LABEL_88;
  v20 = v54 - a2;
  if (v54 - a2 == 0x8000000000000000 && v17 == -1)
    goto LABEL_89;
  v22 = v18 / v17;
  v23 = v20 / v17;
  v56 = *(_QWORD *)(v14 + 72);
  if (v18 / v17 >= v20 / v17)
  {
    v36 = v52;
    sub_23F755218(a2, v20 / v17);
    v26 = v36 + v23 * v17;
    if (v23 * v17 < 1 || a1 >= a2)
    {
      v24 = v52;
    }
    else
    {
      v55 = -v17;
      v38 = v54;
      do
      {
        v39 = v38;
        v54 = v26;
        v40 = v55;
        v41 = v26 + v55;
        v42 = v57;
        sub_23F6B4F58(v26 + v55, (uint64_t)v57, &qword_256EA27D8);
        v43 = a2 + v40;
        sub_23F6B4F58(a2 + v40, (uint64_t)v8, &qword_256EA27D8);
        if (*v42 == *v8 && v42[1] == v8[1])
          v45 = 0;
        else
          v45 = sub_23FB2FB78();
        v38 = v39 + v55;
        sub_23F6B4F84((uint64_t)v8, &qword_256EA27D8);
        sub_23F6B4F84((uint64_t)v57, &qword_256EA27D8);
        if ((v45 & 1) != 0)
        {
          if (v39 < a2 || v38 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            a2 = v43;
            v26 = v54;
          }
          else
          {
            if (v39 != a2)
              swift_arrayInitWithTakeBackToFront();
            a2 = v43;
            v26 = v54;
          }
        }
        else if (v39 < v54 || v38 >= v54)
        {
          swift_arrayInitWithTakeFrontToBack();
          v26 = v41;
        }
        else
        {
          if (v39 != v54)
            swift_arrayInitWithTakeBackToFront();
          v26 = v41;
        }
      }
      while (v26 > v52 && a2 > a1);
      v24 = v52;
    }
  }
  else
  {
    v24 = v52;
    sub_23F755218(a1, v18 / v17);
    v25 = v22 * v17;
    v26 = v24 + v22 * v17;
    if (v25 >= 1 && a2 < v54)
    {
      while (1)
      {
        sub_23F6B4F58(a2, (uint64_t)v16, &qword_256EA27D8);
        sub_23F6B4F58(v24, (uint64_t)v13, &qword_256EA27D8);
        if (*v16 == *v13 && v16[1] == v13[1])
          break;
        v29 = sub_23FB2FB78();
        sub_23F6B4F84((uint64_t)v13, &qword_256EA27D8);
        sub_23F6B4F84((uint64_t)v16, &qword_256EA27D8);
        if ((v29 & 1) == 0)
          goto LABEL_27;
        v30 = v56;
        v31 = a2 + v56;
        if (a1 < a2 || a1 >= v31)
        {
          swift_arrayInitWithTakeFrontToBack();
LABEL_39:
          v30 = v56;
          goto LABEL_40;
        }
        if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_39;
        }
LABEL_40:
        a1 += v30;
        v35 = v24 >= v26 || v31 >= v54;
        a2 = v31;
        if (v35)
          goto LABEL_82;
      }
      sub_23F6B4F84((uint64_t)v13, &qword_256EA27D8);
      sub_23F6B4F84((uint64_t)v16, &qword_256EA27D8);
LABEL_27:
      v30 = v56;
      v33 = v24 + v56;
      if (a1 < v24 || a1 >= v33)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (a1 == v24)
        {
LABEL_36:
          v31 = a2;
          v24 = v33;
          goto LABEL_40;
        }
        swift_arrayInitWithTakeBackToFront();
      }
      v30 = v56;
      goto LABEL_36;
    }
  }
LABEL_82:
  v49 = v26 - v24;
  if (v56 != -1 || v49 != 0x8000000000000000)
  {
    sub_23F755218(v24, v49 / v56);
    return;
  }
LABEL_90:
  __break(1u);
}

unint64_t sub_23F7226C0()
{
  unint64_t result;

  result = qword_256EA6610;
  if (!qword_256EA6610)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59728, &_s9FlatValueO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6610);
  }
  return result;
}

unint64_t sub_23F7226FC()
{
  unint64_t result;

  result = qword_256EA6618;
  if (!qword_256EA6618)
  {
    result = MEMORY[0x242674E5C](&unk_23FB596D8, &_s9FlatValueO20IdentifierCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6618);
  }
  return result;
}

unint64_t sub_23F722738()
{
  unint64_t result;

  result = qword_256EA6628;
  if (!qword_256EA6628)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59688, &_s9FlatValueO19StatementCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6628);
  }
  return result;
}

unint64_t sub_23F722774()
{
  unint64_t result;

  result = qword_256EA6630;
  if (!qword_256EA6630)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59638, &_s9FlatValueO18VariableCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6630);
  }
  return result;
}

unint64_t sub_23F7227B0()
{
  unint64_t result;

  result = qword_256EA6638;
  if (!qword_256EA6638)
  {
    result = MEMORY[0x242674E5C](&unk_23FB595E8, &_s9FlatValueO16SymbolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6638);
  }
  return result;
}

unint64_t sub_23F7227EC()
{
  unint64_t result;

  result = qword_256EA6640;
  if (!qword_256EA6640)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59598, &_s9FlatValueO14DictCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6640);
  }
  return result;
}

unint64_t sub_23F722828()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256EA6650;
  if (!qword_256EA6650)
  {
    v1 = sub_23F6AE310(&qword_256EA6648);
    sub_23F72156C(&qword_256EA6658, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    v3[0] = MEMORY[0x24BEE0D08];
    v3[1] = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE04C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256EA6650);
  }
  return result;
}

unint64_t sub_23F7228AC()
{
  unint64_t result;

  result = qword_256EA6660;
  if (!qword_256EA6660)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59548, &_s9FlatValueO15ArrayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6660);
  }
  return result;
}

unint64_t sub_23F7228E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256EA6670;
  if (!qword_256EA6670)
  {
    v1 = sub_23F6AE310(&qword_256EA6668);
    sub_23F72156C(&qword_256EA6658, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    v3 = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&qword_256EA6670);
  }
  return result;
}

unint64_t sub_23F722964()
{
  unint64_t result;

  result = qword_256EA6678;
  if (!qword_256EA6678)
  {
    result = MEMORY[0x242674E5C](&unk_23FB594F8, &_s9FlatValueO16StringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6678);
  }
  return result;
}

unint64_t sub_23F7229A0()
{
  unint64_t result;

  result = qword_256EA6680;
  if (!qword_256EA6680)
  {
    result = MEMORY[0x242674E5C](&unk_23FB594A8, &_s9FlatValueO16DoubleCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6680);
  }
  return result;
}

unint64_t sub_23F7229DC()
{
  unint64_t result;

  result = qword_256EA6688;
  if (!qword_256EA6688)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59458, &_s9FlatValueO13IntCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6688);
  }
  return result;
}

unint64_t sub_23F722A18()
{
  unint64_t result;

  result = qword_256EA6690;
  if (!qword_256EA6690)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59408, &_s9FlatValueO14BoolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6690);
  }
  return result;
}

unint64_t sub_23F722A54()
{
  unint64_t result;

  result = qword_256EA6698;
  if (!qword_256EA6698)
  {
    result = MEMORY[0x242674E5C](&unk_23FB593B8, &_s9FlatValueO14NullCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6698);
  }
  return result;
}

unint64_t sub_23F722A90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256EA6708;
  if (!qword_256EA6708)
  {
    v1 = sub_23F6AE310(&qword_256EA6648);
    sub_23F72156C(&qword_256EA6710, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE04E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256EA6708);
  }
  return result;
}

unint64_t sub_23F722B14()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256EA6718;
  if (!qword_256EA6718)
  {
    v1 = sub_23F6AE310(&qword_256EA6668);
    sub_23F72156C(&qword_256EA6710, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    v3 = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&qword_256EA6718);
  }
  return result;
}

uint64_t type metadata accessor for AST.Update(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA6BF0);
}

unint64_t sub_23F722BA4()
{
  unint64_t result;

  result = qword_256EA67D8;
  if (!qword_256EA67D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59368, &_s8FlatExprO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA67D8);
  }
  return result;
}

unint64_t sub_23F722BE0()
{
  unint64_t result;

  result = qword_256EA67E0;
  if (!qword_256EA67E0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59318, &_s8FlatExprO26ContinuePlanningCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA67E0);
  }
  return result;
}

unint64_t sub_23F722C1C()
{
  unint64_t result;

  result = qword_256EA67E8;
  if (!qword_256EA67E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB592C8, &_s8FlatExprO19EndOfPlanCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA67E8);
  }
  return result;
}

unint64_t sub_23F722C58()
{
  unint64_t result;

  result = qword_256EA67F0;
  if (!qword_256EA67F0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59278, &_s8FlatExprO26GetMentionedAppsCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA67F0);
  }
  return result;
}

unint64_t sub_23F722C94()
{
  unint64_t result;

  result = qword_256EA67F8;
  if (!qword_256EA67F8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59228, &_s8FlatExprO16CancelCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA67F8);
  }
  return result;
}

unint64_t sub_23F722CD0()
{
  unint64_t result;

  result = qword_256EA6800;
  if (!qword_256EA6800)
  {
    result = MEMORY[0x242674E5C](&unk_23FB591D8, &_s8FlatExprO16RejectCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6800);
  }
  return result;
}

unint64_t sub_23F722D0C()
{
  unint64_t result;

  result = qword_256EA6808;
  if (!qword_256EA6808)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59188, &_s8FlatExprO14UndoCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6808);
  }
  return result;
}

unint64_t sub_23F722D48()
{
  unint64_t result;

  result = qword_256EA6810;
  if (!qword_256EA6810)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59138, &_s8FlatExprO24NoMatchingToolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6810);
  }
  return result;
}

unint64_t sub_23F722D84()
{
  unint64_t result;

  result = qword_256EA6818;
  if (!qword_256EA6818)
  {
    result = MEMORY[0x242674E5C](&unk_23FB590E8, &_s8FlatExprO21ResolveToolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6818);
  }
  return result;
}

unint64_t sub_23F722DC0()
{
  unint64_t result;

  result = qword_256EA6820;
  if (!qword_256EA6820)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59098, &_s8FlatExprO17PickOneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6820);
  }
  return result;
}

unint64_t sub_23F722DFC()
{
  unint64_t result;

  result = qword_256EA6828;
  if (!qword_256EA6828)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59048, &_s8FlatExprO16SearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6828);
  }
  return result;
}

unint64_t sub_23F722E38()
{
  unint64_t result;

  result = qword_256EA6830;
  if (!qword_256EA6830)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58FF8, &_s8FlatExprO17ConfirmCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6830);
  }
  return result;
}

unint64_t sub_23F722E74()
{
  unint64_t result;

  result = qword_256EA6838;
  if (!qword_256EA6838)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58FA8, &_s8FlatExprO14PickCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6838);
  }
  return result;
}

unint64_t sub_23F722EB0()
{
  unint64_t result;

  result = qword_256EA6840;
  if (!qword_256EA6840)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58F58, &_s8FlatExprO13SayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6840);
  }
  return result;
}

unint64_t sub_23F722EEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256EA6850;
  if (!qword_256EA6850)
  {
    v1 = sub_23F6AE310(&qword_256EA6848);
    sub_23F72156C(&qword_256EA6620, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v3 = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&qword_256EA6850);
  }
  return result;
}

unint64_t sub_23F722F68()
{
  unint64_t result;

  result = qword_256EA6858;
  if (!qword_256EA6858)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58F08, &_s8FlatExprO14CallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6858);
  }
  return result;
}

unint64_t sub_23F722FA4()
{
  unint64_t result;

  result = qword_256EA6860;
  if (!qword_256EA6860)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58EB8, &_s8FlatExprO26UpdateParametersCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6860);
  }
  return result;
}

unint64_t sub_23F722FE0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256EA6870;
  if (!qword_256EA6870)
  {
    v1 = sub_23F6AE310(&qword_256EA6868);
    sub_23F72156C(&qword_256EA6878, (void (*)(uint64_t))type metadata accessor for AST.Update);
    v3 = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&qword_256EA6870);
  }
  return result;
}

unint64_t sub_23F72305C()
{
  unint64_t result;

  result = qword_256EA6880;
  if (!qword_256EA6880)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58E68, &_s8FlatExprO15IndexCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6880);
  }
  return result;
}

unint64_t sub_23F723098()
{
  unint64_t result;

  result = qword_256EA6888;
  if (!qword_256EA6888)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58E18, &_s8FlatExprO13DotCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6888);
  }
  return result;
}

unint64_t sub_23F7230D4()
{
  unint64_t result;

  result = qword_256EA6890;
  if (!qword_256EA6890)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58DC8, &_s8FlatExprO15InfixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6890);
  }
  return result;
}

unint64_t sub_23F723110()
{
  unint64_t result;

  result = qword_256EA6898;
  if (!qword_256EA6898)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58D78, &_s8FlatExprO16PrefixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6898);
  }
  return result;
}

unint64_t sub_23F72314C()
{
  unint64_t result;

  result = qword_256EA68A0;
  if (!qword_256EA68A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58D28, &_s8FlatExprO15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA68A0);
  }
  return result;
}

uint64_t sub_23F723188(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_23F6AE310(&qword_256EA1918);
    v8 = a2;
    result = MEMORY[0x242674E5C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23F7231E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256EA6950;
  if (!qword_256EA6950)
  {
    v1 = sub_23F6AE310(&qword_256EA6848);
    sub_23F72156C(&qword_256EA6700, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v3 = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&qword_256EA6950);
  }
  return result;
}

unint64_t sub_23F723264()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256EA6958;
  if (!qword_256EA6958)
  {
    v1 = sub_23F6AE310(&qword_256EA6868);
    sub_23F72156C(&qword_256EA6960, (void (*)(uint64_t))type metadata accessor for AST.Update);
    v3 = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&qword_256EA6958);
  }
  return result;
}

void sub_23F7232E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_23F6F59F8(a1, a2, a3);
  sub_23F6B5FFC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_23F694CC8();
}

unint64_t sub_23F72330C()
{
  unint64_t result;

  result = qword_256EA6970;
  if (!qword_256EA6970)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58CD8, &_s6UpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6970);
  }
  return result;
}

unint64_t sub_23F723348()
{
  unint64_t result;

  result = qword_256EA6990;
  if (!qword_256EA6990)
  {
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256EA6990);
  }
  return result;
}

void sub_23F723384(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    sub_23F6AE310(a2);
    sub_23F72E3C8();
  }
  sub_23F694CC8();
}

void sub_23F7233B8()
{
  sub_23F72156C(&qword_256EA69A8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
}

uint64_t *_s14FlatAssignExprVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = type metadata accessor for AST.FlatExpr(0);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v10 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v11 = v8[1];
            *v7 = *v8;
            v7[1] = v11;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 4u:
          case 5u:
            *v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 8u:
            v37 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v7, v8, v37);
            goto LABEL_27;
          case 9u:
            v38 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v7, v8, v38);
LABEL_27:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 1u:
        *(_BYTE *)v7 = *(_BYTE *)v8;
        v13 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
        v14 = (_QWORD *)((char *)v7 + v13);
        v15 = (_QWORD *)((char *)v8 + v13);
        v16 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v17 = v15[1];
            *v14 = *v15;
            v14[1] = v17;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 4u:
          case 5u:
            *v14 = *v15;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 8u:
            v39 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v14, v15, v39);
            goto LABEL_33;
          case 9u:
            v40 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v14, v15, v40);
LABEL_33:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 2u:
        *(_BYTE *)v7 = *(_BYTE *)v8;
        v18 = sub_23F6916B8(&qword_256EA60F8);
        v19 = *(int *)(v18 + 48);
        v20 = (_QWORD *)((char *)v7 + v19);
        v21 = (_QWORD *)((char *)v8 + v19);
        v22 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v23 = v21[1];
            *v20 = *v21;
            v20[1] = v23;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 4u:
          case 5u:
            *v20 = *v21;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 8u:
            v41 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v20, v21, v41);
            goto LABEL_39;
          case 9u:
            v42 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v20, v21, v42);
LABEL_39:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
            break;
        }
        v43 = *(int *)(v18 + 64);
        v44 = (_QWORD *)((char *)v7 + v43);
        v45 = (_QWORD *)((char *)v8 + v43);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v46 = v45[1];
            *v44 = *v45;
            v44[1] = v46;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 4u:
          case 5u:
            *v44 = *v45;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 8u:
            v59 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v44, v45, v59);
            goto LABEL_59;
          case 9u:
            v60 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v44, v45, v60);
LABEL_59:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 3u:
        v24 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v25 = v8[1];
            *v7 = *v8;
            v7[1] = v25;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 4u:
          case 5u:
            *v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 8u:
            v47 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v7, v8, v47);
            goto LABEL_46;
          case 9u:
            v48 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v7, v8, v48);
LABEL_46:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
            break;
        }
        v49 = *(int *)(sub_23F6916B8(&qword_256EA60F0) + 48);
        v50 = (_QWORD *)((char *)v7 + v49);
        v51 = (_QWORD *)((char *)v8 + v49);
        v52 = v51[1];
        *v50 = *v51;
        v50[1] = v52;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 4u:
        v26 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v27 = v8[1];
            *v7 = *v8;
            v7[1] = v27;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 4u:
          case 5u:
            *v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 8u:
            v53 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v7, v8, v53);
            goto LABEL_52;
          case 9u:
            v54 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v7, v8, v54);
LABEL_52:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
            break;
        }
        v55 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
        v56 = (_QWORD *)((char *)v7 + v55);
        v57 = (_QWORD *)((char *)v8 + v55);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v58 = v57[1];
            *v56 = *v57;
            v56[1] = v58;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 4u:
          case 5u:
            *v56 = *v57;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 8u:
            v61 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v56, v57, v61);
            goto LABEL_65;
          case 9u:
            v62 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v56, v57, v62);
LABEL_65:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 5u:
      case 7u:
      case 0xCu:
        *v7 = *v8;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 6u:
        v28 = v8[1];
        *v7 = *v8;
        v7[1] = v28;
        v7[2] = v8[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 8u:
        v29 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v7, v8, v29);
        v30 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
        v31 = (char *)v7 + v30;
        v32 = (char *)v8 + v30;
        *(_QWORD *)v31 = *(_QWORD *)v32;
        v31[8] = v32[8];
        goto LABEL_66;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        v36 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v7, v8, v36);
        goto LABEL_66;
      case 0xAu:
        v33 = v8[1];
        *v7 = *v8;
        v7[1] = v33;
        *((_WORD *)v7 + 8) = *((_WORD *)v8 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 0xDu:
        v34 = sub_23FB2C4B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v8, 1, v34))
        {
          v35 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v7, v8, v34);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v7, 0, 1, v34);
        }
LABEL_66:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        break;
    }
  }
  return v3;
}

uint64_t _s14FlatAssignExprVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for AST.FlatExpr(0);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      type metadata accessor for AST.FlatValue(0);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
          goto LABEL_29;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 1:
      v4 += *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
      type metadata accessor for AST.FlatValue(0);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
          goto LABEL_29;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 2:
      v10 = sub_23F6916B8(&qword_256EA60F8);
      v11 = v4 + *(int *)(v10 + 48);
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          v13 = sub_23FB2C764();
          goto LABEL_18;
        case 9u:
          v13 = sub_23FB2C4B8();
LABEL_18:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
          break;
        default:
          break;
      }
      v4 += *(int *)(v10 + 64);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
          goto LABEL_29;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 3:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          v14 = sub_23FB2C764();
          goto LABEL_22;
        case 9u:
          v14 = sub_23FB2C4B8();
LABEL_22:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v4, v14);
          break;
        default:
          break;
      }
      sub_23F6916B8(&qword_256EA60F0);
      return swift_bridgeObjectRelease();
    case 4:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          v15 = sub_23FB2C764();
          goto LABEL_26;
        case 9u:
          v15 = sub_23FB2C4B8();
LABEL_26:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v4, v15);
          break;
        default:
          break;
      }
      v4 += *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
LABEL_29:
          v6 = sub_23FB2C764();
          goto LABEL_3;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 5:
    case 7:
    case 10:
    case 12:
      return swift_bridgeObjectRelease();
    case 6:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 8:
    case 9:
    case 11:
    case 14:
    case 15:
LABEL_2:
      v6 = sub_23FB2C4B8();
LABEL_3:
      v7 = v6;
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v9 = v4;
      return v8(v9, v7);
    case 13:
      v12 = sub_23FB2C4B8();
      result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v4, 1, v12);
      if ((_DWORD)result)
        return result;
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v9 = v4;
      v7 = v12;
      return v8(v9, v7);
    default:
      return result;
  }
}

_QWORD *_s14FlatAssignExprVwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  v8 = type metadata accessor for AST.FlatExpr(0);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v9 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v10 = v7[1];
          *v6 = *v7;
          v6[1] = v10;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 4u:
        case 5u:
          *v6 = *v7;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 8u:
          v35 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v6, v7, v35);
          goto LABEL_25;
        case 9u:
          v36 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v6, v7, v36);
LABEL_25:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 1u:
      *(_BYTE *)v6 = *(_BYTE *)v7;
      v11 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
      v12 = (_QWORD *)((char *)v6 + v11);
      v13 = (_QWORD *)((char *)v7 + v11);
      v14 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v15 = v13[1];
          *v12 = *v13;
          v12[1] = v15;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 4u:
        case 5u:
          *v12 = *v13;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 8u:
          v37 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v12, v13, v37);
          goto LABEL_31;
        case 9u:
          v38 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v12, v13, v38);
LABEL_31:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 2u:
      *(_BYTE *)v6 = *(_BYTE *)v7;
      v16 = sub_23F6916B8(&qword_256EA60F8);
      v17 = *(int *)(v16 + 48);
      v18 = (_QWORD *)((char *)v6 + v17);
      v19 = (_QWORD *)((char *)v7 + v17);
      v20 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v21 = v19[1];
          *v18 = *v19;
          v18[1] = v21;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 4u:
        case 5u:
          *v18 = *v19;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 8u:
          v39 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v18, v19, v39);
          goto LABEL_37;
        case 9u:
          v40 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v18, v19, v40);
LABEL_37:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
          break;
      }
      v41 = *(int *)(v16 + 64);
      v42 = (_QWORD *)((char *)v6 + v41);
      v43 = (_QWORD *)((char *)v7 + v41);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v44 = v43[1];
          *v42 = *v43;
          v42[1] = v44;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 4u:
        case 5u:
          *v42 = *v43;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 8u:
          v57 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v42, v43, v57);
          goto LABEL_57;
        case 9u:
          v58 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v42, v43, v58);
LABEL_57:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 3u:
      v22 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v23 = v7[1];
          *v6 = *v7;
          v6[1] = v23;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 4u:
        case 5u:
          *v6 = *v7;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 8u:
          v45 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v6, v7, v45);
          goto LABEL_44;
        case 9u:
          v46 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v6, v7, v46);
LABEL_44:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
          break;
      }
      v47 = *(int *)(sub_23F6916B8(&qword_256EA60F0) + 48);
      v48 = (_QWORD *)((char *)v6 + v47);
      v49 = (_QWORD *)((char *)v7 + v47);
      v50 = v49[1];
      *v48 = *v49;
      v48[1] = v50;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 4u:
      v24 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v25 = v7[1];
          *v6 = *v7;
          v6[1] = v25;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 4u:
        case 5u:
          *v6 = *v7;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 8u:
          v51 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v6, v7, v51);
          goto LABEL_50;
        case 9u:
          v52 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v6, v7, v52);
LABEL_50:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
          break;
      }
      v53 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
      v54 = (_QWORD *)((char *)v6 + v53);
      v55 = (_QWORD *)((char *)v7 + v53);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v56 = v55[1];
          *v54 = *v55;
          v54[1] = v56;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 4u:
        case 5u:
          *v54 = *v55;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 8u:
          v59 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v54, v55, v59);
          goto LABEL_63;
        case 9u:
          v60 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v54, v55, v60);
LABEL_63:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 5u:
    case 7u:
    case 0xCu:
      *v6 = *v7;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 6u:
      v26 = v7[1];
      *v6 = *v7;
      v6[1] = v26;
      v6[2] = v7[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 8u:
      v27 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v6, v7, v27);
      v28 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
      v29 = (char *)v6 + v28;
      v30 = (char *)v7 + v28;
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      goto LABEL_64;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      v34 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v6, v7, v34);
      goto LABEL_64;
    case 0xAu:
      v31 = v7[1];
      *v6 = *v7;
      v6[1] = v31;
      *((_WORD *)v6 + 8) = *((_WORD *)v7 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 0xDu:
      v32 = sub_23FB2C4B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v7, 1, v32))
      {
        v33 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v6, v7, v32);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v6, 0, 1, v32);
      }
LABEL_64:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *_s14FlatAssignExprVwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    sub_23F6D3508((uint64_t)a1 + v6, type metadata accessor for AST.FlatExpr);
    v9 = type metadata accessor for AST.FlatExpr(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v10 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v7 = *v8;
            v7[1] = v8[1];
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 4u:
          case 5u:
            *v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 8u:
            v30 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v7, v8, v30);
            goto LABEL_26;
          case 9u:
            v31 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v7, v8, v31);
LABEL_26:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 1u:
        *(_BYTE *)v7 = *(_BYTE *)v8;
        v11 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
        v12 = (_QWORD *)((char *)v7 + v11);
        v13 = (_QWORD *)((char *)v8 + v11);
        v14 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v12 = *v13;
            v12[1] = v13[1];
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 4u:
          case 5u:
            *v12 = *v13;
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 8u:
            v32 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v12, v13, v32);
            goto LABEL_32;
          case 9u:
            v33 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v12, v13, v33);
LABEL_32:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 2u:
        *(_BYTE *)v7 = *(_BYTE *)v8;
        v15 = sub_23F6916B8(&qword_256EA60F8);
        v16 = *(int *)(v15 + 48);
        v17 = (_QWORD *)((char *)v7 + v16);
        v18 = (_QWORD *)((char *)v8 + v16);
        v19 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v17 = *v18;
            v17[1] = v18[1];
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 4u:
          case 5u:
            *v17 = *v18;
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 8u:
            v34 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v17, v18, v34);
            goto LABEL_38;
          case 9u:
            v35 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v17, v18, v35);
LABEL_38:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
            break;
        }
        v36 = *(int *)(v15 + 64);
        v37 = (_QWORD *)((char *)v7 + v36);
        v38 = (_QWORD *)((char *)v8 + v36);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v37 = *v38;
            v37[1] = v38[1];
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 4u:
          case 5u:
            *v37 = *v38;
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 8u:
            v49 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v37, v38, v49);
            goto LABEL_58;
          case 9u:
            v50 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v37, v38, v50);
LABEL_58:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 3u:
        v20 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v7 = *v8;
            v7[1] = v8[1];
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 4u:
          case 5u:
            *v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 8u:
            v39 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v7, v8, v39);
            goto LABEL_45;
          case 9u:
            v40 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v7, v8, v40);
LABEL_45:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
            break;
        }
        v41 = *(int *)(sub_23F6916B8(&qword_256EA60F0) + 48);
        v42 = (_QWORD *)((char *)v7 + v41);
        v43 = (_QWORD *)((char *)v8 + v41);
        *v42 = *v43;
        v42[1] = v43[1];
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 4u:
        v21 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v7 = *v8;
            v7[1] = v8[1];
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 4u:
          case 5u:
            *v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 8u:
            v44 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v7, v8, v44);
            goto LABEL_51;
          case 9u:
            v45 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v7, v8, v45);
LABEL_51:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
            break;
        }
        v46 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
        v47 = (_QWORD *)((char *)v7 + v46);
        v48 = (_QWORD *)((char *)v8 + v46);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v47 = *v48;
            v47[1] = v48[1];
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 4u:
          case 5u:
            *v47 = *v48;
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 8u:
            v51 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v47, v48, v51);
            goto LABEL_64;
          case 9u:
            v52 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v47, v48, v52);
LABEL_64:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 5u:
      case 7u:
      case 0xCu:
        *v7 = *v8;
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 6u:
        *v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 8u:
        v22 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v7, v8, v22);
        v23 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
        v24 = (char *)v7 + v23;
        v25 = (char *)v8 + v23;
        v26 = v25[8];
        *(_QWORD *)v24 = *(_QWORD *)v25;
        v24[8] = v26;
        goto LABEL_65;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        v29 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v7, v8, v29);
        goto LABEL_65;
      case 0xAu:
        *v7 = *v8;
        v7[1] = v8[1];
        *((_BYTE *)v7 + 16) = *((_BYTE *)v8 + 16);
        *((_BYTE *)v7 + 17) = *((_BYTE *)v8 + 17);
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 0xDu:
        v27 = sub_23FB2C4B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v8, 1, v27))
        {
          v28 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v7, v8, v27);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v7, 0, 1, v27);
        }
LABEL_65:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *_s14FlatAssignExprVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for AST.FlatExpr(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v8 = type metadata accessor for AST.FlatValue(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 9)
      {
        v36 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v5, v6, v36);
        goto LABEL_44;
      }
      if (EnumCaseMultiPayload == 8)
      {
        v10 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
        goto LABEL_44;
      }
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      goto LABEL_48;
    case 1u:
      *v5 = *v6;
      v11 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
      v12 = &v5[v11];
      v13 = &v6[v11];
      v14 = type metadata accessor for AST.FlatValue(0);
      v15 = swift_getEnumCaseMultiPayload();
      if (v15 == 9)
      {
        v37 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v12, v13, v37);
        goto LABEL_44;
      }
      if (v15 == 8)
      {
        v16 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v12, v13, v16);
        goto LABEL_44;
      }
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      goto LABEL_48;
    case 2u:
      *v5 = *v6;
      v17 = sub_23F6916B8(&qword_256EA60F8);
      v18 = *(int *)(v17 + 48);
      v19 = &v5[v18];
      v20 = &v6[v18];
      v21 = type metadata accessor for AST.FlatValue(0);
      v22 = swift_getEnumCaseMultiPayload();
      if (v22 == 9)
      {
        v38 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v19, v20, v38);
        goto LABEL_27;
      }
      if (v22 == 8)
      {
        v23 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v19, v20, v23);
LABEL_27:
        swift_storeEnumTagMultiPayload();
        goto LABEL_29;
      }
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_29:
      v39 = *(int *)(v17 + 64);
      v40 = &v5[v39];
      v41 = &v6[v39];
      v42 = swift_getEnumCaseMultiPayload();
      if (v42 == 9)
        goto LABEL_43;
      if (v42 == 8)
        goto LABEL_31;
      goto LABEL_47;
    case 3u:
      v24 = type metadata accessor for AST.FlatValue(0);
      v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 9)
      {
        v44 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v5, v6, v44);
        goto LABEL_33;
      }
      if (v25 == 8)
      {
        v26 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v5, v6, v26);
LABEL_33:
        swift_storeEnumTagMultiPayload();
        goto LABEL_35;
      }
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_35:
      v45 = sub_23F6916B8(&qword_256EA60F0);
      *(_OWORD *)&v5[*(int *)(v45 + 48)] = *(_OWORD *)&v6[*(int *)(v45 + 48)];
      goto LABEL_48;
    case 4u:
      v21 = type metadata accessor for AST.FlatValue(0);
      v27 = swift_getEnumCaseMultiPayload();
      if (v27 == 9)
      {
        v46 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v5, v6, v46);
        goto LABEL_37;
      }
      if (v27 == 8)
      {
        v28 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v5, v6, v28);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        goto LABEL_39;
      }
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_39:
      v47 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
      v40 = &v5[v47];
      v41 = &v6[v47];
      v48 = swift_getEnumCaseMultiPayload();
      if (v48 == 9)
      {
LABEL_43:
        v49 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v40, v41, v49);
        goto LABEL_44;
      }
      if (v48 == 8)
      {
LABEL_31:
        v43 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
LABEL_44:
        swift_storeEnumTagMultiPayload();
        goto LABEL_48;
      }
LABEL_47:
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_48:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 8u:
      v29 = sub_23FB2C4B8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v5, v6, v29);
      v30 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
      v31 = &v5[v30];
      v32 = &v6[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      goto LABEL_48;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      v33 = sub_23FB2C4B8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v5, v6, v33);
      goto LABEL_48;
    case 0xDu:
      v34 = sub_23FB2C4B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v6, 1, v34))
      {
        v35 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v5, v6, v34);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v5, 0, 1, v34);
      }
      goto LABEL_48;
    default:
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      return a1;
  }
}

_QWORD *_s14FlatAssignExprVwta(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_23F6D3508((uint64_t)a1 + v7, type metadata accessor for AST.FlatExpr);
    v10 = type metadata accessor for AST.FlatExpr(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v11 = type metadata accessor for AST.FlatValue(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 9)
        {
          v39 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v8, v9, v39);
          goto LABEL_45;
        }
        if (EnumCaseMultiPayload == 8)
        {
          v13 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
          goto LABEL_45;
        }
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        goto LABEL_49;
      case 1u:
        *v8 = *v9;
        v14 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
        v15 = &v8[v14];
        v16 = &v9[v14];
        v17 = type metadata accessor for AST.FlatValue(0);
        v18 = swift_getEnumCaseMultiPayload();
        if (v18 == 9)
        {
          v40 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v15, v16, v40);
          goto LABEL_45;
        }
        if (v18 == 8)
        {
          v19 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v15, v16, v19);
          goto LABEL_45;
        }
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        goto LABEL_49;
      case 2u:
        *v8 = *v9;
        v20 = sub_23F6916B8(&qword_256EA60F8);
        v21 = *(int *)(v20 + 48);
        v22 = &v8[v21];
        v23 = &v9[v21];
        v24 = type metadata accessor for AST.FlatValue(0);
        v25 = swift_getEnumCaseMultiPayload();
        if (v25 == 9)
        {
          v41 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v22, v23, v41);
          goto LABEL_28;
        }
        if (v25 == 8)
        {
          v26 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v22, v23, v26);
LABEL_28:
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        }
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_30:
        v42 = *(int *)(v20 + 64);
        v43 = &v8[v42];
        v44 = &v9[v42];
        v45 = swift_getEnumCaseMultiPayload();
        if (v45 == 9)
          goto LABEL_44;
        if (v45 == 8)
          goto LABEL_32;
        goto LABEL_48;
      case 3u:
        v27 = type metadata accessor for AST.FlatValue(0);
        v28 = swift_getEnumCaseMultiPayload();
        if (v28 == 9)
        {
          v47 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v8, v9, v47);
          goto LABEL_34;
        }
        if (v28 == 8)
        {
          v29 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v8, v9, v29);
LABEL_34:
          swift_storeEnumTagMultiPayload();
          goto LABEL_36;
        }
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_36:
        v48 = sub_23F6916B8(&qword_256EA60F0);
        *(_OWORD *)&v8[*(int *)(v48 + 48)] = *(_OWORD *)&v9[*(int *)(v48 + 48)];
        goto LABEL_49;
      case 4u:
        v24 = type metadata accessor for AST.FlatValue(0);
        v30 = swift_getEnumCaseMultiPayload();
        if (v30 == 9)
        {
          v49 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v8, v9, v49);
          goto LABEL_38;
        }
        if (v30 == 8)
        {
          v31 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v8, v9, v31);
LABEL_38:
          swift_storeEnumTagMultiPayload();
          goto LABEL_40;
        }
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_40:
        v50 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
        v43 = &v8[v50];
        v44 = &v9[v50];
        v51 = swift_getEnumCaseMultiPayload();
        if (v51 == 9)
        {
LABEL_44:
          v52 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v43, v44, v52);
          goto LABEL_45;
        }
        if (v51 == 8)
        {
LABEL_32:
          v46 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
LABEL_45:
          swift_storeEnumTagMultiPayload();
          goto LABEL_49;
        }
LABEL_48:
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_49:
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v32 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v8, v9, v32);
        v33 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
        v34 = &v8[v33];
        v35 = &v9[v33];
        *(_QWORD *)v34 = *(_QWORD *)v35;
        v34[8] = v35[8];
        goto LABEL_49;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        v36 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v8, v9, v36);
        goto LABEL_49;
      case 0xDu:
        v37 = sub_23FB2C4B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v9, 1, v37))
        {
          v38 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v8, v9, v37);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v8, 0, 1, v37);
        }
        goto LABEL_49;
      default:
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t _s14FlatAssignExprVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F726CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_23F6F083C(*(_QWORD *)(a1 + 8));
    sub_23F694C84();
  }
  else
  {
    v6 = sub_23F72E324();
    sub_23F6F07D0(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t _s14FlatAssignExprVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F726D10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_23F694C84();
  }
  else
  {
    v7 = sub_23F72E324();
    sub_23F6F07C4(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_23F726D68()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AST.FlatExpr(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *_s9FlatValueOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        v9 = sub_23FB2C764();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_9;
      case 9u:
        v10 = sub_23FB2C4B8();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t _s9FlatValueOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      result = swift_bridgeObjectRelease();
      break;
    case 8:
      v3 = sub_23FB2C764();
      goto LABEL_5;
    case 9:
      v3 = sub_23FB2C4B8();
LABEL_5:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *_s9FlatValueOwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 6u:
    case 7u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 8u:
      v7 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_7;
    case 9u:
      v8 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *_s9FlatValueOwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for AST.FlatValue);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 8u:
        v6 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 9u:
        v7 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *_s9FlatValueOwtk(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 9)
  {
    v8 = sub_23FB2C4B8();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  }
  else
  {
    if (EnumCaseMultiPayload != 8)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = sub_23FB2C764();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *_s9FlatValueOwta(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for AST.FlatValue);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 9)
    {
      v8 = sub_23FB2C4B8();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    }
    else
    {
      if (EnumCaseMultiPayload != 8)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = sub_23FB2C764();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23F72748C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23FB2C764();
  if (v1 <= 0x3F)
  {
    result = sub_23FB2C4B8();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *_s8FlatExprOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v8 = a2[1];
            *a1 = *a2;
            a1[1] = v8;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 8u:
            v34 = sub_23FB2C764();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a1, a2, v34);
            goto LABEL_27;
          case 9u:
            v35 = sub_23FB2C4B8();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a1, a2, v35);
LABEL_27:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 1u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v10 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
        v11 = (uint64_t *)((char *)a1 + v10);
        v12 = (uint64_t *)((char *)a2 + v10);
        v13 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v14 = v12[1];
            *v11 = *v12;
            v11[1] = v14;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 4u:
          case 5u:
            *v11 = *v12;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 8u:
            v36 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v11, v12, v36);
            goto LABEL_33;
          case 9u:
            v37 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v11, v12, v37);
LABEL_33:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 2u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v15 = sub_23F6916B8(&qword_256EA60F8);
        v16 = *(int *)(v15 + 48);
        v17 = (uint64_t *)((char *)a1 + v16);
        v18 = (uint64_t *)((char *)a2 + v16);
        v19 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v20 = v18[1];
            *v17 = *v18;
            v17[1] = v20;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 4u:
          case 5u:
            *v17 = *v18;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 8u:
            v38 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v17, v18, v38);
            goto LABEL_39;
          case 9u:
            v39 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v17, v18, v39);
LABEL_39:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
            break;
        }
        v40 = *(int *)(v15 + 64);
        v41 = (uint64_t *)((char *)a1 + v40);
        v42 = (uint64_t *)((char *)a2 + v40);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v43 = v42[1];
            *v41 = *v42;
            v41[1] = v43;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 4u:
          case 5u:
            *v41 = *v42;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 8u:
            v56 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v41, v42, v56);
            goto LABEL_59;
          case 9u:
            v57 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v41, v42, v57);
LABEL_59:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 3u:
        v21 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v22 = a2[1];
            *a1 = *a2;
            a1[1] = v22;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 8u:
            v44 = sub_23FB2C764();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(a1, a2, v44);
            goto LABEL_46;
          case 9u:
            v45 = sub_23FB2C4B8();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(a1, a2, v45);
LABEL_46:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
            break;
        }
        v46 = *(int *)(sub_23F6916B8(&qword_256EA60F0) + 48);
        v47 = (uint64_t *)((char *)a1 + v46);
        v48 = (uint64_t *)((char *)a2 + v46);
        v49 = v48[1];
        *v47 = *v48;
        v47[1] = v49;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 4u:
        v23 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v24 = a2[1];
            *a1 = *a2;
            a1[1] = v24;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 8u:
            v50 = sub_23FB2C764();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(a1, a2, v50);
            goto LABEL_52;
          case 9u:
            v51 = sub_23FB2C4B8();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(a1, a2, v51);
LABEL_52:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
            break;
        }
        v52 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
        v53 = (uint64_t *)((char *)a1 + v52);
        v54 = (uint64_t *)((char *)a2 + v52);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            v55 = v54[1];
            *v53 = *v54;
            v53[1] = v55;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 4u:
          case 5u:
            *v53 = *v54;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 8u:
            v58 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v53, v54, v58);
            goto LABEL_65;
          case 9u:
            v59 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v53, v54, v59);
LABEL_65:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 5u:
      case 7u:
      case 0xCu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 6u:
        v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 8u:
        v26 = sub_23FB2C4B8();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
        v27 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        *(_QWORD *)v28 = *(_QWORD *)v29;
        v28[8] = v29[8];
        goto LABEL_66;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        v33 = sub_23FB2C4B8();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
        goto LABEL_66;
      case 0xAu:
        v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 0xDu:
        v31 = sub_23FB2C4B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v31))
        {
          v32 = sub_23F6916B8(&qword_256EA2798);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(a1, a2, v31);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v31);
        }
LABEL_66:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t _s8FlatExprOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      type metadata accessor for AST.FlatValue(0);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
          goto LABEL_29;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 1:
      a1 += *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
      type metadata accessor for AST.FlatValue(0);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
          goto LABEL_29;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 2:
      v7 = sub_23F6916B8(&qword_256EA60F8);
      v8 = a1 + *(int *)(v7 + 48);
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          v10 = sub_23FB2C764();
          goto LABEL_18;
        case 9u:
          v10 = sub_23FB2C4B8();
LABEL_18:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
          break;
        default:
          break;
      }
      a1 += *(int *)(v7 + 64);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
          goto LABEL_29;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 3:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          v11 = sub_23FB2C764();
          goto LABEL_22;
        case 9u:
          v11 = sub_23FB2C4B8();
LABEL_22:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
          break;
        default:
          break;
      }
      sub_23F6916B8(&qword_256EA60F0);
      return swift_bridgeObjectRelease();
    case 4:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          v12 = sub_23FB2C764();
          goto LABEL_26;
        case 9u:
          v12 = sub_23FB2C4B8();
LABEL_26:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
          break;
        default:
          break;
      }
      a1 += *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return swift_bridgeObjectRelease();
        case 8:
LABEL_29:
          v3 = sub_23FB2C764();
          goto LABEL_3;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 5:
    case 7:
    case 10:
    case 12:
      return swift_bridgeObjectRelease();
    case 6:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 8:
    case 9:
    case 11:
    case 14:
    case 15:
LABEL_2:
      v3 = sub_23FB2C4B8();
LABEL_3:
      v4 = v3;
      v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v6 = a1;
      return v5(v6, v4);
    case 13:
      v9 = sub_23FB2C4B8();
      result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v9);
      if ((_DWORD)result)
        return result;
      v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v6 = a1;
      v4 = v9;
      return v5(v6, v4);
    default:
      return result;
  }
}

_QWORD *_s8FlatExprOwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v7 = a2[1];
          *a1 = *a2;
          a1[1] = v7;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 4u:
        case 5u:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 8u:
          v32 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(a1, a2, v32);
          goto LABEL_25;
        case 9u:
          v33 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
LABEL_25:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 1u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
      v9 = (_QWORD *)((char *)a1 + v8);
      v10 = (_QWORD *)((char *)a2 + v8);
      v11 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v12 = v10[1];
          *v9 = *v10;
          v9[1] = v12;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 4u:
        case 5u:
          *v9 = *v10;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 8u:
          v34 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v9, v10, v34);
          goto LABEL_31;
        case 9u:
          v35 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v9, v10, v35);
LABEL_31:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 2u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v13 = sub_23F6916B8(&qword_256EA60F8);
      v14 = *(int *)(v13 + 48);
      v15 = (_QWORD *)((char *)a1 + v14);
      v16 = (_QWORD *)((char *)a2 + v14);
      v17 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v18 = v16[1];
          *v15 = *v16;
          v15[1] = v18;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 4u:
        case 5u:
          *v15 = *v16;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 8u:
          v36 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v15, v16, v36);
          goto LABEL_37;
        case 9u:
          v37 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v15, v16, v37);
LABEL_37:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          break;
      }
      v38 = *(int *)(v13 + 64);
      v39 = (_QWORD *)((char *)a1 + v38);
      v40 = (_QWORD *)((char *)a2 + v38);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v41 = v40[1];
          *v39 = *v40;
          v39[1] = v41;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 4u:
        case 5u:
          *v39 = *v40;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 8u:
          v54 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v39, v40, v54);
          goto LABEL_57;
        case 9u:
          v55 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v39, v40, v55);
LABEL_57:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 3u:
      v19 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v20 = a2[1];
          *a1 = *a2;
          a1[1] = v20;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 4u:
        case 5u:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 8u:
          v42 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(a1, a2, v42);
          goto LABEL_44;
        case 9u:
          v43 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(a1, a2, v43);
LABEL_44:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
          break;
      }
      v44 = *(int *)(sub_23F6916B8(&qword_256EA60F0) + 48);
      v45 = (_QWORD *)((char *)a1 + v44);
      v46 = (_QWORD *)((char *)a2 + v44);
      v47 = v46[1];
      *v45 = *v46;
      v45[1] = v47;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 4u:
      v21 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v22 = a2[1];
          *a1 = *a2;
          a1[1] = v22;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 4u:
        case 5u:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 8u:
          v48 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(a1, a2, v48);
          goto LABEL_50;
        case 9u:
          v49 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(a1, a2, v49);
LABEL_50:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
          break;
      }
      v50 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
      v51 = (_QWORD *)((char *)a1 + v50);
      v52 = (_QWORD *)((char *)a2 + v50);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          v53 = v52[1];
          *v51 = *v52;
          v51[1] = v53;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 4u:
        case 5u:
          *v51 = *v52;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 8u:
          v56 = sub_23FB2C764();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v51, v52, v56);
          goto LABEL_63;
        case 9u:
          v57 = sub_23FB2C4B8();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v51, v52, v57);
LABEL_63:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 5u:
    case 7u:
    case 0xCu:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 6u:
      v23 = a2[1];
      *a1 = *a2;
      a1[1] = v23;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 8u:
      v24 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
      v25 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      goto LABEL_64;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      v31 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(a1, a2, v31);
      goto LABEL_64;
    case 0xAu:
      v28 = a2[1];
      *a1 = *a2;
      a1[1] = v28;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 0xDu:
      v29 = sub_23FB2C4B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v29))
      {
        v30 = sub_23F6916B8(&qword_256EA2798);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a1, a2, v29);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v29);
      }
LABEL_64:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *_s8FlatExprOwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for AST.FlatExpr);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 8u:
            v26 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
            goto LABEL_26;
          case 9u:
            v27 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
LABEL_26:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 1u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v7 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
        v8 = (_QWORD *)((char *)a1 + v7);
        v9 = (_QWORD *)((char *)a2 + v7);
        v10 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v8 = *v9;
            v8[1] = v9[1];
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 4u:
          case 5u:
            *v8 = *v9;
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 8u:
            v28 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v8, v9, v28);
            goto LABEL_32;
          case 9u:
            v29 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v8, v9, v29);
LABEL_32:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 2u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v11 = sub_23F6916B8(&qword_256EA60F8);
        v12 = *(int *)(v11 + 48);
        v13 = (_QWORD *)((char *)a1 + v12);
        v14 = (_QWORD *)((char *)a2 + v12);
        v15 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v13 = *v14;
            v13[1] = v14[1];
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 4u:
          case 5u:
            *v13 = *v14;
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 8u:
            v30 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v13, v14, v30);
            goto LABEL_38;
          case 9u:
            v31 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v13, v14, v31);
LABEL_38:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
            break;
        }
        v32 = *(int *)(v11 + 64);
        v33 = (_QWORD *)((char *)a1 + v32);
        v34 = (_QWORD *)((char *)a2 + v32);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v33 = *v34;
            v33[1] = v34[1];
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 4u:
          case 5u:
            *v33 = *v34;
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 8u:
            v45 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v33, v34, v45);
            goto LABEL_58;
          case 9u:
            v46 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v33, v34, v46);
LABEL_58:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 3u:
        v16 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 8u:
            v35 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a1, a2, v35);
            goto LABEL_45;
          case 9u:
            v36 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(a1, a2, v36);
LABEL_45:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
            break;
        }
        v37 = *(int *)(sub_23F6916B8(&qword_256EA60F0) + 48);
        v38 = (_QWORD *)((char *)a1 + v37);
        v39 = (_QWORD *)((char *)a2 + v37);
        *v38 = *v39;
        v38[1] = v39[1];
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 4u:
        v17 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 8u:
            v40 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(a1, a2, v40);
            goto LABEL_51;
          case 9u:
            v41 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(a1, a2, v41);
LABEL_51:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
            break;
        }
        v42 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
        v43 = (_QWORD *)((char *)a1 + v42);
        v44 = (_QWORD *)((char *)a2 + v42);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *v43 = *v44;
            v43[1] = v44[1];
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 4u:
          case 5u:
            *v43 = *v44;
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 8u:
            v47 = sub_23FB2C764();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v43, v44, v47);
            goto LABEL_64;
          case 9u:
            v48 = sub_23FB2C4B8();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v43, v44, v48);
LABEL_64:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 5u:
      case 7u:
      case 0xCu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 8u:
        v18 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
        v19 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = v21[8];
        *(_QWORD *)v20 = *(_QWORD *)v21;
        v20[8] = v22;
        goto LABEL_65;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        v25 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
        goto LABEL_65;
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 0xDu:
        v23 = sub_23FB2C4B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v23))
        {
          v24 = sub_23F6916B8(&qword_256EA2798);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v23);
        }
LABEL_65:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_BYTE *_s8FlatExprOwtk(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for AST.FlatValue(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 9)
      {
        v34 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(a1, a2, v34);
        goto LABEL_44;
      }
      if (EnumCaseMultiPayload == 8)
      {
        v8 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        goto LABEL_44;
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_48;
    case 1u:
      *a1 = *a2;
      v9 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for AST.FlatValue(0);
      v13 = swift_getEnumCaseMultiPayload();
      if (v13 == 9)
      {
        v35 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v10, v11, v35);
        goto LABEL_44;
      }
      if (v13 == 8)
      {
        v14 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
        goto LABEL_44;
      }
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      goto LABEL_48;
    case 2u:
      *a1 = *a2;
      v15 = sub_23F6916B8(&qword_256EA60F8);
      v16 = *(int *)(v15 + 48);
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = type metadata accessor for AST.FlatValue(0);
      v20 = swift_getEnumCaseMultiPayload();
      if (v20 == 9)
      {
        v36 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v17, v18, v36);
        goto LABEL_27;
      }
      if (v20 == 8)
      {
        v21 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v17, v18, v21);
LABEL_27:
        swift_storeEnumTagMultiPayload();
        goto LABEL_29;
      }
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_29:
      v37 = *(int *)(v15 + 64);
      v38 = &a1[v37];
      v39 = &a2[v37];
      v40 = swift_getEnumCaseMultiPayload();
      if (v40 == 9)
        goto LABEL_43;
      if (v40 == 8)
        goto LABEL_31;
      goto LABEL_47;
    case 3u:
      v22 = type metadata accessor for AST.FlatValue(0);
      v23 = swift_getEnumCaseMultiPayload();
      if (v23 == 9)
      {
        v42 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(a1, a2, v42);
        goto LABEL_33;
      }
      if (v23 == 8)
      {
        v24 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(a1, a2, v24);
LABEL_33:
        swift_storeEnumTagMultiPayload();
        goto LABEL_35;
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
LABEL_35:
      v43 = sub_23F6916B8(&qword_256EA60F0);
      *(_OWORD *)&a1[*(int *)(v43 + 48)] = *(_OWORD *)&a2[*(int *)(v43 + 48)];
      goto LABEL_48;
    case 4u:
      v19 = type metadata accessor for AST.FlatValue(0);
      v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 9)
      {
        v44 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(a1, a2, v44);
        goto LABEL_37;
      }
      if (v25 == 8)
      {
        v26 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(a1, a2, v26);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        goto LABEL_39;
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_39:
      v45 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
      v38 = &a1[v45];
      v39 = &a2[v45];
      v46 = swift_getEnumCaseMultiPayload();
      if (v46 == 9)
      {
LABEL_43:
        v47 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v38, v39, v47);
        goto LABEL_44;
      }
      if (v46 == 8)
      {
LABEL_31:
        v41 = sub_23FB2C764();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
LABEL_44:
        swift_storeEnumTagMultiPayload();
        goto LABEL_48;
      }
LABEL_47:
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_48:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 8u:
      v27 = sub_23FB2C4B8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(a1, a2, v27);
      v28 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
      v29 = &a1[v28];
      v30 = &a2[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      goto LABEL_48;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      v31 = sub_23FB2C4B8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(a1, a2, v31);
      goto LABEL_48;
    case 0xDu:
      v32 = sub_23FB2C4B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v32))
      {
        v33 = sub_23F6916B8(&qword_256EA2798);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(a1, a2, v32);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v32);
      }
      goto LABEL_48;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

_BYTE *_s8FlatExprOwta(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for AST.FlatExpr);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for AST.FlatValue(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 9)
        {
          v34 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(a1, a2, v34);
          goto LABEL_45;
        }
        if (EnumCaseMultiPayload == 8)
        {
          v8 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
          goto LABEL_45;
        }
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_49;
      case 1u:
        *a1 = *a2;
        v9 = *(int *)(sub_23F6916B8(&qword_256EA6100) + 48);
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = type metadata accessor for AST.FlatValue(0);
        v13 = swift_getEnumCaseMultiPayload();
        if (v13 == 9)
        {
          v35 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v10, v11, v35);
          goto LABEL_45;
        }
        if (v13 == 8)
        {
          v14 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
          goto LABEL_45;
        }
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        goto LABEL_49;
      case 2u:
        *a1 = *a2;
        v15 = sub_23F6916B8(&qword_256EA60F8);
        v16 = *(int *)(v15 + 48);
        v17 = &a1[v16];
        v18 = &a2[v16];
        v19 = type metadata accessor for AST.FlatValue(0);
        v20 = swift_getEnumCaseMultiPayload();
        if (v20 == 9)
        {
          v36 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v17, v18, v36);
          goto LABEL_28;
        }
        if (v20 == 8)
        {
          v21 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v17, v18, v21);
LABEL_28:
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        }
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_30:
        v37 = *(int *)(v15 + 64);
        v38 = &a1[v37];
        v39 = &a2[v37];
        v40 = swift_getEnumCaseMultiPayload();
        if (v40 == 9)
          goto LABEL_44;
        if (v40 == 8)
          goto LABEL_32;
        goto LABEL_48;
      case 3u:
        v22 = type metadata accessor for AST.FlatValue(0);
        v23 = swift_getEnumCaseMultiPayload();
        if (v23 == 9)
        {
          v42 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(a1, a2, v42);
          goto LABEL_34;
        }
        if (v23 == 8)
        {
          v24 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(a1, a2, v24);
LABEL_34:
          swift_storeEnumTagMultiPayload();
          goto LABEL_36;
        }
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
LABEL_36:
        v43 = sub_23F6916B8(&qword_256EA60F0);
        *(_OWORD *)&a1[*(int *)(v43 + 48)] = *(_OWORD *)&a2[*(int *)(v43 + 48)];
        goto LABEL_49;
      case 4u:
        v19 = type metadata accessor for AST.FlatValue(0);
        v25 = swift_getEnumCaseMultiPayload();
        if (v25 == 9)
        {
          v44 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(a1, a2, v44);
          goto LABEL_38;
        }
        if (v25 == 8)
        {
          v26 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(a1, a2, v26);
LABEL_38:
          swift_storeEnumTagMultiPayload();
          goto LABEL_40;
        }
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_40:
        v45 = *(int *)(sub_23F6916B8(&qword_256EA60E8) + 48);
        v38 = &a1[v45];
        v39 = &a2[v45];
        v46 = swift_getEnumCaseMultiPayload();
        if (v46 == 9)
        {
LABEL_44:
          v47 = sub_23FB2C4B8();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v38, v39, v47);
          goto LABEL_45;
        }
        if (v46 == 8)
        {
LABEL_32:
          v41 = sub_23FB2C764();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
LABEL_45:
          swift_storeEnumTagMultiPayload();
          goto LABEL_49;
        }
LABEL_48:
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_49:
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v27 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(a1, a2, v27);
        v28 = *(int *)(sub_23F6916B8(&qword_256EA60D8) + 48);
        v29 = &a1[v28];
        v30 = &a2[v28];
        *(_QWORD *)v29 = *(_QWORD *)v30;
        v29[8] = v30[8];
        goto LABEL_49;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        v31 = sub_23FB2C4B8();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(a1, a2, v31);
        goto LABEL_49;
      case 0xDu:
        v32 = sub_23FB2C4B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v32))
        {
          v33 = sub_23F6916B8(&qword_256EA2798);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(a1, a2, v32);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v32);
        }
        goto LABEL_49;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

void sub_23F72AD24()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v0 = type metadata accessor for AST.FlatValue(319);
  if (v1 <= 0x3F)
  {
    v13 = *(_QWORD *)(v0 - 8) + 64;
    swift_getTupleTypeLayout2();
    v14 = &v12;
    swift_getTupleTypeLayout3();
    v15 = &v11;
    swift_getTupleTypeLayout2();
    v16 = &v10;
    swift_getTupleTypeLayout2();
    v2 = MEMORY[0x24BEE0158] + 64;
    v17 = &v9;
    v18 = MEMORY[0x24BEE0158] + 64;
    v19 = &unk_23FB57218;
    v20 = MEMORY[0x24BEE0158] + 64;
    v3 = sub_23FB2C4B8();
    if (v4 <= 0x3F)
    {
      v5 = *(_QWORD *)(v3 - 8) + 64;
      swift_getTupleTypeLayout2();
      v21 = &v8;
      v22 = v5;
      v23 = &unk_23FB57248;
      v24 = v5;
      v25 = v2;
      sub_23F72AE84();
      if (v7 <= 0x3F)
      {
        v26 = *(_QWORD *)(v6 - 8) + 64;
        v27 = v5;
        v28 = v5;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void sub_23F72AE84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256EA6B68[0])
  {
    sub_23FB2C4B8();
    v0 = sub_23FB2F65C();
    if (!v1)
      atomic_store(v0, qword_256EA6B68);
  }
}

uint64_t *_s6UpdateVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AST.FlatValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        v10 = sub_23FB2C764();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_9;
      case 9u:
        v11 = sub_23FB2C4B8();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v12 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v13 = a3[7];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        v16 = v15[1];
        *v14 = *v15;
        v14[1] = v16;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
      case 5u:
        *v14 = *v15;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 8u:
        v17 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
        goto LABEL_16;
      case 9u:
        v18 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t _s6UpdateVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for AST.FlatValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      swift_bridgeObjectRelease();
      break;
    case 8u:
      v4 = sub_23FB2C764();
      goto LABEL_5;
    case 9u:
      v4 = sub_23FB2C4B8();
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 28);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      result = swift_bridgeObjectRelease();
      break;
    case 8:
      v7 = sub_23FB2C764();
      goto LABEL_10;
    case 9:
      v7 = sub_23FB2C4B8();
LABEL_10:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *_s6UpdateVwcp(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for AST.FlatValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 6u:
    case 7u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 8u:
      v8 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_7;
    case 9u:
      v9 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  v11 = a3[7];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 6u:
    case 7u:
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
    case 5u:
      *v12 = *v13;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 8u:
      v15 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      goto LABEL_14;
    case 9u:
      v16 = sub_23FB2C4B8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
LABEL_14:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *_s6UpdateVwca(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for AST.FlatValue);
    v6 = type metadata accessor for AST.FlatValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 8u:
        v7 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_8;
      case 9u:
        v8 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  if (a1 != a2)
  {
    v9 = a3[7];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    sub_23F6D3508((uint64_t)a1 + v9, type metadata accessor for AST.FlatValue);
    v12 = type metadata accessor for AST.FlatValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        *v10 = *v11;
        v10[1] = v11[1];
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
      case 5u:
        *v10 = *v11;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 8u:
        v13 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
        goto LABEL_16;
      case 9u:
        v14 = sub_23FB2C4B8();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *_s6UpdateVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for AST.FlatValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 9)
  {
    v9 = sub_23FB2C4B8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 8)
  {
    v8 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_5:
    swift_storeEnumTagMultiPayload();
    goto LABEL_7;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_7:
  v10 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  a1[v10] = a2[v10];
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 9)
  {
    v16 = sub_23FB2C4B8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v12, v13, v16);
  }
  else
  {
    if (v14 != 8)
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      return a1;
    }
    v15 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *_s6UpdateVwta(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for AST.FlatValue);
    v6 = type metadata accessor for AST.FlatValue(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 9)
    {
      v9 = sub_23FB2C4B8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      goto LABEL_6;
    }
    if (EnumCaseMultiPayload == 8)
    {
      v8 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      goto LABEL_8;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_8:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_bridgeObjectRelease();
  a1[a3[6]] = a2[a3[6]];
  if (a1 != a2)
  {
    v10 = a3[7];
    v11 = &a1[v10];
    v12 = &a2[v10];
    sub_23F6D3508((uint64_t)&a1[v10], type metadata accessor for AST.FlatValue);
    v13 = type metadata accessor for AST.FlatValue(0);
    v14 = swift_getEnumCaseMultiPayload();
    if (v14 == 9)
    {
      v16 = sub_23FB2C4B8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    }
    else
    {
      if (v14 != 8)
      {
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        return a1;
      }
      v15 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v11, v12, v15);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s6UpdateVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F72BC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for AST.FlatValue(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_23F6F07D0(a1, a2, v6);
  }
  else
  {
    sub_23F6F083C(*(_QWORD *)(a1 + *(int *)(a3 + 20)));
    sub_23F694C84();
  }
}

uint64_t _s6UpdateVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F72BCD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = type metadata accessor for AST.FlatValue(0);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    sub_23F6F07C4(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    sub_23F694C84();
  }
}

uint64_t sub_23F72BD34()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AST.FlatValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PiranaHelper()
{
  return &type metadata for PiranaHelper;
}

uint64_t _s6UpdateV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23F72BE10 + 4 * byte_23FB56E4F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23F72BE44 + 4 * byte_23FB56E4A[v4]))();
}

uint64_t sub_23F72BE44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72BE4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F72BE54);
  return result;
}

uint64_t sub_23F72BE60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F72BE68);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23F72BE6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72BE74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6UpdateV10CodingKeysOMa()
{
  return &_s6UpdateV10CodingKeysON;
}

uint64_t _s8FlatExprO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 19) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v5 = v6 - 20;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s8FlatExprO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_23F72BF64 + 4 * byte_23FB56E59[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_23F72BF98 + 4 * byte_23FB56E54[v4]))();
}

uint64_t sub_23F72BF98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72BFA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F72BFA8);
  return result;
}

uint64_t sub_23F72BFB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F72BFBCLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_23F72BFC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72BFC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8FlatExprO10CodingKeysOMa()
{
  return &_s8FlatExprO10CodingKeysON;
}

ValueMetadata *_s8FlatExprO15ValueCodingKeysOMa()
{
  return &_s8FlatExprO15ValueCodingKeysON;
}

ValueMetadata *_s8FlatExprO16PrefixCodingKeysOMa()
{
  return &_s8FlatExprO16PrefixCodingKeysON;
}

ValueMetadata *_s8FlatExprO15InfixCodingKeysOMa()
{
  return &_s8FlatExprO15InfixCodingKeysON;
}

ValueMetadata *_s8FlatExprO13DotCodingKeysOMa()
{
  return &_s8FlatExprO13DotCodingKeysON;
}

ValueMetadata *_s8FlatExprO15IndexCodingKeysOMa()
{
  return &_s8FlatExprO15IndexCodingKeysON;
}

ValueMetadata *_s8FlatExprO26UpdateParametersCodingKeysOMa()
{
  return &_s8FlatExprO26UpdateParametersCodingKeysON;
}

ValueMetadata *_s8FlatExprO14CallCodingKeysOMa()
{
  return &_s8FlatExprO14CallCodingKeysON;
}

ValueMetadata *_s8FlatExprO13SayCodingKeysOMa()
{
  return &_s8FlatExprO13SayCodingKeysON;
}

ValueMetadata *_s8FlatExprO14PickCodingKeysOMa()
{
  return &_s8FlatExprO14PickCodingKeysON;
}

ValueMetadata *_s8FlatExprO17ConfirmCodingKeysOMa()
{
  return &_s8FlatExprO17ConfirmCodingKeysON;
}

uint64_t _s8FlatExprO15InfixCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F72C0E0 + 4 * byte_23FB56E63[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F72C114 + 4 * byte_23FB56E5E[v4]))();
}

uint64_t sub_23F72C114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72C11C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F72C124);
  return result;
}

uint64_t sub_23F72C130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F72C138);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23F72C13C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72C144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8FlatExprO16SearchCodingKeysOMa()
{
  return &_s8FlatExprO16SearchCodingKeysON;
}

ValueMetadata *_s8FlatExprO17PickOneCodingKeysOMa()
{
  return &_s8FlatExprO17PickOneCodingKeysON;
}

ValueMetadata *_s8FlatExprO21ResolveToolCodingKeysOMa()
{
  return &_s8FlatExprO21ResolveToolCodingKeysON;
}

ValueMetadata *_s8FlatExprO24NoMatchingToolCodingKeysOMa()
{
  return &_s8FlatExprO24NoMatchingToolCodingKeysON;
}

ValueMetadata *_s8FlatExprO14UndoCodingKeysOMa()
{
  return &_s8FlatExprO14UndoCodingKeysON;
}

ValueMetadata *_s8FlatExprO16RejectCodingKeysOMa()
{
  return &_s8FlatExprO16RejectCodingKeysON;
}

ValueMetadata *_s8FlatExprO16CancelCodingKeysOMa()
{
  return &_s8FlatExprO16CancelCodingKeysON;
}

ValueMetadata *_s8FlatExprO26GetMentionedAppsCodingKeysOMa()
{
  return &_s8FlatExprO26GetMentionedAppsCodingKeysON;
}

ValueMetadata *_s8FlatExprO19EndOfPlanCodingKeysOMa()
{
  return &_s8FlatExprO19EndOfPlanCodingKeysON;
}

ValueMetadata *_s8FlatExprO26ContinuePlanningCodingKeysOMa()
{
  return &_s8FlatExprO26ContinuePlanningCodingKeysON;
}

uint64_t _s9FlatValueO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 10) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v5 = v6 - 11;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s9FlatValueO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23F72C2C4 + 4 * byte_23FB56E6D[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23F72C2F8 + 4 * byte_23FB56E68[v4]))();
}

uint64_t sub_23F72C2F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72C300(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F72C308);
  return result;
}

uint64_t sub_23F72C314(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F72C31CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23F72C320(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72C328(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s9FlatValueO10CodingKeysOMa()
{
  return &_s9FlatValueO10CodingKeysON;
}

ValueMetadata *_s9FlatValueO14NullCodingKeysOMa()
{
  return &_s9FlatValueO14NullCodingKeysON;
}

ValueMetadata *_s9FlatValueO14BoolCodingKeysOMa()
{
  return &_s9FlatValueO14BoolCodingKeysON;
}

ValueMetadata *_s9FlatValueO13IntCodingKeysOMa()
{
  return &_s9FlatValueO13IntCodingKeysON;
}

ValueMetadata *_s9FlatValueO16DoubleCodingKeysOMa()
{
  return &_s9FlatValueO16DoubleCodingKeysON;
}

ValueMetadata *_s9FlatValueO16StringCodingKeysOMa()
{
  return &_s9FlatValueO16StringCodingKeysON;
}

ValueMetadata *_s9FlatValueO15ArrayCodingKeysOMa()
{
  return &_s9FlatValueO15ArrayCodingKeysON;
}

ValueMetadata *_s9FlatValueO14DictCodingKeysOMa()
{
  return &_s9FlatValueO14DictCodingKeysON;
}

ValueMetadata *_s9FlatValueO16SymbolCodingKeysOMa()
{
  return &_s9FlatValueO16SymbolCodingKeysON;
}

ValueMetadata *_s9FlatValueO18VariableCodingKeysOMa()
{
  return &_s9FlatValueO18VariableCodingKeysON;
}

ValueMetadata *_s9FlatValueO19StatementCodingKeysOMa()
{
  return &_s9FlatValueO19StatementCodingKeysON;
}

uint64_t _s8FlatExprO15ValueCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F72C424 + 4 * byte_23FB56E72[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F72C444 + 4 * byte_23FB56E77[v4]))();
}

_BYTE *sub_23F72C424(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F72C444(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F72C44C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F72C454(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F72C45C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F72C464(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s9FlatValueO20IdentifierCodingKeysOMa()
{
  return &_s9FlatValueO20IdentifierCodingKeysON;
}

uint64_t _s8FlatExprO16PrefixCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F72C4CC + 4 * byte_23FB56E81[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F72C500 + 4 * byte_23FB56E7C[v4]))();
}

uint64_t sub_23F72C500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72C508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F72C510);
  return result;
}

uint64_t sub_23F72C51C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F72C524);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F72C528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F72C530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14FlatAssignExprV10CodingKeysOMa()
{
  return &_s14FlatAssignExprV10CodingKeysON;
}

unint64_t sub_23F72C550()
{
  unint64_t result;

  result = qword_256EA6C30;
  if (!qword_256EA6C30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57648, &_s14FlatAssignExprV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C30);
  }
  return result;
}

unint64_t sub_23F72C590()
{
  unint64_t result;

  result = qword_256EA6C38;
  if (!qword_256EA6C38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57700, &_s9FlatValueO20IdentifierCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C38);
  }
  return result;
}

unint64_t sub_23F72C5D0()
{
  unint64_t result;

  result = qword_256EA6C40;
  if (!qword_256EA6C40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB577B8, &_s9FlatValueO19StatementCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C40);
  }
  return result;
}

unint64_t sub_23F72C610()
{
  unint64_t result;

  result = qword_256EA6C48;
  if (!qword_256EA6C48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57870, &_s9FlatValueO18VariableCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C48);
  }
  return result;
}

unint64_t sub_23F72C650()
{
  unint64_t result;

  result = qword_256EA6C50;
  if (!qword_256EA6C50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57928, &_s9FlatValueO16SymbolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C50);
  }
  return result;
}

unint64_t sub_23F72C690()
{
  unint64_t result;

  result = qword_256EA6C58;
  if (!qword_256EA6C58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB579E0, &_s9FlatValueO14DictCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C58);
  }
  return result;
}

unint64_t sub_23F72C6D0()
{
  unint64_t result;

  result = qword_256EA6C60;
  if (!qword_256EA6C60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57A98, &_s9FlatValueO15ArrayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C60);
  }
  return result;
}

unint64_t sub_23F72C710()
{
  unint64_t result;

  result = qword_256EA6C68;
  if (!qword_256EA6C68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57B50, &_s9FlatValueO16StringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C68);
  }
  return result;
}

unint64_t sub_23F72C750()
{
  unint64_t result;

  result = qword_256EA6C70;
  if (!qword_256EA6C70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57C08, &_s9FlatValueO16DoubleCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C70);
  }
  return result;
}

unint64_t sub_23F72C790()
{
  unint64_t result;

  result = qword_256EA6C78;
  if (!qword_256EA6C78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57CC0, &_s9FlatValueO13IntCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C78);
  }
  return result;
}

unint64_t sub_23F72C7D0()
{
  unint64_t result;

  result = qword_256EA6C80;
  if (!qword_256EA6C80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57D78, &_s9FlatValueO14BoolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C80);
  }
  return result;
}

unint64_t sub_23F72C810()
{
  unint64_t result;

  result = qword_256EA6C88;
  if (!qword_256EA6C88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57E80, &_s9FlatValueO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C88);
  }
  return result;
}

unint64_t sub_23F72C850()
{
  unint64_t result;

  result = qword_256EA6C90;
  if (!qword_256EA6C90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58028, &_s8FlatExprO16CancelCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C90);
  }
  return result;
}

unint64_t sub_23F72C890()
{
  unint64_t result;

  result = qword_256EA6C98;
  if (!qword_256EA6C98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB580E0, &_s8FlatExprO16RejectCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6C98);
  }
  return result;
}

unint64_t sub_23F72C8D0()
{
  unint64_t result;

  result = qword_256EA6CA0;
  if (!qword_256EA6CA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58198, &_s8FlatExprO14UndoCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CA0);
  }
  return result;
}

unint64_t sub_23F72C910()
{
  unint64_t result;

  result = qword_256EA6CA8;
  if (!qword_256EA6CA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB582A0, &_s8FlatExprO21ResolveToolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CA8);
  }
  return result;
}

unint64_t sub_23F72C950()
{
  unint64_t result;

  result = qword_256EA6CB0;
  if (!qword_256EA6CB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58358, &_s8FlatExprO17PickOneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CB0);
  }
  return result;
}

unint64_t sub_23F72C990()
{
  unint64_t result;

  result = qword_256EA6CB8;
  if (!qword_256EA6CB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58410, &_s8FlatExprO16SearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CB8);
  }
  return result;
}

unint64_t sub_23F72C9D0()
{
  unint64_t result;

  result = qword_256EA6CC0;
  if (!qword_256EA6CC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB584C8, &_s8FlatExprO17ConfirmCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CC0);
  }
  return result;
}

unint64_t sub_23F72CA10()
{
  unint64_t result;

  result = qword_256EA6CC8;
  if (!qword_256EA6CC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58580, &_s8FlatExprO14PickCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CC8);
  }
  return result;
}

unint64_t sub_23F72CA50()
{
  unint64_t result;

  result = qword_256EA6CD0;
  if (!qword_256EA6CD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58638, &_s8FlatExprO13SayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CD0);
  }
  return result;
}

unint64_t sub_23F72CA90()
{
  unint64_t result;

  result = qword_256EA6CD8;
  if (!qword_256EA6CD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB586F0, &_s8FlatExprO14CallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CD8);
  }
  return result;
}

unint64_t sub_23F72CAD0()
{
  unint64_t result;

  result = qword_256EA6CE0;
  if (!qword_256EA6CE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB587A8, &_s8FlatExprO26UpdateParametersCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CE0);
  }
  return result;
}

unint64_t sub_23F72CB10()
{
  unint64_t result;

  result = qword_256EA6CE8;
  if (!qword_256EA6CE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58860, &_s8FlatExprO15IndexCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CE8);
  }
  return result;
}

unint64_t sub_23F72CB50()
{
  unint64_t result;

  result = qword_256EA6CF0;
  if (!qword_256EA6CF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58918, &_s8FlatExprO13DotCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CF0);
  }
  return result;
}

unint64_t sub_23F72CB90()
{
  unint64_t result;

  result = qword_256EA6CF8;
  if (!qword_256EA6CF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB589D0, &_s8FlatExprO15InfixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6CF8);
  }
  return result;
}

unint64_t sub_23F72CBD0()
{
  unint64_t result;

  result = qword_256EA6D00;
  if (!qword_256EA6D00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58A88, &_s8FlatExprO16PrefixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D00);
  }
  return result;
}

unint64_t sub_23F72CC10()
{
  unint64_t result;

  result = qword_256EA6D08;
  if (!qword_256EA6D08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58B40, &_s8FlatExprO15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D08);
  }
  return result;
}

unint64_t sub_23F72CC50()
{
  unint64_t result;

  result = qword_256EA6D10;
  if (!qword_256EA6D10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58BF8, &_s8FlatExprO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D10);
  }
  return result;
}

unint64_t sub_23F72CC90()
{
  unint64_t result;

  result = qword_256EA6D18;
  if (!qword_256EA6D18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58CB0, &_s6UpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D18);
  }
  return result;
}

unint64_t sub_23F72CCD0()
{
  unint64_t result;

  result = qword_256EA6D20;
  if (!qword_256EA6D20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58C20, &_s6UpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D20);
  }
  return result;
}

unint64_t sub_23F72CD10()
{
  unint64_t result;

  result = qword_256EA6D28;
  if (!qword_256EA6D28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58C48, &_s6UpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D28);
  }
  return result;
}

unint64_t sub_23F72CD50()
{
  unint64_t result;

  result = qword_256EA6D30;
  if (!qword_256EA6D30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58AB0, &_s8FlatExprO15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D30);
  }
  return result;
}

unint64_t sub_23F72CD90()
{
  unint64_t result;

  result = qword_256EA6D38;
  if (!qword_256EA6D38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58AD8, &_s8FlatExprO15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D38);
  }
  return result;
}

unint64_t sub_23F72CDD0()
{
  unint64_t result;

  result = qword_256EA6D40;
  if (!qword_256EA6D40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB589F8, &_s8FlatExprO16PrefixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D40);
  }
  return result;
}

unint64_t sub_23F72CE10()
{
  unint64_t result;

  result = qword_256EA6D48;
  if (!qword_256EA6D48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58A20, &_s8FlatExprO16PrefixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D48);
  }
  return result;
}

unint64_t sub_23F72CE50()
{
  unint64_t result;

  result = qword_256EA6D50;
  if (!qword_256EA6D50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58940, &_s8FlatExprO15InfixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D50);
  }
  return result;
}

unint64_t sub_23F72CE90()
{
  unint64_t result;

  result = qword_256EA6D58;
  if (!qword_256EA6D58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58968, &_s8FlatExprO15InfixCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D58);
  }
  return result;
}

unint64_t sub_23F72CED0()
{
  unint64_t result;

  result = qword_256EA6D60;
  if (!qword_256EA6D60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58888, &_s8FlatExprO13DotCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D60);
  }
  return result;
}

unint64_t sub_23F72CF10()
{
  unint64_t result;

  result = qword_256EA6D68;
  if (!qword_256EA6D68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB588B0, &_s8FlatExprO13DotCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D68);
  }
  return result;
}

unint64_t sub_23F72CF50()
{
  unint64_t result;

  result = qword_256EA6D70;
  if (!qword_256EA6D70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB587D0, &_s8FlatExprO15IndexCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D70);
  }
  return result;
}

unint64_t sub_23F72CF90()
{
  unint64_t result;

  result = qword_256EA6D78;
  if (!qword_256EA6D78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB587F8, &_s8FlatExprO15IndexCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D78);
  }
  return result;
}

unint64_t sub_23F72CFD0()
{
  unint64_t result;

  result = qword_256EA6D80;
  if (!qword_256EA6D80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58718, &_s8FlatExprO26UpdateParametersCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D80);
  }
  return result;
}

unint64_t sub_23F72D010()
{
  unint64_t result;

  result = qword_256EA6D88;
  if (!qword_256EA6D88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58740, &_s8FlatExprO26UpdateParametersCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D88);
  }
  return result;
}

unint64_t sub_23F72D050()
{
  unint64_t result;

  result = qword_256EA6D90;
  if (!qword_256EA6D90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58660, &_s8FlatExprO14CallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D90);
  }
  return result;
}

unint64_t sub_23F72D090()
{
  unint64_t result;

  result = qword_256EA6D98;
  if (!qword_256EA6D98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58688, &_s8FlatExprO14CallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6D98);
  }
  return result;
}

unint64_t sub_23F72D0D0()
{
  unint64_t result;

  result = qword_256EA6DA0;
  if (!qword_256EA6DA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB585A8, &_s8FlatExprO13SayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DA0);
  }
  return result;
}

unint64_t sub_23F72D110()
{
  unint64_t result;

  result = qword_256EA6DA8;
  if (!qword_256EA6DA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB585D0, &_s8FlatExprO13SayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DA8);
  }
  return result;
}

unint64_t sub_23F72D150()
{
  unint64_t result;

  result = qword_256EA6DB0;
  if (!qword_256EA6DB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB584F0, &_s8FlatExprO14PickCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DB0);
  }
  return result;
}

unint64_t sub_23F72D190()
{
  unint64_t result;

  result = qword_256EA6DB8;
  if (!qword_256EA6DB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58518, &_s8FlatExprO14PickCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DB8);
  }
  return result;
}

unint64_t sub_23F72D1D0()
{
  unint64_t result;

  result = qword_256EA6DC0;
  if (!qword_256EA6DC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58438, &_s8FlatExprO17ConfirmCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DC0);
  }
  return result;
}

unint64_t sub_23F72D210()
{
  unint64_t result;

  result = qword_256EA6DC8;
  if (!qword_256EA6DC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58460, &_s8FlatExprO17ConfirmCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DC8);
  }
  return result;
}

unint64_t sub_23F72D250()
{
  unint64_t result;

  result = qword_256EA6DD0;
  if (!qword_256EA6DD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58380, &_s8FlatExprO16SearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DD0);
  }
  return result;
}

unint64_t sub_23F72D290()
{
  unint64_t result;

  result = qword_256EA6DD8;
  if (!qword_256EA6DD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB583A8, &_s8FlatExprO16SearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DD8);
  }
  return result;
}

unint64_t sub_23F72D2D0()
{
  unint64_t result;

  result = qword_256EA6DE0;
  if (!qword_256EA6DE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB582C8, &_s8FlatExprO17PickOneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DE0);
  }
  return result;
}

unint64_t sub_23F72D310()
{
  unint64_t result;

  result = qword_256EA6DE8;
  if (!qword_256EA6DE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB582F0, &_s8FlatExprO17PickOneCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DE8);
  }
  return result;
}

unint64_t sub_23F72D350()
{
  unint64_t result;

  result = qword_256EA6DF0;
  if (!qword_256EA6DF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58210, &_s8FlatExprO21ResolveToolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DF0);
  }
  return result;
}

unint64_t sub_23F72D390()
{
  unint64_t result;

  result = qword_256EA6DF8;
  if (!qword_256EA6DF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58238, &_s8FlatExprO21ResolveToolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6DF8);
  }
  return result;
}

unint64_t sub_23F72D3D0()
{
  unint64_t result;

  result = qword_256EA6E00;
  if (!qword_256EA6E00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB581C0, &_s8FlatExprO24NoMatchingToolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E00);
  }
  return result;
}

unint64_t sub_23F72D410()
{
  unint64_t result;

  result = qword_256EA6E08;
  if (!qword_256EA6E08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB581E8, &_s8FlatExprO24NoMatchingToolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E08);
  }
  return result;
}

unint64_t sub_23F72D450()
{
  unint64_t result;

  result = qword_256EA6E10;
  if (!qword_256EA6E10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58108, &_s8FlatExprO14UndoCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E10);
  }
  return result;
}

unint64_t sub_23F72D490()
{
  unint64_t result;

  result = qword_256EA6E18;
  if (!qword_256EA6E18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58130, &_s8FlatExprO14UndoCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E18);
  }
  return result;
}

unint64_t sub_23F72D4D0()
{
  unint64_t result;

  result = qword_256EA6E20;
  if (!qword_256EA6E20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58050, &_s8FlatExprO16RejectCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E20);
  }
  return result;
}

unint64_t sub_23F72D510()
{
  unint64_t result;

  result = qword_256EA6E28;
  if (!qword_256EA6E28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58078, &_s8FlatExprO16RejectCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E28);
  }
  return result;
}

unint64_t sub_23F72D550()
{
  unint64_t result;

  result = qword_256EA6E30;
  if (!qword_256EA6E30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57F98, &_s8FlatExprO16CancelCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E30);
  }
  return result;
}

unint64_t sub_23F72D590()
{
  unint64_t result;

  result = qword_256EA6E38;
  if (!qword_256EA6E38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57FC0, &_s8FlatExprO16CancelCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E38);
  }
  return result;
}

unint64_t sub_23F72D5D0()
{
  unint64_t result;

  result = qword_256EA6E40;
  if (!qword_256EA6E40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57F48, &_s8FlatExprO26GetMentionedAppsCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E40);
  }
  return result;
}

unint64_t sub_23F72D610()
{
  unint64_t result;

  result = qword_256EA6E48;
  if (!qword_256EA6E48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57F70, &_s8FlatExprO26GetMentionedAppsCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E48);
  }
  return result;
}

unint64_t sub_23F72D650()
{
  unint64_t result;

  result = qword_256EA6E50;
  if (!qword_256EA6E50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57EF8, &_s8FlatExprO19EndOfPlanCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E50);
  }
  return result;
}

unint64_t sub_23F72D690()
{
  unint64_t result;

  result = qword_256EA6E58;
  if (!qword_256EA6E58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57F20, &_s8FlatExprO19EndOfPlanCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E58);
  }
  return result;
}

unint64_t sub_23F72D6D0()
{
  unint64_t result;

  result = qword_256EA6E60;
  if (!qword_256EA6E60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57EA8, &_s8FlatExprO26ContinuePlanningCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E60);
  }
  return result;
}

unint64_t sub_23F72D710()
{
  unint64_t result;

  result = qword_256EA6E68;
  if (!qword_256EA6E68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57ED0, &_s8FlatExprO26ContinuePlanningCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E68);
  }
  return result;
}

unint64_t sub_23F72D750()
{
  unint64_t result;

  result = qword_256EA6E70;
  if (!qword_256EA6E70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58B68, &_s8FlatExprO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E70);
  }
  return result;
}

unint64_t sub_23F72D790()
{
  unint64_t result;

  result = qword_256EA6E78;
  if (!qword_256EA6E78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB58B90, &_s8FlatExprO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E78);
  }
  return result;
}

unint64_t sub_23F72D7D0()
{
  unint64_t result;

  result = qword_256EA6E80;
  if (!qword_256EA6E80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57DA0, &_s9FlatValueO14NullCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E80);
  }
  return result;
}

unint64_t sub_23F72D810()
{
  unint64_t result;

  result = qword_256EA6E88;
  if (!qword_256EA6E88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57DC8, &_s9FlatValueO14NullCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E88);
  }
  return result;
}

unint64_t sub_23F72D850()
{
  unint64_t result;

  result = qword_256EA6E90;
  if (!qword_256EA6E90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57CE8, &_s9FlatValueO14BoolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E90);
  }
  return result;
}

unint64_t sub_23F72D890()
{
  unint64_t result;

  result = qword_256EA6E98;
  if (!qword_256EA6E98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57D10, &_s9FlatValueO14BoolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6E98);
  }
  return result;
}

unint64_t sub_23F72D8D0()
{
  unint64_t result;

  result = qword_256EA6EA0;
  if (!qword_256EA6EA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57C30, &_s9FlatValueO13IntCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EA0);
  }
  return result;
}

unint64_t sub_23F72D910()
{
  unint64_t result;

  result = qword_256EA6EA8;
  if (!qword_256EA6EA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57C58, &_s9FlatValueO13IntCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EA8);
  }
  return result;
}

unint64_t sub_23F72D950()
{
  unint64_t result;

  result = qword_256EA6EB0;
  if (!qword_256EA6EB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57B78, &_s9FlatValueO16DoubleCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EB0);
  }
  return result;
}

unint64_t sub_23F72D990()
{
  unint64_t result;

  result = qword_256EA6EB8;
  if (!qword_256EA6EB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57BA0, &_s9FlatValueO16DoubleCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EB8);
  }
  return result;
}

unint64_t sub_23F72D9D0()
{
  unint64_t result;

  result = qword_256EA6EC0;
  if (!qword_256EA6EC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57AC0, &_s9FlatValueO16StringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EC0);
  }
  return result;
}

unint64_t sub_23F72DA10()
{
  unint64_t result;

  result = qword_256EA6EC8;
  if (!qword_256EA6EC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57AE8, &_s9FlatValueO16StringCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EC8);
  }
  return result;
}

unint64_t sub_23F72DA50()
{
  unint64_t result;

  result = qword_256EA6ED0;
  if (!qword_256EA6ED0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57A08, &_s9FlatValueO15ArrayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6ED0);
  }
  return result;
}

unint64_t sub_23F72DA90()
{
  unint64_t result;

  result = qword_256EA6ED8;
  if (!qword_256EA6ED8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57A30, &_s9FlatValueO15ArrayCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6ED8);
  }
  return result;
}

unint64_t sub_23F72DAD0()
{
  unint64_t result;

  result = qword_256EA6EE0;
  if (!qword_256EA6EE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57950, &_s9FlatValueO14DictCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EE0);
  }
  return result;
}

unint64_t sub_23F72DB10()
{
  unint64_t result;

  result = qword_256EA6EE8;
  if (!qword_256EA6EE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57978, &_s9FlatValueO14DictCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EE8);
  }
  return result;
}

unint64_t sub_23F72DB50()
{
  unint64_t result;

  result = qword_256EA6EF0;
  if (!qword_256EA6EF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57898, &_s9FlatValueO16SymbolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EF0);
  }
  return result;
}

unint64_t sub_23F72DB90()
{
  unint64_t result;

  result = qword_256EA6EF8;
  if (!qword_256EA6EF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB578C0, &_s9FlatValueO16SymbolCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6EF8);
  }
  return result;
}

unint64_t sub_23F72DBD0()
{
  unint64_t result;

  result = qword_256EA6F00;
  if (!qword_256EA6F00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB577E0, &_s9FlatValueO18VariableCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F00);
  }
  return result;
}

unint64_t sub_23F72DC10()
{
  unint64_t result;

  result = qword_256EA6F08;
  if (!qword_256EA6F08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57808, &_s9FlatValueO18VariableCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F08);
  }
  return result;
}

unint64_t sub_23F72DC50()
{
  unint64_t result;

  result = qword_256EA6F10;
  if (!qword_256EA6F10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57728, &_s9FlatValueO19StatementCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F10);
  }
  return result;
}

unint64_t sub_23F72DC90()
{
  unint64_t result;

  result = qword_256EA6F18;
  if (!qword_256EA6F18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57750, &_s9FlatValueO19StatementCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F18);
  }
  return result;
}

unint64_t sub_23F72DCD0()
{
  unint64_t result;

  result = qword_256EA6F20;
  if (!qword_256EA6F20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57670, &_s9FlatValueO20IdentifierCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F20);
  }
  return result;
}

unint64_t sub_23F72DD10()
{
  unint64_t result;

  result = qword_256EA6F28;
  if (!qword_256EA6F28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57698, &_s9FlatValueO20IdentifierCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F28);
  }
  return result;
}

unint64_t sub_23F72DD50()
{
  unint64_t result;

  result = qword_256EA6F30;
  if (!qword_256EA6F30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57DF0, &_s9FlatValueO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F30);
  }
  return result;
}

unint64_t sub_23F72DD90()
{
  unint64_t result;

  result = qword_256EA6F38;
  if (!qword_256EA6F38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB57E18, &_s9FlatValueO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F38);
  }
  return result;
}

unint64_t sub_23F72DDD0()
{
  unint64_t result;

  result = qword_256EA6F40;
  if (!qword_256EA6F40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB575B8, &_s14FlatAssignExprV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA6F40);
  }
  return result;
}

unint64_t sub_23F72DE10()
{
  unint64_t result;

  result = qword_256EA6F48;
  if (!qword_256EA6F48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB575E0, &_s14FlatAssignExprV10CodingKeysON);
    atomic_store(result, &qword_256EA6F48);
  }
  return result;
}

void sub_23F72DE4C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_23F72DE5C()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F72DE74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_23F72DE88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_23F72DE98()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F72DEB4()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F72DEC8()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F72DED4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 144) + 8))(*(_QWORD *)(v1 - 104), v0);
}

uint64_t sub_23F72DEE8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 144) + 8))(*(_QWORD *)(v1 - 120), v0);
}

uint64_t sub_23F72DEFC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23F72DF08()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F72DF14()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F72DF24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_23F72DF38()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F72DF40()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 184) + 32))(*(_QWORD *)(v1 - 192), v0, *(_QWORD *)(v1 - 176));
}

uint64_t sub_23F72DF5C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 144) + 8))(*(_QWORD *)(v1 - 104), v0);
}

uint64_t sub_23F72DF70()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F72DF7C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F72DF8C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 96);
}

uint64_t sub_23F72DF98@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_23F72DFAC()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F72DFBC()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23F72DFC4()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F72DFCC()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F72DFE0()
{
  return swift_getEnumCaseMultiPayload();
}

void sub_23F72DFE8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F594C(a1, a2, v2);
}

void sub_23F72DFF0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_23F6F5920(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
}

uint64_t sub_23F72E014()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F72E028()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F72E034()
{
  return sub_23FB2C4B8();
}

uint64_t sub_23F72E03C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E04C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 88);
}

uint64_t sub_23F72E058()
{
  uint64_t v0;

  return v0;
}

void sub_23F72E068(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F6F5920(a1, v3, a3);
}

uint64_t sub_23F72E070()
{
  return sub_23FB2FA40();
}

uint64_t sub_23F72E07C()
{
  return sub_23FB2F80C();
}

uint64_t sub_23F72E098()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23F72E0A4()
{
  return sub_23FB2FAA0();
}

void sub_23F72E0C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F6F5920(a1, v3, a3);
}

uint64_t sub_23F72E0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_23F72E0D0()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F72E0DC()
{
  return sub_23FB2C764();
}

uint64_t sub_23F72E0F8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 112);
}

uint64_t sub_23F72E108()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23F72E118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 - 256);
  *v2 = a1;
  return v2;
}

uint64_t sub_23F72E12C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 704) + 8))(v0, v1);
}

uint64_t sub_23F72E144()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E150()
{
  return sub_23FB2F110();
}

uint64_t sub_23F72E178()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 34;
  *(_QWORD *)(v0 - 104) = 0xE100000000000000;
  return sub_23FB2F254();
}

uint64_t sub_23F72E1B8()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F72E1D0()
{
  return sub_23FB2F254();
}

void sub_23F72E1DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F6F5920(a1, v3, a3);
}

void sub_23F72E1E4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F594C(a1, a2, v2);
}

uint64_t sub_23F72E1EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  *(_QWORD *)(v1 - 104) = 0xE100000000000000;
  return sub_23FB2F254();
}

uint64_t sub_23F72E200()
{
  return sub_23FB2FADC();
}

uint64_t sub_23F72E20C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E218()
{
  return type metadata accessor for AST.FlatValue(0);
}

uint64_t sub_23F72E220()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E230()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23F72E240@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 - 256);
  *v2 = a1;
  return v2;
}

uint64_t sub_23F72E258()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E268()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

uint64_t sub_23F72E278()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v2);
}

uint64_t sub_23F72E2C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 104);
  *(_QWORD *)(v0 - 112) = *(_QWORD *)(v0 - 112);
  *(_QWORD *)(v0 - 104) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F72E2D0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t sub_23F72E2E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E2F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F72E308()
{
  return type metadata accessor for AST.FlatAssignExpr(0);
}

uint64_t sub_23F72E324()
{
  return type metadata accessor for AST.FlatExpr(0);
}

void sub_23F72E32C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F6F5920(a1, v3, a3);
}

void sub_23F72E334()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
}

void sub_23F72E344()
{
  AST.FlatValue.description.getter();
}

uint64_t sub_23F72E34C()
{
  return type metadata accessor for AST.Update(0);
}

uint64_t sub_23F72E358()
{
  return sub_23FB2FA4C();
}

uint64_t sub_23F72E370()
{
  return sub_23FB2F8FC();
}

uint64_t sub_23F72E388()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F72E394()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23F72E3A0()
{
  return 47;
}

void sub_23F72E3B4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 256) = v1;
}

void sub_23F72E3C8()
{
  JUMPOUT(0x242674E5CLL);
}

uint64_t sub_23F72E3D4()
{
  return sub_23FB2F254();
}

void sub_23F72E3EC()
{
  static AST.FlatValue.== infix(_:_:)();
}

uint64_t sub_23F72E3F8()
{
  uint64_t v0;

  return v0;
}

void sub_23F72E404(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(v2, a2);
}

void sub_23F72E40C(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 104) = a1;
}

uint64_t sub_23F72E424()
{
  uint64_t v0;

  return v0 - 104;
}

uint64_t sub_23F72E430()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23F72E43C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23F6ADC98(v0, v1);
  return sub_23F722BA4();
}

unint64_t sub_23F72E458()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 9;
  return sub_23F722738();
}

uint64_t sub_23F72E464()
{
  return type metadata accessor for AST.Update(0);
}

unint64_t sub_23F72E470()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 10;
  return sub_23F7226FC();
}

uint64_t sub_23F72E47C()
{
  uint64_t v0;

  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(*(_QWORD *)(v0 - 104));
}

unint64_t sub_23F72E490()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 8;
  return sub_23F722774();
}

uint64_t sub_23F72E49C()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23F72E4A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 - 256);
  *v3 = v1;
  v3[1] = v2;
  return v3;
}

uint64_t sub_23F72E4BC()
{
  uint64_t *v0;

  return sub_23F6916B8(v0);
}

unint64_t sub_23F72E4C4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 7;
  return sub_23F7227B0();
}

unint64_t sub_23F72E4D0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 1;
  return sub_23F722A18();
}

void sub_23F72E4DC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
}

unint64_t sub_23F72E4E8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 6;
  return sub_23F7227EC();
}

unint64_t sub_23F72E4F4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 5;
  return sub_23F7228AC();
}

unint64_t sub_23F72E500()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 4;
  return sub_23F722964();
}

unint64_t sub_23F72E50C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 3;
  return sub_23F7229A0();
}

unint64_t sub_23F72E518()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 2;
  return sub_23F7229DC();
}

uint64_t sub_23F72E524()
{
  return sub_23FB2F254();
}

uint64_t sub_23F72E544(unint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = (unint64_t)v2;
  v53 = a2;
  v5 = sub_23FB2ED38();
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    v7 = sub_23FB2F974();
    if (v7)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    return swift_bridgeObjectRelease();
LABEL_3:
  v45 = v3;
  v54 = a1 & 0xC000000000000001;
  v50 = *MEMORY[0x24BEB9958];
  v49 = *MEMORY[0x24BEB9A00];
  v8 = 4;
  v47 = v5;
  v48 = a1;
  v46 = v7;
  while (1)
  {
    v3 = v8 - 4;
    if (v54)
      v9 = (id)MEMORY[0x242674478](v8 - 4, a1);
    else
      v9 = *(id *)(a1 + 8 * v8);
    v10 = v9;
    v11 = v8 - 3;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v55 = sub_23F6B902C(v9, (SEL *)&selRef_predicateId);
    if (!v12)
    {

      goto LABEL_28;
    }
    v13 = v12;
    v14 = sub_23F6B902C(v10, (SEL *)&selRef_objectID);
    if (!v15)
    {

      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    v16 = v14;
    v17 = v15;
    v18 = sub_23FB2ECE4();
    v19 = swift_allocBox();
    *v20 = v16;
    v20[1] = v17;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, v50, v18);
    v21 = v52;
    *v51 = v19;
    (*(void (**)(void))(v21 + 104))();
    v3 = (unint64_t)v53;
    swift_isUniquelyReferenced_nonNull_native();
    v56 = *(_QWORD *)v3;
    v22 = v56;
    *(_QWORD *)v3 = 0x8000000000000000;
    v23 = sub_23F78C6DC();
    v25 = *(_QWORD *)(v22 + 16);
    v26 = (v24 & 1) == 0;
    a1 = v25 + v26;
    if (__OFADD__(v25, v26))
      goto LABEL_31;
    v3 = v23;
    v5 = v24;
    sub_23F6916B8(&qword_256EA7088);
    v27 = sub_23FB2F914();
    v28 = v56;
    if ((v27 & 1) != 0)
      break;
LABEL_14:
    v31 = v53;
    *v53 = v28;
    swift_bridgeObjectRelease();
    v32 = (_QWORD *)*v31;
    if ((v5 & 1) == 0)
    {
      v32[(v3 >> 6) + 8] |= 1 << v3;
      v33 = (uint64_t *)(v32[6] + 16 * v3);
      *v33 = v55;
      v33[1] = v13;
      *(_QWORD *)(v32[7] + 8 * v3) = MEMORY[0x24BEE4AF8];
      v34 = v32[2];
      v35 = v34 + 1;
      v36 = __OFADD__(v34, 1);
      swift_bridgeObjectRetain();
      if (v36)
        goto LABEL_32;
      v32[2] = v35;
    }
    swift_bridgeObjectRetain();
    v37 = v32[7];
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)(v37 + 8 * v3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v37 + 8 * v3) = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23F753FC4();
      v38 = v42;
      *(_QWORD *)(v37 + 8 * v3) = v42;
    }
    v40 = *(_QWORD *)(v38 + 16);
    if (v40 >= *(_QWORD *)(v38 + 24) >> 1)
    {
      sub_23F753FC4();
      v38 = v43;
      *(_QWORD *)(v37 + 8 * v3) = v43;
    }
    *(_QWORD *)(v38 + 16) = v40 + 1;
    v41 = v38
        + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
        + *(_QWORD *)(v52 + 72) * v40;
    v5 = v47;
    a1 = v48;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v52 + 32))(v41, v51, v47);

    swift_bridgeObjectRelease();
    v7 = v46;
LABEL_28:
    ++v8;
    if (v11 == v7)
      return swift_bridgeObjectRelease();
  }
  v29 = sub_23F78C6DC();
  if ((v5 & 1) == (v30 & 1))
  {
    v3 = v29;
    goto LABEL_14;
  }
  result = sub_23FB2FBD8();
  __break(1u);
  return result;
}

uint64_t sub_23F72E920(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  sub_23F78F084(a1, v19);
  v3 = v19[0];
  v4 = v19[1];
  v5 = v19[3];
  v6 = v19[4];
  v7 = (unint64_t)(v19[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_3;
LABEL_2:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v5 << 6);
  while (1)
  {
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v16, v17, v18);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_2;
LABEL_3:
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v4 + 8 * v11);
    v13 = v5 + 1;
    if (!v12)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (!v12)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v4 + 8 * v13);
        if (!v12)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v4 + 8 * v13);
          if (!v12)
          {
            v13 = v5 + 5;
            if (v5 + 5 >= v7)
              return swift_release();
            v12 = *(_QWORD *)(v4 + 8 * v13);
            if (!v12)
            {
              v14 = v5 + 6;
              while (v14 < v7)
              {
                v12 = *(_QWORD *)(v4 + 8 * v14++);
                if (v12)
                {
                  v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v5 = v13;
  }
  __break(1u);
  return result;
}

unint64_t sub_23F72EAA0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_QWORD *)(swift_bridgeObjectRetain() + 40);
    v3 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      result = *(v2 - 1);
      if (*v2 >> 14 < result >> 14)
        break;
      v5 = sub_23FB2F2F0();
      v6 = MEMORY[0x242673E24](v5);
      v8 = v7;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F753B48();
        v3 = v11;
      }
      v9 = *(_QWORD *)(v3 + 16);
      if (v9 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_23F753B48();
        v3 = v12;
      }
      v2 += 2;
      *(_QWORD *)(v3 + 16) = v9 + 1;
      v10 = v3 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v6;
      *(_QWORD *)(v10 + 40) = v8;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_23F72EBEC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_23FB2F974())
  {
    v23 = v3 & 0xC000000000000001;
    v5 = MEMORY[0x24BEE4AF8];
    v6 = 4;
    v21 = v3;
    v22 = v4;
    while (1)
    {
      v7 = v23 ? (id)MEMORY[0x242674478](v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v10 = sub_23F7302E0(v7, a3);
      if (v11)
      {
        v13 = v10;
        v14 = v11;
        v15 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F753C44();
          v5 = v18;
        }
        v16 = *(_QWORD *)(v5 + 16);
        if (v16 >= *(_QWORD *)(v5 + 24) >> 1)
        {
          sub_23F753C44();
          v5 = v19;
        }
        *(_QWORD *)(v5 + 16) = v16 + 1;
        v17 = (_QWORD *)(v5 + 32 * v16);
        v17[4] = v8;
        v17[5] = v13;
        v17[6] = v14;
        v17[7] = v15;
        v3 = v21;
      }
      else
      {

      }
      ++v6;
      if (v9 == v22)
        goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v5 = MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23F72ED98(uint64_t a1, void (*a2)(id, uint64_t, uint64_t, double))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(id, uint64_t, uint64_t, double);

  v28 = a2;
  v4 = sub_23F6916B8(&qword_256EA7090);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23FB2DE8C();
  v27 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v26 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v25 = (char *)v24 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return MEMORY[0x24BEE4AF8];
  v24[1] = v2;
  swift_bridgeObjectRetain();
  v24[0] = a1;
  v12 = (double *)(a1 + 56);
  v13 = MEMORY[0x24BEE4AF8];
  do
  {
    v14 = *v12;
    v15 = *((_QWORD *)v12 - 2);
    v16 = *((_QWORD *)v12 - 1);
    v17 = *((id *)v12 - 3);
    swift_bridgeObjectRetain();
    v28(v17, v15, v16, v14);
    swift_bridgeObjectRelease();

    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v6, 1, v7) == 1)
    {
      sub_23F731C9C((uint64_t)v6, &qword_256EA7090);
    }
    else
    {
      v18 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
      v19 = v25;
      v18(v25, v6, v7);
      v18(v26, v19, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F753C1C();
        v13 = v21;
      }
      v20 = *(_QWORD *)(v13 + 16);
      if (v20 >= *(_QWORD *)(v13 + 24) >> 1)
      {
        sub_23F753C1C();
        v13 = v22;
      }
      *(_QWORD *)(v13 + 16) = v20 + 1;
      v18((char *)(v13+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v20), v26, v7);
    }
    v12 += 4;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_23F72EFFC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v6 = sub_23FB2F974();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v8 = 4;
    v24 = a3;
    v25 = a2;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x242674478](v8 - 4, a1);
      else
        v9 = *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      v12 = sub_23F6B902C(v9, (SEL *)&selRef_predicateId);
      if (v13)
        break;

LABEL_25:
      ++v8;
      if (v11 == v6)
        goto LABEL_26;
    }
    if (v12 == a2 && v13 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = sub_23FB2FB78();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {

LABEL_24:
        a2 = v25;
        goto LABEL_25;
      }
    }
    v16 = sub_23F6B902C(v10, (SEL *)&selRef_objectID);
    v18 = v17;

    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F753B48();
        v7 = v21;
      }
      v19 = *(_QWORD *)(v7 + 16);
      if (v19 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_23F753B48();
        v7 = v22;
      }
      *(_QWORD *)(v7 + 16) = v19 + 1;
      v20 = v7 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v16;
      *(_QWORD *)(v20 + 40) = v18;
      a3 = v24;
    }
    goto LABEL_24;
  }
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_23F72F1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_release();
    v6 = MEMORY[0x24BEE4AF8];
    goto LABEL_16;
  }
  v5 = swift_bridgeObjectRetain() + 40;
  v6 = MEMORY[0x24BEE4AF8];
  do
  {
    v7 = sub_23FB2F080();
    v9 = v8;
    swift_bridgeObjectRetain();
    sub_23F730844(v7, v9);
    v11 = v10;
    v12 = swift_bridgeObjectRetain();
    v13 = sub_23F7A3590(v12);
    v14 = sub_23F7A3590(v11);
    v15 = sub_23F7314AC(v14, v13);
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 16);
    swift_release();
    v17 = (double)v16 / (double)*(uint64_t *)(a3 + 16);
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v17 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    if (v17 <= 0.0)
      goto LABEL_12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F753F28();
      v6 = v20;
    }
    v18 = *(_QWORD *)(v6 + 16);
    if (v18 >= *(_QWORD *)(v6 + 24) >> 1)
    {
      sub_23F753F28();
      v6 = v21;
    }
    *(_QWORD *)(v6 + 16) = v18 + 1;
    v19 = v6 + 24 * v18;
    *(_QWORD *)(v19 + 32) = v7;
    *(_QWORD *)(v19 + 40) = v9;
    *(double *)(v19 + 48) = v17;
LABEL_13:
    v5 += 16;
    --v4;
  }
  while (v4);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  return v6;
}

void GlobalEntityMatcherShim.__allocating_init(maxEntityCount:)(uint64_t a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  swift_allocObject();
  GlobalEntityMatcherShim.init(maxEntityCount:)(a1, v3);
  sub_23F694C84();
}

void GlobalEntityMatcherShim.init(maxEntityCount:)(uint64_t a1, char a2)
{
  uint64_t v2;
  BOOL v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_defaultMaxEntityCount) = 5;
  v3 = a1 > 0 && (a2 & 1) == 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_knosisAnswerLimit) = 1000;
  v4 = (_QWORD *)(v2
                + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_intelligencePlatformBundleId);
  *v4 = 0xD00000000000001ELL;
  v4[1] = 0x800000023FB32320;
  if (v3)
    v5 = a1;
  else
    v5 = 5;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_maxEntityCount) = v5;
  v6 = v2 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_matcherType;
  v7 = *MEMORY[0x24BE57860];
  v8 = sub_23F6F52E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  sub_23F694C84();
}

uint64_t sub_23F72F4CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_matcherType;
  v4 = sub_23F6F52E4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23F72F50C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_23FB2DBBC();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F72F570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x24BE57468], v3);
  v4 = sub_23FB2DBB0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) != 0)
  {
    v5 = sub_23FB2F080();
    v7 = v6;
    v8 = sub_23F73066C();
    v10 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    v11 = *(_QWORD *)(v0 + 16);
    sub_23F730844(v5, v7);
    v13 = v12;
    sub_23F6B644C();
    v14 = objc_msgSend(v8, sel_answers);
    sub_23F731D00((uint64_t)v14, (unint64_t *)&unk_256EA6F58);
    v15 = sub_23FB2F3BC();

    swift_retain();
    sub_23F6B6548();
    v16 = sub_23F72EBEC(v15, v9, v13);
    swift_bridgeObjectRelease();
    sub_23F6B6090();
    v26 = v16;
    sub_23F72F770(&v26);
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v9;
    v17[3] = v11;
    v17[4] = v10;
    v18 = sub_23F6B6548();
    v19 = sub_23F72ED98(v18, (void (*)(id, uint64_t, uint64_t, double))sub_23F7308F8);
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    v20 = sub_23F72F8A0(*(_QWORD *)(v9 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_maxEntityCount), v19, (void (*)(_QWORD))MEMORY[0x24BE578B8]);
    v24 = sub_23F6B8C64(v20, v21, v22, v23);

  }
  else
  {
    v24 = MEMORY[0x24BEE4AF8];
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v24);
}

void sub_23F72F770(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7E40E8();
    v2 = v4;
  }
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  sub_23F730C84(v5);
  *a1 = v2;
}

uint64_t sub_23F72F7DC(uint64_t result)
{
  uint64_t v1;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23FB2F230();
    v1 = sub_23FB2F2F0();
    sub_23F693E04();
    return v1;
  }
  return result;
}

uint64_t sub_23F72F894(uint64_t a1, uint64_t a2)
{
  return sub_23F72F8A0(a1, a2, (void (*)(_QWORD))type metadata accessor for ToolboxSearchOutput);
}

uint64_t sub_23F72F8A0(uint64_t result, uint64_t a2, void (*a3)(_QWORD))
{
  unint64_t v5;
  char v6;
  unint64_t v7;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(a2 + 16);
  result = sub_23F731BB8(0, result, v5);
  if ((v6 & 1) != 0)
    v7 = v5;
  else
    v7 = result;
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v5 >= v7)
  {
    a3(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23F72F930(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23F731BB8(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23F72F99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];

  v89 = a5;
  v90 = a4;
  v91 = a1;
  v92 = a2;
  v93 = a6;
  v8 = sub_23F6F52E4();
  v86 = *(_QWORD *)(v8 - 8);
  v87 = v8;
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v88 = v9;
  sub_23F6916B8((uint64_t *)&unk_256EA8FA0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v84 = v11;
  sub_23FB2DD60();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B51A4();
  v85 = v13;
  sub_23F6916B8(&qword_256EA2850);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B51A4();
  v81 = v15;
  v80 = sub_23FB2EDD4();
  v16 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v18 = (uint64_t *)((char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6916B8(&qword_256EA2950);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6B51A4();
  v83 = v20;
  sub_23F6916B8(&qword_256EA8E70);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23FB2D694();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B59F8();
  v26 = objc_msgSend(a3, sel_facts);
  sub_23F731D00((uint64_t)v26, &qword_256EA7078);
  v27 = sub_23FB2F3BC();

  if (v27 >> 62)
  {
    sub_23F6B6548();
    v72 = sub_23FB2F974();
    sub_23F6B6090();
    if (v72)
      goto LABEL_3;
LABEL_12:
    sub_23F6B6090();
    v73 = sub_23F731CEC();
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v93, 1, 1, v73);
  }
  if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_12;
LABEL_3:
  sub_23F6B8F70(0, (v27 & 0xC000000000000001) == 0);
  v78 = v16;
  if ((v27 & 0xC000000000000001) != 0)
    v28 = (id)MEMORY[0x242674478](0, v27);
  else
    v28 = *(id *)(v27 + 32);
  v29 = v28;
  sub_23F6B6090();
  v30 = objc_msgSend(v29, sel_subjectId);

  v79 = sub_23FB2F140();
  v32 = v31;

  sub_23FB2D67C();
  v33 = sub_23FB2D670();
  v35 = v34;
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v6, v24);
  sub_23F730258(a3, v33, v35);
  v37 = v36;
  sub_23F6B644C();
  if (v37[2])
  {
    v77 = v32;
    v38 = v37[5];
    v75 = v37[4];
    swift_bridgeObjectRetain();
    sub_23F693DFC();
    v96[0] = v91;
    v96[1] = v92;
    v94 = v90;
    v95 = v89;
    v39 = sub_23FB2C50C();
    sub_23F6B5A8C((uint64_t)v23, v40, v41, v39);
    sub_23F731C2C();
    v42 = sub_23FB2F6C8();
    v76 = v43;
    v45 = v44;
    sub_23F731C9C((uint64_t)v23, &qword_256EA8E70);
    if ((v45 & 1) != 0)
    {
      v69 = sub_23F731CEC();
      sub_23F6B5A8C(v93, v70, v71, v69);
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = MEMORY[0x24BEE4B00];
      v96[0] = MEMORY[0x24BEE4B00];
      v47 = objc_msgSend(a3, sel_facts);
      v48 = sub_23FB2F3BC();

      sub_23F72E544(v48, v96);
      v49 = sub_23F6B6090();
      v94 = v46;
      MEMORY[0x24BDAC7A8](v49);
      v50 = sub_23F6B6548();
      sub_23F72E920(v50, sub_23F731C68);
      sub_23F6B6090();
      sub_23FB2EC6C();
      v51 = swift_allocBox();
      v52 = (_QWORD *)swift_allocObject();
      v53 = *(_QWORD *)(v82
                      + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_intelligencePlatformBundleId
                      + 8);
      v82 = *(_QWORD *)(v82
                      + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_intelligencePlatformBundleId);
      v52[2] = v82;
      v52[3] = v53;
      v52[4] = v75;
      v52[5] = v38;
      *v18 = v52;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v78 + 104))(v18, *MEMORY[0x24BEB9CF8], v80);
      v54 = sub_23FB2EE88();
      sub_23F6B5A8C(v81, v55, v56, v54);
      sub_23F6B6254();
      swift_bridgeObjectRetain();
      sub_23F6B5508();
      v80 = v42;
      sub_23FB2EC54();
      v57 = (uint64_t)v83;
      *v83 = v51;
      v58 = *MEMORY[0x24BEB99E0];
      v59 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v57, v58, v59);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v57, 0, 1, v59);
      sub_23F6916B8(&qword_256EA6410);
      sub_23FB2DBA4();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_23FB47010;
      v60 = sub_23FB2DA60();
      sub_23F6B5A8C(v84, v61, v62, v60);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23FB2DD30();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v86 + 104))(v88, *MEMORY[0x24BE57860], v87);
      sub_23F6B6254();
      sub_23FB2DB14();
      v63 = v93;
      sub_23FB2DE68();
      v64 = sub_23F731CEC();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v63, 0, 1, v64);
      sub_23F693E04();
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23F6B5908();
    sub_23F693DFC();
    v65 = sub_23F731CEC();
    return sub_23F6B5A8C(v93, v66, v67, v65);
  }
}

void sub_23F7300BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];

  v18[0] = a1;
  v18[1] = a4;
  v5 = sub_23FB2EDD4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_23F6916B8(&qword_256EA2950);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23FB2EBF4();
  v12 = swift_allocBox();
  v13 = sub_23FB2EDA4();
  v14 = swift_allocBox();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x24BEB9CC0], v13);
  *v8 = v14;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEB9D18], v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23FB2EBD0();
  *v11 = v12;
  v16 = *MEMORY[0x24BEB9988];
  v17 = sub_23FB2ED38();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v11, v16, v17);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v11, 0, 1, v17);
  sub_23F7D32C0((uint64_t)v11, v18[0], a2);
}

void sub_23F730258(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  unint64_t v6;

  v5 = objc_msgSend(a1, sel_facts);
  sub_23F731D00((uint64_t)v5, &qword_256EA7078);
  v6 = sub_23FB2F3BC();

  sub_23F6B5508();
  sub_23F72EFFC(v6, a2, a3);
  sub_23F6B5908();
  sub_23F6B6664();
}

uint64_t sub_23F7302E0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = sub_23FB2D694();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B59F8();
  sub_23FB2D688();
  v8 = sub_23FB2D670();
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  sub_23F730258(a1, v8, v10);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_retain();
  sub_23F6B6254();
  v13 = sub_23F72F1F0(v12, v3, a2);
  sub_23F693DFC();
  v14 = sub_23FAE3794(v13);
  v15 = sub_23F7303E4(v14);
  v17 = v16;
  sub_23F693E04();
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t sub_23F7303E4(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  double v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;

  result = sub_23F78F084(a1, &v20);
  v2 = v21;
  if (!v24)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      goto LABEL_44;
    v5 = (unint64_t)(v22 + 64) >> 6;
    if (v17 < v5)
    {
      v18 = *(_QWORD *)(v21 + 8 * v17);
      v6 = v23 + 1;
      if (v18)
      {
LABEL_28:
        v3 = (v18 - 1) & v18;
        v4 = __clz(__rbit64(v18)) + (v6 << 6);
        goto LABEL_3;
      }
      v6 = v23 + 2;
      if (v23 + 2 < v5)
      {
        v18 = *(_QWORD *)(v21 + 8 * v6);
        if (v18)
          goto LABEL_28;
        v6 = v23 + 3;
        if (v23 + 3 < v5)
        {
          v18 = *(_QWORD *)(v21 + 8 * v6);
          if (v18)
            goto LABEL_28;
          v6 = v23 + 4;
          if (v23 + 4 < v5)
          {
            v18 = *(_QWORD *)(v21 + 8 * v6);
            if (v18)
              goto LABEL_28;
            v6 = v23 + 5;
            if (v23 + 5 < v5)
            {
              v18 = *(_QWORD *)(v21 + 8 * v6);
              if (!v18)
              {
                v19 = v23 + 6;
                do
                {
                  if (v19 >= v5)
                    goto LABEL_41;
                  v18 = *(_QWORD *)(v21 + 8 * v19++);
                }
                while (!v18);
                v6 = v19 - 1;
              }
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRetain();
    sub_23F731C04((uint64_t)&v20);
    return 0;
  }
  v3 = (v24 - 1) & v24;
  v4 = __clz(__rbit64(v24)) | (v23 << 6);
  v5 = (unint64_t)(v22 + 64) >> 6;
  v6 = v23;
LABEL_3:
  v7 = v20;
  v8 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v4);
  v9 = *(double *)(*(_QWORD *)(v20 + 56) + 8 * v4);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v3)
    {
      v10 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_22;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v12 >= v5)
      goto LABEL_24;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    v14 = v6 + 1;
    if (!v13)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v5)
        goto LABEL_24;
      v13 = *(_QWORD *)(v2 + 8 * v14);
      if (!v13)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v5)
          goto LABEL_24;
        v13 = *(_QWORD *)(v2 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v5)
            goto LABEL_24;
          v13 = *(_QWORD *)(v2 + 8 * v14);
          if (!v13)
          {
            v14 = v6 + 5;
            if (v6 + 5 >= v5)
              goto LABEL_24;
            v13 = *(_QWORD *)(v2 + 8 * v14);
            if (!v13)
            {
              v15 = v6 + 6;
              while (v15 < v5)
              {
                v13 = *(_QWORD *)(v2 + 8 * v15++);
                if (v13)
                {
                  v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_24:
              swift_release();
              return v8;
            }
          }
        }
      }
    }
LABEL_21:
    v3 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v6 = v14;
LABEL_22:
    v16 = *(double *)(*(_QWORD *)(v7 + 56) + 8 * v11);
    if (v9 < v16)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v11);
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      v9 = v16;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

id sub_23F73066C()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v9[3];

  v9[2] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE58560]), sel_init);
  sub_23FB2F7AC();
  swift_bridgeObjectRelease();
  v9[1] = (id)0x800000023FB32400;
  sub_23FB2F254();
  sub_23FB2F254();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, 1000);
  sub_23F6B9088(0, &qword_256EA7098);
  v2 = (void *)sub_23FB2F62C();
  v3 = objc_allocWithZone(MEMORY[0x24BE58510]);
  v4 = sub_23F730BE0(0xD00000000000001ELL, 0x800000023FB32400, 0xD000000000000011, 0x800000023FB32420, v1, v2);
  v9[0] = 0;
  v5 = objc_msgSend(v0, sel_executeKGQ_error_, v4, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    sub_23FB2C290();

    swift_willThrow();
  }
  return v5;
}

void sub_23F730844(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDFD70]), sel_initWithUnit_, 0);
  sub_23F731B74(a1, a2, v4);
  v5 = sub_23FB2F5CC();
  sub_23F6B5508();
  sub_23F72EAA0(v5);
  sub_23F6B5908();

  sub_23F6B6664();
}

uint64_t sub_23F7308F8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_23F72F99C(*(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a1, a2, a3, a4);
}

uint64_t GlobalEntityMatcherShim.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F6F52E4();
  sub_23F6B6454(v1);
  sub_23F731CF4();
  return v0;
}

uint64_t GlobalEntityMatcherShim.__deallocating_deinit()
{
  uint64_t v0;

  v0 = sub_23F6F52E4();
  sub_23F6B6454(v0);
  sub_23F731CF4();
  return swift_deallocClassInstance();
}

uint64_t sub_23F7309B0@<X0>(uint64_t a1@<X8>)
{
  return sub_23F72F4CC(a1);
}

uint64_t sub_23F7309D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F730A30;
  return sub_23F72F50C(a1, a2);
}

uint64_t sub_23F730A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = sub_23F731CC8();
  if (!v1)
    v3 = v0;
  return sub_23F6F51E8(v3, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_23F730A5C()
{
  return type metadata accessor for GlobalEntityMatcherShim();
}

uint64_t type metadata accessor for GlobalEntityMatcherShim()
{
  uint64_t result;

  result = qword_256EA6F90;
  if (!qword_256EA6F90)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23F730A9C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2DE5C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for GlobalEntityMatcherShim()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GlobalEntityMatcherShim.__allocating_init(maxEntityCount:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 120))(a1, a2 & 1);
}

uint64_t dispatch thunk of GlobalEntityMatcherShim.getMatcherType()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of GlobalEntityMatcherShim.matchEntitySpans(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 136) + *(_QWORD *)(*(_QWORD *)v2 + 136));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23F730BB8;
  return v8(a1, a2);
}

uint64_t sub_23F730BB8()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F731CC8();
  return sub_23F6F51E8(v0, *(uint64_t (**)(void))(v1 + 8));
}

id sub_23F730BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  void *v6;
  void *v9;
  void *v10;
  id v11;

  v9 = (void *)sub_23FB2F134();
  swift_bridgeObjectRelease();
  v10 = (void *)sub_23FB2F134();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v6, sel_initWithKGQ_query_limit_offset_, v9, v10, a5, a6);

  return v11;
}

void sub_23F730C84(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;

  v3 = a1[1];
  v4 = sub_23FB2FB30();
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_23F7312A8(0, v3, 1, a1);
      return;
    }
    goto LABEL_124;
  }
  v5 = v4;
  sub_23F6F05C4(v3 / 2);
  v99 = a1;
  v100 = v6;
  v104 = v7;
  v102 = v3;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x24BEE4AF8];
    v39 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v39 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v102 >= -1)
      {
        *(_QWORD *)(v100 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_129;
    }
    v90 = *v99;
    while (1)
    {
      v91 = v39 - 2;
      if (v39 < 2)
        break;
      if (!v90)
        goto LABEL_133;
      v92 = *(_QWORD *)(v10 + 32 + 16 * v91);
      v93 = *(_QWORD *)(v10 + 32 + 16 * (v39 - 1) + 8);
      sub_23F731324((char *)(v90 + 32 * v92), (char *)(v90 + 32 * *(_QWORD *)(v10 + 32 + 16 * (v39 - 1))), v90 + 32 * v93, v104);
      if (v1)
        goto LABEL_86;
      if (v93 < v92)
        goto LABEL_119;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7DB834();
        v10 = v96;
      }
      if (v91 >= *(_QWORD *)(v10 + 16))
        goto LABEL_120;
      v94 = (_QWORD *)(v10 + 32 + 16 * v91);
      *v94 = v92;
      v94[1] = v93;
      v95 = *(_QWORD *)(v10 + 16);
      if (v39 > v95)
        goto LABEL_121;
      memmove((void *)(v10 + 32 + 16 * (v39 - 1)), (const void *)(v10 + 32 + 16 * v39), 16 * (v95 - v39));
      *(_QWORD *)(v10 + 16) = v95 - 1;
      v39 = v95 - 1;
      if (v95 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  v8 = 0;
  v9 = *a1;
  v97 = *a1 + 16;
  v98 = *a1 + 88;
  v10 = MEMORY[0x24BEE4AF8];
  v101 = v5;
  v103 = *a1;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = *(double *)(v9 + 32 * v8 + 24);
      v13 = *(double *)(v9 + 32 * v11 + 24);
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v14 = (double *)(v98 + 32 * v11);
        v15 = v12;
        while (1)
        {
          v16 = v15;
          v15 = *v14;
          if (v13 < v12 == v16 >= *v14)
            break;
          ++v8;
          v14 += 4;
          if (v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v13 < v12)
      {
        if (v8 < v11)
          goto LABEL_126;
        if (v11 < v8)
        {
          v17 = 32 * v8;
          v18 = 32 * v11;
          v19 = v8;
          v20 = v11;
          do
          {
            if (v20 != --v19)
            {
              if (!v9)
                goto LABEL_132;
              v21 = (_OWORD *)(v9 + v18);
              v22 = v9 + v17;
              v23 = *(_OWORD *)(v9 + v18);
              v24 = *(_QWORD *)(v9 + v18 + 16);
              v25 = *(_QWORD *)(v9 + v18 + 24);
              v26 = *(_OWORD *)(v9 + v17 - 16);
              *v21 = *(_OWORD *)(v9 + v17 - 32);
              v21[1] = v26;
              *(_OWORD *)(v22 - 32) = v23;
              *(_QWORD *)(v22 - 16) = v24;
              *(_QWORD *)(v22 - 8) = v25;
            }
            ++v20;
            v17 -= 32;
            v18 += 32;
          }
          while (v20 < v19);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_123;
      if (v8 - v11 < v5)
      {
        v27 = v11 + v5;
        if (__OFADD__(v11, v5))
          goto LABEL_127;
        if (v27 >= v3)
          v27 = v3;
        if (v27 < v11)
          goto LABEL_128;
        if (v8 != v27)
        {
          v28 = v97 + 32 * v8;
          do
          {
            v29 = *(double *)(v9 + 32 * v8 + 24);
            v30 = v11;
            v31 = v28;
            do
            {
              if (*(double *)(v31 - 24) >= v29)
                break;
              if (!v9)
                goto LABEL_130;
              v32 = (_OWORD *)(v31 - 16);
              v34 = *(_OWORD *)(v31 - 48);
              v33 = *(_OWORD *)(v31 - 32);
              *(_QWORD *)(v31 - 32) = *(_QWORD *)v31;
              v31 -= 32;
              v35 = *(_QWORD *)(v31 + 16);
              v36 = *(_QWORD *)(v31 + 24);
              *v32 = v34;
              v32[1] = v33;
              *(_QWORD *)(v31 - 16) = v35;
              *(_QWORD *)(v31 - 8) = v36;
              *(double *)(v31 + 8) = v29;
              ++v30;
            }
            while (v8 != v30);
            ++v8;
            v28 += 32;
          }
          while (v8 != v27);
          v8 = v27;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_122;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F7DB74C(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v88;
    }
    v38 = *(_QWORD *)(v10 + 16);
    v37 = *(_QWORD *)(v10 + 24);
    v39 = v38 + 1;
    v9 = v103;
    if (v38 >= v37 >> 1)
    {
      sub_23F7DB74C(v37 > 1, v38 + 1, 1, (char *)v10);
      v9 = v103;
      v10 = v89;
    }
    *(_QWORD *)(v10 + 16) = v39;
    v40 = v10 + 32;
    v41 = (uint64_t *)(v10 + 32 + 16 * v38);
    *v41 = v11;
    v41[1] = v8;
    if (v38)
      break;
    v39 = 1;
LABEL_81:
    v5 = v101;
    v3 = v102;
    if (v8 >= v102)
      goto LABEL_90;
  }
  while (1)
  {
    v42 = v39 - 1;
    if (v39 >= 4)
    {
      v47 = v40 + 16 * v39;
      v48 = *(_QWORD *)(v47 - 64);
      v49 = *(_QWORD *)(v47 - 56);
      v53 = __OFSUB__(v49, v48);
      v50 = v49 - v48;
      if (v53)
        goto LABEL_107;
      v52 = *(_QWORD *)(v47 - 48);
      v51 = *(_QWORD *)(v47 - 40);
      v53 = __OFSUB__(v51, v52);
      v45 = v51 - v52;
      v46 = v53;
      if (v53)
        goto LABEL_108;
      v54 = v39 - 2;
      v55 = (uint64_t *)(v40 + 16 * (v39 - 2));
      v57 = *v55;
      v56 = v55[1];
      v53 = __OFSUB__(v56, v57);
      v58 = v56 - v57;
      if (v53)
        goto LABEL_109;
      v53 = __OFADD__(v45, v58);
      v59 = v45 + v58;
      if (v53)
        goto LABEL_111;
      if (v59 >= v50)
      {
        v77 = (uint64_t *)(v40 + 16 * v42);
        v79 = *v77;
        v78 = v77[1];
        v53 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v53)
          goto LABEL_117;
        v70 = v45 < v80;
        goto LABEL_70;
      }
    }
    else
    {
      if (v39 != 3)
      {
        v71 = *(_QWORD *)(v10 + 32);
        v72 = *(_QWORD *)(v10 + 40);
        v53 = __OFSUB__(v72, v71);
        v64 = v72 - v71;
        v65 = v53;
        goto LABEL_64;
      }
      v44 = *(_QWORD *)(v10 + 32);
      v43 = *(_QWORD *)(v10 + 40);
      v53 = __OFSUB__(v43, v44);
      v45 = v43 - v44;
      v46 = v53;
    }
    if ((v46 & 1) != 0)
      goto LABEL_110;
    v54 = v39 - 2;
    v60 = (uint64_t *)(v40 + 16 * (v39 - 2));
    v62 = *v60;
    v61 = v60[1];
    v63 = __OFSUB__(v61, v62);
    v64 = v61 - v62;
    v65 = v63;
    if (v63)
      goto LABEL_112;
    v66 = (uint64_t *)(v40 + 16 * v42);
    v68 = *v66;
    v67 = v66[1];
    v53 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v53)
      goto LABEL_114;
    if (__OFADD__(v64, v69))
      goto LABEL_116;
    if (v64 + v69 >= v45)
    {
      v70 = v45 < v69;
LABEL_70:
      if (v70)
        v42 = v54;
      goto LABEL_72;
    }
LABEL_64:
    if ((v65 & 1) != 0)
      goto LABEL_113;
    v73 = (uint64_t *)(v40 + 16 * v42);
    v75 = *v73;
    v74 = v73[1];
    v53 = __OFSUB__(v74, v75);
    v76 = v74 - v75;
    if (v53)
      goto LABEL_115;
    if (v76 < v64)
      goto LABEL_81;
LABEL_72:
    v81 = v10;
    v82 = v42 - 1;
    if (v42 - 1 >= v39)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v9)
      goto LABEL_131;
    v83 = (uint64_t *)(v40 + 16 * v82);
    v84 = *v83;
    v85 = (_QWORD *)(v40 + 16 * v42);
    v86 = v85[1];
    sub_23F731324((char *)(v9 + 32 * *v83), (char *)(v9 + 32 * *v85), v9 + 32 * v86, v104);
    if (v1)
      break;
    if (v86 < v84)
      goto LABEL_104;
    if (v42 > *(_QWORD *)(v81 + 16))
      goto LABEL_105;
    *v83 = v84;
    *(_QWORD *)(v40 + 16 * v82 + 8) = v86;
    v87 = *(_QWORD *)(v81 + 16);
    if (v42 >= v87)
      goto LABEL_106;
    v10 = v81;
    v39 = v87 - 1;
    memmove((void *)(v40 + 16 * v42), v85 + 2, 16 * (v87 - 1 - v42));
    *(_QWORD *)(v81 + 16) = v87 - 1;
    v9 = v103;
    if (v87 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  swift_bridgeObjectRelease();
  if (v102 < -1)
    goto LABEL_125;
  *(_QWORD *)(v100 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_23F7312A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 32 * a3 + 16;
    while (2)
    {
      v6 = *(double *)(v4 + 32 * a3 + 24);
      v7 = result;
      v8 = v5;
      do
      {
        if (*(double *)(v8 - 24) >= v6)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = (_OWORD *)(v8 - 16);
        v11 = *(_OWORD *)(v8 - 48);
        v10 = *(_OWORD *)(v8 - 32);
        *(_QWORD *)(v8 - 32) = *(_QWORD *)v8;
        v8 -= 32;
        v12 = *(_QWORD *)(v8 + 16);
        v13 = *(_QWORD *)(v8 + 24);
        *v9 = v11;
        v9[1] = v10;
        *(_QWORD *)(v8 - 16) = v12;
        *(_QWORD *)(v8 - 8) = v13;
        *(double *)(v8 + 8) = v6;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 32;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23F731324(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  __int128 v17;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  __int128 v24;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 32;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 32;
  if (v9 >= v11)
  {
    sub_23F75529C(a2, (uint64_t)(a3 - (_QWORD)a2) / 32, a4);
    v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32)
      goto LABEL_41;
    v19 = (char *)(a3 - 32);
    while (1)
    {
      v20 = v19 + 32;
      if (*((double *)v6 - 1) >= *(double *)(v12 - 8))
      {
        v21 = (char *)(v12 - 32);
        v23 = v20 != (char *)v12 || (unint64_t)v19 >= v12;
        v12 -= 32;
        if (!v23)
          goto LABEL_37;
      }
      else
      {
        v21 = v6 - 32;
        v22 = v20 != v6 || v19 >= v6;
        v6 -= 32;
        if (!v22)
          goto LABEL_37;
      }
      v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *((_OWORD *)v19 + 1) = v24;
LABEL_37:
      v19 -= 32;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_41;
    }
  }
  sub_23F75529C(a1, (a2 - a1) / 32, a4);
  v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    do
    {
      if (*((double *)v4 + 3) >= *((double *)v6 + 3))
      {
        v13 = v7 == v4;
        v14 = v4;
        v4 += 32;
        if (v13 && v7 < v4)
          goto LABEL_16;
      }
      else
      {
        v13 = v7 == v6;
        v14 = v6;
        v6 += 32;
        if (v13 && v7 < v6)
          goto LABEL_16;
      }
      v17 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v14;
      *((_OWORD *)v7 + 1) = v17;
LABEL_16:
      v7 += 32;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = v7;
LABEL_41:
  sub_23F75529C(v4, (uint64_t)(v12 - (_QWORD)v4) / 32, v6);
  return 1;
}

uint64_t sub_23F7314AC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v6 = (_QWORD *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_23F7F0E44(0, v5, v6);
    v7 = sub_23F731638((uint64_t)v6, v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (_QWORD *)swift_slowAlloc();
    sub_23F7F0E44(0, v5, v8);
    v7 = sub_23F731638((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x242674F4C](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_23F731638(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) >= *(_QWORD *)(a3 + 16))
  {
    v34 = 0;
    v60 = a3 + 56;
    v61 = 0;
    v35 = 1 << *(_BYTE *)(a3 + 32);
    if (v35 < 64)
      v36 = ~(-1 << v35);
    else
      v36 = -1;
    v37 = v36 & *(_QWORD *)(a3 + 56);
    v63 = (unint64_t)(v35 + 63) >> 6;
    v38 = a4 + 56;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          v39 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          v40 = v39 | (v34 << 6);
        }
        else
        {
          v41 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          if (v41 >= v63)
            goto LABEL_79;
          v42 = *(_QWORD *)(v60 + 8 * v41);
          ++v34;
          if (!v42)
          {
            v34 = v41 + 1;
            if (v41 + 1 >= v63)
              goto LABEL_79;
            v42 = *(_QWORD *)(v60 + 8 * v34);
            if (!v42)
            {
              v34 = v41 + 2;
              if (v41 + 2 >= v63)
                goto LABEL_79;
              v42 = *(_QWORD *)(v60 + 8 * v34);
              if (!v42)
              {
                v43 = v41 + 3;
                if (v43 >= v63)
                  goto LABEL_79;
                v42 = *(_QWORD *)(v60 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    v34 = v43 + 1;
                    if (__OFADD__(v43, 1))
                      goto LABEL_85;
                    if (v34 >= v63)
                      break;
                    v42 = *(_QWORD *)(v60 + 8 * v34);
                    ++v43;
                    if (v42)
                      goto LABEL_61;
                  }
LABEL_79:
                  swift_retain();
                  return sub_23F7CB7AC(v57, a2, v61, v5);
                }
                v34 = v43;
              }
            }
          }
LABEL_61:
          v37 = (v42 - 1) & v42;
          v40 = __clz(__rbit64(v42)) + (v34 << 6);
        }
        v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
        v46 = *v44;
        v45 = v44[1];
        sub_23FB2FC5C();
        swift_bridgeObjectRetain();
        sub_23FB2F200();
        v47 = sub_23FB2FC8C();
        v48 = -1 << *(_BYTE *)(v4 + 32);
        v49 = v47 & ~v48;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
          break;
LABEL_78:
        result = swift_bridgeObjectRelease();
        v5 = a3;
        v4 = a4;
      }
      v50 = *(_QWORD *)(a4 + 48);
      v51 = (_QWORD *)(v50 + 16 * v49);
      v52 = *v51 == v46 && v51[1] == v45;
      if (!v52 && (sub_23FB2FB78() & 1) == 0)
      {
        v53 = ~v48;
        do
        {
          v49 = (v49 + 1) & v53;
          if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
            goto LABEL_78;
          v54 = (_QWORD *)(v50 + 16 * v49);
          v55 = *v54 == v46 && v54[1] == v45;
        }
        while (!v55 && (sub_23FB2FB78() & 1) == 0);
      }
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
        goto LABEL_83;
    }
  }
  v6 = 0;
  v58 = a4 + 56;
  v7 = 1 << *(_BYTE *)(a4 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  v59 = (unint64_t)(v7 + 63) >> 6;
  v61 = 0;
  v10 = a3 + 56;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v62 = v6;
      v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v13 >= v59)
      goto LABEL_79;
    v14 = *(_QWORD *)(v58 + 8 * v13);
    v15 = v6 + 1;
    if (!v14)
    {
      v15 = v6 + 2;
      if (v6 + 2 >= v59)
        goto LABEL_79;
      v14 = *(_QWORD *)(v58 + 8 * v15);
      if (!v14)
      {
        v15 = v6 + 3;
        if (v6 + 3 >= v59)
          goto LABEL_79;
        v14 = *(_QWORD *)(v58 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v9 = (v14 - 1) & v14;
    v62 = v15;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_23FB2FC5C();
    swift_bridgeObjectRetain();
    sub_23FB2F200();
    v20 = sub_23FB2FC8C();
    v21 = -1 << *(_BYTE *)(v5 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    v24 = 1 << v22;
    if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) == 0)
      goto LABEL_36;
    v25 = *(_QWORD *)(a3 + 48);
    v26 = (_QWORD *)(v25 + 16 * v22);
    v27 = *v26 == v19 && v26[1] == v18;
    if (v27 || (sub_23FB2FB78() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
    else
    {
      v28 = ~v21;
      for (i = v22 + 1; ; i = v30 + 1)
      {
        v30 = i & v28;
        if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
          break;
        v31 = (_QWORD *)(v25 + 16 * v30);
        v32 = *v31 == v19 && v31[1] == v18;
        if (v32 || (sub_23FB2FB78() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v23 = v30 >> 6;
          v24 = 1 << v30;
          goto LABEL_38;
        }
      }
LABEL_36:
      result = swift_bridgeObjectRelease();
      v6 = v62;
      v5 = a3;
      v4 = a4;
    }
  }
  v16 = v6 + 4;
  if (v6 + 4 >= v59)
    goto LABEL_79;
  v14 = *(_QWORD *)(v58 + 8 * v16);
  if (v14)
  {
    v15 = v6 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v59)
      goto LABEL_79;
    v14 = *(_QWORD *)(v58 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_21;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

void sub_23F731B74(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)sub_23FB2F134();
  objc_msgSend(a3, sel_setString_, v4);

}

uint64_t sub_23F731BB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t sub_23F731C04(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t sub_23F731C2C()
{
  unint64_t result;

  result = qword_256EA7080;
  if (!qword_256EA7080)
  {
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256EA7080);
  }
  return result;
}

void sub_23F731C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_23F7300BC(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_23F731C70()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23F731C9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23F6916B8(a2);
  sub_23F6B6454(v3);
  return a1;
}

uint64_t sub_23F731CC8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_23F731CEC()
{
  return sub_23FB2DE8C();
}

uint64_t sub_23F731CF4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F731D00(uint64_t a1, unint64_t *a2)
{
  return sub_23F6B9088(0, a2);
}

uint64_t static ImpendingRequestDetectedTelemetry.insert(sessionState:clientRequestId:queryEventId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v7 = v6 - v5;
  sub_23F6916B8(&qword_256EA70A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6BD134();
  v11 = v10 - v9;
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6BD134();
  v15 = v14 - v13;
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6BD134();
  v19 = v18 - v17;
  v20 = sub_23FB2E510();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6BD134();
  v24 = v23 - v22;
  Session.Transcript.formingTraceIds()(v23 - v22);
  v25 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v19, a4, v25);
  sub_23F73200C();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v26, v27, v28, v25);
  sub_23FB2E4B0();
  swift_bridgeObjectRetain();
  sub_23FB2E4BC();
  type metadata accessor for TelemetryStream();
  sub_23FB2E720();
  sub_23FB2E72C();
  sub_23F73200C();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v29, v30, v31, v32);
  sub_23F7A1678(v24, v15);
  sub_23F731F88(v15);
  sub_23FB2E5AC();
  v33 = *MEMORY[0x24BE58760];
  v34 = sub_23FB2E480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v11, v33, v34);
  sub_23F73200C();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v35, v36, v37, v34);
  sub_23FB2E48C();
  v38 = *MEMORY[0x24BE585D0];
  v39 = sub_23FB2E420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v7, v38, v39);
  sub_23F73200C();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v40, v41, v42, v39);
  sub_23FB2E438();
  static TelemetryStream.insert(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v24, v20);
}

uint64_t sub_23F731F88(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA70B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ImpendingRequestDetectedTelemetry.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ImpendingRequestDetectedTelemetry.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ImpendingRequestDetectedTelemetry()
{
  return objc_opt_self();
}

uint64_t method lookup function for ImpendingRequestDetectedTelemetry()
{
  return swift_lookUpClassMethod();
}

uint64_t InsertVariablesRequest.variables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InsertVariablesRequest.init(variables:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_23F732028(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x656C626169726176 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F7320B8()
{
  return 0x656C626169726176;
}

uint64_t sub_23F7320D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F732028(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F732100()
{
  sub_23F732234();
  return sub_23FB2FD10();
}

uint64_t sub_23F732128()
{
  sub_23F732234();
  return sub_23FB2FD1C();
}

void InsertVariablesRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_23F6916B8(&qword_256EA7150);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5208();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F732234();
  sub_23FB2FCC8();
  sub_23F6916B8(&qword_256EA7160);
  sub_23F732270();
  sub_23FB2FB18();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_23F6B5100();
}

unint64_t sub_23F732234()
{
  unint64_t result;

  result = qword_256EA7158;
  if (!qword_256EA7158)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59ACC, &type metadata for InsertVariablesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7158);
  }
  return result;
}

unint64_t sub_23F732270()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256EA7168;
  if (!qword_256EA7168)
  {
    v1 = sub_23F6AE310(&qword_256EA7160);
    v2 = sub_23F73246C(&qword_256EA7170, MEMORY[0x24BEB9A28]);
    v3[0] = MEMORY[0x24BEE0D08];
    v3[1] = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE04C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256EA7168);
  }
  return result;
}

void InsertVariablesRequest.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_23F6916B8(&qword_256EA7178);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5208();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F732234();
  sub_23FB2FCB0();
  if (!v2)
  {
    sub_23F6916B8(&qword_256EA7160);
    sub_23F7323F0();
    sub_23FB2FA7C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
    *a2 = v8;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  sub_23F6B5100();
}

unint64_t sub_23F7323F0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256EA7180;
  if (!qword_256EA7180)
  {
    v1 = sub_23F6AE310(&qword_256EA7160);
    v2 = sub_23F73246C(&qword_256EA7188, MEMORY[0x24BEB9A40]);
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = v2;
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE04E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256EA7180);
  }
  return result;
}

uint64_t sub_23F73246C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23FB2ED38();
    result = MEMORY[0x242674E5C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23F7324AC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  InsertVariablesRequest.init(from:)(a1, a2);
}

void sub_23F7324C0(_QWORD *a1)
{
  InsertVariablesRequest.encode(to:)(a1);
}

uint64_t sub_23F7324D8()
{
  sub_23F7325EC();
  return sub_23FB2FD10();
}

uint64_t sub_23F732500()
{
  sub_23F7325EC();
  return sub_23FB2FD1C();
}

uint64_t InsertVariablesResult.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_23F6916B8(&qword_256EA7190);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7325EC();
  sub_23FB2FCC8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_23F7325EC()
{
  unint64_t result;

  result = qword_256EA7198;
  if (!qword_256EA7198)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59A7C, &type metadata for InsertVariablesResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7198);
  }
  return result;
}

uint64_t InsertVariablesResult.init(from:)(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
}

uint64_t sub_23F73264C(uint64_t a1)
{
  return InsertVariablesResult.init(from:)(a1);
}

uint64_t sub_23F732660(_QWORD *a1)
{
  return InsertVariablesResult.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for InsertVariablesRequest()
{
  return &type metadata for InsertVariablesRequest;
}

ValueMetadata *type metadata accessor for InsertVariablesResult()
{
  return &type metadata for InsertVariablesResult;
}

ValueMetadata *type metadata accessor for InsertVariablesResult.CodingKeys()
{
  return &type metadata for InsertVariablesResult.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for InsertVariablesRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7326E4 + 4 * byte_23FB59880[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F732704 + 4 * byte_23FB59885[v4]))();
}

_BYTE *sub_23F7326E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F732704(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F73270C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F732714(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F73271C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F732724(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InsertVariablesRequest.CodingKeys()
{
  return &type metadata for InsertVariablesRequest.CodingKeys;
}

unint64_t sub_23F732744()
{
  unint64_t result;

  result = qword_256EA71A0;
  if (!qword_256EA71A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59A04, &type metadata for InsertVariablesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA71A0);
  }
  return result;
}

unint64_t sub_23F732784()
{
  unint64_t result;

  result = qword_256EA71A8;
  if (!qword_256EA71A8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59A2C, &type metadata for InsertVariablesResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA71A8);
  }
  return result;
}

unint64_t sub_23F7327C4()
{
  unint64_t result;

  result = qword_256EA71B0;
  if (!qword_256EA71B0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59A54, &type metadata for InsertVariablesResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA71B0);
  }
  return result;
}

unint64_t sub_23F732804()
{
  unint64_t result;

  result = qword_256EA71B8;
  if (!qword_256EA71B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59974, &type metadata for InsertVariablesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA71B8);
  }
  return result;
}

unint64_t sub_23F732844()
{
  unint64_t result;

  result = qword_256EA71C0;
  if (!qword_256EA71C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5999C, &type metadata for InsertVariablesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA71C0);
  }
  return result;
}

void Session.InstrumentableEvent.init(event:description:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;

  sub_23F7328C0(a1, a4);
  v7 = (_QWORD *)(a4 + *(int *)(type metadata accessor for Session.InstrumentableEvent() + 20));
  *v7 = a2;
  v7[1] = a3;
  sub_23F694C84();
}

uint64_t sub_23F7328C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Session.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Session.InstrumentableEvent()
{
  uint64_t result;

  result = qword_256EA7258;
  if (!qword_256EA7258)
    return swift_getSingletonMetadata();
  return result;
}

void Session.InstrumentableEvent.event.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F732E30(v1, a1, type metadata accessor for Session.Event);
}

uint64_t Session.InstrumentableEvent.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Session.InstrumentableEvent() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23F73299C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x746E657665 && a2 == 0xE500000000000000;
  if (v2 || (sub_23F73DBA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023FB32490 || (sub_23F73DBA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v7 = sub_23F73DBA0();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23F732AD0()
{
  sub_23FB2FC5C();
  sub_23FB2FC68();
  return sub_23FB2FC8C();
}

uint64_t sub_23F732B14(char a1)
{
  if (!a1)
    return 0x746E657665;
  if (a1 == 1)
    return 0xD000000000000014;
  return 0x7470697263736564;
}

uint64_t sub_23F732B74()
{
  return sub_23F732AD0();
}

uint64_t sub_23F732B7C()
{
  char *v0;

  return sub_23F732B14(*v0);
}

uint64_t sub_23F732B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F73299C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23F732BA8(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23F732BB4()
{
  sub_23F732DF4();
  return sub_23FB2FD10();
}

uint64_t sub_23F732BDC()
{
  sub_23F732DF4();
  return sub_23FB2FD1C();
}

void Session.InstrumentableEvent.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for Session.Event(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  v16 = v5;
  v17 = sub_23F6916B8(&qword_256EA71C8);
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6BD134();
  v6 = type metadata accessor for Session.InstrumentableEvent();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6BD134();
  v10 = v9 - v8;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F732DF4();
  sub_23FB2FCB0();
  if (v2)
  {
    sub_23F6B6E68();
  }
  else
  {
    sub_23F6D3458(&qword_256EA71D8, type metadata accessor for Session.Event, (uint64_t)&protocol conformance descriptor for Session.Event);
    sub_23FB2FA7C();
    sub_23F7328C0(v16, v10);
    v11 = sub_23FB2FA40();
    v13 = v12;
    sub_23F73DBB0();
    v14 = (uint64_t *)(v10 + *(int *)(v6 + 20));
    *v14 = v11;
    v14[1] = v13;
    sub_23F732E30(v10, a2, (uint64_t (*)(_QWORD))type metadata accessor for Session.InstrumentableEvent);
    sub_23F6B6E68();
    sub_23F6F5978(v10, (uint64_t (*)(_QWORD))type metadata accessor for Session.InstrumentableEvent);
  }
  sub_23F6B5100();
}

unint64_t sub_23F732DF4()
{
  unint64_t result;

  result = qword_256EA71D0;
  if (!qword_256EA71D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59ED4, &_s19InstrumentableEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA71D0);
  }
  return result;
}

void sub_23F732E30(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_23F694CC8();
}

void Session.InstrumentableEvent.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for Session.Event(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B51A4();
  v13 = v3;
  type metadata accessor for TranscriptProtoEvent(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v7 = v6 - v5;
  v8 = sub_23F6916B8(&qword_256EA71E0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6BD134();
  v12 = v11 - v10;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F732DF4();
  sub_23FB2FCC8();
  sub_23F6D3458(&qword_256EA71E8, type metadata accessor for Session.Event, (uint64_t)&protocol conformance descriptor for Session.Event);
  sub_23FB2FB18();
  if (!v15)
  {
    sub_23F732E30(v14, v13, type metadata accessor for Session.Event);
    TranscriptProtoEvent.init(handwritten:)();
    sub_23F6D3458(&qword_256EA71F0, type metadata accessor for TranscriptProtoEvent, (uint64_t)&protocol conformance descriptor for TranscriptProtoEvent);
    sub_23FB2D8EC();
    sub_23F6BD354();
    sub_23FB2FB18();
    type metadata accessor for Session.InstrumentableEvent();
    sub_23FB2FADC();
    sub_23F73DBC0();
    sub_23F6F5978(v7, type metadata accessor for TranscriptProtoEvent);
  }
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  sub_23F6B5100();
}

void sub_23F733108(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  Session.InstrumentableEvent.init(from:)(a1, a2);
}

void sub_23F73311C(_QWORD *a1)
{
  Session.InstrumentableEvent.encode(to:)(a1);
}

uint64_t *_s19InstrumentableEventVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void *, void *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t Step;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t StepResults;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(void *, void *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(void *, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(void *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, void *, uint64_t);
  uint64_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(void *, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t DecorationResult;
  uint64_t v158;
  const void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t DecorationPrePlannerResult;
  uint64_t v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, char *, uint64_t);
  uint64_t v205;
  void *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, char *, uint64_t);
  uint64_t v219;
  void *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  const void *v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  int *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(uint64_t, uint64_t, uint64_t);
  void (*v246)(uint64_t, uint64_t, uint64_t);
  int *v247;
  uint64_t v248;
  void *v249;
  const void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, uint64_t);
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  const void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  int *v288;
  uint64_t v289;
  void *v290;
  const void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void (*v298)(uint64_t, uint64_t);
  uint64_t v299;
  _QWORD *v300;
  _QWORD *v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  int *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  const void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  const void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  int *v343;
  uint64_t v344;
  int *v345;
  uint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  _QWORD *v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t *result;
  char *v358;
  char *v359;
  uint64_t v360;
  void (*v361)(uint64_t, uint64_t, uint64_t);
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  char *v368;
  char *v369;
  void (*v370)(uint64_t, uint64_t, uint64_t);
  int *v371;
  void *v372;
  void *__dstg;
  void *__dsth;
  void *__dst;
  void *__dsti;
  int *__dsta;
  void *__dstj;
  void *__dstk;
  int *__dstb;
  void *__dstc;
  int *__dstd;
  int *__dste;
  void *__dstf;
  void *__dstl;
  void (*v386)(char *, char *, uint64_t);
  uint64_t v387;
  void (*v388)(void *, const void *, uint64_t);
  uint64_t v389;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    v15 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v15;
  }
  v7 = sub_23FB2C4B8();
  v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  v9 = (int *)type metadata accessor for Session.Event(0);
  v8((uint64_t *)((char *)a1 + v9[5]), (uint64_t *)((char *)a2 + v9[5]), v7);
  v10 = v9[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2 + v10, 1, v7))
  {
    v13 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8((uint64_t *)v11, (uint64_t *)v12, v7);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v11, 0, 1, v7);
  }
  v16 = v9[7];
  v17 = (uint64_t)a1 + v16;
  v18 = (uint64_t)a2 + v16;
  v19 = type metadata accessor for Session.Event.Payload(0);
  v388 = (void (*)(void *, const void *, uint64_t))v8;
  v389 = v7;
  v387 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v20 = sub_23FB2C998();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = type metadata accessor for SessionStart(0);
      v22 = *(int *)(v21 + 20);
      v23 = v17 + v22;
      v24 = v18 + v22;
      v25 = sub_23FB2C908();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      *(_BYTE *)(v17 + *(int *)(v21 + 24)) = *(_BYTE *)(v18 + *(int *)(v21 + 24));
      goto LABEL_142;
    case 1u:
      v26 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v26;
      *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
      v27 = type metadata accessor for TextQuery(0);
      v28 = *(int *)(v27 + 24);
      v362 = (void *)(v18 + v28);
      __dstg = (void *)(v17 + v28);
      v29 = sub_23FB2C764();
      v30 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v30(__dstg, v362, v29);
      v31 = *(int *)(v27 + 28);
      v32 = (_QWORD *)(v17 + v31);
      v33 = (_QWORD *)(v18 + v31);
      v34 = v33[1];
      *v32 = *v33;
      v32[1] = v34;
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 2u:
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
      v35 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v17 + 24) = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 3u:
      v36 = type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(_QWORD *)v17 = *(_QWORD *)v18;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
            goto LABEL_123;
          }
          v38 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *(_QWORD *)(v17 + 8) = v38;
          v39 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v363 = (void *)(v17 + v39);
          v40 = v18 + v39;
          v41 = sub_23FB2C764();
          v42 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
          swift_bridgeObjectRetain();
          v42(v363, v40, v41);
        }
        goto LABEL_122;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v7))
      {
        v268 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v17, (uint64_t *)v18, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v7);
      }
      v270 = type metadata accessor for RequestContent.SystemPromptResolution(0);
      v8((uint64_t *)(v17 + *(int *)(v270 + 20)), (uint64_t *)(v18 + *(int *)(v270 + 20)), v7);
      v371 = (int *)v270;
      v271 = *(int *)(v270 + 24);
      v272 = (void *)(v17 + v271);
      v273 = (const void *)(v18 + v271);
      v274 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v275 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v275 - 8) + 16))(v272, v273, v275);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v272, v273, *(_QWORD *)(*(_QWORD *)(v274 - 8) + 64));
      }
      v276 = v371[7];
      v277 = v17 + v276;
      v278 = v18 + v276;
      v279 = sub_23FB2C764();
      v361 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v279 - 8) + 16);
      v361(v277, v278, v279);
      v280 = v371[8];
      v281 = (_QWORD *)(v17 + v280);
      v282 = (_QWORD *)(v18 + v280);
      v283 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v284 = swift_getEnumCaseMultiPayload();
      if (v284 == 1)
      {
        *v281 = *v282;
        swift_bridgeObjectRetain();
        goto LABEL_120;
      }
      if (!v284)
      {
        v285 = v282[1];
        *v281 = *v282;
        v281[1] = v285;
        v286 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v358 = (char *)v281 + v286;
        v287 = (char *)v282 + v286;
        swift_bridgeObjectRetain();
        v361((uint64_t)v358, (uint64_t)v287, v279);
LABEL_120:
        swift_storeEnumTagMultiPayload();
        goto LABEL_122;
      }
      memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
LABEL_122:
      swift_storeEnumTagMultiPayload();
LABEL_123:
      v307 = (int *)type metadata accessor for Request(0);
      *(_BYTE *)(v17 + v307[5]) = *(_BYTE *)(v18 + v307[5]);
      v308 = v307[6];
      v309 = v17 + v308;
      v310 = v18 + v308;
      v311 = *(unsigned __int8 *)(v310 + 16);
      if (v311 <= 0xFD)
      {
        v312 = *(_QWORD *)v310;
        __dstl = *(void **)(v310 + 8);
        sub_23F73515C(*(_QWORD *)v310, (uint64_t)__dstl, v311);
        *(_QWORD *)v309 = v312;
        *(_QWORD *)(v309 + 8) = __dstl;
        *(_BYTE *)(v309 + 16) = v311;
      }
      else
      {
        *(_OWORD *)v309 = *(_OWORD *)v310;
        *(_BYTE *)(v309 + 16) = *(_BYTE *)(v310 + 16);
      }
      v313 = v307[7];
      v314 = (void *)(v17 + v313);
      v315 = (const void *)(v18 + v313);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v313, 1, v389))
      {
        v316 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v314, v315, *(_QWORD *)(*(_QWORD *)(v316 - 8) + 64));
      }
      else
      {
        v388(v314, v315, v389);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v314, 0, 1, v389);
      }
      v317 = v307[8];
      v225 = (_QWORD *)(v17 + v317);
      v226 = (_QWORD *)(v18 + v317);
      v227 = v226[1];
      if (v227)
      {
LABEL_130:
        *v225 = *v226;
        v225[1] = v227;
        v225[2] = v226[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_142;
      }
      *(_OWORD *)v225 = *(_OWORD *)v226;
      v225[2] = v226[2];
LABEL_142:
      swift_storeEnumTagMultiPayload();
LABEL_143:
      v324 = v9[8];
      v325 = (uint64_t *)((char *)a1 + v324);
      v326 = (uint64_t *)((char *)a2 + v324);
      v327 = v326[1];
      *v325 = *v326;
      v325[1] = v327;
      v328 = v9[9];
      v329 = (uint64_t *)((char *)a1 + v328);
      v330 = (uint64_t *)((char *)a2 + v328);
      v331 = v330[1];
      *v329 = *v330;
      v329[1] = v331;
      v332 = v9[10];
      v333 = (uint64_t *)((char *)a1 + v332);
      v334 = (uint64_t *)((char *)a2 + v332);
      v335 = v334[1];
      *v333 = *v334;
      v333[1] = v335;
      v336 = v9[11];
      v337 = (uint64_t *)((char *)a1 + v336);
      v338 = (uint64_t *)((char *)a2 + v336);
      v339 = v338[1];
      *v337 = *v338;
      v337[1] = v339;
      v340 = v9[12];
      v341 = (char *)a1 + v340;
      v342 = (char *)a2 + v340;
      v15 = a1;
      v343 = v9;
      v344 = sub_23FB2C470();
      v386 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v344 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v386(v341, v342, v344);
      v345 = (int *)type metadata accessor for Timepoint();
      *(_QWORD *)&v341[v345[5]] = *(_QWORD *)&v342[v345[5]];
      *(_QWORD *)&v341[v345[6]] = *(_QWORD *)&v342[v345[6]];
      v388(&v341[v345[7]], &v342[v345[7]], v389);
      v346 = v343[13];
      v347 = (uint64_t *)((char *)v15 + v346);
      v348 = (uint64_t *)((char *)a2 + v346);
      v349 = v348[1];
      *v347 = *v348;
      v347[1] = v349;
      v350 = v343[14];
      v351 = (char *)v15 + v350;
      v352 = (char *)a2 + v350;
      *(_QWORD *)v351 = *(_QWORD *)v352;
      v351[8] = v352[8];
      *(uint64_t *)((char *)v15 + v343[15]) = *(uint64_t *)((char *)a2 + v343[15]);
      v353 = *(int *)(v387 + 20);
      v354 = (uint64_t *)((char *)v15 + v353);
      v355 = (uint64_t *)((char *)a2 + v353);
      v356 = v355[1];
      *v354 = *v355;
      v354[1] = v356;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v15;
    case 4u:
      v43 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v43;
      v44 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v17 + 24) = v44;
      v45 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
      *(_QWORD *)(v17 + 40) = v45;
      *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
      *(_BYTE *)(v17 + 56) = *(_BYTE *)(v18 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 5u:
      v46 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v17, v18, v46);
      v47 = (int *)type metadata accessor for Action(0);
      v48 = v47[5];
      v49 = (_QWORD *)(v17 + v48);
      v50 = (uint64_t *)(v18 + v48);
      v52 = *v50;
      v51 = v50[1];
      *v49 = v52;
      v49[1] = v51;
      v53 = v47[6];
      v54 = (_QWORD *)(v17 + v53);
      v55 = (_QWORD *)(v18 + v53);
      v56 = v55[1];
      *v54 = *v55;
      v54[1] = v56;
      v57 = v47[7];
      v58 = (_QWORD *)(v17 + v57);
      v59 = (_QWORD *)(v18 + v57);
      v60 = v59[1];
      *v58 = *v59;
      v58[1] = v60;
      *(_BYTE *)(v17 + v47[8]) = *(_BYTE *)(v18 + v47[8]);
      *(_QWORD *)(v17 + v47[9]) = *(_QWORD *)(v18 + v47[9]);
      v61 = v47[10];
      v62 = (_QWORD *)(v17 + v61);
      v63 = (_QWORD *)(v18 + v61);
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 6u:
      v65 = sub_23FB2C764();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v65))
      {
        v66 = sub_23F6916B8(&qword_256EA49D8);
        memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v17, v18, v65);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v65);
      }
      v195 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v17 + *(int *)(v195 + 20), v18 + *(int *)(v195 + 20), v65);
      goto LABEL_142;
    case 7u:
      v67 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v17, v18, v67);
      v68 = (int *)type metadata accessor for ClientAction(0);
      v69 = v68[5];
      v70 = (_QWORD *)(v17 + v69);
      v71 = (uint64_t *)(v18 + v69);
      v73 = *v71;
      v72 = v71[1];
      *v70 = v73;
      v70[1] = v72;
      *(_QWORD *)(v17 + v68[6]) = *(_QWORD *)(v18 + v68[6]);
      v74 = v68[7];
      v75 = (_QWORD *)(v17 + v74);
      v76 = (_QWORD *)(v18 + v74);
      v77 = v76[1];
      *v75 = *v76;
      v75[1] = v77;
      v78 = v68[8];
      v79 = (_QWORD *)(v17 + v78);
      v80 = (_QWORD *)(v18 + v78);
      v81 = v80[1];
      *v79 = *v80;
      v79[1] = v81;
      *(_QWORD *)(v17 + v68[9]) = *(_QWORD *)(v18 + v68[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 8u:
      v82 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v17, v18, v82);
      Step = type metadata accessor for QueryStep(0);
      *(_QWORD *)(v17 + *(int *)(Step + 20)) = *(_QWORD *)(v18 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 9u:
      v84 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v17, v18, v84);
      v85 = type metadata accessor for VariableStep(0);
      *(_QWORD *)(v17 + *(int *)(v85 + 20)) = *(_QWORD *)(v18 + *(int *)(v85 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(_QWORD *)v17 = *(_QWORD *)v18;
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      v105 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v105;
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0xCu:
      v86 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v86;
      v87 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v17 + 24) = v87;
      v88 = *(_QWORD *)(v18 + 32);
      v89 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v17 + 32) = v88;
      *(_QWORD *)(v17 + 40) = v89;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0xDu:
      type metadata accessor for SessionError();
      v90 = (char *)&loc_23F7337A4 + 4 * word_23FB59B7A[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0xEu:
      v91 = *(_QWORD *)v18;
      v92 = *(_QWORD *)(v18 + 8);
      sub_23F6D1E20(*(_QWORD *)v18, v92);
      *(_QWORD *)v17 = v91;
      *(_QWORD *)(v17 + 8) = v92;
      v93 = *(_QWORD *)(v18 + 16);
      v94 = *(_QWORD *)(v18 + 24);
      sub_23F6D1E20(v93, v94);
      *(_QWORD *)(v17 + 16) = v93;
      *(_QWORD *)(v17 + 24) = v94;
      v95 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
      *(_QWORD *)(v17 + 40) = v95;
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0xFu:
      v96 = sub_23FB2C77C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v17, v18, v96);
      goto LABEL_142;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v7))
      {
        v161 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v17, (uint64_t *)v18, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v7);
      }
      v246 = (void (*)(uint64_t, uint64_t, uint64_t))v8;
      v247 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v246(v17 + v247[5], v18 + v247[5], v7);
      v248 = v247[6];
      v249 = (void *)(v17 + v248);
      v250 = (const void *)(v18 + v248);
      v251 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v252 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v252 - 8) + 16))(v249, v250, v252);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
      }
      v253 = v247[7];
      v254 = v17 + v253;
      v255 = v18 + v253;
      v256 = sub_23FB2C764();
      v257 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v256 - 8) + 16);
      __dstf = (void *)v256;
      v257(v254, v255);
      v258 = v247[8];
      v259 = (_QWORD *)(v17 + v258);
      v260 = (_QWORD *)(v18 + v258);
      v261 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v262 = swift_getEnumCaseMultiPayload();
      if (v262 == 1)
      {
        *v259 = *v260;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v262)
        {
          memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
          goto LABEL_142;
        }
        v263 = v260[1];
        *v259 = *v260;
        v259[1] = v263;
        v264 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v265 = (char *)v259 + v264;
        v266 = (char *)v260 + v264;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v257)(v265, v266, __dstf);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_142;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v7))
      {
        v97 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v17, (uint64_t *)v18, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v7);
      }
      v196 = type metadata accessor for ActionStepResult(0);
      v197 = *(int *)(v196 + 20);
      v198 = (_QWORD *)(v17 + v197);
      v199 = (_QWORD *)(v18 + v197);
      v200 = v199[1];
      *v198 = *v199;
      v198[1] = v200;
      v201 = *(int *)(v196 + 24);
      v202 = v17 + v201;
      v368 = (char *)(v18 + v201);
      __dstd = (int *)v196;
      v203 = sub_23FB2C80C();
      v204 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 16);
      swift_bridgeObjectRetain();
      v204(v202, v368, v203);
      v205 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      v206 = (void *)(v202 + v205);
      v207 = &v368[v205];
      v208 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v207, 1, v208))
      {
        v209 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v206, v207, v208);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v206, 0, 1, v208);
      }
      v236 = __dstd[7];
      v237 = (_QWORD *)(v17 + v236);
      v238 = (_QWORD *)(v18 + v236);
      v239 = v238[1];
      *v237 = *v238;
      v237[1] = v239;
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0x12u:
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v98 = (void (*)(uint64_t, uint64_t, uint64_t))v8;
      StepResults = type metadata accessor for QueryStepResults(0);
      v100 = *(int *)(StepResults + 20);
      v364 = (void *)(v18 + v100);
      __dsth = (void *)(v17 + v100);
      v101 = sub_23FB2C764();
      v102 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v101 - 8) + 16);
      swift_bridgeObjectRetain();
      v102(__dsth, v364, v101);
      v98(v17 + *(int *)(StepResults + 24), v18 + *(int *)(StepResults + 24), v389);
      goto LABEL_142;
    case 0x13u:
      v103 = sub_23FB2C938();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v17, v18, v103);
      goto LABEL_142;
    case 0x14u:
      v162 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v17, v18, v162);
      v163 = (int *)type metadata accessor for ActionResolverRequest(0);
      v164 = v163[5];
      v165 = (_QWORD *)(v17 + v164);
      v166 = (uint64_t *)(v18 + v164);
      v168 = *v166;
      v167 = v166[1];
      *v165 = v168;
      v165[1] = v167;
      *(_QWORD *)(v17 + v163[6]) = *(_QWORD *)(v18 + v163[6]);
      *(_QWORD *)(v17 + v163[7]) = *(_QWORD *)(v18 + v163[7]);
      *(_QWORD *)(v17 + v163[8]) = *(_QWORD *)(v18 + v163[8]);
      *(_BYTE *)(v17 + v163[9]) = *(_BYTE *)(v18 + v163[9]);
      *(_BYTE *)(v17 + v163[10]) = *(_BYTE *)(v18 + v163[10]);
      *(_BYTE *)(v17 + v163[11]) = *(_BYTE *)(v18 + v163[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0x16u:
    case 0x24u:
      v104 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v104;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0x1Bu:
      v169 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v169;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0x1Cu:
      v170 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v170;
      v171 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v17 + 24) = v171;
      *(_DWORD *)(v17 + 32) = *(_DWORD *)(v18 + 32);
      v173 = *(_QWORD *)(v18 + 40);
      v172 = *(_QWORD *)(v18 + 48);
      *(_QWORD *)(v17 + 40) = v173;
      *(_QWORD *)(v17 + 48) = v172;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0x1Eu:
      v106 = sub_23FB2D004();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v17, v18, v106);
      goto LABEL_142;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v7))
      {
        v107 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v17, (uint64_t *)v18, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v7);
      }
      v210 = type metadata accessor for StatementResult(0);
      v211 = *(int *)(v210 + 20);
      v212 = (_QWORD *)(v17 + v211);
      v213 = (_QWORD *)(v18 + v211);
      v214 = v213[1];
      *v212 = *v213;
      v212[1] = v214;
      v215 = *(int *)(v210 + 24);
      v216 = v17 + v215;
      v369 = (char *)(v18 + v215);
      __dste = (int *)v210;
      v217 = sub_23FB2D0DC();
      v218 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v217 - 8) + 16);
      swift_bridgeObjectRetain();
      v218(v216, v369, v217);
      v219 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v220 = (void *)(v216 + v219);
      v221 = &v369[v219];
      v222 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v221, 1, v222))
      {
        v223 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 16))(v220, v221, v222);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v220, 0, 1, v222);
      }
      v240 = __dste;
      v241 = __dste[7];
      v242 = v17 + v241;
      v243 = v18 + v241;
      v244 = sub_23FB2C764();
      v245 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v244 - 8) + 16);
      v245(v242, v243, v244);
      v245(v17 + v240[8], v18 + v240[8], v244);
      v245(v17 + v240[9], v18 + v240[9], v244);
      goto LABEL_142;
    case 0x20u:
      v108 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v108;
      v109 = type metadata accessor for ExternalAgentTextQuery(0);
      v110 = *(int *)(v109 + 20);
      __dst = (void *)(v17 + v110);
      v111 = (const void *)(v18 + v110);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v111, 1, v7))
      {
        v112 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dst, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        v388(__dst, v111, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dst, 0, 1, v7);
      }
      v224 = *(int *)(v109 + 24);
      v225 = (_QWORD *)(v17 + v224);
      v226 = (_QWORD *)(v18 + v224);
      v227 = v226[1];
      if (v227)
        goto LABEL_130;
      *(_OWORD *)v225 = *(_OWORD *)v226;
      v225[2] = v226[2];
      goto LABEL_142;
    case 0x21u:
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v174 = type metadata accessor for ExternalAgentSpeechQuery(0);
      v175 = *(int *)(v174 + 20);
      __dstc = (void *)(v17 + v175);
      v176 = (const void *)(v18 + v175);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v176, 1, v7))
      {
        v177 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dstc, v176, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
      }
      else
      {
        v388(__dstc, v176, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstc, 0, 1, v7);
      }
      v267 = *(int *)(v174 + 24);
      v225 = (_QWORD *)(v17 + v267);
      v226 = (_QWORD *)(v18 + v267);
      v227 = v226[1];
      if (v227)
        goto LABEL_130;
      *(_OWORD *)v225 = *(_OWORD *)v226;
      v225[2] = v226[2];
      goto LABEL_142;
    case 0x22u:
      v113 = type metadata accessor for RequestContent(0);
      v114 = swift_getEnumCaseMultiPayload();
      if (v114 != 3)
      {
        if (v114 == 2)
        {
          *(_QWORD *)v17 = *(_QWORD *)v18;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v114 != 1)
          {
            memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
            goto LABEL_137;
          }
          v115 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *(_QWORD *)(v17 + 8) = v115;
          v116 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v365 = (void *)(v17 + v116);
          v117 = v18 + v116;
          v118 = sub_23FB2C764();
          v119 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 16);
          swift_bridgeObjectRetain();
          v119(v365, v117, v118);
          v7 = v389;
        }
LABEL_136:
        swift_storeEnumTagMultiPayload();
LABEL_137:
        v318 = type metadata accessor for ExternalAgentRequest(0);
        v319 = *(int *)(v318 + 20);
        v320 = (void *)(v17 + v319);
        v321 = (const void *)(v18 + v319);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v319, 1, v7))
        {
          v322 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v320, v321, *(_QWORD *)(*(_QWORD *)(v322 - 8) + 64));
        }
        else
        {
          v388(v320, v321, v7);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v320, 0, 1, v7);
        }
        v323 = *(int *)(v318 + 24);
        v225 = (_QWORD *)(v17 + v323);
        v226 = (_QWORD *)(v18 + v323);
        v227 = v226[1];
        if (v227)
          goto LABEL_130;
        *(_OWORD *)v225 = *(_OWORD *)v226;
        v225[2] = v226[2];
        goto LABEL_142;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v7))
      {
        v269 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v17, (uint64_t *)v18, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v7);
      }
      v288 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v8((uint64_t *)(v17 + v288[5]), (uint64_t *)(v18 + v288[5]), v7);
      v289 = v288[6];
      v290 = (void *)(v17 + v289);
      v291 = (const void *)(v18 + v289);
      v292 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v293 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v293 - 8) + 16))(v290, v291, v293);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v290, v291, *(_QWORD *)(*(_QWORD *)(v292 - 8) + 64));
      }
      v294 = v288[7];
      v295 = v17 + v294;
      v296 = v18 + v294;
      v297 = sub_23FB2C764();
      v298 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v297 - 8) + 16);
      v372 = (void *)v297;
      v298(v295, v296);
      v299 = v288[8];
      v300 = (_QWORD *)(v17 + v299);
      v301 = (_QWORD *)(v18 + v299);
      v302 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v303 = swift_getEnumCaseMultiPayload();
      if (v303 == 1)
      {
        *v300 = *v301;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v303)
        {
          memcpy(v300, v301, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
          goto LABEL_135;
        }
        v304 = v301[1];
        *v300 = *v301;
        v300[1] = v304;
        v305 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v359 = (char *)v300 + v305;
        v306 = (char *)v301 + v305;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v298)(v359, v306, v372);
      }
      swift_storeEnumTagMultiPayload();
LABEL_135:
      v7 = v389;
      goto LABEL_136;
    case 0x23u:
      v178 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(v17, v18, v178);
      v179 = type metadata accessor for ExternalAgentOutcome(0);
      v180 = *(int *)(v179 + 20);
      v181 = v17 + v180;
      v182 = v18 + v180;
      v183 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v181, v182, v183);
      *(_QWORD *)(v17 + *(int *)(v179 + 24)) = *(_QWORD *)(v18 + *(int *)(v179 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0x25u:
      v120 = sub_23FB2E8D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v17, v18, v120);
      v121 = type metadata accessor for ToolResolution(0);
      v122 = *(int *)(v121 + 20);
      __dsti = (void *)(v17 + v122);
      v123 = v18 + v122;
      v124 = sub_23FB2C764();
      v125 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 16);
      v125(__dsti, v123, v124);
      v125((void *)(v17 + *(int *)(v121 + 24)), v18 + *(int *)(v121 + 24), v124);
      goto LABEL_142;
    case 0x26u:
      v126 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v126;
      v127 = type metadata accessor for UndoRedoRequest(0);
      v128 = *(int *)(v127 + 20);
      v366 = (void *)(v17 + v128);
      __dsta = (int *)v127;
      v129 = (const void *)(v18 + v128);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v129, 1, v7))
      {
        v130 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v366, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v366, (uint64_t *)v129, v7);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v366, 0, 1, v7);
      }
      *(_BYTE *)(v17 + __dsta[6]) = *(_BYTE *)(v18 + __dsta[6]);
      v228 = __dsta[7];
      v229 = v17 + v228;
      v230 = v18 + v228;
      v231 = sub_23FB2C764();
      v370 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v231 - 8) + 16);
      v370(v229, v230, v231);
      v232 = __dsta[8];
      v233 = (void *)(v17 + v232);
      v234 = (const void *)(v18 + v232);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v232, 1, v231))
      {
        v235 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
      }
      else
      {
        v370((uint64_t)v233, (uint64_t)v234, v231);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v233, 0, 1, v231);
      }
      goto LABEL_142;
    case 0x27u:
      v8((uint64_t *)v17, (uint64_t *)v18, v7);
      v131 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(_BYTE *)(v17 + v131[5]) = *(_BYTE *)(v18 + v131[5]);
      v132 = v131[6];
      v133 = v17 + v132;
      __dstj = (void *)(v18 + v132);
      v134 = sub_23FB2C764();
      v135 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
      v135(v133, __dstj, v134);
      v136 = v131[7];
      v137 = (void *)(v17 + v136);
      v138 = (const void *)(v18 + v136);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v136, 1, v134))
      {
        v139 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
      }
      else
      {
        v135((uint64_t)v137, (void *)v138, v134);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v137, 0, 1, v134);
      }
      goto LABEL_142;
    case 0x28u:
      v140 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v17, v18, v140);
      v141 = type metadata accessor for TypeConversionRequest(0);
      v142 = *(int *)(v141 + 20);
      v143 = v17 + v142;
      v144 = v18 + v142;
      v145 = sub_23FB2ED5C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      v146 = *(int *)(v141 + 24);
      v147 = v17 + v146;
      v148 = v18 + v146;
      v149 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v147, v148, v149);
      goto LABEL_142;
    case 0x29u:
      v150 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v17, v18, v150);
      v151 = type metadata accessor for TypeConversionResult(0);
      v152 = *(int *)(v151 + 20);
      __dstk = (void *)(v17 + v152);
      v153 = v18 + v152;
      v154 = sub_23FB2C764();
      v155 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 16);
      v155(__dstk, v153, v154);
      v155((void *)(v17 + *(int *)(v151 + 24)), v18 + *(int *)(v151 + 24), v154);
      goto LABEL_142;
    case 0x2Au:
      v156 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v156;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      DecorationResult = type metadata accessor for QueryDecorationResult(0);
      v158 = *(int *)(DecorationResult + 28);
      v367 = (void *)(v17 + v158);
      __dstb = (int *)DecorationResult;
      v159 = (const void *)(v18 + v158);
      v360 = sub_23FB2E354();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v159, 1, v360))
      {
        v160 = sub_23F6916B8(&qword_256EA71F8);
        memcpy(v367, v159, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v360 - 8) + 16))(v367, v159, v360);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v367, 0, 1, v360);
      }
      *(_QWORD *)(v17 + __dstb[8]) = *(_QWORD *)(v18 + __dstb[8]);
      swift_bridgeObjectRetain();
      goto LABEL_142;
    case 0x2Cu:
      v184 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v17, v18, v184);
      DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      v186 = *(int *)(DecorationPrePlannerResult + 20);
      v187 = (_QWORD *)(v17 + v186);
      v188 = (uint64_t *)(v18 + v186);
      v190 = *v188;
      v189 = v188[1];
      *v187 = v190;
      v187[1] = v189;
      v191 = *(int *)(DecorationPrePlannerResult + 24);
      v192 = v17 + v191;
      v193 = (uint64_t *)(v18 + v191);
      v194 = *v193;
      LOBYTE(v193) = *((_BYTE *)v193 + 8);
      *(_QWORD *)v192 = v194;
      *(_BYTE *)(v192 + 8) = (_BYTE)v193;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_142;
    default:
      memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_143;
  }
}

uint64_t sub_23F73515C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBFu)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t _s19InstrumentableEventVwxx(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t StepResults;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  int v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  int v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v2 = sub_23FB2C4B8();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  v4 = (int *)type metadata accessor for Session.Event(0);
  v3(a1 + v4[5], v2);
  v5 = a1 + v4[6];
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v5, 1, v2))v3(v5, v2);
  v6 = a1 + v4[7];
  type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = sub_23FB2C998();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      v6 += *(int *)(type metadata accessor for SessionStart(0) + 20);
      v8 = sub_23FB2C908();
      goto LABEL_92;
    case 1u:
      swift_bridgeObjectRelease();
      v9 = v6 + *(int *)(type metadata accessor for TextQuery(0) + 24);
      v10 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
      goto LABEL_107;
    case 2u:
    case 0x16u:
    case 0x1Bu:
    case 0x24u:
      goto LABEL_106;
    case 3u:
      type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v2))v3(v6, v2);
        v76 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v3(v6 + v76[5], v2);
        v77 = v6 + v76[6];
        type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v78 = sub_23FB2ED38();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v77, v78);
        }
        v79 = v6 + v76[7];
        v80 = sub_23FB2C764();
        v81 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8);
        v81(v79, v80);
        v82 = v6 + v76[8];
        type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        v83 = swift_getEnumCaseMultiPayload();
        if (v83 != 1)
        {
          if (!v83)
          {
            swift_bridgeObjectRelease();
            v84 = type metadata accessor for RequestContent.TextContent(0);
            v81(v82 + *(int *)(v84 + 20), v80);
          }
          goto LABEL_95;
        }
      }
      else if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          v12 = v6 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v13 = sub_23FB2C764();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
        }
LABEL_95:
        v94 = (int *)type metadata accessor for Request(0);
        v95 = v6 + v94[6];
        v96 = *(unsigned __int8 *)(v95 + 16);
        if (v96 <= 0xFD)
          sub_23F735FE8(*(_QWORD *)v95, *(_QWORD *)(v95 + 8), v96);
        v97 = v6 + v94[7];
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v97, 1, v2))v3(v97, v2);
        v98 = v94[8];
        goto LABEL_105;
      }
      swift_bridgeObjectRelease();
      goto LABEL_95;
    case 4u:
    case 0x1Cu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_106;
    case 5u:
      v14 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v6, v14);
      type metadata accessor for Action(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_107;
    case 6u:
      v15 = sub_23FB2C764();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v15))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v6, v15);
      v16 = v6 + *(int *)(type metadata accessor for ActionCancellation(0) + 20);
      v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
LABEL_15:
      v18 = v15;
      goto LABEL_93;
    case 7u:
      v19 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v6, v19);
      type metadata accessor for ClientAction(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_107;
    case 8u:
      v20 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v6, v20);
      type metadata accessor for QueryStep(0);
      goto LABEL_107;
    case 9u:
      v21 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v6, v21);
      type metadata accessor for VariableStep(0);
      goto LABEL_107;
    case 0xAu:
    case 0xBu:
    case 0x15u:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
    case 0x1Du:
      goto LABEL_107;
    case 0xCu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_107;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_91;
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          if (swift_getEnumCaseMultiPayload() > 2)
            goto LABEL_108;
LABEL_91:
          v8 = sub_23FB2C6F8();
          goto LABEL_92;
        case 2u:
        case 3u:
          v15 = sub_23FB2C6F8();
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v15))goto LABEL_108;
          v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
          v16 = v6;
          goto LABEL_15;
        default:
          goto LABEL_108;
      }
    case 0xEu:
      sub_23F6BC34C(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
      sub_23F6BC34C(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
      goto LABEL_107;
    case 0xFu:
      v8 = sub_23FB2C77C();
      goto LABEL_92;
    case 0x10u:
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v2))v3(v6, v2);
      v22 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v3(v6 + v22[5], v2);
      v23 = v6 + v22[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v24 = sub_23FB2ED38();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
      }
      v25 = v6 + v22[7];
      v26 = sub_23FB2C764();
      v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
      v27(v25, v26);
      v28 = v6 + v22[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v29 = swift_getEnumCaseMultiPayload();
      if (v29 == 1)
        goto LABEL_107;
      if (v29)
        goto LABEL_108;
      swift_bridgeObjectRelease();
      v30 = v28 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
LABEL_52:
      v55 = v26;
LABEL_59:
      v27(v30, v55);
      goto LABEL_108;
    case 0x11u:
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v2))v3(v6, v2);
      v31 = type metadata accessor for ActionStepResult(0);
      swift_bridgeObjectRelease();
      v32 = v6 + *(int *)(v31 + 24);
      v33 = sub_23FB2C80C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      v34 = v32 + *(int *)(type metadata accessor for ActionResult(0) + 20);
      v35 = sub_23FB2D0B8();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v34, 1, v35))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
      goto LABEL_107;
    case 0x12u:
      swift_bridgeObjectRelease();
      StepResults = type metadata accessor for QueryStepResults(0);
      v37 = v6 + *(int *)(StepResults + 20);
      v38 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
      v3(v6 + *(int *)(StepResults + 24), v2);
      goto LABEL_108;
    case 0x13u:
      v8 = sub_23FB2C938();
      goto LABEL_92;
    case 0x14u:
      v39 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v6, v39);
      type metadata accessor for ActionResolverRequest(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_107;
    case 0x1Eu:
      v8 = sub_23FB2D004();
      goto LABEL_92;
    case 0x1Fu:
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v2))v3(v6, v2);
      v40 = (int *)type metadata accessor for StatementResult(0);
      swift_bridgeObjectRelease();
      v41 = v6 + v40[6];
      v42 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
      v43 = v41 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v44 = sub_23FB2D0B8();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v43, 1, v44))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
      v45 = v6 + v40[7];
      v46 = sub_23FB2C764();
      v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8);
      v27(v45, v46);
      v27(v6 + v40[8], v46);
      v47 = v40[9];
      goto LABEL_58;
    case 0x20u:
      swift_bridgeObjectRelease();
      v48 = type metadata accessor for ExternalAgentTextQuery(0);
      goto LABEL_102;
    case 0x21u:
      swift_bridgeObjectRelease();
      v48 = type metadata accessor for ExternalAgentSpeechQuery(0);
      goto LABEL_102;
    case 0x22u:
      type metadata accessor for RequestContent(0);
      v69 = swift_getEnumCaseMultiPayload();
      if (v69 != 3)
      {
        if (v69 != 2)
        {
          if (v69 == 1)
          {
            swift_bridgeObjectRelease();
            v70 = v6 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v71 = sub_23FB2C764();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v70, v71);
          }
          goto LABEL_101;
        }
LABEL_100:
        swift_bridgeObjectRelease();
        goto LABEL_101;
      }
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v2))v3(v6, v2);
      v85 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v3(v6 + v85[5], v2);
      v86 = v6 + v85[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v87 = sub_23FB2ED38();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v86, v87);
      }
      v88 = v6 + v85[7];
      v89 = sub_23FB2C764();
      v90 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 8);
      v90(v88, v89);
      v91 = v6 + v85[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v92 = swift_getEnumCaseMultiPayload();
      if (v92 == 1)
        goto LABEL_100;
      if (!v92)
      {
        swift_bridgeObjectRelease();
        v93 = type metadata accessor for RequestContent.TextContent(0);
        v90(v91 + *(int *)(v93 + 20), v89);
      }
LABEL_101:
      v48 = type metadata accessor for ExternalAgentRequest(0);
LABEL_102:
      v99 = v48;
      v100 = v6 + *(int *)(v48 + 20);
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v100, 1, v2))v3(v100, v2);
      v98 = *(int *)(v99 + 24);
LABEL_105:
      if (*(_QWORD *)(v6 + v98 + 8))
      {
LABEL_106:
        swift_bridgeObjectRelease();
LABEL_107:
        swift_bridgeObjectRelease();
      }
LABEL_108:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v101 = a1 + v4[12];
      v102 = sub_23FB2C470();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 8))(v101, v102);
      v103 = type metadata accessor for Timepoint();
      v3(v101 + *(int *)(v103 + 28), v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0x23u:
      v72 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v6, v72);
      v73 = v6 + *(int *)(type metadata accessor for ExternalAgentOutcome(0) + 20);
      v74 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v73, v74);
      goto LABEL_107;
    case 0x25u:
      v49 = sub_23FB2E8D0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v6, v49);
      v50 = type metadata accessor for ToolResolution(0);
      goto LABEL_57;
    case 0x26u:
      swift_bridgeObjectRelease();
      v51 = (int *)type metadata accessor for UndoRedoRequest(0);
      v52 = v6 + v51[5];
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v52, 1, v2))v3(v52, v2);
      v53 = v6 + v51[7];
      v26 = sub_23FB2C764();
      v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
      v27(v53, v26);
      v54 = v6 + v51[8];
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v54, 1, v26))goto LABEL_108;
      v30 = v54;
      goto LABEL_52;
    case 0x27u:
      v3(v6, v2);
      v56 = type metadata accessor for ClientUndoRedoRequest(0);
      v57 = v6 + *(int *)(v56 + 24);
      v58 = sub_23FB2C764();
      v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8);
      v27(v57, v58);
      v59 = v6 + *(int *)(v56 + 28);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v59, 1, v58))goto LABEL_108;
      v30 = v59;
      v55 = v58;
      goto LABEL_59;
    case 0x28u:
      v60 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v6, v60);
      v61 = type metadata accessor for TypeConversionRequest(0);
      v62 = v6 + *(int *)(v61 + 20);
      v63 = sub_23FB2ED5C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v62, v63);
      v6 += *(int *)(v61 + 24);
      v8 = sub_23FB2C764();
LABEL_92:
      v18 = v8;
      v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v16 = v6;
LABEL_93:
      v17(v16, v18);
      goto LABEL_108;
    case 0x29u:
      v64 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v6, v64);
      v50 = type metadata accessor for TypeConversionResult(0);
LABEL_57:
      v65 = v50;
      v66 = v6 + *(int *)(v50 + 20);
      v46 = sub_23FB2C764();
      v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8);
      v27(v66, v46);
      v47 = *(int *)(v65 + 24);
LABEL_58:
      v30 = v6 + v47;
      v55 = v46;
      goto LABEL_59;
    case 0x2Au:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = v6 + *(int *)(type metadata accessor for QueryDecorationResult(0) + 28);
      v68 = sub_23FB2E354();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v67, 1, v68))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v67, v68);
      goto LABEL_107;
    case 0x2Cu:
      v75 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v6, v75);
      type metadata accessor for QueryDecorationPrePlannerResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_107;
    default:
      goto LABEL_108;
  }
}

uint64_t sub_23F735FE8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBFu)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s19InstrumentableEventVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  void (*v31)(uint64_t, void *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t Step;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t StepResults;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  void (*v106)(void *, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  void (*v126)(void *, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int *v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  const void *v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  void (*v172)(uint64_t, uint64_t, uint64_t);
  uint64_t v173;
  uint64_t DecorationResult;
  uint64_t v175;
  const void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t DecorationPrePlannerResult;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  void *v225;
  const void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(uint64_t, uint64_t, uint64_t);
  uint64_t v239;
  void *v240;
  const void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(uint64_t, uint64_t, uint64_t);
  uint64_t v253;
  void *v254;
  const void *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  int *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(uint64_t, uint64_t, uint64_t);
  uint64_t v267;
  int *v268;
  uint64_t v269;
  const void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(uint64_t, uint64_t, uint64_t);
  uint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void (*v290)(uint64_t, uint64_t, uint64_t);
  int *v291;
  uint64_t v292;
  const void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void (*v300)(uint64_t, uint64_t, uint64_t);
  uint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  void (*v309)(uint64_t, uint64_t, uint64_t);
  int *v310;
  uint64_t v311;
  const void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void (*v319)(uint64_t, uint64_t, uint64_t);
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  int *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  const void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  const void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int *v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t result;
  char *v380;
  char *v381;
  void *v382;
  void *v383;
  void *v384;
  void *v385;
  void *__dstg;
  void *__dsth;
  void *__dst;
  void *__dsta;
  int *__dstb;
  void *__dstc;
  int *__dstd;
  int *__dste;
  void *__dstf;
  int *v395;
  int *v396;
  int *v397;
  int *v398;
  int *v399;
  int *v400;
  void (*v401)(uint64_t, uint64_t, uint64_t);
  uint64_t v402;
  void (*v403)(void *, const void *, uint64_t);
  uint64_t v404;

  v6 = sub_23FB2C4B8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for Session.Event(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  v9 = v8[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a2 + v9, 1, v6))
  {
    v12 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v6);
  }
  v13 = v8[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Session.Event.Payload(0);
  v403 = (void (*)(void *, const void *, uint64_t))v7;
  v404 = v6;
  v402 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v17 = sub_23FB2C998();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = type metadata accessor for SessionStart(0);
      v19 = *(int *)(v18 + 20);
      v20 = v14 + v19;
      v21 = v15 + v19;
      v22 = sub_23FB2C908();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_BYTE *)(v14 + *(int *)(v18 + 24)) = *(_BYTE *)(v15 + *(int *)(v18 + 24));
      goto LABEL_143;
    case 1u:
      v23 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v23;
      *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
      v24 = type metadata accessor for TextQuery(0);
      v25 = *(int *)(v24 + 24);
      v26 = v14 + v25;
      __dstg = (void *)(v15 + v25);
      v27 = sub_23FB2C764();
      v28 = a1;
      v29 = a2;
      v30 = v8;
      v31 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      swift_bridgeObjectRetain();
      v31(v26, __dstg, v27);
      v8 = v30;
      a2 = v29;
      a1 = v28;
      v32 = *(int *)(v24 + 28);
      v33 = (_QWORD *)(v14 + v32);
      v34 = (_QWORD *)(v15 + v32);
      v35 = v34[1];
      *v33 = *v34;
      v33[1] = v35;
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 2u:
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      v36 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 3u:
      v37 = type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v395 = v8;
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(_QWORD *)v14 = *(_QWORD *)v15;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
            goto LABEL_125;
          }
          v39 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)v14 = *(_QWORD *)v15;
          *(_QWORD *)(v14 + 8) = v39;
          v40 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v41 = v14 + v40;
          v42 = v15 + v40;
          v43 = sub_23FB2C764();
          v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
          swift_bridgeObjectRetain();
          v44(v41, v42, v43);
        }
LABEL_124:
        swift_storeEnumTagMultiPayload();
LABEL_125:
        v328 = (int *)type metadata accessor for Request(0);
        *(_BYTE *)(v14 + v328[5]) = *(_BYTE *)(v15 + v328[5]);
        v329 = v328[6];
        v330 = v14 + v329;
        v331 = v15 + v329;
        v332 = *(unsigned __int8 *)(v331 + 16);
        if (v332 <= 0xFD)
        {
          v333 = *(_QWORD *)v331;
          v334 = *(_QWORD *)(v331 + 8);
          sub_23F73515C(*(_QWORD *)v331, v334, *(_BYTE *)(v331 + 16));
          *(_QWORD *)v330 = v333;
          *(_QWORD *)(v330 + 8) = v334;
          *(_BYTE *)(v330 + 16) = v332;
        }
        else
        {
          *(_OWORD *)v330 = *(_OWORD *)v331;
          *(_BYTE *)(v330 + 16) = *(_BYTE *)(v331 + 16);
        }
        v335 = v328[7];
        v336 = (void *)(v14 + v335);
        v337 = (const void *)(v15 + v335);
        v8 = v395;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15 + v335, 1, v404))
        {
          v338 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v336, v337, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
        }
        else
        {
          v403(v336, v337, v404);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v336, 0, 1, v404);
        }
        v339 = v328[8];
        v245 = v14 + v339;
        v246 = v15 + v339;
        v247 = *(_QWORD *)(v246 + 8);
        if (!v247)
        {
          *(_OWORD *)v245 = *(_OWORD *)v246;
          *(_QWORD *)(v245 + 16) = *(_QWORD *)(v246 + 16);
          goto LABEL_143;
        }
        goto LABEL_132;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15, 1, v6))
      {
        v288 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v288 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v14, 0, 1, v6);
      }
      v290 = v7;
      v291 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v290(v14 + v291[5], v15 + v291[5], v6);
      v292 = v291[6];
      v384 = (void *)(v14 + v292);
      v293 = (const void *)(v15 + v292);
      v294 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v295 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v295 - 8) + 16))(v384, v293, v295);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v384, v293, *(_QWORD *)(*(_QWORD *)(v294 - 8) + 64));
      }
      v296 = v291[7];
      v297 = v14 + v296;
      v298 = v15 + v296;
      v299 = sub_23FB2C764();
      v300 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v299 - 8) + 16);
      v300(v297, v298, v299);
      v301 = v291[8];
      v302 = (_QWORD *)(v14 + v301);
      v303 = (_QWORD *)(v15 + v301);
      v304 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v305 = swift_getEnumCaseMultiPayload();
      if (v305 == 1)
      {
        *v302 = *v303;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v305)
        {
          memcpy(v302, v303, *(_QWORD *)(*(_QWORD *)(v304 - 8) + 64));
          goto LABEL_124;
        }
        v306 = v303[1];
        *v302 = *v303;
        v302[1] = v306;
        v307 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v380 = (char *)v302 + v307;
        v308 = (char *)v303 + v307;
        swift_bridgeObjectRetain();
        v300((uint64_t)v380, (uint64_t)v308, v299);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_124;
    case 4u:
      v45 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v45;
      v46 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v46;
      v47 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = v47;
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
      *(_BYTE *)(v14 + 56) = *(_BYTE *)(v15 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 5u:
      v48 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v14, v15, v48);
      v49 = (int *)type metadata accessor for Action(0);
      v50 = v49[5];
      v51 = (_QWORD *)(v14 + v50);
      v52 = (uint64_t *)(v15 + v50);
      v54 = *v52;
      v53 = v52[1];
      *v51 = v54;
      v51[1] = v53;
      v55 = v49[6];
      v56 = (_QWORD *)(v14 + v55);
      v57 = (_QWORD *)(v15 + v55);
      v58 = v57[1];
      *v56 = *v57;
      v56[1] = v58;
      v59 = v49[7];
      v60 = (_QWORD *)(v14 + v59);
      v61 = (_QWORD *)(v15 + v59);
      v62 = v61[1];
      *v60 = *v61;
      v60[1] = v62;
      *(_BYTE *)(v14 + v49[8]) = *(_BYTE *)(v15 + v49[8]);
      *(_QWORD *)(v14 + v49[9]) = *(_QWORD *)(v15 + v49[9]);
      v63 = v49[10];
      v64 = (_QWORD *)(v14 + v63);
      v65 = (_QWORD *)(v15 + v63);
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 6u:
      v67 = sub_23FB2C764();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15, 1, v67))
      {
        v68 = sub_23F6916B8(&qword_256EA49D8);
        memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v14, v15, v67);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v14, 0, 1, v67);
      }
      v213 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v14 + *(int *)(v213 + 20), v15 + *(int *)(v213 + 20), v67);
      goto LABEL_143;
    case 7u:
      v69 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v14, v15, v69);
      v70 = (int *)type metadata accessor for ClientAction(0);
      v71 = v70[5];
      v72 = (_QWORD *)(v14 + v71);
      v73 = (uint64_t *)(v15 + v71);
      v75 = *v73;
      v74 = v73[1];
      *v72 = v75;
      v72[1] = v74;
      *(_QWORD *)(v14 + v70[6]) = *(_QWORD *)(v15 + v70[6]);
      v76 = v70[7];
      v77 = (_QWORD *)(v14 + v76);
      v78 = (_QWORD *)(v15 + v76);
      v79 = v78[1];
      *v77 = *v78;
      v77[1] = v79;
      v80 = v70[8];
      v81 = (_QWORD *)(v14 + v80);
      v82 = (_QWORD *)(v15 + v80);
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      *(_QWORD *)(v14 + v70[9]) = *(_QWORD *)(v15 + v70[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 8u:
      v84 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v14, v15, v84);
      Step = type metadata accessor for QueryStep(0);
      *(_QWORD *)(v14 + *(int *)(Step + 20)) = *(_QWORD *)(v15 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 9u:
      v86 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v14, v15, v86);
      v87 = type metadata accessor for VariableStep(0);
      *(_QWORD *)(v14 + *(int *)(v87 + 20)) = *(_QWORD *)(v15 + *(int *)(v87 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(_QWORD *)v14 = *(_QWORD *)v15;
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      v109 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v109;
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0xCu:
      v88 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v88;
      v89 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v89;
      v90 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = v90;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0xDu:
      type metadata accessor for SessionError();
      v91 = (char *)&loc_23F73665C + 4 * word_23FB59C3E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0xEu:
      v92 = *(_QWORD *)v15;
      v93 = *(_QWORD *)(v15 + 8);
      sub_23F6D1E20(*(_QWORD *)v15, v93);
      *(_QWORD *)v14 = v92;
      *(_QWORD *)(v14 + 8) = v93;
      v94 = *(_QWORD *)(v15 + 16);
      v95 = *(_QWORD *)(v15 + 24);
      sub_23F6D1E20(v94, v95);
      *(_QWORD *)(v14 + 16) = v94;
      *(_QWORD *)(v14 + 24) = v95;
      v96 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = v96;
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0xFu:
      v97 = sub_23FB2C77C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v14, v15, v97);
      goto LABEL_143;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15, 1, v6))
      {
        v179 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v14, 0, 1, v6);
      }
      v267 = v6;
      v268 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v7(v14 + v268[5], v15 + v268[5], v267);
      v269 = v268[6];
      __dstf = (void *)(v14 + v269);
      v270 = (const void *)(v15 + v269);
      v271 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      v399 = v8;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v272 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v272 - 8) + 16))(__dstf, v270, v272);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dstf, v270, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
      }
      v273 = v268[7];
      v274 = v14 + v273;
      v275 = v15 + v273;
      v276 = sub_23FB2C764();
      v277 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v276 - 8) + 16);
      v277(v274, v275, v276);
      v278 = v268[8];
      v279 = (_QWORD *)(v14 + v278);
      v280 = (_QWORD *)(v15 + v278);
      v281 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v282 = swift_getEnumCaseMultiPayload();
      if (v282 == 1)
      {
        *v279 = *v280;
        swift_bridgeObjectRetain();
        goto LABEL_95;
      }
      if (!v282)
      {
        v283 = v280[1];
        *v279 = *v280;
        v279[1] = v283;
        v284 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v285 = (char *)v279 + v284;
        v286 = (char *)v280 + v284;
        swift_bridgeObjectRetain();
        v277((uint64_t)v285, (uint64_t)v286, v276);
LABEL_95:
        swift_storeEnumTagMultiPayload();
        goto LABEL_97;
      }
      memcpy(v279, v280, *(_QWORD *)(*(_QWORD *)(v281 - 8) + 64));
LABEL_97:
      v8 = v399;
LABEL_143:
      swift_storeEnumTagMultiPayload();
LABEL_144:
      v346 = v8[8];
      v347 = (_QWORD *)(a1 + v346);
      v348 = (_QWORD *)(a2 + v346);
      v349 = v348[1];
      *v347 = *v348;
      v347[1] = v349;
      v350 = v8[9];
      v351 = (_QWORD *)(a1 + v350);
      v352 = (_QWORD *)(a2 + v350);
      v353 = v352[1];
      *v351 = *v352;
      v351[1] = v353;
      v354 = v8[10];
      v355 = (_QWORD *)(a1 + v354);
      v356 = (_QWORD *)(a2 + v354);
      v357 = v356[1];
      *v355 = *v356;
      v355[1] = v357;
      v358 = v8[11];
      v359 = (_QWORD *)(a1 + v358);
      v360 = (_QWORD *)(a2 + v358);
      v361 = v360[1];
      *v359 = *v360;
      v359[1] = v361;
      v362 = v8[12];
      v363 = a1 + v362;
      v364 = a2 + v362;
      v365 = v8;
      v366 = sub_23FB2C470();
      v401 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v366 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v401(v363, v364, v366);
      v367 = (int *)type metadata accessor for Timepoint();
      *(_QWORD *)(v363 + v367[5]) = *(_QWORD *)(v364 + v367[5]);
      *(_QWORD *)(v363 + v367[6]) = *(_QWORD *)(v364 + v367[6]);
      v403((void *)(v363 + v367[7]), (const void *)(v364 + v367[7]), v404);
      v368 = v365[13];
      v369 = (_QWORD *)(a1 + v368);
      v370 = (_QWORD *)(a2 + v368);
      v371 = v370[1];
      *v369 = *v370;
      v369[1] = v371;
      v372 = v365[14];
      v373 = a1 + v372;
      v374 = a2 + v372;
      *(_QWORD *)v373 = *(_QWORD *)v374;
      *(_BYTE *)(v373 + 8) = *(_BYTE *)(v374 + 8);
      *(_QWORD *)(a1 + v365[15]) = *(_QWORD *)(a2 + v365[15]);
      v375 = *(int *)(v402 + 20);
      v376 = (_QWORD *)(a1 + v375);
      v377 = (_QWORD *)(a2 + v375);
      v378 = v377[1];
      *v376 = *v377;
      v376[1] = v378;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 0x11u:
      v396 = v8;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15, 1, v6))
      {
        v98 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v14, 0, 1, v6);
      }
      v214 = type metadata accessor for ActionStepResult(0);
      v215 = *(int *)(v214 + 20);
      v216 = (_QWORD *)(v14 + v215);
      v217 = (_QWORD *)(v15 + v215);
      v218 = v217[1];
      *v216 = *v217;
      v216[1] = v218;
      __dstd = (int *)v214;
      v219 = *(int *)(v214 + 24);
      v220 = v14 + v219;
      v221 = v15 + v219;
      v222 = sub_23FB2C80C();
      v223 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v222 - 8) + 16);
      swift_bridgeObjectRetain();
      v223(v220, v221, v222);
      v224 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      v225 = (void *)(v220 + v224);
      v226 = (const void *)(v221 + v224);
      v227 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v226, 1, v227))
      {
        v228 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v227 - 8) + 16))(v225, v226, v227);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v225, 0, 1, v227);
      }
      v8 = v396;
      v257 = __dstd[7];
      v258 = (_QWORD *)(v14 + v257);
      v259 = (_QWORD *)(v15 + v257);
      v260 = v259[1];
      *v258 = *v259;
      v258[1] = v260;
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0x12u:
      *(_QWORD *)v14 = *(_QWORD *)v15;
      StepResults = type metadata accessor for QueryStepResults(0);
      v100 = *(int *)(StepResults + 20);
      __dsth = (void *)(v14 + v100);
      v101 = v15 + v100;
      v102 = sub_23FB2C764();
      v103 = a1;
      v104 = a2;
      v105 = v8;
      v106 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 16);
      swift_bridgeObjectRetain();
      v106(__dsth, v101, v102);
      v8 = v105;
      a2 = v104;
      a1 = v103;
      v403((void *)(v14 + *(int *)(StepResults + 24)), (const void *)(v15 + *(int *)(StepResults + 24)), v404);
      goto LABEL_143;
    case 0x13u:
      v107 = sub_23FB2C938();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v14, v15, v107);
      goto LABEL_143;
    case 0x14u:
      v180 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v14, v15, v180);
      v181 = (int *)type metadata accessor for ActionResolverRequest(0);
      v182 = v181[5];
      v183 = (_QWORD *)(v14 + v182);
      v184 = (uint64_t *)(v15 + v182);
      v186 = *v184;
      v185 = v184[1];
      *v183 = v186;
      v183[1] = v185;
      *(_QWORD *)(v14 + v181[6]) = *(_QWORD *)(v15 + v181[6]);
      *(_QWORD *)(v14 + v181[7]) = *(_QWORD *)(v15 + v181[7]);
      *(_QWORD *)(v14 + v181[8]) = *(_QWORD *)(v15 + v181[8]);
      *(_BYTE *)(v14 + v181[9]) = *(_BYTE *)(v15 + v181[9]);
      *(_BYTE *)(v14 + v181[10]) = *(_BYTE *)(v15 + v181[10]);
      *(_BYTE *)(v14 + v181[11]) = *(_BYTE *)(v15 + v181[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0x16u:
    case 0x24u:
      v108 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v108;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0x1Bu:
      v187 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v187;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0x1Cu:
      v188 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v188;
      v189 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v189;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
      v190 = *(_QWORD *)(v15 + 40);
      v191 = *(_QWORD *)(v15 + 48);
      *(_QWORD *)(v14 + 40) = v190;
      *(_QWORD *)(v14 + 48) = v191;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0x1Eu:
      v110 = sub_23FB2D004();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v14, v15, v110);
      goto LABEL_143;
    case 0x1Fu:
      v397 = v8;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15, 1, v6))
      {
        v111 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v14, 0, 1, v6);
      }
      v229 = type metadata accessor for StatementResult(0);
      v230 = *(int *)(v229 + 20);
      v231 = (_QWORD *)(v14 + v230);
      v232 = (_QWORD *)(v15 + v230);
      v233 = v232[1];
      *v231 = *v232;
      v231[1] = v233;
      __dste = (int *)v229;
      v234 = *(int *)(v229 + 24);
      v235 = v14 + v234;
      v236 = v15 + v234;
      v237 = sub_23FB2D0DC();
      v238 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v237 - 8) + 16);
      swift_bridgeObjectRetain();
      v238(v235, v236, v237);
      v239 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v240 = (void *)(v235 + v239);
      v241 = (const void *)(v236 + v239);
      v242 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v241, 1, v242))
      {
        v243 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v242 - 8) + 16))(v240, v241, v242);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v240, 0, 1, v242);
      }
      v261 = __dste;
      v262 = __dste[7];
      v263 = v14 + v262;
      v264 = v15 + v262;
      v265 = sub_23FB2C764();
      v266 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v265 - 8) + 16);
      v266(v263, v264, v265);
      v266(v14 + v261[8], v15 + v261[8], v265);
      v266(v14 + v261[9], v15 + v261[9], v265);
      goto LABEL_79;
    case 0x20u:
      v112 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v112;
      v113 = type metadata accessor for ExternalAgentTextQuery(0);
      v114 = *(int *)(v113 + 20);
      __dst = (void *)(v14 + v114);
      v115 = (const void *)(v15 + v114);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v115, 1, v6))
      {
        v116 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dst, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
      }
      else
      {
        v403(__dst, v115, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dst, 0, 1, v6);
      }
      v244 = *(int *)(v113 + 24);
      v245 = v14 + v244;
      v246 = v15 + v244;
      v247 = *(_QWORD *)(v246 + 8);
      if (v247)
        goto LABEL_132;
      *(_OWORD *)v245 = *(_OWORD *)v246;
      *(_QWORD *)(v245 + 16) = *(_QWORD *)(v246 + 16);
      goto LABEL_143;
    case 0x21u:
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v192 = type metadata accessor for ExternalAgentSpeechQuery(0);
      v193 = *(int *)(v192 + 20);
      __dstc = (void *)(v14 + v193);
      v194 = (const void *)(v15 + v193);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v194, 1, v6))
      {
        v195 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dstc, v194, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
      }
      else
      {
        v403(__dstc, v194, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstc, 0, 1, v6);
      }
      v287 = *(int *)(v192 + 24);
      v245 = v14 + v287;
      v246 = v15 + v287;
      v247 = *(_QWORD *)(v246 + 8);
      if (v247)
        goto LABEL_132;
      *(_OWORD *)v245 = *(_OWORD *)v246;
      *(_QWORD *)(v245 + 16) = *(_QWORD *)(v246 + 16);
      goto LABEL_143;
    case 0x22u:
      v117 = type metadata accessor for RequestContent(0);
      v118 = swift_getEnumCaseMultiPayload();
      if (v118 != 3)
      {
        if (v118 == 2)
        {
          *(_QWORD *)v14 = *(_QWORD *)v15;
          swift_bridgeObjectRetain();
          goto LABEL_105;
        }
        if (v118 == 1)
        {
          v119 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)v14 = *(_QWORD *)v15;
          *(_QWORD *)(v14 + 8) = v119;
          v120 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v382 = (void *)(v14 + v120);
          v121 = v15 + v120;
          v122 = sub_23FB2C764();
          v123 = a1;
          v124 = a2;
          v125 = v8;
          v126 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 16);
          swift_bridgeObjectRetain();
          v126(v382, v121, v122);
          v8 = v125;
          a2 = v124;
          a1 = v123;
LABEL_105:
          swift_storeEnumTagMultiPayload();
          goto LABEL_138;
        }
        memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
LABEL_138:
        v340 = type metadata accessor for ExternalAgentRequest(0);
        v341 = *(int *)(v340 + 20);
        v342 = (void *)(v14 + v341);
        v343 = (const void *)(v15 + v341);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15 + v341, 1, v404))
        {
          v344 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v342, v343, *(_QWORD *)(*(_QWORD *)(v344 - 8) + 64));
        }
        else
        {
          v403(v342, v343, v404);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v342, 0, 1, v404);
        }
        v345 = *(int *)(v340 + 24);
        v245 = v14 + v345;
        v246 = v15 + v345;
        v247 = *(_QWORD *)(v246 + 8);
        if (!v247)
        {
          *(_OWORD *)v245 = *(_OWORD *)v246;
          *(_QWORD *)(v245 + 16) = *(_QWORD *)(v246 + 16);
          goto LABEL_143;
        }
LABEL_132:
        *(_QWORD *)v245 = *(_QWORD *)v246;
        *(_QWORD *)(v245 + 8) = v247;
        *(_QWORD *)(v245 + 16) = *(_QWORD *)(v246 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_143;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15, 1, v6))
      {
        v289 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v289 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v14, 0, 1, v6);
      }
      v309 = v7;
      v310 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v309(v14 + v310[5], v15 + v310[5], v6);
      v311 = v310[6];
      v385 = (void *)(v14 + v311);
      v312 = (const void *)(v15 + v311);
      v313 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      v400 = v8;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v314 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v314 - 8) + 16))(v385, v312, v314);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v385, v312, *(_QWORD *)(*(_QWORD *)(v313 - 8) + 64));
      }
      v315 = v310[7];
      v316 = v14 + v315;
      v317 = v15 + v315;
      v318 = sub_23FB2C764();
      v319 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v318 - 8) + 16);
      v319(v316, v317, v318);
      v320 = v310[8];
      v321 = (_QWORD *)(v14 + v320);
      v322 = (_QWORD *)(v15 + v320);
      v323 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v324 = swift_getEnumCaseMultiPayload();
      if (v324 == 1)
      {
        *v321 = *v322;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v324)
        {
          memcpy(v321, v322, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
          goto LABEL_137;
        }
        v325 = v322[1];
        *v321 = *v322;
        v321[1] = v325;
        v326 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v381 = (char *)v321 + v326;
        v327 = (char *)v322 + v326;
        swift_bridgeObjectRetain();
        v319((uint64_t)v381, (uint64_t)v327, v318);
      }
      swift_storeEnumTagMultiPayload();
LABEL_137:
      swift_storeEnumTagMultiPayload();
      v8 = v400;
      goto LABEL_138;
    case 0x23u:
      v196 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v196 - 8) + 16))(v14, v15, v196);
      v197 = type metadata accessor for ExternalAgentOutcome(0);
      v198 = *(int *)(v197 + 20);
      v199 = v14 + v198;
      v200 = v15 + v198;
      v201 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v201 - 8) + 16))(v199, v200, v201);
      *(_QWORD *)(v14 + *(int *)(v197 + 24)) = *(_QWORD *)(v15 + *(int *)(v197 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0x25u:
      v127 = sub_23FB2E8D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v14, v15, v127);
      v128 = type metadata accessor for ToolResolution(0);
      v129 = *(int *)(v128 + 20);
      v130 = v14 + v129;
      v131 = v15 + v129;
      v132 = sub_23FB2C764();
      v133 = a1;
      v134 = a2;
      v135 = v8;
      v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 16);
      v136(v130, v131, v132);
      v136(v14 + *(int *)(v128 + 24), v15 + *(int *)(v128 + 24), v132);
      v8 = v135;
      a2 = v134;
      a1 = v133;
      goto LABEL_143;
    case 0x26u:
      v137 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v137;
      v138 = v6;
      v139 = (int *)type metadata accessor for UndoRedoRequest(0);
      v140 = v139[5];
      __dsta = (void *)(v14 + v140);
      v141 = (const void *)(v15 + v140);
      swift_bridgeObjectRetain();
      v398 = v8;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v141, 1, v138))
      {
        v142 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dsta, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
      }
      else
      {
        v403(__dsta, v141, v138);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dsta, 0, 1, v138);
      }
      *(_BYTE *)(v14 + v139[6]) = *(_BYTE *)(v15 + v139[6]);
      v248 = v139[7];
      v249 = v14 + v248;
      v250 = v15 + v248;
      v251 = sub_23FB2C764();
      v252 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v251 - 8) + 16);
      v252(v249, v250, v251);
      v253 = v139[8];
      v254 = (void *)(v14 + v253);
      v255 = (const void *)(v15 + v253);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v255, 1, v251))
      {
        v256 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v256 - 8) + 64));
      }
      else
      {
        v252((uint64_t)v254, (uint64_t)v255, v251);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v254, 0, 1, v251);
      }
      v8 = v398;
      goto LABEL_143;
    case 0x27u:
      v397 = v8;
      v7(v14, v15, v6);
      v143 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(_BYTE *)(v14 + v143[5]) = *(_BYTE *)(v15 + v143[5]);
      v144 = v143[6];
      v145 = v14 + v144;
      v146 = v15 + v144;
      v147 = sub_23FB2C764();
      v148 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 16);
      v148(v145, v146, v147);
      v149 = v143[7];
      v150 = (void *)(v14 + v149);
      v151 = (const void *)(v15 + v149);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v151, 1, v147))
      {
        v152 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
      }
      else
      {
        v148((uint64_t)v150, (uint64_t)v151, v147);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v150, 0, 1, v147);
      }
LABEL_79:
      swift_storeEnumTagMultiPayload();
      v8 = v397;
      goto LABEL_144;
    case 0x28u:
      v153 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v14, v15, v153);
      v154 = type metadata accessor for TypeConversionRequest(0);
      v155 = *(int *)(v154 + 20);
      v156 = v14 + v155;
      v157 = v15 + v155;
      v158 = sub_23FB2ED5C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 16))(v156, v157, v158);
      v159 = *(int *)(v154 + 24);
      v160 = v14 + v159;
      v161 = v15 + v159;
      v162 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v160, v161, v162);
      goto LABEL_143;
    case 0x29u:
      v163 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v14, v15, v163);
      v164 = type metadata accessor for TypeConversionResult(0);
      v165 = *(int *)(v164 + 20);
      v166 = v14 + v165;
      v167 = v15 + v165;
      v168 = sub_23FB2C764();
      v169 = a1;
      v170 = a2;
      v171 = v8;
      v172 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 16);
      v172(v166, v167, v168);
      v172(v14 + *(int *)(v164 + 24), v15 + *(int *)(v164 + 24), v168);
      v8 = v171;
      a2 = v170;
      a1 = v169;
      goto LABEL_143;
    case 0x2Au:
      v173 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v173;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      DecorationResult = type metadata accessor for QueryDecorationResult(0);
      v175 = *(int *)(DecorationResult + 28);
      v383 = (void *)(v14 + v175);
      __dstb = (int *)DecorationResult;
      v176 = (const void *)(v15 + v175);
      v177 = sub_23FB2E354();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v176, 1, v177))
      {
        v178 = sub_23F6916B8(&qword_256EA71F8);
        memcpy(v383, v176, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v383, v176, v177);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v383, 0, 1, v177);
      }
      *(_QWORD *)(v14 + __dstb[8]) = *(_QWORD *)(v15 + __dstb[8]);
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 0x2Cu:
      v202 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v14, v15, v202);
      DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      v204 = *(int *)(DecorationPrePlannerResult + 20);
      v205 = (_QWORD *)(v14 + v204);
      v206 = (uint64_t *)(v15 + v204);
      v208 = *v206;
      v207 = v206[1];
      *v205 = v208;
      v205[1] = v207;
      v209 = *(int *)(DecorationPrePlannerResult + 24);
      v210 = v14 + v209;
      v211 = (uint64_t *)(v15 + v209);
      v212 = *v211;
      LOBYTE(v211) = *((_BYTE *)v211 + 8);
      *(_QWORD *)v210 = v212;
      *(_BYTE *)(v210 + 8) = (_BYTE)v211;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_143;
    default:
      memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_144;
  }
}

uint64_t _s19InstrumentableEventVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void *, void *, uint64_t);
  uint64_t v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t Step;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t StepResults;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void *, void *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const void *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(void *, void *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  const void *v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t DecorationPrePlannerResult;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  void *v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t v196;
  void *v197;
  const void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(uint64_t, uint64_t, uint64_t);
  uint64_t v210;
  void *v211;
  const void *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  int *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(void *, uint64_t, uint64_t);
  __int128 v222;
  int *v223;
  uint64_t v224;
  void *v225;
  const void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  const void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  int v260;
  uint64_t v261;
  char *v262;
  int *v263;
  uint64_t v264;
  const void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  char *v278;
  char *v279;
  int *v280;
  uint64_t v281;
  uint64_t v282;
  __int128 *v283;
  unsigned int v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  const void *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  const void *v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  __int128 v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  _QWORD *v309;
  uint64_t v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t result;
  char *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void (*v337)(uint64_t, uint64_t, uint64_t);
  void (*v338)(uint64_t, uint64_t);
  void (*v339)(uint64_t, void *, uint64_t);
  void *v340;
  void *v341;
  void *v342;
  void *v343;
  void *v344;
  int *v345;
  _QWORD *v346;
  void *v347;
  void *v348;
  void *__dstg;
  _QWORD *__dst;
  _QWORD *__dsta;
  int *__dsth;
  void *__dstb;
  int *__dsti;
  int *__dstc;
  int *__dstd;
  int *__dste;
  void (*__dstf)(uint64_t, uint64_t, uint64_t);
  void *__dstj;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  void (*v378)(uint64_t, uint64_t, uint64_t);
  void (*v379)(uint64_t, uint64_t, uint64_t);
  void (*v380)(uint64_t, uint64_t, uint64_t);
  void (*v381)(uint64_t, uint64_t, uint64_t);
  void (*v382)(uint64_t, uint64_t, uint64_t);
  void (*v383)(uint64_t, uint64_t, uint64_t);
  void (*v384)(uint64_t, uint64_t, uint64_t);
  void (*v385)(uint64_t, uint64_t, uint64_t);
  void (*v386)(uint64_t, uint64_t, uint64_t);
  void (*v387)(uint64_t, uint64_t, uint64_t);
  void (*v388)(uint64_t, uint64_t, uint64_t);
  void (*v389)(uint64_t, uint64_t, uint64_t);
  void (*v390)(uint64_t, uint64_t, uint64_t);
  void (*v391)(uint64_t, uint64_t, uint64_t);
  void (*v392)(uint64_t, uint64_t, uint64_t);
  void (*v393)(uint64_t, uint64_t, uint64_t);

  v6 = sub_23FB2C4B8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for Session.Event(0);
  v8(a1 + v9[5], a2 + v9[5], v6);
  v10 = v9[6];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1 + v10, 1, v6);
  v14 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v11, v12, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  if (a1 != a2)
  {
    v16 = v9[7];
    v17 = a1 + v16;
    v18 = a2 + v16;
    sub_23F6F5978(a1 + v16, type metadata accessor for Session.Event.Payload);
    v19 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v20 = sub_23FB2C998();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
        v21 = type metadata accessor for SessionStart(0);
        v22 = *(int *)(v21 + 20);
        v378 = v8;
        v23 = v17 + v22;
        v24 = a3;
        v25 = v18 + v22;
        v26 = sub_23FB2C908();
        v27 = v23;
        v8 = v378;
        v28 = v25;
        a3 = v24;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v27, v28, v26);
        *(_BYTE *)(v17 + *(int *)(v21 + 24)) = *(_BYTE *)(v18 + *(int *)(v21 + 24));
        goto LABEL_153;
      case 1u:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
        v366 = a3;
        v379 = v8;
        v29 = type metadata accessor for TextQuery(0);
        v30 = *(int *)(v29 + 24);
        v31 = v17 + v30;
        __dstg = (void *)(v18 + v30);
        v32 = sub_23FB2C764();
        v339 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
        swift_bridgeObjectRetain();
        v33 = v31;
        a3 = v366;
        v339(v33, __dstg, v32);
        v34 = *(int *)(v29 + 28);
        v8 = v379;
        v35 = (_QWORD *)(v17 + v34);
        v36 = (_QWORD *)(v18 + v34);
        *v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 2u:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 3u:
        __dst = (_QWORD *)type metadata accessor for RequestContent(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v367 = a3;
        v380 = v8;
        v360 = v17;
        if (EnumCaseMultiPayload != 3)
        {
          if (EnumCaseMultiPayload == 2)
          {
            *(_QWORD *)v17 = *(_QWORD *)v18;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (EnumCaseMultiPayload != 1)
            {
              memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(__dst - 1) + 64));
              goto LABEL_132;
            }
            *(_QWORD *)v17 = *(_QWORD *)v18;
            *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
            v38 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v333 = (void *)(v18 + v38);
            v340 = (void *)(v17 + v38);
            v39 = sub_23FB2C764();
            v40 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
            swift_bridgeObjectRetain();
            v40(v340, v333, v39);
          }
          goto LABEL_131;
        }
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v6))
        {
          v245 = sub_23F6916B8(&qword_256EA2798);
          memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v6);
        }
        v247 = type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17 + *(int *)(v247 + 20), v18 + *(int *)(v247 + 20), v6);
        v248 = *(int *)(v247 + 24);
        v336 = (void *)(v17 + v248);
        v345 = (int *)v247;
        v249 = (const void *)(v18 + v248);
        v250 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v251 = sub_23FB2ED38();
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v251 - 8) + 16))(v336, v249, v251);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v336, v249, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
        }
        v252 = v345[7];
        v253 = v17 + v252;
        v254 = v18 + v252;
        v255 = sub_23FB2C764();
        v256 = v253;
        v17 = v360;
        v337 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v255 - 8) + 16);
        v337(v256, v254, v255);
        v257 = v345[8];
        v258 = (_QWORD *)(v360 + v257);
        v259 = (_QWORD *)(v18 + v257);
        v346 = (_QWORD *)type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        v260 = swift_getEnumCaseMultiPayload();
        if (v260 == 1)
        {
          *v258 = *v259;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v260)
          {
            memcpy(v258, v259, *(_QWORD *)(*(v346 - 1) + 64));
LABEL_131:
            swift_storeEnumTagMultiPayload();
LABEL_132:
            v280 = (int *)type metadata accessor for Request(0);
            *(_BYTE *)(v17 + v280[5]) = *(_BYTE *)(v18 + v280[5]);
            v281 = v280[6];
            v282 = v17 + v281;
            v283 = (__int128 *)(v18 + v281);
            v284 = *((unsigned __int8 *)v283 + 16);
            if (v284 <= 0xFD)
            {
              v286 = *((_QWORD *)v283 + 1);
              __dstj = *(void **)v283;
              sub_23F73515C(*(_QWORD *)v283, v286, v284);
              *(_QWORD *)v282 = __dstj;
              *(_QWORD *)(v282 + 8) = v286;
              *(_BYTE *)(v282 + 16) = v284;
            }
            else
            {
              v285 = *v283;
              *(_BYTE *)(v282 + 16) = *((_BYTE *)v283 + 16);
              *(_OWORD *)v282 = v285;
            }
            v287 = v280[7];
            v288 = (void *)(v360 + v287);
            v289 = (const void *)(v18 + v287);
            if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v287, 1, v6))
            {
              v290 = sub_23F6916B8(&qword_256EA2798);
              memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v288, v289, v6);
              _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v288, 0, 1, v6);
            }
            v291 = v280[8];
            a3 = v367;
            v292 = (_QWORD *)(v360 + v291);
            v293 = (_QWORD *)(v18 + v291);
            if (v293[1])
            {
              *v292 = *v293;
              v292[1] = v293[1];
              v292[2] = v293[2];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v294 = *(_OWORD *)v293;
              v292[2] = v293[2];
              *(_OWORD *)v292 = v294;
            }
            v8 = v380;
LABEL_153:
            swift_storeEnumTagMultiPayload();
            break;
          }
          *v258 = *v259;
          v258[1] = v259[1];
          v261 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v332 = (char *)v258 + v261;
          v262 = (char *)v259 + v261;
          v17 = v360;
          swift_bridgeObjectRetain();
          v337((uint64_t)v332, (uint64_t)v262, v255);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_131;
      case 4u:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
        *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
        *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
        *(_BYTE *)(v17 + 56) = *(_BYTE *)(v18 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 5u:
        v41 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v17, v18, v41);
        v42 = (int *)type metadata accessor for Action(0);
        v43 = v42[5];
        v44 = (_QWORD *)(v17 + v43);
        v45 = (_QWORD *)(v18 + v43);
        *v44 = *v45;
        v44[1] = v45[1];
        v46 = v42[6];
        v47 = (_QWORD *)(v17 + v46);
        v48 = (_QWORD *)(v18 + v46);
        *v47 = *v48;
        v47[1] = v48[1];
        v49 = v42[7];
        v50 = (_QWORD *)(v17 + v49);
        v51 = (_QWORD *)(v18 + v49);
        *v50 = *v51;
        v50[1] = v51[1];
        *(_BYTE *)(v17 + v42[8]) = *(_BYTE *)(v18 + v42[8]);
        *(_QWORD *)(v17 + v42[9]) = *(_QWORD *)(v18 + v42[9]);
        v52 = v42[10];
        v53 = (_QWORD *)(v17 + v52);
        v54 = (_QWORD *)(v18 + v52);
        *v53 = *v54;
        v53[1] = v54[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 6u:
        v55 = (char *)v17;
        v56 = v8;
        v57 = sub_23FB2C764();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v57))
        {
          v58 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v55, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v18, v57);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v55, 0, 1, v57);
        }
        v172 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(&v55[*(int *)(v172 + 20)], v18 + *(int *)(v172 + 20), v57);
        swift_storeEnumTagMultiPayload();
        v8 = v56;
        break;
      case 7u:
        v59 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v17, v18, v59);
        v60 = (int *)type metadata accessor for ClientAction(0);
        v61 = v60[5];
        v62 = (_QWORD *)(v17 + v61);
        v63 = (_QWORD *)(v18 + v61);
        *v62 = *v63;
        v62[1] = v63[1];
        *(_QWORD *)(v17 + v60[6]) = *(_QWORD *)(v18 + v60[6]);
        v64 = v60[7];
        v65 = (_QWORD *)(v17 + v64);
        v66 = (_QWORD *)(v18 + v64);
        *v65 = *v66;
        v65[1] = v66[1];
        v67 = v60[8];
        v68 = (_QWORD *)(v17 + v67);
        v69 = (_QWORD *)(v18 + v67);
        *v68 = *v69;
        v68[1] = v69[1];
        *(_QWORD *)(v17 + v60[9]) = *(_QWORD *)(v18 + v60[9]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 8u:
        v70 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v17, v18, v70);
        Step = type metadata accessor for QueryStep(0);
        *(_QWORD *)(v17 + *(int *)(Step + 20)) = *(_QWORD *)(v18 + *(int *)(Step + 20));
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 9u:
        v72 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v17, v18, v72);
        v73 = type metadata accessor for VariableStep(0);
        *(_QWORD *)(v17 + *(int *)(v73 + 20)) = *(_QWORD *)(v18 + *(int *)(v73 + 20));
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0xAu:
      case 0x15u:
      case 0x1Du:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0xBu:
      case 0x17u:
      case 0x18u:
      case 0x1Au:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0xCu:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
        *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0xDu:
        type metadata accessor for SessionError();
        v74 = (char *)&loc_23F738800 + 4 * word_23FB59CA0[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
        return result;
      case 0xEu:
        v76 = *(_QWORD *)v18;
        v75 = *(_QWORD *)(v18 + 8);
        sub_23F6D1E20(*(_QWORD *)v18, v75);
        *(_QWORD *)v17 = v76;
        *(_QWORD *)(v17 + 8) = v75;
        v78 = *(_QWORD *)(v18 + 16);
        v77 = *(_QWORD *)(v18 + 24);
        sub_23F6D1E20(v78, v77);
        *(_QWORD *)(v17 + 16) = v78;
        *(_QWORD *)(v17 + 24) = v77;
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
        *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0xFu:
        v79 = sub_23FB2C77C();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v17, v18, v79);
        goto LABEL_153;
      case 0x10u:
        v376 = a3;
        v391 = v8;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v6))
        {
          v145 = sub_23F6916B8(&qword_256EA2798);
          memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v6);
        }
        v223 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17 + v223[5], v18 + v223[5], v6);
        v224 = v223[6];
        v365 = v17;
        v225 = (void *)(v17 + v224);
        v226 = (const void *)(v18 + v224);
        v227 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v228 = sub_23FB2ED38();
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v228 - 8) + 16))(v225, v226, v228);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
        }
        v229 = v223[7];
        v230 = v365 + v229;
        v231 = v18 + v229;
        v232 = sub_23FB2C764();
        __dstf = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v232 - 8) + 16);
        __dstf(v230, v231, v232);
        v233 = v223[8];
        v234 = (_QWORD *)(v365 + v233);
        v235 = (_QWORD *)(v18 + v233);
        v236 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        v237 = swift_getEnumCaseMultiPayload();
        if (v237 == 1)
        {
          *v234 = *v235;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v237)
          {
            memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
LABEL_104:
            a3 = v376;
            v8 = v391;
            goto LABEL_153;
          }
          *v234 = *v235;
          v234[1] = v235[1];
          v238 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v239 = (char *)v234 + v238;
          v240 = (char *)v235 + v238;
          swift_bridgeObjectRetain();
          __dstf((uint64_t)v239, (uint64_t)v240, v232);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_104;
      case 0x11u:
        v368 = a3;
        v381 = v8;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v6))
        {
          v80 = sub_23F6916B8(&qword_256EA2798);
          memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v6);
        }
        v173 = type metadata accessor for ActionStepResult(0);
        v174 = *(int *)(v173 + 20);
        v175 = (_QWORD *)(v17 + v174);
        v176 = (_QWORD *)(v18 + v174);
        *v175 = *v176;
        v175[1] = v176[1];
        __dstd = (int *)v173;
        v363 = v17;
        v177 = *(int *)(v173 + 24);
        v178 = v17 + v177;
        v179 = v18 + v177;
        v180 = sub_23FB2C80C();
        v181 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 16);
        swift_bridgeObjectRetain();
        v181(v178, v179, v180);
        v182 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        v183 = (void *)(v178 + v182);
        v184 = (const void *)(v179 + v182);
        v185 = sub_23FB2D0B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v184, 1, v185))
        {
          v186 = sub_23F6916B8(&qword_256EA2780);
          memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v183, 0, 1, v185);
        }
        v214 = __dstd[7];
        v215 = (_QWORD *)(v363 + v214);
        v216 = (_QWORD *)(v18 + v214);
        *v215 = *v216;
        v215[1] = v216[1];
        swift_bridgeObjectRetain();
        goto LABEL_113;
      case 0x12u:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        StepResults = type metadata accessor for QueryStepResults(0);
        v82 = *(int *)(StepResults + 20);
        v334 = (void *)(v18 + v82);
        v341 = (void *)(v17 + v82);
        v369 = a3;
        v382 = v8;
        v83 = sub_23FB2C764();
        v84 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v83 - 8) + 16);
        swift_bridgeObjectRetain();
        v85 = v83;
        v8 = v382;
        v84(v341, v334, v85);
        a3 = v369;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17 + *(int *)(StepResults + 24), v18 + *(int *)(StepResults + 24), v6);
        goto LABEL_153;
      case 0x13u:
        v86 = sub_23FB2C938();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v17, v18, v86);
        goto LABEL_153;
      case 0x14u:
        v146 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 16))(v17, v18, v146);
        v147 = (int *)type metadata accessor for ActionResolverRequest(0);
        v148 = v147[5];
        v149 = (_QWORD *)(v17 + v148);
        v150 = (_QWORD *)(v18 + v148);
        *v149 = *v150;
        v149[1] = v150[1];
        *(_QWORD *)(v17 + v147[6]) = *(_QWORD *)(v18 + v147[6]);
        *(_QWORD *)(v17 + v147[7]) = *(_QWORD *)(v18 + v147[7]);
        *(_QWORD *)(v17 + v147[8]) = *(_QWORD *)(v18 + v147[8]);
        *(_BYTE *)(v17 + v147[9]) = *(_BYTE *)(v18 + v147[9]);
        *(_BYTE *)(v17 + v147[10]) = *(_BYTE *)(v18 + v147[10]);
        *(_BYTE *)(v17 + v147[11]) = *(_BYTE *)(v18 + v147[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0x16u:
      case 0x24u:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0x1Bu:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0x1Cu:
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
        *(_DWORD *)(v17 + 32) = *(_DWORD *)(v18 + 32);
        *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
        *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0x1Eu:
        v87 = sub_23FB2D004();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v17, v18, v87);
        goto LABEL_153;
      case 0x1Fu:
        v368 = a3;
        v381 = v8;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v6))
        {
          v88 = sub_23F6916B8(&qword_256EA2798);
          memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v6);
        }
        v187 = type metadata accessor for StatementResult(0);
        v188 = *(int *)(v187 + 20);
        v189 = (_QWORD *)(v17 + v188);
        v190 = (_QWORD *)(v18 + v188);
        *v189 = *v190;
        v189[1] = v190[1];
        __dste = (int *)v187;
        v364 = v17;
        v191 = *(int *)(v187 + 24);
        v192 = v17 + v191;
        v193 = v18 + v191;
        v194 = sub_23FB2D0DC();
        v195 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 16);
        swift_bridgeObjectRetain();
        v195(v192, v193, v194);
        v196 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        v197 = (void *)(v192 + v196);
        v198 = (const void *)(v193 + v196);
        v199 = sub_23FB2D0B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v198, 1, v199))
        {
          v200 = sub_23F6916B8(&qword_256EA2780);
          memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v197, 0, 1, v199);
        }
        v217 = __dste;
        v218 = __dste[7];
        v344 = (void *)(v364 + v218);
        v219 = v18 + v218;
        v220 = sub_23FB2C764();
        v221 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v220 - 8) + 16);
        v221(v344, v219, v220);
        v221((void *)(v364 + v217[8]), v18 + v217[8], v220);
        v221((void *)(v364 + v217[9]), v18 + v217[9], v220);
LABEL_113:
        swift_storeEnumTagMultiPayload();
        a3 = v368;
        v8 = v381;
        break;
      case 0x20u:
        v383 = v8;
        v370 = a3;
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        v89 = type metadata accessor for ExternalAgentTextQuery(0);
        v90 = *(int *)(v89 + 20);
        v91 = (void *)(v17 + v90);
        v92 = (const void *)(v18 + v90);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v92, 1, v6))
        {
          v93 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v91, v92, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v91, 0, 1, v6);
        }
        v201 = *(int *)(v89 + 24);
        a3 = v370;
        v202 = (_QWORD *)(v17 + v201);
        v203 = (_QWORD *)(v18 + v201);
        if (v203[1])
        {
          *v202 = *v203;
          v202[1] = v203[1];
          v202[2] = v203[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v222 = *(_OWORD *)v203;
          v202[2] = v203[2];
          *(_OWORD *)v202 = v222;
        }
        v8 = v383;
        goto LABEL_153;
      case 0x21u:
        v392 = v8;
        v377 = a3;
        *(_QWORD *)v17 = *(_QWORD *)v18;
        v151 = type metadata accessor for ExternalAgentSpeechQuery(0);
        v152 = *(int *)(v151 + 20);
        v153 = (void *)(v17 + v152);
        v154 = (const void *)(v18 + v152);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v154, 1, v6))
        {
          v155 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v153, v154, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v153, 0, 1, v6);
        }
        a3 = v377;
        v241 = *(int *)(v151 + 24);
        v242 = (_QWORD *)(v17 + v241);
        v243 = (_QWORD *)(v18 + v241);
        if (v243[1])
        {
          *v242 = *v243;
          v242[1] = v243[1];
          v242[2] = v243[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v244 = *(_OWORD *)v243;
          v242[2] = v243[2];
          *(_OWORD *)v242 = v244;
        }
        v8 = v392;
        goto LABEL_153;
      case 0x22u:
        __dsta = (_QWORD *)type metadata accessor for RequestContent(0);
        v94 = swift_getEnumCaseMultiPayload();
        v371 = a3;
        v384 = v8;
        v361 = v17;
        if (v94 != 3)
        {
          if (v94 == 2)
          {
            *(_QWORD *)v17 = *(_QWORD *)v18;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v94 != 1)
            {
              memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(__dsta - 1) + 64));
              goto LABEL_146;
            }
            *(_QWORD *)v17 = *(_QWORD *)v18;
            *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
            v95 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v335 = (void *)(v18 + v95);
            v342 = (void *)(v17 + v95);
            v96 = sub_23FB2C764();
            v97 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
            swift_bridgeObjectRetain();
            v97(v342, v335, v96);
          }
          goto LABEL_145;
        }
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v6))
        {
          v246 = sub_23F6916B8(&qword_256EA2798);
          memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, 0, 1, v6);
        }
        v263 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17 + v263[5], v18 + v263[5], v6);
        v264 = v263[6];
        v347 = (void *)(v17 + v264);
        v265 = (const void *)(v18 + v264);
        v266 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v267 = sub_23FB2ED38();
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v267 - 8) + 16))(v347, v265, v267);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v347, v265, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
        }
        v268 = v263[7];
        v17 = v361;
        v269 = v361 + v268;
        v270 = v18 + v268;
        v271 = sub_23FB2C764();
        v338 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v271 - 8) + 16);
        v348 = (void *)v271;
        v338(v269, v270);
        v272 = v263[8];
        v273 = (_QWORD *)(v361 + v272);
        v274 = (_QWORD *)(v18 + v272);
        v275 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        v276 = swift_getEnumCaseMultiPayload();
        if (v276 == 1)
        {
          *v273 = *v274;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v276)
          {
            memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v275 - 8) + 64));
LABEL_145:
            swift_storeEnumTagMultiPayload();
LABEL_146:
            v295 = type metadata accessor for ExternalAgentRequest(0);
            v296 = *(int *)(v295 + 20);
            v297 = (void *)(v17 + v296);
            v298 = (const void *)(v18 + v296);
            if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v296, 1, v6))
            {
              v299 = sub_23F6916B8(&qword_256EA2798);
              memcpy(v297, v298, *(_QWORD *)(*(_QWORD *)(v299 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v297, v298, v6);
              _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v297, 0, 1, v6);
            }
            v300 = *(int *)(v295 + 24);
            a3 = v371;
            v301 = (_QWORD *)(v361 + v300);
            v302 = (_QWORD *)(v18 + v300);
            if (v302[1])
            {
              *v301 = *v302;
              v301[1] = v302[1];
              v301[2] = v302[2];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v303 = *(_OWORD *)v302;
              v301[2] = v302[2];
              *(_OWORD *)v301 = v303;
            }
            v8 = v384;
            goto LABEL_153;
          }
          *v273 = *v274;
          v273[1] = v274[1];
          v277 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v278 = (char *)v273 + v277;
          v279 = (char *)v274 + v277;
          v17 = v361;
          swift_bridgeObjectRetain();
          ((void (*)(char *, char *, void *))v338)(v278, v279, v348);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_145;
      case 0x23u:
        v156 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 16))(v17, v18, v156);
        v157 = type metadata accessor for ExternalAgentOutcome(0);
        v158 = *(int *)(v157 + 20);
        v393 = v8;
        v159 = v17 + v158;
        v160 = v18 + v158;
        v161 = sub_23FB2D0DC();
        v162 = v160;
        v8 = v393;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v159, v162, v161);
        *(_QWORD *)(v17 + *(int *)(v157 + 24)) = *(_QWORD *)(v18 + *(int *)(v157 + 24));
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0x25u:
        v98 = sub_23FB2E8D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v17, v18, v98);
        __dsth = (int *)type metadata accessor for ToolResolution(0);
        v99 = __dsth[5];
        v385 = v8;
        v100 = v17 + v99;
        v101 = v18 + v99;
        v372 = a3;
        v102 = sub_23FB2C764();
        v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 16);
        v104 = v101;
        v8 = v385;
        v103(v100, v104, v102);
        v105 = v102;
        a3 = v372;
        v103(v17 + __dsth[6], v18 + __dsth[6], v105);
        goto LABEL_153;
      case 0x26u:
        v373 = a3;
        v386 = v8;
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        v106 = (int *)type metadata accessor for UndoRedoRequest(0);
        v107 = v106[5];
        __dstb = (void *)(v17 + v107);
        v362 = v17;
        v108 = (const void *)(v18 + v107);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v108, 1, v6))
        {
          v109 = sub_23F6916B8(&qword_256EA2798);
          memcpy(__dstb, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(__dstb, v108, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstb, 0, 1, v6);
        }
        *(_BYTE *)(v17 + v106[6]) = *(_BYTE *)(v18 + v106[6]);
        v204 = v106[7];
        v205 = v17 + v204;
        v206 = v18 + v204;
        v207 = sub_23FB2C764();
        v208 = v206;
        v209 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v207 - 8) + 16);
        v209(v205, v208, v207);
        v210 = v106[8];
        v211 = (void *)(v362 + v210);
        v212 = (const void *)(v18 + v210);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v210, 1, v207))
        {
          v213 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
        }
        else
        {
          v209((uint64_t)v211, (uint64_t)v212, v207);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v211, 0, 1, v207);
        }
        a3 = v373;
        swift_storeEnumTagMultiPayload();
        v8 = v386;
        break;
      case 0x27u:
        v387 = v8;
        v374 = a3;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v6);
        v110 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *(_BYTE *)(v17 + v110[5]) = *(_BYTE *)(v18 + v110[5]);
        v111 = v110[6];
        v112 = v17 + v111;
        v113 = v18 + v111;
        v114 = sub_23FB2C764();
        v115 = v112;
        v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 16);
        v116(v115, v113, v114);
        v117 = v110[7];
        v118 = (void *)(v17 + v117);
        v119 = (const void *)(v18 + v117);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18 + v117, 1, v114))
        {
          v120 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
        }
        else
        {
          v116((uint64_t)v118, (uint64_t)v119, v114);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v118, 0, 1, v114);
        }
        v8 = v387;
        swift_storeEnumTagMultiPayload();
        a3 = v374;
        break;
      case 0x28u:
        v121 = sub_23FB2ED38();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v17, v18, v121);
        v122 = v17;
        v123 = type metadata accessor for TypeConversionRequest(0);
        v124 = *(int *)(v123 + 20);
        v388 = v8;
        v125 = v122 + v124;
        v126 = v18 + v124;
        v127 = sub_23FB2ED5C();
        v128 = v126;
        v8 = v388;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v128, v127);
        v129 = *(int *)(v123 + 24);
        v130 = v122 + v129;
        v131 = v18 + v129;
        v132 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(v130, v131, v132);
        goto LABEL_153;
      case 0x29u:
        v133 = sub_23FB2ED38();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v17, v18, v133);
        __dsti = (int *)type metadata accessor for TypeConversionResult(0);
        v134 = __dsti[5];
        v389 = v8;
        v135 = v17 + v134;
        v136 = v18 + v134;
        v375 = a3;
        v137 = sub_23FB2C764();
        v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 16);
        v139 = v136;
        v8 = v389;
        v138(v135, v139, v137);
        v140 = v137;
        a3 = v375;
        v138(v17 + __dsti[6], v18 + __dsti[6], v140);
        goto LABEL_153;
      case 0x2Au:
        v390 = v8;
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
        __dstc = (int *)type metadata accessor for QueryDecorationResult(0);
        v141 = __dstc[7];
        v343 = (void *)(v17 + v141);
        v142 = (const void *)(v18 + v141);
        v143 = sub_23FB2E354();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v142, 1, v143))
        {
          v144 = sub_23F6916B8(&qword_256EA71F8);
          memcpy(v343, v142, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v343, v142, v143);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v343, 0, 1, v143);
        }
        v8 = v390;
        *(_QWORD *)(v17 + __dstc[8]) = *(_QWORD *)(v18 + __dstc[8]);
        swift_bridgeObjectRetain();
        goto LABEL_153;
      case 0x2Cu:
        v163 = sub_23FB2C764();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v17, v18, v163);
        DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        v165 = *(int *)(DecorationPrePlannerResult + 20);
        v166 = (_QWORD *)(v17 + v165);
        v167 = (_QWORD *)(v18 + v165);
        *v166 = *v167;
        v166[1] = v167[1];
        v168 = *(int *)(DecorationPrePlannerResult + 24);
        v169 = v17 + v168;
        v170 = (uint64_t *)(v18 + v168);
        v171 = *v170;
        LOBYTE(v170) = *((_BYTE *)v170 + 8);
        *(_QWORD *)v169 = v171;
        *(_BYTE *)(v169 + 8) = (_BYTE)v170;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_153;
      default:
        memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        break;
    }
  }
  v304 = v9[8];
  v305 = (_QWORD *)(a1 + v304);
  v306 = (_QWORD *)(a2 + v304);
  *v305 = *v306;
  v305[1] = v306[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v307 = v9[9];
  v308 = (_QWORD *)(a1 + v307);
  v309 = (_QWORD *)(a2 + v307);
  *v308 = *v309;
  v308[1] = v309[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v310 = v9[10];
  v311 = (_QWORD *)(a1 + v310);
  v312 = (_QWORD *)(a2 + v310);
  *v311 = *v312;
  v311[1] = v312[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v313 = v9[11];
  v314 = (_QWORD *)(a1 + v313);
  v315 = (_QWORD *)(a2 + v313);
  *v314 = *v315;
  v314[1] = v315[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v316 = v9[12];
  v317 = a1 + v316;
  v318 = a2 + v316;
  v319 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v319 - 8) + 24))(v317, v318, v319);
  v320 = (int *)type metadata accessor for Timepoint();
  *(_QWORD *)(v317 + v320[5]) = *(_QWORD *)(v318 + v320[5]);
  *(_QWORD *)(v317 + v320[6]) = *(_QWORD *)(v318 + v320[6]);
  v8(v317 + v320[7], v318 + v320[7], v6);
  v321 = v9[13];
  v322 = (_QWORD *)(a1 + v321);
  v323 = (_QWORD *)(a2 + v321);
  *v322 = *v323;
  v322[1] = v323[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v324 = v9[14];
  v325 = a1 + v324;
  v326 = (uint64_t *)(a2 + v324);
  v327 = *v326;
  *(_BYTE *)(v325 + 8) = *((_BYTE *)v326 + 8);
  *(_QWORD *)v325 = v327;
  *(_QWORD *)(a1 + v9[15]) = *(_QWORD *)(a2 + v9[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v328 = *(int *)(a3 + 20);
  v329 = (_QWORD *)(a1 + v328);
  v330 = (_QWORD *)(a2 + v328);
  *v329 = *v330;
  v329[1] = v330[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s19InstrumentableEventVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int *v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Step;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t StepResults;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int EnumCaseMultiPayload;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t DecorationResult;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t DecorationPrePlannerResult;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t, uint64_t);
  int *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  void (*v175)(char *, char *, uint64_t);
  uint64_t v176;
  _OWORD *v177;
  _OWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  int *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  void (*v198)(char *, char *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  int *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  uint64_t v214;
  int *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  _OWORD *v227;
  _OWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t result;
  char *v253;
  void (*v254)(char *, char *, uint64_t);
  char *__dstc;
  char *__dstd;
  int *__dst;
  char *__dsta;
  void (*__dstb)(char *, char *, uint64_t);
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(uint64_t, uint64_t, uint64_t);
  void (*v269)(uint64_t, uint64_t, uint64_t);
  void (*v270)(char *, char *, uint64_t);
  void (*v271)(uint64_t, uint64_t, uint64_t);
  void (*v272)(uint64_t, uint64_t, uint64_t);
  void (*v273)(uint64_t, uint64_t, uint64_t);
  void (*v274)(uint64_t, uint64_t, uint64_t);
  void (*v275)(uint64_t, uint64_t, uint64_t);
  void (*v276)(uint64_t, uint64_t, uint64_t);

  v6 = sub_23FB2C4B8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for Session.Event(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  v9 = v8[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a2 + v9, 1, v6))
  {
    v12 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v6);
  }
  v13 = v8[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v17 = sub_23FB2C998();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      v18 = type metadata accessor for SessionStart(0);
      v19 = *(int *)(v18 + 20);
      v268 = v7;
      v20 = (char *)v14 + v19;
      v21 = (char *)v15 + v19;
      v22 = sub_23FB2C908();
      v23 = v21;
      v7 = v268;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v23, v22);
      *((_BYTE *)v14 + *(int *)(v18 + 24)) = *((_BYTE *)v15 + *(int *)(v18 + 24));
      goto LABEL_77;
    case 1u:
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_BYTE *)v14 + 16) = *((_BYTE *)v15 + 16);
      v24 = type metadata accessor for TextQuery(0);
      v25 = *(int *)(v24 + 24);
      v269 = v7;
      v26 = (char *)v14 + v25;
      v27 = (char *)v15 + v25;
      v28 = sub_23FB2C764();
      v29 = v27;
      v7 = v269;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v29, v28);
      *(_OWORD *)((char *)v14 + *(int *)(v24 + 28)) = *(_OWORD *)((char *)v15 + *(int *)(v24 + 28));
      goto LABEL_77;
    case 3u:
      v100 = type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v264 = a3;
      v270 = (void (*)(char *, char *, uint64_t))v7;
      if (EnumCaseMultiPayload == 3)
      {
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
        {
          v200 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
        }
        else
        {
          v7((uint64_t)v14, (uint64_t)v15, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
        }
        v215 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v7((uint64_t)v14 + v215[5], (uint64_t)v15 + v215[5], v6);
        v216 = v215[6];
        __dsta = (char *)v14 + v216;
        v217 = (char *)v15 + v216;
        v218 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v219 = sub_23FB2ED38();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 32))(__dsta, v217, v219);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dsta, v217, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
        }
        v220 = v215[7];
        v221 = (char *)v14 + v220;
        v222 = (char *)v15 + v220;
        v223 = sub_23FB2C764();
        v224 = v221;
        v225 = v223;
        __dstb = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 32);
        __dstb(v224, v222, v223);
        v226 = v215[8];
        v227 = (_OWORD *)((char *)v14 + v226);
        v228 = (_OWORD *)((char *)v15 + v226);
        v229 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
        }
        else
        {
          *v227 = *v228;
          v232 = type metadata accessor for RequestContent.TextContent(0);
          __dstb((char *)v227 + *(int *)(v232 + 20), (char *)v228 + *(int *)(v232 + 20), v225);
          swift_storeEnumTagMultiPayload();
        }
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
          goto LABEL_106;
        }
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v102 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v103 = (char *)v14 + v102;
        v104 = (char *)v15 + v102;
        v105 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v103, v104, v105);
      }
      swift_storeEnumTagMultiPayload();
LABEL_106:
      v233 = (int *)type metadata accessor for Request(0);
      *((_BYTE *)v14 + v233[5]) = *((_BYTE *)v15 + v233[5]);
      v234 = v233[6];
      v235 = (char *)v14 + v234;
      v236 = (char *)v15 + v234;
      v235[16] = v236[16];
      *(_OWORD *)v235 = *(_OWORD *)v236;
      v237 = v233[7];
      v238 = (char *)v14 + v237;
      v239 = (char *)v15 + v237;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15 + v237, 1, v6))
      {
        v240 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
      }
      else
      {
        v270(v238, v239, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v238, 0, 1, v6);
      }
      a3 = v264;
      v241 = v233[8];
      v242 = (char *)v14 + v241;
      v243 = (char *)v15 + v241;
      *(_OWORD *)v242 = *(_OWORD *)v243;
      *((_QWORD *)v242 + 2) = *((_QWORD *)v243 + 2);
      goto LABEL_110;
    case 5u:
      v30 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v14, v15, v30);
      v31 = (int *)type metadata accessor for Action(0);
      *(_OWORD *)((char *)v14 + v31[5]) = *(_OWORD *)((char *)v15 + v31[5]);
      *(_OWORD *)((char *)v14 + v31[6]) = *(_OWORD *)((char *)v15 + v31[6]);
      *(_OWORD *)((char *)v14 + v31[7]) = *(_OWORD *)((char *)v15 + v31[7]);
      *((_BYTE *)v14 + v31[8]) = *((_BYTE *)v15 + v31[8]);
      *(_QWORD *)((char *)v14 + v31[9]) = *(_QWORD *)((char *)v15 + v31[9]);
      *(_OWORD *)((char *)v14 + v31[10]) = *(_OWORD *)((char *)v15 + v31[10]);
      goto LABEL_77;
    case 6u:
      v32 = v7;
      v33 = sub_23FB2C764();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v33))
      {
        v34 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v14, v15, v33);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v33);
      }
      v139 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))((char *)v14 + *(int *)(v139 + 20), (char *)v15 + *(int *)(v139 + 20), v33);
      swift_storeEnumTagMultiPayload();
      v7 = v32;
      goto LABEL_112;
    case 7u:
      v106 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v14, v15, v106);
      v107 = (int *)type metadata accessor for ClientAction(0);
      *(_OWORD *)((char *)v14 + v107[5]) = *(_OWORD *)((char *)v15 + v107[5]);
      *(_QWORD *)((char *)v14 + v107[6]) = *(_QWORD *)((char *)v15 + v107[6]);
      *(_OWORD *)((char *)v14 + v107[7]) = *(_OWORD *)((char *)v15 + v107[7]);
      *(_OWORD *)((char *)v14 + v107[8]) = *(_OWORD *)((char *)v15 + v107[8]);
      *(_QWORD *)((char *)v14 + v107[9]) = *(_QWORD *)((char *)v15 + v107[9]);
      goto LABEL_77;
    case 8u:
      v35 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v14, v15, v35);
      Step = type metadata accessor for QueryStep(0);
      *(_QWORD *)((char *)v14 + *(int *)(Step + 20)) = *(_QWORD *)((char *)v15 + *(int *)(Step + 20));
      goto LABEL_77;
    case 9u:
      v37 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v14, v15, v37);
      v38 = type metadata accessor for VariableStep(0);
      *(_QWORD *)((char *)v14 + *(int *)(v38 + 20)) = *(_QWORD *)((char *)v15 + *(int *)(v38 + 20));
      goto LABEL_77;
    case 0xDu:
      type metadata accessor for SessionError();
      v108 = (char *)&loc_23F73AD1C + 4 * word_23FB59D02[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0xFu:
      v109 = sub_23FB2C77C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v14, v15, v109);
      goto LABEL_77;
    case 0x10u:
      v265 = a3;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
      {
        v110 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v14, (uint64_t)v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
      }
      v163 = v7;
      v164 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v276 = v163;
      v163((uint64_t)v14 + v164[5], (uint64_t)v15 + v164[5], v6);
      v165 = v164[6];
      v166 = (char *)v14 + v165;
      v167 = (char *)v15 + v165;
      v168 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v169 = sub_23FB2ED38();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v166, v167, v169);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
      }
      v170 = v164[7];
      v171 = (char *)v14 + v170;
      v172 = (char *)v15 + v170;
      v173 = sub_23FB2C764();
      v174 = v172;
      v175 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32);
      v175(v171, v174, v173);
      v176 = v164[8];
      v177 = (_OWORD *)((char *)v14 + v176);
      v178 = (_OWORD *)((char *)v15 + v176);
      v179 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
      }
      else
      {
        *v177 = *v178;
        v193 = type metadata accessor for RequestContent.TextContent(0);
        v175((char *)v177 + *(int *)(v193 + 20), (char *)v178 + *(int *)(v193 + 20), v173);
        swift_storeEnumTagMultiPayload();
      }
      a3 = v265;
      v7 = v276;
      goto LABEL_77;
    case 0x11u:
      v260 = a3;
      v270 = (void (*)(char *, char *, uint64_t))v7;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
      {
        v39 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v14, (uint64_t)v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
      }
      v140 = (int *)type metadata accessor for ActionStepResult(0);
      *(_OWORD *)((char *)v14 + v140[5]) = *(_OWORD *)((char *)v15 + v140[5]);
      v141 = v140[6];
      v142 = (char *)v14 + v141;
      v143 = (char *)v15 + v141;
      v144 = sub_23FB2C80C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 32))(v142, v143, v144);
      v145 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      v146 = &v142[v145];
      v147 = &v143[v145];
      v148 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v147, 1, v148))
      {
        v149 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 32))(v146, v147, v148);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v146, 0, 1, v148);
      }
      *(_OWORD *)((char *)v14 + v140[7]) = *(_OWORD *)((char *)v15 + v140[7]);
      goto LABEL_86;
    case 0x12u:
      *v14 = *v15;
      StepResults = type metadata accessor for QueryStepResults(0);
      v41 = *(int *)(StepResults + 20);
      v271 = v7;
      v42 = (char *)v14 + v41;
      v43 = (char *)v15 + v41;
      v44 = sub_23FB2C764();
      v45 = v43;
      v7 = v271;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v45, v44);
      v271((uint64_t)v14 + *(int *)(StepResults + 24), (uint64_t)v15 + *(int *)(StepResults + 24), v6);
      goto LABEL_77;
    case 0x13u:
      v111 = sub_23FB2C938();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v111 - 8) + 32))(v14, v15, v111);
      goto LABEL_77;
    case 0x14u:
      v112 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v112 - 8) + 32))(v14, v15, v112);
      v113 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(_OWORD *)((char *)v14 + v113[5]) = *(_OWORD *)((char *)v15 + v113[5]);
      *(_QWORD *)((char *)v14 + v113[6]) = *(_QWORD *)((char *)v15 + v113[6]);
      *(_QWORD *)((char *)v14 + v113[7]) = *(_QWORD *)((char *)v15 + v113[7]);
      *(_QWORD *)((char *)v14 + v113[8]) = *(_QWORD *)((char *)v15 + v113[8]);
      *((_BYTE *)v14 + v113[9]) = *((_BYTE *)v15 + v113[9]);
      *((_BYTE *)v14 + v113[10]) = *((_BYTE *)v15 + v113[10]);
      *((_BYTE *)v14 + v113[11]) = *((_BYTE *)v15 + v113[11]);
      goto LABEL_77;
    case 0x1Eu:
      v114 = sub_23FB2D004();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v14, v15, v114);
      goto LABEL_77;
    case 0x1Fu:
      v260 = a3;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
      {
        v115 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v14, (uint64_t)v15, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
      }
      v180 = type metadata accessor for StatementResult(0);
      *(_OWORD *)((char *)v14 + *(int *)(v180 + 20)) = *(_OWORD *)((char *)v15 + *(int *)(v180 + 20));
      __dst = (int *)v180;
      v181 = *(int *)(v180 + 24);
      v182 = (char *)v14 + v181;
      v183 = (char *)v15 + v181;
      v184 = sub_23FB2D0DC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 32))(v182, v183, v184);
      v185 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v186 = &v182[v185];
      v187 = &v183[v185];
      v188 = sub_23FB2D0B8();
      v270 = (void (*)(char *, char *, uint64_t))v7;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v187, 1, v188))
      {
        v189 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 32))(v186, v187, v188);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v186, 0, 1, v188);
      }
      v194 = __dst;
      v195 = __dst[7];
      v253 = (char *)v14 + v195;
      v196 = (char *)v15 + v195;
      v197 = sub_23FB2C764();
      v198 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v197 - 8) + 32);
      v198(v253, v196, v197);
      v198((char *)v14 + v194[8], (char *)v15 + v194[8], v197);
      v198((char *)v14 + v194[9], (char *)v15 + v194[9], v197);
      goto LABEL_86;
    case 0x20u:
      v270 = (void (*)(char *, char *, uint64_t))v7;
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v116 = type metadata accessor for ExternalAgentTextQuery(0);
      v117 = *(int *)(v116 + 20);
      v118 = (char *)v14 + v117;
      v119 = (char *)v15 + v117;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15 + v117, 1, v6))
      {
        v120 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        v270(v118, v119, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v118, 0, 1, v6);
      }
      v190 = *(int *)(v116 + 24);
      v191 = (char *)v14 + v190;
      v192 = (char *)v15 + v190;
      *(_OWORD *)v191 = *(_OWORD *)v192;
      *((_QWORD *)v191 + 2) = *((_QWORD *)v192 + 2);
      goto LABEL_110;
    case 0x21u:
      v270 = (void (*)(char *, char *, uint64_t))v7;
      *v14 = *v15;
      v46 = type metadata accessor for ExternalAgentSpeechQuery(0);
      v47 = *(int *)(v46 + 20);
      v48 = (char *)v14 + v47;
      v49 = (char *)v15 + v47;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15 + v47, 1, v6))goto LABEL_17;
      goto LABEL_52;
    case 0x22u:
      v51 = type metadata accessor for RequestContent(0);
      v52 = swift_getEnumCaseMultiPayload();
      v270 = (void (*)(char *, char *, uint64_t))v7;
      if (v52 == 3)
      {
        v267 = a3;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
        {
          v199 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
        }
        else
        {
          v7((uint64_t)v14, (uint64_t)v15, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
        }
        v201 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v7((uint64_t)v14 + v201[5], (uint64_t)v15 + v201[5], v6);
        v202 = v201[6];
        v203 = (char *)v14 + v202;
        v204 = (char *)v15 + v202;
        v205 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v206 = sub_23FB2ED38();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 32))(v203, v204, v206);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
        }
        v207 = v201[7];
        v208 = (char *)v14 + v207;
        v209 = (char *)v15 + v207;
        v210 = sub_23FB2C764();
        v254 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v210 - 8) + 32);
        v254(v208, v209, v210);
        v211 = v201[8];
        v212 = (_OWORD *)((char *)v14 + v211);
        v213 = (_OWORD *)((char *)v15 + v211);
        v214 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
        }
        else
        {
          *v212 = *v213;
          v230 = type metadata accessor for RequestContent.TextContent(0);
          v254((char *)v212 + *(int *)(v230 + 20), (char *)v213 + *(int *)(v230 + 20), v210);
          swift_storeEnumTagMultiPayload();
        }
        a3 = v267;
      }
      else
      {
        if (v52 != 1)
        {
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
          goto LABEL_102;
        }
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v53 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v54 = (char *)v14 + v53;
        v55 = (char *)v15 + v53;
        v56 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
      }
      swift_storeEnumTagMultiPayload();
LABEL_102:
      v46 = type metadata accessor for ExternalAgentRequest(0);
      v231 = *(int *)(v46 + 20);
      v48 = (char *)v14 + v231;
      v49 = (char *)v15 + v231;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15 + v231, 1, v6))
      {
LABEL_17:
        v50 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
LABEL_52:
        v270(v48, v49, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v48, 0, 1, v6);
      }
      v150 = *(int *)(v46 + 24);
      v151 = (char *)v14 + v150;
      v152 = (char *)v15 + v150;
      *(_OWORD *)v151 = *(_OWORD *)v152;
      *((_QWORD *)v151 + 2) = *((_QWORD *)v152 + 2);
LABEL_110:
      swift_storeEnumTagMultiPayload();
LABEL_111:
      v7 = (void (*)(uint64_t, uint64_t, uint64_t))v270;
LABEL_112:
      *(_OWORD *)(a1 + v8[8]) = *(_OWORD *)(a2 + v8[8]);
      *(_OWORD *)(a1 + v8[9]) = *(_OWORD *)(a2 + v8[9]);
      *(_OWORD *)(a1 + v8[10]) = *(_OWORD *)(a2 + v8[10]);
      *(_OWORD *)(a1 + v8[11]) = *(_OWORD *)(a2 + v8[11]);
      v244 = v8[12];
      v245 = a1 + v244;
      v246 = a2 + v244;
      v247 = sub_23FB2C470();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v247 - 8) + 32))(v245, v246, v247);
      v248 = (int *)type metadata accessor for Timepoint();
      *(_QWORD *)(v245 + v248[5]) = *(_QWORD *)(v246 + v248[5]);
      *(_QWORD *)(v245 + v248[6]) = *(_QWORD *)(v246 + v248[6]);
      v7(v245 + v248[7], v246 + v248[7], v6);
      *(_OWORD *)(a1 + v8[13]) = *(_OWORD *)(a2 + v8[13]);
      v249 = v8[14];
      v250 = a1 + v249;
      v251 = a2 + v249;
      *(_QWORD *)v250 = *(_QWORD *)v251;
      *(_BYTE *)(v250 + 8) = *(_BYTE *)(v251 + 8);
      *(_QWORD *)(a1 + v8[15]) = *(_QWORD *)(a2 + v8[15]);
      *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
      return a1;
    case 0x23u:
      v121 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(v14, v15, v121);
      v122 = type metadata accessor for ExternalAgentOutcome(0);
      v123 = *(int *)(v122 + 20);
      v275 = v7;
      v124 = (char *)v14 + v123;
      v125 = (char *)v15 + v123;
      v126 = sub_23FB2D0DC();
      v127 = v125;
      v7 = v275;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v127, v126);
      *(_QWORD *)((char *)v14 + *(int *)(v122 + 24)) = *(_QWORD *)((char *)v15 + *(int *)(v122 + 24));
      goto LABEL_77;
    case 0x25u:
      v57 = sub_23FB2E8D0();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v14, v15, v57);
      v58 = type metadata accessor for ToolResolution(0);
      v59 = *(int *)(v58 + 20);
      __dstc = (char *)v14 + v59;
      v272 = v7;
      v60 = (char *)v15 + v59;
      v261 = a3;
      v61 = sub_23FB2C764();
      v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32);
      v63 = v60;
      v7 = v272;
      v62(__dstc, v63, v61);
      v64 = v61;
      a3 = v261;
      v62((char *)v14 + *(int *)(v58 + 24), (char *)v15 + *(int *)(v58 + 24), v64);
      goto LABEL_77;
    case 0x26u:
      v270 = (void (*)(char *, char *, uint64_t))v7;
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v65 = (int *)type metadata accessor for UndoRedoRequest(0);
      v66 = v65[5];
      v67 = (char *)v14 + v66;
      v68 = (char *)v15 + v66;
      v262 = a3;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15 + v66, 1, v6))
      {
        v69 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        v270(v67, v68, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v67, 0, 1, v6);
      }
      *((_BYTE *)v14 + v65[6]) = *((_BYTE *)v15 + v65[6]);
      v153 = v65[7];
      v154 = (char *)v14 + v153;
      v155 = (char *)v15 + v153;
      v156 = sub_23FB2C764();
      v157 = v155;
      v158 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 32);
      v158(v154, v157, v156);
      v159 = v65[8];
      v160 = (char *)v14 + v159;
      v161 = (char *)v15 + v159;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15 + v159, 1, v156))
      {
        v162 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
      }
      else
      {
        v158(v160, v161, v156);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v160, 0, 1, v156);
      }
      a3 = v262;
      goto LABEL_110;
    case 0x27u:
      v260 = a3;
      v270 = (void (*)(char *, char *, uint64_t))v7;
      v7((uint64_t)v14, (uint64_t)v15, v6);
      v70 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *((_BYTE *)v14 + v70[5]) = *((_BYTE *)v15 + v70[5]);
      v71 = v70[6];
      v72 = (char *)v14 + v71;
      v73 = (char *)v15 + v71;
      v74 = sub_23FB2C764();
      v75 = v72;
      v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32);
      v76(v75, v73, v74);
      v77 = v70[7];
      v78 = (char *)v14 + v77;
      v79 = (char *)v15 + v77;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15 + v77, 1, v74))
      {
        v80 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        v76(v78, v79, v74);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v78, 0, 1, v74);
      }
LABEL_86:
      swift_storeEnumTagMultiPayload();
      a3 = v260;
      goto LABEL_111;
    case 0x28u:
      v81 = sub_23FB2ED38();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v14, v15, v81);
      v82 = type metadata accessor for TypeConversionRequest(0);
      v83 = *(int *)(v82 + 20);
      v273 = v7;
      v84 = (char *)v14 + v83;
      v85 = (char *)v15 + v83;
      v86 = sub_23FB2ED5C();
      v87 = v85;
      v7 = v273;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v84, v87, v86);
      v88 = *(int *)(v82 + 24);
      v89 = (char *)v14 + v88;
      v90 = (char *)v15 + v88;
      v91 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
      goto LABEL_77;
    case 0x29u:
      v92 = sub_23FB2ED38();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v14, v15, v92);
      v93 = type metadata accessor for TypeConversionResult(0);
      v94 = *(int *)(v93 + 20);
      __dstd = (char *)v14 + v94;
      v274 = v7;
      v95 = (char *)v15 + v94;
      v263 = a3;
      v96 = sub_23FB2C764();
      v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32);
      v98 = v95;
      v7 = v274;
      v97(__dstd, v98, v96);
      v99 = v96;
      a3 = v263;
      v97((char *)v14 + *(int *)(v93 + 24), (char *)v15 + *(int *)(v93 + 24), v99);
      goto LABEL_77;
    case 0x2Au:
      v270 = (void (*)(char *, char *, uint64_t))v7;
      v266 = a3;
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v14[2] = v15[2];
      DecorationResult = type metadata accessor for QueryDecorationResult(0);
      v129 = *(int *)(DecorationResult + 28);
      v130 = (char *)v14 + v129;
      v131 = (char *)v15 + v129;
      v132 = sub_23FB2E354();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v131, 1, v132))
      {
        v133 = sub_23F6916B8(&qword_256EA71F8);
        memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 32))(v130, v131, v132);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v130, 0, 1, v132);
      }
      a3 = v266;
      *(_QWORD *)((char *)v14 + *(int *)(DecorationResult + 32)) = *(_QWORD *)((char *)v15
                                                                             + *(int *)(DecorationResult + 32));
      goto LABEL_110;
    case 0x2Cu:
      v134 = sub_23FB2C764();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v14, v15, v134);
      DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      *(_OWORD *)((char *)v14 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)v15
                                                                                       + *(int *)(DecorationPrePlannerResult
                                                                                                + 20));
      v136 = *(int *)(DecorationPrePlannerResult + 24);
      v137 = (char *)v14 + v136;
      v138 = (char *)v15 + v136;
      v137[8] = v138[8];
      *(_QWORD *)v137 = *(_QWORD *)v138;
LABEL_77:
      swift_storeEnumTagMultiPayload();
      goto LABEL_112;
    default:
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_112;
  }
}

uint64_t _s19InstrumentableEventVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Step;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t StepResults;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  int EnumCaseMultiPayload;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t DecorationResult;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t DecorationPrePlannerResult;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  int *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  void (*v163)(char *, char *, uint64_t);
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  int *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  void (*v179)(char *, char *, uint64_t);
  uint64_t v180;
  _OWORD *v181;
  _OWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  void (*v202)(char *, char *, uint64_t);
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  _OWORD *v216;
  _OWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  _OWORD *v228;
  _OWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t result;
  void (*v284)(char *, char *);
  void (*v285)(char *, char *, _QWORD *);
  uint64_t v286;
  char *__dstb;
  char *__dst;
  _QWORD *__dsta;
  char *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void (*v302)(uint64_t, uint64_t, uint64_t);

  v6 = sub_23FB2C4B8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for Session.Event(0);
  v8(a1 + v9[5], a2 + v9[5], v6);
  v10 = v9[6];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1 + v10, 1, v6);
  v14 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v11, v12, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  if (a1 != a2)
  {
    v302 = v8;
    v16 = v9[7];
    v17 = (_QWORD *)(a1 + v16);
    v18 = (_QWORD *)(a2 + v16);
    sub_23F6F5978(a1 + v16, type metadata accessor for Session.Event.Payload);
    v19 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v20 = sub_23FB2C998();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
        v21 = type metadata accessor for SessionStart(0);
        v22 = *(int *)(v21 + 20);
        v23 = (char *)v17 + v22;
        v24 = a3;
        v25 = (char *)v18 + v22;
        v26 = sub_23FB2C908();
        v27 = v25;
        a3 = v24;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v27, v26);
        *((_BYTE *)v17 + *(int *)(v21 + 24)) = *((_BYTE *)v18 + *(int *)(v21 + 24));
        goto LABEL_52;
      case 1u:
        *(_OWORD *)v17 = *(_OWORD *)v18;
        *((_BYTE *)v17 + 16) = *((_BYTE *)v18 + 16);
        v28 = type metadata accessor for TextQuery(0);
        v29 = *(int *)(v28 + 24);
        v30 = (char *)v17 + v29;
        v31 = a3;
        v32 = (char *)v18 + v29;
        v33 = sub_23FB2C764();
        v34 = v32;
        a3 = v31;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v30, v34, v33);
        *(_OWORD *)((char *)v17 + *(int *)(v28 + 28)) = *(_OWORD *)((char *)v18 + *(int *)(v28 + 28));
        goto LABEL_52;
      case 3u:
        v104 = type metadata accessor for RequestContent(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v295 = a3;
        if (EnumCaseMultiPayload == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v6))
          {
            v204 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v6);
          }
          v219 = type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + *(int *)(v219 + 20), (char *)v18 + *(int *)(v219 + 20), v6);
          v220 = *(int *)(v219 + 24);
          __dst = (char *)v17 + v220;
          v294 = v219;
          v221 = (char *)v18 + v220;
          v222 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v223 = sub_23FB2ED38();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 32))(__dst, v221, v223);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dst, v221, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
          }
          v224 = *(int *)(v294 + 28);
          v225 = (char *)v17 + v224;
          v226 = (char *)v18 + v224;
          __dsta = (_QWORD *)sub_23FB2C764();
          v285 = *(void (**)(char *, char *, _QWORD *))(*(__dsta - 1) + 32);
          v285(v225, v226, __dsta);
          v227 = *(int *)(v294 + 32);
          v228 = (_OWORD *)((char *)v17 + v227);
          v229 = (_OWORD *)((char *)v18 + v227);
          v230 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
          }
          else
          {
            *v228 = *v229;
            v233 = type metadata accessor for RequestContent.TextContent(0);
            v285((char *)v228 + *(int *)(v233 + 20), (char *)v229 + *(int *)(v233 + 20), __dsta);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
            goto LABEL_111;
          }
          *(_OWORD *)v17 = *(_OWORD *)v18;
          v106 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v107 = (char *)v17 + v106;
          v108 = (char *)v18 + v106;
          v109 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
        }
        swift_storeEnumTagMultiPayload();
LABEL_111:
        v234 = (int *)type metadata accessor for Request(0);
        *((_BYTE *)v17 + v234[5]) = *((_BYTE *)v18 + v234[5]);
        v235 = v234[6];
        v236 = (char *)v17 + v235;
        v237 = (char *)v18 + v235;
        v236[16] = v237[16];
        *(_OWORD *)v236 = *(_OWORD *)v237;
        v238 = v234[7];
        v239 = (char *)v17 + v238;
        v240 = (char *)v18 + v238;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18 + v238, 1, v6))
        {
          v241 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v239, v240, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v239, 0, 1, v6);
        }
        v242 = v234[8];
        v243 = (char *)v17 + v242;
        v244 = (char *)v18 + v242;
        *(_OWORD *)v243 = *(_OWORD *)v244;
        *((_QWORD *)v243 + 2) = *((_QWORD *)v244 + 2);
        goto LABEL_115;
      case 5u:
        v35 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v17, v18, v35);
        v36 = (int *)type metadata accessor for Action(0);
        *(_OWORD *)((char *)v17 + v36[5]) = *(_OWORD *)((char *)v18 + v36[5]);
        *(_OWORD *)((char *)v17 + v36[6]) = *(_OWORD *)((char *)v18 + v36[6]);
        *(_OWORD *)((char *)v17 + v36[7]) = *(_OWORD *)((char *)v18 + v36[7]);
        *((_BYTE *)v17 + v36[8]) = *((_BYTE *)v18 + v36[8]);
        *(_QWORD *)((char *)v17 + v36[9]) = *(_QWORD *)((char *)v18 + v36[9]);
        *(_OWORD *)((char *)v17 + v36[10]) = *(_OWORD *)((char *)v18 + v36[10]);
        goto LABEL_52;
      case 6u:
        v37 = a3;
        v38 = sub_23FB2C764();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v38))
        {
          v39 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v17, v18, v38);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v38);
        }
        v144 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))((char *)v17 + *(int *)(v144 + 20), (char *)v18 + *(int *)(v144 + 20), v38);
        swift_storeEnumTagMultiPayload();
        a3 = v37;
        goto LABEL_116;
      case 7u:
        v110 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v17, v18, v110);
        v111 = (int *)type metadata accessor for ClientAction(0);
        *(_OWORD *)((char *)v17 + v111[5]) = *(_OWORD *)((char *)v18 + v111[5]);
        *(_QWORD *)((char *)v17 + v111[6]) = *(_QWORD *)((char *)v18 + v111[6]);
        *(_OWORD *)((char *)v17 + v111[7]) = *(_OWORD *)((char *)v18 + v111[7]);
        *(_OWORD *)((char *)v17 + v111[8]) = *(_OWORD *)((char *)v18 + v111[8]);
        *(_QWORD *)((char *)v17 + v111[9]) = *(_QWORD *)((char *)v18 + v111[9]);
        goto LABEL_52;
      case 8u:
        v40 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v17, v18, v40);
        Step = type metadata accessor for QueryStep(0);
        *(_QWORD *)((char *)v17 + *(int *)(Step + 20)) = *(_QWORD *)((char *)v18 + *(int *)(Step + 20));
        goto LABEL_52;
      case 9u:
        v42 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v17, v18, v42);
        v43 = type metadata accessor for VariableStep(0);
        *(_QWORD *)((char *)v17 + *(int *)(v43 + 20)) = *(_QWORD *)((char *)v18 + *(int *)(v43 + 20));
        goto LABEL_52;
      case 0xDu:
        type metadata accessor for SessionError();
        v112 = (char *)&loc_23F73C738 + 4 * word_23FB59D64[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
        return result;
      case 0xFu:
        v113 = sub_23FB2C77C();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v17, v18, v113);
        goto LABEL_52;
      case 0x10u:
        v301 = a3;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v6))
        {
          v114 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v6);
        }
        v168 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + v168[5], (char *)v18 + v168[5], v6);
        v169 = v168[6];
        v170 = (char *)v17 + v169;
        v171 = (char *)v18 + v169;
        v172 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v173 = sub_23FB2ED38();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v170, v171, v173);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
        }
        v174 = v168[7];
        v175 = (char *)v17 + v174;
        v176 = (char *)v18 + v174;
        v177 = sub_23FB2C764();
        v178 = v176;
        v179 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 32);
        v179(v175, v178, v177);
        v180 = v168[8];
        v181 = (_OWORD *)((char *)v17 + v180);
        v182 = (_OWORD *)((char *)v18 + v180);
        v183 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        }
        else
        {
          *v181 = *v182;
          v197 = type metadata accessor for RequestContent.TextContent(0);
          v179((char *)v181 + *(int *)(v197 + 20), (char *)v182 + *(int *)(v197 + 20), v177);
          swift_storeEnumTagMultiPayload();
        }
        a3 = v301;
        v8 = v302;
        goto LABEL_84;
      case 0x11u:
        v295 = a3;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v6))
        {
          v44 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v6);
        }
        v145 = (int *)type metadata accessor for ActionStepResult(0);
        *(_OWORD *)((char *)v17 + v145[5]) = *(_OWORD *)((char *)v18 + v145[5]);
        v146 = v145[6];
        v147 = (char *)v17 + v146;
        v148 = (char *)v18 + v146;
        v149 = sub_23FB2C80C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
        v150 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        v151 = &v147[v150];
        v152 = &v148[v150];
        v153 = sub_23FB2D0B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v152, 1, v153))
        {
          v154 = sub_23F6916B8(&qword_256EA2780);
          memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v151, 0, 1, v153);
        }
        *(_OWORD *)((char *)v17 + v145[7]) = *(_OWORD *)((char *)v18 + v145[7]);
        goto LABEL_115;
      case 0x12u:
        *v17 = *v18;
        StepResults = type metadata accessor for QueryStepResults(0);
        v46 = *(int *)(StepResults + 20);
        v296 = a3;
        v47 = (char *)v17 + v46;
        v48 = (char *)v18 + v46;
        v49 = sub_23FB2C764();
        v50 = v48;
        a3 = v296;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v50, v49);
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + *(int *)(StepResults + 24), (char *)v18 + *(int *)(StepResults + 24), v6);
        goto LABEL_52;
      case 0x13u:
        v115 = sub_23FB2C938();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v115 - 8) + 32))(v17, v18, v115);
        goto LABEL_52;
      case 0x14u:
        v116 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v116 - 8) + 32))(v17, v18, v116);
        v117 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(_OWORD *)((char *)v17 + v117[5]) = *(_OWORD *)((char *)v18 + v117[5]);
        *(_QWORD *)((char *)v17 + v117[6]) = *(_QWORD *)((char *)v18 + v117[6]);
        *(_QWORD *)((char *)v17 + v117[7]) = *(_QWORD *)((char *)v18 + v117[7]);
        *(_QWORD *)((char *)v17 + v117[8]) = *(_QWORD *)((char *)v18 + v117[8]);
        *((_BYTE *)v17 + v117[9]) = *((_BYTE *)v18 + v117[9]);
        *((_BYTE *)v17 + v117[10]) = *((_BYTE *)v18 + v117[10]);
        *((_BYTE *)v17 + v117[11]) = *((_BYTE *)v18 + v117[11]);
        goto LABEL_52;
      case 0x1Eu:
        v118 = sub_23FB2D004();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v118 - 8) + 32))(v17, v18, v118);
        goto LABEL_52;
      case 0x1Fu:
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v6))
        {
          v119 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v6);
        }
        v184 = type metadata accessor for StatementResult(0);
        *(_OWORD *)((char *)v17 + *(int *)(v184 + 20)) = *(_OWORD *)((char *)v18 + *(int *)(v184 + 20));
        v292 = v184;
        v185 = *(int *)(v184 + 24);
        v186 = (char *)v17 + v185;
        v187 = (char *)v18 + v185;
        v188 = sub_23FB2D0DC();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 32))(v186, v187, v188);
        v189 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        v190 = &v186[v189];
        v191 = &v187[v189];
        v192 = sub_23FB2D0B8();
        v295 = a3;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v191, 1, v192))
        {
          v193 = sub_23F6916B8(&qword_256EA2780);
          memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v190, v191, v192);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v190, 0, 1, v192);
        }
        v198 = v292;
        v199 = *(int *)(v292 + 28);
        __dstb = (char *)v17 + v199;
        v200 = (char *)v18 + v199;
        v201 = sub_23FB2C764();
        v202 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 32);
        v202(__dstb, v200, v201);
        v202((char *)v17 + *(int *)(v198 + 32), (char *)v18 + *(int *)(v198 + 32), v201);
        v202((char *)v17 + *(int *)(v198 + 36), (char *)v18 + *(int *)(v198 + 36), v201);
        goto LABEL_115;
      case 0x20u:
        v295 = a3;
        *(_OWORD *)v17 = *(_OWORD *)v18;
        v120 = type metadata accessor for ExternalAgentTextQuery(0);
        v121 = *(int *)(v120 + 20);
        v122 = (char *)v17 + v121;
        v123 = (char *)v18 + v121;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18 + v121, 1, v6))
        {
          v124 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v122, v123, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v122, 0, 1, v6);
        }
        v194 = *(int *)(v120 + 24);
        v195 = (char *)v17 + v194;
        v196 = (char *)v18 + v194;
        *(_OWORD *)v195 = *(_OWORD *)v196;
        *((_QWORD *)v195 + 2) = *((_QWORD *)v196 + 2);
        goto LABEL_115;
      case 0x21u:
        v295 = a3;
        *v17 = *v18;
        v51 = type metadata accessor for ExternalAgentSpeechQuery(0);
        v52 = *(int *)(v51 + 20);
        v53 = (char *)v17 + v52;
        v54 = (char *)v18 + v52;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18 + v52, 1, v6))goto LABEL_22;
        goto LABEL_58;
      case 0x22u:
        v56 = type metadata accessor for RequestContent(0);
        v57 = swift_getEnumCaseMultiPayload();
        v295 = a3;
        if (v57 == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v6))
          {
            v203 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v6);
          }
          v205 = type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + *(int *)(v205 + 20), (char *)v18 + *(int *)(v205 + 20), v6);
          v293 = v205;
          v206 = *(int *)(v205 + 24);
          v207 = (char *)v17 + v206;
          v208 = (char *)v18 + v206;
          v209 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v210 = sub_23FB2ED38();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v210 - 8) + 32))(v207, v208, v210);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v207, v208, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
          }
          v211 = *(int *)(v293 + 28);
          v212 = (char *)v17 + v211;
          v213 = (char *)v18 + v211;
          v214 = sub_23FB2C764();
          v284 = *(void (**)(char *, char *))(*(_QWORD *)(v214 - 8) + 32);
          v286 = v214;
          v284(v212, v213);
          v215 = *(int *)(v293 + 32);
          v216 = (_OWORD *)((char *)v17 + v215);
          v217 = (_OWORD *)((char *)v18 + v215);
          v218 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
          }
          else
          {
            *v216 = *v217;
            v231 = type metadata accessor for RequestContent.TextContent(0);
            ((void (*)(char *, char *, uint64_t))v284)((char *)v216 + *(int *)(v231 + 20), (char *)v217 + *(int *)(v231 + 20), v286);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (v57 != 1)
          {
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
            goto LABEL_107;
          }
          *(_OWORD *)v17 = *(_OWORD *)v18;
          v58 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v59 = (char *)v17 + v58;
          v60 = (char *)v18 + v58;
          v61 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
        }
        swift_storeEnumTagMultiPayload();
LABEL_107:
        v51 = type metadata accessor for ExternalAgentRequest(0);
        v232 = *(int *)(v51 + 20);
        v53 = (char *)v17 + v232;
        v54 = (char *)v18 + v232;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18 + v232, 1, v6))
        {
LABEL_22:
          v55 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
LABEL_58:
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v53, v54, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v53, 0, 1, v6);
        }
        v155 = *(int *)(v51 + 24);
        v156 = (char *)v17 + v155;
        v157 = (char *)v18 + v155;
        *(_OWORD *)v156 = *(_OWORD *)v157;
        *((_QWORD *)v156 + 2) = *((_QWORD *)v157 + 2);
LABEL_115:
        swift_storeEnumTagMultiPayload();
        a3 = v295;
LABEL_116:
        v8 = v302;
        break;
      case 0x23u:
        v125 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v17, v18, v125);
        v126 = type metadata accessor for ExternalAgentOutcome(0);
        v127 = *(int *)(v126 + 20);
        v128 = (char *)v17 + v127;
        v129 = a3;
        v130 = (char *)v18 + v127;
        v131 = sub_23FB2D0DC();
        v132 = v130;
        a3 = v129;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 32))(v128, v132, v131);
        *(_QWORD *)((char *)v17 + *(int *)(v126 + 24)) = *(_QWORD *)((char *)v18 + *(int *)(v126 + 24));
        goto LABEL_52;
      case 0x25u:
        v62 = sub_23FB2E8D0();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v17, v18, v62);
        v63 = type metadata accessor for ToolResolution(0);
        v64 = *(int *)(v63 + 20);
        v290 = (char *)v17 + v64;
        v297 = a3;
        v65 = (char *)v18 + v64;
        v66 = sub_23FB2C764();
        v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32);
        v68 = v65;
        a3 = v297;
        v67(v290, v68, v66);
        v67((char *)v17 + *(int *)(v63 + 24), (char *)v18 + *(int *)(v63 + 24), v66);
        goto LABEL_52;
      case 0x26u:
        v298 = a3;
        *(_OWORD *)v17 = *(_OWORD *)v18;
        v69 = (int *)type metadata accessor for UndoRedoRequest(0);
        v70 = v69[5];
        v71 = (char *)v17 + v70;
        v72 = (char *)v18 + v70;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18 + v70, 1, v6))
        {
          v73 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v71, v72, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v71, 0, 1, v6);
        }
        *((_BYTE *)v17 + v69[6]) = *((_BYTE *)v18 + v69[6]);
        v158 = v69[7];
        v159 = (char *)v17 + v158;
        v160 = (char *)v18 + v158;
        v161 = sub_23FB2C764();
        v162 = v160;
        v163 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32);
        v163(v159, v162, v161);
        v164 = v69[8];
        v165 = (char *)v17 + v164;
        v166 = (char *)v18 + v164;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18 + v164, 1, v161))
        {
          v167 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
        }
        else
        {
          v163(v165, v166, v161);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v165, 0, 1, v161);
        }
        v8 = v302;
        swift_storeEnumTagMultiPayload();
        a3 = v298;
        break;
      case 0x27u:
        v299 = a3;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
        v74 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *((_BYTE *)v17 + v74[5]) = *((_BYTE *)v18 + v74[5]);
        v75 = v74[6];
        v76 = (char *)v17 + v75;
        v77 = (char *)v18 + v75;
        v78 = sub_23FB2C764();
        v79 = v76;
        v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32);
        v80(v79, v77, v78);
        v81 = v74[7];
        v82 = (char *)v17 + v81;
        v83 = (char *)v18 + v81;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18 + v81, 1, v78))
        {
          v84 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
        }
        else
        {
          v80(v82, v83, v78);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v82, 0, 1, v78);
        }
        a3 = v299;
        v8 = v302;
LABEL_84:
        swift_storeEnumTagMultiPayload();
        break;
      case 0x28u:
        v85 = sub_23FB2ED38();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v17, v18, v85);
        v86 = type metadata accessor for TypeConversionRequest(0);
        v87 = *(int *)(v86 + 20);
        v88 = (char *)v17 + v87;
        v89 = a3;
        v90 = (char *)v18 + v87;
        v91 = sub_23FB2ED5C();
        v92 = v90;
        a3 = v89;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v88, v92, v91);
        v93 = *(int *)(v86 + 24);
        v94 = (char *)v17 + v93;
        v95 = (char *)v18 + v93;
        v96 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v94, v95, v96);
        goto LABEL_52;
      case 0x29u:
        v97 = sub_23FB2ED38();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v17, v18, v97);
        v98 = type metadata accessor for TypeConversionResult(0);
        v99 = *(int *)(v98 + 20);
        v291 = (char *)v17 + v99;
        v300 = a3;
        v100 = (char *)v18 + v99;
        v101 = sub_23FB2C764();
        v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32);
        v103 = v100;
        a3 = v300;
        v102(v291, v103, v101);
        v102((char *)v17 + *(int *)(v98 + 24), (char *)v18 + *(int *)(v98 + 24), v101);
        goto LABEL_52;
      case 0x2Au:
        v295 = a3;
        *(_OWORD *)v17 = *(_OWORD *)v18;
        v17[2] = v18[2];
        DecorationResult = type metadata accessor for QueryDecorationResult(0);
        v134 = *(int *)(DecorationResult + 28);
        v135 = (char *)v17 + v134;
        v136 = (char *)v18 + v134;
        v137 = sub_23FB2E354();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v136, 1, v137))
        {
          v138 = sub_23F6916B8(&qword_256EA71F8);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v135, v136, v137);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v135, 0, 1, v137);
        }
        *(_QWORD *)((char *)v17 + *(int *)(DecorationResult + 32)) = *(_QWORD *)((char *)v18
                                                                               + *(int *)(DecorationResult + 32));
        goto LABEL_115;
      case 0x2Cu:
        v139 = sub_23FB2C764();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v139 - 8) + 32))(v17, v18, v139);
        DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        *(_OWORD *)((char *)v17 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)v18
                                                                                         + *(int *)(DecorationPrePlannerResult
                                                                                                  + 20));
        v141 = *(int *)(DecorationPrePlannerResult + 24);
        v142 = (char *)v17 + v141;
        v143 = (char *)v18 + v141;
        v142[8] = v143[8];
        *(_QWORD *)v142 = *(_QWORD *)v143;
LABEL_52:
        swift_storeEnumTagMultiPayload();
        goto LABEL_116;
      default:
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        goto LABEL_116;
    }
  }
  v245 = v9[8];
  v246 = (_QWORD *)(a1 + v245);
  v247 = (uint64_t *)(a2 + v245);
  v249 = *v247;
  v248 = v247[1];
  *v246 = v249;
  v246[1] = v248;
  swift_bridgeObjectRelease();
  v250 = v9[9];
  v251 = (_QWORD *)(a1 + v250);
  v252 = (uint64_t *)(a2 + v250);
  v254 = *v252;
  v253 = v252[1];
  *v251 = v254;
  v251[1] = v253;
  swift_bridgeObjectRelease();
  v255 = v9[10];
  v256 = (_QWORD *)(a1 + v255);
  v257 = (uint64_t *)(a2 + v255);
  v259 = *v257;
  v258 = v257[1];
  *v256 = v259;
  v256[1] = v258;
  swift_bridgeObjectRelease();
  v260 = v9[11];
  v261 = (_QWORD *)(a1 + v260);
  v262 = (uint64_t *)(a2 + v260);
  v264 = *v262;
  v263 = v262[1];
  *v261 = v264;
  v261[1] = v263;
  swift_bridgeObjectRelease();
  v265 = v9[12];
  v266 = a1 + v265;
  v267 = a2 + v265;
  v268 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v268 - 8) + 40))(v266, v267, v268);
  v269 = (int *)type metadata accessor for Timepoint();
  *(_QWORD *)(v266 + v269[5]) = *(_QWORD *)(v267 + v269[5]);
  *(_QWORD *)(v266 + v269[6]) = *(_QWORD *)(v267 + v269[6]);
  v8(v266 + v269[7], v267 + v269[7], v6);
  v270 = v9[13];
  v271 = (_QWORD *)(a1 + v270);
  v272 = (uint64_t *)(a2 + v270);
  v274 = *v272;
  v273 = v272[1];
  *v271 = v274;
  v271[1] = v273;
  swift_bridgeObjectRelease();
  v275 = v9[14];
  v276 = a1 + v275;
  v277 = a2 + v275;
  *(_QWORD *)v276 = *(_QWORD *)v277;
  *(_BYTE *)(v276 + 8) = *(_BYTE *)(v277 + 8);
  *(_QWORD *)(a1 + v9[15]) = *(_QWORD *)(a2 + v9[15]);
  swift_bridgeObjectRelease();
  v278 = *(int *)(a3 + 20);
  v279 = (_QWORD *)(a1 + v278);
  v280 = (uint64_t *)(a2 + v278);
  v282 = *v280;
  v281 = v280[1];
  *v279 = v282;
  v279[1] = v281;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s19InstrumentableEventVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F73D8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for Session.Event(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t _s19InstrumentableEventVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F73D934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = type metadata accessor for Session.Event(0);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
    sub_23F694C84();
  }
}

uint64_t sub_23F73D9A4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Session.Event(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s19InstrumentableEventV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F73DA60 + 4 * byte_23FB59D71[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F73DA94 + 4 * byte_23FB59D6C[v4]))();
}

uint64_t sub_23F73DA94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F73DA9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F73DAA4);
  return result;
}

uint64_t sub_23F73DAB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F73DAB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23F73DABC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F73DAC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s19InstrumentableEventV10CodingKeysOMa()
{
  return &_s19InstrumentableEventV10CodingKeysON;
}

unint64_t sub_23F73DAE4()
{
  unint64_t result;

  result = qword_256EA7290;
  if (!qword_256EA7290)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59EAC, &_s19InstrumentableEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA7290);
  }
  return result;
}

unint64_t sub_23F73DB24()
{
  unint64_t result;

  result = qword_256EA7298;
  if (!qword_256EA7298)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59E1C, &_s19InstrumentableEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA7298);
  }
  return result;
}

unint64_t sub_23F73DB64()
{
  unint64_t result;

  result = qword_256EA72A0;
  if (!qword_256EA72A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB59E44, &_s19InstrumentableEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA72A0);
  }
  return result;
}

uint64_t sub_23F73DBA0()
{
  return sub_23FB2FB78();
}

uint64_t sub_23F73DBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_23F73DBC0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23F6BC34C(v1, v0);
}

uint64_t Lexer.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = HIBYTE(a2) & 0xF;
  *a3 = result;
  a3[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = result & 0xFFFFFFFFFFFFLL;
  a3[2] = 0;
  a3[3] = v3;
  a3[4] = 0;
  a3[5] = 0;
  return result;
}

void Lexer.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  __int128 v31;
  BOOL v32;
  char v34;
  BOOL v35;
  _QWORD *v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  uint64_t v48;
  __int128 *v50;
  uint64_t v51;
  _QWORD v52[4];
  _QWORD *v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  while (1)
  {
    v2 = a1;
    sub_23F73E190();
    v3 = (uint64_t *)(v1 + 32);
    v4 = *(_QWORD *)(v1 + 40);
    if (v4)
    {
      v5 = *v3;
      *v3 = 0;
      *(_QWORD *)(v1 + 40) = 0;
    }
    else
    {
      v6 = sub_23FB2F278();
      if (!v7)
      {
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        v16 = -1;
        goto LABEL_31;
      }
      v5 = v6;
      v4 = v7;
    }
    v8 = v5 == 35 && v4 == 0xE100000000000000;
    if (!v8 && (sub_23F73FFC4() & 1) == 0)
      break;
    sub_23F6B5908();
    do
    {
      v9 = sub_23FB2F278();
      if (!v10)
        break;
      if (v9 == 10 && v10 == 0xE100000000000000)
      {
        sub_23F6B5AB0();
        break;
      }
      v12 = sub_23F6B5280();
      sub_23F6B5AB0();
    }
    while ((v12 & 1) == 0);
    a1 = v2;
    v1 = v56;
  }
  v13 = v5 == 61 && v4 == 0xE100000000000000;
  if (v13 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v14 = (sub_23F73E264() & 1) == 0;
    v15 = 2;
LABEL_24:
    if (!v14)
      ++v15;
LABEL_26:
    *(_QWORD *)v2 = v15;
    *(_QWORD *)(v2 + 8) = 0;
LABEL_27:
    v16 = 6;
    goto LABEL_31;
  }
  v17 = v5 == 33 && v4 == 0xE100000000000000;
  if (v17 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v18 = sub_23F73E264();
    v15 = 18;
    if ((v18 & 1) != 0)
      v15 = 4;
    goto LABEL_26;
  }
  v19 = v5 == 60 && v4 == 0xE100000000000000;
  if (v19 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v14 = (sub_23F73E264() & 1) == 0;
    v15 = 5;
    goto LABEL_24;
  }
  v20 = v5 == 62 && v4 == 0xE100000000000000;
  if (v20 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v14 = (sub_23F73E264() & 1) == 0;
    v15 = 7;
    goto LABEL_24;
  }
  v21 = v5 == 43 && v4 == 0xE100000000000000;
  if (v21 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v14 = (sub_23F73E264() & 1) == 0;
    v15 = 9;
    goto LABEL_24;
  }
  v22 = v5 == 45 && v4 == 0xE100000000000000;
  if (v22 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v14 = (sub_23F73E264() & 1) == 0;
    v15 = 11;
    goto LABEL_24;
  }
  v53 = (_QWORD *)(v1 + 32);
  v23 = v5 == 47 && v4 == 0xE100000000000000;
  if (v23 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v14 = (sub_23F73E264() & 1) == 0;
    v15 = 16;
    goto LABEL_24;
  }
  v24 = v5 == 42 && v4 == 0xE100000000000000;
  if (v24 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v25 = sub_23FB2F278();
    *(_QWORD *)(v1 + 32) = v25;
    *(_QWORD *)(v1 + 40) = v26;
    if (v26)
    {
      v27 = v25;
      v28 = v26;
      v29 = v25 == 61 && v26 == 0xE100000000000000;
      if (v29 || (sub_23F6B5280() & 1) != 0)
      {
        sub_23F6B5AB0();
        v30 = v53;
        *v53 = 0;
        v30[1] = 0;
        v31 = xmmword_23FB59FE0;
LABEL_102:
        *(_OWORD *)v2 = v31;
        goto LABEL_27;
      }
      sub_23F6B6254();
      if (v27 == 42 && v28 == 0xE100000000000000)
      {
        sub_23F6B5AB0();
      }
      else
      {
        v34 = sub_23F6B5280();
        sub_23F6B5AB0();
        if ((v34 & 1) == 0)
          goto LABEL_93;
      }
      sub_23F6B5AB0();
      v36 = v53;
      *v53 = 0;
      v36[1] = 0;
      v31 = xmmword_23FB59FD0;
      goto LABEL_102;
    }
LABEL_93:
    v31 = xmmword_23FB59FF0;
    goto LABEL_102;
  }
  v32 = v5 == 40 && v4 == 0xE100000000000000;
  if (v32 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59FC0;
    goto LABEL_102;
  }
  v35 = v5 == 41 && v4 == 0xE100000000000000;
  if (v35 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59FB0;
    goto LABEL_102;
  }
  v37 = v5 == 123 && v4 == 0xE100000000000000;
  if (v37 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59FA0;
    goto LABEL_102;
  }
  v38 = v5 == 125 && v4 == 0xE100000000000000;
  if (v38 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59F90;
    goto LABEL_102;
  }
  v39 = v5 == 91 && v4 == 0xE100000000000000;
  if (v39 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59F80;
    goto LABEL_102;
  }
  v40 = v5 == 93 && v4 == 0xE100000000000000;
  if (v40 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59F70;
    goto LABEL_102;
  }
  v41 = v5 == 46 && v4 == 0xE100000000000000;
  if (v41 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59F60;
    goto LABEL_102;
  }
  v42 = v5 == 44 && v4 == 0xE100000000000000;
  if (v42 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59F50;
    goto LABEL_102;
  }
  v43 = v5 == 58 && v4 == 0xE100000000000000;
  if (v43 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59F40;
    goto LABEL_102;
  }
  v44 = v5 == 59 && v4 == 0xE100000000000000;
  if (v44 || (sub_23F73FFC4() & 1) != 0)
  {
    sub_23F6B5908();
    v31 = xmmword_23FB59F30;
    goto LABEL_102;
  }
  v45 = v5 == 10 && v4 == 0xE100000000000000;
  if (!v45 && (sub_23F73FFC4() & 1) == 0)
  {
    v46 = v5 == 34 && v4 == 0xE100000000000000;
    if (v46 || (sub_23F73FFC4() & 1) != 0)
    {
      sub_23F6B5908();
      sub_23F73E410((uint64_t)&v54);
      goto LABEL_163;
    }
    if (v5 == 48 && v4 == 0xE100000000000000)
      goto LABEL_173;
    v48 = sub_23F740024();
    if ((v48 & 1) != 0)
    {
LABEL_174:
      *(_QWORD *)&v54 = v5;
      *((_QWORD *)&v54 + 1) = v4;
      MEMORY[0x24BDAC7A8](v48);
      v52[2] = &v54;
      if ((sub_23F73F6C0(sub_23F73FBB8, (uint64_t)v52, 0xD000000000000035, 0x800000023FB324B0) & 1) == 0)
      {
        sub_23F6B5908();
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        goto LABEL_27;
      }
      sub_23F6B6098();
      sub_23F73E8F4(v50);
      goto LABEL_177;
    }
    if (v5 != 57 || v4 != 0xE100000000000000)
    {
LABEL_173:
      v48 = sub_23F74000C();
      if ((v48 & 1) != 0)
        goto LABEL_174;
    }
    sub_23F6B6098();
    sub_23F73E550(v51);
LABEL_177:
    sub_23F6B5908();
    goto LABEL_163;
  }
  sub_23F6B5908();
  sub_23F73E314((uint64_t)&v54);
LABEL_163:
  v16 = v55;
  *(_OWORD *)v2 = v54;
LABEL_31:
  *(_BYTE *)(v2 + 16) = v16;
  sub_23F6B69E0();
}

void sub_23F73E190()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  v1 = (uint64_t *)(v0 + 32);
  if (!*(_QWORD *)(v0 + 40))
    goto LABEL_3;
  v2 = *v1;
  v3 = *(_QWORD *)(v0 + 40);
  while (v2 != 10 || v3 != 0xE100000000000000)
  {
    v7 = sub_23F6B5280();
    sub_23F6B5508();
    if ((v7 & 1) != 0)
      goto LABEL_14;
    v8 = sub_23FB2F08C();
    sub_23F6B5AB0();
    if ((v8 & 1) == 0)
      goto LABEL_12;
    sub_23F6B5AB0();
    *v1 = 0;
    *(_QWORD *)(v0 + 40) = 0;
LABEL_3:
    v4 = sub_23FB2F278();
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 40) = v5;
    if (!v5)
    {
LABEL_12:
      sub_23F6B69E0();
      return;
    }
    v2 = v4;
    v3 = v5;
    sub_23F740050();
  }
  sub_23F6B5508();
LABEL_14:
  swift_bridgeObjectRelease();
}

uint64_t sub_23F73E264()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t result;

  v1 = (uint64_t *)(v0 + 32);
  if (*(_QWORD *)(v0 + 40))
  {
    v2 = *v1;
    v3 = *(_QWORD *)(v0 + 40);
  }
  else
  {
    v4 = sub_23FB2F278();
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 40) = v5;
    if (!v5)
      return 0;
    v2 = v4;
    v3 = v5;
    sub_23F740050();
  }
  if (v2 == 61 && v3 == 0xE100000000000000)
  {
    sub_23F6B6254();
    sub_23F693E04();
    goto LABEL_12;
  }
  v7 = sub_23F6B5280();
  sub_23F6B6254();
  sub_23F693E04();
  result = 0;
  if ((v7 & 1) != 0)
  {
LABEL_12:
    sub_23F693E04();
    *v1 = 0;
    v1[1] = 0;
    return 1;
  }
  return result;
}

void sub_23F73E314(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  char v12;

  v3 = 0;
  v4 = (uint64_t *)(v1 + 32);
  if (!*(_QWORD *)(v1 + 40))
    goto LABEL_3;
  v5 = *v4;
  v6 = *(_QWORD *)(v1 + 40);
  while (v5 != 32 || v6 != 0xE100000000000000)
  {
    sub_23F6B6098();
    if ((sub_23F6B5280() & 1) != 0)
      break;
    if (v5 == 9 && v6 == 0xE100000000000000)
    {
      sub_23F6B6254();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23F6B6098();
      v12 = sub_23F6B5280();
      sub_23F6B6254();
      sub_23F6B5908();
      if ((v12 & 1) == 0)
        goto LABEL_22;
    }
    sub_23F6B5908();
    v10 = __OFADD__(v3, 4);
    v3 += 4;
    if (v10)
      goto LABEL_23;
LABEL_21:
    *v4 = 0;
    *(_QWORD *)(v1 + 40) = 0;
LABEL_3:
    v7 = sub_23FB2F278();
    *(_QWORD *)(v1 + 32) = v7;
    *(_QWORD *)(v1 + 40) = v8;
    if (!v8)
    {
LABEL_22:
      *(_QWORD *)a1 = v3;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
      sub_23F6B69E0();
      return;
    }
    v5 = v7;
    v6 = v8;
    sub_23F740050();
  }
  sub_23F6B6254();
  sub_23F6B5908();
  sub_23F6B5908();
  v10 = __OFADD__(v3++, 1);
  if (!v10)
    goto LABEL_21;
  __break(1u);
LABEL_23:
  __break(1u);
}

uint64_t sub_23F73E410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  char v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t result;
  char v16;

  v3 = 0;
  v4 = (uint64_t *)(v1 + 32);
  while (1)
  {
    v5 = *(_QWORD *)(v1 + 40);
    if (v5)
    {
      v6 = *v4;
      *v4 = 0;
      *(_QWORD *)(v1 + 40) = 0;
    }
    else
    {
      v7 = sub_23FB2F278();
      if (!v8)
        goto LABEL_35;
      v6 = v7;
      v5 = v8;
    }
    v9 = v6 == 34 && v5 == 0xE100000000000000;
    v10 = v9;
    if ((v3 & 1) != 0)
      break;
    if (v10 || (sub_23F73FFC4() & 1) != 0)
    {
      result = sub_23F6B5908();
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0xE000000000000000;
      v16 = 5;
      goto LABEL_36;
    }
    v14 = v6 == 92 && v5 == 0xE100000000000000;
    if (v14 || (sub_23F73FFC4() & 1) != 0)
    {
      v3 = 1;
      goto LABEL_33;
    }
LABEL_32:
    MEMORY[0x242673ECC](v6, v5);
    v3 = 0;
LABEL_33:
    sub_23F6B5908();
  }
  if (v10)
    goto LABEL_32;
  v11 = sub_23F73FFC4();
  v12 = v6 == 92 && v5 == 0xE100000000000000;
  v13 = v12;
  if ((v11 & 1) != 0 || v13 || (sub_23F73FFC4() & 1) != 0)
    goto LABEL_32;
  sub_23F6B5908();
LABEL_35:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = 6;
LABEL_36:
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_23F73E550@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v9;
  uint64_t result;

  sub_23FB2F0BC();
  if (*(_QWORD *)(v1 + 40))
  {
    v3 = *(_QWORD *)(v1 + 32);
    v4 = *(_QWORD *)(v1 + 40);
  }
  else
  {
    v5 = sub_23FB2F278();
    *(_QWORD *)(v1 + 32) = v5;
    *(_QWORD *)(v1 + 40) = v6;
    if (!v6)
      goto LABEL_23;
    v3 = v5;
    v4 = v6;
    sub_23F740050();
  }
  if (v3 == 48 && v4 == 0xE100000000000000)
    goto LABEL_14;
  if ((sub_23F740024() & 1) == 0)
  {
    if (v3 == 57 && v4 == 0xE100000000000000)
    {
LABEL_15:
      swift_bridgeObjectRetain();
      sub_23F6B5908();
      sub_23F740058();
    }
LABEL_14:
    if ((sub_23F74000C() & 1) == 0)
      goto LABEL_15;
  }
  v9 = v3 == 46 && v4 == 0xE100000000000000;
  if (v9 || (sub_23F6B6098(), (sub_23F6B5280() & 1) != 0))
  {
    swift_bridgeObjectRetain();
    sub_23F6B5908();
    sub_23F740058();
  }
  swift_bridgeObjectRetain();
  sub_23F6B5908();
LABEL_23:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 6;
  return result;
}

uint64_t sub_23F73E8F4@<X0>(__int128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t result;
  __int128 *v15;
  char v16;
  BOOL v17;
  BOOL v18;
  __int128 v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  _BYTE v28[16];
  uint64_t *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v30 = a1;
  v33 = 0;
  v34 = 0xE000000000000000;
  sub_23FB2F0BC();
  v2 = (uint64_t *)(v1 + 32);
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      v4 = *v2;
      v5 = *(_QWORD *)(v1 + 40);
    }
    else
    {
      v6 = sub_23FB2F278();
      *(_QWORD *)(v1 + 32) = v6;
      *(_QWORD *)(v1 + 40) = v7;
      if (!v7)
        goto LABEL_12;
      v4 = v6;
      v5 = v7;
      sub_23F740050();
      v3 = 0;
    }
    v31 = v4;
    v32 = v5;
    MEMORY[0x24BDAC7A8](v3);
    v29 = &v31;
    swift_bridgeObjectRetain();
    v8 = sub_23F73F6C0(sub_23F73FF9C, (uint64_t)v28, 0xD000000000000035, 0x800000023FB324B0);
    if ((v8 & 1) == 0)
    {
      v31 = v4;
      v32 = v5;
      MEMORY[0x24BDAC7A8](v8);
      v29 = &v31;
      if ((sub_23F73F6C0(sub_23F73FF9C, (uint64_t)v28, 0x3837363534333231, 0xEA00000000003039) & 1) == 0)
        break;
    }
    MEMORY[0x242673ECC](v4, v5);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      *v2 = 0;
      *(_QWORD *)(v1 + 40) = 0;
    }
    else
    {
      sub_23FB2F278();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
LABEL_12:
  v10 = v33;
  v9 = v34;
  v11 = v33 == 1702195796 && v34 == 0xE400000000000000;
  if (v11
    || (sub_23F6B5280() & 1) != 0
    || (v10 == 1702195828 ? (v12 = v9 == 0xE400000000000000) : (v12 = 0), v12 || (sub_23F6B5280() & 1) != 0))
  {
    result = swift_bridgeObjectRelease();
    v15 = v30;
    *v30 = xmmword_23FB5A080;
  }
  else
  {
    v13 = v10 == 0x65736C6146 && v9 == 0xE500000000000000;
    if (!v13 && (sub_23F6B5280() & 1) == 0)
    {
      v17 = v10 == 0x65736C6166 && v9 == 0xE500000000000000;
      if (!v17 && (sub_23F6B5280() & 1) == 0)
      {
        v18 = v10 == 1701736270 && v9 == 0xE400000000000000;
        if (v18 || (sub_23F6B5280() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v19 = xmmword_23FB5A080;
        }
        else
        {
          v20 = v10 == 6581857 && v9 == 0xE300000000000000;
          if (v20 || (sub_23F6B5280() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v19 = xmmword_23FB5A070;
          }
          else
          {
            v21 = v10 == 29295 && v9 == 0xE200000000000000;
            if (v21 || (sub_23F6B5280() & 1) != 0)
            {
              result = swift_bridgeObjectRelease();
              v15 = v30;
              v19 = xmmword_23FB5A060;
              goto LABEL_46;
            }
            v22 = v10 == 7630702 && v9 == 0xE300000000000000;
            if (v22 || (sub_23F6B5280() & 1) != 0)
            {
              result = swift_bridgeObjectRelease();
              v19 = xmmword_23FB5A050;
            }
            else
            {
              v23 = v10 == 7499622 && v9 == 0xE300000000000000;
              if (v23 || (sub_23F6B5280() & 1) != 0)
              {
                result = swift_bridgeObjectRelease();
                v19 = xmmword_23FB5A040;
              }
              else
              {
                v24 = v10 == 28265 && v9 == 0xE200000000000000;
                if (v24 || (sub_23F6B5280() & 1) != 0)
                {
                  result = swift_bridgeObjectRelease();
                  v19 = xmmword_23FB5A030;
                }
                else
                {
                  v25 = v10 == 26217 && v9 == 0xE200000000000000;
                  if (v25 || (sub_23F6B5280() & 1) != 0)
                  {
                    result = swift_bridgeObjectRelease();
                    v19 = xmmword_23FB5A020;
                  }
                  else
                  {
                    v26 = v10 == 1718185061 && v9 == 0xE400000000000000;
                    if (v26 || (sub_23F6B5280() & 1) != 0)
                    {
                      result = swift_bridgeObjectRelease();
                      v19 = xmmword_23FB5A010;
                    }
                    else
                    {
                      if (v10 != 1702063205 || v9 != 0xE400000000000000)
                      {
                        result = sub_23F6B5280();
                        if ((result & 1) == 0)
                        {
                          v15 = v30;
                          *(_QWORD *)v30 = v10;
                          *((_QWORD *)v15 + 1) = v9;
                          v16 = 1;
                          goto LABEL_31;
                        }
                      }
                      result = swift_bridgeObjectRelease();
                      v19 = xmmword_23FB5A000;
                    }
                  }
                }
              }
            }
          }
        }
        v15 = v30;
LABEL_46:
        *v15 = v19;
        v16 = 6;
        goto LABEL_31;
      }
    }
    result = swift_bridgeObjectRelease();
    v15 = v30;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  v16 = 2;
LABEL_31:
  *((_BYTE *)v15 + 16) = v16;
  return result;
}

Swift::String __swiftcall Lexer.remainingString()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v1 = (uint64_t *)(v0 + 32);
  while (1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    if (v2)
    {
      v3 = *v1;
      *v1 = 0;
      *(_QWORD *)(v0 + 40) = 0;
      goto LABEL_6;
    }
    v3 = sub_23FB2F278();
    if (!v4)
      break;
    v2 = v4;
LABEL_6:
    MEMORY[0x242673ECC](v3, v2);
    sub_23F6B5AB0();
  }
  v5 = 0;
  v6 = (void *)0xE000000000000000;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_23F73EF00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v9;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_23FB2F788();
    swift_bridgeObjectRelease();
    v6 = v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8]();
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (v7 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = sub_23FB2F83C();
      }
      v6 = sub_23F73FEF4(v4, v5, (void (*)(uint64_t *__return_ptr))sub_23F73FF60);
      swift_bridgeObjectRelease();
    }
  }
  if ((v6 & 1) != 0)
    return 0;
  else
    return 0;
}

void static Lexer.Token.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_23F73F0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (v4)
  {
    sub_23F73FBD4(v1, v2, v4);
    v10 = sub_23F6B6190();
    v12 = sub_23F73FFE4(v10, v11, v3);
    sub_23F73FBF0(v12, v13, v4);
    return 0;
  }
  else
  {
    v5 = sub_23F6B6190();
    v7 = sub_23F73FFE4(v5, v6, 0);
    sub_23F73FBF0(v7, v8, 0);
    return v0 == v1;
  }
}

void sub_23F73F298()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 1 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  JUMPOUT(0x23F73F278);
}

void sub_23F73F2C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 2 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(2, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F2DC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 3 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(3, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F2F8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 4 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(4, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F314()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 5 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(5, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F330()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 6 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(6, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F34C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 7 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(7, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F368()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 8 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(8, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F384()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 9 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(9, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F3A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 10 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(10, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F3BC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 11 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(11, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F3D8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 12 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(12, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F3F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 13 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(13, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F410()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 14 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(14, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F42C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 15 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(15, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F448()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 16 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(16, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F464()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 17 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(17, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F480()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 18 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(18, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F49C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 19 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(19, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F4B8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 20 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(20, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F4D4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 21 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(21, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F4F0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 22 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(22, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F50C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 23 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(23, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F528()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 24 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(24, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F544()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 25 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(25, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F560()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 26 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(26, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F57C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 27 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(27, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F598()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 28 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(28, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F5B4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 29 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(29, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F5D0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 30 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(30, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

void sub_23F73F5EC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (v2 != 6 || v0 != 31 || v1 != 0)
    JUMPOUT(0x23F73F1D8);
  sub_23F73FFB4();
  sub_23F73FBF0(31, 0, 6u);
  JUMPOUT(0x23F73F27CLL);
}

uint64_t sub_23F73F6C0(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v13[6];

  v6 = HIBYTE(a4) & 0xF;
  v13[2] = a3;
  v13[3] = a4;
  if ((a4 & 0x2000000000000000) == 0)
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  v13[4] = 0;
  v13[5] = v6;
  swift_bridgeObjectRetain();
  v7 = sub_23FB2F278();
  if (v8)
  {
    v9 = v8;
    while (1)
    {
      v13[0] = v7;
      v13[1] = v9;
      v10 = a1(v13);
      swift_bridgeObjectRelease();
      if (v4 || (v10 & 1) != 0)
        break;
      v7 = sub_23FB2F278();
      v9 = v11;
      if (!v11)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_23F73F788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return sub_23FB2FB78() & 1;
}

_BYTE *sub_23F73F7C8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unsigned __int8 *sub_23F73F830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_23FB2F2E4();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_23F7E4124();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_23FB2F83C();
  }
LABEL_7:
  v11 = sub_23F73F914(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_23F73F914(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23F73FB90(uint64_t *a1, uint64_t *a2)
{
  return sub_23F73F788(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_23F73FBB8(uint64_t *a1)
{
  uint64_t v1;

  return sub_23F73FB90(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_23F73FBD4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if ((a3 | 4) == 5)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23F73FBF0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if ((a3 | 4) == 5)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t destroy for Lexer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lexer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Lexer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Session.PlanGenerationModelOutputError(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Lexer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lexer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lexer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lexer()
{
  return &type metadata for Lexer;
}

uint64_t destroy for Lexer.Token(uint64_t a1)
{
  return sub_23F73FBF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s30IntelligenceFlowPlannerSupport5LexerV5TokenOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23F73FBD4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Lexer.Token(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23F73FBD4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23F73FBF0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Lexer.Token(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23F73FBF0(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Lexer.Token()
{
  return &type metadata for Lexer.Token;
}

uint64_t sub_23F73FEF4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_BYTE *sub_23F73FF48@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_23F73F7C8(a1, a2);
}

_QWORD *sub_23F73FF60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t sub_23F73FF9C(uint64_t *a1)
{
  return sub_23F73FBB8(a1) & 1;
}

uint64_t sub_23F73FFB4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F73FBF0(v1, v0, 6u);
}

uint64_t sub_23F73FFC4()
{
  return sub_23FB2FB78();
}

uint64_t sub_23F73FFD8()
{
  return sub_23FB2FB78();
}

uint64_t sub_23F73FFE4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  sub_23F73FBF0(a1, a2, a3);
  return v3;
}

uint64_t sub_23F74000C()
{
  return sub_23FB2FB78();
}

uint64_t sub_23F740024()
{
  return sub_23FB2FB78();
}

uint64_t sub_23F740050()
{
  return swift_bridgeObjectRetain();
}

void sub_23F740058()
{
  _QWORD *v0;

  *v0 = 0;
  v0[1] = 0;
  JUMPOUT(0x242673ECCLL);
}

uint64_t PlannerInferenceRequest.promptRequest.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

IntelligenceFlowPlannerSupport::PlannerInferenceRequest __swiftcall PlannerInferenceRequest.init(promptRequest:)(IntelligenceFlowPlannerSupport::PlannerInferenceRequest promptRequest)
{
  IntelligenceFlowPlannerSupport::PlannerInferenceRequest *v1;

  *v1 = promptRequest;
  return promptRequest;
}

uint64_t sub_23F7400C0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x655274706D6F7270 && a2 == 0xED00007473657571)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F740168()
{
  return 0x655274706D6F7270;
}

void sub_23F74018C()
{
  sub_23F740B9C();
}

uint64_t sub_23F7401A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7400C0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F7401D0()
{
  sub_23F74024C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7401F8()
{
  sub_23F74024C();
  return sub_23FB2FD1C();
}

void PlannerInferenceRequest.encode(to:)()
{
  sub_23F740450();
}

unint64_t sub_23F74024C()
{
  unint64_t result;

  result = qword_256EA72B0;
  if (!qword_256EA72B0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A7E0, &type metadata for PlannerInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA72B0);
  }
  return result;
}

void PlannerInferenceRequest.init(from:)()
{
  sub_23F74057C();
}

void sub_23F7402B4()
{
  PlannerInferenceRequest.init(from:)();
}

void sub_23F7402C8()
{
  PlannerInferenceRequest.encode(to:)();
}

uint64_t sub_23F7402DC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x655274706D6F7270 && a2 == 0xEE0065736E6F7073)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F740384()
{
  return 0x655274706D6F7270;
}

uint64_t sub_23F7403AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7402DC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F7403D4()
{
  sub_23F740514();
  return sub_23FB2FD10();
}

uint64_t sub_23F7403FC()
{
  sub_23F740514();
  return sub_23FB2FD1C();
}

void PlannerInferenceResponse.encode(to:)()
{
  sub_23F740450();
}

void sub_23F740450()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);

  sub_23F6B5220();
  v8 = v2;
  v4 = v3;
  v6 = sub_23F6916B8(v5);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B59E0();
  sub_23F6ADC98(v4, v4[3]);
  v8();
  sub_23FB2FCC8();
  sub_23FB2FADC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v6);
  sub_23F6B5100();
}

unint64_t sub_23F740514()
{
  unint64_t result;

  result = qword_256EA72C8;
  if (!qword_256EA72C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A790, &type metadata for PlannerInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA72C8);
  }
  return result;
}

void PlannerInferenceResponse.init(from:)()
{
  sub_23F74057C();
}

void sub_23F74057C()
{
  uint64_t v0;
  void (*v1)(void);
  void (*v2)(void);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_23F6B5220();
  v2 = v1;
  v4 = v3;
  v10 = v5;
  v11 = sub_23F6916B8(v6);
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6ADC98(v4, v4[3]);
  v2();
  sub_23FB2FCB0();
  if (!v0)
  {
    v7 = sub_23FB2FA40();
    v9 = v8;
    sub_23F741AA4();
    *v10 = v7;
    v10[1] = v9;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  sub_23F6B5100();
}

void sub_23F740670()
{
  PlannerInferenceResponse.init(from:)();
}

void sub_23F740684()
{
  PlannerInferenceResponse.encode(to:)();
}

void ResponseGenerationInferenceRequest.init(responseGenerationInput:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23F740A28(a1, a2, type metadata accessor for ResponseGenerationInput);
}

uint64_t sub_23F7406B8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000017 && a2 == 0x800000023FB324F0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_23F74073C()
{
  return 0xD000000000000017;
}

uint64_t sub_23F74075C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7406B8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F740784()
{
  sub_23F740894();
  return sub_23FB2FD10();
}

uint64_t sub_23F7407AC()
{
  sub_23F740894();
  return sub_23FB2FD1C();
}

void ResponseGenerationInferenceRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;

  sub_23F6916B8(&qword_256EA72D8);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6ADC98(a1, a1[3]);
  sub_23F740894();
  sub_23F741A90();
  type metadata accessor for ResponseGenerationInput(0);
  sub_23F6D3458(&qword_256EA72E8, type metadata accessor for ResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationInput);
  sub_23F741A60();
  sub_23F741A7C();
  sub_23F6D3710();
}

unint64_t sub_23F740894()
{
  unint64_t result;

  result = qword_256EA72E0;
  if (!qword_256EA72E0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A740, &type metadata for ResponseGenerationInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA72E0);
  }
  return result;
}

void ResponseGenerationInferenceRequest.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23F6B5220();
  v4 = sub_23F741ACC(v3);
  type metadata accessor for ResponseGenerationInput(v4);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v13 = v6;
  v12 = *(_QWORD *)(sub_23F6916B8(&qword_256EA72F0) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_23F70D7F8();
  type metadata accessor for ResponseGenerationInferenceRequest(v8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B59E0();
  sub_23F6ADC98(v0, v0[3]);
  sub_23F740894();
  sub_23F741B04();
  sub_23FB2FCB0();
  if (!v1)
  {
    sub_23F6D3458(&qword_256EA72F8, type metadata accessor for ResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationInput);
    sub_23F741AF8();
    sub_23F741AE0(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    sub_23F740A28(v13, v2, type metadata accessor for ResponseGenerationInput);
    sub_23F741AEC(v10, v11, type metadata accessor for ResponseGenerationInferenceRequest);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  sub_23F6B5100();
}

uint64_t type metadata accessor for ResponseGenerationInferenceRequest(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA7380);
}

void sub_23F740A28(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_23F694CC8();
}

void sub_23F740A68()
{
  ResponseGenerationInferenceRequest.init(from:)();
}

void sub_23F740A7C(_QWORD *a1)
{
  ResponseGenerationInferenceRequest.encode(to:)(a1);
}

uint64_t ResponseGenerationInferenceResponse.systemResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23F741AB4();
  return sub_23F6B64B0(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t ResponseGenerationInferenceResponse.init(systemResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23F741AB4();
  return sub_23F6B64B0(a2, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 32));
}

uint64_t sub_23F740AF4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65526D6574737973 && a2 == 0xEE0065736E6F7073)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void sub_23F740B9C()
{
  sub_23FB2FC5C();
  sub_23F6B5FB0();
  sub_23FB2FC8C();
  sub_23F6B5398();
}

uint64_t sub_23F740BCC()
{
  return 0x65526D6574737973;
}

void sub_23F740BF0()
{
  sub_23FB2FC5C();
  sub_23F6B5FB0();
  sub_23FB2FC8C();
  sub_23F6B5398();
}

uint64_t sub_23F740C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F740AF4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F740C48()
{
  sub_23F740D58();
  return sub_23FB2FD10();
}

uint64_t sub_23F740C70()
{
  sub_23F740D58();
  return sub_23FB2FD1C();
}

void ResponseGenerationInferenceResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v2;

  sub_23F6916B8(&qword_256EA7300);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6ADC98(a1, a1[3]);
  sub_23F740D58();
  sub_23F741A90();
  sub_23FB2D004();
  sub_23F6D3458(&qword_256EA7310, (uint64_t (*)(uint64_t))MEMORY[0x24BE530F8], MEMORY[0x24BE53108]);
  sub_23F741A60();
  sub_23F741A7C();
  sub_23F6D3710();
}

unint64_t sub_23F740D58()
{
  unint64_t result;

  result = qword_256EA7308;
  if (!qword_256EA7308)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A6F0, &type metadata for ResponseGenerationInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7308);
  }
  return result;
}

void ResponseGenerationInferenceResponse.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23F6B5220();
  sub_23F741ACC(v3);
  v14 = sub_23FB2D004();
  v12 = *(_QWORD *)(v14 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  v13 = v5;
  v6 = sub_23F6916B8(&qword_256EA7318);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = sub_23F70D7F8();
  type metadata accessor for ResponseGenerationInferenceResponse(v8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B59E0();
  sub_23F6ADC98(v0, v0[3]);
  sub_23F740D58();
  sub_23F741B04();
  sub_23FB2FCB0();
  if (!v1)
  {
    sub_23F6D3458(&qword_256EA7320, (uint64_t (*)(uint64_t))MEMORY[0x24BE530F8], MEMORY[0x24BE53110]);
    sub_23F741AF8();
    sub_23F741AE0(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v2, v13, v14);
    sub_23F741AEC(v10, v11, type metadata accessor for ResponseGenerationInferenceResponse);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  sub_23F6B5100();
}

uint64_t type metadata accessor for ResponseGenerationInferenceResponse(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA7410);
}

void sub_23F740EF0()
{
  ResponseGenerationInferenceResponse.init(from:)();
}

void sub_23F740F04(_QWORD *a1)
{
  ResponseGenerationInferenceResponse.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for PlannerInferenceRequest()
{
  return &type metadata for PlannerInferenceRequest;
}

void _s30IntelligenceFlowPlannerSupport23PlannerInferenceRequestVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23F694CC8();
}

ValueMetadata *type metadata accessor for PlannerInferenceResponse()
{
  return &type metadata for PlannerInferenceResponse;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResponseGenerationInferenceRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for ResponseGenerationInput(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(v4 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23FB2C50C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *((_BYTE *)a1 + v6[6]) = *((_BYTE *)a2 + v6[6]);
    v13 = v6[7];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ResponseGenerationInferenceRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for ResponseGenerationInput(0) + 20);
  v3 = sub_23FB2C50C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ResponseGenerationInferenceRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (int *)type metadata accessor for ResponseGenerationInput(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2C50C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  *((_BYTE *)a1 + v5[6]) = *((_BYTE *)a2 + v5[6]);
  v11 = v5[7];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_QWORD *)((char *)a1 + v5[8]) = *(_QWORD *)((char *)a2 + v5[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ResponseGenerationInferenceRequest(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for ResponseGenerationInput(0);
  v5 = v4[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23FB2C50C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  *((_BYTE *)a1 + v4[6]) = *((_BYTE *)a2 + v4[6]);
  v9 = v4[7];
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v4[8]) = *(_QWORD *)((char *)a2 + v4[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ResponseGenerationInferenceRequest(_OWORD *a1, _OWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for ResponseGenerationInput(0);
  v5 = v4[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23FB2C50C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  *((_BYTE *)a1 + v4[6]) = *((_BYTE *)a2 + v4[6]);
  *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
  *(_QWORD *)((char *)a1 + v4[8]) = *(_QWORD *)((char *)a2 + v4[8]);
  return a1;
}

_QWORD *assignWithTake for ResponseGenerationInferenceRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for ResponseGenerationInput(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2C50C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *((_BYTE *)a1 + v5[6]) = *((_BYTE *)a2 + v5[6]);
  v10 = v5[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v5[8]) = *(_QWORD *)((char *)a2 + v5[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseGenerationInferenceRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7413D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F741ABC();
  return sub_23F70D620(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationInferenceRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F741404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F741ABC();
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F741420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F741620(a1, a2, a3, type metadata accessor for ResponseGenerationInput);
}

uint64_t initializeBufferWithCopyOfBuffer for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2D004();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for ResponseGenerationInferenceResponse(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23FB2D004();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2D004();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2D004();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2D004();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2D004();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseGenerationInferenceResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7415B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F741AB4();
  return sub_23F70D620(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationInferenceResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7415F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F741AB4();
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F741614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F741620(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BE530F8]);
}

uint64_t sub_23F741620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResponseGenerationInferenceResponse.CodingKeys()
{
  return &type metadata for ResponseGenerationInferenceResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for ResponseGenerationInferenceRequest.CodingKeys()
{
  return &type metadata for ResponseGenerationInferenceRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for PlannerInferenceResponse.CodingKeys()
{
  return &type metadata for PlannerInferenceResponse.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport35ResponseGenerationInferenceResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7416FC + 4 * byte_23FB5A210[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F74171C + 4 * byte_23FB5A215[v4]))();
}

_BYTE *sub_23F7416FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F74171C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F741724(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F74172C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F741734(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F74173C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PlannerInferenceRequest.CodingKeys()
{
  return &type metadata for PlannerInferenceRequest.CodingKeys;
}

unint64_t sub_23F74175C()
{
  unint64_t result;

  result = qword_256EA7448;
  if (!qword_256EA7448)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A4A0, &type metadata for PlannerInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7448);
  }
  return result;
}

unint64_t sub_23F74179C()
{
  unint64_t result;

  result = qword_256EA7450;
  if (!qword_256EA7450)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A558, &type metadata for PlannerInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7450);
  }
  return result;
}

unint64_t sub_23F7417DC()
{
  unint64_t result;

  result = qword_256EA7458;
  if (!qword_256EA7458)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A610, &type metadata for ResponseGenerationInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7458);
  }
  return result;
}

unint64_t sub_23F74181C()
{
  unint64_t result;

  result = qword_256EA7460;
  if (!qword_256EA7460)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A6C8, &type metadata for ResponseGenerationInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7460);
  }
  return result;
}

unint64_t sub_23F74185C()
{
  unint64_t result;

  result = qword_256EA7468;
  if (!qword_256EA7468)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A638, &type metadata for ResponseGenerationInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7468);
  }
  return result;
}

unint64_t sub_23F74189C()
{
  unint64_t result;

  result = qword_256EA7470;
  if (!qword_256EA7470)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A660, &type metadata for ResponseGenerationInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7470);
  }
  return result;
}

unint64_t sub_23F7418DC()
{
  unint64_t result;

  result = qword_256EA7478;
  if (!qword_256EA7478)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A580, &type metadata for ResponseGenerationInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7478);
  }
  return result;
}

unint64_t sub_23F74191C()
{
  unint64_t result;

  result = qword_256EA7480;
  if (!qword_256EA7480)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A5A8, &type metadata for ResponseGenerationInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7480);
  }
  return result;
}

unint64_t sub_23F74195C()
{
  unint64_t result;

  result = qword_256EA7488;
  if (!qword_256EA7488)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A4C8, &type metadata for PlannerInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7488);
  }
  return result;
}

unint64_t sub_23F74199C()
{
  unint64_t result;

  result = qword_256EA7490;
  if (!qword_256EA7490)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A4F0, &type metadata for PlannerInferenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7490);
  }
  return result;
}

unint64_t sub_23F7419DC()
{
  unint64_t result;

  result = qword_256EA7498;
  if (!qword_256EA7498)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A410, &type metadata for PlannerInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7498);
  }
  return result;
}

unint64_t sub_23F741A1C()
{
  unint64_t result;

  result = qword_256EA74A0;
  if (!qword_256EA74A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5A438, &type metadata for PlannerInferenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA74A0);
  }
  return result;
}

uint64_t sub_23F741A60()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F741A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23F741A90()
{
  return sub_23FB2FCC8();
}

uint64_t sub_23F741AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_23F741AB4()
{
  return sub_23FB2D004();
}

uint64_t sub_23F741ABC()
{
  return type metadata accessor for ResponseGenerationInput(0);
}

uint64_t sub_23F741ACC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return 0;
}

uint64_t sub_23F741AE0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_23F741AEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_23F740A28(v3, *(_QWORD *)(v4 - 96), a3);
}

uint64_t sub_23F741AF8()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F741B18()
{
  swift_allocObject();
  return sub_23F741B50();
}

uint64_t sub_23F741B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 1;
  sub_23FB2E3F0();
  v1 = sub_23FB2F65C();
  swift_retain();
  *(_QWORD *)(v0 + 16) = sub_23F741BC8((uint64_t)&v3, v1);
  swift_release();
  return v0;
}

uint64_t sub_23F741BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  v7 = sub_23F743094((uint64_t)v6, a2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v7;
}

uint64_t sub_23F741C58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  v1 = *v0;
  v2 = v0[2];
  v6 = *(_OWORD *)(v1 + 88);
  sub_23FB2E3F0();
  v3 = sub_23FB2F65C();
  swift_retain();
  sub_23F743948((void (*)(uint64_t))sub_23F744070, (uint64_t)&v5, v2, v3, v6);
  return swift_release();
}

uint64_t sub_23F741CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void (*v28)(char *, uint64_t);
  NSObject *v29;
  os_signpost_type_t v30;
  uint8_t *v31;
  os_signpost_id_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[16];
  uint64_t v60;

  v55 = a3;
  v50 = a4;
  v49 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v54 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23FB2E774();
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v45 - v10;
  v58 = sub_23FB2E798();
  v12 = *(_QWORD *)(v58 - 8);
  v13 = MEMORY[0x24BDAC7A8](v58);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v45 - v16;
  v57 = sub_23FB2F65C();
  v18 = *(_QWORD *)(v57 - 8);
  v19 = MEMORY[0x24BDAC7A8](v57);
  v47 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v45 - v21;
  v23 = *(unsigned __int8 *)(a1 + 8);
  v48 = a1;
  if (v23 == 1)
  {
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)&v45 - v21, 1, 1, a2);
  }
  else
  {
    v24 = sub_23FB2E3F0();
    v25 = a1;
    v26 = *(_QWORD *)(v24 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16))(v59, v25, v24);
    v60 = MEMORY[0x242674FF4](v59);
    sub_23F6916B8(&qword_256EA7768);
    v27 = swift_dynamicCast();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v22, v27 ^ 1u, 1, a2);
    (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v59, v24);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v22, 1, a2) != 1)return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v22, a2);
  }
  v46 = *(void (**)(char *, uint64_t))(v18 + 8);
  v46(v22, v57);
  sub_23FB2DC10();
  sub_23FB2DC10();
  sub_23FB2E78C();
  sub_23FB2E75C();
  v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28(v15, v58);
  v29 = sub_23FB2E78C();
  v30 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    v32 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v29, v30, v32, "ModelCache.ModelLoad", "", v31, 2u);
    MEMORY[0x242674F4C](v31, -1, -1);
  }

  v33 = v52;
  v34 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v11, v53);
  sub_23FB2E7C8();
  swift_allocObject();
  v35 = sub_23FB2E7BC();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  v28(v17, v58);
  v37 = v54;
  v36 = v55;
  v38 = v56;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(a2, v55);
  if (!v38)
  {
    v39 = v49;
    v40 = (uint64_t)v47;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, v37, a2);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v40, 0, 1, a2);
    swift_unknownObjectWeakInit();
    v41 = v57;
    sub_23FB2F650();
    v46((char *)v40, v41);
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    v42 = sub_23FB2E3F0();
    (*(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v59, &v60, v42);
    v59[8] = 0;
    v43 = sub_23FB2F65C();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v48, v59, v43);
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v50, v37, a2);
  }
  sub_23F742190(v35, a2, v36);
  return swift_release();
}

uint64_t sub_23F742190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  os_signpost_id_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v47[2];
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v55 = a2;
  v56 = a3;
  v3 = sub_23FB2E7F8();
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v57 = v6 - v5;
  v7 = sub_23FB2E7A4();
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6BD134();
  v11 = v10 - v9;
  v54 = sub_23FB2E774();
  v12 = *(_QWORD *)(v54 - 8);
  v13 = MEMORY[0x24BDAC7A8](v54);
  v51 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v47 - v15;
  v17 = sub_23FB2E798();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6BD134();
  v21 = v20 - v19;
  sub_23FB2DC10();
  v22 = sub_23FB2E78C();
  sub_23FB2E7B0();
  v23 = sub_23FB2F614();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v48 = v23;
    v49 = v18;
    v50 = v17;
    swift_retain();
    sub_23FB2E7D4();
    swift_release();
    v25 = v52;
    v24 = v53;
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 88))(v11, v53);
    v27 = *MEMORY[0x24BEE7810];
    v28 = v51;
    v29 = v54;
    v47[1] = v21;
    if (v26 == v27)
    {
      v30 = 0;
      v31 = 0;
      v32 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v11, v24);
      v32 = "ModelName=%{public, signpost.telemetry:string1,public}s enableTelemetry=YES";
      v31 = 2;
      v30 = 1;
    }
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v28, v16, v29);
    v33 = sub_23F693DF4();
    v60 = sub_23F693DF4();
    *(_BYTE *)v33 = v31;
    *(_BYTE *)(v33 + 1) = v30;
    *(_WORD *)(v33 + 2) = 2082;
    sub_23F7440F4();
    v34 = sub_23FB2F7D0();
    v36 = sub_23F744134(v34, v35);
    sub_23F744120(v36);
    sub_23FB2F680();
    sub_23F693DFC();
    v37 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v22, (os_signpost_type_t)v48, v37, "ModelCache.ModelLoad", v32, (uint8_t *)v33, 0xCu);
    sub_23F6B90F0();
    sub_23F693DD0();
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v54);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
  v38 = v57;
  sub_23FB2E3C0();
  v39 = sub_23FB2E7E0();
  v40 = sub_23FB2F5E4();
  if (os_log_type_enabled(v39, v40))
  {
    v42 = (uint8_t *)sub_23F693DF4();
    v60 = sub_23F693DF4();
    *(_DWORD *)v42 = 136315138;
    sub_23F7440F4();
    v43 = sub_23FB2F7D0();
    v45 = sub_23F744134(v43, v44);
    sub_23F744120(v45);
    sub_23FB2F680();
    sub_23F693DFC();
    _os_log_impl(&dword_23F68F000, v39, v40, "Caching - signpost for %s", v42, 0xCu);
    sub_23F6B90F0();
    sub_23F693DD0();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v38, v59);
}

uint64_t sub_23F742568()
{
  return swift_release();
}

uint64_t sub_23F742570()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t sub_23F74258C()
{
  sub_23F742570();
  return swift_deallocClassInstance();
}

uint64_t sub_23F7425A8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_23F7425B8()
{
  uint64_t result;

  type metadata accessor for ModelCache();
  sub_23F6B56B0();
  result = sub_23F74262C();
  qword_256EA74A8 = result;
  return result;
}

uint64_t static ModelCache.shared.getter()
{
  if (qword_256EA0A70 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_23F74262C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModelCache.ModelHolderBase();
  v1 = sub_23FB2F050();
  sub_23F6916B8(&qword_256EA7770);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

void ModelCache.getModel<A>(modelType:prewarm:keepAlive:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[4];
  uint64_t v46;

  v36 = a3;
  v37 = a4;
  v38 = a2;
  v39 = a7;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](a1);
  sub_23F6916B8(&qword_256EA47F0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6BD134();
  v16 = v15 - v14;
  v35 = v7;
  v17 = *(_QWORD *)(v7 + 16);
  v41 = a5;
  v42 = a6;
  v43 = a1;
  v44 = a1;
  v19 = type metadata accessor for ModelCache.ModelHolder(0, a5, a6, v18);
  v20 = v46;
  sub_23F743948((void (*)(uint64_t))sub_23F742B80, (uint64_t)v40, v17, (uint64_t)&type metadata for ModelCache.State, v19);
  if (!v20)
  {
    v34 = a6;
    v46 = a1;
    sub_23F741C58();
    v33[1] = 0;
    v21 = v11;
    v22 = a5;
    if ((v38 & 1) != 0)
    {
      sub_23FB2F4D0();
      v23 = sub_23FB2F4E8();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v16, 0, 1, v23);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v39, a5);
      v24 = (*(unsigned __int8 *)(v21 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = 0;
      v25[3] = 0;
      v26 = v34;
      v25[4] = a5;
      v25[5] = v26;
      v27 = (char *)v25 + v24;
      v22 = a5;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v27, (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a5);
      sub_23F742C18(v16, (uint64_t)&unk_256EA74B8, (uint64_t)v25);
      swift_release();
    }
    v29 = v36;
    v28 = v37;
    if ((sub_23FB2FD04() & 1) != 0)
    {
      v30 = sub_23FB2FD4C();
      v32 = v31;
      v45[3] = v22;
      sub_23F743028(v45);
      (*(void (**)(void))(v21 + 16))();
      sub_23F742D40(v30, v32, v29, v28, (uint64_t)v45);
      swift_release();
      swift_bridgeObjectRelease();
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v45);
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_23F742918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v34 = a3;
  v36 = sub_23FB2E7F8();
  v12 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (sub_23F78C8D8(), (v16 & 1) != 0))
  {
    type metadata accessor for ModelCache.ModelHolder(0, a4, a5, v15);
    *a6 = swift_dynamicCastClassUnconditional();
    return swift_retain();
  }
  else
  {
    v35 = a4;
    sub_23FB2E3C0();
    v18 = sub_23FB2E7E0();
    v19 = sub_23FB2F5E4();
    if (os_log_type_enabled(v18, v19))
    {
      v30 = a5;
      v20 = swift_slowAlloc();
      v33 = a6;
      v21 = (uint8_t *)v20;
      v22 = swift_slowAlloc();
      v31 = a2;
      v23 = v22;
      v38 = v22;
      v32 = a1;
      *(_DWORD *)v21 = 136315138;
      v29[1] = v21 + 4;
      v24 = sub_23FB2FD4C();
      v37 = sub_23F69334C(v24, v25, &v38);
      sub_23FB2F680();
      a5 = v30;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23F68F000, v18, v19, "Model Caching - %s does not exist, creating new model holder", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242674F4C](v23, -1, -1);
      v26 = v21;
      a6 = v33;
      MEMORY[0x242674F4C](v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v36);
    type metadata accessor for ModelCache.ModelHolder(0, v35, a5, v27);
    result = sub_23F741B18();
    if (!v6)
    {
      v28 = result;
      swift_retain();
      result = sub_23F7DB924();
      *a6 = v28;
    }
  }
  return result;
}

uint64_t sub_23F742B80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_23F742918(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t type metadata accessor for ModelCache.ModelHolder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23F744088(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModelCache.ModelHolder);
}

uint64_t sub_23F742BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t sub_23F742BC4()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 32) + 24))(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F742C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_23FB2F4E8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v5) == 1)
  {
    sub_23F743F68(a1, &qword_256EA47F0);
  }
  else
  {
    sub_23FB2F4DC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23FB2F4A0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_23F742D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v18[32];

  sub_23F6916B8(&qword_256EA47F0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6BD134();
  v13 = v12 - v11;
  sub_23F693D50(a5, (uint64_t)v18);
  sub_23F6916B8(&qword_256EA7730);
  v14 = sub_23F6B56B0();
  *(_DWORD *)(v14 + 48) = 0;
  sub_23F743F20((uint64_t)v18, v14 + 16);
  sub_23F743F68((uint64_t)v18, &qword_256EA7738);
  v15 = sub_23FB2F4E8();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v13, 1, 1, v15);
  v16 = (_QWORD *)sub_23F6B56B0();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = v14;
  v16[7] = a3;
  v16[8] = a4;
  swift_bridgeObjectRetain();
  sub_23F742C18(v13, (uint64_t)&unk_256EA7748, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_23F742E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23F742EC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = v1[2];
  v8 = v1[3];
  v9 = (uint64_t)v1 + ((v6 + 48) & ~v6);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23F742F58;
  return sub_23F742BA8(a1, v7, v8, v9, v4, v5);
}

uint64_t sub_23F742F58()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return sub_23F7440D0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t ModelCache.sustainModelLifetime(using:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v11[5];

  v11[4] = a2;
  v11[3] = a1;
  sub_23F743028(v11);
  ModelCache.getModel<A>(modelType:prewarm:keepAlive:)(a1, 0, a3, a4, a1, a2, v9);
  if (v4)
    return sub_23F743060((uint64_t)v11);
  else
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v11);
}

void sub_23F743028(uint64_t *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
    *a1 = swift_allocBox();
  sub_23F694CC8();
}

uint64_t sub_23F743060(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x242674F4CLL);
  return result;
}

uint64_t sub_23F743094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for os_unfair_lock_s();
  sub_23FB2F830();
  v4 = sub_23FB2F824();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t sub_23F743118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = sub_23FB2F8D8();
  v8[7] = v9;
  v8[8] = *(_QWORD *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F743180()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  sub_23FB2E408();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  v0[10] = sub_23FB2E414();
  sub_23FB2F8CC();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_256EA7750 + dword_256EA7750);
  v1 = (_QWORD *)swift_task_alloc();
  v0[11] = v1;
  *v1 = v0;
  v1[1] = sub_23F74325C;
  return v3(v0[5], v0[6], 0, 0, 1);
}

uint64_t sub_23F74325C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_23F7432E0()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7440DC();
  sub_23F743F68(v1, &qword_256EA7738);
  sub_23F744104();
  swift_release();
  swift_task_dealloc();
  return sub_23F7440BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F743334()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7440DC();
  sub_23F743F68(v1, &qword_256EA7738);
  sub_23F744104();
  swift_release();
  swift_task_dealloc();
  return sub_23F7440BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F743388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 16;
  v5 = (os_unfair_lock_s *)(a1 + 48);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  sub_23F743F68(v4, &qword_256EA7738);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  os_unfair_lock_unlock(v5);
  v6 = *MEMORY[0x24BE79838];
  v7 = sub_23FB2E3FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(a2, v6, v7);
}

Swift::Void __swiftcall ModelCache.reset()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23F743458(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_23F743458(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for ModelCache.ModelHolderBase();
  v2 = sub_23FB2F050();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t ModelCache.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SentencePieceCachableModel.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SentencePieceCachableModel.init()();
  return v0;
}

uint64_t SentencePieceCachableModel.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjCClassFromMetadata;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;

  v1 = v0;
  v2 = sub_23FB2E7F8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6BD134();
  v6 = v5 - v4;
  type metadata accessor for ToolEmbeddingsDatabase(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23F743CBC(0x656365697073, 0xE600000000000000, 0x6C65646F6DLL, 0xE500000000000000, v8);
  v10 = v9;

  if (v10 && (sub_23F743DAC(), (v11 = sub_23F743720()) != 0))
  {
    v12 = v11;
    sub_23F6916B8(&qword_256EA74D0);
    v13 = swift_allocObject();
    *(_DWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v1 + 16) = v13;
  }
  else
  {
    sub_23FB2E3C0();
    v14 = sub_23FB2E7E0();
    v15 = sub_23FB2F5F0();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_23F68F000, v14, v15, "Sentence piece model missing. Embedding failed.", v16, 2u);
      MEMORY[0x242674F4C](v16, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    sub_23F743D70();
    swift_allocError();
    *v17 = 2;
    swift_willThrow();
    swift_deallocPartialClassInstance();
  }
  return v1;
}

id sub_23F743720()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = (void *)sub_23FB2F134();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithModelPath_, v1);

  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SentencePieceCachableModel.prewarm()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void **v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)(v0 + 16);
  v3 = (void **)&v2[4];
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_23F7437F8(v3);
  os_unfair_lock_unlock(v4);
  if (v1)
    __break(1u);
}

void sub_23F7437F8(void **a1)
{
  void *v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)sub_23FB2F134();

}

void static SentencePieceCachableModel.privacyApprovedLoggableName()()
{
  sub_23F744114();
}

uint64_t _s30IntelligenceFlowPlannerSupport10ModelCacheCfD_0()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23F7438A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = SentencePieceCachableModel.__allocating_init()();
  if (!v1)
    *a1 = result;
  return result;
}

void sub_23F7438C8()
{
  sub_23F744114();
}

void sub_23F7438D4()
{
  SentencePieceCachableModel.prewarm()();
}

uint64_t sub_23F7438F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + *MEMORY[0x24BEE27A8]) - 8) + 16))(a2);
}

void sub_23F743948(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_23F7439B0(a3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a3 + 16), (os_unfair_lock_t)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL)), a1, a2, a4, a5, &v5);
}

void sub_23F7439B0(uint64_t a1, os_unfair_lock_t lock, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;

  os_unfair_lock_lock(lock);
  a3(a1);
  os_unfair_lock_unlock(lock);
  if (v7)
    *a7 = v7;
}

uint64_t sub_23F743A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_23FB2F8C0();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_23F743AD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_23FB2F8D8();
  sub_23F6D3458(&qword_256EA7758, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_23FB2FBE4();
  sub_23F6D3458(&qword_256EA7760, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_23FB2F8E4();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_23F743BEC;
  return sub_23FB2FBF0();
}

uint64_t sub_23F743BEC()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return sub_23F7440BC(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_23F743C88()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F743CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v6 = (void *)sub_23FB2F134();
  swift_bridgeObjectRelease();
  v7 = (void *)sub_23FB2F134();
  sub_23F693DFC();
  v8 = objc_msgSend(a5, sel_pathForResource_ofType_, v6, v7);

  if (!v8)
    return 0;
  v9 = sub_23FB2F140();

  return v9;
}

unint64_t sub_23F743D70()
{
  unint64_t result;

  result = qword_256EA74C0;
  if (!qword_256EA74C0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for EmbeddingError, &type metadata for EmbeddingError);
    atomic_store(result, (unint64_t *)&qword_256EA74C0);
  }
  return result;
}

unint64_t sub_23F743DAC()
{
  unint64_t result;

  result = qword_256EA74C8;
  if (!qword_256EA74C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256EA74C8);
  }
  return result;
}

uint64_t type metadata accessor for ModelCache()
{
  return objc_opt_self();
}

uint64_t method lookup function for ModelCache()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23F743E18()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ModelCache.ModelHolderBase()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of ModelCache.CachableModel.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static ModelCache.CachableModel.privacyApprovedLoggableName()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ModelCache.CachableModel.prewarm()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for SentencePieceCachableModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for SentencePieceCachableModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SentencePieceCachableModel.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

ValueMetadata *type metadata accessor for ModelCache.State()
{
  return &type metadata for ModelCache.State;
}

uint64_t sub_23F743F08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7438F4(a1, a2);
}

uint64_t sub_23F743F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA7738);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23F743F68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23F6916B8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_23F694CC8();
}

uint64_t sub_23F743FA0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23F743FD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_23F7440B8;
  return sub_23F743118(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_23F744068@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23F743388(v1, a1);
}

uint64_t sub_23F744070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23F741CF4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23F744088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242674DCC](a1, v6, a5);
}

uint64_t sub_23F7440BC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7440D0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_23F7440DC()
{
  uint64_t v0;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v0 + 32) + 48));
}

uint64_t sub_23F7440F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 128) + 16))();
}

void sub_23F744104()
{
  os_unfair_lock_s *v0;
  uint64_t v1;

  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  os_unfair_lock_unlock(v0);
}

uint64_t sub_23F744120(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_23F744134(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_23F69334C(a1, a2, (uint64_t *)(v2 - 88));
}

void ODPEventPayload.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  type metadata accessor for ODPEventPayload(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6BD134();
  sub_23F74451C(v0, v3 - v2);
  v4 = (char *)sub_23F7441CC + 4 * byte_23FB5A930[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23F7441CC(uint64_t a1)
{
  uint64_t v1;

  sub_23F714040(a1, type metadata accessor for ODPEventPayload);
  return v1 + 4;
}

uint64_t type metadata accessor for ODPEventPayload(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA77F8);
}

uint64_t sub_23F74451C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ODPEventPayload(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void ODPEventPayload.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  type metadata accessor for Session.Event(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6BD134();
  type metadata accessor for ODPEventPayload(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6BD134();
  sub_23F74451C(v0, v4 - v3);
  v5 = (char *)sub_23F74460C + 4 * word_23FB5A94C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23F74460C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0x3D726F727245;
  *(_QWORD *)(v0 - 88) = 0xE600000000000000;
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  return sub_23F6B5994();
}

_OWORD *sub_23F744B8C(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t ODPEvent.payload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23F74451C(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload, a1);
}

uint64_t ODPEvent.timestamp.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  sub_23F7502DC();
  v0 = sub_23F6B5994();
  return v1(v0);
}

uint64_t ODPEvent.machAbsoluteTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_machAbsoluteTime);
}

unint64_t ODPEvent.description.getter()
{
  return sub_23F744C94(30, 0x20726F6620, 0xE500000000000000, (void (*)(uint64_t))ODPEventPayload.description.getter);
}

unint64_t sub_23F744C2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA7780;
  if (!qword_256EA7780)
  {
    v1 = sub_23FB2C470();
    result = MEMORY[0x242674E5C](MEMORY[0x24BDCE988], v1);
    atomic_store(result, (unint64_t *)&qword_256EA7780);
  }
  return result;
}

unint64_t ODPEvent.debugDescription.getter()
{
  return sub_23F744C94(41, 0xD000000000000010, 0x800000023FB32B00, (void (*)(uint64_t))ODPEventPayload.debugDescription.getter);
}

unint64_t sub_23F744C94(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  sub_23FB2F7AC();
  swift_bridgeObjectRelease();
  sub_23F7502DC();
  sub_23F744C2C();
  sub_23FB2FB48();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  v5 = sub_23F750320();
  a4(v5);
  sub_23FB2F254();
  sub_23F693E04();
  return 0xD000000000000015;
}

void ODPEvent.__allocating_init(_:)(uint64_t a1)
{
  swift_allocObject();
  ODPEvent.init(_:)(a1);
  sub_23F694CC8();
}

uint64_t ODPEvent.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = sub_23F7502DC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6BD134();
  v7 = v6 - v5;
  sub_23F74451C(a1, v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload);
  sub_23FB2C44C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_timestamp, v7, v3);
  v8 = mach_absolute_time();
  sub_23F714040(v8, type metadata accessor for ODPEventPayload);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_machAbsoluteTime) = v8;
  return v1;
}

void ODPEvent.deinit()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6D3508(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload, type metadata accessor for ODPEventPayload);
  v1 = sub_23F7502DC();
  sub_23F6B6454(v1);
  sub_23F694CC8();
}

uint64_t ODPEvent.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6D3508(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload, type metadata accessor for ODPEventPayload);
  v1 = sub_23F7502DC();
  sub_23F6B6454(v1);
  return swift_deallocClassInstance();
}

unint64_t sub_23F744EF8()
{
  return ODPEvent.description.getter();
}

unint64_t sub_23F744F18()
{
  return ODPEvent.debugDescription.getter();
}

void ODPEventOverrides.orchestrationID.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void ODPEventOverrides.resultCandidateID.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void ODPEventOverrides.taskID.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void ODPEventOverrides.interactionID.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

char *initializeBufferWithCopyOfBuffer for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void *, void *, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int EnumCaseMultiPayload;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t Step;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t StepResults;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(void *, void *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(void *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(void *, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, void *, uint64_t);
  uint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(void *, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t DecorationResult;
  uint64_t v168;
  const void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t DecorationPrePlannerResult;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void (*v214)(uint64_t, char *, uint64_t);
  uint64_t v215;
  void *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t, char *, uint64_t);
  uint64_t v229;
  void *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  const void *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  int *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(uint64_t, uint64_t, uint64_t);
  int *v256;
  uint64_t v257;
  void *v258;
  const void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(uint64_t, uint64_t);
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  const void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  int *v297;
  uint64_t v298;
  void *v299;
  const void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void (*v307)(uint64_t, uint64_t);
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  int *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  const void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void *v329;
  const void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  int *v351;
  char *v352;
  uint64_t v353;
  int *v354;
  uint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  char *v361;
  char *result;
  char *v363;
  char *v364;
  uint64_t v365;
  void (*v366)(uint64_t, uint64_t, uint64_t);
  void *v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  char *v373;
  char *v374;
  void (*v375)(uint64_t, uint64_t, uint64_t);
  int *v376;
  void *v377;
  void *__dstg;
  void *__dsth;
  void *__dst;
  void *__dsti;
  int *__dsta;
  void *__dstj;
  void *__dstk;
  int *__dstb;
  void *__dstc;
  int *__dstd;
  int *__dste;
  void *__dstf;
  void *__dstl;
  void (*v391)(char *, char *, uint64_t);
  void (*v392)(void *, const void *, uint64_t);
  uint64_t v393;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
    return a1;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 6u:
    case 7u:
    case 8u:
    case 0xEu:
    case 0xFu:
    case 0x11u:
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v7;
      swift_bridgeObjectRetain();
      goto LABEL_152;
    case 2u:
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_152;
    case 5u:
      v9 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v9;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_152;
    case 9u:
      v10 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v10;
      v11 = a2 + 16;
      v12 = *((_QWORD *)a2 + 7);
      v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v13;
      *((_QWORD *)a1 + 7) = v12;
      v14 = v13;
      v15 = **(void (***)(char *, char *, uint64_t))(v13 - 8);
      swift_bridgeObjectRetain();
      v15(a1 + 16, v11, v14);
      goto LABEL_152;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x12u:
      v16 = *((_QWORD *)a2 + 5);
      v17 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v17;
      *((_QWORD *)a1 + 5) = v16;
      (**(void (***)(void *, const void *))(v17 - 8))(a1, a2);
      goto LABEL_152;
    case 0x10u:
      v18 = sub_23FB2C4B8();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(a1, a2, v18);
      v20 = (int *)type metadata accessor for Session.Event(0);
      v19(&a1[v20[5]], &a2[v20[5]], v18);
      v21 = v20[6];
      v22 = &a1[v21];
      v23 = &a2[v21];
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&a2[v21], 1, v18))
      {
        v24 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v19(v22, v23, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v22, 0, 1, v18);
      }
      break;
    case 0x13u:
      v25 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 3) = v25;
      (**(void (***)(void *, const void *))(v25 - 8))(a1, a2);
      goto LABEL_152;
    default:
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
      return a1;
  }
  v26 = v20[7];
  v27 = (uint64_t)&a1[v26];
  v28 = (uint64_t)&a2[v26];
  v29 = type metadata accessor for Session.Event.Payload(0);
  v392 = (void (*)(void *, const void *, uint64_t))v19;
  v393 = v18;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v30 = sub_23FB2C998();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = type metadata accessor for SessionStart(0);
      v32 = *(int *)(v31 + 20);
      v33 = v27 + v32;
      v34 = v28 + v32;
      v35 = sub_23FB2C908();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
      *(_BYTE *)(v27 + *(int *)(v31 + 24)) = *(_BYTE *)(v28 + *(int *)(v31 + 24));
      goto LABEL_150;
    case 1u:
      v36 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v36;
      *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
      v37 = type metadata accessor for TextQuery(0);
      v38 = *(int *)(v37 + 24);
      v367 = (void *)(v28 + v38);
      __dstg = (void *)(v27 + v38);
      v39 = sub_23FB2C764();
      v40 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
      swift_bridgeObjectRetain();
      v40(__dstg, v367, v39);
      v41 = *(int *)(v37 + 28);
      v42 = (_QWORD *)(v27 + v41);
      v43 = (_QWORD *)(v28 + v41);
      v44 = v43[1];
      *v42 = *v43;
      v42[1] = v44;
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 2u:
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
      v45 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v27 + 24) = v45;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 3u:
      v46 = type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(_QWORD *)v27 = *(_QWORD *)v28;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
            goto LABEL_132;
          }
          v48 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)v27 = *(_QWORD *)v28;
          *(_QWORD *)(v27 + 8) = v48;
          v49 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v368 = (void *)(v27 + v49);
          v50 = v28 + v49;
          v51 = sub_23FB2C764();
          v52 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
          swift_bridgeObjectRetain();
          v52(v368, v50, v51);
        }
LABEL_131:
        swift_storeEnumTagMultiPayload();
LABEL_132:
        v316 = (int *)type metadata accessor for Request(0);
        *(_BYTE *)(v27 + v316[5]) = *(_BYTE *)(v28 + v316[5]);
        v317 = v316[6];
        v318 = v27 + v317;
        v319 = v28 + v317;
        v320 = *(unsigned __int8 *)(v319 + 16);
        if (v320 <= 0xFD)
        {
          v321 = *(_QWORD *)v319;
          __dstl = *(void **)(v319 + 8);
          sub_23F73515C(*(_QWORD *)v319, (uint64_t)__dstl, v320);
          *(_QWORD *)v318 = v321;
          *(_QWORD *)(v318 + 8) = __dstl;
          *(_BYTE *)(v318 + 16) = v320;
        }
        else
        {
          *(_OWORD *)v318 = *(_OWORD *)v319;
          *(_BYTE *)(v318 + 16) = *(_BYTE *)(v319 + 16);
        }
        v322 = v316[7];
        v323 = (void *)(v27 + v322);
        v324 = (const void *)(v28 + v322);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28 + v322, 1, v393))
        {
          v325 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v323, v324, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
        }
        else
        {
          v392(v323, v324, v393);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v323, 0, 1, v393);
        }
        v326 = v316[8];
        v235 = v27 + v326;
        v236 = v28 + v326;
        v237 = *(_QWORD *)(v236 + 8);
        if (!v237)
        {
          *(_OWORD *)v235 = *(_OWORD *)v236;
          *(_QWORD *)(v235 + 16) = *(_QWORD *)(v236 + 16);
          goto LABEL_150;
        }
        goto LABEL_139;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28, 1, v18))
      {
        v277 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, 0, 1, v18);
      }
      v279 = type metadata accessor for RequestContent.SystemPromptResolution(0);
      v19((char *)(v27 + *(int *)(v279 + 20)), (char *)(v28 + *(int *)(v279 + 20)), v18);
      v376 = (int *)v279;
      v280 = *(int *)(v279 + 24);
      v281 = (void *)(v27 + v280);
      v282 = (const void *)(v28 + v280);
      v283 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v284 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v284 - 8) + 16))(v281, v282, v284);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
      }
      v285 = v376[7];
      v286 = v27 + v285;
      v287 = v28 + v285;
      v288 = sub_23FB2C764();
      v366 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v288 - 8) + 16);
      v366(v286, v287, v288);
      v289 = v376[8];
      v290 = (_QWORD *)(v27 + v289);
      v291 = (_QWORD *)(v28 + v289);
      v292 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v293 = swift_getEnumCaseMultiPayload();
      if (v293 == 1)
      {
        *v290 = *v291;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v293)
        {
          memcpy(v290, v291, *(_QWORD *)(*(_QWORD *)(v292 - 8) + 64));
          goto LABEL_131;
        }
        v294 = v291[1];
        *v290 = *v291;
        v290[1] = v294;
        v295 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v363 = (char *)v290 + v295;
        v296 = (char *)v291 + v295;
        swift_bridgeObjectRetain();
        v366((uint64_t)v363, (uint64_t)v296, v288);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_131;
    case 4u:
      v53 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v53;
      v54 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v27 + 24) = v54;
      v55 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
      *(_QWORD *)(v27 + 40) = v55;
      *(_QWORD *)(v27 + 48) = *(_QWORD *)(v28 + 48);
      *(_BYTE *)(v27 + 56) = *(_BYTE *)(v28 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 5u:
      v56 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v27, v28, v56);
      v57 = (int *)type metadata accessor for Action(0);
      v58 = v57[5];
      v59 = (_QWORD *)(v27 + v58);
      v60 = (uint64_t *)(v28 + v58);
      v62 = *v60;
      v61 = v60[1];
      *v59 = v62;
      v59[1] = v61;
      v63 = v57[6];
      v64 = (_QWORD *)(v27 + v63);
      v65 = (_QWORD *)(v28 + v63);
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      v67 = v57[7];
      v68 = (_QWORD *)(v27 + v67);
      v69 = (_QWORD *)(v28 + v67);
      v70 = v69[1];
      *v68 = *v69;
      v68[1] = v70;
      *(_BYTE *)(v27 + v57[8]) = *(_BYTE *)(v28 + v57[8]);
      *(_QWORD *)(v27 + v57[9]) = *(_QWORD *)(v28 + v57[9]);
      v71 = v57[10];
      v72 = (_QWORD *)(v27 + v71);
      v73 = (_QWORD *)(v28 + v71);
      v74 = v73[1];
      *v72 = *v73;
      v72[1] = v74;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 6u:
      v75 = sub_23FB2C764();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28, 1, v75))
      {
        v76 = sub_23F6916B8(&qword_256EA49D8);
        memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v27, v28, v75);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, 0, 1, v75);
      }
      v205 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v27 + *(int *)(v205 + 20), v28 + *(int *)(v205 + 20), v75);
      goto LABEL_150;
    case 7u:
      v77 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v27, v28, v77);
      v78 = (int *)type metadata accessor for ClientAction(0);
      v79 = v78[5];
      v80 = (_QWORD *)(v27 + v79);
      v81 = (uint64_t *)(v28 + v79);
      v83 = *v81;
      v82 = v81[1];
      *v80 = v83;
      v80[1] = v82;
      *(_QWORD *)(v27 + v78[6]) = *(_QWORD *)(v28 + v78[6]);
      v84 = v78[7];
      v85 = (_QWORD *)(v27 + v84);
      v86 = (_QWORD *)(v28 + v84);
      v87 = v86[1];
      *v85 = *v86;
      v85[1] = v87;
      v88 = v78[8];
      v89 = (_QWORD *)(v27 + v88);
      v90 = (_QWORD *)(v28 + v88);
      v91 = v90[1];
      *v89 = *v90;
      v89[1] = v91;
      *(_QWORD *)(v27 + v78[9]) = *(_QWORD *)(v28 + v78[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 8u:
      v92 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v27, v28, v92);
      Step = type metadata accessor for QueryStep(0);
      *(_QWORD *)(v27 + *(int *)(Step + 20)) = *(_QWORD *)(v28 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 9u:
      v94 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v27, v28, v94);
      v95 = type metadata accessor for VariableStep(0);
      *(_QWORD *)(v27 + *(int *)(v95 + 20)) = *(_QWORD *)(v28 + *(int *)(v95 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(_QWORD *)v27 = *(_QWORD *)v28;
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      v115 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v115;
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0xCu:
      v96 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v96;
      v97 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v27 + 24) = v97;
      v98 = *(_QWORD *)(v28 + 32);
      v99 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v27 + 32) = v98;
      *(_QWORD *)(v27 + 40) = v99;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0xDu:
      type metadata accessor for SessionError();
      v100 = (char *)&loc_23F74596C + 4 * word_23FB5A9F0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0xEu:
      v101 = *(_QWORD *)v28;
      v102 = *(_QWORD *)(v28 + 8);
      sub_23F6D1E20(*(_QWORD *)v28, v102);
      *(_QWORD *)v27 = v101;
      *(_QWORD *)(v27 + 8) = v102;
      v103 = *(_QWORD *)(v28 + 16);
      v104 = *(_QWORD *)(v28 + 24);
      sub_23F6D1E20(v103, v104);
      *(_QWORD *)(v27 + 16) = v103;
      *(_QWORD *)(v27 + 24) = v104;
      v105 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
      *(_QWORD *)(v27 + 40) = v105;
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0xFu:
      v106 = sub_23FB2C77C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v27, v28, v106);
      goto LABEL_150;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28, 1, v18))
      {
        v171 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, 0, 1, v18);
      }
      v256 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v392((void *)(v27 + v256[5]), (const void *)(v28 + v256[5]), v18);
      v257 = v256[6];
      v258 = (void *)(v27 + v257);
      v259 = (const void *)(v28 + v257);
      v260 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v261 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v261 - 8) + 16))(v258, v259, v261);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v258, v259, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
      }
      v262 = v256[7];
      v263 = v27 + v262;
      v264 = v28 + v262;
      v265 = sub_23FB2C764();
      v266 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v265 - 8) + 16);
      __dstf = (void *)v265;
      v266(v263, v264);
      v267 = v256[8];
      v268 = (_QWORD *)(v27 + v267);
      v269 = (_QWORD *)(v28 + v267);
      v270 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v271 = swift_getEnumCaseMultiPayload();
      if (v271 == 1)
      {
        *v268 = *v269;
        swift_bridgeObjectRetain();
        goto LABEL_103;
      }
      if (!v271)
      {
        v272 = v269[1];
        *v268 = *v269;
        v268[1] = v272;
        v273 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v274 = (char *)v268 + v273;
        v275 = (char *)v269 + v273;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v266)(v274, v275, __dstf);
LABEL_103:
        swift_storeEnumTagMultiPayload();
        goto LABEL_150;
      }
      memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
LABEL_150:
      swift_storeEnumTagMultiPayload();
LABEL_151:
      v333 = v20[8];
      v334 = &a1[v333];
      v335 = &a2[v333];
      v336 = *((_QWORD *)v335 + 1);
      *(_QWORD *)v334 = *(_QWORD *)v335;
      *((_QWORD *)v334 + 1) = v336;
      v337 = v20[9];
      v338 = &a1[v337];
      v339 = &a2[v337];
      v340 = *((_QWORD *)v339 + 1);
      *(_QWORD *)v338 = *(_QWORD *)v339;
      *((_QWORD *)v338 + 1) = v340;
      v341 = v20[10];
      v342 = &a1[v341];
      v343 = &a2[v341];
      v344 = *((_QWORD *)v343 + 1);
      *(_QWORD *)v342 = *(_QWORD *)v343;
      *((_QWORD *)v342 + 1) = v344;
      v345 = v20[11];
      v346 = &a1[v345];
      v347 = &a2[v345];
      v348 = *((_QWORD *)v347 + 1);
      *(_QWORD *)v346 = *(_QWORD *)v347;
      *((_QWORD *)v346 + 1) = v348;
      v349 = v20[12];
      v350 = &a1[v349];
      v351 = v20;
      v352 = &a2[v349];
      v353 = sub_23FB2C470();
      v391 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v353 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v391(v350, v352, v353);
      v354 = (int *)type metadata accessor for Timepoint();
      *(_QWORD *)&v350[v354[5]] = *(_QWORD *)&v352[v354[5]];
      *(_QWORD *)&v350[v354[6]] = *(_QWORD *)&v352[v354[6]];
      v392(&v350[v354[7]], &v352[v354[7]], v393);
      v355 = v351[13];
      v356 = &a1[v355];
      v357 = &a2[v355];
      v358 = *((_QWORD *)v357 + 1);
      *(_QWORD *)v356 = *(_QWORD *)v357;
      *((_QWORD *)v356 + 1) = v358;
      v359 = v351[14];
      v360 = &a1[v359];
      v361 = &a2[v359];
      *(_QWORD *)v360 = *(_QWORD *)v361;
      v360[8] = v361[8];
      *(_QWORD *)&a1[v351[15]] = *(_QWORD *)&a2[v351[15]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_152:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28, 1, v18))
      {
        v107 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, 0, 1, v18);
      }
      v206 = type metadata accessor for ActionStepResult(0);
      v207 = *(int *)(v206 + 20);
      v208 = (_QWORD *)(v27 + v207);
      v209 = (_QWORD *)(v28 + v207);
      v210 = v209[1];
      *v208 = *v209;
      v208[1] = v210;
      v211 = *(int *)(v206 + 24);
      v212 = v27 + v211;
      v373 = (char *)(v28 + v211);
      __dstd = (int *)v206;
      v213 = sub_23FB2C80C();
      v214 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v213 - 8) + 16);
      swift_bridgeObjectRetain();
      v214(v212, v373, v213);
      v215 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      v216 = (void *)(v212 + v215);
      v217 = &v373[v215];
      v218 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v217, 1, v218))
      {
        v219 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v216, v217, v218);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v216, 0, 1, v218);
      }
      v246 = __dstd[7];
      v247 = (_QWORD *)(v27 + v246);
      v248 = (_QWORD *)(v28 + v246);
      v249 = v248[1];
      *v247 = *v248;
      v247[1] = v249;
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0x12u:
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v108 = (void (*)(uint64_t, uint64_t, uint64_t))v19;
      StepResults = type metadata accessor for QueryStepResults(0);
      v110 = *(int *)(StepResults + 20);
      v369 = (void *)(v28 + v110);
      __dsth = (void *)(v27 + v110);
      v111 = sub_23FB2C764();
      v112 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v111 - 8) + 16);
      swift_bridgeObjectRetain();
      v112(__dsth, v369, v111);
      v108(v27 + *(int *)(StepResults + 24), v28 + *(int *)(StepResults + 24), v393);
      goto LABEL_150;
    case 0x13u:
      v113 = sub_23FB2C938();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v27, v28, v113);
      goto LABEL_150;
    case 0x14u:
      v172 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v172 - 8) + 16))(v27, v28, v172);
      v173 = (int *)type metadata accessor for ActionResolverRequest(0);
      v174 = v173[5];
      v175 = (_QWORD *)(v27 + v174);
      v176 = (uint64_t *)(v28 + v174);
      v178 = *v176;
      v177 = v176[1];
      *v175 = v178;
      v175[1] = v177;
      *(_QWORD *)(v27 + v173[6]) = *(_QWORD *)(v28 + v173[6]);
      *(_QWORD *)(v27 + v173[7]) = *(_QWORD *)(v28 + v173[7]);
      *(_QWORD *)(v27 + v173[8]) = *(_QWORD *)(v28 + v173[8]);
      *(_BYTE *)(v27 + v173[9]) = *(_BYTE *)(v28 + v173[9]);
      *(_BYTE *)(v27 + v173[10]) = *(_BYTE *)(v28 + v173[10]);
      *(_BYTE *)(v27 + v173[11]) = *(_BYTE *)(v28 + v173[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0x16u:
    case 0x24u:
      v114 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v114;
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0x1Bu:
      v179 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v179;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0x1Cu:
      v180 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v180;
      v181 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v27 + 24) = v181;
      *(_DWORD *)(v27 + 32) = *(_DWORD *)(v28 + 32);
      v183 = *(_QWORD *)(v28 + 40);
      v182 = *(_QWORD *)(v28 + 48);
      *(_QWORD *)(v27 + 40) = v183;
      *(_QWORD *)(v27 + 48) = v182;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0x1Eu:
      v116 = sub_23FB2D004();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v27, v28, v116);
      goto LABEL_150;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28, 1, v18))
      {
        v117 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, 0, 1, v18);
      }
      v220 = type metadata accessor for StatementResult(0);
      v221 = *(int *)(v220 + 20);
      v222 = (_QWORD *)(v27 + v221);
      v223 = (_QWORD *)(v28 + v221);
      v224 = v223[1];
      *v222 = *v223;
      v222[1] = v224;
      v225 = *(int *)(v220 + 24);
      v226 = v27 + v225;
      v374 = (char *)(v28 + v225);
      __dste = (int *)v220;
      v227 = sub_23FB2D0DC();
      v228 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v227 - 8) + 16);
      swift_bridgeObjectRetain();
      v228(v226, v374, v227);
      v229 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v230 = (void *)(v226 + v229);
      v231 = &v374[v229];
      v232 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v231, 1, v232))
      {
        v233 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(v230, v231, v232);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v230, 0, 1, v232);
      }
      v250 = __dste;
      v251 = __dste[7];
      v252 = v27 + v251;
      v253 = v28 + v251;
      v254 = sub_23FB2C764();
      v255 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v254 - 8) + 16);
      v255(v252, v253, v254);
      v255(v27 + v250[8], v28 + v250[8], v254);
      v255(v27 + v250[9], v28 + v250[9], v254);
      goto LABEL_150;
    case 0x20u:
      v118 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v118;
      v119 = type metadata accessor for ExternalAgentTextQuery(0);
      v120 = *(int *)(v119 + 20);
      __dst = (void *)(v27 + v120);
      v121 = (const void *)(v28 + v120);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v121, 1, v18))
      {
        v122 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dst, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      else
      {
        v392(__dst, v121, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dst, 0, 1, v18);
      }
      v234 = *(int *)(v119 + 24);
      v235 = v27 + v234;
      v236 = v28 + v234;
      v237 = *(_QWORD *)(v236 + 8);
      if (v237)
        goto LABEL_139;
      *(_OWORD *)v235 = *(_OWORD *)v236;
      *(_QWORD *)(v235 + 16) = *(_QWORD *)(v236 + 16);
      goto LABEL_150;
    case 0x21u:
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v184 = type metadata accessor for ExternalAgentSpeechQuery(0);
      v185 = *(int *)(v184 + 20);
      __dstc = (void *)(v27 + v185);
      v186 = (const void *)(v28 + v185);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v186, 1, v18))
      {
        v187 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dstc, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
      }
      else
      {
        v392(__dstc, v186, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstc, 0, 1, v18);
      }
      v276 = *(int *)(v184 + 24);
      v235 = v27 + v276;
      v236 = v28 + v276;
      v237 = *(_QWORD *)(v236 + 8);
      if (v237)
        goto LABEL_139;
      *(_OWORD *)v235 = *(_OWORD *)v236;
      *(_QWORD *)(v235 + 16) = *(_QWORD *)(v236 + 16);
      goto LABEL_150;
    case 0x22u:
      v123 = type metadata accessor for RequestContent(0);
      v124 = swift_getEnumCaseMultiPayload();
      if (v124 != 3)
      {
        if (v124 == 2)
        {
          *(_QWORD *)v27 = *(_QWORD *)v28;
          swift_bridgeObjectRetain();
          goto LABEL_112;
        }
        if (v124 == 1)
        {
          v125 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)v27 = *(_QWORD *)v28;
          *(_QWORD *)(v27 + 8) = v125;
          v126 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v370 = (void *)(v27 + v126);
          v127 = v28 + v126;
          v128 = sub_23FB2C764();
          v129 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 16);
          swift_bridgeObjectRetain();
          v129(v370, v127, v128);
          v18 = v393;
LABEL_112:
          swift_storeEnumTagMultiPayload();
          goto LABEL_145;
        }
        memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
LABEL_145:
        v327 = type metadata accessor for ExternalAgentRequest(0);
        v328 = *(int *)(v327 + 20);
        v329 = (void *)(v27 + v328);
        v330 = (const void *)(v28 + v328);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28 + v328, 1, v18))
        {
          v331 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v329, v330, *(_QWORD *)(*(_QWORD *)(v331 - 8) + 64));
        }
        else
        {
          v392(v329, v330, v18);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v329, 0, 1, v18);
        }
        v332 = *(int *)(v327 + 24);
        v235 = v27 + v332;
        v236 = v28 + v332;
        v237 = *(_QWORD *)(v236 + 8);
        if (!v237)
        {
          *(_OWORD *)v235 = *(_OWORD *)v236;
          *(_QWORD *)(v235 + 16) = *(_QWORD *)(v236 + 16);
          goto LABEL_150;
        }
LABEL_139:
        *(_QWORD *)v235 = *(_QWORD *)v236;
        *(_QWORD *)(v235 + 8) = v237;
        *(_QWORD *)(v235 + 16) = *(_QWORD *)(v236 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_150;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28, 1, v18))
      {
        v278 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, 0, 1, v18);
      }
      v297 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v19((char *)(v27 + v297[5]), (char *)(v28 + v297[5]), v18);
      v298 = v297[6];
      v299 = (void *)(v27 + v298);
      v300 = (const void *)(v28 + v298);
      v301 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v302 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v302 - 8) + 16))(v299, v300, v302);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v299, v300, *(_QWORD *)(*(_QWORD *)(v301 - 8) + 64));
      }
      v303 = v297[7];
      v304 = v27 + v303;
      v305 = v28 + v303;
      v306 = sub_23FB2C764();
      v307 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v306 - 8) + 16);
      v377 = (void *)v306;
      v307(v304, v305);
      v308 = v297[8];
      v309 = (_QWORD *)(v27 + v308);
      v310 = (_QWORD *)(v28 + v308);
      v311 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v312 = swift_getEnumCaseMultiPayload();
      if (v312 == 1)
      {
        *v309 = *v310;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v312)
        {
          memcpy(v309, v310, *(_QWORD *)(*(_QWORD *)(v311 - 8) + 64));
          goto LABEL_144;
        }
        v313 = v310[1];
        *v309 = *v310;
        v309[1] = v313;
        v314 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v364 = (char *)v309 + v314;
        v315 = (char *)v310 + v314;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v307)(v364, v315, v377);
      }
      swift_storeEnumTagMultiPayload();
LABEL_144:
      swift_storeEnumTagMultiPayload();
      v18 = v393;
      goto LABEL_145;
    case 0x23u:
      v188 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v188 - 8) + 16))(v27, v28, v188);
      v189 = type metadata accessor for ExternalAgentOutcome(0);
      v190 = *(int *)(v189 + 20);
      v191 = v27 + v190;
      v192 = v28 + v190;
      v193 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 16))(v191, v192, v193);
      *(_QWORD *)(v27 + *(int *)(v189 + 24)) = *(_QWORD *)(v28 + *(int *)(v189 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0x25u:
      v130 = sub_23FB2E8D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v27, v28, v130);
      v131 = type metadata accessor for ToolResolution(0);
      v132 = *(int *)(v131 + 20);
      __dsti = (void *)(v27 + v132);
      v133 = v28 + v132;
      v134 = sub_23FB2C764();
      v135 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
      v135(__dsti, v133, v134);
      v135((void *)(v27 + *(int *)(v131 + 24)), v28 + *(int *)(v131 + 24), v134);
      goto LABEL_150;
    case 0x26u:
      v136 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v136;
      v137 = type metadata accessor for UndoRedoRequest(0);
      v138 = *(int *)(v137 + 20);
      v371 = (void *)(v27 + v138);
      __dsta = (int *)v137;
      v139 = (void *)(v28 + v138);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v139, 1, v18))
      {
        v140 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v371, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
      }
      else
      {
        v19((char *)v371, (char *)v139, v18);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v371, 0, 1, v18);
      }
      *(_BYTE *)(v27 + __dsta[6]) = *(_BYTE *)(v28 + __dsta[6]);
      v238 = __dsta[7];
      v239 = v27 + v238;
      v240 = v28 + v238;
      v241 = sub_23FB2C764();
      v375 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v241 - 8) + 16);
      v375(v239, v240, v241);
      v242 = __dsta[8];
      v243 = (void *)(v27 + v242);
      v244 = (const void *)(v28 + v242);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28 + v242, 1, v241))
      {
        v245 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
      }
      else
      {
        v375((uint64_t)v243, (uint64_t)v244, v241);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v243, 0, 1, v241);
      }
      goto LABEL_150;
    case 0x27u:
      v19((char *)v27, (char *)v28, v18);
      v141 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(_BYTE *)(v27 + v141[5]) = *(_BYTE *)(v28 + v141[5]);
      v142 = v141[6];
      v143 = v27 + v142;
      __dstj = (void *)(v28 + v142);
      v144 = sub_23FB2C764();
      v145 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v144 - 8) + 16);
      v145(v143, __dstj, v144);
      v146 = v141[7];
      v147 = (void *)(v27 + v146);
      v148 = (void *)(v28 + v146);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28 + v146, 1, v144))
      {
        v149 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        v145((uint64_t)v147, v148, v144);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v147, 0, 1, v144);
      }
      goto LABEL_150;
    case 0x28u:
      v150 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v27, v28, v150);
      v151 = type metadata accessor for TypeConversionRequest(0);
      v152 = *(int *)(v151 + 20);
      v153 = v27 + v152;
      v154 = v28 + v152;
      v155 = sub_23FB2ED5C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
      v156 = *(int *)(v151 + 24);
      v157 = v27 + v156;
      v158 = v28 + v156;
      v159 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
      goto LABEL_150;
    case 0x29u:
      v160 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 16))(v27, v28, v160);
      v161 = type metadata accessor for TypeConversionResult(0);
      v162 = *(int *)(v161 + 20);
      __dstk = (void *)(v27 + v162);
      v163 = v28 + v162;
      v164 = sub_23FB2C764();
      v165 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 16);
      v165(__dstk, v163, v164);
      v165((void *)(v27 + *(int *)(v161 + 24)), v28 + *(int *)(v161 + 24), v164);
      goto LABEL_150;
    case 0x2Au:
      v166 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v166;
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
      DecorationResult = type metadata accessor for QueryDecorationResult(0);
      v168 = *(int *)(DecorationResult + 28);
      v372 = (void *)(v27 + v168);
      __dstb = (int *)DecorationResult;
      v169 = (const void *)(v28 + v168);
      v365 = sub_23FB2E354();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v169, 1, v365))
      {
        v170 = sub_23F6916B8(&qword_256EA71F8);
        memcpy(v372, v169, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v365 - 8) + 16))(v372, v169, v365);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v372, 0, 1, v365);
      }
      *(_QWORD *)(v27 + __dstb[8]) = *(_QWORD *)(v28 + __dstb[8]);
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 0x2Cu:
      v194 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 16))(v27, v28, v194);
      DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      v196 = *(int *)(DecorationPrePlannerResult + 20);
      v197 = (_QWORD *)(v27 + v196);
      v198 = (uint64_t *)(v28 + v196);
      v200 = *v198;
      v199 = v198[1];
      *v197 = v200;
      v197[1] = v199;
      v201 = *(int *)(DecorationPrePlannerResult + 24);
      v202 = v27 + v201;
      v203 = (uint64_t *)(v28 + v201);
      v204 = *v203;
      LOBYTE(v203) = *((_BYTE *)v203 + 8);
      *(_QWORD *)v202 = v204;
      *(_BYTE *)(v202 + 8) = (_BYTE)v203;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    default:
      memcpy((void *)v27, (const void *)v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      goto LABEL_151;
  }
}

uint64_t destroy for ODPEventPayload(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t StepResults;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  int v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  int v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 17:
      return swift_bridgeObjectRelease();
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 9:
      swift_bridgeObjectRelease();
      v3 = a1 + 16;
      return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
    case 10:
    case 11:
    case 12:
    case 13:
    case 18:
    case 19:
      v3 = a1;
      return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
    case 16:
      v4 = sub_23FB2C4B8();
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v5(a1, v4);
      v6 = (int *)type metadata accessor for Session.Event(0);
      v5(a1 + v6[5], v4);
      v7 = a1 + v6[6];
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v7, 1, v4))v5(v7, v4);
      break;
    default:
      return result;
  }
  v8 = a1 + v6[7];
  type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v9 = sub_23FB2C998();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      v8 += *(int *)(type metadata accessor for SessionStart(0) + 20);
      v10 = sub_23FB2C908();
      goto LABEL_98;
    case 1u:
      swift_bridgeObjectRelease();
      v11 = v8 + *(int *)(type metadata accessor for TextQuery(0) + 24);
      v12 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      goto LABEL_113;
    case 2u:
    case 0x16u:
    case 0x1Bu:
    case 0x24u:
      goto LABEL_112;
    case 3u:
      type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v4))v5(v8, v4);
        v78 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v5(v8 + v78[5], v4);
        v79 = v8 + v78[6];
        type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v80 = sub_23FB2ED38();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v79, v80);
        }
        v81 = v8 + v78[7];
        v82 = sub_23FB2C764();
        v83 = v81;
        v84 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8);
        v84(v83, v82);
        v85 = v8 + v78[8];
        type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        v86 = swift_getEnumCaseMultiPayload();
        if (v86 != 1)
        {
          if (!v86)
          {
            swift_bridgeObjectRelease();
            v87 = type metadata accessor for RequestContent.TextContent(0);
            v84(v85 + *(int *)(v87 + 20), v82);
          }
          goto LABEL_101;
        }
      }
      else if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          v14 = v8 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v15 = sub_23FB2C764();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
        }
LABEL_101:
        v97 = (int *)type metadata accessor for Request(0);
        v98 = v8 + v97[6];
        v99 = *(unsigned __int8 *)(v98 + 16);
        if (v99 <= 0xFD)
          sub_23F735FE8(*(_QWORD *)v98, *(_QWORD *)(v98 + 8), v99);
        v100 = v8 + v97[7];
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v100, 1, v4))v5(v100, v4);
        v101 = v97[8];
        goto LABEL_111;
      }
      swift_bridgeObjectRelease();
      goto LABEL_101;
    case 4u:
    case 0x1Cu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_112;
    case 5u:
      v16 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v8, v16);
      type metadata accessor for Action(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_113;
    case 6u:
      v17 = sub_23FB2C764();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v17))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v8, v17);
      v18 = v8 + *(int *)(type metadata accessor for ActionCancellation(0) + 20);
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
LABEL_21:
      v20 = v17;
      goto LABEL_99;
    case 7u:
      v21 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v8, v21);
      type metadata accessor for ClientAction(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_113;
    case 8u:
      v22 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v8, v22);
      type metadata accessor for QueryStep(0);
      goto LABEL_113;
    case 9u:
      v23 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v8, v23);
      type metadata accessor for VariableStep(0);
      goto LABEL_113;
    case 0xAu:
    case 0xBu:
    case 0x15u:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
    case 0x1Du:
      goto LABEL_113;
    case 0xCu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_113;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_97;
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          if (swift_getEnumCaseMultiPayload() > 2)
            goto LABEL_114;
LABEL_97:
          v10 = sub_23FB2C6F8();
          goto LABEL_98;
        case 2u:
        case 3u:
          v17 = sub_23FB2C6F8();
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v17))goto LABEL_114;
          v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
          v18 = v8;
          goto LABEL_21;
        default:
          goto LABEL_114;
      }
    case 0xEu:
      sub_23F6BC34C(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
      sub_23F6BC34C(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
      goto LABEL_113;
    case 0xFu:
      v10 = sub_23FB2C77C();
      goto LABEL_98;
    case 0x10u:
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v4))v5(v8, v4);
      v24 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v5(v8 + v24[5], v4);
      v25 = v8 + v24[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v26 = sub_23FB2ED38();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
      }
      v27 = v8 + v24[7];
      v28 = sub_23FB2C764();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
      v29(v27, v28);
      v30 = v8 + v24[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v31 = swift_getEnumCaseMultiPayload();
      if (v31 == 1)
        goto LABEL_113;
      if (v31)
        goto LABEL_114;
      swift_bridgeObjectRelease();
      v32 = v30 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
LABEL_58:
      v57 = v28;
LABEL_65:
      v29(v32, v57);
      goto LABEL_114;
    case 0x11u:
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v4))v5(v8, v4);
      v33 = type metadata accessor for ActionStepResult(0);
      swift_bridgeObjectRelease();
      v34 = v8 + *(int *)(v33 + 24);
      v35 = sub_23FB2C80C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
      v36 = v34 + *(int *)(type metadata accessor for ActionResult(0) + 20);
      v37 = sub_23FB2D0B8();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v36, 1, v37))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
      goto LABEL_113;
    case 0x12u:
      swift_bridgeObjectRelease();
      StepResults = type metadata accessor for QueryStepResults(0);
      v39 = v8 + *(int *)(StepResults + 20);
      v40 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
      v5(v8 + *(int *)(StepResults + 24), v4);
      goto LABEL_114;
    case 0x13u:
      v10 = sub_23FB2C938();
      goto LABEL_98;
    case 0x14u:
      v41 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v8, v41);
      type metadata accessor for ActionResolverRequest(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_113;
    case 0x1Eu:
      v10 = sub_23FB2D004();
      goto LABEL_98;
    case 0x1Fu:
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v4))v5(v8, v4);
      v42 = (int *)type metadata accessor for StatementResult(0);
      swift_bridgeObjectRelease();
      v43 = v8 + v42[6];
      v44 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
      v45 = v43 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v46 = sub_23FB2D0B8();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v45, 1, v46))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v45, v46);
      v47 = v8 + v42[7];
      v48 = sub_23FB2C764();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8);
      v29(v47, v48);
      v29(v8 + v42[8], v48);
      v49 = v42[9];
      goto LABEL_64;
    case 0x20u:
      swift_bridgeObjectRelease();
      v50 = type metadata accessor for ExternalAgentTextQuery(0);
      goto LABEL_108;
    case 0x21u:
      swift_bridgeObjectRelease();
      v50 = type metadata accessor for ExternalAgentSpeechQuery(0);
      goto LABEL_108;
    case 0x22u:
      type metadata accessor for RequestContent(0);
      v71 = swift_getEnumCaseMultiPayload();
      if (v71 != 3)
      {
        if (v71 != 2)
        {
          if (v71 == 1)
          {
            swift_bridgeObjectRelease();
            v72 = v8 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v73 = sub_23FB2C764();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v72, v73);
          }
          goto LABEL_107;
        }
LABEL_106:
        swift_bridgeObjectRelease();
        goto LABEL_107;
      }
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v4))v5(v8, v4);
      v88 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v5(v8 + v88[5], v4);
      v89 = v8 + v88[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v90 = sub_23FB2ED38();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v89, v90);
      }
      v91 = v8 + v88[7];
      v92 = sub_23FB2C764();
      v93 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 8);
      v93(v91, v92);
      v94 = v8 + v88[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v95 = swift_getEnumCaseMultiPayload();
      if (v95 == 1)
        goto LABEL_106;
      if (!v95)
      {
        swift_bridgeObjectRelease();
        v96 = type metadata accessor for RequestContent.TextContent(0);
        v93(v94 + *(int *)(v96 + 20), v92);
      }
LABEL_107:
      v50 = type metadata accessor for ExternalAgentRequest(0);
LABEL_108:
      v102 = v50;
      v103 = v8 + *(int *)(v50 + 20);
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v103, 1, v4))v5(v103, v4);
      v101 = *(int *)(v102 + 24);
LABEL_111:
      if (*(_QWORD *)(v8 + v101 + 8))
      {
LABEL_112:
        swift_bridgeObjectRelease();
LABEL_113:
        swift_bridgeObjectRelease();
      }
LABEL_114:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v104 = a1 + v6[12];
      v105 = sub_23FB2C470();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v104, v105);
      v106 = type metadata accessor for Timepoint();
      v5(v104 + *(int *)(v106 + 28), v4);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0x23u:
      v74 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v8, v74);
      v75 = v8 + *(int *)(type metadata accessor for ExternalAgentOutcome(0) + 20);
      v76 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v75, v76);
      goto LABEL_113;
    case 0x25u:
      v51 = sub_23FB2E8D0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v8, v51);
      v52 = type metadata accessor for ToolResolution(0);
      goto LABEL_63;
    case 0x26u:
      swift_bridgeObjectRelease();
      v53 = (int *)type metadata accessor for UndoRedoRequest(0);
      v54 = v8 + v53[5];
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v54, 1, v4))v5(v54, v4);
      v55 = v8 + v53[7];
      v28 = sub_23FB2C764();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
      v29(v55, v28);
      v56 = v8 + v53[8];
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v56, 1, v28))goto LABEL_114;
      v32 = v56;
      goto LABEL_58;
    case 0x27u:
      v5(v8, v4);
      v58 = type metadata accessor for ClientUndoRedoRequest(0);
      v59 = v8 + *(int *)(v58 + 24);
      v60 = sub_23FB2C764();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8);
      v29(v59, v60);
      v61 = v8 + *(int *)(v58 + 28);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v61, 1, v60))goto LABEL_114;
      v32 = v61;
      v57 = v60;
      goto LABEL_65;
    case 0x28u:
      v62 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v8, v62);
      v63 = type metadata accessor for TypeConversionRequest(0);
      v64 = v8 + *(int *)(v63 + 20);
      v65 = sub_23FB2ED5C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v64, v65);
      v8 += *(int *)(v63 + 24);
      v10 = sub_23FB2C764();
LABEL_98:
      v20 = v10;
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v18 = v8;
LABEL_99:
      v19(v18, v20);
      goto LABEL_114;
    case 0x29u:
      v66 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v8, v66);
      v52 = type metadata accessor for TypeConversionResult(0);
LABEL_63:
      v67 = v52;
      v68 = v8 + *(int *)(v52 + 20);
      v48 = sub_23FB2C764();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8);
      v29(v68, v48);
      v49 = *(int *)(v67 + 24);
LABEL_64:
      v32 = v8 + v49;
      v57 = v48;
      goto LABEL_65;
    case 0x2Au:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69 = v8 + *(int *)(type metadata accessor for QueryDecorationResult(0) + 28);
      v70 = sub_23FB2E354();
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v69, 1, v70))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v69, v70);
      goto LABEL_113;
    case 0x2Cu:
      v77 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v8, v77);
      type metadata accessor for QueryDecorationPrePlannerResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_113;
    default:
      goto LABEL_114;
  }
}

char *initializeWithCopy for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void *, void *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int EnumCaseMultiPayload;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t Step;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t StepResults;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(void *, void *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const void *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(void *, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(void *, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, void *, uint64_t);
  uint64_t v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(void *, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t DecorationResult;
  uint64_t v166;
  const void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t DecorationPrePlannerResult;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, char *, uint64_t);
  uint64_t v213;
  void *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(uint64_t, char *, uint64_t);
  uint64_t v227;
  void *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  const void *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  int *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void (*v253)(uint64_t, uint64_t, uint64_t);
  void (*v254)(uint64_t, uint64_t, uint64_t);
  int *v255;
  uint64_t v256;
  void *v257;
  const void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void (*v265)(uint64_t, uint64_t);
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  const void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  int *v296;
  uint64_t v297;
  void *v298;
  const void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void (*v306)(uint64_t, uint64_t);
  uint64_t v307;
  _QWORD *v308;
  _QWORD *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  const void *v318;
  uint64_t v319;
  uint64_t v320;
  int *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  const void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  int *v351;
  char *v352;
  uint64_t v353;
  int *v354;
  uint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  char *v361;
  uint64_t v362;
  char *result;
  char *v364;
  char *v365;
  uint64_t v366;
  void (*v367)(uint64_t, uint64_t, uint64_t);
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  char *v374;
  char *v375;
  void (*v376)(uint64_t, uint64_t, uint64_t);
  int *v377;
  void *v378;
  void *__dstg;
  void *__dsth;
  void *__dst;
  void *__dsti;
  int *__dsta;
  void *__dstj;
  void *__dstk;
  int *__dstb;
  void *__dstc;
  int *__dstd;
  int *__dste;
  void *__dstf;
  void *__dstl;
  void (*v392)(char *, char *, uint64_t);
  void (*v393)(void *, const void *, uint64_t);
  uint64_t v394;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 6u:
    case 7u:
    case 8u:
    case 0xEu:
    case 0xFu:
    case 0x11u:
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v6;
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 2u:
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 5u:
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v7;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    case 9u:
      v8 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v8;
      v9 = a2 + 16;
      v10 = *((_QWORD *)a2 + 7);
      v11 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v11;
      *((_QWORD *)a1 + 7) = v10;
      v12 = v11;
      v13 = **(void (***)(char *, char *, uint64_t))(v11 - 8);
      swift_bridgeObjectRetain();
      v13(a1 + 16, v9, v12);
      goto LABEL_150;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x12u:
      v14 = *((_QWORD *)a2 + 5);
      v15 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v15;
      *((_QWORD *)a1 + 5) = v14;
      (**(void (***)(void *, const void *))(v15 - 8))(a1, a2);
      goto LABEL_150;
    case 0x10u:
      v16 = sub_23FB2C4B8();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(a1, a2, v16);
      v18 = (int *)type metadata accessor for Session.Event(0);
      v17(&a1[v18[5]], &a2[v18[5]], v16);
      v19 = v18[6];
      v20 = &a1[v19];
      v21 = &a2[v19];
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&a2[v19], 1, v16))
      {
        v22 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v17(v20, v21, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v20, 0, 1, v16);
      }
      break;
    case 0x13u:
      v23 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 3) = v23;
      (**(void (***)(void *, const void *))(v23 - 8))(a1, a2);
      goto LABEL_150;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
  v24 = v18[7];
  v25 = (uint64_t)&a1[v24];
  v26 = (uint64_t)&a2[v24];
  v27 = type metadata accessor for Session.Event.Payload(0);
  v393 = (void (*)(void *, const void *, uint64_t))v17;
  v394 = v16;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v28 = sub_23FB2C998();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = type metadata accessor for SessionStart(0);
      v30 = *(int *)(v29 + 20);
      v31 = v25 + v30;
      v32 = v26 + v30;
      v33 = sub_23FB2C908();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      *(_BYTE *)(v25 + *(int *)(v29 + 24)) = *(_BYTE *)(v26 + *(int *)(v29 + 24));
      goto LABEL_148;
    case 1u:
      v34 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v34;
      *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
      v35 = type metadata accessor for TextQuery(0);
      v36 = *(int *)(v35 + 24);
      v368 = (void *)(v26 + v36);
      __dstg = (void *)(v25 + v36);
      v37 = sub_23FB2C764();
      v38 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      swift_bridgeObjectRetain();
      v38(__dstg, v368, v37);
      v39 = *(int *)(v35 + 28);
      v40 = (_QWORD *)(v25 + v39);
      v41 = (_QWORD *)(v26 + v39);
      v42 = v41[1];
      *v40 = *v41;
      v40[1] = v42;
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 2u:
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
      v43 = *(_QWORD *)(v26 + 24);
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v25 + 24) = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 3u:
      v44 = type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      switch(EnumCaseMultiPayload)
      {
        case 3:
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26, 1, v16))
          {
            v276 = sub_23F6916B8(&qword_256EA2798);
            memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v276 - 8) + 64));
          }
          else
          {
            v17((char *)v25, (char *)v26, v16);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v25, 0, 1, v16);
          }
          v278 = type metadata accessor for RequestContent.SystemPromptResolution(0);
          v17((char *)(v25 + *(int *)(v278 + 20)), (char *)(v26 + *(int *)(v278 + 20)), v16);
          v377 = (int *)v278;
          v279 = *(int *)(v278 + 24);
          v280 = (void *)(v25 + v279);
          v281 = (const void *)(v26 + v279);
          v282 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v283 = sub_23FB2ED38();
            (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v283 - 8) + 16))(v280, v281, v283);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v280, v281, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
          }
          v284 = v377[7];
          v285 = v25 + v284;
          v286 = v26 + v284;
          v287 = sub_23FB2C764();
          v367 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v287 - 8) + 16);
          v367(v285, v286, v287);
          v288 = v377[8];
          v289 = (_QWORD *)(v25 + v288);
          v290 = (_QWORD *)(v26 + v288);
          v291 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          v292 = swift_getEnumCaseMultiPayload();
          if (v292 == 1)
          {
            *v289 = *v290;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v292)
            {
              memcpy(v289, v290, *(_QWORD *)(*(_QWORD *)(v291 - 8) + 64));
              break;
            }
            v293 = v290[1];
            *v289 = *v290;
            v289[1] = v293;
            v294 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v364 = (char *)v289 + v294;
            v295 = (char *)v290 + v294;
            swift_bridgeObjectRetain();
            v367((uint64_t)v364, (uint64_t)v295, v287);
          }
          swift_storeEnumTagMultiPayload();
          break;
        case 2:
          *(_QWORD *)v25 = *(_QWORD *)v26;
          swift_bridgeObjectRetain();
          break;
        case 1:
          v46 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)v25 = *(_QWORD *)v26;
          *(_QWORD *)(v25 + 8) = v46;
          v47 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v369 = (void *)(v25 + v47);
          v48 = v26 + v47;
          v49 = sub_23FB2C764();
          v50 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
          swift_bridgeObjectRetain();
          v50(v369, v48, v49);
          break;
        default:
          memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          goto LABEL_140;
      }
      swift_storeEnumTagMultiPayload();
LABEL_140:
      v321 = (int *)type metadata accessor for Request(0);
      *(_BYTE *)(v25 + v321[5]) = *(_BYTE *)(v26 + v321[5]);
      v322 = v321[6];
      v323 = v25 + v322;
      v324 = v26 + v322;
      v325 = *(unsigned __int8 *)(v324 + 16);
      if (v325 <= 0xFD)
      {
        v326 = *(_QWORD *)v324;
        __dstl = *(void **)(v324 + 8);
        sub_23F73515C(*(_QWORD *)v324, (uint64_t)__dstl, v325);
        *(_QWORD *)v323 = v326;
        *(_QWORD *)(v323 + 8) = __dstl;
        *(_BYTE *)(v323 + 16) = v325;
      }
      else
      {
        *(_OWORD *)v323 = *(_OWORD *)v324;
        *(_BYTE *)(v323 + 16) = *(_BYTE *)(v324 + 16);
      }
      v327 = v321[7];
      v328 = (void *)(v25 + v327);
      v329 = (const void *)(v26 + v327);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26 + v327, 1, v394))
      {
        v330 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v328, v329, *(_QWORD *)(*(_QWORD *)(v330 - 8) + 64));
      }
      else
      {
        v393(v328, v329, v394);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v328, 0, 1, v394);
      }
      v331 = v321[8];
      v233 = v25 + v331;
      v234 = v26 + v331;
      v235 = *(_QWORD *)(v234 + 8);
      if (v235)
        goto LABEL_136;
      *(_OWORD *)v233 = *(_OWORD *)v234;
      *(_QWORD *)(v233 + 16) = *(_QWORD *)(v234 + 16);
LABEL_148:
      swift_storeEnumTagMultiPayload();
LABEL_149:
      v332 = v18[8];
      v333 = &a1[v332];
      v334 = &a2[v332];
      v335 = *((_QWORD *)v334 + 1);
      *(_QWORD *)v333 = *(_QWORD *)v334;
      *((_QWORD *)v333 + 1) = v335;
      v336 = v18[9];
      v337 = &a1[v336];
      v338 = &a2[v336];
      v339 = *((_QWORD *)v338 + 1);
      *(_QWORD *)v337 = *(_QWORD *)v338;
      *((_QWORD *)v337 + 1) = v339;
      v340 = v18[10];
      v341 = &a1[v340];
      v342 = &a2[v340];
      v343 = *((_QWORD *)v342 + 1);
      *(_QWORD *)v341 = *(_QWORD *)v342;
      *((_QWORD *)v341 + 1) = v343;
      v344 = v18[11];
      v345 = &a1[v344];
      v346 = &a2[v344];
      v347 = *((_QWORD *)v346 + 1);
      *(_QWORD *)v345 = *(_QWORD *)v346;
      *((_QWORD *)v345 + 1) = v347;
      v348 = v18[12];
      v349 = &a1[v348];
      v350 = a1;
      v351 = v18;
      v352 = &a2[v348];
      v353 = sub_23FB2C470();
      v392 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v353 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v392(v349, v352, v353);
      v354 = (int *)type metadata accessor for Timepoint();
      *(_QWORD *)&v349[v354[5]] = *(_QWORD *)&v352[v354[5]];
      *(_QWORD *)&v349[v354[6]] = *(_QWORD *)&v352[v354[6]];
      v393(&v349[v354[7]], &v352[v354[7]], v394);
      v355 = v351[13];
      v356 = &v350[v355];
      v357 = &a2[v355];
      v358 = *((_QWORD *)v357 + 1);
      *(_QWORD *)v356 = *(_QWORD *)v357;
      *((_QWORD *)v356 + 1) = v358;
      v359 = v351[14];
      v360 = &v350[v359];
      v361 = &a2[v359];
      *(_QWORD *)v360 = *(_QWORD *)v361;
      v360[8] = v361[8];
      v362 = v351[15];
      a1 = v350;
      *(_QWORD *)&v350[v362] = *(_QWORD *)&a2[v362];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_150:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 4u:
      v51 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v51;
      v52 = *(_QWORD *)(v26 + 24);
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v25 + 24) = v52;
      v53 = *(_QWORD *)(v26 + 40);
      *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
      *(_QWORD *)(v25 + 40) = v53;
      *(_QWORD *)(v25 + 48) = *(_QWORD *)(v26 + 48);
      *(_BYTE *)(v25 + 56) = *(_BYTE *)(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 5u:
      v54 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v25, v26, v54);
      v55 = (int *)type metadata accessor for Action(0);
      v56 = v55[5];
      v57 = (_QWORD *)(v25 + v56);
      v58 = (uint64_t *)(v26 + v56);
      v60 = *v58;
      v59 = v58[1];
      *v57 = v60;
      v57[1] = v59;
      v61 = v55[6];
      v62 = (_QWORD *)(v25 + v61);
      v63 = (_QWORD *)(v26 + v61);
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      v65 = v55[7];
      v66 = (_QWORD *)(v25 + v65);
      v67 = (_QWORD *)(v26 + v65);
      v68 = v67[1];
      *v66 = *v67;
      v66[1] = v68;
      *(_BYTE *)(v25 + v55[8]) = *(_BYTE *)(v26 + v55[8]);
      *(_QWORD *)(v25 + v55[9]) = *(_QWORD *)(v26 + v55[9]);
      v69 = v55[10];
      v70 = (_QWORD *)(v25 + v69);
      v71 = (_QWORD *)(v26 + v69);
      v72 = v71[1];
      *v70 = *v71;
      v70[1] = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 6u:
      v73 = sub_23FB2C764();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26, 1, v73))
      {
        v74 = sub_23F6916B8(&qword_256EA49D8);
        memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v25, v26, v73);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v25, 0, 1, v73);
      }
      v203 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v25 + *(int *)(v203 + 20), v26 + *(int *)(v203 + 20), v73);
      goto LABEL_148;
    case 7u:
      v75 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v25, v26, v75);
      v76 = (int *)type metadata accessor for ClientAction(0);
      v77 = v76[5];
      v78 = (_QWORD *)(v25 + v77);
      v79 = (uint64_t *)(v26 + v77);
      v81 = *v79;
      v80 = v79[1];
      *v78 = v81;
      v78[1] = v80;
      *(_QWORD *)(v25 + v76[6]) = *(_QWORD *)(v26 + v76[6]);
      v82 = v76[7];
      v83 = (_QWORD *)(v25 + v82);
      v84 = (_QWORD *)(v26 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      v86 = v76[8];
      v87 = (_QWORD *)(v25 + v86);
      v88 = (_QWORD *)(v26 + v86);
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      *(_QWORD *)(v25 + v76[9]) = *(_QWORD *)(v26 + v76[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 8u:
      v90 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v25, v26, v90);
      Step = type metadata accessor for QueryStep(0);
      *(_QWORD *)(v25 + *(int *)(Step + 20)) = *(_QWORD *)(v26 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 9u:
      v92 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v25, v26, v92);
      v93 = type metadata accessor for VariableStep(0);
      *(_QWORD *)(v25 + *(int *)(v93 + 20)) = *(_QWORD *)(v26 + *(int *)(v93 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(_QWORD *)v25 = *(_QWORD *)v26;
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      v113 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v113;
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0xCu:
      v94 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v94;
      v95 = *(_QWORD *)(v26 + 24);
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v25 + 24) = v95;
      v96 = *(_QWORD *)(v26 + 32);
      v97 = *(_QWORD *)(v26 + 40);
      *(_QWORD *)(v25 + 32) = v96;
      *(_QWORD *)(v25 + 40) = v97;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0xDu:
      type metadata accessor for SessionError();
      v98 = (char *)&loc_23F748B90 + 4 * word_23FB5AADC[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0xEu:
      v99 = *(_QWORD *)v26;
      v100 = *(_QWORD *)(v26 + 8);
      sub_23F6D1E20(*(_QWORD *)v26, v100);
      *(_QWORD *)v25 = v99;
      *(_QWORD *)(v25 + 8) = v100;
      v101 = *(_QWORD *)(v26 + 16);
      v102 = *(_QWORD *)(v26 + 24);
      sub_23F6D1E20(v101, v102);
      *(_QWORD *)(v25 + 16) = v101;
      *(_QWORD *)(v25 + 24) = v102;
      v103 = *(_QWORD *)(v26 + 40);
      *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
      *(_QWORD *)(v25 + 40) = v103;
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0xFu:
      v104 = sub_23FB2C77C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v25, v26, v104);
      goto LABEL_148;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26, 1, v16))
      {
        v169 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v25, 0, 1, v16);
      }
      v254 = (void (*)(uint64_t, uint64_t, uint64_t))v17;
      v255 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v254(v25 + v255[5], v26 + v255[5], v16);
      v256 = v255[6];
      v257 = (void *)(v25 + v256);
      v258 = (const void *)(v26 + v256);
      v259 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v260 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v260 - 8) + 16))(v257, v258, v260);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64));
      }
      v261 = v255[7];
      v262 = v25 + v261;
      v263 = v26 + v261;
      v264 = sub_23FB2C764();
      v265 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v264 - 8) + 16);
      __dstf = (void *)v264;
      v265(v262, v263);
      v266 = v255[8];
      v267 = (_QWORD *)(v25 + v266);
      v268 = (_QWORD *)(v26 + v266);
      v269 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v270 = swift_getEnumCaseMultiPayload();
      if (v270 == 1)
      {
        *v267 = *v268;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v270)
        {
          memcpy(v267, v268, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
          goto LABEL_148;
        }
        v271 = v268[1];
        *v267 = *v268;
        v267[1] = v271;
        v272 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v273 = (char *)v267 + v272;
        v274 = (char *)v268 + v272;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v265)(v273, v274, __dstf);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_148;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26, 1, v16))
      {
        v105 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v25, 0, 1, v16);
      }
      v204 = type metadata accessor for ActionStepResult(0);
      v205 = *(int *)(v204 + 20);
      v206 = (_QWORD *)(v25 + v205);
      v207 = (_QWORD *)(v26 + v205);
      v208 = v207[1];
      *v206 = *v207;
      v206[1] = v208;
      v209 = *(int *)(v204 + 24);
      v210 = v25 + v209;
      v374 = (char *)(v26 + v209);
      __dstd = (int *)v204;
      v211 = sub_23FB2C80C();
      v212 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 16);
      swift_bridgeObjectRetain();
      v212(v210, v374, v211);
      v213 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      v214 = (void *)(v210 + v213);
      v215 = &v374[v213];
      v216 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v215, 1, v216))
      {
        v217 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 16))(v214, v215, v216);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v214, 0, 1, v216);
      }
      v244 = __dstd[7];
      v245 = (_QWORD *)(v25 + v244);
      v246 = (_QWORD *)(v26 + v244);
      v247 = v246[1];
      *v245 = *v246;
      v245[1] = v247;
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0x12u:
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v106 = (void (*)(uint64_t, uint64_t, uint64_t))v17;
      StepResults = type metadata accessor for QueryStepResults(0);
      v108 = *(int *)(StepResults + 20);
      v370 = (void *)(v26 + v108);
      __dsth = (void *)(v25 + v108);
      v109 = sub_23FB2C764();
      v110 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v109 - 8) + 16);
      swift_bridgeObjectRetain();
      v110(__dsth, v370, v109);
      v106(v25 + *(int *)(StepResults + 24), v26 + *(int *)(StepResults + 24), v394);
      goto LABEL_148;
    case 0x13u:
      v111 = sub_23FB2C938();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v25, v26, v111);
      goto LABEL_148;
    case 0x14u:
      v170 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v25, v26, v170);
      v171 = (int *)type metadata accessor for ActionResolverRequest(0);
      v172 = v171[5];
      v173 = (_QWORD *)(v25 + v172);
      v174 = (uint64_t *)(v26 + v172);
      v176 = *v174;
      v175 = v174[1];
      *v173 = v176;
      v173[1] = v175;
      *(_QWORD *)(v25 + v171[6]) = *(_QWORD *)(v26 + v171[6]);
      *(_QWORD *)(v25 + v171[7]) = *(_QWORD *)(v26 + v171[7]);
      *(_QWORD *)(v25 + v171[8]) = *(_QWORD *)(v26 + v171[8]);
      *(_BYTE *)(v25 + v171[9]) = *(_BYTE *)(v26 + v171[9]);
      *(_BYTE *)(v25 + v171[10]) = *(_BYTE *)(v26 + v171[10]);
      *(_BYTE *)(v25 + v171[11]) = *(_BYTE *)(v26 + v171[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0x16u:
    case 0x24u:
      v112 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v112;
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0x1Bu:
      v177 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v177;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0x1Cu:
      v178 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v178;
      v179 = *(_QWORD *)(v26 + 24);
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v25 + 24) = v179;
      *(_DWORD *)(v25 + 32) = *(_DWORD *)(v26 + 32);
      v181 = *(_QWORD *)(v26 + 40);
      v180 = *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v25 + 40) = v181;
      *(_QWORD *)(v25 + 48) = v180;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0x1Eu:
      v114 = sub_23FB2D004();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v25, v26, v114);
      goto LABEL_148;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26, 1, v16))
      {
        v115 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v25, 0, 1, v16);
      }
      v218 = type metadata accessor for StatementResult(0);
      v219 = *(int *)(v218 + 20);
      v220 = (_QWORD *)(v25 + v219);
      v221 = (_QWORD *)(v26 + v219);
      v222 = v221[1];
      *v220 = *v221;
      v220[1] = v222;
      v223 = *(int *)(v218 + 24);
      v224 = v25 + v223;
      v375 = (char *)(v26 + v223);
      __dste = (int *)v218;
      v225 = sub_23FB2D0DC();
      v226 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v225 - 8) + 16);
      swift_bridgeObjectRetain();
      v226(v224, v375, v225);
      v227 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v228 = (void *)(v224 + v227);
      v229 = &v375[v227];
      v230 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v229, 1, v230))
      {
        v231 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v230 - 8) + 16))(v228, v229, v230);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v228, 0, 1, v230);
      }
      v248 = __dste;
      v249 = __dste[7];
      v250 = v25 + v249;
      v251 = v26 + v249;
      v252 = sub_23FB2C764();
      v253 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v252 - 8) + 16);
      v253(v250, v251, v252);
      v253(v25 + v248[8], v26 + v248[8], v252);
      v253(v25 + v248[9], v26 + v248[9], v252);
      goto LABEL_148;
    case 0x20u:
      v116 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v116;
      v117 = type metadata accessor for ExternalAgentTextQuery(0);
      v118 = *(int *)(v117 + 20);
      __dst = (void *)(v25 + v118);
      v119 = (const void *)(v26 + v118);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v119, 1, v16))
      {
        v120 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dst, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        v393(__dst, v119, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dst, 0, 1, v16);
      }
      v232 = *(int *)(v117 + 24);
      v233 = v25 + v232;
      v234 = v26 + v232;
      v235 = *(_QWORD *)(v234 + 8);
      if (v235)
        goto LABEL_136;
      *(_OWORD *)v233 = *(_OWORD *)v234;
      *(_QWORD *)(v233 + 16) = *(_QWORD *)(v234 + 16);
      goto LABEL_148;
    case 0x21u:
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v182 = type metadata accessor for ExternalAgentSpeechQuery(0);
      v183 = *(int *)(v182 + 20);
      __dstc = (void *)(v25 + v183);
      v184 = (const void *)(v26 + v183);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v184, 1, v16))
      {
        v185 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dstc, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
      }
      else
      {
        v393(__dstc, v184, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstc, 0, 1, v16);
      }
      v275 = *(int *)(v182 + 24);
      v233 = v25 + v275;
      v234 = v26 + v275;
      v235 = *(_QWORD *)(v234 + 8);
      if (v235)
        goto LABEL_136;
      *(_OWORD *)v233 = *(_OWORD *)v234;
      *(_QWORD *)(v233 + 16) = *(_QWORD *)(v234 + 16);
      goto LABEL_148;
    case 0x22u:
      v121 = type metadata accessor for RequestContent(0);
      v122 = swift_getEnumCaseMultiPayload();
      if (v122 != 3)
      {
        if (v122 == 2)
        {
          *(_QWORD *)v25 = *(_QWORD *)v26;
          swift_bridgeObjectRetain();
          goto LABEL_110;
        }
        if (v122 == 1)
        {
          v123 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)v25 = *(_QWORD *)v26;
          *(_QWORD *)(v25 + 8) = v123;
          v124 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v371 = (void *)(v25 + v124);
          v125 = v26 + v124;
          v126 = sub_23FB2C764();
          v127 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 16);
          swift_bridgeObjectRetain();
          v127(v371, v125, v126);
          v16 = v394;
LABEL_110:
          swift_storeEnumTagMultiPayload();
          goto LABEL_132;
        }
        memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
LABEL_132:
        v315 = type metadata accessor for ExternalAgentRequest(0);
        v316 = *(int *)(v315 + 20);
        v317 = (void *)(v25 + v316);
        v318 = (const void *)(v26 + v316);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26 + v316, 1, v16))
        {
          v319 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v319 - 8) + 64));
        }
        else
        {
          v393(v317, v318, v16);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v317, 0, 1, v16);
        }
        v320 = *(int *)(v315 + 24);
        v233 = v25 + v320;
        v234 = v26 + v320;
        v235 = *(_QWORD *)(v234 + 8);
        if (!v235)
        {
          *(_OWORD *)v233 = *(_OWORD *)v234;
          *(_QWORD *)(v233 + 16) = *(_QWORD *)(v234 + 16);
          goto LABEL_148;
        }
LABEL_136:
        *(_QWORD *)v233 = *(_QWORD *)v234;
        *(_QWORD *)(v233 + 8) = v235;
        *(_QWORD *)(v233 + 16) = *(_QWORD *)(v234 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_148;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26, 1, v16))
      {
        v277 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v25, 0, 1, v16);
      }
      v296 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v17((char *)(v25 + v296[5]), (char *)(v26 + v296[5]), v16);
      v297 = v296[6];
      v298 = (void *)(v25 + v297);
      v299 = (const void *)(v26 + v297);
      v300 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v301 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v301 - 8) + 16))(v298, v299, v301);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v300 - 8) + 64));
      }
      v302 = v296[7];
      v303 = v25 + v302;
      v304 = v26 + v302;
      v305 = sub_23FB2C764();
      v306 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v305 - 8) + 16);
      v378 = (void *)v305;
      v306(v303, v304);
      v307 = v296[8];
      v308 = (_QWORD *)(v25 + v307);
      v309 = (_QWORD *)(v26 + v307);
      v310 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v311 = swift_getEnumCaseMultiPayload();
      if (v311 == 1)
      {
        *v308 = *v309;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v311)
        {
          memcpy(v308, v309, *(_QWORD *)(*(_QWORD *)(v310 - 8) + 64));
          goto LABEL_131;
        }
        v312 = v309[1];
        *v308 = *v309;
        v308[1] = v312;
        v313 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v365 = (char *)v308 + v313;
        v314 = (char *)v309 + v313;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v306)(v365, v314, v378);
      }
      swift_storeEnumTagMultiPayload();
LABEL_131:
      swift_storeEnumTagMultiPayload();
      v16 = v394;
      goto LABEL_132;
    case 0x23u:
      v186 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 16))(v25, v26, v186);
      v187 = type metadata accessor for ExternalAgentOutcome(0);
      v188 = *(int *)(v187 + 20);
      v189 = v25 + v188;
      v190 = v26 + v188;
      v191 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
      *(_QWORD *)(v25 + *(int *)(v187 + 24)) = *(_QWORD *)(v26 + *(int *)(v187 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0x25u:
      v128 = sub_23FB2E8D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v25, v26, v128);
      v129 = type metadata accessor for ToolResolution(0);
      v130 = *(int *)(v129 + 20);
      __dsti = (void *)(v25 + v130);
      v131 = v26 + v130;
      v132 = sub_23FB2C764();
      v133 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 16);
      v133(__dsti, v131, v132);
      v133((void *)(v25 + *(int *)(v129 + 24)), v26 + *(int *)(v129 + 24), v132);
      goto LABEL_148;
    case 0x26u:
      v134 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v134;
      v135 = type metadata accessor for UndoRedoRequest(0);
      v136 = *(int *)(v135 + 20);
      v372 = (void *)(v25 + v136);
      __dsta = (int *)v135;
      v137 = (void *)(v26 + v136);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v137, 1, v16))
      {
        v138 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v372, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
      }
      else
      {
        v17((char *)v372, (char *)v137, v16);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v372, 0, 1, v16);
      }
      *(_BYTE *)(v25 + __dsta[6]) = *(_BYTE *)(v26 + __dsta[6]);
      v236 = __dsta[7];
      v237 = v25 + v236;
      v238 = v26 + v236;
      v239 = sub_23FB2C764();
      v376 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v239 - 8) + 16);
      v376(v237, v238, v239);
      v240 = __dsta[8];
      v241 = (void *)(v25 + v240);
      v242 = (const void *)(v26 + v240);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26 + v240, 1, v239))
      {
        v243 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
      }
      else
      {
        v376((uint64_t)v241, (uint64_t)v242, v239);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v241, 0, 1, v239);
      }
      goto LABEL_148;
    case 0x27u:
      v17((char *)v25, (char *)v26, v16);
      v139 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(_BYTE *)(v25 + v139[5]) = *(_BYTE *)(v26 + v139[5]);
      v140 = v139[6];
      v141 = v25 + v140;
      __dstj = (void *)(v26 + v140);
      v142 = sub_23FB2C764();
      v143 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v142 - 8) + 16);
      v143(v141, __dstj, v142);
      v144 = v139[7];
      v145 = (void *)(v25 + v144);
      v146 = (void *)(v26 + v144);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v26 + v144, 1, v142))
      {
        v147 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
      }
      else
      {
        v143((uint64_t)v145, v146, v142);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v145, 0, 1, v142);
      }
      goto LABEL_148;
    case 0x28u:
      v148 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v25, v26, v148);
      v149 = type metadata accessor for TypeConversionRequest(0);
      v150 = *(int *)(v149 + 20);
      v151 = v25 + v150;
      v152 = v26 + v150;
      v153 = sub_23FB2ED5C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v152, v153);
      v154 = *(int *)(v149 + 24);
      v155 = v25 + v154;
      v156 = v26 + v154;
      v157 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 16))(v155, v156, v157);
      goto LABEL_148;
    case 0x29u:
      v158 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 16))(v25, v26, v158);
      v159 = type metadata accessor for TypeConversionResult(0);
      v160 = *(int *)(v159 + 20);
      __dstk = (void *)(v25 + v160);
      v161 = v26 + v160;
      v162 = sub_23FB2C764();
      v163 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v162 - 8) + 16);
      v163(__dstk, v161, v162);
      v163((void *)(v25 + *(int *)(v159 + 24)), v26 + *(int *)(v159 + 24), v162);
      goto LABEL_148;
    case 0x2Au:
      v164 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v164;
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      DecorationResult = type metadata accessor for QueryDecorationResult(0);
      v166 = *(int *)(DecorationResult + 28);
      v373 = (void *)(v25 + v166);
      __dstb = (int *)DecorationResult;
      v167 = (const void *)(v26 + v166);
      v366 = sub_23FB2E354();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v167, 1, v366))
      {
        v168 = sub_23F6916B8(&qword_256EA71F8);
        memcpy(v373, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v366 - 8) + 16))(v373, v167, v366);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v373, 0, 1, v366);
      }
      *(_QWORD *)(v25 + __dstb[8]) = *(_QWORD *)(v26 + __dstb[8]);
      swift_bridgeObjectRetain();
      goto LABEL_148;
    case 0x2Cu:
      v192 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v192 - 8) + 16))(v25, v26, v192);
      DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      v194 = *(int *)(DecorationPrePlannerResult + 20);
      v195 = (_QWORD *)(v25 + v194);
      v196 = (uint64_t *)(v26 + v194);
      v198 = *v196;
      v197 = v196[1];
      *v195 = v198;
      v195[1] = v197;
      v199 = *(int *)(DecorationPrePlannerResult + 24);
      v200 = v25 + v199;
      v201 = (uint64_t *)(v26 + v199);
      v202 = *v201;
      LOBYTE(v201) = *((_BYTE *)v201 + 8);
      *(_QWORD *)v200 = v202;
      *(_BYTE *)(v200 + 8) = (_BYTE)v201;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_148;
    default:
      memcpy((void *)v25, (const void *)v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      goto LABEL_149;
  }
}

_QWORD *assignWithCopy for ODPEventPayload(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void *, void *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void *, uint64_t, uint64_t);
  uint64_t v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t Step;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t StepResults;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(void *, void *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(void *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(void *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, void *, uint64_t);
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(void *, uint64_t, uint64_t);
  uint64_t DecorationResult;
  uint64_t v133;
  const void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  const void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t DecorationPrePlannerResult;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, char *, uint64_t);
  uint64_t v170;
  void *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, char *, uint64_t);
  uint64_t v183;
  void *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const void *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t, uint64_t);
  __int128 v208;
  int *v209;
  uint64_t v210;
  void *v211;
  const void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(uint64_t, uint64_t);
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  char *v248;
  int *v249;
  uint64_t v250;
  void *v251;
  const void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t);
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  const void *v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  __int128 *v277;
  unsigned int v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  const void *v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  uint64_t v299;
  char *v300;
  int *v301;
  char *v302;
  uint64_t v303;
  int *v304;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  uint64_t v308;
  char *v309;
  char *v310;
  char v311;
  _QWORD *result;
  char *v313;
  char *v314;
  uint64_t v315;
  void (*v316)(uint64_t, uint64_t, uint64_t);
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  _QWORD *v321;
  void *v322;
  char *v323;
  char *v324;
  void (*v325)(uint64_t, uint64_t, uint64_t);
  int *v326;
  void *v327;
  void *__dstg;
  void *__dsth;
  void *__dst;
  void *__dsti;
  int *__dsta;
  void *__dstj;
  void *__dstk;
  int *__dstb;
  void *__dstc;
  int *__dstd;
  int *__dste;
  void *__dstf;
  void *__dstl;
  void (*v341)(char *, char *, uint64_t);
  void (*v342)(void *, const void *, uint64_t);
  uint64_t v343;

  if (a1 == a2)
    return a1;
  sub_23F6D3508((uint64_t)a1, type metadata accessor for ODPEventPayload);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 6u:
    case 7u:
    case 8u:
    case 0xEu:
    case 0xFu:
    case 0x11u:
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      goto LABEL_151;
    case 2u:
    case 4u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_151;
    case 5u:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_151;
    case 9u:
      *a1 = *a2;
      a1[1] = a2[1];
      v6 = (char *)(a2 + 2);
      v7 = a2[5];
      a1[5] = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      v8 = **(void (***)(_QWORD *, char *, uint64_t))(v7 - 8);
      swift_bridgeObjectRetain();
      v8(a1 + 2, v6, v7);
      goto LABEL_151;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x12u:
      v9 = a2[3];
      a1[3] = v9;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      (**(void (***)(void *, const void *))(v9 - 8))(a1, a2);
      goto LABEL_151;
    case 0x10u:
      v10 = sub_23FB2C4B8();
      v11 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      v12 = (int *)type metadata accessor for Session.Event(0);
      v11((char *)a1 + v12[5], (char *)a2 + v12[5], v10);
      v13 = v12[6];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2 + v13, 1, v10))
      {
        v16 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v11(v14, v15, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v10);
      }
      break;
    case 0x13u:
      v17 = a2[3];
      a1[3] = v17;
      (**(void (***)(void *, const void *))(v17 - 8))(a1, a2);
      goto LABEL_151;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
  v18 = v12[7];
  v19 = (uint64_t)a1 + v18;
  v20 = (uint64_t)a2 + v18;
  v21 = type metadata accessor for Session.Event.Payload(0);
  v342 = v11;
  v343 = v10;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v22 = sub_23FB2C998();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = type metadata accessor for SessionStart(0);
      v24 = *(int *)(v23 + 20);
      v25 = v19 + v24;
      v26 = v20 + v24;
      v27 = sub_23FB2C908();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      *(_BYTE *)(v19 + *(int *)(v23 + 24)) = *(_BYTE *)(v20 + *(int *)(v23 + 24));
      goto LABEL_149;
    case 1u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
      v28 = type metadata accessor for TextQuery(0);
      v29 = *(int *)(v28 + 24);
      v317 = (void *)(v20 + v29);
      __dstg = (void *)(v19 + v29);
      v30 = sub_23FB2C764();
      v31 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
      swift_bridgeObjectRetain();
      v31(__dstg, v317, v30);
      v32 = *(int *)(v28 + 28);
      v33 = (_QWORD *)(v19 + v32);
      v34 = (_QWORD *)(v20 + v32);
      *v33 = *v34;
      v33[1] = v34[1];
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 2u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 3u:
      v35 = type metadata accessor for RequestContent(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(_QWORD *)v19 = *(_QWORD *)v20;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
            goto LABEL_141;
          }
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
          v37 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v318 = (void *)(v19 + v37);
          v38 = v20 + v37;
          v39 = sub_23FB2C764();
          v40 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
          swift_bridgeObjectRetain();
          v40(v318, v38, v39);
        }
LABEL_140:
        swift_storeEnumTagMultiPayload();
LABEL_141:
        v274 = (int *)type metadata accessor for Request(0);
        *(_BYTE *)(v19 + v274[5]) = *(_BYTE *)(v20 + v274[5]);
        v275 = v274[6];
        v276 = v19 + v275;
        v277 = (__int128 *)(v20 + v275);
        v278 = *((unsigned __int8 *)v277 + 16);
        if (v278 <= 0xFD)
        {
          v280 = *(_QWORD *)v277;
          __dstl = (void *)*((_QWORD *)v277 + 1);
          sub_23F73515C(*(_QWORD *)v277, (uint64_t)__dstl, v278);
          *(_QWORD *)v276 = v280;
          *(_QWORD *)(v276 + 8) = __dstl;
          *(_BYTE *)(v276 + 16) = v278;
        }
        else
        {
          v279 = *v277;
          *(_BYTE *)(v276 + 16) = *((_BYTE *)v277 + 16);
          *(_OWORD *)v276 = v279;
        }
        v281 = v274[7];
        v282 = (void *)(v19 + v281);
        v283 = (const void *)(v20 + v281);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20 + v281, 1, v343))
        {
          v284 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
        }
        else
        {
          v342(v282, v283, v343);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v282, 0, 1, v343);
        }
        v285 = v274[8];
        v189 = v19 + v285;
        v190 = (__int128 *)(v20 + v285);
        if (!*((_QWORD *)v190 + 1))
        {
          v286 = *v190;
          *(_QWORD *)(v189 + 16) = *((_QWORD *)v190 + 2);
          *(_OWORD *)v189 = v286;
          goto LABEL_149;
        }
LABEL_137:
        *(_QWORD *)v189 = *(_QWORD *)v190;
        *(_QWORD *)(v189 + 8) = *((_QWORD *)v190 + 1);
        *(_QWORD *)(v189 + 16) = *((_QWORD *)v190 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_149;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20, 1, v10))
      {
        v230 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v19, 0, 1, v10);
      }
      v232 = type metadata accessor for RequestContent.SystemPromptResolution(0);
      v11((void *)(v19 + *(int *)(v232 + 20)), (const void *)(v20 + *(int *)(v232 + 20)), v10);
      v326 = (int *)v232;
      v233 = *(int *)(v232 + 24);
      v234 = (void *)(v19 + v233);
      v235 = (const void *)(v20 + v233);
      v236 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v237 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v237 - 8) + 16))(v234, v235, v237);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
      }
      v238 = v326[7];
      v239 = v19 + v238;
      v240 = v20 + v238;
      v241 = sub_23FB2C764();
      v316 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v241 - 8) + 16);
      v316(v239, v240, v241);
      v242 = v326[8];
      v243 = (_QWORD *)(v19 + v242);
      v244 = (_QWORD *)(v20 + v242);
      v245 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v246 = swift_getEnumCaseMultiPayload();
      if (v246 == 1)
      {
        *v243 = *v244;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v246)
        {
          memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
          goto LABEL_140;
        }
        *v243 = *v244;
        v243[1] = v244[1];
        v247 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v313 = (char *)v243 + v247;
        v248 = (char *)v244 + v247;
        swift_bridgeObjectRetain();
        v316((uint64_t)v313, (uint64_t)v248, v241);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_140;
    case 4u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
      *(_QWORD *)(v19 + 48) = *(_QWORD *)(v20 + 48);
      *(_BYTE *)(v19 + 56) = *(_BYTE *)(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 5u:
      v41 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v19, v20, v41);
      v42 = (int *)type metadata accessor for Action(0);
      v43 = v42[5];
      v44 = (_QWORD *)(v19 + v43);
      v45 = (_QWORD *)(v20 + v43);
      *v44 = *v45;
      v44[1] = v45[1];
      v46 = v42[6];
      v47 = (_QWORD *)(v19 + v46);
      v48 = (_QWORD *)(v20 + v46);
      *v47 = *v48;
      v47[1] = v48[1];
      v49 = v42[7];
      v50 = (_QWORD *)(v19 + v49);
      v51 = (_QWORD *)(v20 + v49);
      *v50 = *v51;
      v50[1] = v51[1];
      *(_BYTE *)(v19 + v42[8]) = *(_BYTE *)(v20 + v42[8]);
      *(_QWORD *)(v19 + v42[9]) = *(_QWORD *)(v20 + v42[9]);
      v52 = v42[10];
      v53 = (_QWORD *)(v19 + v52);
      v54 = (_QWORD *)(v20 + v52);
      *v53 = *v54;
      v53[1] = v54[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 6u:
      v55 = sub_23FB2C764();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20, 1, v55))
      {
        v56 = sub_23F6916B8(&qword_256EA49D8);
        memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v19, v20, v55);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v19, 0, 1, v55);
      }
      v161 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v19 + *(int *)(v161 + 20), v20 + *(int *)(v161 + 20), v55);
      goto LABEL_149;
    case 7u:
      v57 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v19, v20, v57);
      v58 = (int *)type metadata accessor for ClientAction(0);
      v59 = v58[5];
      v60 = (_QWORD *)(v19 + v59);
      v61 = (_QWORD *)(v20 + v59);
      *v60 = *v61;
      v60[1] = v61[1];
      *(_QWORD *)(v19 + v58[6]) = *(_QWORD *)(v20 + v58[6]);
      v62 = v58[7];
      v63 = (_QWORD *)(v19 + v62);
      v64 = (_QWORD *)(v20 + v62);
      *v63 = *v64;
      v63[1] = v64[1];
      v65 = v58[8];
      v66 = (_QWORD *)(v19 + v65);
      v67 = (_QWORD *)(v20 + v65);
      *v66 = *v67;
      v66[1] = v67[1];
      *(_QWORD *)(v19 + v58[9]) = *(_QWORD *)(v20 + v58[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 8u:
      v68 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v19, v20, v68);
      Step = type metadata accessor for QueryStep(0);
      *(_QWORD *)(v19 + *(int *)(Step + 20)) = *(_QWORD *)(v20 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 9u:
      v70 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v19, v20, v70);
      v71 = type metadata accessor for VariableStep(0);
      *(_QWORD *)(v19 + *(int *)(v71 + 20)) = *(_QWORD *)(v20 + *(int *)(v71 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0xCu:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0xDu:
      type metadata accessor for SessionError();
      v72 = (char *)&loc_23F74AFB4 + 4 * word_23FB5AB52[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0xEu:
      v73 = *(_QWORD *)v20;
      v74 = *(_QWORD *)(v20 + 8);
      sub_23F6D1E20(*(_QWORD *)v20, v74);
      *(_QWORD *)v19 = v73;
      *(_QWORD *)(v19 + 8) = v74;
      v75 = *(_QWORD *)(v20 + 16);
      v76 = *(_QWORD *)(v20 + 24);
      sub_23F6D1E20(v75, v76);
      *(_QWORD *)(v19 + 16) = v75;
      *(_QWORD *)(v19 + 24) = v76;
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0xFu:
      v77 = sub_23FB2C77C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v19, v20, v77);
      goto LABEL_149;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20, 1, v10))
      {
        v136 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v19, 0, 1, v10);
      }
      v209 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v342((void *)(v19 + v209[5]), (const void *)(v20 + v209[5]), v10);
      v210 = v209[6];
      v211 = (void *)(v19 + v210);
      v212 = (const void *)(v20 + v210);
      v213 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v214 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v214 - 8) + 16))(v211, v212, v214);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
      }
      v215 = v209[7];
      v216 = v19 + v215;
      v217 = v20 + v215;
      v218 = sub_23FB2C764();
      v219 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v218 - 8) + 16);
      __dstf = (void *)v218;
      v219(v216, v217);
      v220 = v209[8];
      v221 = (_QWORD *)(v19 + v220);
      v222 = (_QWORD *)(v20 + v220);
      v223 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v224 = swift_getEnumCaseMultiPayload();
      if (v224 == 1)
      {
        *v221 = *v222;
        swift_bridgeObjectRetain();
        goto LABEL_102;
      }
      if (!v224)
      {
        *v221 = *v222;
        v221[1] = v222[1];
        v225 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v226 = (char *)v221 + v225;
        v227 = (char *)v222 + v225;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v219)(v226, v227, __dstf);
LABEL_102:
        swift_storeEnumTagMultiPayload();
        goto LABEL_149;
      }
      memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
LABEL_149:
      swift_storeEnumTagMultiPayload();
LABEL_150:
      v287 = v12[8];
      v288 = (_QWORD *)((char *)a1 + v287);
      v289 = (_QWORD *)((char *)a2 + v287);
      *v288 = *v289;
      v288[1] = v289[1];
      v290 = v12[9];
      v291 = (_QWORD *)((char *)a1 + v290);
      v292 = (_QWORD *)((char *)a2 + v290);
      *v291 = *v292;
      v291[1] = v292[1];
      v293 = v12[10];
      v294 = (_QWORD *)((char *)a1 + v293);
      v295 = (_QWORD *)((char *)a2 + v293);
      *v294 = *v295;
      v294[1] = v295[1];
      v296 = v12[11];
      v297 = (_QWORD *)((char *)a1 + v296);
      v298 = (_QWORD *)((char *)a2 + v296);
      *v297 = *v298;
      v297[1] = v298[1];
      v299 = v12[12];
      v300 = (char *)a1 + v299;
      v301 = v12;
      v302 = (char *)a2 + v299;
      v303 = sub_23FB2C470();
      v341 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v303 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v341(v300, v302, v303);
      v304 = (int *)type metadata accessor for Timepoint();
      *(_QWORD *)&v300[v304[5]] = *(_QWORD *)&v302[v304[5]];
      *(_QWORD *)&v300[v304[6]] = *(_QWORD *)&v302[v304[6]];
      v342(&v300[v304[7]], &v302[v304[7]], v343);
      v305 = v301[13];
      v306 = (_QWORD *)((char *)a1 + v305);
      v307 = (_QWORD *)((char *)a2 + v305);
      *v306 = *v307;
      v306[1] = v307[1];
      v308 = v301[14];
      v309 = (char *)a1 + v308;
      v310 = (char *)a2 + v308;
      v311 = v310[8];
      *(_QWORD *)v309 = *(_QWORD *)v310;
      v309[8] = v311;
      *(_QWORD *)((char *)a1 + v301[15]) = *(_QWORD *)((char *)a2 + v301[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_151:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20, 1, v10))
      {
        v78 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v19, 0, 1, v10);
      }
      v162 = type metadata accessor for ActionStepResult(0);
      v163 = *(int *)(v162 + 20);
      v164 = (_QWORD *)(v19 + v163);
      v165 = (_QWORD *)(v20 + v163);
      *v164 = *v165;
      v164[1] = v165[1];
      v166 = *(int *)(v162 + 24);
      v167 = v19 + v166;
      v323 = (char *)(v20 + v166);
      __dstd = (int *)v162;
      v168 = sub_23FB2C80C();
      v169 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 16);
      swift_bridgeObjectRetain();
      v169(v167, v323, v168);
      v170 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      v171 = (void *)(v167 + v170);
      v172 = &v323[v170];
      v173 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v172, 1, v173))
      {
        v174 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(v171, v172, v173);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v171, 0, 1, v173);
      }
      v199 = __dstd[7];
      v200 = (_QWORD *)(v19 + v199);
      v201 = (_QWORD *)(v20 + v199);
      *v200 = *v201;
      v200[1] = v201[1];
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0x12u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v79 = (void (*)(uint64_t, uint64_t, uint64_t))v11;
      StepResults = type metadata accessor for QueryStepResults(0);
      v81 = *(int *)(StepResults + 20);
      v319 = (void *)(v20 + v81);
      __dsth = (void *)(v19 + v81);
      v82 = sub_23FB2C764();
      v83 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v82 - 8) + 16);
      swift_bridgeObjectRetain();
      v83(__dsth, v319, v82);
      v79(v19 + *(int *)(StepResults + 24), v20 + *(int *)(StepResults + 24), v343);
      goto LABEL_149;
    case 0x13u:
      v84 = sub_23FB2C938();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v19, v20, v84);
      goto LABEL_149;
    case 0x14u:
      v137 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(v19, v20, v137);
      v138 = (int *)type metadata accessor for ActionResolverRequest(0);
      v139 = v138[5];
      v140 = (_QWORD *)(v19 + v139);
      v141 = (_QWORD *)(v20 + v139);
      *v140 = *v141;
      v140[1] = v141[1];
      *(_QWORD *)(v19 + v138[6]) = *(_QWORD *)(v20 + v138[6]);
      *(_QWORD *)(v19 + v138[7]) = *(_QWORD *)(v20 + v138[7]);
      *(_QWORD *)(v19 + v138[8]) = *(_QWORD *)(v20 + v138[8]);
      *(_BYTE *)(v19 + v138[9]) = *(_BYTE *)(v20 + v138[9]);
      *(_BYTE *)(v19 + v138[10]) = *(_BYTE *)(v20 + v138[10]);
      *(_BYTE *)(v19 + v138[11]) = *(_BYTE *)(v20 + v138[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0x16u:
    case 0x24u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0x1Bu:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0x1Cu:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
      *(_DWORD *)(v19 + 32) = *(_DWORD *)(v20 + 32);
      *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
      *(_QWORD *)(v19 + 48) = *(_QWORD *)(v20 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0x1Eu:
      v85 = sub_23FB2D004();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v19, v20, v85);
      goto LABEL_149;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20, 1, v10))
      {
        v86 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v19, 0, 1, v10);
      }
      v175 = type metadata accessor for StatementResult(0);
      v176 = *(int *)(v175 + 20);
      v177 = (_QWORD *)(v19 + v176);
      v178 = (_QWORD *)(v20 + v176);
      *v177 = *v178;
      v177[1] = v178[1];
      v179 = *(int *)(v175 + 24);
      v180 = v19 + v179;
      v324 = (char *)(v20 + v179);
      __dste = (int *)v175;
      v181 = sub_23FB2D0DC();
      v182 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16);
      swift_bridgeObjectRetain();
      v182(v180, v324, v181);
      v183 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v184 = (void *)(v180 + v183);
      v185 = &v324[v183];
      v186 = sub_23FB2D0B8();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v185, 1, v186))
      {
        v187 = sub_23F6916B8(&qword_256EA2780);
        memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v186 - 8) + 16))(v184, v185, v186);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v184, 0, 1, v186);
      }
      v202 = __dste;
      v203 = __dste[7];
      v204 = v19 + v203;
      v205 = v20 + v203;
      v206 = sub_23FB2C764();
      v207 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v206 - 8) + 16);
      v207(v204, v205, v206);
      v207(v19 + v202[8], v20 + v202[8], v206);
      v207(v19 + v202[9], v20 + v202[9], v206);
      goto LABEL_149;
    case 0x20u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      v87 = type metadata accessor for ExternalAgentTextQuery(0);
      v88 = *(int *)(v87 + 20);
      __dst = (void *)(v19 + v88);
      v89 = (const void *)(v20 + v88);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v89, 1, v10))
      {
        v90 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dst, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
      }
      else
      {
        v342(__dst, v89, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dst, 0, 1, v10);
      }
      v188 = *(int *)(v87 + 24);
      v189 = v19 + v188;
      v190 = (__int128 *)(v20 + v188);
      if (*((_QWORD *)v190 + 1))
        goto LABEL_137;
      v208 = *v190;
      *(_QWORD *)(v189 + 16) = *((_QWORD *)v190 + 2);
      *(_OWORD *)v189 = v208;
      goto LABEL_149;
    case 0x21u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v142 = type metadata accessor for ExternalAgentSpeechQuery(0);
      v143 = *(int *)(v142 + 20);
      __dstc = (void *)(v19 + v143);
      v144 = (const void *)(v20 + v143);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v144, 1, v10))
      {
        v145 = sub_23F6916B8(&qword_256EA2798);
        memcpy(__dstc, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
      }
      else
      {
        v342(__dstc, v144, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstc, 0, 1, v10);
      }
      v228 = *(int *)(v142 + 24);
      v189 = v19 + v228;
      v190 = (__int128 *)(v20 + v228);
      if (*((_QWORD *)v190 + 1))
        goto LABEL_137;
      v229 = *v190;
      *(_QWORD *)(v189 + 16) = *((_QWORD *)v190 + 2);
      *(_OWORD *)v189 = v229;
      goto LABEL_149;
    case 0x22u:
      v91 = type metadata accessor for RequestContent(0);
      v92 = swift_getEnumCaseMultiPayload();
      if (v92 != 3)
      {
        if (v92 == 2)
        {
          *(_QWORD *)v19 = *(_QWORD *)v20;
          swift_bridgeObjectRetain();
          goto LABEL_111;
        }
        if (v92 == 1)
        {
          *(_QWORD *)v19 = *(_QWORD *)v20;
          *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
          v93 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v320 = (void *)(v19 + v93);
          v94 = v20 + v93;
          v95 = sub_23FB2C764();
          v96 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
          swift_bridgeObjectRetain();
          v96(v320, v94, v95);
          v10 = v343;
LABEL_111:
          swift_storeEnumTagMultiPayload();
          goto LABEL_133;
        }
        memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
LABEL_133:
        v267 = type metadata accessor for ExternalAgentRequest(0);
        v268 = *(int *)(v267 + 20);
        v269 = (void *)(v19 + v268);
        v270 = (const void *)(v20 + v268);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20 + v268, 1, v10))
        {
          v271 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v269, v270, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
        }
        else
        {
          v342(v269, v270, v10);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v269, 0, 1, v10);
        }
        v272 = *(int *)(v267 + 24);
        v189 = v19 + v272;
        v190 = (__int128 *)(v20 + v272);
        if (!*((_QWORD *)v190 + 1))
        {
          v273 = *v190;
          *(_QWORD *)(v189 + 16) = *((_QWORD *)v190 + 2);
          *(_OWORD *)v189 = v273;
          goto LABEL_149;
        }
        goto LABEL_137;
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20, 1, v10))
      {
        v231 = sub_23F6916B8(&qword_256EA2798);
        memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v19, 0, 1, v10);
      }
      v249 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v11((void *)(v19 + v249[5]), (const void *)(v20 + v249[5]), v10);
      v250 = v249[6];
      v251 = (void *)(v19 + v250);
      v252 = (const void *)(v20 + v250);
      v253 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v254 = sub_23FB2ED38();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v254 - 8) + 16))(v251, v252, v254);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v253 - 8) + 64));
      }
      v255 = v249[7];
      v256 = v19 + v255;
      v257 = v20 + v255;
      v258 = sub_23FB2C764();
      v259 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v258 - 8) + 16);
      v327 = (void *)v258;
      v259(v256, v257);
      v260 = v249[8];
      v261 = (_QWORD *)(v19 + v260);
      v262 = (_QWORD *)(v20 + v260);
      v263 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      v264 = swift_getEnumCaseMultiPayload();
      if (v264 == 1)
      {
        *v261 = *v262;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v264)
        {
          memcpy(v261, v262, *(_QWORD *)(*(_QWORD *)(v263 - 8) + 64));
          goto LABEL_132;
        }
        *v261 = *v262;
        v261[1] = v262[1];
        v265 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v314 = (char *)v261 + v265;
        v266 = (char *)v262 + v265;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v259)(v314, v266, v327);
      }
      swift_storeEnumTagMultiPayload();
LABEL_132:
      swift_storeEnumTagMultiPayload();
      v10 = v343;
      goto LABEL_133;
    case 0x23u:
      v146 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 16))(v19, v20, v146);
      v147 = type metadata accessor for ExternalAgentOutcome(0);
      v148 = *(int *)(v147 + 20);
      v149 = v19 + v148;
      v150 = v20 + v148;
      v151 = sub_23FB2D0DC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v149, v150, v151);
      *(_QWORD *)(v19 + *(int *)(v147 + 24)) = *(_QWORD *)(v20 + *(int *)(v147 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0x25u:
      v97 = sub_23FB2E8D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v19, v20, v97);
      v98 = type metadata accessor for ToolResolution(0);
      v99 = *(int *)(v98 + 20);
      __dsti = (void *)(v19 + v99);
      v100 = v20 + v99;
      v101 = sub_23FB2C764();
      v102 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 16);
      v102(__dsti, v100, v101);
      v102((void *)(v19 + *(int *)(v98 + 24)), v20 + *(int *)(v98 + 24), v101);
      goto LABEL_149;
    case 0x26u:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      v103 = type metadata accessor for UndoRedoRequest(0);
      v104 = *(int *)(v103 + 20);
      v321 = (_QWORD *)(v19 + v104);
      __dsta = (int *)v103;
      v105 = (_QWORD *)(v20 + v104);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v105, 1, v10))
      {
        v106 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v321, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v11(v321, v105, v10);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v321, 0, 1, v10);
      }
      *(_BYTE *)(v19 + __dsta[6]) = *(_BYTE *)(v20 + __dsta[6]);
      v191 = __dsta[7];
      v192 = v19 + v191;
      v193 = v20 + v191;
      v194 = sub_23FB2C764();
      v325 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 16);
      v325(v192, v193, v194);
      v195 = __dsta[8];
      v196 = (void *)(v19 + v195);
      v197 = (const void *)(v20 + v195);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20 + v195, 1, v194))
      {
        v198 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
      }
      else
      {
        v325((uint64_t)v196, (uint64_t)v197, v194);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v196, 0, 1, v194);
      }
      goto LABEL_149;
    case 0x27u:
      v11((void *)v19, (const void *)v20, v10);
      v107 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(_BYTE *)(v19 + v107[5]) = *(_BYTE *)(v20 + v107[5]);
      v108 = v107[6];
      v109 = v19 + v108;
      __dstj = (void *)(v20 + v108);
      v110 = sub_23FB2C764();
      v111 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v110 - 8) + 16);
      v111(v109, __dstj, v110);
      v112 = v107[7];
      v113 = (void *)(v19 + v112);
      v114 = (void *)(v20 + v112);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20 + v112, 1, v110))
      {
        v115 = sub_23F6916B8(&qword_256EA49D8);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
      }
      else
      {
        v111((uint64_t)v113, v114, v110);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v113, 0, 1, v110);
      }
      goto LABEL_149;
    case 0x28u:
      v116 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v19, v20, v116);
      v117 = type metadata accessor for TypeConversionRequest(0);
      v118 = *(int *)(v117 + 20);
      v119 = v19 + v118;
      v120 = v20 + v118;
      v121 = sub_23FB2ED5C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
      v122 = *(int *)(v117 + 24);
      v123 = v19 + v122;
      v124 = v20 + v122;
      v125 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
      goto LABEL_149;
    case 0x29u:
      v126 = sub_23FB2ED38();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v19, v20, v126);
      v127 = type metadata accessor for TypeConversionResult(0);
      v128 = *(int *)(v127 + 20);
      __dstk = (void *)(v19 + v128);
      v129 = v20 + v128;
      v130 = sub_23FB2C764();
      v131 = *(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 16);
      v131(__dstk, v129, v130);
      v131((void *)(v19 + *(int *)(v127 + 24)), v20 + *(int *)(v127 + 24), v130);
      goto LABEL_149;
    case 0x2Au:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
      DecorationResult = type metadata accessor for QueryDecorationResult(0);
      v133 = *(int *)(DecorationResult + 28);
      v322 = (void *)(v19 + v133);
      __dstb = (int *)DecorationResult;
      v134 = (const void *)(v20 + v133);
      v315 = sub_23FB2E354();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v134, 1, v315))
      {
        v135 = sub_23F6916B8(&qword_256EA71F8);
        memcpy(v322, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v315 - 8) + 16))(v322, v134, v315);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v322, 0, 1, v315);
      }
      *(_QWORD *)(v19 + __dstb[8]) = *(_QWORD *)(v20 + __dstb[8]);
      swift_bridgeObjectRetain();
      goto LABEL_149;
    case 0x2Cu:
      v152 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v19, v20, v152);
      DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      v154 = *(int *)(DecorationPrePlannerResult + 20);
      v155 = (_QWORD *)(v19 + v154);
      v156 = (_QWORD *)(v20 + v154);
      *v155 = *v156;
      v155[1] = v156[1];
      v157 = *(int *)(DecorationPrePlannerResult + 24);
      v158 = v19 + v157;
      v159 = (uint64_t *)(v20 + v157);
      v160 = *v159;
      LOBYTE(v159) = *((_BYTE *)v159 + 8);
      *(_QWORD *)v158 = v160;
      *(_BYTE *)(v158 + 8) = (_BYTE)v159;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_149;
    default:
      memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      goto LABEL_150;
  }
}

char *initializeWithTake for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Step;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t StepResults;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  int EnumCaseMultiPayload;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t DecorationResult;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t DecorationPrePlannerResult;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  int *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  int *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  void (*v197)(char *, char *, uint64_t);
  int *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  int *v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *result;
  void (*v234)(char *, char *);
  void (*v235)(char *, char *, _QWORD *);
  char *v236;
  char *v237;
  void (*v238)(char *, char *, uint64_t);
  void (*v239)(char *, char *);
  char *v240;
  char *v241;
  _QWORD *v242;
  char *__dsti;
  char *__dstj;
  void (*__dst)(char *, void *, uint64_t);
  char *__dstk;
  char *__dsta;
  char *__dstb;
  int *__dstl;
  char *__dstc;
  void *__dstd;
  char *__dste;
  char *__dstm;
  int *__dstf;
  char *__dstg;
  _QWORD *__dsth;
  void (*v257)(char *, char *, uint64_t);
  void (*v258)(char *, char *, uint64_t);
  void (*v259)(char *, char *, uint64_t);
  void (*v260)(char *, char *, uint64_t);
  void (*v261)(char *, char *, uint64_t);
  void (*v262)(char *, char *, uint64_t);
  void (*v263)(char *, char *, uint64_t);
  void (*v264)(char *, char *, uint64_t);
  void (*v265)(char *, char *, uint64_t);
  void (*v266)(char *, char *, uint64_t);
  void (*v267)(char *, char *, uint64_t);
  void (*v268)(char *, char *, uint64_t);
  void (*v269)(char *, char *, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 16)
  {
    v6 = sub_23FB2C4B8();
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for Session.Event(0);
    v7(&a1[v8[5]], &a2[v8[5]], v6);
    v9 = v8[6];
    v10 = &a1[v9];
    v11 = &a2[v9];
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&a2[v9], 1, v6))
    {
      v12 = sub_23F6916B8(&qword_256EA2798);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v7(v10, v11, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v6);
    }
    v13 = v8[7];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v17 = sub_23FB2C998();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
        v257 = v7;
        v18 = type metadata accessor for SessionStart(0);
        v19 = *(int *)(v18 + 20);
        v20 = &v14[v19];
        v21 = &v15[v19];
        v22 = sub_23FB2C908();
        v23 = v21;
        v7 = v257;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v23, v22);
        v14[*(int *)(v18 + 24)] = v15[*(int *)(v18 + 24)];
        goto LABEL_109;
      case 1u:
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        v258 = v7;
        v24 = type metadata accessor for TextQuery(0);
        v25 = *(int *)(v24 + 24);
        v26 = &v14[v25];
        v27 = &v15[v25];
        v28 = sub_23FB2C764();
        v29 = v27;
        v7 = v258;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v29, v28);
        *(_OWORD *)&v14[*(int *)(v24 + 28)] = *(_OWORD *)&v15[*(int *)(v24 + 28)];
        goto LABEL_109;
      case 3u:
        v91 = type metadata accessor for RequestContent(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v265 = v7;
        if (EnumCaseMultiPayload == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
          {
            v184 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
          }
          v197 = v7;
          v198 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          v197(&v14[v198[5]], &v15[v198[5]], v6);
          v199 = v198[6];
          __dstg = &v14[v199];
          v200 = &v15[v199];
          v201 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v202 = sub_23FB2ED38();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 32))(__dstg, v200, v202);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dstg, v200, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
          }
          v203 = v198[7];
          v204 = &v14[v203];
          v205 = &v15[v203];
          __dsth = (_QWORD *)sub_23FB2C764();
          v235 = *(void (**)(char *, char *, _QWORD *))(*(__dsth - 1) + 32);
          v235(v204, v205, __dsth);
          v206 = v198[8];
          v207 = &v14[v206];
          v208 = &v15[v206];
          v209 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v207, v208, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
          }
          else
          {
            *(_OWORD *)v207 = *(_OWORD *)v208;
            v212 = type metadata accessor for RequestContent.TextContent(0);
            v235(&v207[*(int *)(v212 + 20)], &v208[*(int *)(v212 + 20)], __dsth);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
            goto LABEL_105;
          }
          *(_OWORD *)v14 = *(_OWORD *)v15;
          v93 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v94 = &v14[v93];
          v95 = &v15[v93];
          v96 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v94, v95, v96);
        }
        swift_storeEnumTagMultiPayload();
LABEL_105:
        v213 = (int *)type metadata accessor for Request(0);
        v14[v213[5]] = v15[v213[5]];
        v214 = v213[6];
        v215 = &v14[v214];
        v216 = &v15[v214];
        v215[16] = v216[16];
        *(_OWORD *)v215 = *(_OWORD *)v216;
        v217 = v213[7];
        v218 = &v14[v217];
        v219 = &v15[v217];
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v217], 1, v6))
        {
          v220 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
          v7 = v265;
        }
        else
        {
          v265(v218, v219, v6);
          v221 = (uint64_t)v218;
          v7 = v265;
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v221, 0, 1, v6);
        }
        v222 = v213[8];
        v223 = &v14[v222];
        v224 = &v15[v222];
        *(_OWORD *)v223 = *(_OWORD *)v224;
        *((_QWORD *)v223 + 2) = *((_QWORD *)v224 + 2);
        goto LABEL_109;
      case 5u:
        v30 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v14, v15, v30);
        v31 = (int *)type metadata accessor for Action(0);
        *(_OWORD *)&v14[v31[5]] = *(_OWORD *)&v15[v31[5]];
        *(_OWORD *)&v14[v31[6]] = *(_OWORD *)&v15[v31[6]];
        *(_OWORD *)&v14[v31[7]] = *(_OWORD *)&v15[v31[7]];
        v14[v31[8]] = v15[v31[8]];
        *(_QWORD *)&v14[v31[9]] = *(_QWORD *)&v15[v31[9]];
        *(_OWORD *)&v14[v31[10]] = *(_OWORD *)&v15[v31[10]];
        goto LABEL_109;
      case 6u:
        v32 = sub_23FB2C764();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v32))
        {
          v33 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v14, v15, v32);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v32);
        }
        v129 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(&v14[*(int *)(v129 + 20)], &v15[*(int *)(v129 + 20)], v32);
        goto LABEL_109;
      case 7u:
        v97 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v14, v15, v97);
        v98 = (int *)type metadata accessor for ClientAction(0);
        *(_OWORD *)&v14[v98[5]] = *(_OWORD *)&v15[v98[5]];
        *(_QWORD *)&v14[v98[6]] = *(_QWORD *)&v15[v98[6]];
        *(_OWORD *)&v14[v98[7]] = *(_OWORD *)&v15[v98[7]];
        *(_OWORD *)&v14[v98[8]] = *(_OWORD *)&v15[v98[8]];
        *(_QWORD *)&v14[v98[9]] = *(_QWORD *)&v15[v98[9]];
        goto LABEL_109;
      case 8u:
        v34 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v14, v15, v34);
        Step = type metadata accessor for QueryStep(0);
        *(_QWORD *)&v14[*(int *)(Step + 20)] = *(_QWORD *)&v15[*(int *)(Step + 20)];
        goto LABEL_109;
      case 9u:
        v36 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v14, v15, v36);
        v37 = type metadata accessor for VariableStep(0);
        *(_QWORD *)&v14[*(int *)(v37 + 20)] = *(_QWORD *)&v15[*(int *)(v37 + 20)];
        goto LABEL_109;
      case 0xDu:
        type metadata accessor for SessionError();
        v99 = (char *)&loc_23F74D354 + 4 * word_23FB5ABB4[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
        return result;
      case 0xFu:
        v100 = sub_23FB2C77C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v14, v15, v100);
        goto LABEL_109;
      case 0x10u:
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
        {
          v101 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          v7(v14, v15, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
        }
        v151 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v269 = v7;
        v7(&v14[v151[5]], &v15[v151[5]], v6);
        v152 = v151[6];
        __dstc = &v14[v152];
        v153 = &v15[v152];
        v154 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v155 = sub_23FB2ED38();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(__dstc, v153, v155);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dstc, v153, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
        }
        v156 = v151[7];
        v157 = &v14[v156];
        v158 = v151;
        v159 = &v15[v156];
        v160 = sub_23FB2C764();
        v239 = *(void (**)(char *, char *))(*(_QWORD *)(v160 - 8) + 32);
        __dstd = (void *)v160;
        v239(v157, v159);
        v161 = v158[8];
        v162 = &v14[v161];
        v163 = &v15[v161];
        v164 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v162 = *(_OWORD *)v163;
          v178 = type metadata accessor for RequestContent.TextContent(0);
          ((void (*)(char *, char *, void *))v239)(&v162[*(int *)(v178 + 20)], &v163[*(int *)(v178 + 20)], __dstd);
          swift_storeEnumTagMultiPayload();
        }
        v7 = v269;
        goto LABEL_109;
      case 0x11u:
        v259 = v7;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
        {
          v38 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          v7(v14, v15, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
        }
        v130 = (int *)type metadata accessor for ActionStepResult(0);
        *(_OWORD *)&v14[v130[5]] = *(_OWORD *)&v15[v130[5]];
        v131 = v130[6];
        v132 = &v14[v131];
        v133 = &v15[v131];
        v134 = sub_23FB2C80C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v132, v133, v134);
        v135 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        __dstb = &v132[v135];
        v136 = &v133[v135];
        v137 = sub_23FB2D0B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v136, 1, v137))
        {
          v138 = sub_23F6916B8(&qword_256EA2780);
          memcpy(__dstb, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(__dstb, v136, v137);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstb, 0, 1, v137);
        }
        *(_OWORD *)&v14[v130[7]] = *(_OWORD *)&v15[v130[7]];
        goto LABEL_86;
      case 0x12u:
        *(_QWORD *)v14 = *(_QWORD *)v15;
        v260 = v7;
        StepResults = type metadata accessor for QueryStepResults(0);
        v40 = *(int *)(StepResults + 20);
        v41 = &v14[v40];
        v42 = &v15[v40];
        v43 = sub_23FB2C764();
        v44 = v42;
        v7 = v260;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v44, v43);
        v260(&v14[*(int *)(StepResults + 24)], &v15[*(int *)(StepResults + 24)], v6);
        goto LABEL_109;
      case 0x13u:
        v102 = sub_23FB2C938();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v14, v15, v102);
        goto LABEL_109;
      case 0x14u:
        v103 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v14, v15, v103);
        v104 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(_OWORD *)&v14[v104[5]] = *(_OWORD *)&v15[v104[5]];
        *(_QWORD *)&v14[v104[6]] = *(_QWORD *)&v15[v104[6]];
        *(_QWORD *)&v14[v104[7]] = *(_QWORD *)&v15[v104[7]];
        *(_QWORD *)&v14[v104[8]] = *(_QWORD *)&v15[v104[8]];
        v14[v104[9]] = v15[v104[9]];
        v14[v104[10]] = v15[v104[10]];
        v14[v104[11]] = v15[v104[11]];
        goto LABEL_109;
      case 0x1Eu:
        v105 = sub_23FB2D004();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v14, v15, v105);
        goto LABEL_109;
      case 0x1Fu:
        v259 = v7;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
        {
          v106 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
        }
        else
        {
          v7(v14, v15, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
        }
        v165 = (int *)type metadata accessor for StatementResult(0);
        *(_OWORD *)&v14[v165[5]] = *(_OWORD *)&v15[v165[5]];
        v166 = v165[6];
        v167 = &v14[v166];
        v168 = &v15[v166];
        v169 = sub_23FB2D0DC();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
        v170 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        __dste = &v167[v170];
        v171 = &v168[v170];
        v172 = sub_23FB2D0B8();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v171, 1, v172))
        {
          v173 = sub_23F6916B8(&qword_256EA2780);
          memcpy(__dste, v171, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 32))(__dste, v171, v172);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dste, 0, 1, v172);
        }
        v179 = v165[7];
        v240 = &v15[v179];
        __dstm = &v14[v179];
        v180 = v165;
        v181 = sub_23FB2C764();
        v182 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 32);
        v182(__dstm, v240, v181);
        v182(&v14[v180[8]], &v15[v180[8]], v181);
        v182(&v14[v180[9]], &v15[v180[9]], v181);
        goto LABEL_86;
      case 0x20u:
        v266 = v7;
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v107 = type metadata accessor for ExternalAgentTextQuery(0);
        v108 = *(int *)(v107 + 20);
        v109 = &v14[v108];
        v110 = &v15[v108];
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v108], 1, v6))
        {
          v111 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
          v7 = v266;
        }
        else
        {
          v174 = v110;
          v7 = v266;
          v266(v109, v174, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v109, 0, 1, v6);
        }
        v175 = *(int *)(v107 + 24);
        v176 = &v14[v175];
        v177 = &v15[v175];
        *(_OWORD *)v176 = *(_OWORD *)v177;
        *((_QWORD *)v176 + 2) = *((_QWORD *)v177 + 2);
        goto LABEL_109;
      case 0x21u:
        v261 = v7;
        *(_QWORD *)v14 = *(_QWORD *)v15;
        v45 = type metadata accessor for ExternalAgentSpeechQuery(0);
        v46 = *(int *)(v45 + 20);
        v47 = &v14[v46];
        v48 = &v15[v46];
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v46], 1, v6))goto LABEL_19;
        goto LABEL_54;
      case 0x22u:
        v50 = type metadata accessor for RequestContent(0);
        v51 = swift_getEnumCaseMultiPayload();
        v261 = v7;
        if (v51 == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
          {
            v183 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
          }
          v185 = type metadata accessor for RequestContent.SystemPromptResolution(0);
          v7(&v14[*(int *)(v185 + 20)], &v15[*(int *)(v185 + 20)], v6);
          v186 = *(int *)(v185 + 24);
          v241 = &v14[v186];
          __dstf = (int *)v185;
          v187 = &v15[v186];
          v188 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v189 = sub_23FB2ED38();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 32))(v241, v187, v189);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v241, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
          }
          v190 = __dstf[7];
          v191 = &v14[v190];
          v192 = &v15[v190];
          v242 = (_QWORD *)sub_23FB2C764();
          v234 = *(void (**)(char *, char *))(*(v242 - 1) + 32);
          v234(v191, v192);
          v193 = __dstf[8];
          v194 = &v14[v193];
          v195 = &v15[v193];
          v196 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
          }
          else
          {
            *(_OWORD *)v194 = *(_OWORD *)v195;
            v210 = type metadata accessor for RequestContent.TextContent(0);
            ((void (*)(char *, char *, _QWORD *))v234)(&v194[*(int *)(v210 + 20)], &v195[*(int *)(v210 + 20)], v242);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (v51 != 1)
          {
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
            goto LABEL_101;
          }
          *(_OWORD *)v14 = *(_OWORD *)v15;
          v52 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v53 = &v14[v52];
          v54 = &v15[v52];
          v55 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
        }
        swift_storeEnumTagMultiPayload();
LABEL_101:
        v45 = type metadata accessor for ExternalAgentRequest(0);
        v211 = *(int *)(v45 + 20);
        v47 = &v14[v211];
        v48 = &v15[v211];
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v211], 1, v6))
        {
LABEL_19:
          v49 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
          v7 = v261;
        }
        else
        {
LABEL_54:
          v139 = v48;
          v7 = v261;
          v261(v47, v139, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v47, 0, 1, v6);
        }
        v140 = *(int *)(v45 + 24);
        v141 = &v14[v140];
        v142 = &v15[v140];
        *(_OWORD *)v141 = *(_OWORD *)v142;
        *((_QWORD *)v141 + 2) = *((_QWORD *)v142 + 2);
LABEL_109:
        swift_storeEnumTagMultiPayload();
LABEL_110:
        *(_OWORD *)&a1[v8[8]] = *(_OWORD *)&a2[v8[8]];
        *(_OWORD *)&a1[v8[9]] = *(_OWORD *)&a2[v8[9]];
        *(_OWORD *)&a1[v8[10]] = *(_OWORD *)&a2[v8[10]];
        *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
        v225 = v8[12];
        v226 = &a1[v225];
        v227 = &a2[v225];
        v228 = sub_23FB2C470();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v228 - 8) + 32))(v226, v227, v228);
        v229 = (int *)type metadata accessor for Timepoint();
        *(_QWORD *)&v226[v229[5]] = *(_QWORD *)&v227[v229[5]];
        *(_QWORD *)&v226[v229[6]] = *(_QWORD *)&v227[v229[6]];
        v7(&v226[v229[7]], &v227[v229[7]], v6);
        *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
        v230 = v8[14];
        v231 = &a1[v230];
        v232 = &a2[v230];
        *(_QWORD *)v231 = *(_QWORD *)v232;
        v231[8] = v232[8];
        *(_QWORD *)&a1[v8[15]] = *(_QWORD *)&a2[v8[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x23u:
        v112 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 32))(v14, v15, v112);
        v267 = v7;
        v113 = type metadata accessor for ExternalAgentOutcome(0);
        v114 = *(int *)(v113 + 20);
        v115 = &v14[v114];
        v116 = &v15[v114];
        v117 = sub_23FB2D0DC();
        v118 = v116;
        v7 = v267;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v115, v118, v117);
        *(_QWORD *)&v14[*(int *)(v113 + 24)] = *(_QWORD *)&v15[*(int *)(v113 + 24)];
        goto LABEL_109;
      case 0x25u:
        v56 = sub_23FB2E8D0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v14, v15, v56);
        v57 = type metadata accessor for ToolResolution(0);
        v58 = *(int *)(v57 + 20);
        v236 = &v15[v58];
        __dsti = &v14[v58];
        v59 = sub_23FB2C764();
        v262 = v7;
        v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(__dsti, v236, v59);
        v60(&v14[*(int *)(v57 + 24)], &v15[*(int *)(v57 + 24)], v59);
        v7 = v262;
        goto LABEL_109;
      case 0x26u:
        v259 = v7;
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v61 = (int *)type metadata accessor for UndoRedoRequest(0);
        v62 = v61[5];
        v63 = &v14[v62];
        v64 = &v15[v62];
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v62], 1, v6))
        {
          v65 = sub_23F6916B8(&qword_256EA2798);
          memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          v259(v63, v64, v6);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v63, 0, 1, v6);
        }
        v14[v61[6]] = v15[v61[6]];
        v143 = v61[7];
        v144 = &v14[v143];
        __dstl = v61;
        v145 = &v15[v143];
        v146 = sub_23FB2C764();
        v238 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 32);
        v238(v144, v145, v146);
        v147 = __dstl[8];
        v148 = &v14[v147];
        v149 = &v15[v147];
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v147], 1, v146))
        {
          v150 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
        }
        else
        {
          v238(v148, v149, v146);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v148, 0, 1, v146);
        }
        goto LABEL_86;
      case 0x27u:
        v259 = v7;
        v7(v14, v15, v6);
        v66 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        v14[v66[5]] = v15[v66[5]];
        v67 = v66[6];
        v68 = &v14[v67];
        __dstj = &v15[v67];
        v69 = sub_23FB2C764();
        v70 = __dstj;
        __dst = *(void (**)(char *, void *, uint64_t))(*(_QWORD *)(v69 - 8) + 32);
        __dst(v68, v70, v69);
        v71 = v66[7];
        v72 = &v14[v71];
        v73 = &v15[v71];
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v71], 1, v69))
        {
          v74 = sub_23F6916B8(&qword_256EA49D8);
          memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          __dst(v72, v73, v69);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v72, 0, 1, v69);
        }
LABEL_86:
        swift_storeEnumTagMultiPayload();
        v7 = v259;
        goto LABEL_110;
      case 0x28u:
        v75 = sub_23FB2ED38();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v14, v15, v75);
        v263 = v7;
        v76 = type metadata accessor for TypeConversionRequest(0);
        v77 = *(int *)(v76 + 20);
        v78 = &v14[v77];
        v79 = &v15[v77];
        v80 = sub_23FB2ED5C();
        v81 = v79;
        v7 = v263;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v81, v80);
        v82 = *(int *)(v76 + 24);
        v83 = &v14[v82];
        v84 = &v15[v82];
        v85 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
        goto LABEL_109;
      case 0x29u:
        v86 = sub_23FB2ED38();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v14, v15, v86);
        v87 = type metadata accessor for TypeConversionResult(0);
        v88 = *(int *)(v87 + 20);
        v237 = &v15[v88];
        __dstk = &v14[v88];
        v89 = sub_23FB2C764();
        v264 = v7;
        v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32);
        v90(__dstk, v237, v89);
        v90(&v14[*(int *)(v87 + 24)], &v15[*(int *)(v87 + 24)], v89);
        v7 = v264;
        goto LABEL_109;
      case 0x2Au:
        v268 = v7;
        *(_OWORD *)v14 = *(_OWORD *)v15;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
        DecorationResult = type metadata accessor for QueryDecorationResult(0);
        v120 = *(int *)(DecorationResult + 28);
        __dsta = &v14[v120];
        v121 = &v15[v120];
        v122 = sub_23FB2E354();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v121, 1, v122))
        {
          v123 = sub_23F6916B8(&qword_256EA71F8);
          memcpy(__dsta, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(__dsta, v121, v122);
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dsta, 0, 1, v122);
        }
        v7 = v268;
        *(_QWORD *)&v14[*(int *)(DecorationResult + 32)] = *(_QWORD *)&v15[*(int *)(DecorationResult + 32)];
        goto LABEL_109;
      case 0x2Cu:
        v124 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v14, v15, v124);
        DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        *(_OWORD *)&v14[*(int *)(DecorationPrePlannerResult + 20)] = *(_OWORD *)&v15[*(int *)(DecorationPrePlannerResult
                                                                                            + 20)];
        v126 = *(int *)(DecorationPrePlannerResult + 24);
        v127 = &v14[v126];
        v128 = &v15[v126];
        v127[8] = v128[8];
        *(_QWORD *)v127 = *(_QWORD *)v128;
        goto LABEL_109;
      default:
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        goto LABEL_110;
    }
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Step;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t StepResults;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  int EnumCaseMultiPayload;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t DecorationResult;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t DecorationPrePlannerResult;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  int *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  int *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  void (*v197)(char *, char *, uint64_t);
  int *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  int *v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *result;
  void (*v234)(char *, char *);
  void (*v235)(char *, char *, _QWORD *);
  char *v236;
  char *v237;
  void (*v238)(char *, char *, uint64_t);
  void (*v239)(char *, char *);
  char *v240;
  char *v241;
  _QWORD *v242;
  char *__dsti;
  char *__dstj;
  void (*__dst)(char *, void *, uint64_t);
  char *__dstk;
  char *__dsta;
  char *__dstb;
  int *__dstl;
  char *__dstc;
  void *__dstd;
  char *__dste;
  char *__dstm;
  int *__dstf;
  char *__dstg;
  _QWORD *__dsth;
  void (*v257)(char *, char *, uint64_t);
  void (*v258)(char *, char *, uint64_t);
  void (*v259)(char *, char *, uint64_t);
  void (*v260)(char *, char *, uint64_t);
  void (*v261)(char *, char *, uint64_t);
  void (*v262)(char *, char *, uint64_t);
  void (*v263)(char *, char *, uint64_t);
  void (*v264)(char *, char *, uint64_t);
  void (*v265)(char *, char *, uint64_t);
  void (*v266)(char *, char *, uint64_t);
  void (*v267)(char *, char *, uint64_t);
  void (*v268)(char *, char *, uint64_t);
  void (*v269)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for ODPEventPayload);
    if (swift_getEnumCaseMultiPayload() == 16)
    {
      v6 = sub_23FB2C4B8();
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v8 = (int *)type metadata accessor for Session.Event(0);
      v7(&a1[v8[5]], &a2[v8[5]], v6);
      v9 = v8[6];
      v10 = &a1[v9];
      v11 = &a2[v9];
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&a2[v9], 1, v6))
      {
        v12 = sub_23F6916B8(&qword_256EA2798);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v7(v10, v11, v6);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v6);
      }
      v13 = v8[7];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = type metadata accessor for Session.Event.Payload(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v17 = sub_23FB2C998();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
          v257 = v7;
          v18 = type metadata accessor for SessionStart(0);
          v19 = *(int *)(v18 + 20);
          v20 = &v14[v19];
          v21 = &v15[v19];
          v22 = sub_23FB2C908();
          v23 = v21;
          v7 = v257;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v23, v22);
          v14[*(int *)(v18 + 24)] = v15[*(int *)(v18 + 24)];
          goto LABEL_110;
        case 1u:
          *(_OWORD *)v14 = *(_OWORD *)v15;
          v14[16] = v15[16];
          v258 = v7;
          v24 = type metadata accessor for TextQuery(0);
          v25 = *(int *)(v24 + 24);
          v26 = &v14[v25];
          v27 = &v15[v25];
          v28 = sub_23FB2C764();
          v29 = v27;
          v7 = v258;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v29, v28);
          *(_OWORD *)&v14[*(int *)(v24 + 28)] = *(_OWORD *)&v15[*(int *)(v24 + 28)];
          goto LABEL_110;
        case 3u:
          v91 = type metadata accessor for RequestContent(0);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          v265 = v7;
          if (EnumCaseMultiPayload == 3)
          {
            if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
            {
              v184 = sub_23F6916B8(&qword_256EA2798);
              memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
            }
            else
            {
              v7(v14, v15, v6);
              _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
            }
            v197 = v7;
            v198 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
            v197(&v14[v198[5]], &v15[v198[5]], v6);
            v199 = v198[6];
            __dstg = &v14[v199];
            v200 = &v15[v199];
            v201 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              v202 = sub_23FB2ED38();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 32))(__dstg, v200, v202);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(__dstg, v200, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
            }
            v203 = v198[7];
            v204 = &v14[v203];
            v205 = &v15[v203];
            __dsth = (_QWORD *)sub_23FB2C764();
            v235 = *(void (**)(char *, char *, _QWORD *))(*(__dsth - 1) + 32);
            v235(v204, v205, __dsth);
            v206 = v198[8];
            v207 = &v14[v206];
            v208 = &v15[v206];
            v209 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v207, v208, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
            }
            else
            {
              *(_OWORD *)v207 = *(_OWORD *)v208;
              v212 = type metadata accessor for RequestContent.TextContent(0);
              v235(&v207[*(int *)(v212 + 20)], &v208[*(int *)(v212 + 20)], __dsth);
              swift_storeEnumTagMultiPayload();
            }
          }
          else
          {
            if (EnumCaseMultiPayload != 1)
            {
              memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
              goto LABEL_106;
            }
            *(_OWORD *)v14 = *(_OWORD *)v15;
            v93 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v94 = &v14[v93];
            v95 = &v15[v93];
            v96 = sub_23FB2C764();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v94, v95, v96);
          }
          swift_storeEnumTagMultiPayload();
LABEL_106:
          v213 = (int *)type metadata accessor for Request(0);
          v14[v213[5]] = v15[v213[5]];
          v214 = v213[6];
          v215 = &v14[v214];
          v216 = &v15[v214];
          v215[16] = v216[16];
          *(_OWORD *)v215 = *(_OWORD *)v216;
          v217 = v213[7];
          v218 = &v14[v217];
          v219 = &v15[v217];
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v217], 1, v6))
          {
            v220 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
            v7 = v265;
          }
          else
          {
            v265(v218, v219, v6);
            v221 = (uint64_t)v218;
            v7 = v265;
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v221, 0, 1, v6);
          }
          v222 = v213[8];
          v223 = &v14[v222];
          v224 = &v15[v222];
          *(_OWORD *)v223 = *(_OWORD *)v224;
          *((_QWORD *)v223 + 2) = *((_QWORD *)v224 + 2);
          goto LABEL_110;
        case 5u:
          v30 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v14, v15, v30);
          v31 = (int *)type metadata accessor for Action(0);
          *(_OWORD *)&v14[v31[5]] = *(_OWORD *)&v15[v31[5]];
          *(_OWORD *)&v14[v31[6]] = *(_OWORD *)&v15[v31[6]];
          *(_OWORD *)&v14[v31[7]] = *(_OWORD *)&v15[v31[7]];
          v14[v31[8]] = v15[v31[8]];
          *(_QWORD *)&v14[v31[9]] = *(_QWORD *)&v15[v31[9]];
          *(_OWORD *)&v14[v31[10]] = *(_OWORD *)&v15[v31[10]];
          goto LABEL_110;
        case 6u:
          v32 = sub_23FB2C764();
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v32))
          {
            v33 = sub_23F6916B8(&qword_256EA49D8);
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v14, v15, v32);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v32);
          }
          v129 = type metadata accessor for ActionCancellation(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(&v14[*(int *)(v129 + 20)], &v15[*(int *)(v129 + 20)], v32);
          goto LABEL_110;
        case 7u:
          v97 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v14, v15, v97);
          v98 = (int *)type metadata accessor for ClientAction(0);
          *(_OWORD *)&v14[v98[5]] = *(_OWORD *)&v15[v98[5]];
          *(_QWORD *)&v14[v98[6]] = *(_QWORD *)&v15[v98[6]];
          *(_OWORD *)&v14[v98[7]] = *(_OWORD *)&v15[v98[7]];
          *(_OWORD *)&v14[v98[8]] = *(_OWORD *)&v15[v98[8]];
          *(_QWORD *)&v14[v98[9]] = *(_QWORD *)&v15[v98[9]];
          goto LABEL_110;
        case 8u:
          v34 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v14, v15, v34);
          Step = type metadata accessor for QueryStep(0);
          *(_QWORD *)&v14[*(int *)(Step + 20)] = *(_QWORD *)&v15[*(int *)(Step + 20)];
          goto LABEL_110;
        case 9u:
          v36 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v14, v15, v36);
          v37 = type metadata accessor for VariableStep(0);
          *(_QWORD *)&v14[*(int *)(v37 + 20)] = *(_QWORD *)&v15[*(int *)(v37 + 20)];
          goto LABEL_110;
        case 0xDu:
          type metadata accessor for SessionError();
          v99 = (char *)&loc_23F74ED60 + 4 * word_23FB5AC16[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
          return result;
        case 0xFu:
          v100 = sub_23FB2C77C();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v14, v15, v100);
          goto LABEL_110;
        case 0x10u:
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
          {
            v101 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
          }
          v151 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          v269 = v7;
          v7(&v14[v151[5]], &v15[v151[5]], v6);
          v152 = v151[6];
          __dstc = &v14[v152];
          v153 = &v15[v152];
          v154 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v155 = sub_23FB2ED38();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(__dstc, v153, v155);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dstc, v153, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
          }
          v156 = v151[7];
          v157 = &v14[v156];
          v158 = v151;
          v159 = &v15[v156];
          v160 = sub_23FB2C764();
          v239 = *(void (**)(char *, char *))(*(_QWORD *)(v160 - 8) + 32);
          __dstd = (void *)v160;
          v239(v157, v159);
          v161 = v158[8];
          v162 = &v14[v161];
          v163 = &v15[v161];
          v164 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          }
          else
          {
            *(_OWORD *)v162 = *(_OWORD *)v163;
            v178 = type metadata accessor for RequestContent.TextContent(0);
            ((void (*)(char *, char *, void *))v239)(&v162[*(int *)(v178 + 20)], &v163[*(int *)(v178 + 20)], __dstd);
            swift_storeEnumTagMultiPayload();
          }
          v7 = v269;
          goto LABEL_110;
        case 0x11u:
          v259 = v7;
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
          {
            v38 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
          }
          v130 = (int *)type metadata accessor for ActionStepResult(0);
          *(_OWORD *)&v14[v130[5]] = *(_OWORD *)&v15[v130[5]];
          v131 = v130[6];
          v132 = &v14[v131];
          v133 = &v15[v131];
          v134 = sub_23FB2C80C();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v132, v133, v134);
          v135 = *(int *)(type metadata accessor for ActionResult(0) + 20);
          __dstb = &v132[v135];
          v136 = &v133[v135];
          v137 = sub_23FB2D0B8();
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v136, 1, v137))
          {
            v138 = sub_23F6916B8(&qword_256EA2780);
            memcpy(__dstb, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(__dstb, v136, v137);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dstb, 0, 1, v137);
          }
          *(_OWORD *)&v14[v130[7]] = *(_OWORD *)&v15[v130[7]];
          goto LABEL_87;
        case 0x12u:
          *(_QWORD *)v14 = *(_QWORD *)v15;
          v260 = v7;
          StepResults = type metadata accessor for QueryStepResults(0);
          v40 = *(int *)(StepResults + 20);
          v41 = &v14[v40];
          v42 = &v15[v40];
          v43 = sub_23FB2C764();
          v44 = v42;
          v7 = v260;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v44, v43);
          v260(&v14[*(int *)(StepResults + 24)], &v15[*(int *)(StepResults + 24)], v6);
          goto LABEL_110;
        case 0x13u:
          v102 = sub_23FB2C938();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v14, v15, v102);
          goto LABEL_110;
        case 0x14u:
          v103 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v14, v15, v103);
          v104 = (int *)type metadata accessor for ActionResolverRequest(0);
          *(_OWORD *)&v14[v104[5]] = *(_OWORD *)&v15[v104[5]];
          *(_QWORD *)&v14[v104[6]] = *(_QWORD *)&v15[v104[6]];
          *(_QWORD *)&v14[v104[7]] = *(_QWORD *)&v15[v104[7]];
          *(_QWORD *)&v14[v104[8]] = *(_QWORD *)&v15[v104[8]];
          v14[v104[9]] = v15[v104[9]];
          v14[v104[10]] = v15[v104[10]];
          v14[v104[11]] = v15[v104[11]];
          goto LABEL_110;
        case 0x1Eu:
          v105 = sub_23FB2D004();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v14, v15, v105);
          goto LABEL_110;
        case 0x1Fu:
          v259 = v7;
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
          {
            v106 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
          }
          v165 = (int *)type metadata accessor for StatementResult(0);
          *(_OWORD *)&v14[v165[5]] = *(_OWORD *)&v15[v165[5]];
          v166 = v165[6];
          v167 = &v14[v166];
          v168 = &v15[v166];
          v169 = sub_23FB2D0DC();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
          v170 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
          __dste = &v167[v170];
          v171 = &v168[v170];
          v172 = sub_23FB2D0B8();
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v171, 1, v172))
          {
            v173 = sub_23F6916B8(&qword_256EA2780);
            memcpy(__dste, v171, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 32))(__dste, v171, v172);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dste, 0, 1, v172);
          }
          v179 = v165[7];
          v240 = &v15[v179];
          __dstm = &v14[v179];
          v180 = v165;
          v181 = sub_23FB2C764();
          v182 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 32);
          v182(__dstm, v240, v181);
          v182(&v14[v180[8]], &v15[v180[8]], v181);
          v182(&v14[v180[9]], &v15[v180[9]], v181);
          goto LABEL_87;
        case 0x20u:
          v266 = v7;
          *(_OWORD *)v14 = *(_OWORD *)v15;
          v107 = type metadata accessor for ExternalAgentTextQuery(0);
          v108 = *(int *)(v107 + 20);
          v109 = &v14[v108];
          v110 = &v15[v108];
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v108], 1, v6))
          {
            v111 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
            v7 = v266;
          }
          else
          {
            v174 = v110;
            v7 = v266;
            v266(v109, v174, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v109, 0, 1, v6);
          }
          v175 = *(int *)(v107 + 24);
          v176 = &v14[v175];
          v177 = &v15[v175];
          *(_OWORD *)v176 = *(_OWORD *)v177;
          *((_QWORD *)v176 + 2) = *((_QWORD *)v177 + 2);
          goto LABEL_110;
        case 0x21u:
          v261 = v7;
          *(_QWORD *)v14 = *(_QWORD *)v15;
          v45 = type metadata accessor for ExternalAgentSpeechQuery(0);
          v46 = *(int *)(v45 + 20);
          v47 = &v14[v46];
          v48 = &v15[v46];
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v46], 1, v6))goto LABEL_20;
          goto LABEL_55;
        case 0x22u:
          v50 = type metadata accessor for RequestContent(0);
          v51 = swift_getEnumCaseMultiPayload();
          v261 = v7;
          if (v51 == 3)
          {
            if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v6))
            {
              v183 = sub_23F6916B8(&qword_256EA2798);
              memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
            }
            else
            {
              v7(v14, v15, v6);
              _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v6);
            }
            v185 = type metadata accessor for RequestContent.SystemPromptResolution(0);
            v7(&v14[*(int *)(v185 + 20)], &v15[*(int *)(v185 + 20)], v6);
            v186 = *(int *)(v185 + 24);
            v241 = &v14[v186];
            __dstf = (int *)v185;
            v187 = &v15[v186];
            v188 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              v189 = sub_23FB2ED38();
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 32))(v241, v187, v189);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v241, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
            }
            v190 = __dstf[7];
            v191 = &v14[v190];
            v192 = &v15[v190];
            v242 = (_QWORD *)sub_23FB2C764();
            v234 = *(void (**)(char *, char *))(*(v242 - 1) + 32);
            v234(v191, v192);
            v193 = __dstf[8];
            v194 = &v14[v193];
            v195 = &v15[v193];
            v196 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
            }
            else
            {
              *(_OWORD *)v194 = *(_OWORD *)v195;
              v210 = type metadata accessor for RequestContent.TextContent(0);
              ((void (*)(char *, char *, _QWORD *))v234)(&v194[*(int *)(v210 + 20)], &v195[*(int *)(v210 + 20)], v242);
              swift_storeEnumTagMultiPayload();
            }
          }
          else
          {
            if (v51 != 1)
            {
              memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
              goto LABEL_102;
            }
            *(_OWORD *)v14 = *(_OWORD *)v15;
            v52 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v53 = &v14[v52];
            v54 = &v15[v52];
            v55 = sub_23FB2C764();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
          }
          swift_storeEnumTagMultiPayload();
LABEL_102:
          v45 = type metadata accessor for ExternalAgentRequest(0);
          v211 = *(int *)(v45 + 20);
          v47 = &v14[v211];
          v48 = &v15[v211];
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v211], 1, v6))
          {
LABEL_20:
            v49 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
            v7 = v261;
          }
          else
          {
LABEL_55:
            v139 = v48;
            v7 = v261;
            v261(v47, v139, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v47, 0, 1, v6);
          }
          v140 = *(int *)(v45 + 24);
          v141 = &v14[v140];
          v142 = &v15[v140];
          *(_OWORD *)v141 = *(_OWORD *)v142;
          *((_QWORD *)v141 + 2) = *((_QWORD *)v142 + 2);
LABEL_110:
          swift_storeEnumTagMultiPayload();
LABEL_111:
          *(_OWORD *)&a1[v8[8]] = *(_OWORD *)&a2[v8[8]];
          *(_OWORD *)&a1[v8[9]] = *(_OWORD *)&a2[v8[9]];
          *(_OWORD *)&a1[v8[10]] = *(_OWORD *)&a2[v8[10]];
          *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
          v225 = v8[12];
          v226 = &a1[v225];
          v227 = &a2[v225];
          v228 = sub_23FB2C470();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v228 - 8) + 32))(v226, v227, v228);
          v229 = (int *)type metadata accessor for Timepoint();
          *(_QWORD *)&v226[v229[5]] = *(_QWORD *)&v227[v229[5]];
          *(_QWORD *)&v226[v229[6]] = *(_QWORD *)&v227[v229[6]];
          v7(&v226[v229[7]], &v227[v229[7]], v6);
          *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
          v230 = v8[14];
          v231 = &a1[v230];
          v232 = &a2[v230];
          *(_QWORD *)v231 = *(_QWORD *)v232;
          v231[8] = v232[8];
          *(_QWORD *)&a1[v8[15]] = *(_QWORD *)&a2[v8[15]];
          swift_storeEnumTagMultiPayload();
          break;
        case 0x23u:
          v112 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 32))(v14, v15, v112);
          v267 = v7;
          v113 = type metadata accessor for ExternalAgentOutcome(0);
          v114 = *(int *)(v113 + 20);
          v115 = &v14[v114];
          v116 = &v15[v114];
          v117 = sub_23FB2D0DC();
          v118 = v116;
          v7 = v267;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v115, v118, v117);
          *(_QWORD *)&v14[*(int *)(v113 + 24)] = *(_QWORD *)&v15[*(int *)(v113 + 24)];
          goto LABEL_110;
        case 0x25u:
          v56 = sub_23FB2E8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v14, v15, v56);
          v57 = type metadata accessor for ToolResolution(0);
          v58 = *(int *)(v57 + 20);
          v236 = &v15[v58];
          __dsti = &v14[v58];
          v59 = sub_23FB2C764();
          v262 = v7;
          v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
          v60(__dsti, v236, v59);
          v60(&v14[*(int *)(v57 + 24)], &v15[*(int *)(v57 + 24)], v59);
          v7 = v262;
          goto LABEL_110;
        case 0x26u:
          v259 = v7;
          *(_OWORD *)v14 = *(_OWORD *)v15;
          v61 = (int *)type metadata accessor for UndoRedoRequest(0);
          v62 = v61[5];
          v63 = &v14[v62];
          v64 = &v15[v62];
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v62], 1, v6))
          {
            v65 = sub_23F6916B8(&qword_256EA2798);
            memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          }
          else
          {
            v259(v63, v64, v6);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v63, 0, 1, v6);
          }
          v14[v61[6]] = v15[v61[6]];
          v143 = v61[7];
          v144 = &v14[v143];
          __dstl = v61;
          v145 = &v15[v143];
          v146 = sub_23FB2C764();
          v238 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 32);
          v238(v144, v145, v146);
          v147 = __dstl[8];
          v148 = &v14[v147];
          v149 = &v15[v147];
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v147], 1, v146))
          {
            v150 = sub_23F6916B8(&qword_256EA49D8);
            memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
          }
          else
          {
            v238(v148, v149, v146);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v148, 0, 1, v146);
          }
          goto LABEL_87;
        case 0x27u:
          v259 = v7;
          v7(v14, v15, v6);
          v66 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
          v14[v66[5]] = v15[v66[5]];
          v67 = v66[6];
          v68 = &v14[v67];
          __dstj = &v15[v67];
          v69 = sub_23FB2C764();
          v70 = __dstj;
          __dst = *(void (**)(char *, void *, uint64_t))(*(_QWORD *)(v69 - 8) + 32);
          __dst(v68, v70, v69);
          v71 = v66[7];
          v72 = &v14[v71];
          v73 = &v15[v71];
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)&v15[v71], 1, v69))
          {
            v74 = sub_23F6916B8(&qword_256EA49D8);
            memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
          }
          else
          {
            __dst(v72, v73, v69);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v72, 0, 1, v69);
          }
LABEL_87:
          swift_storeEnumTagMultiPayload();
          v7 = v259;
          goto LABEL_111;
        case 0x28u:
          v75 = sub_23FB2ED38();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v14, v15, v75);
          v263 = v7;
          v76 = type metadata accessor for TypeConversionRequest(0);
          v77 = *(int *)(v76 + 20);
          v78 = &v14[v77];
          v79 = &v15[v77];
          v80 = sub_23FB2ED5C();
          v81 = v79;
          v7 = v263;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v81, v80);
          v82 = *(int *)(v76 + 24);
          v83 = &v14[v82];
          v84 = &v15[v82];
          v85 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
          goto LABEL_110;
        case 0x29u:
          v86 = sub_23FB2ED38();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v14, v15, v86);
          v87 = type metadata accessor for TypeConversionResult(0);
          v88 = *(int *)(v87 + 20);
          v237 = &v15[v88];
          __dstk = &v14[v88];
          v89 = sub_23FB2C764();
          v264 = v7;
          v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32);
          v90(__dstk, v237, v89);
          v90(&v14[*(int *)(v87 + 24)], &v15[*(int *)(v87 + 24)], v89);
          v7 = v264;
          goto LABEL_110;
        case 0x2Au:
          v268 = v7;
          *(_OWORD *)v14 = *(_OWORD *)v15;
          *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
          DecorationResult = type metadata accessor for QueryDecorationResult(0);
          v120 = *(int *)(DecorationResult + 28);
          __dsta = &v14[v120];
          v121 = &v15[v120];
          v122 = sub_23FB2E354();
          if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v121, 1, v122))
          {
            v123 = sub_23F6916B8(&qword_256EA71F8);
            memcpy(__dsta, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(__dsta, v121, v122);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)__dsta, 0, 1, v122);
          }
          v7 = v268;
          *(_QWORD *)&v14[*(int *)(DecorationResult + 32)] = *(_QWORD *)&v15[*(int *)(DecorationResult + 32)];
          goto LABEL_110;
        case 0x2Cu:
          v124 = sub_23FB2C764();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v14, v15, v124);
          DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
          *(_OWORD *)&v14[*(int *)(DecorationPrePlannerResult + 20)] = *(_OWORD *)&v15[*(int *)(DecorationPrePlannerResult
                                                                                              + 20)];
          v126 = *(int *)(DecorationPrePlannerResult + 24);
          v127 = &v14[v126];
          v128 = &v15[v126];
          v127[8] = v128[8];
          *(_QWORD *)v127 = *(_QWORD *)v128;
          goto LABEL_110;
        default:
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
          goto LABEL_111;
      }
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23F74FE5C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Session.Event(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_23F74FF20()
{
  return type metadata accessor for ODPEvent(0);
}

uint64_t type metadata accessor for ODPEvent(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA7858);
}

uint64_t sub_23F74FF3C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ODPEventPayload(319);
  if (v1 <= 0x3F)
  {
    result = sub_23FB2C470();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ODPEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ODPEvent.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t destroy for ODPEventOverrides()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ODPEventOverrides(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ODPEventOverrides(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ODPEventOverrides(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for ODPEventOverrides(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ODPEventOverrides(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ODPEventOverrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ODPEventOverrides()
{
  return &type metadata for ODPEventOverrides;
}

_OWORD *sub_23F750278()
{
  __int128 *v0;
  uint64_t v1;
  _OWORD *result;

  result = sub_23F744B8C(v0, (_OWORD *)(v1 - 96));
  *(_QWORD *)(v1 - 112) = 0;
  *(_QWORD *)(v1 - 104) = 0xE000000000000000;
  return result;
}

uint64_t sub_23F75029C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7502A4()
{
  __int128 *v0;
  uint64_t v1;

  sub_23F744B8C(v0, (_OWORD *)(v1 - 96));
  *(_QWORD *)(v1 - 112) = 0;
  *(_QWORD *)(v1 - 104) = 0xE000000000000000;
  return sub_23FB2F7AC();
}

void sub_23F7502CC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1;
  *(_QWORD *)(v2 - 88) = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_23F7502DC()
{
  return sub_23FB2C470();
}

uint64_t sub_23F7502E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
  return sub_23FB2F7AC();
}

uint64_t sub_23F7502F8()
{
  return sub_23FB2F254();
}

unint64_t sub_23F750304()
{
  return 0xD000000000000013;
}

uint64_t sub_23F750318()
{
  return sub_23FB2F7AC();
}

uint64_t sub_23F750320()
{
  return sub_23FB2F254();
}

uint64_t Optional.if_unwrap(file:line:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a4;
  v22 = a3;
  v12 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v16, v15);
  v17 = *(_QWORD *)(a6 + 16);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v14, 1, v17) != 1)return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a7, v14, v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a6);
  sub_23F6BD090();
  swift_allocError();
  *v18 = a1;
  v18[1] = a2;
  v19 = v23;
  v18[2] = v22;
  v18[3] = v19;
  v18[4] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

void __swiftcall UnwrappedNilError.init(file:line:function:)(IntelligenceFlowPlannerSupport::UnwrappedNilError *__return_ptr retstr, Swift::String file, Swift::Int line, Swift::String function)
{
  retstr->file = file;
  retstr->line = line;
  retstr->function = function;
}

uint64_t Optional.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 - 8);
  v6[9] = sub_23F750AE4();
  v8 = *(_QWORD *)(a4 + 16);
  v6[10] = v8;
  v6[11] = *(_QWORD *)(v8 - 8);
  v6[12] = sub_23F750AE4();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7504D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  sub_23F750B14();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v0, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v2 + 16);
    sub_23F750B40(*(_QWORD *)(v2 + 64));
    sub_23F750B84(v3, 1);
    sub_23F6F5268();
    sub_23F6F52B0();
    v4 = (uint64_t (*)(void))sub_23F750B9C();
    return v4();
  }
  else
  {
    sub_23F750B4C();
    v6 = (_QWORD *)sub_23F750B2C();
    v7 = sub_23F750B68(v6);
    return v8(v7);
  }
}

uint64_t sub_23F750580()
{
  sub_23F750AF4();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7505BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(v0 + 16);
  sub_23F750B40(*(_QWORD *)(v0 + 88));
  sub_23F750B84(v1, 0);
  sub_23F6F52B0();
  sub_23F6F5268();
  v2 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F750B60(v2);
}

uint64_t Optional.asyncFlatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 - 8);
  v6[9] = sub_23F750AE4();
  v8 = *(_QWORD *)(a4 + 16);
  v6[10] = v8;
  v6[11] = *(_QWORD *)(v8 - 8);
  v6[12] = sub_23F750AE4();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F750670()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);

  sub_23F750B14();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v0, 1, v1) == 1)
  {
    v3 = v2[6];
    v4 = v2[2];
    (*(void (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[9], v2[5]);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v4, 1, 1, v3);
    sub_23F750B90();
    sub_23F6F52B0();
    v5 = (uint64_t (*)(void))sub_23F750B9C();
    return v5();
  }
  else
  {
    sub_23F750B4C();
    v7 = (_QWORD *)sub_23F750B2C();
    v8 = sub_23F750B68(v7);
    return v9(v8);
  }
}

uint64_t sub_23F750718()
{
  sub_23F750AF4();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F750754()
{
  _QWORD *v0;
  uint64_t (*v1)(void);

  (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
  sub_23F750B90();
  sub_23F6F52B0();
  v1 = (uint64_t (*)(void))sub_23F750B9C();
  return v1();
}

uint64_t sub_23F750794()
{
  uint64_t v0;

  sub_23F750B40(*(_QWORD *)(v0 + 88));
  sub_23F6F52B0();
  sub_23F6F5268();
  return sub_23F750B60(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t UnwrappedNilError.description.getter()
{
  sub_23FB2F7AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  sub_23FB2F254();
  sub_23FB2FB48();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  sub_23FB2F254();
  swift_bridgeObjectRetain();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  sub_23FB2F254();
  return 0xD000000000000012;
}

uint64_t destroy for UnwrappedNilError()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnwrappedNilError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UnwrappedNilError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for UnwrappedNilError(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UnwrappedNilError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnwrappedNilError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnwrappedNilError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnwrappedNilError()
{
  return &type metadata for UnwrappedNilError;
}

uint64_t sub_23F750AE4()
{
  return swift_task_alloc();
}

uint64_t sub_23F750AF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23F750B14()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[8] + 16))(v0[9], v0[7], v0[5]);
}

uint64_t sub_23F750B2C()
{
  return swift_task_alloc();
}

uint64_t sub_23F750B40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_23F750B4C()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[11] + 32))(v0[12], v0[9], v0[10]);
}

uint64_t sub_23F750B60(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F750B68(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_23F750B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, 1, v2);
}

uint64_t sub_23F750B90()
{
  return swift_task_dealloc();
}

uint64_t sub_23F750B9C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t static Parser.parse(string:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t i;
  uint64_t v35;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  __int128 v42;
  unsigned __int8 v43;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  unsigned __int8 v49;
  uint64_t v50[4];
  __int128 v51;
  __int128 v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;

  v45 = a3;
  v6 = sub_23FB2E7F8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23FB2E3B4();
  sub_23F756690();
  v10 = sub_23FB2E7E0();
  v11 = sub_23FB2F5E4();
  v12 = os_log_type_enabled(v10, v11);
  v46 = a2;
  if (v12)
  {
    v55 = v6;
    v13 = (uint8_t *)swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v48 = sub_23F69334C(a1, v46, v50);
    sub_23FB2F680();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23F68F000, v10, v11, "Parsing plan: %s", v13, 0xCu);
    swift_arrayDestroy();
    sub_23F693DD0();
  }

  swift_bridgeObjectRelease_n();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v14 = HIBYTE(a2) & 0xF;
  v50[0] = a1;
  v50[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  v50[2] = 0;
  v50[3] = v14;
  v51 = 0u;
  v52 = 0u;
  v53 = -1;
  v54 = 0;
  sub_23F756690();
  while (1)
  {
    sub_23F756220();
    v16 = *((_QWORD *)&v48 + 1);
    v15 = v48;
    LOBYTE(v17) = v49;
    if (v49)
      break;
    if ((v48 & 0x8000000000000000) != 0)
    {
      v52 = v48;
      v53 = 0;
      sub_23F73FBD4(v48, *((uint64_t *)&v48 + 1), 0);
      LOBYTE(v17) = 0;
LABEL_12:
      v55 = MEMORY[0x24BEE4AF8];
      goto LABEL_14;
    }
  }
  if (v49 != 255)
  {
    v52 = v48;
    v53 = v49;
    goto LABEL_12;
  }
  v55 = MEMORY[0x24BEE4AF8];
LABEL_13:
  sub_23F756220();
  sub_23F7562E0();
  if (v18)
  {
    *v45 = v55;
    swift_bridgeObjectRelease();
    sub_23F693DFC();
    sub_23F756390(v15, v16);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  while (1)
  {
LABEL_14:
    if ((_BYTE)v17)
    {
      v19 = v15;
      v20 = v16;
      v21 = v15;
      v22 = v16;
      v23 = v17;
LABEL_16:
      sub_23F751328(v21, v22, v23);
      v24 = sub_23F73FBF0(v19, v20, v17);
      v26 = v19;
      v27 = v20;
      v28 = v17;
    }
    else
    {
      v23 = 0;
      v20 = v16;
      v19 = v15;
      while (1)
      {
        v30 = v54;
        sub_23F751328(v15, v16, v23);
        if (v19 < v30)
        {
          v28 = 0;
          LOBYTE(v17) = 0;
          v27 = v20;
          v26 = v19;
          goto LABEL_31;
        }
        sub_23F751314(v19, v20, 0);
        sub_23F756220();
        v20 = *((_QWORD *)&v48 + 1);
        v19 = v48;
        v17 = v49;
        v52 = v48;
        v53 = v49;
        if (v49 == 255)
          break;
        sub_23F73FBD4(v48, *((uint64_t *)&v48 + 1), v49);
        v16 = 0;
        v15 = 0;
        v21 = 0;
        v22 = 0;
        v23 = -1;
        if (v17)
          goto LABEL_16;
      }
      sub_23F756220();
      v27 = *((_QWORD *)&v48 + 1);
      v26 = v48;
      LOBYTE(v17) = v49;
      v52 = v48;
      v53 = v49;
      if (v49 == 255)
        goto LABEL_32;
      v24 = sub_23F73FBD4(v48, *((uint64_t *)&v48 + 1), v49);
      v28 = -1;
    }
    if (v17 != 6)
      goto LABEL_31;
    if (v26 ^ 0x20 | v27)
    {
      if (v26 ^ 0x22 | v27)
      {
        LOBYTE(v17) = 6;
LABEL_31:
        sub_23F751328(v19, v20, v28);
        sub_23F751314(v26, v27, v17);
LABEL_32:
        v3 = v47;
        v32 = sub_23F7519E4();
        v47 = v3;
        if (v3)
          goto LABEL_60;
        v31 = v32;
        goto LABEL_34;
      }
      sub_23F756324(v24, v25, v28);
      v29 = (unint64_t)sub_23F751620();
    }
    else
    {
      sub_23F756324(v24, v25, v28);
      v29 = sub_23F75191C();
    }
    v47 = v3;
    if (v3)
      break;
    v31 = v29;
    sub_23F756218(v26, v27);
LABEL_34:
    v33 = v53;
    v35 = *((_QWORD *)&v52 + 1);
    for (i = v52; ; i = 0)
    {
      v15 = i;
      v16 = v35;
      LOBYTE(v17) = v33;
      if (v33 == 0xFF)
      {
        sub_23F756220();
        sub_23F7562E0();
        if (v18)
          goto LABEL_43;
        sub_23F756558();
      }
      if (v33)
      {
        sub_23F751328(i, v35, v33);
        sub_23F756568();
        goto LABEL_43;
      }
      if (i < v54)
        break;
      v52 = 0uLL;
      v53 = -1;
      sub_23F751328(i, v35, v33);
      sub_23F756588();
      v35 = 0;
      v33 = -1;
    }
    sub_23F756444(i);
    LOBYTE(v17) = 0;
LABEL_43:
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23F753B78();
      v55 = isUniquelyReferenced_nonNull_native;
    }
    v38 = *(_QWORD *)(v55 + 16);
    if (v38 >= *(_QWORD *)(v55 + 24) >> 1)
    {
      sub_23F753B78();
      v55 = isUniquelyReferenced_nonNull_native;
    }
    v39 = v55 + 8 * v38;
    *(_QWORD *)(v55 + 16) = v38 + 1;
    *(_QWORD *)(v39 + 32) = v31;
    v40 = v17;
    if ((_BYTE)v17 != 0xFF)
      goto LABEL_53;
    while (1)
    {
      sub_23F756220();
      sub_23F7562E0();
      if (v18)
      {
        swift_release();
        goto LABEL_13;
      }
      isUniquelyReferenced_nonNull_native = sub_23F756558();
      v40 = -1;
LABEL_53:
      if ((_BYTE)v17)
      {
        sub_23F756648(isUniquelyReferenced_nonNull_native, v37, v40);
        sub_23F756568();
        break;
      }
      v41 = v54;
      sub_23F756648(isUniquelyReferenced_nonNull_native, v37, v40);
      if (v15 < v41)
        break;
      sub_23F756588();
      v15 = 0;
      v16 = 0;
    }
    swift_release();
  }
  sub_23F756218(v26, v27);
LABEL_60:
  swift_bridgeObjectRelease();
  v42 = v52;
  v43 = v53;
  swift_bridgeObjectRelease();
  sub_23F693DFC();
  sub_23F751314(v42, *((uint64_t *)&v42 + 1), v43);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_23F7511E4(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(v1 + 64);
  if (v2 == 255)
  {
    Lexer.next()(a1);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
    *(_BYTE *)(a1 + 16) = v2;
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_BYTE *)(v1 + 64) = -1;
  }
}

void sub_23F751210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  _QWORD v16[2];
  unsigned __int8 v17;

  while (1)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v1 = *(_QWORD *)(v0 + 56);
    v3 = *(unsigned __int8 *)(v0 + 64);
    v4 = v2;
    v5 = v1;
    v6 = v3;
    if (v3 != 255)
      goto LABEL_4;
    Lexer.next()((uint64_t)v16);
    v4 = v16[0];
    v5 = v16[1];
    v6 = v17;
    *(_QWORD *)(v0 + 48) = v16[0];
    *(_QWORD *)(v0 + 56) = v5;
    *(_BYTE *)(v0 + 64) = v6;
    if (v6 == 255)
      break;
    v7 = sub_23F7563C4();
    sub_23F73FBD4(v7, v8, v9);
LABEL_4:
    if (v6)
    {
      sub_23F751328(v2, v1, v3);
      sub_23F7563C4();
      sub_23F6F09E8();
      sub_23F73FBF0(v10, v11, v12);
      return;
    }
    if (v4 < *(_QWORD *)(v0 + 72))
    {
      sub_23F6F09E8();
      sub_23F751328(v13, v14, v15);
      return;
    }
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 56) = 0;
    *(_BYTE *)(v0 + 64) = -1;
    sub_23F751328(v2, v1, v3);
    sub_23F751314(v4, v5, 0);
  }
  sub_23F6F09E8();
}

uint64_t sub_23F751314(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23F73FBF0(a1, a2, a3);
  return a1;
}

uint64_t sub_23F751328(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23F73FBD4(a1, a2, a3);
  return a1;
}

uint64_t sub_23F75133C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;

  v5 = v1;
  sub_23F7511E4((uint64_t)&v28);
  if (v30)
  {
    if (v30 != 255)
      sub_23F751314(v28, v29, v30);
    goto LABEL_5;
  }
  if (v28 < *(_QWORD *)(v0 + 72))
  {
LABEL_5:
    sub_23F755EB4();
    sub_23F6B5AD4();
    sub_23F756200(v6, 1);
    return v2;
  }
  v26 = *(_QWORD *)(v0 + 72);
  v2 = MEMORY[0x24BEE4AF8];
  v27 = v28;
  *(_QWORD *)(v0 + 72) = v28;
  while (1)
  {
    sub_23F756428();
    if (v8)
    {
      Lexer.next()((uint64_t)&v28);
      v3 = v28;
      v9 = v29;
      LODWORD(v4) = v30;
      *(_QWORD *)(v0 + 48) = v28;
      *(_QWORD *)(v0 + 56) = v9;
      *(_BYTE *)(v0 + 64) = v4;
      if ((_DWORD)v4 == 255)
        goto LABEL_33;
      sub_23F756518(v3, v9);
    }
    v10 = sub_23F7563C4();
    if ((_DWORD)v4)
    {
      sub_23F751328(v10, v11, v12);
      sub_23F756520();
    }
    else
    {
      sub_23F751328(v10, v11, v12);
      if (v3 < v27)
      {
LABEL_33:
        *(_QWORD *)(v0 + 72) = v26;
        return v2;
      }
    }
    sub_23F751210();
    v13 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v14 = *(unsigned __int8 *)(v0 + 64);
    v15 = v13;
    v16 = v3;
    v17 = v14;
    if (v14 != 255)
      break;
    Lexer.next()((uint64_t)&v28);
    v15 = v28;
    v16 = v29;
    v17 = v30;
    *(_QWORD *)(v0 + 48) = v28;
    *(_QWORD *)(v0 + 56) = v16;
    *(_BYTE *)(v0 + 64) = v17;
    if (v17 != 255)
    {
      sub_23F756518(v15, v16);
      break;
    }
LABEL_23:
    v21 = sub_23F7519E4();
    if (v5)
      goto LABEL_35;
    v4 = v21;
LABEL_28:
    sub_23F751210();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F753B78();
      v2 = v24;
    }
    v23 = *(_QWORD *)(v2 + 16);
    v22 = *(_QWORD *)(v2 + 24);
    if (v23 >= v22 >> 1)
    {
      sub_23F756654(v22);
      sub_23F753B78();
      v2 = v25;
    }
    *(_QWORD *)(v2 + 16) = v23 + 1;
    *(_QWORD *)(v2 + 8 * v23 + 32) = v4;
    swift_release();
  }
  if (v17 != 6)
  {
LABEL_22:
    sub_23F751328(v13, v3, v14);
    sub_23F751314(v15, v16, v17);
    goto LABEL_23;
  }
  if (v15 ^ 0x20 | v16)
  {
    if (!(v15 ^ 0x22 | v16))
    {
      sub_23F751328(v13, v3, v14);
      sub_23F7511E4((uint64_t)&v28);
      v18 = sub_23F751314(v28, v29, v30);
      v19 = v5;
      v20 = sub_23F751620(v18);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  sub_23F751328(v13, v3, v14);
  sub_23F7511E4((uint64_t)&v28);
  sub_23F751314(v28, v29, v30);
  v19 = v5;
  v20 = sub_23F75191C();
LABEL_26:
  v5 = v19;
  if (!v19)
  {
    v4 = v20;
    sub_23F756218(v15, v16);
    goto LABEL_28;
  }
  sub_23F756218(v15, v16);
LABEL_35:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 72) = v26;
  return v2;
}

_QWORD *sub_23F751620()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  unsigned __int8 v28;
  uint64_t v29;

  result = sub_23F756668(&v27);
  if (!v1)
  {
    v3 = v27;
    v27 = xmmword_23FB59F40;
    v28 = 6;
    sub_23F7562F8((uint64_t)&v27);
    v29 = sub_23F756630();
    v5 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    v6 = *(unsigned __int8 *)(v0 + 64);
    v7 = v5;
    v8 = v4;
    v9 = v6;
    if (v6 == 255)
    {
      Lexer.next()((uint64_t)&v27);
      v8 = *((_QWORD *)&v27 + 1);
      v7 = v27;
      v9 = v28;
      *(_QWORD *)(v0 + 48) = v27;
      *(_QWORD *)(v0 + 56) = v8;
      *(_BYTE *)(v0 + 64) = v9;
      if (v9 == 255)
        goto LABEL_19;
      sub_23F73FBD4(v7, v8, v9);
    }
    if (v9)
    {
      sub_23F751328(v5, v4, v6);
      sub_23F73FBF0(v7, v8, v9);
    }
    else
    {
      if (v7 != *(_QWORD *)(v0 + 72))
      {
        sub_23F751328(v5, v4, v6);
        goto LABEL_19;
      }
      sub_23F751328(v5, v4, v6);
      sub_23F756450((uint64_t)&v27, 27, 0, v27, *((uint64_t *)&v27 + 1), v28);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(unsigned __int8 *)(v0 + 64);
      v13 = v11;
      v14 = v10;
      v15 = v12;
      if (v12 == 255)
      {
        Lexer.next()((uint64_t)&v27);
        v14 = *((_QWORD *)&v27 + 1);
        v13 = v27;
        v15 = v28;
        *(_QWORD *)(v0 + 48) = v27;
        *(_QWORD *)(v0 + 56) = v14;
        *(_BYTE *)(v0 + 64) = v15;
        if (v15 == 255)
          goto LABEL_19;
        sub_23F756420(v13, v14);
      }
      if (v15 == 6)
      {
        if (!(v13 ^ 0x24 | v14))
        {
          sub_23F751328(v11, v10, v12);
          sub_23F756450((uint64_t)&v27, v24, v26, v27, *((uint64_t *)&v27 + 1), v28);
          v27 = v25;
          v28 = 6;
          sub_23F7562F8((uint64_t)&v27);
          v22 = v14;
          v23 = sub_23F756630();
          v18 = v29;
          v21 = v23;
          sub_23F756218(v13, v22);
          goto LABEL_21;
        }
        if (!(v13 ^ 0x23 | v14))
        {
          v16 = v14;
          sub_23F751328(v11, v10, v12);
          v17 = sub_23F756450((uint64_t)&v27, v24, v26, v27, *((uint64_t *)&v27 + 1), v28);
          v20 = sub_23F751620(v17);
          sub_23F6916B8(&qword_256EA6300);
          v21 = sub_23F6B56B0();
          *(_OWORD *)(v21 + 16) = xmmword_23FB47010;
          *(_QWORD *)(v21 + 32) = v20;
          sub_23F756218(v13, v16);
LABEL_20:
          v18 = v29;
LABEL_21:
          v19 = sub_23F6B56B0();
          *(_QWORD *)(v19 + 16) = v3;
          *(_QWORD *)(v19 + 24) = v18;
          *(_QWORD *)(v19 + 32) = v21;
          return (_QWORD *)(v19 | 0x4000000000000000);
        }
      }
      sub_23F751328(v11, v10, v12);
      sub_23F7563BC(v13, v14);
    }
LABEL_19:
    v21 = 0;
    goto LABEL_20;
  }
  return result;
}

unint64_t sub_23F75191C()
{
  uint64_t v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[4];

  result = sub_23F752D0C();
  if (!v0)
  {
    v10 = result;
    v11 = v2;
    sub_23F75622C((__n128)xmmword_23FB5A030, result, v2, v3, v4, v5, v6, v7, v8, v9, v25[0]);
    sub_23F756368(v25);
    v12 = v25[0];
    v22 = sub_23F75622C((__n128)xmmword_23FB59F40, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25[0]);
    v23 = sub_23F756630(v22);
    v24 = sub_23F6B56B0();
    *(_QWORD *)(v24 + 16) = v10;
    *(_QWORD *)(v24 + 24) = v11;
    *(_QWORD *)(v24 + 32) = v12;
    *(_QWORD *)(v24 + 40) = v23;
    return v24 | 0x8000000000000000;
  }
  return result;
}

uint64_t sub_23F7519E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11[2];
  unsigned __int8 v12;
  unint64_t v13;

  result = (uint64_t)sub_23F756668(&v13);
  if (!v1)
  {
    v4 = v13;
    if (((v13 >> 59) & 0x1E | (v13 >> 2) & 1) != 2
      || *(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFFBLL) + 0x20) != 1)
    {
      goto LABEL_10;
    }
    sub_23F756428();
    if (v5)
    {
      Lexer.next()((uint64_t)v11);
      v6 = v11[0];
      v7 = v11[1];
      v2 = v12;
      *(_QWORD *)(v0 + 48) = v11[0];
      *(_QWORD *)(v0 + 56) = v7;
      *(_BYTE *)(v0 + 64) = v2;
      if (v2 == 255)
      {
LABEL_10:
        result = sub_23F6B56B0();
        *(_QWORD *)(result + 16) = v4;
        return result;
      }
      sub_23F756518(v6, v7);
    }
    v8 = sub_23F7563C4();
    sub_23F751328(v8, v9, v10);
    if (v2)
    {
      sub_23F756520();
      sub_23F756368(v11);
      sub_23F756598();
      v4 = v11[0];
    }
    goto LABEL_10;
  }
  return result;
}

void sub_23F751AD0(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v3 = v1;
  sub_23F751210();
  sub_23F7521CC(&v21);
  if (!v2)
  {
    v17 = a1;
    sub_23F751210();
    v10 = v21;
    v11 = *(_QWORD *)(v1 + 48);
    v12 = *(_QWORD *)(v1 + 56);
    v13 = *(unsigned __int8 *)(v1 + 64);
    v14 = v11;
    v15 = v12;
    v16 = v13;
    if (v13 == 255)
    {
      sub_23F756398(v5, v6, v7, v8, v9);
      v14 = v18;
      v15 = v19;
      v16 = v20;
      *(_QWORD *)(v3 + 48) = v18;
      *(_QWORD *)(v3 + 56) = v19;
      *(_BYTE *)(v3 + 64) = v20;
      if (v20 == 255)
      {
LABEL_9:
        *v17 = v10;
        return;
      }
      sub_23F756420(v18, v19);
    }
    if (v16 == 6 && (unint64_t)(v14 - 2) <= 0x1F)
      __asm { BR              X9 }
    sub_23F751328(v11, v12, v13);
    sub_23F73FBF0(v14, v15, v16);
    goto LABEL_9;
  }
}

void sub_23F7521CC(uint64_t *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  sub_23F7511E4((uint64_t)&v20);
  v3 = v22;
  if (v22 == 255)
  {
    sub_23F6BD090();
    sub_23F6B5AD4();
    *(_QWORD *)v7 = 0xD000000000000070;
    *(_QWORD *)(v7 + 8) = 0x800000023FB32C10;
    *(_OWORD *)(v7 + 16) = xmmword_23FB5AEB0;
    sub_23F7566E0(v7, 0xEE00292873684C72);
  }
  else
  {
    v5 = v20;
    v4 = v21;
    switch(v22)
    {
      case 1u:
        v6 = sub_23F6B56B0();
        *(_QWORD *)(v6 + 16) = v5;
        *(_QWORD *)(v6 + 24) = v4;
        *a1 = v6;
        return;
      case 2u:
        v8 = sub_23F6B56B0();
        *(_QWORD *)(v8 + 16) = v5 & 1;
        *(_QWORD *)(v8 + 24) = 0;
        *(_BYTE *)(v8 + 32) = 0;
        goto LABEL_10;
      case 3u:
        v8 = sub_23F6B56B0();
        *(_QWORD *)(v8 + 16) = v5;
        *(_QWORD *)(v8 + 24) = 0;
        v9 = 1;
        goto LABEL_9;
      case 4u:
        v8 = sub_23F6B56B0();
        *(_QWORD *)(v8 + 16) = v5;
        *(_QWORD *)(v8 + 24) = 0;
        v9 = 2;
        goto LABEL_9;
      case 5u:
        v8 = sub_23F6B56B0();
        *(_QWORD *)(v8 + 16) = v5;
        *(_QWORD *)(v8 + 24) = v4;
        v9 = 3;
        goto LABEL_9;
      case 6u:
        if (!(v20 ^ 1 | v21))
        {
          v8 = sub_23F6B56B0();
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          v9 = 6;
LABEL_9:
          *(_BYTE *)(v8 + 32) = v9;
LABEL_10:
          v10 = v8 | 0x1000000000000000;
          goto LABEL_11;
        }
        sub_23F7565C8();
        if (v11)
        {
          sub_23F7565C8();
          if (v12)
          {
            sub_23F7565C8();
            if (v13)
            {
              sub_23F7565C8();
              if (!v14)
              {
                sub_23F7526B0(a1);
                return;
              }
              sub_23F7565C8();
              if (!v15)
              {
                sub_23F752634(a1);
                return;
              }
              if (!(v5 ^ 0x1C | v4))
              {
                v10 = 0xA000000000000008;
                goto LABEL_11;
              }
              if (v5 ^ 0x1F | v4)
              {
LABEL_22:
                sub_23F755EB4();
                sub_23F6B5AD4();
                sub_23F756200(v19, 6);
                sub_23F751314(v5, v4, v3);
                return;
              }
            }
            sub_23F756368(&v20, 8);
            if (!v1)
            {
              v16 = v20;
              v17 = sub_23F6B56B0();
              v18 = 2;
LABEL_29:
              *(_BYTE *)(v17 + 16) = v18;
              goto LABEL_30;
            }
          }
          else
          {
            sub_23F756368(&v20, 8);
            if (!v1)
            {
              v16 = v20;
              v17 = sub_23F6B56B0();
              v18 = 1;
              goto LABEL_29;
            }
          }
        }
        else
        {
          sub_23F756368(&v20, 8);
          if (!v1)
          {
            v16 = v20;
            v17 = sub_23F6B56B0();
            *(_BYTE *)(v17 + 16) = 0;
LABEL_30:
            *(_QWORD *)(v17 + 24) = v16;
            v10 = v17 | 0x1000000000000004;
LABEL_11:
            *a1 = v10;
            return;
          }
        }
        break;
      default:
        goto LABEL_22;
    }
  }
}

_QWORD *sub_23F7524B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _QWORD *result;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v4 = *a1;
  sub_23F7511E4((uint64_t)&v14);
  if (v16 == 255)
  {
    sub_23F6BD090();
    sub_23F6B5AD4();
    *(_QWORD *)v10 = 0xD000000000000070;
    *(_QWORD *)(v10 + 8) = 0x800000023FB32C10;
    *(_OWORD *)(v10 + 16) = xmmword_23FB5AEC0;
    return (_QWORD *)sub_23F7566E0(v10, 0x800000023FB32C90);
  }
  else
  {
    v5 = v14;
    v6 = v15;
    if (v16 == 6
      && (v7 = v14 - 2, __PAIR128__((unint64_t)(v14 >= 2) + v15 - 1, v14 - 2) < 0x20)
      && ((0x9800FFFF >> v7) & 1) != 0)
    {
      v11 = byte_23FB5B0EE[v7];
      sub_23F756218(v14, v15);
      result = sub_23F751AD0(&v14, byte_23FB5B0CE[v7]);
      if (!v2)
      {
        v12 = v14;
        v13 = sub_23F6B56B0();
        *(_BYTE *)(v13 + 16) = v11;
        *(_QWORD *)(v13 + 24) = v4;
        *(_QWORD *)(v13 + 32) = v12;
        *a2 = v13 | 0x2000000000000000;
        return (_QWORD *)sub_23F6B68D8();
      }
    }
    else
    {
      sub_23F755EB4();
      sub_23F6B5AD4();
      sub_23F756200(v8, 9);
      return (_QWORD *)sub_23F7563BC(v5, v6);
    }
  }
  return result;
}

uint64_t sub_23F752634@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  char v6;

  v5 = xmmword_23FB59F70;
  v6 = 6;
  result = sub_23F75377C((uint64_t)&v5);
  if (!v1)
  {
    v4 = result;
    result = sub_23F6B56B0();
    *(_QWORD *)(result + 16) = v4;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 4;
    *a1 = result | 0x1000000000000000;
  }
  return result;
}

uint64_t sub_23F7526B0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD v13[4];

  result = (uint64_t)sub_23F756668(v13);
  if (!v1)
  {
    v12 = v13[0];
    result = sub_23F75622C((__n128)xmmword_23FB59FB0, result, v4, v5, v6, v7, v8, v9, v10, v11, v13[0]);
    *a1 = v12;
  }
  return result;
}

unint64_t sub_23F752714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  __int128 v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  _BYTE *v93;
  unint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  unsigned __int8 v101;
  __int128 v102;
  char v103;
  unint64_t v104;

  v2 = v1;
  v3 = v0;
  v104 = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  while (1)
  {
    sub_23F751210();
    v12 = *(_QWORD *)(v3 + 48);
    v13 = *(_QWORD *)(v3 + 56);
    v14 = *(unsigned __int8 *)(v3 + 64);
    if (v14 == 255)
    {
      sub_23F756408(v4, v5, v6, v7, v8, v9, v10, v11, v97, v98);
      v13 = *((_QWORD *)&v100 + 1);
      v12 = v100;
      v14 = v101;
      *(_QWORD *)(v3 + 48) = v100;
      *(_QWORD *)(v3 + 56) = v13;
      *(_BYTE *)(v3 + 64) = v14;
      if (v14 == 255)
        goto LABEL_34;
      sub_23F73FBD4(v12, v13, v14);
    }
    *(_QWORD *)&v100 = v12;
    *((_QWORD *)&v100 + 1) = v13;
    v101 = v14;
    v102 = xmmword_23FB59FB0;
    v103 = 6;
    v15 = sub_23F756490();
    sub_23F756474(v15, v16, v17, v18, v19, v20, v21, v22, v97, v98);
    if ((v23 & 1) != 0)
      break;
    if (v14 != 1)
    {
      sub_23F73FBF0(v12, v13, v14);
      sub_23F756368(&v100, 0);
      v2 = v1;
      if (v1)
        return swift_bridgeObjectRelease();
      v31 = v100;
      *(_QWORD *)&v100 = 91;
      *((_QWORD *)&v100 + 1) = 0xE100000000000000;
      *(_QWORD *)&v102 = *(_QWORD *)(v104 + 16);
      sub_23FB2FB48();
      sub_23FB2F254();
      sub_23F6B6090();
      sub_23FB2F254();
      v32 = v100;
      if (*(_QWORD *)(v104 + 16))
      {
        sub_23F6B54F8();
        sub_23F78C6DC();
        v34 = v33;
        sub_23F693DFC();
        if ((v34 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          sub_23F693DFC();
          sub_23F755EB4();
          sub_23F6B5AD4();
          sub_23F756200(v93, 10);
          v94 = v31;
          return sub_23F6A3764(v94);
        }
      }
      sub_23F756294();
      sub_23F6A3728(v31);
      swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v102 = v104;
      v104 = 0x8000000000000000;
      sub_23F7DB9E8(v31, v32, *((uint64_t *)&v32 + 1));
      v104 = v102;
      swift_bridgeObjectRelease();
      sub_23F7566D8();
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    sub_23F73FBF0(v12, v13, 1u);
    v1 = v2;
    sub_23F752F6C((uint64_t *)&v100);
    if (v2)
      return swift_bridgeObjectRelease();
    v24 = v100;
    if (((unint64_t)v100 >> 59) & 0x1E | (v100 >> 2) & 1)
      goto LABEL_23;
    v98 = *(_QWORD *)(v100 + 16);
    v25 = *(_QWORD *)(v3 + 48);
    v26 = *(_QWORD *)(v3 + 56);
    v27 = *(unsigned __int8 *)(v3 + 64);
    v99 = *(_QWORD *)(v100 + 24);
    if (v27 != 255)
    {
      swift_bridgeObjectRetain();
      v28 = v25;
      v29 = v26;
      LOBYTE(v30) = v27;
      goto LABEL_17;
    }
    v35 = swift_bridgeObjectRetain();
    sub_23F756408(v35, v36, v37, v38, v39, v40, v41, v42, v97, v98);
    v29 = *((_QWORD *)&v100 + 1);
    v28 = v100;
    v30 = v101;
    *(_QWORD *)(v3 + 48) = v100;
    *(_QWORD *)(v3 + 56) = v29;
    *(_BYTE *)(v3 + 64) = v30;
    if (v30 != 255)
    {
      v43 = sub_23F7564A0();
      sub_23F73FBD4(v43, v44, v45);
LABEL_17:
      *(_QWORD *)&v100 = v28;
      *((_QWORD *)&v100 + 1) = v29;
      v101 = v30;
      v102 = xmmword_23FB5AED0;
      v103 = 6;
      sub_23F751328(v25, v26, v27);
      v46 = sub_23F7564A0();
      v49 = sub_23F751328(v46, v47, v48);
      sub_23F756474(v49, v50, v51, v52, v53, v54, v55, v56, v97, v98);
      v58 = v57;
      sub_23F73FBF0(v100, *((uint64_t *)&v100 + 1), v101);
      v59 = sub_23F7564A0();
      sub_23F751314(v59, v60, v61);
      if ((v58 & 1) != 0)
      {
        v100 = xmmword_23FB5AED0;
        v101 = 6;
        sub_23F7562F8((uint64_t)&v100);
        sub_23F756368(&v100, 0);
        v2 = 0;
        v31 = v100;
        if (*(_QWORD *)(v104 + 16))
        {
          sub_23F6B54F8();
          sub_23F78C6DC();
          v63 = v62;
          sub_23F693DFC();
          if ((v63 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            sub_23F693DFC();
            sub_23F755EB4();
            sub_23F6B5AD4();
            sub_23F756200(v96, 10);
            sub_23F6A3764(v31);
            goto LABEL_39;
          }
        }
        sub_23F756294();
        sub_23F6A3728(v31);
        sub_23F7DB844(v31, v98, v99);
        sub_23F7566D8();
        swift_bridgeObjectRelease();
        sub_23F756688();
        goto LABEL_26;
      }
      goto LABEL_22;
    }
    sub_23F756390(v28, v29);
    sub_23F756218(2, 0);
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    v64 = sub_23F752EE0();
    v66 = v65;
    if (*(_QWORD *)(v104 + 16))
    {
      sub_23F6B54F8();
      sub_23F78C6DC();
      v68 = v67;
      sub_23F693DFC();
      if ((v68 & 1) != 0)
      {
        sub_23F6B6090();
        sub_23F693DFC();
        sub_23F755EB4();
        sub_23F6B5AD4();
        sub_23F756200(v95, 10);
LABEL_39:
        v94 = v24;
        return sub_23F6A3764(v94);
      }
    }
    sub_23F756294();
    sub_23F6A3728(v24);
    sub_23F7DB844(v24, v64, v66);
    sub_23F7566D8();
    sub_23F6B6090();
    v31 = v24;
LABEL_26:
    v69 = sub_23F6A3764(v31);
    v77 = *(_QWORD *)(v3 + 48);
    v78 = *(_QWORD *)(v3 + 56);
    v79 = *(unsigned __int8 *)(v3 + 64);
    v80 = v77;
    v81 = v78;
    LOBYTE(v31) = *(_BYTE *)(v3 + 64);
    if (v79 == 255)
    {
      sub_23F756408(v69, v70, v71, v72, v73, v74, v75, v76, v97, v98);
      v81 = *((_QWORD *)&v100 + 1);
      v80 = v100;
      LODWORD(v31) = v101;
      *(_QWORD *)(v3 + 48) = v100;
      *(_QWORD *)(v3 + 56) = v81;
      *(_BYTE *)(v3 + 64) = v31;
      if ((_DWORD)v31 == 255)
      {
        sub_23F756390(v80, v81);
        sub_23F756218(20, 0);
        goto LABEL_32;
      }
      sub_23F756420(v80, v81);
    }
    *(_QWORD *)&v100 = v80;
    *((_QWORD *)&v100 + 1) = v81;
    v101 = v31;
    v102 = xmmword_23FB59FB0;
    v103 = 6;
    sub_23F751328(v77, v78, v79);
    v82 = sub_23F751328(v80, v81, v31);
    sub_23F756474(v82, v83, v84, v85, v86, v87, v88, v89, v97, v98);
    v91 = v90;
    sub_23F73FBF0(v100, *((uint64_t *)&v100 + 1), v101);
    sub_23F7563BC(v80, v81);
    if ((v91 & 1) == 0)
    {
LABEL_32:
      v100 = xmmword_23FB59F50;
      v101 = 6;
      sub_23F7562F8((uint64_t)&v100);
      v2 = 0;
    }
  }
  sub_23F73FBF0(v12, v13, v14);
LABEL_34:
  v100 = xmmword_23FB59FB0;
  v101 = 6;
  sub_23F7562F8((uint64_t)&v100);
  if (v1)
    return swift_bridgeObjectRelease();
  return v104;
}

uint64_t sub_23F752D0C()
{
  uint64_t v0;
  int v1;
  uint64_t result;
  uint64_t v3;
  _BYTE *v4;
  _QWORD v5[2];
  unsigned __int8 v6;

  v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 == 255)
  {
    Lexer.next()((uint64_t)v5);
    result = v5[0];
    v3 = v5[1];
    v1 = v6;
  }
  else
  {
    result = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 56) = 0;
    *(_BYTE *)(v0 + 64) = -1;
  }
  if (v1 != 255)
  {
    if (v1 == 1)
      return result;
    sub_23F751314(result, v3, v1);
  }
  sub_23F755EB4();
  sub_23F6B5AD4();
  return sub_23F756200(v4, 3);
}

uint64_t sub_23F752D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v7 = *(unsigned __int8 *)(v1 + 64);
  v8 = v6;
  v9 = v5;
  LOBYTE(v10) = *(_BYTE *)(v1 + 64);
  if (v7 == 255)
  {
    HIDWORD(v32) = *(unsigned __int8 *)(a1 + 16);
    Lexer.next()((uint64_t)&v35);
    v8 = v35;
    v9 = v36;
    v10 = v37;
    *(_QWORD *)(v1 + 48) = v35;
    *(_QWORD *)(v1 + 56) = v9;
    *(_BYTE *)(v1 + 64) = v10;
    if (v10 == 255)
    {
      sub_23F73FBD4(v3, v2, BYTE4(v32));
      sub_23F756390(v8, v9);
      sub_23F751314(v3, v2, BYTE4(v32));
      goto LABEL_7;
    }
    v11 = sub_23F756578();
    sub_23F73FBD4(v11, v12, v13);
    v4 = BYTE4(v32);
  }
  v35 = v8;
  v36 = v9;
  v37 = v10;
  LOBYTE(v34) = v4;
  sub_23F751328(v6, v5, v7);
  v14 = sub_23F756578();
  sub_23F751328(v14, v15, v16);
  static Lexer.Token.== infix(_:_:)((uint64_t)&v35);
  v18 = v17;
  sub_23F73FBF0(v35, v36, v37);
  v19 = sub_23F756578();
  sub_23F751314(v19, v20, v21);
  if ((v18 & 1) != 0)
  {
    sub_23F7511E4((uint64_t)&v35);
    return sub_23F756670(v22, v23, v24, v25, v26, v27, v28, v29, v32, v33, v3, v2, v34, v35, v36, v37);
  }
LABEL_7:
  sub_23F755EB4();
  sub_23F6B5AD4();
  return sub_23F756200(v31, 1);
}

uint64_t sub_23F752EE0()
{
  swift_beginAccess();
  sub_23FB2FB48();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  sub_23FB2F254();
  return 91;
}

void sub_23F752F6C(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  _QWORD v13[2];
  unsigned __int8 v14;
  uint64_t v15;

  v3 = v1;
  sub_23F751210();
  sub_23F7521CC(&v15);
  if (!v2)
  {
    v12 = a1;
    sub_23F751210();
    v5 = v15;
    v6 = *(_QWORD *)(v1 + 48);
    v7 = *(_QWORD *)(v1 + 56);
    v8 = *(unsigned __int8 *)(v1 + 64);
    v9 = v6;
    v10 = v7;
    v11 = v8;
    if (v8 == 255)
    {
      Lexer.next()((uint64_t)v13);
      v9 = v13[0];
      v10 = v13[1];
      v11 = v14;
      *(_QWORD *)(v3 + 48) = v13[0];
      *(_QWORD *)(v3 + 56) = v10;
      *(_BYTE *)(v3 + 64) = v11;
      if (v11 == 255)
      {
LABEL_9:
        *v12 = v5;
        return;
      }
      sub_23F73FBD4(v9, v10, v11);
    }
    if (v11 == 6 && (unint64_t)(v9 - 2) <= 0x1F)
      __asm { BR              X9 }
    sub_23F751328(v6, v7, v8);
    sub_23F73FBF0(v9, v10, v11);
    goto LABEL_9;
  }
}

uint64_t sub_23F75377C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;

  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = v3;
  v6 = *(unsigned __int8 *)(v1 + 64);
  v43 = *(_QWORD *)(a1 + 8);
  v44 = *(_QWORD *)a1;
  v42 = *(unsigned __int8 *)(a1 + 16);
  if (v6 != 255)
  {
LABEL_4:
    v45 = v4;
    v46 = v5;
    v47 = v6;
    sub_23F756490();
    v10 = sub_23F756538();
    sub_23F751328(v10, v11, v12);
    static Lexer.Token.== infix(_:_:)((uint64_t)&v45);
    v14 = v13;
    sub_23F73FBF0(v45, v46, v47);
    v15 = sub_23F756538();
    sub_23F751314(v15, v16, v17);
    if ((v14 & 1) != 0)
    {
      sub_23F7511E4((uint64_t)&v45);
      sub_23F751314(v45, v46, v47);
      return MEMORY[0x24BEE4AF8];
    }
    goto LABEL_7;
  }
  Lexer.next()((uint64_t)&v45);
  v4 = v45;
  v5 = v46;
  v6 = v47;
  *(_QWORD *)(v1 + 48) = v45;
  *(_QWORD *)(v1 + 56) = v5;
  *(_BYTE *)(v1 + 64) = v6;
  if (v6 != 255)
  {
    v7 = sub_23F756538();
    sub_23F73FBD4(v7, v8, v9);
    goto LABEL_4;
  }
  v3 = v42;
  sub_23F756420(v44, v43);
  sub_23F756390(v4, v5);
  sub_23F7563BC(v44, v43);
LABEL_7:
  sub_23F751AD0(&v45, 0);
  if (v2)
    return v3;
  v18 = v45;
  sub_23F6A3728(v45);
  sub_23F753B78();
  v3 = v19;
  v20 = *(_QWORD *)(v19 + 16);
  if (v20 >= *(_QWORD *)(v19 + 24) >> 1)
  {
    sub_23F753B78();
    v3 = v41;
  }
  *(_QWORD *)(v3 + 16) = v20 + 1;
  *(_QWORD *)(v3 + 8 * v20 + 32) = v18;
  while (1)
  {
    v21 = *(_QWORD *)(v1 + 48);
    v22 = *(_QWORD *)(v1 + 56);
    v23 = *(unsigned __int8 *)(v1 + 64);
    v24 = v21;
    v25 = v22;
    v26 = v23;
    if (v23 != 255)
      goto LABEL_14;
    Lexer.next()((uint64_t)&v45);
    v24 = v45;
    v25 = v46;
    v26 = v47;
    *(_QWORD *)(v1 + 48) = v45;
    *(_QWORD *)(v1 + 56) = v25;
    *(_BYTE *)(v1 + 64) = v26;
    if (v26 == 255)
      break;
    sub_23F7564E0();
LABEL_14:
    if (v26 != 6)
    {
      if (((1 << v26) & 0x1D) == 0)
      {
        sub_23F7564E0();
        swift_bridgeObjectRetain();
      }
LABEL_21:
      sub_23F751328(v21, v22, v23);
      v31 = sub_23F7564D0();
      sub_23F73FBF0(v31, v32, v33);
      sub_23F73FBF0(26, 0, 6u);
      v34 = sub_23F7564D0();
      sub_23F751314(v34, v35, v36);
      v37 = sub_23F7564D0();
      goto LABEL_22;
    }
    if (v24 ^ 0x1A | v25)
      goto LABEL_21;
    sub_23F751328(v21, v22, v23);
    sub_23F73FBF0(v24, v25, 6u);
    sub_23F73FBF0(26, 0, 6u);
    sub_23F751314(v24, v25, 6u);
    sub_23F751314(v24, v25, 6u);
    sub_23F756218(v24, v25);
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_BYTE *)(v1 + 64) = -1;
    sub_23F751AD0(&v45, 0);
    v27 = v45;
    sub_23F6A3728(v45);
    v29 = *(_QWORD *)(v3 + 16);
    v28 = *(_QWORD *)(v3 + 24);
    if (v29 >= v28 >> 1)
    {
      sub_23F756654(v28);
      sub_23F753B78();
      v3 = v30;
    }
    *(_QWORD *)(v3 + 16) = v29 + 1;
    *(_QWORD *)(v3 + 8 * v29 + 32) = v27;
    sub_23F756598();
  }
  sub_23F756390(v24, v25);
  v37 = 26;
  v38 = 0;
  v39 = 6;
LABEL_22:
  sub_23F751314(v37, v38, v39);
  v45 = v44;
  v46 = v43;
  v47 = v42;
  sub_23F752D98((uint64_t)&v45);
  sub_23F6B6E4C();
  return v3;
}

void sub_23F753B48()
{
  sub_23F754110();
}

void sub_23F753B64()
{
  sub_23F753B78();
}

void sub_23F753B78()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  sub_23F756480();
  if ((v4 & 1) != 0)
  {
    sub_23F713E9C();
    if (v8 != v9)
    {
      sub_23F713F68();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_23F713FB4(v2, v3, v4, v5, v6);
    v12 = (const void *)sub_23F6B56B0();
    sub_23F7566B0(v12);
    sub_23F7566C4();
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = v13;
  }
  else
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    sub_23F755228((char *)(v0 + 32), v10, (char *)(v11 + 32));
    sub_23F75620C();
  }
  else
  {
    v14 = sub_23F7563F4();
    sub_23F7546D0(v14, v15, v16, v17);
  }
  sub_23F6B5F7C();
}

void sub_23F753C1C()
{
  sub_23F753DC4();
}

void sub_23F753C30()
{
  sub_23F753C74();
}

void sub_23F753C44()
{
  sub_23F7544BC();
}

void sub_23F753C60()
{
  sub_23F753C74();
}

void sub_23F753C74()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  sub_23F756480();
  if ((v7 & 1) != 0)
  {
    sub_23F713E9C();
    if (v11 != v12)
    {
      sub_23F713F68();
      if (v11)
      {
        __break(1u);
        goto LABEL_22;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v10 = v6;
  }
  v13 = *(_QWORD *)(v0 + 16);
  if (v10 <= v13)
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v10;
  if (!v14)
    goto LABEL_17;
  v15 = sub_23F713FB4(v5, v6, v7, v8, v9);
  sub_23F6916B8(v1);
  v16 = (const void *)sub_23F7562BC();
  v17 = sub_23F7566B0(v16);
  if (!v3 || (v17 - v4 == 0x8000000000000000 ? (v18 = v3 == -1) : (v18 = 0), v18))
  {
LABEL_22:
    sub_23F7561B8();
    sub_23F75667C();
    __break(1u);
    return;
  }
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = 2 * ((uint64_t)(v17 - v4) / v3);
LABEL_17:
  sub_23F6916B8(v1);
  sub_23F7565A0();
  if ((v2 & 1) != 0)
  {
    sub_23F7559D0(v0 + v19, v13);
    sub_23F75620C();
  }
  else
  {
    v20 = sub_23F7563F4();
    sub_23F75506C(v20, v21, v22, v23, v24);
  }
  sub_23F7563A4();
}

void sub_23F753DB0()
{
  sub_23F753DC4();
}

void sub_23F753DC4()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);

  sub_23F756480();
  if ((v7 & 1) != 0)
  {
    sub_23F713E9C();
    if (v11 != v12)
    {
      sub_23F713F68();
      if (v11)
      {
        __break(1u);
        goto LABEL_22;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v10 = v6;
  }
  v13 = *(_QWORD *)(v0 + 16);
  if (v10 <= v13)
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v10;
  if (!v14)
    goto LABEL_17;
  v15 = sub_23F713FB4(v5, v6, v7, v8, v9);
  v1(0);
  v16 = (const void *)sub_23F7562BC();
  v17 = sub_23F7566B0(v16);
  if (!v3 || (v17 - v4 == 0x8000000000000000 ? (v18 = v3 == -1) : (v18 = 0), v18))
  {
LABEL_22:
    sub_23F7561B8();
    sub_23F75667C();
    __break(1u);
    return;
  }
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = 2 * ((uint64_t)(v17 - v4) / v3);
LABEL_17:
  v1(0);
  sub_23F7565A0();
  if ((v2 & 1) != 0)
  {
    sub_23F755A64(v0 + v19, v13);
    sub_23F75620C();
  }
  else
  {
    v20 = sub_23F7563F4();
    sub_23F755114(v20, v21, v22, v23, v24);
  }
  sub_23F7563A4();
}

void sub_23F753F00()
{
  sub_23F753DC4();
}

void sub_23F753F14()
{
  sub_23F753DC4();
}

void sub_23F753F28()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  sub_23F756414();
  if ((v2 & 1) != 0)
  {
    sub_23F713E9C();
    if (v3 != v4)
    {
      sub_23F713F68();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  sub_23F756244();
  if (v1)
  {
    sub_23F6916B8(&qword_256EA7938);
    v5 = (_QWORD *)sub_23F6B56B0();
    sub_23F756300(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)sub_23F756468();
    sub_23F755318(v6, v7, v8);
    sub_23F75620C();
  }
  else
  {
    v9 = sub_23F756284();
    sub_23F754898(v9, v10, v11, v12);
  }
  sub_23F6B5F7C();
}

void sub_23F753FC4()
{
  sub_23F753DC4();
}

void sub_23F753FD8()
{
  sub_23F75405C();
}

void sub_23F753FE4()
{
  sub_23F753DC4();
}

void sub_23F753FF8()
{
  sub_23F753DC4();
}

void sub_23F75400C()
{
  sub_23F753DC4();
}

void sub_23F754020()
{
  sub_23F753DC4();
}

void sub_23F754034()
{
  sub_23F753DC4();
}

void sub_23F754048()
{
  sub_23F753C74();
}

void sub_23F75405C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  size_t v12;
  char *v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  sub_23F756414();
  if ((v3 & 1) != 0)
  {
    sub_23F713E9C();
    if (v4 != v5)
    {
      sub_23F713F68();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  sub_23F756244();
  if (v2)
  {
    sub_23F713FB4(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23F6B56B0();
    v12 = j__malloc_size(v11);
    v11[2] = v1;
    v11[3] = 2 * v12 - 64;
  }
  if ((v0 & 1) != 0)
  {
    v13 = (char *)sub_23F756468();
    sub_23F755798(v13, v14, v15);
    sub_23F75620C();
  }
  else
  {
    v16 = sub_23F756284();
    sub_23F7549B4(v16, v17, v18, v19);
  }
  sub_23F694C84();
}

void sub_23F7540F4()
{
  sub_23F754110();
}

void sub_23F754110()
{
  uint64_t v0;
  char v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_23F75661C();
  if ((v4 & 1) != 0)
  {
    sub_23F713E9C();
    if (v8 != v9)
    {
      sub_23F713F68();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_23F713FB4(v2, v3, v4, v5, v6);
    v12 = (_QWORD *)sub_23F6B56B0();
    v2 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v2 - 32) / 16);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    sub_23F7566B8();
    sub_23F75620C();
  }
  else
  {
    sub_23F7565B8(v2, v3, (uint64_t)(v12 + 4));
  }
  sub_23F6B5F7C();
}

void sub_23F7541B8()
{
  sub_23F753DC4();
}

void sub_23F7541CC()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  sub_23F756414();
  if ((v2 & 1) != 0)
  {
    sub_23F713E9C();
    if (v3 != v4)
    {
      sub_23F713F68();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  sub_23F756244();
  if (v1)
  {
    sub_23F6916B8(&qword_256EA7928);
    v5 = (_QWORD *)sub_23F6B56B0();
    sub_23F756300(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)sub_23F756468();
    sub_23F7557F8(v6, v7, v8);
    sub_23F75620C();
  }
  else
  {
    v9 = sub_23F756284();
    sub_23F754B58(v9, v10, v11, v12);
  }
  sub_23F6B5F7C();
}

void sub_23F754268()
{
  sub_23F753DC4();
}

void sub_23F75427C()
{
  sub_23F753C74();
}

void sub_23F754290()
{
  sub_23F753DC4();
}

void sub_23F7542A4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  sub_23F756414();
  if ((v3 & 1) != 0)
  {
    sub_23F713E9C();
    if (v4 != v5)
    {
      sub_23F713F68();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  sub_23F756244();
  if (v2)
  {
    sub_23F6916B8(&qword_256EA7908);
    v6 = (_QWORD *)sub_23F6B56B0();
    j__malloc_size(v6);
    sub_23F7566C4();
    v6[2] = v1;
    v6[3] = v7;
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)sub_23F756468();
    sub_23F755228(v8, v9, v10);
    sub_23F75620C();
  }
  else
  {
    v11 = sub_23F756284();
    sub_23F754C74(v11, v12, v13, v14);
  }
  sub_23F694C84();
}

void sub_23F754344()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  sub_23F756414();
  if ((v3 & 1) != 0)
  {
    sub_23F713E9C();
    if (v4 != v5)
    {
      sub_23F713F68();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  sub_23F756244();
  if (v2)
  {
    sub_23F6916B8(&qword_256EA6250);
    v6 = (_QWORD *)sub_23F6B56B0();
    v7 = j__malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 2);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)sub_23F756468();
    sub_23F755864(v8, v9, v10);
    sub_23F75620C();
  }
  else
  {
    v11 = sub_23F756284();
    sub_23F754D88(v11, v12, v13, v14);
  }
  sub_23F694C84();
}

void sub_23F7543F0()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  sub_23F756414();
  if ((v2 & 1) != 0)
  {
    sub_23F713E9C();
    if (v3 != v4)
    {
      sub_23F713F68();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  sub_23F756244();
  if (v1)
  {
    sub_23F6916B8(&qword_256EA6258);
    v5 = (_QWORD *)sub_23F6B56B0();
    sub_23F756300(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)sub_23F756468();
    sub_23F7558BC(v6, v7, v8);
    sub_23F75620C();
  }
  else
  {
    v9 = sub_23F756284();
    sub_23F754E78(v9, v10, v11, v12);
  }
  sub_23F6B5F7C();
}

void sub_23F75448C()
{
  sub_23F753DC4();
}

void sub_23F7544A0()
{
  sub_23F7544BC();
}

void sub_23F7544BC()
{
  uint64_t v0;
  char v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_23F75661C();
  if ((v4 & 1) != 0)
  {
    sub_23F713E9C();
    if (v8 != v9)
    {
      sub_23F713F68();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_23F713E8C();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_23F713FB4(v2, v3, v4, v5, v6);
    v12 = (_QWORD *)sub_23F6B56B0();
    v2 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v2 - 32) / 32);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    sub_23F7566B8();
    sub_23F75620C();
  }
  else
  {
    sub_23F7565B8(v2, v3, (uint64_t)(v12 + 4));
  }
  sub_23F6B5F7C();
}

void sub_23F754564()
{
  sub_23F753DC4();
}

void sub_23F754578()
{
  sub_23F753C74();
}

void sub_23F75458C()
{
  sub_23F753DC4();
}

void sub_23F7545A0()
{
  sub_23F753DC4();
}

void sub_23F7545B4()
{
  sub_23F753DC4();
}

void sub_23F7545C8()
{
  sub_23F753DC4();
}

uint64_t sub_23F7545DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

void sub_23F7546D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_23F7561B8();
    sub_23F7563E4();
    goto LABEL_11;
  }
  v5 = a4 + 8 * a1 + 32;
  if (v5 >= a3 + 8 * v4 || v5 + 8 * v4 <= a3)
  {
    swift_arrayInitWithCopy();
    sub_23F693E04();
    sub_23F6B6BFC();
    return;
  }
  sub_23F7561B8();
  sub_23F7563D4();
LABEL_11:
  sub_23F7561F4();
  __break(1u);
}

uint64_t sub_23F754784(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_23F6916B8(&qword_256EA44E8);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

uint64_t sub_23F754898(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_23F6916B8(&qword_256EA7940);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

void sub_23F7549B4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    sub_23F7561B8();
    sub_23F7563E4();
    goto LABEL_11;
  }
  v5 = (char *)(a4 + a1 + 32);
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    sub_23F693E04();
    sub_23F6B6BFC();
    return;
  }
  sub_23F7561B8();
  sub_23F7563D4();
LABEL_11:
  sub_23F7561F4();
  __break(1u);
}

uint64_t sub_23F754A64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

uint64_t sub_23F754B58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_23F6916B8(&qword_256EA7930);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

uint64_t sub_23F754C74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_23F6916B8(&qword_256EA7910);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

char *sub_23F754D88(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = &__dst[2 * v4];
    if (v5 >= v6 || &v5[2 * v4] <= __dst)
    {
      memcpy(__dst, v5, 2 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)sub_23FB2F9B0();
  __break(1u);
  return result;
}

uint64_t sub_23F754E78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

uint64_t sub_23F754F78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

void sub_23F75506C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v6;
  char v7;
  BOOL v8;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_23F7561B8();
    sub_23F7563E4();
    goto LABEL_11;
  }
  sub_23F713FB4(a1, a2, a3, a4, a5);
  sub_23F756254();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    sub_23F756548();
    sub_23F693E04();
    sub_23F7564F0();
    return;
  }
  sub_23F7561B8();
  sub_23F7563D4();
LABEL_11:
  sub_23F7561F4();
  __break(1u);
}

void sub_23F755114(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v6;
  char v7;
  BOOL v8;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_23F7561B8();
    sub_23F7563E4();
    goto LABEL_11;
  }
  a5(0);
  sub_23F756254();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    sub_23F756548();
    sub_23F693E04();
    sub_23F7564F0();
    return;
  }
  sub_23F7561B8();
  sub_23F7563D4();
LABEL_11:
  sub_23F7561F4();
  __break(1u);
}

char *sub_23F7551C0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

void sub_23F755218(uint64_t a1, uint64_t a2)
{
  sub_23F7559D0(a1, a2);
}

char *sub_23F755228(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

void sub_23F755284(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755290(uint64_t a1, uint64_t a2)
{
  sub_23F7559D0(a1, a2);
}

char *sub_23F75529C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

void sub_23F7552F4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755300(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75530C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

char *sub_23F755318(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_23FB2F9B0();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

void sub_23F7553A4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7553B0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7553BC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7553C8(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7553D4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7553E0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7553EC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7553F8(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755404(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755410(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75541C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755428(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755434(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755440(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75544C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755458(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755464(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755470(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75547C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755488(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755494(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554A0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554AC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554B8(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554C4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554D0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554DC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554E8(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7554F4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755500(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75550C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755518(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755524(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755530(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75553C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755548(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755554(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755560(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75556C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

char *sub_23F755578(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

void sub_23F7555D8(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7555E4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7555F0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7555FC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755608(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755614(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755620(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75562C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755638(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755644(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755650(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75565C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755668(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755674(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755680(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75568C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755698(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556A4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556B0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556BC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556C8(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556D4(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556E0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556EC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7556F8(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755704(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755710(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F75571C(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755728(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755734(uint64_t a1, uint64_t a2)
{
  sub_23F7559D0(a1, a2);
}

char *sub_23F755740(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

char *sub_23F755798(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    sub_23F7561B8();
    __src = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_23F7557F8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

void sub_23F755858(uint64_t a1, uint64_t a2)
{
  sub_23F7559D0(a1, a2);
}

char *sub_23F755864(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[2 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

char *sub_23F7558BC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_23F7561B8();
    result = (char *)sub_23F7561CC();
    __break(1u);
  }
  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)sub_23F7561E4(a3, result);
  }
  return result;
}

char *sub_23F75591C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_23FB2F9B0();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

void sub_23F7559A0(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7559AC(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F7559B8(uint64_t a1, uint64_t a2)
{
  sub_23F7559D0(a1, a2);
}

void sub_23F7559C4(uint64_t a1, uint64_t a2)
{
  sub_23F7559D0(a1, a2);
}

void sub_23F7559D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  char v6;

  if (a2 < 0)
  {
    sub_23F7561B8();
    sub_23F7561CC();
    __break(1u);
  }
  else
  {
    sub_23F756500();
    if (v5 && (sub_23F6916B8(v4), sub_23F75669C(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_23F7564F0();
      }
      else
      {
        sub_23F7562A8();
        sub_23F756380();
      }
    }
    else
    {
      sub_23F6916B8(v4);
      sub_23F7562A8();
      sub_23F756370();
    }
  }
}

void sub_23F755A58(uint64_t a1, uint64_t a2)
{
  sub_23F755A64(a1, a2);
}

void sub_23F755A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;

  if (a2 < 0)
  {
    sub_23F7561B8();
    sub_23F7561CC();
    __break(1u);
  }
  else
  {
    sub_23F756500();
    if (v5 && (v4(0), sub_23F75669C(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_23F7564F0();
      }
      else
      {
        sub_23F7562A8();
        sub_23F756380();
      }
    }
    else
    {
      v4(0);
      sub_23F7562A8();
      sub_23F756370();
    }
  }
}

uint64_t destroy for Parser(uint64_t a1)
{
  uint64_t result;
  int v3;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 != 255)
    return sub_23F73FBF0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v3);
  return result;
}

uint64_t initializeWithCopy for Parser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(unsigned __int8 *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    sub_23F73FBD4(v7, v8, v6);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = v6;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for Parser(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 48);
  v5 = (__int128 *)(a2 + 48);
  v6 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v6 == 255)
    {
      v15 = *v5;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *v4 = v15;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 48);
      v13 = *(_QWORD *)(a2 + 56);
      sub_23F73FBD4(v12, v13, *(_BYTE *)(a2 + 64));
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = v13;
      *(_BYTE *)(a1 + 64) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_23F755D04(a1 + 48);
    v14 = *(_BYTE *)(a2 + 64);
    *v4 = *v5;
    *(_BYTE *)(a1 + 64) = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    sub_23F73FBD4(v7, v8, *(_BYTE *)(a2 + 64));
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    v11 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v6;
    sub_23F73FBF0(v9, v10, v11);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t sub_23F755D04(uint64_t a1)
{
  destroy for Lexer.Token(a1);
  return a1;
}

void *initializeWithTake for Parser(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for Parser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a2 + 48);
  v7 = *(unsigned __int8 *)(a1 + 64);
  if (v7 == 255)
    goto LABEL_5;
  v8 = *(unsigned __int8 *)(a2 + 64);
  if (v8 == 255)
  {
    sub_23F755D04(a1 + 48);
LABEL_5:
    *(_OWORD *)(a1 + 48) = *v6;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *v6;
  *(_BYTE *)(a1 + 64) = v8;
  sub_23F73FBF0(v9, v10, v7);
LABEL_6:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Parser(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Parser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Parser()
{
  return &type metadata for Parser;
}

uint64_t sub_23F755E90()
{
  uint64_t v0;

  sub_23F6A3764(*(_QWORD *)(v0 + 16));
  sub_23F6B6A60();
  sub_23F756638();
  sub_23F6B68BC();
  return swift_deallocObject();
}

unint64_t sub_23F755EB4()
{
  unint64_t result;

  result = qword_256EA7990;
  if (!qword_256EA7990)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B08C, &type metadata for Parser.ParseError);
    atomic_store(result, (unint64_t *)&qword_256EA7990);
  }
  return result;
}

uint64_t sub_23F755EF0()
{
  uint64_t v0;

  sub_23F6A3764(*(_QWORD *)(v0 + 16));
  sub_23F6A3764(*(_QWORD *)(v0 + 24));
  sub_23F6B688C();
  return swift_deallocObject();
}

uint64_t sub_23F755F14()
{
  uint64_t v0;

  sub_23F6A3764(*(_QWORD *)(v0 + 16));
  sub_23F756638();
  sub_23F6B68BC();
  return swift_deallocObject();
}

uint64_t sub_23F755F34()
{
  sub_23F6B6A60();
  sub_23F756638();
  sub_23F6B68BC();
  return swift_deallocObject();
}

uint64_t sub_23F755F50()
{
  uint64_t v0;

  sub_23F6A3764(*(_QWORD *)(v0 + 24));
  sub_23F6A3764(*(_QWORD *)(v0 + 32));
  sub_23F6B68BC();
  return swift_deallocObject();
}

uint64_t sub_23F755F74()
{
  uint64_t v0;

  sub_23F6A3764(*(_QWORD *)(v0 + 24));
  sub_23F6B688C();
  return swift_deallocObject();
}

uint64_t sub_23F755F90()
{
  uint64_t v0;

  sub_23F6AEACC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_23F755FB8()
{
  sub_23F6B6A60();
  sub_23F6B688C();
  return swift_deallocObject();
}

uint64_t sub_23F755FD0()
{
  uint64_t v0;

  sub_23F6B6A60();
  sub_23F6A3764(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23F756000()
{
  uint64_t v0;

  sub_23F6A3764(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for Parser.ParseError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 13) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v5 = v6 - 14;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Parser.ParseError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_23F7560F8 + 4 * byte_23FB5AFF9[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_23F75612C + 4 * byte_23FB5AFF4[v4]))();
}

uint64_t sub_23F75612C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F756134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75613CLL);
  return result;
}

uint64_t sub_23F756148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F756150);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_23F756154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75615C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Parser.ParseError()
{
  return &type metadata for Parser.ParseError;
}

unint64_t sub_23F75617C()
{
  unint64_t result;

  result = qword_256EA7998;
  if (!qword_256EA7998)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B064, &type metadata for Parser.ParseError);
    atomic_store(result, (unint64_t *)&qword_256EA7998);
  }
  return result;
}

uint64_t sub_23F7561CC()
{
  return sub_23FB2F9B0();
}

void *sub_23F7561E4@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_23F7561F4()
{
  return sub_23FB2F9B0();
}

uint64_t sub_23F756200@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_23F75620C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F756218(uint64_t a1, uint64_t a2)
{
  return sub_23F751314(a1, a2, 6u);
}

void sub_23F756220()
{
  uint64_t v0;

  Lexer.next()(v0 - 184);
}

uint64_t sub_23F75622C(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __n128 a10, char a11)
{
  a10 = a1;
  a11 = 6;
  return sub_23F752D98((uint64_t)&a10);
}

uint64_t sub_23F756284()
{
  return 0;
}

uint64_t sub_23F756294()
{
  return swift_beginAccess();
}

uint64_t sub_23F7562A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7562BC()
{
  return swift_allocObject();
}

void sub_23F7562E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 - 176);
  v2 = *(_BYTE *)(v0 - 168);
  *(_QWORD *)(v0 - 112) = *(_QWORD *)(v0 - 184);
  *(_QWORD *)(v0 - 104) = v1;
  *(_BYTE *)(v0 - 96) = v2;
}

uint64_t sub_23F7562F8(uint64_t a1)
{
  return sub_23F752D98(a1);
}

size_t sub_23F756300(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_23F756324(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *v3 = 0;
  v3[1] = 0;
  *(_BYTE *)(v9 - 96) = v4;
  sub_23F751328(v5, v6, a3);
  return sub_23F751314(v8, v7, 6u);
}

void sub_23F756368(uint64_t *a1@<X8>)
{
  sub_23F751AD0(a1);
}

uint64_t sub_23F756370()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t sub_23F756380()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t sub_23F756390(uint64_t a1, uint64_t a2)
{
  return sub_23F751314(a1, a2, 0xFFu);
}

void sub_23F756398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  Lexer.next()((uint64_t)va);
}

uint64_t sub_23F7563BC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  return sub_23F751314(a1, a2, v2);
}

uint64_t sub_23F7563C4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7563F4()
{
  return 0;
}

void sub_23F756408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  Lexer.next()((uint64_t)va);
}

uint64_t sub_23F756420(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  return sub_23F73FBD4(a1, a2, v2);
}

uint64_t sub_23F756444(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;

  return sub_23F751328(a1, v2, v1);
}

uint64_t sub_23F756450@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  sub_23F7511E4(a1);
  return sub_23F751314(a4, a5, a6);
}

uint64_t sub_23F756468()
{
  uint64_t v0;

  return v0 + 32;
}

void sub_23F756474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  static Lexer.Token.== infix(_:_:)((uint64_t)va);
}

uint64_t sub_23F756490()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  return sub_23F751328(v0, v1, v2);
}

uint64_t sub_23F7564A0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7564B0()
{
  return sub_23FB2F254();
}

uint64_t sub_23F7564C0()
{
  return sub_23FB2F254();
}

uint64_t sub_23F7564D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7564E0()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23F73FBD4(v1, v2, v0);
}

uint64_t sub_23F756518(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  return sub_23F73FBD4(a1, a2, v2);
}

uint64_t sub_23F756520()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  return sub_23F73FBF0(v0, v1, v2);
}

unint64_t sub_23F756530()
{
  unint64_t v0;

  return sub_23F6A3764(v0);
}

uint64_t sub_23F756538()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F756548()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_23F756558()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23F73FBD4(v1, v2, v0);
}

uint64_t sub_23F756568()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23F73FBF0(v1, v2, v0);
}

uint64_t sub_23F756578()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F756588()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F751314(v0, v1, 0);
}

unint64_t sub_23F756598()
{
  unint64_t v0;

  return sub_23F6A3764(v0);
}

uint64_t sub_23F7565B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

uint64_t sub_23F7565D4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  sub_23F73FBF0(a1, a2, a3);
  sub_23F73FBF0(24, 0, 6u);
  return v3;
}

unint64_t sub_23F7565FC()
{
  return sub_23F752714();
}

uint64_t sub_23F756608()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F756630()
{
  return sub_23F75133C();
}

uint64_t sub_23F756638()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F756640()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F756648(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_23F751328(v4, v3, a3);
}

BOOL sub_23F756654@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

_QWORD *sub_23F756668@<X0>(_QWORD *a1@<X8>)
{
  return sub_23F751AD0(a1, 0);
}

uint64_t sub_23F756670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  return sub_23F751314(a14, a15, a16);
}

uint64_t sub_23F75667C()
{
  return sub_23FB2F938();
}

unint64_t sub_23F756688()
{
  unint64_t v0;

  return sub_23F6A3764(v0);
}

uint64_t sub_23F756690()
{
  return swift_bridgeObjectRetain_n();
}

size_t sub_23F7566B0(const void *ptr)
{
  return j__malloc_size(ptr);
}

uint64_t sub_23F7566B8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t sub_23F7566D8()
{
  return swift_endAccess();
}

uint64_t sub_23F7566E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 32) = a2;
  return swift_willThrow();
}

uint64_t ParticipantID.name.getter()
{
  uint64_t v0;

  sub_23F756B34();
  return v0;
}

uint64_t ParticipantID.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ParticipantID.name.modify())()
{
  return nullsub_1;
}

uint64_t sub_23F756754@<X0>(Swift::String *a1@<X0>, IntelligenceFlowPlannerSupport::ParticipantID *a2@<X8>)
{
  uint64_t result;
  IntelligenceFlowPlannerSupport::ParticipantID v4;

  v4 = ParticipantID.init(rawValue:)(*a1);
  result = v4.name._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t sub_23F756784@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ParticipantID.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_23F7567AC()
{
  sub_23F7F6E2C();
}

uint64_t sub_23F7567B4()
{
  return sub_23F7F75C0();
}

void sub_23F7567BC()
{
  sub_23F7F79B0();
}

uint64_t sub_23F7567C4(uint64_t *a1, uint64_t *a2)
{
  return sub_23F6BE0D0(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_23F7567D8()
{
  sub_23F756AEC();
  return sub_23FB2F38C();
}

uint64_t sub_23F756834()
{
  sub_23F756AEC();
  return sub_23FB2F374();
}

uint64_t static ParticipantID.coordinator.getter()
{
  return 0x616E6964726F6F63;
}

uint64_t static ParticipantID.client.getter()
{
  return 0x746E65696C63;
}

uint64_t static ParticipantID.executor.getter()
{
  return 0x726F747563657865;
}

uint64_t static ParticipantID.planner.getter()
{
  return 0x72656E6E616C70;
}

uint64_t static ParticipantID.context.getter()
{
  return 0x747865746E6F63;
}

uint64_t static ParticipantID.actionObserver.getter()
{
  return 0x624F6E6F69746361;
}

uint64_t static ParticipantID.testOnly.getter()
{
  return 0x796C6E4F74736574;
}

uint64_t sub_23F75693C@<X0>(Swift::String *a1@<X0>, IntelligenceFlowPlannerSupport::ParticipantID *a2@<X8>)
{
  uint64_t result;
  IntelligenceFlowPlannerSupport::ParticipantID v4;

  v4 = ParticipantID.init(stringLiteral:)(*a1);
  result = v4.name._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t ParticipantID.description.getter()
{
  uint64_t v0;

  sub_23F756B34();
  return v0;
}

unint64_t sub_23F756990()
{
  unint64_t result;

  result = qword_256EA79A0;
  if (!qword_256EA79A0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ParticipantID, &type metadata for ParticipantID);
    atomic_store(result, (unint64_t *)&qword_256EA79A0);
  }
  return result;
}

unint64_t sub_23F7569D0()
{
  unint64_t result;

  result = qword_256EA79A8;
  if (!qword_256EA79A8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ParticipantID, &type metadata for ParticipantID);
    atomic_store(result, (unint64_t *)&qword_256EA79A8);
  }
  return result;
}

uint64_t sub_23F756A0C()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_23F756A1C()
{
  unint64_t result;

  result = qword_256EA79B0;
  if (!qword_256EA79B0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ParticipantID, &type metadata for ParticipantID);
    atomic_store(result, (unint64_t *)&qword_256EA79B0);
  }
  return result;
}

uint64_t sub_23F756A58()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_23F756A64()
{
  return MEMORY[0x24BEE0D88];
}

unint64_t sub_23F756A74()
{
  unint64_t result;

  result = qword_256EA79B8;
  if (!qword_256EA79B8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ParticipantID, &type metadata for ParticipantID);
    atomic_store(result, (unint64_t *)&qword_256EA79B8);
  }
  return result;
}

uint64_t sub_23F756AB0@<X0>(uint64_t a1@<X0>, IntelligenceFlowPlannerSupport::ParticipantID *a2@<X8>)
{
  uint64_t result;
  IntelligenceFlowPlannerSupport::ParticipantID v5;

  v5 = ParticipantID.init(rawValue:)(*(Swift::String *)&a1);
  result = v5.name._countAndFlagsBits;
  *a2 = v5;
  return result;
}

uint64_t sub_23F756AD4()
{
  return ParticipantID.description.getter();
}

ValueMetadata *type metadata accessor for ParticipantID()
{
  return &type metadata for ParticipantID;
}

unint64_t sub_23F756AEC()
{
  unint64_t result;

  result = qword_256EA79C0;
  if (!qword_256EA79C0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ParticipantID, &type metadata for ParticipantID);
    atomic_store(result, (unint64_t *)&qword_256EA79C0);
  }
  return result;
}

uint64_t sub_23F756B34()
{
  return swift_bridgeObjectRetain();
}

uint64_t SessionEventPayloadType.description.getter()
{
  return SessionEventPayloadType.rawValue.getter();
}

uint64_t SessionEventPayloadType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F756BAC + 4 * byte_23FB5B340[*v0]))(0x536E6F6973736553, 0xEC00000074726174);
}

uint64_t sub_23F756BAC()
{
  return 0x74736575716552;
}

uint64_t sub_23F756BC4()
{
  return 0x616572436E616C50;
}

uint64_t sub_23F756BE4()
{
  return 0x72436E6F69746341;
}

uint64_t sub_23F756C08()
{
  return 0x61436E6F69746341;
}

unint64_t sub_23F756C2C()
{
  return 0xD000000000000013;
}

uint64_t sub_23F756EEC()
{
  return 0x7461636572706544;
}

IntelligenceFlowPlannerSupport::SessionEventPayloadType_optional __swiftcall SessionEventPayloadType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  IntelligenceFlowPlannerSupport::SessionEventPayloadType_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_23FB2FBB4();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 14;
  switch(v3)
  {
    case 0:
      goto LABEL_16;
    case 1:
      v5 = 1;
      goto LABEL_16;
    case 2:
      v5 = 2;
      goto LABEL_16;
    case 3:
      v5 = 3;
      goto LABEL_16;
    case 4:
      v5 = 4;
      goto LABEL_16;
    case 5:
      v5 = 5;
      goto LABEL_16;
    case 6:
      v5 = 6;
      goto LABEL_16;
    case 7:
      v5 = 7;
      goto LABEL_16;
    case 8:
      v5 = 8;
      goto LABEL_16;
    case 9:
      v5 = 9;
      goto LABEL_16;
    case 10:
      v5 = 10;
      goto LABEL_16;
    case 11:
      v5 = 11;
      goto LABEL_16;
    case 12:
      v5 = 12;
      goto LABEL_16;
    case 13:
      v5 = 13;
LABEL_16:
      v6 = v5;
      break;
    case 14:
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    case 25:
      v6 = 25;
      break;
    case 26:
      v6 = 26;
      break;
    case 27:
      v6 = 27;
      break;
    case 28:
      v6 = 28;
      break;
    case 29:
      v6 = 29;
      break;
    case 30:
      v6 = 30;
      break;
    case 31:
      v6 = 31;
      break;
    default:
      v6 = 32;
      break;
  }
  *v2 = v6;
  return result;
}

void *static SessionEventPayloadType.allCases.getter()
{
  return &unk_250FEC230;
}

IntelligenceFlowPlannerSupport::SessionEventPayloadType_optional sub_23F757088(Swift::String *a1)
{
  return SessionEventPayloadType.init(rawValue:)(*a1);
}

uint64_t sub_23F757094@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SessionEventPayloadType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23F7570B8()
{
  sub_23F757374();
  return sub_23FB2F38C();
}

uint64_t sub_23F757114()
{
  sub_23F757374();
  return sub_23FB2F374();
}

uint64_t sub_23F757160()
{
  return sub_23F6BE1F8();
}

unint64_t sub_23F757170()
{
  unint64_t result;

  result = qword_256EA79C8;
  if (!qword_256EA79C8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for SessionEventPayloadType, &type metadata for SessionEventPayloadType);
    atomic_store(result, (unint64_t *)&qword_256EA79C8);
  }
  return result;
}

void sub_23F7571AC()
{
  sub_23F7F6E68();
}

uint64_t sub_23F7571B4()
{
  return sub_23F7F72F0();
}

void sub_23F7571BC()
{
  sub_23F7F7B44();
}

unint64_t sub_23F7571CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA79D0;
  if (!qword_256EA79D0)
  {
    v1 = sub_23F6AE310(&qword_256EA79D8);
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256EA79D0);
  }
  return result;
}

void sub_23F757210(_QWORD *a1@<X8>)
{
  *a1 = &unk_250FEC230;
}

uint64_t getEnumTagSinglePayload for SessionEventPayloadType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE1)
  {
    if (a2 + 31 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 31) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 32;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x20;
  v5 = v6 - 32;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionEventPayloadType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 31 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 31) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE0)
    return ((uint64_t (*)(void))((char *)&loc_23F7572F4 + 4 * byte_23FB5B385[v4]))();
  *a1 = a2 + 31;
  return ((uint64_t (*)(void))((char *)sub_23F757328 + 4 * byte_23FB5B380[v4]))();
}

uint64_t sub_23F757328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F757330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F757338);
  return result;
}

uint64_t sub_23F757344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75734CLL);
  *(_BYTE *)result = a2 + 31;
  return result;
}

uint64_t sub_23F757350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F757358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionEventPayloadType()
{
  return &type metadata for SessionEventPayloadType;
}

unint64_t sub_23F757374()
{
  unint64_t result;

  result = qword_256EA79E0[0];
  if (!qword_256EA79E0[0])
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for SessionEventPayloadType, &type metadata for SessionEventPayloadType);
    atomic_store(result, qword_256EA79E0);
  }
  return result;
}

uint64_t Peekable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  v8 = a5 + *(int *)(type metadata accessor for Peekable(0, a2, a3, a4) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v8, 1, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
}

uint64_t type metadata accessor for Peekable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23F744088(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Peekable);
}

void Peekable.next()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_23FB2F65C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  v10 = v2 + *(int *)(a1 + 36);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v11 - v8, v10, v6);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_23FB2F674();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, v9, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    sub_23F750B84(v10, 1);
    sub_23F750B84(a2, 0);
  }
  sub_23F693DDC();
}

void Peekable.peek()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_23FB2F65C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v14 - v10;
  v12 = v2 + *(int *)(a1 + 36);
  sub_23F758228((uint64_t)&v14 - v10);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    sub_23FB2F674();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v12, v9, v5);
    sub_23F758228(v15);
  }
  else
  {
    v13 = v15;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v15, v11, AssociatedTypeWitness);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v13, 0, 1, AssociatedTypeWitness);
  }
  sub_23F693DDC();
}

uint64_t sub_23F7576C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23F7576D0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    v0 = sub_23FB2F65C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_23F757784(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = v7 + v10;
  if (*(_DWORD *)(v9 + 84))
    v13 = *(_QWORD *)(v9 + 64);
  else
    v13 = *(_QWORD *)(v9 + 64) + 1;
  v14 = *(_DWORD *)(v6 + 80) | v10;
  v15 = (*(_BYTE *)(v6 + 80) | v10);
  v16 = v14 & 0x100000;
  if (v15 > 7 || v16 != 0 || (v12 & ~v11) + v13 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  else
  {
    v20 = AssociatedTypeWitness;
    v21 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v22 = (const void *)(((unint64_t)a2 + v12) & v21);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v22, 1, v20))
    {
      memcpy((void *)(((unint64_t)a1 + v12) & v21), v22, v13);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v21, v22, v20);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(((unint64_t)a1 + v12) & v21, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t sub_23F7578CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v7, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(v7, AssociatedTypeWitness);
  return result;
}

uint64_t sub_23F757974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  size_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v8 + 84))
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = *(_QWORD *)(v8 + 64) + 1;
    memcpy(v10, v11, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_23F757A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  LODWORD(v6) = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v10, 1, AssociatedTypeWitness);
  v12 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, AssociatedTypeWitness);
  if ((_DWORD)v6)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v13);
  return a1;
}

uint64_t sub_23F757B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  size_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v8 + 84))
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = *(_QWORD *)(v8 + 64) + 1;
    memcpy(v10, v11, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_23F757C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  LODWORD(v6) = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v10, 1, AssociatedTypeWitness);
  v12 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, AssociatedTypeWitness);
  if ((_DWORD)v6)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v13);
  return a1;
}

uint64_t sub_23F757DAC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if ((_DWORD)v10)
    v13 = *(_QWORD *)(v9 + 64);
  else
    v13 = *(_QWORD *)(v9 + 64) + 1;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14;
  if (a2 <= v12)
    goto LABEL_29;
  v16 = v13 + (v15 & ~v14);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((a2 - v12 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v19 < 2)
    {
LABEL_29:
      if (v12)
      {
        if (v7 >= v11)
          return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, v7, v5);
        v22 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((v15 + a1) & ~v14, v10, AssociatedTypeWitness);
        if (v22 >= 2)
          return v22 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_29;
LABEL_20:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = v16;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  return v12 + v20 + 1;
}

void sub_23F757F70(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  int v21;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  v14 = (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = *(_QWORD *)(v10 + 64);
  if (v11)
    v16 = v15;
  else
    v16 = v15 + 1;
  v17 = v14 + v16;
  v18 = 8 * (v14 + v16);
  if (a3 > v13)
  {
    if (v17 <= 3)
    {
      v19 = ((a3 - v13 + ~(-1 << v18)) >> v18) + 1;
      if (HIWORD(v19))
      {
        v9 = 4u;
      }
      else if (v19 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v19 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  if (v13 < a2)
  {
    v20 = ~v13 + a2;
    if (v17 < 4)
    {
      if ((_DWORD)v17)
      {
        v21 = v20 & ~(-1 << v18);
        bzero(a1, v17);
        if ((_DWORD)v17 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if ((_DWORD)v17 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v20;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_23F7581D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23F7581E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23F758204()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23F758214()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23F75821C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_23F758228(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

uint64_t sub_23F758234()
{
  uint64_t v0;

  v0 = sub_23FB2E7F8();
  sub_23F6D3418(v0, qword_256EA7A68);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA7A68);
  return sub_23FB2E7EC();
}

void static PlanGenerationTelemetry.started(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v71 = a2;
  v72 = a3;
  v84 = a1;
  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v83 = v6;
  sub_23F6916B8(&qword_256EA70A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v79 = v8;
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5560(v10, (uint64_t)v68);
  v11 = sub_23F759798();
  v81 = *(_QWORD *)(v11 - 8);
  v82 = v11;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5810(v13, (uint64_t)v68);
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B51A4();
  v73 = v15;
  sub_23F6916B8(&qword_256EA7A80);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6BD134();
  v19 = (uint64_t *)(v18 - v17);
  v20 = sub_23FB2E708();
  v77 = *(_QWORD *)(v20 - 8);
  v78 = v20;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA7A88);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_23FB2E63C();
  v87 = *(_QWORD *)(v25 - 8);
  v88 = v25;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B51A4();
  v74 = v27;
  v28 = sub_23FB2E60C();
  v85 = *(_QWORD *)(v28 - 8);
  v86 = v28;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6BD134();
  v32 = (void *)(v31 - v30);
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6BD134();
  v36 = v35 - v34;
  v37 = sub_23FB2E510();
  v38 = *(_QWORD *)(v37 - 8);
  sub_23F693E20();
  v40 = MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v68 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v44 = (char *)&v68 - v43;
  v76 = a4;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  v45 = type metadata accessor for Session.Transcript(0);
  sub_23F7A12D0(*(_QWORD *)(v84 + *(int *)(v45 + 32)), v36);
  v46 = type metadata accessor for Session.Event(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v36, 1, v46) == 1)
  {
    sub_23F759568(v36, &qword_256EA7A90);
    if (qword_256EA0A78 != -1)
      swift_once();
    v47 = sub_23F693F0C();
    sub_23F6BF1A4(v47, (uint64_t)qword_256EA7A68);
    sub_23FB2E7E0();
    v48 = sub_23F6B921C();
    if (sub_23F759600(v48))
    {
      *(_WORD *)sub_23F7595E8() = 0;
      sub_23F7595AC(&dword_23F68F000, v49, v50, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_23F693DD0();
    }

  }
  else
  {
    Session.Event.formingTraceIds()();
    sub_23F7594E4(v36);
    v69 = v37;
    v70 = v38;
    v51 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v68 = v44;
    v51(v44, v42, v37);
    sub_23FB2E600();
    swift_bridgeObjectRetain();
    sub_23FB2E5F4();
    v52 = v74;
    sub_23FB2E630();
    (*(void (**)(char *, void *, uint64_t))(v85 + 16))(v24, v32, v86);
    sub_23FB2E618();
    sub_23F75964C();
    sub_23F7595F4((uint64_t)v24, v53);
    sub_23F6BC4AC((uint64_t)v24);
    sub_23FB2E624();
    sub_23FB2E6FC();
    v54 = v88;
    v55 = swift_allocBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v56, v52, v54);
    *v19 = v55;
    sub_23F759790();
    sub_23F75964C();
    sub_23F7595F4((uint64_t)v19, v57);
    sub_23F6BC4AC((uint64_t)v19);
    sub_23FB2E6E4();
    v58 = sub_23F72E034();
    v59 = v73;
    sub_23F6D3ECC(v73, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16));
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v59, 0, 1, v58);
    sub_23FB2E6F0();
    sub_23F7597A8();
    v60 = v75;
    sub_23FB2E720();
    v61 = sub_23F759788();
    sub_23F75965C(v60, v62, v63, v61);
    v64 = v80;
    sub_23F7A1678((uint64_t)v44, v60);
    sub_23F759568(v60, &qword_256EA70B0);
    v65 = v79;
    sub_23F75977C(v79, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16));
    sub_23F7597A0();
    sub_23F75964C();
    sub_23F7595F4(v65, v66);
    sub_23F7596F8();
    sub_23FB2E48C();
    sub_23F7597B0();
    sub_23F75964C();
    sub_23F7595F4(v83, v67);
    sub_23F7596F8();
    sub_23FB2E438();
    static TelemetryStream.insert(_:)();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v64, v82);
    sub_23F7596C8();
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v52, v88);
    sub_23F759768(v85);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v69);
  }
  sub_23F693DDC();
}

void static PlanGenerationTelemetry.modelInferenceCallEnded(modelInterface:modelIdentifier:traceIds:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;

  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v75 = v8;
  sub_23F6916B8(&qword_256EA70A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B51A4();
  v73 = v10;
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6BD134();
  v14 = v13 - v12;
  v76 = sub_23F759798();
  v70 = *(_QWORD *)(v76 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B57D8(v16, v61);
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6BD134();
  v20 = v19 - v18;
  sub_23F6916B8(&qword_256EA7A80);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B51A4();
  v23 = sub_23F7596D8(v22);
  v71 = *(_QWORD *)(v23 - 8);
  v72 = v23;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F75962C(v25, v62);
  sub_23F6916B8(&qword_256EA7A98);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B51A4();
  v65 = v27;
  v85 = sub_23FB2E6CC();
  v86 = *(_QWORD *)(v85 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B51A4();
  v68 = v29;
  sub_23F6916B8(&qword_256EA7AA0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B51A4();
  v64 = v31;
  v32 = sub_23FB2E66C();
  v83 = *(_QWORD *)(v32 - 8);
  v84 = v32;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B51A4();
  v82 = v34;
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v35);
  v36 = (_QWORD *)sub_23F7595CC();
  v81 = *(v36 - 1);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6B5544(v38, v63);
  v88 = sub_23F72E034();
  v39 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  sub_23F6BD134();
  v42 = v41 - v40;
  if (qword_256EA0A78 != -1)
    swift_once();
  v43 = sub_23F693F0C();
  sub_23F6BF1A4(v43, (uint64_t)qword_256EA7A68);
  swift_bridgeObjectRetain_n();
  v44 = sub_23FB2E7E0();
  v45 = sub_23FB2F5D8();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc();
    v89 = swift_slowAlloc();
    *(_DWORD *)v46 = 136315138;
    swift_bridgeObjectRetain();
    sub_23F69334C(a2, a3, &v89);
    sub_23FB2F680();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23F68F000, v44, v45, "Model inference successful, using model: %s", v46, 0xCu);
    swift_arrayDestroy();
    sub_23F693DD0();
  }

  swift_bridgeObjectRelease_n();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  sub_23F759520(a4, v5);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v5, 1, (uint64_t)v36) == 1)
  {
    sub_23F759568(v5, &qword_256EA7AA8);
    sub_23FB2E7E0();
    v47 = sub_23F6B921C();
    if (sub_23F759600(v47))
    {
      *(_WORD *)sub_23F7595E8() = 0;
      sub_23F7595AC(&dword_23F68F000, v48, v49, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_23F693DD0();
    }

  }
  else
  {
    sub_23F759774(v80, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 32));
    sub_23FB2E660();
    v50 = sub_23FB2E69C();
    v78 = v36;
    sub_23F759774(v64, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16));
    sub_23F759668(v64);
    MEMORY[0x2426732CC](v64);
    swift_bridgeObjectRetain();
    v51 = sub_23FB2E654();
    MEMORY[0x242673344](v51);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v65, v82, v84);
    v52 = sub_23FB2E6A8();
    sub_23F759610(v52);
    sub_23F759744();
    sub_23FB2E6B4();
    sub_23FB2E6FC();
    v53 = swift_allocBox();
    sub_23F6D3ECC(v54, v68, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 16));
    *v67 = v53;
    v55 = sub_23F759790();
    sub_23F759610(v55);
    sub_23F759744();
    sub_23FB2E6E4();
    sub_23F759774(v20, v42, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
    sub_23F759668(v20);
    sub_23FB2E6F0();
    sub_23F7597A8();
    sub_23FB2E720();
    v56 = sub_23F759788();
    sub_23F75965C(v14, v57, v58, v56);
    sub_23F7A1678(v80, v14);
    sub_23F759568(v14, &qword_256EA70B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v73, v69, v72);
    v59 = sub_23F7597A0();
    sub_23F7595C0(v73, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104));
    sub_23F759678();
    sub_23FB2E48C();
    sub_23F7597B0();
    sub_23F7596E8();
    sub_23F7595C0(v75, v60);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v75, 0, 1, v59);
    sub_23FB2E438();
    static TelemetryStream.insert(_:)();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v74, v76);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v72);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v68, v85);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    (*(void (**)(uint64_t, _QWORD *))(v81 + 8))(v80, v78);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(a5, v42, v88);
  sub_23F693DDC();
}

void static PlanGenerationTelemetry.modelInferenceCallFailed(modelInterface:traceIds:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;

  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v70 = v8;
  sub_23F6916B8(&qword_256EA70A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5560(v10, v61);
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6BD134();
  v14 = v13 - v12;
  v72 = sub_23F759798();
  v71 = *(_QWORD *)(v72 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B5544(v16, v62);
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B51A4();
  v69 = v18;
  sub_23F6916B8(&qword_256EA7A80);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6B51A4();
  v73 = *(_QWORD *)(sub_23F7596D8(v20) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B57D8(v22, v63);
  sub_23F6916B8(&qword_256EA7A98);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B53AC();
  v84 = sub_23FB2E6CC();
  v78 = *(_QWORD *)(v84 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B51A4();
  v83 = v25;
  sub_23F6916B8(&qword_256EA7AA0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F75962C(v27, v64);
  v28 = sub_23FB2E690();
  v80 = *(_QWORD *)(v28 - 8);
  v81 = v28;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6B5810(v30, v65);
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v31);
  v32 = sub_23F7595CC();
  v77 = *(_QWORD *)(v32 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B51A4();
  v76 = v34;
  v82 = sub_23F72E034();
  v85 = *(_QWORD *)(v82 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F6B51A4();
  v87 = v36;
  if (qword_256EA0A78 != -1)
    swift_once();
  v37 = sub_23F693F0C();
  sub_23F6BF1A4(v37, (uint64_t)qword_256EA7A68);
  v38 = sub_23FB2E7E0();
  v39 = sub_23FB2F5F0();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)sub_23F7595E8();
    *(_WORD *)v40 = 0;
    _os_log_impl(&dword_23F68F000, v38, v39, "Model inference FAILED", v40, 2u);
    sub_23F693DD0();
  }

  v41 = v87;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  sub_23F759520((uint64_t)a2, v3);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v3, 1, v32) == 1)
  {
    sub_23F759568(v3, &qword_256EA7AA8);
    sub_23FB2E7E0();
    v42 = sub_23F6B921C();
    if (sub_23F759600(v42))
    {
      *(_WORD *)sub_23F7595E8() = 0;
      sub_23F7595AC(&dword_23F68F000, v43, v44, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_23F693DD0();
    }

    v45 = v82;
    v46 = v85;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v76, v3, v32);
    sub_23FB2E684();
    v47 = sub_23FB2E69C();
    sub_23F6D3ECC(v66, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16));
    v48 = sub_23F759720();
    v49 = MEMORY[0x2426732FC](v48);
    MEMORY[0x242673344](v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v4, v79, v81);
    v50 = *MEMORY[0x24BE59A10];
    v51 = sub_23FB2E6A8();
    sub_23F7595C0(v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104));
    sub_23F759678();
    sub_23FB2E6B4();
    sub_23FB2E6FC();
    v52 = swift_allocBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v53, v50, v84);
    *v67 = v52;
    v54 = *MEMORY[0x24BE59A40];
    v55 = sub_23F759790();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v67, v54, v55);
    sub_23F759720();
    sub_23FB2E6E4();
    v68 = v32;
    v46 = v85;
    v45 = v82;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v69, v87, v82);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v69, 0, 1, v82);
    sub_23FB2E6F0();
    sub_23F7597A8();
    sub_23FB2E720();
    v56 = sub_23F759788();
    sub_23F75965C(v14, v57, v58, v56);
    sub_23F7A1678(v76, v14);
    sub_23F759568(v14, &qword_256EA70B0);
    sub_23F75977C(v74, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 16));
    sub_23F7597A0();
    sub_23F7596E8();
    sub_23F7595C0(v74, v59);
    sub_23F7596A0();
    sub_23FB2E48C();
    sub_23F7597B0();
    sub_23F7596E8();
    sub_23F7595C0(v70, v60);
    sub_23F7596A0();
    sub_23FB2E438();
    static TelemetryStream.insert(_:)();
    v41 = v87;
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v75, v72);
    sub_23F7596C8();
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v68);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(a3, v41, v45);
  sub_23F693DDC();
}

uint64_t sub_23F7594E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Session.Event(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23F759520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA7AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F759568(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23F6916B8(a2);
  sub_23F759768(*(_QWORD *)(v3 - 8));
  return a1;
}

ValueMetadata *type metadata accessor for PlanGenerationTelemetry()
{
  return &type metadata for PlanGenerationTelemetry;
}

void sub_23F7595AC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_23F7595C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_23F7595CC()
{
  return sub_23FB2E510();
}

uint64_t sub_23F7595E8()
{
  return swift_slowAlloc();
}

uint64_t sub_23F7595F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

BOOL sub_23F759600(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_23F759610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v2, v1, a1);
}

void sub_23F75962C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 272) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_23F75965C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, 0, 1, a4);
}

uint64_t sub_23F759668(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, 0, 1, v1);
}

uint64_t sub_23F759678()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_23F7596A0()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_23F7596C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_23F7596D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23FB2E708();
}

uint64_t sub_23F7596F8()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_23F759720()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_23F759744()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_23F759768@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_23F759774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_23F75977C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_23F759788()
{
  return sub_23FB2E72C();
}

uint64_t sub_23F759790()
{
  return sub_23FB2E6D8();
}

uint64_t sub_23F759798()
{
  return sub_23FB2E4A4();
}

uint64_t sub_23F7597A0()
{
  return sub_23FB2E480();
}

uint64_t sub_23F7597A8()
{
  return type metadata accessor for TelemetryStream();
}

uint64_t sub_23F7597B0()
{
  return sub_23FB2E420();
}

uint64_t sub_23F7597B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5464656C696166 && a2 == 0xEC0000006E616C50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7598B4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F5464656C696166;
  else
    return 0x726568746FLL;
}

uint64_t sub_23F7598F0()
{
  char *v0;

  return sub_23F7598B4(*v0);
}

uint64_t sub_23F7598F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7597B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F75991C()
{
  sub_23F75A1B4();
  return sub_23FB2FD10();
}

uint64_t sub_23F759944()
{
  sub_23F75A1B4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F75996C()
{
  sub_23F75A1F0();
  return sub_23FB2FD10();
}

uint64_t sub_23F759994()
{
  sub_23F75A1F0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7599BC()
{
  sub_23F75A22C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7599E4()
{
  sub_23F75A22C();
  return sub_23FB2FD1C();
}

uint64_t sub_23F759A0C()
{
  sub_23F6F2930(&qword_256EA7B20, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  return sub_23FB2FC08();
}

uint64_t sub_23F759A4C()
{
  sub_23F6F2930(&qword_256EA7B20, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  return sub_23FB2FBFC();
}

void PlannerError.innerError.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  sub_23F75AC5C();
  sub_23F693E20();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  sub_23F759C44(v1, (uint64_t)&v14 - v7);
  v9 = sub_23F6F74E8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_23F759C44(v1, (uint64_t)v6);
    sub_23F6F2930(&qword_256EA4858, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
    v10 = (void *)swift_allocError();
    sub_23F759C88((uint64_t)v6, v11);
    v12 = sub_23FB2C284();
    a1[3] = sub_23F6F57D0();
    a1[4] = sub_23F6F2930(&qword_256EA4878, (uint64_t (*)(uint64_t))sub_23F6F57D0, (uint64_t)&protocol conformance descriptor for NSError);

    *a1 = v12;
  }
  else
  {
    a1[3] = v9;
    a1[4] = sub_23F6F2930(&qword_256EA4870, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], (uint64_t)&protocol conformance descriptor for IntelligenceFlowError);
    v13 = sub_23F6F601C(a1);
    (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v13, v8, v9);
  }
}

uint64_t type metadata accessor for PlannerError()
{
  uint64_t result;

  result = qword_256EA7B98;
  if (!qword_256EA7B98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23F759C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlannerError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F759C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlannerError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PlannerError.errorCodeValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F75AC5C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6BD134();
  v4 = v3 - v2;
  sub_23F759C44(v0, v3 - v2);
  v5 = sub_23F6F74E8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v4, 1, v5) == 1)return 2;
  sub_23F759D48(v4);
  return 1;
}

uint64_t sub_23F759D48(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlannerError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static PlannerError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  void (*v21)(uint64_t, uint64_t);

  v4 = sub_23F6F74E8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v8 = v7 - v6;
  sub_23F75AC5C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6BD134();
  v12 = v11 - v10;
  sub_23F6916B8(&qword_256EA7AB0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6BD134();
  v16 = v15 - v14;
  v18 = v15 - v14 + *(int *)(v17 + 48);
  sub_23F759C44(a1, v15 - v14);
  sub_23F759C44(a2, v18);
  sub_23F6F7524(v16);
  if (!v20)
  {
    sub_23F759C44(v16, v12);
    sub_23F6F7524(v18);
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v18, v4);
      v19 = sub_23FB2C6EC();
      v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v21(v8, v4);
      v21(v12, v4);
      sub_23F759D48(v16);
      return v19 & 1;
    }
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
LABEL_9:
    sub_23F759F08(v16);
    v19 = 0;
    return v19 & 1;
  }
  sub_23F6F7524(v18);
  if (!v20)
    goto LABEL_9;
  sub_23F759D48(v16);
  v19 = 1;
  return v19 & 1;
}

uint64_t sub_23F759F08(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA7AB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void PlannerError.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = sub_23F6916B8(&qword_256EA7AB8);
  v18 = *(_QWORD *)(v3 - 8);
  v19 = v3;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  v17 = v5;
  v6 = sub_23F6916B8(&qword_256EA7AC0);
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v20 = v8;
  v9 = sub_23F6F74E8();
  v24 = *(_QWORD *)(v9 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F75AC40();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6BD134();
  v14 = v13 - v12;
  v15 = sub_23F6916B8(&qword_256EA7AC8);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6BD134();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F75A1B4();
  sub_23FB2FCC8();
  sub_23F759C44(v23, v14);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v14, 1, v9) == 1)
  {
    sub_23F75A1F0();
    sub_23F6F7514();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v1, v14, v9);
    sub_23F75A22C();
    sub_23F6F7514();
    sub_23F6F2930(&qword_256EA48B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52090]);
    sub_23FB2FB18();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v1, v9);
  }
  sub_23F6F7574(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  sub_23F6B5100();
}

unint64_t sub_23F75A1B4()
{
  unint64_t result;

  result = qword_256EA7AD0;
  if (!qword_256EA7AD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BA48, &type metadata for PlannerError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7AD0);
  }
  return result;
}

unint64_t sub_23F75A1F0()
{
  unint64_t result;

  result = qword_256EA7AD8;
  if (!qword_256EA7AD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B9F8, &type metadata for PlannerError.FailedToPlanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7AD8);
  }
  return result;
}

unint64_t sub_23F75A22C()
{
  unint64_t result;

  result = qword_256EA7AE0;
  if (!qword_256EA7AE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B9A8, &type metadata for PlannerError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7AE0);
  }
  return result;
}

void PlannerError.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char v56;

  v50 = a2;
  v4 = sub_23F6916B8(&qword_256EA7AE8);
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v51 = v6;
  v7 = sub_23F6916B8(&qword_256EA7AF0);
  v8 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  v49 = v8;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B51A4();
  v52 = v10;
  v11 = sub_23F6916B8(&qword_256EA7AF8);
  v53 = *(_QWORD *)(v11 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23F75AC40();
  sub_23F693E20();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v43 - v18;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F75A1B4();
  v20 = (uint64_t)v54;
  sub_23FB2FCB0();
  if (v20)
    goto LABEL_7;
  v43 = v17;
  v54 = v19;
  v21 = sub_23FB2FA94();
  v22 = *(_QWORD *)(v21 + 16);
  v23 = v2;
  v44 = a1;
  v45 = v11;
  if (!v22
    || (v24 = *(_BYTE *)(v21 + 32),
        sub_23F6B4E44(1, v22, v21, v21 + 32, 0, (2 * v22) | 1),
        v26 = v25,
        v28 = v27,
        swift_bridgeObjectRelease(),
        v26 != v28 >> 1))
  {
    v30 = v53;
    v31 = sub_23FB2F818();
    swift_allocError();
    v33 = v32;
    sub_23F6916B8(&qword_256EA1870);
    *v33 = v13;
    v34 = v45;
    sub_23FB2FA04();
    sub_23FB2F80C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x24BEE26D0], v31);
    swift_willThrow();
    sub_23F6B68E0();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v23, v34);
    a1 = v44;
LABEL_7:
    v35 = (uint64_t)a1;
    goto LABEL_8;
  }
  if ((v24 & 1) != 0)
  {
    v56 = 1;
    sub_23F75A1F0();
    v29 = v51;
    sub_23F6F7504();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v29, v47);
    sub_23F6B68E0();
    v36 = sub_23F6F7550();
    v37(v36);
    v38 = sub_23F6F74E8();
    v39 = (uint64_t)v54;
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v54, 1, 1, v38);
  }
  else
  {
    v55 = 0;
    sub_23F75A22C();
    sub_23F6F7504();
    v41 = sub_23F6F74E8();
    sub_23F6F2930(&qword_256EA48D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52098]);
    v42 = (uint64_t)v43;
    sub_23FB2FA7C();
    sub_23F6F74F0();
    sub_23F6F756C();
    sub_23F6F7540();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v42, 0, 1, v41);
    v39 = (uint64_t)v54;
    sub_23F759C88(v42, (uint64_t)v54);
  }
  v40 = (uint64_t)v44;
  sub_23F759C88(v39, v50);
  v35 = v40;
LABEL_8:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v35);
  sub_23F6B5100();
}

void sub_23F75A6A0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PlannerError.init(from:)(a1, a2);
}

void sub_23F75A6B4(_QWORD *a1)
{
  PlannerError.encode(to:)(a1);
}

uint64_t sub_23F75A6D4(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23F6F2930(&qword_256EA7B00, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  a1[2] = sub_23F6F2930(&qword_256EA7B08, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  a1[3] = sub_23F6F2930(&qword_256EA7B10, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  result = sub_23F6F2930(&qword_256EA7B18, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  a1[4] = result;
  return result;
}

uint64_t sub_23F75A768(uint64_t a1)
{
  uint64_t result;

  result = sub_23F6F2930(&qword_256EA7B00, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23F75A7A4(uint64_t a1)
{
  uint64_t result;

  result = sub_23F6F2930(&qword_256EA7B20, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23F75A7E0()
{
  return sub_23F6F2930(&qword_256EA4858, (uint64_t (*)(uint64_t))type metadata accessor for PlannerError, (uint64_t)&protocol conformance descriptor for PlannerError);
}

uint64_t getEnumTagSinglePayload for PlannerError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F75A818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_23F6F74E8();
  v5 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlannerError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F75A864(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_23F6F74E8();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, v5, a3, v6);
}

uint64_t storeEnumTagSinglePayload for PlannerError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F75A8F4 + 4 * byte_23FB5B625[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F75A928 + 4 * asc_23FB5B620[v4]))();
}

uint64_t sub_23F75A928(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75A930(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75A938);
  return result;
}

uint64_t sub_23F75A944(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75A94CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F75A950(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75A958(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlannerError.CodingKeys()
{
  return &type metadata for PlannerError.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PlannerError.OtherCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F75A9B4 + 4 * byte_23FB5B62A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F75A9D4 + 4 * byte_23FB5B62F[v4]))();
}

_BYTE *sub_23F75A9B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F75A9D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F75A9DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F75A9E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F75A9EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F75A9F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PlannerError.OtherCodingKeys()
{
  return &type metadata for PlannerError.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for PlannerError.FailedToPlanCodingKeys()
{
  return &type metadata for PlannerError.FailedToPlanCodingKeys;
}

unint64_t sub_23F75AA24()
{
  unint64_t result;

  result = qword_256EA7BA8;
  if (!qword_256EA7BA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B8C8, &type metadata for PlannerError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BA8);
  }
  return result;
}

unint64_t sub_23F75AA64()
{
  unint64_t result;

  result = qword_256EA7BB0;
  if (!qword_256EA7BB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B980, &type metadata for PlannerError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BB0);
  }
  return result;
}

unint64_t sub_23F75AAA4()
{
  unint64_t result;

  result = qword_256EA7BB8;
  if (!qword_256EA7BB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B838, &type metadata for PlannerError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BB8);
  }
  return result;
}

unint64_t sub_23F75AAE4()
{
  unint64_t result;

  result = qword_256EA7BC0;
  if (!qword_256EA7BC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B860, &type metadata for PlannerError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BC0);
  }
  return result;
}

unint64_t sub_23F75AB24()
{
  unint64_t result;

  result = qword_256EA7BC8;
  if (!qword_256EA7BC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B7E8, &type metadata for PlannerError.FailedToPlanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BC8);
  }
  return result;
}

unint64_t sub_23F75AB64()
{
  unint64_t result;

  result = qword_256EA7BD0;
  if (!qword_256EA7BD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B810, &type metadata for PlannerError.FailedToPlanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BD0);
  }
  return result;
}

unint64_t sub_23F75ABA4()
{
  unint64_t result;

  result = qword_256EA7BD8;
  if (!qword_256EA7BD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B8F0, &type metadata for PlannerError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BD8);
  }
  return result;
}

unint64_t sub_23F75ABE4()
{
  unint64_t result;

  result = qword_256EA7BE0;
  if (!qword_256EA7BE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5B918, &type metadata for PlannerError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BE0);
  }
  return result;
}

uint64_t _s30IntelligenceFlowPlannerSupport0C5ErrorO16errorDomainValueSSvgZ_0()
{
  return 0x4572656E6E616C50;
}

uint64_t sub_23F75AC40()
{
  return type metadata accessor for PlannerError();
}

uint64_t sub_23F75AC5C()
{
  return type metadata accessor for PlannerError();
}

uint64_t PlannerSpanMatchServiceInput.query.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

IntelligenceFlowPlannerSupport::PlannerSpanMatchServiceInput __swiftcall PlannerSpanMatchServiceInput.init(query:)(IntelligenceFlowPlannerSupport::PlannerSpanMatchServiceInput query)
{
  IntelligenceFlowPlannerSupport::PlannerSpanMatchServiceInput *v1;

  *v1 = query;
  return query;
}

uint64_t sub_23F75AC98()
{
  sub_23F75ADB8();
  return sub_23FB2FD10();
}

uint64_t sub_23F75ACC0()
{
  sub_23F75ADB8();
  return sub_23FB2FD1C();
}

void PlannerSpanMatchServiceInput.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  sub_23F6B5220();
  a19 = v21;
  a20 = v22;
  a10 = v20;
  v24 = v23;
  v25 = sub_23F6916B8(&qword_256EA7BE8);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6ADC98(v24, v24[3]);
  sub_23F75ADB8();
  sub_23FB2FCC8();
  sub_23FB2FADC();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  sub_23F6B5100();
}

unint64_t sub_23F75ADB8()
{
  unint64_t result;

  result = qword_256EA7BF0;
  if (!qword_256EA7BF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BD6C, &type metadata for PlannerSpanMatchServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7BF0);
  }
  return result;
}

void PlannerSpanMatchServiceInput.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_23F6B5220();
  v2 = v1;
  v4 = v3;
  sub_23F6916B8(&qword_256EA7BF8);
  sub_23F75B5B0();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6ADC98(v2, v2[3]);
  sub_23F75ADB8();
  sub_23F75B598();
  if (!v0)
  {
    v6 = sub_23FB2FA40();
    v8 = v7;
    sub_23F75B588();
    *v4 = v6;
    v4[1] = v8;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  sub_23F6B5100();
}

void sub_23F75AEBC()
{
  PlannerSpanMatchServiceInput.init(from:)();
}

#error "23F75AED8: call analysis failed (funcsize=5)"

uint64_t PlannerSpanMatchServiceOutput.matches.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlannerSpanMatchServiceOutput.init(matches:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_23F75AEF4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x7365686374616DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F75AF78()
{
  return 0x7365686374616DLL;
}

uint64_t sub_23F75AF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F75AEF4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F75AFBC()
{
  sub_23F75B118();
  return sub_23FB2FD10();
}

uint64_t sub_23F75AFE4()
{
  sub_23F75B118();
  return sub_23FB2FD1C();
}

void PlannerSpanMatchServiceOutput.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  sub_23F6B5220();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v25 = sub_23F6916B8(&qword_256EA7C00);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *v20;
  sub_23F6ADC98(v24, v24[3]);
  sub_23F75B118();
  sub_23FB2FCC8();
  a10 = v29;
  sub_23F6916B8(&qword_256EA46E0);
  sub_23F75B254((unint64_t *)&qword_256EA7C10, &qword_256EA7C18, MEMORY[0x24BE578C8], MEMORY[0x24BEE12A0]);
  sub_23FB2FB18();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  sub_23F6B5100();
}

unint64_t sub_23F75B118()
{
  unint64_t result;

  result = qword_256EA7C08;
  if (!qword_256EA7C08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BD1C, &type metadata for PlannerSpanMatchServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7C08);
  }
  return result;
}

void PlannerSpanMatchServiceOutput.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  sub_23F6B5220();
  v12 = v11;
  v14 = v13;
  sub_23F6916B8(&qword_256EA7C20);
  sub_23F75B5B0();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6ADC98(v12, v12[3]);
  sub_23F75B118();
  sub_23F75B598();
  if (!v10)
  {
    sub_23F6916B8(&qword_256EA46E0);
    sub_23F75B254((unint64_t *)&qword_256EA7C28, &qword_256EA7C30, MEMORY[0x24BE578D8], MEMORY[0x24BEE12D0]);
    sub_23FB2FA7C();
    sub_23F75B588();
    *v14 = a10;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  sub_23F6B5100();
}

uint64_t sub_23F75B254(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_23F6AE310(&qword_256EA46E0);
    v10 = sub_23F75B2D0(a2, a3);
    result = MEMORY[0x242674E5C](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23F75B2D0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23FB2DE8C();
    result = MEMORY[0x242674E5C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23F75B310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  PlannerSpanMatchServiceOutput.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

#error "23F75B32C: call analysis failed (funcsize=5)"

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceInput()
{
  return &type metadata for PlannerSpanMatchServiceInput;
}

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceOutput()
{
  return &type metadata for PlannerSpanMatchServiceOutput;
}

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceOutput.CodingKeys()
{
  return &type metadata for PlannerSpanMatchServiceOutput.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport29PlannerSpanMatchServiceOutputV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F75B3AC + 4 * byte_23FB5BAA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F75B3CC + 4 * byte_23FB5BAA5[v4]))();
}

_BYTE *sub_23F75B3AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F75B3CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F75B3D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F75B3DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F75B3E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F75B3EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceInput.CodingKeys()
{
  return &type metadata for PlannerSpanMatchServiceInput.CodingKeys;
}

unint64_t sub_23F75B40C()
{
  unint64_t result;

  result = qword_256EA7C38;
  if (!qword_256EA7C38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BC3C, &type metadata for PlannerSpanMatchServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7C38);
  }
  return result;
}

unint64_t sub_23F75B44C()
{
  unint64_t result;

  result = qword_256EA7C40;
  if (!qword_256EA7C40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BCF4, &type metadata for PlannerSpanMatchServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7C40);
  }
  return result;
}

unint64_t sub_23F75B48C()
{
  unint64_t result;

  result = qword_256EA7C48;
  if (!qword_256EA7C48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BC64, &type metadata for PlannerSpanMatchServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7C48);
  }
  return result;
}

unint64_t sub_23F75B4CC()
{
  unint64_t result;

  result = qword_256EA7C50;
  if (!qword_256EA7C50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BC8C, &type metadata for PlannerSpanMatchServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7C50);
  }
  return result;
}

unint64_t sub_23F75B50C()
{
  unint64_t result;

  result = qword_256EA7C58;
  if (!qword_256EA7C58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BBAC, &type metadata for PlannerSpanMatchServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7C58);
  }
  return result;
}

unint64_t sub_23F75B54C()
{
  unint64_t result;

  result = qword_256EA7C60;
  if (!qword_256EA7C60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5BBD4, &type metadata for PlannerSpanMatchServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA7C60);
  }
  return result;
}

uint64_t sub_23F75B588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23F75B598()
{
  return sub_23FB2FCB0();
}

uint64_t sub_23F75B5C4()
{
  uint64_t v0;

  v0 = sub_23FB2E7F8();
  sub_23F6D3418(v0, qword_256EA7C68);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA7C68);
  return sub_23FB2E7EC();
}

void static PlatformPnRTelemetry.started(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];

  sub_23F6B50E8();
  v2 = v1;
  v4 = v3;
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B59F8();
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5864();
  v7 = sub_23FB2C4B8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v4;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  v12 = sub_23F75E73C();
  sub_23F7A12D0(*(_QWORD *)(v2 + *(int *)(v12 + 32)), v0);
  v13 = sub_23F75E72C();
  v14 = sub_23F75E580(v13);
  if (v15)
  {
    sub_23F75E6E8(v14, &qword_256EA7A90);
  }
  else
  {
    sub_23F75E7CC();
    sub_23F75E6E0();
  }
  v16 = sub_23F75E508();
  sub_23F75E4C4(v16);
  v18[15] = v11;
  static PlatformPnRTelemetry.started(_:_:_:)();
  sub_23F75E7C4(v17, &qword_256EA7AA8);
  sub_23F6B51EC((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_23F693DDC();
}

void static PlatformPnRTelemetry.started(_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  sub_23F6B50E8();
  v33 = v0;
  v34 = v3;
  v5 = v4;
  v35 = v6;
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(sub_23F759798() - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B631C();
  v13 = v11 - v12;
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B5F6C();
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23F75E508();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B573C();
  v20 = *v5;
  sub_23F75E6F0();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v17, 1, v18) == 1)
  {
    v21 = v34;
    sub_23F693B4C((uint64_t)v17, &qword_256EA7AA8);
    if (qword_256EA0A80 != -1)
      swift_once();
    v22 = sub_23F693F0C();
    sub_23F75E52C(v22, (uint64_t)qword_256EA7C68);
    v23 = sub_23F6B921C();
    if (sub_23F759600(v23))
    {
      *(_WORD *)sub_23F693DF4() = 0;
      sub_23F7595AC(&dword_23F68F000, v24, v25, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_23F693DD0();
    }

  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v2, v17, v18);
    sub_23F7597A8();
    sub_23FB2E720();
    v26 = sub_23F759788();
    sub_23F75965C((uint64_t)v9, v27, v28, v26);
    sub_23F7A1678(v2, (uint64_t)v9);
    sub_23F693B4C((uint64_t)v9, &qword_256EA70B0);
    v36 = v20;
    v21 = v34;
    sub_23F75B9AC();
    v29 = v32;
    sub_23F75E744();
    sub_23F75E710(v1, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32));
    static TelemetryStream.insert(_:)();
    sub_23F75E744();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v18);
  }
  v30 = sub_23F72E034();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v35, v21, v30);
  sub_23F693DDC();
}

void sub_23F75B9AC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48[13];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_23F6B50E8();
  v49 = v0;
  v2 = v1;
  v4 = v3;
  v6 = v5;
  sub_23F6916B8(&qword_256EA70A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B537C(v8, v48[0]);
  v9 = sub_23F7597B0();
  v48[11] = *(_QWORD *)(v9 - 8);
  v48[12] = v9;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F693E0C();
  v48[8] = v11;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6D3D14();
  v48[7] = v13;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6D3D14();
  v48[6] = v15;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  v48[5] = (uint64_t)v48 - v17;
  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v18);
  v48[4] = (uint64_t)v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  v48[3] = (uint64_t)v48 - v21;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v22);
  v48[2] = (uint64_t)v48 - v23;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v24);
  v48[1] = (uint64_t)v48 - v25;
  sub_23F6B5664();
  v27 = MEMORY[0x24BDAC7A8](v26);
  sub_23F75E718(v27, v28, v29, v30, v31, v32, v33, v34, v48[0]);
  v35 = sub_23F759798();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  sub_23F6B5404(v37, v48[0]);
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)v48 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA7D48);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F6B5864();
  v42 = sub_23FB2E5E8();
  v50 = *(_QWORD *)(v42 - 8);
  v51 = v42;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6B631C();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B5F6C();
  v45 = *v2;
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v52 = v6;
  v48[10] = v35;
  sub_23F75E68C(v6, v4, v46);
  sub_23FB2E5DC();
  sub_23FB2E5AC();
  sub_23F75E734();
  sub_23F75E6B4();
  sub_23F75E77C();
  sub_23FB2E5D0();
  v47 = sub_23F72E034();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v40, v49, v47);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v40, 0, 1, v47);
  sub_23FB2E5C4();
  __asm { BR              X10 }
}

void sub_23F75BC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F759774(*(_QWORD *)(v1 - 240), *MEMORY[0x24BE585B8], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 152) + 104));
  sub_23F75E4D8();
  sub_23FB2E438();
  v2 = *(_QWORD *)(v1 - 120);
  v3 = *(_QWORD *)(v1 - 128);
  sub_23F75E710(v3, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v4 = *MEMORY[0x24BE58768];
  v5 = sub_23F7597A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v3, v4, v5);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v3, 0, 1, v5);
  sub_23FB2E48C();
  sub_23F6B51EC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F693DDC();
}

void static PlatformPnRTelemetry.ended(_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B59F8();
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B52B0();
  v2 = sub_23F75E73C();
  sub_23F75E67C(v2);
  v3 = sub_23F75E72C();
  v4 = sub_23F75E580(v3);
  if (v5)
  {
    sub_23F75E6E8(v4, &qword_256EA7A90);
  }
  else
  {
    sub_23F75E7CC();
    sub_23F75E6E0();
  }
  v6 = sub_23F75E508();
  sub_23F75E4C4(v6);
  static PlatformPnRTelemetry.ended(_:_:_:)();
  sub_23F75E7C4(v7, &qword_256EA7AA8);
  sub_23F6B69E0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23F6B50E8();
  v35 = v2;
  v36 = v0;
  v4 = v3;
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23F759798();
  v34 = *(_QWORD *)(v8 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B631C();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - v14;
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23F75E508();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6B5268();
  v21 = *v4;
  v22 = v4[1];
  v23 = v4[2];
  v32 = v22;
  v33 = v21;
  sub_23F75E6F0();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v19) == 1)
  {
    sub_23F693B4C((uint64_t)v18, &qword_256EA7AA8);
    if (qword_256EA0A80 != -1)
      swift_once();
    v24 = sub_23F693F0C();
    sub_23F75E52C(v24, (uint64_t)qword_256EA7C68);
    v25 = sub_23F6B921C();
    if (sub_23F759600(v25))
    {
      *(_WORD *)sub_23F693DF4() = 0;
      sub_23F7595AC(&dword_23F68F000, v26, v27, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_23F693DD0();
    }

  }
  else
  {
    sub_23F75E68C(v1, (uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
    sub_23F7597A8();
    sub_23FB2E720();
    v28 = sub_23F759788();
    v29 = sub_23F75E63C(v28);
    sub_23F7A1678(v29, v30);
    sub_23F693B4C((uint64_t)v7, &qword_256EA70B0);
    v37 = v33;
    v38 = v32;
    v39 = v23;
    sub_23F75C160();
    v31 = v34;
    sub_23F75E7D4();
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v15, v12, v8);
    static TelemetryStream.insert(_:)();
    sub_23F75E7D4();
    sub_23F6B5900(v1, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  }
  sub_23F693DDC();
}

void sub_23F75C160()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[19];
  uint64_t v48;
  uint64_t v49;

  sub_23F6B50E8();
  v47[15] = v0;
  v2 = v1;
  v48 = v3;
  v49 = v4;
  sub_23F6916B8(&qword_256EA70A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v47[16] = v6;
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v47[14] = v8;
  sub_23F6916B8(&qword_256EA7D48);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5404(v10, v47[0]);
  v11 = sub_23F7597B0();
  v47[9] = *(_QWORD *)(v11 - 8);
  v47[10] = v11;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F693E0C();
  v47[7] = v13;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  v47[6] = (uint64_t)v47 - v15;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  v47[5] = (uint64_t)v47 - v17;
  sub_23F6B5664();
  v19 = MEMORY[0x24BDAC7A8](v18);
  sub_23F75E718(v19, v20, v21, v22, v23, v24, v25, v26, v47[0]);
  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F693E0C();
  v47[3] = v28;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v29);
  v47[2] = (uint64_t)v47 - v30;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6D3D14();
  v47[1] = v32;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6D3D14();
  v47[0] = v34;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F6916B8(qword_256EA7D50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6B5864();
  v37 = sub_23FB2E4A4();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6B51A4();
  v47[8] = v39;
  v40 = sub_23FB2E57C();
  v41 = *(_QWORD *)(v40 - 8);
  v47[17] = v40;
  v47[18] = v41;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B631C();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6B5F6C();
  v44 = sub_23FB2E5E8();
  v47[11] = *(_QWORD *)(v44 - 8);
  v47[12] = v44;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6B573C();
  v46 = *v2;
  sub_23F6B5EF0(v49, v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16));
  sub_23FB2E5DC();
  sub_23FB2E570();
  __asm { BR              X10 }
}

void sub_23F75C3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23F759774(v0, *MEMORY[0x24BE585B8], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 104));
  sub_23F75E4D8();
  sub_23FB2E438();
  v3 = *(_QWORD *)(v2 - 136);
  v4 = *(_QWORD *)(v2 - 128);
  v5 = *(_QWORD *)(v2 - 120);
  v6 = *(_QWORD *)(v2 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v6, v5, v3);
  v7 = sub_23F75E734();
  sub_23F75E4FC(v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104));
  sub_23F759720();
  sub_23FB2E5D0();
  v8 = sub_23F72E034();
  sub_23F759774(*(_QWORD *)(v2 - 160), *(_QWORD *)(v2 - 152), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16));
  sub_23F75E540();
  v9 = *(_QWORD *)(v2 - 184);
  v10 = *(_QWORD *)(v2 - 144);
  sub_23F75E68C(v10, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  v11 = sub_23F7597A0();
  sub_23F75E4FC(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104));
  sub_23F759720();
  sub_23FB2E48C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
  sub_23F6B5900(v1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  sub_23F693DDC();
}

void static PlatformPnRTelemetry.failed(_:_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B59F8();
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B52B0();
  v2 = sub_23F75E73C();
  sub_23F75E67C(v2);
  v3 = sub_23F75E72C();
  v4 = sub_23F75E580(v3);
  if (v5)
  {
    sub_23F75E6E8(v4, &qword_256EA7A90);
  }
  else
  {
    sub_23F75E7CC();
    sub_23F75E6E0();
  }
  v6 = sub_23F75E508();
  sub_23F75E4C4(v6);
  static PlatformPnRTelemetry.failed(_:_:_:_:)();
  sub_23F75E7C4(v7, &qword_256EA7AA8);
  sub_23F6B69E0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  sub_23F6B50E8();
  v37 = v3;
  v38 = v0;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23F759798();
  v36 = *(_QWORD *)(v13 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F693E0C();
  v35 = v15;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v35 - v17;
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_23F75E508();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B5268();
  v24 = (void *)*v9;
  v25 = *v7;
  sub_23F759520(v5, (uint64_t)v21);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v21, 1, v22) == 1)
  {
    sub_23F693B4C((uint64_t)v21, &qword_256EA7AA8);
    if (qword_256EA0A80 != -1)
      swift_once();
    v26 = sub_23F693F0C();
    sub_23F75E52C(v26, (uint64_t)qword_256EA7C68);
    v27 = sub_23F6B921C();
    if (sub_23F759600(v27))
    {
      *(_WORD *)sub_23F693DF4() = 0;
      sub_23F7595AC(&dword_23F68F000, v28, v29, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_23F693DD0();
    }

  }
  else
  {
    sub_23F75E68C(v2, (uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    sub_23F7597A8();
    sub_23FB2E720();
    v30 = sub_23F759788();
    v31 = sub_23F75E63C(v30);
    sub_23F7A1678(v31, v32);
    sub_23F693B4C((uint64_t)v12, &qword_256EA70B0);
    v40 = (char)v24;
    v39 = v25;
    v33 = v35;
    sub_23F75C9B8();
    v34 = v36;
    sub_23F75E7E0();
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v18, v33, v13);
    static TelemetryStream.insert(_:)();
    sub_23F75E7E0();
    sub_23F6B5900(v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  sub_23F693DDC();
}

void sub_23F75C9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39[10];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_23F6B50E8();
  v39[9] = v2;
  v40 = v1;
  v46 = v3;
  v5 = v4;
  v48 = v6;
  sub_23F6916B8(&qword_256EA70A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v47 = v8;
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B537C(v10, v39[0]);
  sub_23F6916B8(&qword_256EA7D48);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B51A4();
  v45 = v12;
  v13 = sub_23F7597B0();
  v39[7] = *(_QWORD *)(v13 - 8);
  v39[8] = v13;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  v39[6] = (uint64_t)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  v39[5] = (uint64_t)v39 - v17;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v18);
  v39[4] = (uint64_t)v39 - v19;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  v39[3] = (uint64_t)v39 - v21;
  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F693E0C();
  v39[2] = v23;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6D3D14();
  v39[1] = v25;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v26);
  v39[0] = (uint64_t)v39 - v27;
  sub_23F6B5664();
  v29 = MEMORY[0x24BDAC7A8](v28);
  MEMORY[0x24BDAC7A8](v29);
  sub_23F759798();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B5268();
  sub_23F6916B8(qword_256EA7D50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)v39 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_23FB2E5A0();
  v43 = *(_QWORD *)(v34 - 8);
  v44 = v34;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v35);
  v36 = sub_23FB2E5E8();
  v41 = *(_QWORD *)(v36 - 8);
  v42 = v36;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6B573C();
  v38 = *v5;
  sub_23F759774(v48, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
  sub_23FB2E5DC();
  sub_23FB2E594();
  sub_23F7597A8();
  sub_23F75E6D4((uint64_t)v33);
  MEMORY[0x24267320C](v33);
  __asm { BR              X10 }
}

void sub_23F75CC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23F759774(v0, *MEMORY[0x24BE585B8], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 200) + 104));
  sub_23F759668(v0);
  sub_23FB2E438();
  v4 = *(_QWORD *)(v3 - 152);
  v5 = *(_QWORD *)(v3 - 136);
  sub_23F75E710(v5, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v6 = sub_23F75E734();
  sub_23F75E4FC(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104));
  sub_23F75E7A0();
  sub_23FB2E5D0();
  v7 = sub_23F72E034();
  sub_23F759774(*(_QWORD *)(v3 - 128), *(_QWORD *)(v3 - 120), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16));
  sub_23F75E540();
  v9 = *(_QWORD *)(v3 - 168);
  v8 = *(_QWORD *)(v3 - 160);
  v10 = *(_QWORD *)(v3 - 112);
  sub_23F6B5EF0(v10, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  v11 = sub_23F7597A0();
  sub_23F75E4FC(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104));
  sub_23F75E7A0();
  sub_23FB2E48C();
  sub_23F6B51EC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v8);
  sub_23F693DDC();
}

void sub_23F75CE98()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  sub_23F6B50E8();
  v1 = v0;
  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *v1;
  v6 = sub_23F759798();
  sub_23F75E568(v6);
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      if (qword_256EA0A80 != -1)
        swift_once();
      v7 = sub_23F693F0C();
      v8 = (void *)sub_23F75E52C(v7, (uint64_t)qword_256EA7C68);
      v9 = sub_23FB2F5F0();
      if (sub_23F75E6C4(v9))
      {
        sub_23F693DF4();
        v16[1] = sub_23F693DF4();
        sub_23F75E768(4.8149e-34);
        v10 = sub_23F75E75C();
        v12 = sub_23F75E750(v10, v11);
        sub_23F75E5B4(v12);
        swift_bridgeObjectRelease();
        sub_23F75E61C(&dword_23F68F000, v13, v14, "Warning! Telemetry for %s should be added!");
        sub_23F75E694();
        sub_23F693DD0();
      }

      *v4 = 0;
      break;
  }
  v15 = sub_23F7597B0();
  sub_23F75E510(v15);
  sub_23F75E5CC();
  sub_23F693DDC();
}

void sub_23F75D04C()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  sub_23F6B50E8();
  v1 = v0;
  sub_23F6916B8(&qword_256EA70A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *v1;
  v6 = sub_23F759798();
  sub_23F75E568(v6);
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      if (qword_256EA0A80 != -1)
        swift_once();
      v7 = sub_23F693F0C();
      v8 = (void *)sub_23F75E52C(v7, (uint64_t)qword_256EA7C68);
      v9 = sub_23FB2F5F0();
      if (sub_23F75E6C4(v9))
      {
        sub_23F693DF4();
        v16[1] = sub_23F693DF4();
        sub_23F75E768(4.8149e-34);
        v10 = sub_23F75E75C();
        v12 = sub_23F75E750(v10, v11);
        sub_23F75E5B4(v12);
        swift_bridgeObjectRelease();
        sub_23F75E61C(&dword_23F68F000, v13, v14, "Warning! Telemetry for %s should be added!");
        sub_23F75E694();
        sub_23F693DD0();
      }

      *v4 = 0;
      break;
  }
  v15 = sub_23F7597B0();
  sub_23F75E510(v15);
  sub_23F75E5CC();
  sub_23F693DDC();
}

uint64_t sub_23F75D200()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6916B8(qword_256EA7D50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B52B0();
  sub_23FB2E570();
  sub_23F7597A8();
  sub_23F75E6D4(v0);
  sub_23FB2E558();
  swift_bridgeObjectRetain();
  return sub_23FB2E564();
}

uint64_t PlatformPnRTelemetry.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PlatformPnRTelemetry.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static StandardPlannerTarget.== infix(_:_:)()
{
  return 1;
}

void StandardPlannerTarget.hash(into:)()
{
  sub_23FB2FC68();
  sub_23F694CC8();
}

void StandardPlannerTarget.hashValue.getter()
{
  sub_23F6B53C4();
  sub_23FB2FC68();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F75D2EC()
{
  StandardPlannerTarget.hashValue.getter();
}

void sub_23F75D300()
{
  StandardPlannerTarget.hash(into:)();
}

BOOL static PlannerServiceTarget.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PlannerServiceTarget.hash(into:)()
{
  sub_23F70D9B8();
  sub_23F694CC8();
}

void sub_23F75D360()
{
  sub_23FB2FC5C();
  sub_23F6B5A48();
  sub_23F6B5608();
  sub_23F6B5398();
}

BOOL static LLMCacheManagerTarget.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void LLMCacheManagerTarget.hash(into:)()
{
  sub_23F70D9B8();
  sub_23F694CC8();
}

void LLMCacheManagerTarget.hashValue.getter()
{
  sub_23F6B53C4();
  sub_23F6B5A48();
  sub_23F6B5608();
  sub_23F6B5398();
}

void GMSCallEndedData.gmsTarget.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t GMSCallEndedData.modelIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

IntelligenceFlowPlannerSupport::GMSCallEndedData __swiftcall GMSCallEndedData.init(gmsTarget:modelIdentifier:)(IntelligenceFlowPlannerSupport::GMSTarget gmsTarget, Swift::String modelIdentifier)
{
  uint64_t v2;
  IntelligenceFlowPlannerSupport::GMSCallEndedData result;

  *(_BYTE *)v2 = *(_BYTE *)gmsTarget;
  *(Swift::String *)(v2 + 8) = modelIdentifier;
  result.modelIdentifier = modelIdentifier;
  result.gmsTarget = gmsTarget;
  return result;
}

void FailedPayload.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t FailedPayload.init(error:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_23F75D44C()
{
  return sub_23FB2E750();
}

void HandleEndedPayload.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = 0;
  a1[1] = v1;
}

uint64_t HandleEndedPayload.init(error:eventIds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void Session.Event.formingTelemetryEvent(state:contextId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  sub_23F6B50E8();
  v19 = v3;
  v20 = v2;
  v5 = v4;
  v6 = sub_23F75E508();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5268();
  sub_23F759798();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v5;
  v14 = *((_QWORD *)v5 + 2);
  sub_23F7597A8();
  sub_23FB2E720();
  v15 = sub_23F759788();
  sub_23F75965C(v1, v16, v17, v15);
  Session.Event.formingTraceIds()();
  sub_23F7A1678((uint64_t)v9, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_23F693B4C(v1, &qword_256EA70B0);
  type metadata accessor for PlatformPnRTelemetry();
  v21 = v18;
  v22 = v14;
  sub_23F75C160();
  sub_23F6B51EC((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_23F693DDC();
}

uint64_t type metadata accessor for PlatformPnRTelemetry()
{
  return objc_opt_self();
}

unint64_t sub_23F75D5E4()
{
  unint64_t result;

  result = qword_256EA7C80;
  if (!qword_256EA7C80)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for StandardPlannerTarget, &type metadata for StandardPlannerTarget);
    atomic_store(result, (unint64_t *)&qword_256EA7C80);
  }
  return result;
}

unint64_t sub_23F75D624()
{
  unint64_t result;

  result = qword_256EA7C88;
  if (!qword_256EA7C88)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for PlannerServiceTarget, &type metadata for PlannerServiceTarget);
    atomic_store(result, (unint64_t *)&qword_256EA7C88);
  }
  return result;
}

unint64_t sub_23F75D664()
{
  unint64_t result;

  result = qword_256EA7C90;
  if (!qword_256EA7C90)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseGenerationTarget, &type metadata for ResponseGenerationTarget);
    atomic_store(result, (unint64_t *)&qword_256EA7C90);
  }
  return result;
}

unint64_t sub_23F75D6A4()
{
  unint64_t result;

  result = qword_256EA7C98;
  if (!qword_256EA7C98)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ExecutorRequestTarget, &type metadata for ExecutorRequestTarget);
    atomic_store(result, (unint64_t *)&qword_256EA7C98);
  }
  return result;
}

unint64_t sub_23F75D6E4()
{
  unint64_t result;

  result = qword_256EA7CA0;
  if (!qword_256EA7CA0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for GMSTarget, &type metadata for GMSTarget);
    atomic_store(result, (unint64_t *)&qword_256EA7CA0);
  }
  return result;
}

unint64_t sub_23F75D724()
{
  unint64_t result;

  result = qword_256EA7CA8;
  if (!qword_256EA7CA8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for LLMCacheManagerTarget, &type metadata for LLMCacheManagerTarget);
    atomic_store(result, (unint64_t *)&qword_256EA7CA8);
  }
  return result;
}

uint64_t method lookup function for PlatformPnRTelemetry()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for StandardPlannerTarget(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F75D7AC + 4 * byte_23FB5BDE1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F75D7CC + 4 * byte_23FB5BDE6[v4]))();
}

_BYTE *sub_23F75D7AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F75D7CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F75D7D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F75D7DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F75D7E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F75D7EC(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for StandardPlannerTarget()
{
  sub_23F694C70();
}

uint64_t getEnumTagSinglePayload for PlannerServiceTarget(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 8) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v5 = v6 - 9;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PlannerServiceTarget(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23F75D8D8 + 4 * byte_23FB5BDF0[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23F75D90C + 4 * byte_23FB5BDEB[v4]))();
}

uint64_t sub_23F75D90C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75D914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75D91CLL);
  return result;
}

uint64_t sub_23F75D928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75D930);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23F75D934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75D93C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PlannerServiceTarget()
{
  sub_23F694C70();
}

uint64_t getEnumTagSinglePayload for ResponseGenerationTarget(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationTarget(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23F75DA28 + 4 * byte_23FB5BDFA[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23F75DA5C + 4 * byte_23FB5BDF5[v4]))();
}

uint64_t sub_23F75DA5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DA64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75DA6CLL);
  return result;
}

uint64_t sub_23F75DA78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75DA80);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23F75DA84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DA8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ResponseGenerationTarget()
{
  sub_23F694C70();
}

uint64_t storeEnumTagSinglePayload for ExecutorRequestTarget(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23F75DAF0 + 4 * byte_23FB5BE04[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23F75DB24 + 4 * byte_23FB5BDFF[v4]))();
}

uint64_t sub_23F75DB24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DB2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75DB34);
  return result;
}

uint64_t sub_23F75DB40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75DB48);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23F75DB4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DB54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ExecutorRequestTarget()
{
  sub_23F694C70();
}

uint64_t storeEnumTagSinglePayload for GMSTarget(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F75DBB8 + 4 * byte_23FB5BE0E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F75DBEC + 4 * byte_23FB5BE09[v4]))();
}

uint64_t sub_23F75DBEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DBF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75DBFCLL);
  return result;
}

uint64_t sub_23F75DC08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75DC10);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23F75DC14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DC1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for GMSTarget()
{
  sub_23F694C70();
}

uint64_t storeEnumTagSinglePayload for LLMCacheManagerTarget(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F75DC80 + 4 * byte_23FB5BE18[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F75DCB4 + 4 * byte_23FB5BE13[v4]))();
}

uint64_t sub_23F75DCB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DCBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75DCC4);
  return result;
}

uint64_t sub_23F75DCD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75DCD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F75DCDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75DCE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for LLMCacheManagerTarget()
{
  sub_23F694C70();
}

uint64_t destroy for GMSCallEndedData()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s30IntelligenceFlowPlannerSupport16GMSCallEndedDataVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GMSCallEndedData(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GMSCallEndedData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GMSCallEndedData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GMSCallEndedData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for GMSCallEndedData()
{
  sub_23F694C70();
}

void type metadata accessor for StartedState()
{
  sub_23F694C70();
}

unint64_t sub_23F75DE60(unint64_t result, void *a2)
{
  id v2;

  if (result >> 61 != 4)
  {
    if (result >> 61 != 2)
      return result;
    v2 = a2;
  }
  return swift_bridgeObjectRetain();
}

void destroy for EndedState(uint64_t a1)
{
  sub_23F75DEB4(*(_QWORD *)a1, *(void **)(a1 + 8));
}

void sub_23F75DEB4(unint64_t a1, void *a2)
{
  if (a1 >> 61 == 4)
  {
    swift_bridgeObjectRelease();
  }
  else if (a1 >> 61 == 2)
  {
    swift_bridgeObjectRelease();

  }
}

unint64_t *_s30IntelligenceFlowPlannerSupport10EndedStateOwCP_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;

  v3 = *a2;
  v4 = (void *)a2[1];
  v5 = a2[2];
  sub_23F75DE60(*a2, v4);
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  a1[2] = v5;
  return a1;
}

unint64_t *assignWithCopy for EndedState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;

  v3 = *a2;
  v4 = (void *)a2[1];
  v5 = a2[2];
  sub_23F75DE60(*a2, v4);
  v6 = *a1;
  v7 = (void *)a1[1];
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  a1[2] = v5;
  sub_23F75DEB4(v6, v7);
  return a1;
}

unint64_t *assignWithTake for EndedState(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  v5 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_23F75DEB4(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for EndedState(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)a1 >> 4;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for EndedState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = 16 * -a2;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23F75E068(_QWORD *a1)
{
  return *a1 >> 61;
}

_QWORD *sub_23F75E074(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_23F75E084(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xF | (a2 << 61);
  return result;
}

void type metadata accessor for EndedState()
{
  sub_23F694C70();
}

uint64_t _s30IntelligenceFlowPlannerSupport12StartedStateOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if (!a2)
  {
    v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0xA)
  {
    if (a2 + 246 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 246) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 247;
    return v5 + 1;
  }
LABEL_17:
  v5 = ((*a1 >> 1) & 8 | (*a1 >> 5)) ^ 0xF;
  if (v5 >= 9)
    v5 = -1;
  return v5 + 1;
}

uint64_t _s30IntelligenceFlowPlannerSupport12StartedStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 246 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 246) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 9)
    return ((uint64_t (*)(void))((char *)&loc_23F75E188 + 4 * byte_23FB5BE22[v4]))();
  *a1 = a2 - 10;
  return ((uint64_t (*)(void))((char *)sub_23F75E1BC + 4 * byte_23FB5BE1D[v4]))();
}

uint64_t sub_23F75E1BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75E1C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F75E1CCLL);
  return result;
}

uint64_t sub_23F75E1E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F75E1ECLL);
  *(_BYTE *)result = 16 * (((-a2 & 8) != 0) - 2 * a2);
  return result;
}

uint64_t sub_23F75E1F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75E1F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F75E204(unsigned __int8 *a1)
{
  return *a1 >> 5;
}

_BYTE *sub_23F75E210(_BYTE *result)
{
  *result &= 0x1Fu;
  return result;
}

_BYTE *sub_23F75E220(_BYTE *result, char a2)
{
  *result = *result & 0xF | (32 * a2);
  return result;
}

void type metadata accessor for FailedState()
{
  sub_23F694C70();
}

void **initializeBufferWithCopyOfBuffer for FailedPayload(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for FailedPayload(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for FailedPayload(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for FailedPayload(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FailedPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for FailedPayload()
{
  sub_23F694C70();
}

_QWORD *initializeBufferWithCopyOfBuffer for HandleEndedPayload(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for HandleEndedPayload(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for HandleEndedPayload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for HandleEndedPayload(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for HandleEndedPayload()
{
  sub_23F694C70();
}

uint64_t sub_23F75E4A8@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t sub_23F75E4B4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t sub_23F75E4C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v2, v1, 1, a1);
}

uint64_t sub_23F75E4D8()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_23F75E4FC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_23F75E508()
{
  return sub_23FB2E510();
}

uint64_t sub_23F75E510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_23F75E52C(uint64_t a1, uint64_t a2)
{
  sub_23F6BF1A4(a1, a2);
  return sub_23FB2E7E0();
}

uint64_t sub_23F75E540()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return sub_23FB2E5C4();
}

uint64_t sub_23F75E568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_23F75E580(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, a1);
}

uint64_t sub_23F75E5B4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return sub_23FB2F680();
}

uint64_t sub_23F75E5CC()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return sub_23FB2E438();
}

void sub_23F75E61C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_23F75E630(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v4, a2, v3);
}

uint64_t sub_23F75E63C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, a1);
  return v2;
}

uint64_t sub_23F75E668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 160));
}

uint64_t sub_23F75E67C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_23F7A12D0(*(_QWORD *)(v2 + *(int *)(a1 + 32)), v1);
}

uint64_t sub_23F75E68C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_23F75E694()
{
  return swift_arrayDestroy();
}

uint64_t sub_23F75E6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_23F75E6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v0, v3);
}

BOOL sub_23F75E6C4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_23F75E6D4@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return sub_23F7A1AD4(v1, a1);
}

uint64_t sub_23F75E6E0()
{
  uint64_t v0;

  return sub_23F7594E4(v0);
}

uint64_t sub_23F75E6E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_23F693B4C(v2, a2);
}

uint64_t sub_23F75E6F0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F759520(v1, v0);
}

uint64_t sub_23F75E6FC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

uint64_t sub_23F75E710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_23F75E718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 240) = (char *)&a9 - v9;
}

uint64_t sub_23F75E72C()
{
  return type metadata accessor for Session.Event(0);
}

uint64_t sub_23F75E734()
{
  return sub_23FB2E5B8();
}

uint64_t sub_23F75E73C()
{
  return type metadata accessor for Session.Transcript(0);
}

uint64_t sub_23F75E744()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_23F75E750(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_23F69334C(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_23F75E75C()
{
  return sub_23FB2F194();
}

void sub_23F75E768(float a1)
{
  float *v1;
  char v2;
  uint64_t v3;

  *v1 = a1;
  *(_BYTE *)(v3 - 96) = v2;
}

uint64_t sub_23F75E77C()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, 0, 1, v1);
  return v0;
}

uint64_t sub_23F75E7A0()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_23F75E7C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_23F693B4C(v2, a2);
}

uint64_t sub_23F75E7CC()
{
  return Session.Event.formingTraceIds()();
}

uint64_t sub_23F75E7D4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_23F75E7E0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t PreassignedEventID.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23FB2C4B8();
  return sub_23F6B64B0(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t _s30IntelligenceFlowPlannerSupport18PreassignedEventIDV5valueAC10Foundation4UUIDV_tcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23FB2C4B8();
  return sub_23F6B64B0(a2, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 32));
}

uint64_t _s12SessionEndedVwxx(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23FB2C4B8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t _s12SessionEndedVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s12SessionEndedVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_23F75E924()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F75E930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F75EA30();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, v0, v2);
}

uint64_t sub_23F75E958()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F75E964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F75EA30();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for PreassignedEventID()
{
  uint64_t result;

  result = qword_256EA7DB0;
  if (!qword_256EA7DB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23F75E9C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2C4B8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23F75EA30()
{
  return sub_23FB2C4B8();
}

uint64_t sub_23F75EA40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = sub_23FB2DA00();
  sub_23F6D3418(v0, qword_256EA7DE8);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA7DE8);
  sub_23F6916B8(&qword_256EA3238);
  v1 = sub_23F6916B8(&qword_256EA3240);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23FB4F190;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23FB2D9DC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "VOICE_ONLY";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "VOICE_FORWARD";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "DISPLAY_FORWARD";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "DISPLAY_ONLY";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  return sub_23FB2D9E8();
}

uint64_t static ResponseGenerationProtoResponseMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23F6BF3D8(&qword_256EA0A88, (uint64_t)qword_256EA7DE8, a1);
}

unint64_t static ResponseGenerationProtoResponseGenerationInput.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_23F75EC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = sub_23FB2DA00();
  sub_23F6D3418(v0, qword_256EA7E00);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA7E00);
  sub_23F6916B8(&qword_256EA3238);
  v1 = sub_23F6916B8(&qword_256EA3240);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23FB4F190;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "client_request_id";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = sub_23FB2D9DC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "utterance";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "response_mode";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "response_locale";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "statement_result_digests";
  *((_QWORD *)v17 + 1) = 24;
  v17[16] = 2;
  v10();
  return sub_23FB2D9E8();
}

uint64_t static ResponseGenerationProtoResponseGenerationInput._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23F6BF3D8(&qword_256EA0A90, (uint64_t)qword_256EA7E00, a1);
}

void ResponseGenerationProtoResponseGenerationInput.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = sub_23F6D356C();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
        case 2:
        case 4:
          sub_23FB2D880();
          break;
        case 3:
          sub_23F6D3598();
          sub_23F75EF38();
          break;
        case 5:
          sub_23F6D3598();
          sub_23F75EF98();
          break;
        default:
          break;
      }
      v1 = sub_23F6D35E8();
    }
  }
  sub_23F6D3750();
}

uint64_t sub_23F75EF38()
{
  sub_23F761178();
  return sub_23FB2D7FC();
}

uint64_t sub_23F75EF98()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23F6D3458(&qword_256EA7E38, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
  return sub_23FB2D8A4();
}

void ResponseGenerationProtoResponseGenerationInput.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  sub_23F6D36FC();
  if (!v3 || (sub_23F6D376C(), (v2 = v1) == 0))
  {
    sub_23F6D36FC();
    if (!v4 || (sub_23F6D376C(), (v2 = v1) == 0))
    {
      if (!*(_BYTE *)(v0 + 32) || (sub_23F761178(), v1 = v2, sub_23FB2D94C(), !v2))
      {
        sub_23F6D36FC();
        if (!v5 || (sub_23F6D376C(), (v2 = v1) == 0))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16)
            || (type metadata accessor for ResponseGenerationProtoStatementResultDigest(0),
                sub_23F6D3458(&qword_256EA7E38, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest), sub_23FB2D9C4(), !v2))
          {
            type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
            sub_23FB2D700();
          }
        }
      }
    }
  }
  sub_23F6D3750();
}

#error "23F75F254: call analysis failed (funcsize=104)"

uint64_t ResponseGenerationProtoResponseGenerationInput.hashValue.getter()
{
  return sub_23F6C2504(type metadata accessor for ResponseGenerationProtoResponseGenerationInput, &qword_256EA7E40, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
}

unint64_t sub_23F75F32C()
{
  static ResponseGenerationProtoResponseGenerationInput.protoMessageName.getter();
  return 0xD00000000000002ALL;
}

void sub_23F75F350()
{
  ResponseGenerationProtoResponseGenerationInput.decodeMessage<A>(decoder:)();
}

void sub_23F75F364()
{
  ResponseGenerationProtoResponseGenerationInput.traverse<A>(visitor:)();
}

uint64_t sub_23F75F378()
{
  sub_23F6D3458(&qword_256EA7EE0, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
  return sub_23FB2D784();
}

uint64_t sub_23F75F3CC()
{
  sub_23F6D3458((unint64_t *)&qword_256EA7EB8, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
  return sub_23FB2D8F8();
}

uint64_t sub_23F75F410()
{
  sub_23F6D3458((unint64_t *)&qword_256EA7EB8, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
  return sub_23FB2D904();
}

unint64_t static ResponseGenerationProtoStatementResultDigest.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t sub_23F75F480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_23FB2DA00();
  sub_23F6D3418(v0, qword_256EA7E18);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA7E18);
  sub_23F6916B8(&qword_256EA3238);
  v1 = sub_23F6916B8(&qword_256EA3240);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23FB4F1E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "tool_definition";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = sub_23FB2D9DC();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "action_created";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "statement_outcome";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "undo_operation";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "response_manifest";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "return_value_type_display_representation";
  *((_QWORD *)v19 + 1) = 40;
  v19[16] = 2;
  v10();
  return sub_23FB2D9E8();
}

uint64_t static ResponseGenerationProtoStatementResultDigest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23F6BF3D8(&qword_256EA0A98, (uint64_t)qword_256EA7E18, a1);
}

uint64_t ResponseGenerationProtoStatementResultDigest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23F6D356C();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_23F6D3598();
          sub_23F75F788();
          break;
        case 2:
          sub_23F6D3598();
          sub_23F75F80C();
          break;
        case 3:
          sub_23F6D3598();
          sub_23F75F8A0();
          break;
        case 4:
          sub_23F6D3598();
          sub_23F75F934();
          break;
        case 5:
          sub_23F6D3598();
          sub_23F75F9A8();
          break;
        case 6:
          sub_23F6D3598();
          sub_23F75FA3C();
          break;
        default:
          break;
      }
      result = sub_23F6D35E8();
    }
  }
  return result;
}

uint64_t sub_23F75F788()
{
  sub_23FB2EBC4();
  sub_23F6D3458(&qword_256EA3258, (uint64_t (*)(uint64_t))MEMORY[0x24BEB96E0], MEMORY[0x24BEB96C8]);
  return sub_23FB2D8B0();
}

uint64_t sub_23F75F80C()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  type metadata accessor for TranscriptProtoAction(0);
  sub_23F6D3458(&qword_256EA7F08, type metadata accessor for TranscriptProtoAction, (uint64_t)&protocol conformance descriptor for TranscriptProtoAction);
  return sub_23FB2D8B0();
}

uint64_t sub_23F75F8A0()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  type metadata accessor for TranscriptProtoStatementOutcome(0);
  sub_23F6D3458(&qword_256EA7F00, type metadata accessor for TranscriptProtoStatementOutcome, (uint64_t)&protocol conformance descriptor for TranscriptProtoStatementOutcome);
  return sub_23FB2D8B0();
}

uint64_t sub_23F75F934()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23F761394();
  return sub_23FB2D7F0();
}

uint64_t sub_23F75F9A8()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  type metadata accessor for TranscriptProtoResponseManifest(0);
  sub_23F6D3458(&qword_256EA7EF0, type metadata accessor for TranscriptProtoResponseManifest, (uint64_t)&protocol conformance descriptor for TranscriptProtoResponseManifest);
  return sub_23FB2D8B0();
}

uint64_t sub_23F75FA3C()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23FB2EBA0();
  sub_23F6D3458(&qword_256EA7EE8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB96B0], MEMORY[0x24BEB96A8]);
  return sub_23FB2D8B0();
}

void ResponseGenerationProtoStatementResultDigest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23F75FBA0(v3, a1, a2, a3);
  if (!v4)
  {
    v5 = sub_23F6D3684();
    sub_23F75FD08(v5);
    v6 = sub_23F6D3684();
    sub_23F75FE78(v6);
    v7 = sub_23F6D3684();
    sub_23F75FFE8(v7);
    v8 = sub_23F6D3684();
    sub_23F760074(v8);
    v9 = sub_23F6D3684();
    sub_23F7601E4(v9, v10, v11, v12);
    type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
    sub_23FB2D700();
  }
}

void sub_23F75FBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  v12[1] = a4;
  v5 = sub_23F6916B8(&qword_256EA3268);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2EBC4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6D3530(a1, (uint64_t)v7, &qword_256EA3268);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v7, 1, v8) == 1)
  {
    sub_23F6B4F84((uint64_t)v7, &qword_256EA3268);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    sub_23F6D3458(&qword_256EA3258, (uint64_t (*)(uint64_t))MEMORY[0x24BEB96E0], MEMORY[0x24BEB96C8]);
    sub_23FB2D9D0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void sub_23F75FD08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = sub_23F6916B8(&qword_256EA7E80);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TranscriptProtoAction(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23F6D3530(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_256EA7E80);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_23F6B4F84((uint64_t)v4, &qword_256EA7E80);
  }
  else
  {
    sub_23F6D34D0((uint64_t)v4, (uint64_t)v7, type metadata accessor for TranscriptProtoAction);
    sub_23F6D3458(&qword_256EA7F08, type metadata accessor for TranscriptProtoAction, (uint64_t)&protocol conformance descriptor for TranscriptProtoAction);
    sub_23FB2D9D0();
    sub_23F6D3508((uint64_t)v7, type metadata accessor for TranscriptProtoAction);
  }
}

void sub_23F75FE78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = sub_23F6916B8(&qword_256EA7E70);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TranscriptProtoStatementOutcome(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23F6D3530(a1 + *(int *)(v8 + 24), (uint64_t)v4, &qword_256EA7E70);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_23F6B4F84((uint64_t)v4, &qword_256EA7E70);
  }
  else
  {
    sub_23F6D34D0((uint64_t)v4, (uint64_t)v7, type metadata accessor for TranscriptProtoStatementOutcome);
    sub_23F6D3458(&qword_256EA7F00, type metadata accessor for TranscriptProtoStatementOutcome, (uint64_t)&protocol conformance descriptor for TranscriptProtoStatementOutcome);
    sub_23FB2D9D0();
    sub_23F6D3508((uint64_t)v7, type metadata accessor for TranscriptProtoStatementOutcome);
  }
}

uint64_t sub_23F75FFE8(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 28)) != 2)
  {
    sub_23F761394();
    return sub_23FB2D94C();
  }
  return result;
}

void sub_23F760074(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = sub_23F6916B8(&qword_256EA7E60);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TranscriptProtoResponseManifest(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23F6D3530(a1 + *(int *)(v8 + 32), (uint64_t)v4, &qword_256EA7E60);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_23F6B4F84((uint64_t)v4, &qword_256EA7E60);
  }
  else
  {
    sub_23F6D34D0((uint64_t)v4, (uint64_t)v7, type metadata accessor for TranscriptProtoResponseManifest);
    sub_23F6D3458(&qword_256EA7EF0, type metadata accessor for TranscriptProtoResponseManifest, (uint64_t)&protocol conformance descriptor for TranscriptProtoResponseManifest);
    sub_23FB2D9D0();
    sub_23F6D3508((uint64_t)v7, type metadata accessor for TranscriptProtoResponseManifest);
  }
}

void sub_23F7601E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = a4;
  v5 = sub_23F6916B8(&qword_256EA7E50);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2EBA0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23F6D3530(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_256EA7E50);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v7, 1, v8) == 1)
  {
    sub_23F6B4F84((uint64_t)v7, &qword_256EA7E50);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    sub_23F6D3458(&qword_256EA7EE8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB96B0], MEMORY[0x24BEB96A8]);
    sub_23FB2D9D0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t static ResponseGenerationProtoStatementResultDigest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  void (*v70)(char *, uint64_t);
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  char v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  uint64_t v167;

  v166 = a1;
  v167 = a2;
  v138 = sub_23FB2D718();
  v137 = *(_QWORD *)(v138 - 8);
  MEMORY[0x24BDAC7A8](v138);
  sub_23F693E0C();
  v136 = v2;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B6580();
  v135 = v4;
  sub_23F6D398C();
  v142 = sub_23FB2EBA0();
  v139 = *(_QWORD *)(v142 - 8);
  MEMORY[0x24BDAC7A8](v142);
  sub_23F6B51A4();
  v134 = v5;
  v141 = sub_23F6916B8(&qword_256EA7E48);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v145 = v7;
  sub_23F6916B8(&qword_256EA7E50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693E0C();
  v153 = v9;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  v143 = (uint64_t)&v133 - v11;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6580();
  v144 = v13;
  v14 = sub_23F6D398C();
  v147 = type metadata accessor for TranscriptProtoResponseManifest(v14);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B51A4();
  v140 = v16;
  v146 = sub_23F6916B8(&qword_256EA7E58);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B51A4();
  v148 = v18;
  sub_23F6916B8(&qword_256EA7E60);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F693E0C();
  v159 = v20;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v21);
  v150 = (uint64_t)&v133 - v22;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B6580();
  v158 = v24;
  v25 = sub_23F6D398C();
  v156 = type metadata accessor for TranscriptProtoStatementOutcome(v25);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B51A4();
  v149 = v27;
  v154 = sub_23F6916B8(&qword_256EA7E68);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B51A4();
  v157 = (char *)v29;
  sub_23F6916B8(&qword_256EA7E70);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F693E0C();
  v151 = v31;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v32);
  v155 = (uint64_t)&v133 - v33;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F6B6580();
  v161 = v35;
  v36 = sub_23F6D398C();
  v164 = type metadata accessor for TranscriptProtoAction(v36);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6B51A4();
  v152 = v38;
  v162 = sub_23F6916B8(&qword_256EA7E78);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B51A4();
  v165 = v40;
  sub_23F6916B8(&qword_256EA7E80);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F693E0C();
  v160 = v42;
  sub_23F6B5664();
  v44 = MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)&v133 - v45;
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B6580();
  v163 = v47;
  sub_23F6D398C();
  v48 = sub_23FB2EBC4();
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)&v133 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_23F6916B8(&qword_256EA7E88);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v53);
  v55 = (char *)&v133 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA3268);
  sub_23F6D3588();
  v57 = MEMORY[0x24BDAC7A8](v56);
  v59 = (char *)&v133 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = MEMORY[0x24BDAC7A8](v57);
  v62 = (char *)&v133 - v61;
  MEMORY[0x24BDAC7A8](v60);
  v64 = (char *)&v133 - v63;
  sub_23F6D3740(v166, (uint64_t)&v133 - v63);
  sub_23F6D3740(v167, (uint64_t)v62);
  v65 = (uint64_t)&v55[*(int *)(v52 + 48)];
  sub_23F6D3740((uint64_t)v64, (uint64_t)v55);
  sub_23F6D3740((uint64_t)v62, v65);
  sub_23F6B5164((uint64_t)v55, 1, v48);
  if (v66)
  {
    sub_23F6B6EF8((uint64_t)v62);
    sub_23F6B6EF8((uint64_t)v64);
    sub_23F6B5164(v65, 1, v48);
    if (v66)
    {
      sub_23F6B4F84((uint64_t)v55, &qword_256EA3268);
      goto LABEL_12;
    }
LABEL_9:
    v67 = &qword_256EA7E88;
LABEL_10:
    v68 = (uint64_t)v55;
    goto LABEL_21;
  }
  sub_23F6D3530((uint64_t)v55, (uint64_t)v59, &qword_256EA3268);
  sub_23F6B5164(v65, 1, v48);
  if (v66)
  {
    sub_23F6B64F4((uint64_t)v62);
    sub_23F6B64F4((uint64_t)v64);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v59, v48);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v51, v65, v48);
  sub_23F6D3458(&qword_256EA26B8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB96E0], MEMORY[0x24BEB96F0]);
  v69 = sub_23FB2F11C();
  v70 = *(void (**)(char *, uint64_t))(v49 + 8);
  v70(v51, v48);
  sub_23F6B6EF8((uint64_t)v62);
  sub_23F6B6EF8((uint64_t)v64);
  v70(v59, v48);
  sub_23F6B6EF8((uint64_t)v55);
  if ((v69 & 1) == 0)
    goto LABEL_22;
LABEL_12:
  v71 = (int *)type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  v72 = v166;
  v73 = v163;
  sub_23F6D36F4(v166 + v71[5], v163);
  v74 = v167;
  sub_23F6D36F4(v167 + v71[5], (uint64_t)v46);
  v75 = v165;
  v76 = (uint64_t)v165 + *(int *)(v162 + 48);
  sub_23F6D36F4(v73, (uint64_t)v165);
  sub_23F6D36F4((uint64_t)v46, v76);
  sub_23F6B5164((uint64_t)v75, 1, v164);
  if (v66)
  {
    sub_23F6D3748((uint64_t)v46);
    sub_23F6D3748(v73);
    sub_23F7613D0();
    if (v66)
    {
      sub_23F6B4F84((uint64_t)v75, &qword_256EA7E80);
      goto LABEL_25;
    }
LABEL_20:
    v67 = &qword_256EA7E78;
    v68 = (uint64_t)v75;
    goto LABEL_21;
  }
  v77 = v160;
  sub_23F6D3530((uint64_t)v75, v160, &qword_256EA7E80);
  sub_23F7613D0();
  if (v78)
  {
    sub_23F6B64F4((uint64_t)v46);
    sub_23F6B64F4(v73);
    sub_23F6D3508(v77, type metadata accessor for TranscriptProtoAction);
    goto LABEL_20;
  }
  v81 = v152;
  sub_23F6D34D0(v76, v152, type metadata accessor for TranscriptProtoAction);
  static TranscriptProtoAction.== infix(_:_:)();
  v83 = v82;
  sub_23F6D3508(v81, type metadata accessor for TranscriptProtoAction);
  sub_23F6B6EF8((uint64_t)v46);
  sub_23F6B6EF8(v73);
  sub_23F6D3508(v77, type metadata accessor for TranscriptProtoAction);
  sub_23F6B6EF8((uint64_t)v75);
  if ((v83 & 1) == 0)
    goto LABEL_22;
LABEL_25:
  v84 = v161;
  sub_23F6D36F4(v72 + v71[6], v161);
  v165 = v71;
  v85 = v74 + v71[6];
  v86 = v155;
  sub_23F6D36F4(v85, v155);
  v55 = v157;
  v87 = (uint64_t)&v157[*(int *)(v154 + 48)];
  sub_23F6D36F4(v84, (uint64_t)v157);
  sub_23F6D36F4(v86, v87);
  sub_23F6B5164((uint64_t)v55, 1, v156);
  if (v66)
  {
    sub_23F6D3748(v86);
    sub_23F6D3748(v84);
    sub_23F7613D0();
    v88 = v153;
    v90 = v158;
    v89 = v159;
    if (v66)
    {
      sub_23F6B4F84((uint64_t)v55, &qword_256EA7E70);
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  v91 = v151;
  sub_23F6D3530((uint64_t)v55, v151, &qword_256EA7E70);
  sub_23F7613D0();
  v93 = v158;
  v94 = v159;
  if (v92)
  {
    sub_23F6B64F4(v86);
    sub_23F6B64F4(v161);
    sub_23F6D3508(v91, type metadata accessor for TranscriptProtoStatementOutcome);
LABEL_33:
    v67 = &qword_256EA7E68;
    goto LABEL_10;
  }
  v95 = v149;
  sub_23F6D34D0(v87, v149, type metadata accessor for TranscriptProtoStatementOutcome);
  static TranscriptProtoStatementOutcome.== infix(_:_:)();
  v97 = v96;
  sub_23F6D3508(v95, type metadata accessor for TranscriptProtoStatementOutcome);
  sub_23F6B6EF8(v86);
  sub_23F6B6EF8(v161);
  v98 = v91;
  v88 = v153;
  sub_23F6D3508(v98, type metadata accessor for TranscriptProtoStatementOutcome);
  sub_23F6B6EF8((uint64_t)v55);
  v89 = v94;
  v90 = v93;
  if ((v97 & 1) == 0)
    goto LABEL_22;
LABEL_35:
  v99 = v165;
  v100 = v165[7];
  v101 = *(unsigned __int8 *)(v72 + v100);
  v102 = *(unsigned __int8 *)(v74 + v100);
  if (v101 == 2)
  {
    if (v102 != 2)
      goto LABEL_22;
    goto LABEL_40;
  }
  v79 = 0;
  if (v102 != 2 && ((v102 ^ v101) & 1) == 0)
  {
LABEL_40:
    v103 = v88;
    sub_23F6D36F4(v72 + v165[8], v90);
    v104 = v150;
    sub_23F6D36F4(v74 + v99[8], v150);
    v105 = v148;
    v106 = v148 + *(int *)(v146 + 48);
    sub_23F6D36F4(v90, v148);
    sub_23F6D36F4(v104, v106);
    v107 = v147;
    sub_23F6B5164(v105, 1, v147);
    if (v66)
    {
      sub_23F6D3748(v104);
      sub_23F6D3748(v90);
      sub_23F6B5164(v106, 1, v107);
      if (v66)
      {
        sub_23F6B4F84(v105, &qword_256EA7E60);
LABEL_50:
        v112 = v165;
        v113 = v144;
        sub_23F6D36F4(v72 + v165[9], v144);
        v114 = v143;
        sub_23F6D36F4(v74 + v112[9], v143);
        v115 = v145;
        v116 = v145 + *(int *)(v141 + 48);
        sub_23F6D36F4(v113, v145);
        v117 = v115;
        sub_23F6D3530(v114, v116, &qword_256EA7E50);
        v118 = v115;
        v119 = v142;
        sub_23F6B5164(v118, 1, v142);
        if (v66)
        {
          sub_23F6D3748(v114);
          v117 = v145;
          sub_23F6B4F84(v113, &qword_256EA7E50);
          sub_23F7613D0();
          if (v66)
          {
            sub_23F6B4F84(v117, &qword_256EA7E50);
LABEL_60:
            v126 = v72 + v112[10];
            v127 = v137;
            v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16);
            v129 = v135;
            v130 = v138;
            v128(v135, v126, v138);
            v131 = v136;
            v128(v136, v74 + v112[10], v130);
            sub_23F6D3458((unint64_t *)&qword_256EA2598, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v79 = sub_23F6D37C8();
            v132 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
            v132(v131, v130);
            v132(v129, v130);
            return v79 & 1;
          }
        }
        else
        {
          sub_23F6D3530(v117, v103, &qword_256EA7E50);
          sub_23F7613D0();
          if (!v120)
          {
            v121 = v139;
            v122 = v134;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v134, v116, v119);
            sub_23F6D3458(&qword_256EA7E90, (uint64_t (*)(uint64_t))MEMORY[0x24BEB96B0], MEMORY[0x24BEB96C0]);
            v123 = sub_23F6D37C8();
            v124 = v119;
            v125 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
            v125(v122, v124);
            sub_23F6D3748(v143);
            sub_23F6D3748(v144);
            v125(v153, v124);
            sub_23F6D3748(v117);
            if ((v123 & 1) != 0)
              goto LABEL_60;
            goto LABEL_22;
          }
          sub_23F6B64F4(v143);
          sub_23F6B64F4(v144);
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v103, v119);
        }
        v67 = &qword_256EA7E48;
        v68 = v117;
        goto LABEL_21;
      }
    }
    else
    {
      sub_23F6D3530(v105, v89, &qword_256EA7E60);
      sub_23F6B5164(v106, 1, v107);
      if (!v108)
      {
        v109 = v140;
        sub_23F6D34D0(v106, v140, type metadata accessor for TranscriptProtoResponseManifest);
        static TranscriptProtoResponseManifest.== infix(_:_:)();
        v111 = v110;
        sub_23F6D3508(v109, type metadata accessor for TranscriptProtoResponseManifest);
        sub_23F6B6EF8(v150);
        sub_23F6B6EF8(v90);
        sub_23F6D3508(v89, type metadata accessor for TranscriptProtoResponseManifest);
        sub_23F6B6EF8(v105);
        if ((v111 & 1) == 0)
          goto LABEL_22;
        goto LABEL_50;
      }
      sub_23F6B64F4(v150);
      sub_23F6B64F4(v90);
      sub_23F6D3508(v89, type metadata accessor for TranscriptProtoResponseManifest);
    }
    v67 = &qword_256EA7E58;
    v68 = v105;
LABEL_21:
    sub_23F6B4F84(v68, v67);
LABEL_22:
    v79 = 0;
  }
  return v79 & 1;
}

uint64_t ResponseGenerationProtoStatementResultDigest.hashValue.getter()
{
  return sub_23F6C2504(type metadata accessor for ResponseGenerationProtoStatementResultDigest, &qword_256EA7E98, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
}

unint64_t sub_23F761040()
{
  static ResponseGenerationProtoStatementResultDigest.protoMessageName.getter();
  return 0xD000000000000028;
}

uint64_t sub_23F761064()
{
  return ResponseGenerationProtoStatementResultDigest.decodeMessage<A>(decoder:)();
}

void sub_23F761078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ResponseGenerationProtoStatementResultDigest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_23F76108C()
{
  sub_23F6D3458(&qword_256EA7ED8, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
  return sub_23FB2D784();
}

uint64_t sub_23F7610E0()
{
  sub_23F6D3458(&qword_256EA7E38, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
  return sub_23FB2D8F8();
}

uint64_t sub_23F761124()
{
  sub_23F6D3458(&qword_256EA7E38, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
  return sub_23FB2D904();
}

unint64_t sub_23F761178()
{
  unint64_t result;

  result = qword_256EA7E30;
  if (!qword_256EA7E30)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseGenerationProtoResponseMode, &type metadata for ResponseGenerationProtoResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA7E30);
  }
  return result;
}

unint64_t sub_23F7611B8()
{
  unint64_t result;

  result = qword_256EA7EA0;
  if (!qword_256EA7EA0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseGenerationProtoResponseMode, &type metadata for ResponseGenerationProtoResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA7EA0);
  }
  return result;
}

unint64_t sub_23F7611F8()
{
  unint64_t result;

  result = qword_256EA7EA8;
  if (!qword_256EA7EA8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseGenerationProtoResponseMode, &type metadata for ResponseGenerationProtoResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA7EA8);
  }
  return result;
}

void sub_23F761234()
{
  sub_23F6D3458(&qword_256EA7EB0, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
}

void sub_23F761260()
{
  sub_23F6D3458((unint64_t *)&qword_256EA7EB8, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
}

void sub_23F76128C()
{
  sub_23F6D3458(&qword_256EA7E40, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
}

void sub_23F7612B8()
{
  sub_23F6D3458(&qword_256EA7EC0, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
}

void sub_23F7612E4()
{
  sub_23F6D3458(&qword_256EA7EC8, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
}

void sub_23F761310()
{
  sub_23F6D3458(&qword_256EA7E38, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
}

void sub_23F76133C()
{
  sub_23F6D3458(&qword_256EA7E98, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
}

void sub_23F761368()
{
  sub_23F6D3458(&qword_256EA7ED0, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
}

unint64_t sub_23F761394()
{
  unint64_t result;

  result = qword_256EA7EF8;
  if (!qword_256EA7EF8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for TranscriptProtoUndoOperation, &type metadata for TranscriptProtoUndoOperation);
    atomic_store(result, (unint64_t *)&qword_256EA7EF8);
  }
  return result;
}

uint64_t sub_23F7613D0()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v0, 1, v1);
}

IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode __swiftcall ResponseGenerationProtoResponseMode.init()()
{
  _BYTE *v0;
  IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode result;

  *v0 = 0;
  return result;
}

IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode_optional __swiftcall ResponseGenerationProtoResponseMode.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode_optional)rawValue;
}

uint64_t ResponseGenerationProtoResponseMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void ResponseGenerationProtoResponseGenerationInput.init()(uint64_t a1@<X8>)
{
  type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_QWORD *)(a1 + 56) = MEMORY[0x24BEE4AF8];
  sub_23F694CC8();
}

uint64_t type metadata accessor for ResponseGenerationProtoResponseGenerationInput(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA7F80);
}

uint64_t ResponseGenerationProtoResponseGenerationInput.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  sub_23F6B53A4();
  v0 = sub_23F6B5994();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t ResponseGenerationProtoResponseGenerationInput.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  sub_23F6B53A4();
  v0 = sub_23F6F07FC();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t (*ResponseGenerationProtoResponseGenerationInput.unknownFields.modify())()
{
  type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  return nullsub_1;
}

void ResponseGenerationProtoStatementResultDigest.init()(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_23FB2EBC4();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, 1, 1, v2);
  v3 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  v4 = sub_23F6F0960();
  v5 = type metadata accessor for TranscriptProtoAction(v4);
  sub_23F76C664(v5);
  v6 = sub_23F6F0960();
  v7 = type metadata accessor for TranscriptProtoStatementOutcome(v6);
  sub_23F76C664(v7);
  *(_BYTE *)(a1 + *(int *)(v3 + 28)) = 2;
  v8 = sub_23F6F0960();
  v9 = type metadata accessor for TranscriptProtoResponseManifest(v8);
  sub_23F76C664(v9);
  sub_23F6F0960();
  v10 = sub_23FB2EBA0();
  sub_23F76C664(v10);
  _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
  sub_23F694C84();
}

uint64_t type metadata accessor for ResponseGenerationProtoStatementResultDigest(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EA8068);
}

uint64_t ResponseGenerationProtoStatementResultDigest.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F76C678();
  sub_23F6B53A4();
  v0 = sub_23F6B5994();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t ResponseGenerationProtoStatementResultDigest.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F76C684();
  sub_23F6B53A4();
  v0 = sub_23F6F07FC();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t (*ResponseGenerationProtoStatementResultDigest.unknownFields.modify())()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  return nullsub_1;
}

void *static ResponseGenerationProtoResponseMode.allCases.getter()
{
  return &unk_250FEC270;
}

IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode_optional sub_23F761648(Swift::Int *a1)
{
  return ResponseGenerationProtoResponseMode.init(rawValue:)(*a1);
}

void sub_23F761650(uint64_t *a1@<X8>)
{
  *a1 = ResponseGenerationProtoResponseMode.rawValue.getter();
  sub_23F694CC8();
}

void sub_23F761670()
{
  sub_23F7F6E74();
}

uint64_t sub_23F761678()
{
  sub_23F761178();
  return sub_23FB2D790();
}

void sub_23F7616B0()
{
  sub_23F7F7850();
}

void sub_23F7616B8(_QWORD *a1@<X8>)
{
  *a1 = &unk_250FEC270;
}

void ResponseGenerationProtoResponseGenerationInput.clientRequestID.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void ResponseGenerationProtoResponseGenerationInput.clientRequestID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  sub_23F694C84();
}

uint64_t (*ResponseGenerationProtoResponseGenerationInput.clientRequestID.modify())()
{
  return nullsub_1;
}

void ResponseGenerationProtoResponseGenerationInput.utterance.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void ResponseGenerationProtoResponseGenerationInput.utterance.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_23F694C84();
}

uint64_t (*ResponseGenerationProtoResponseGenerationInput.utterance.modify())()
{
  return nullsub_1;
}

void ResponseGenerationProtoResponseGenerationInput.responseMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *ResponseGenerationProtoResponseGenerationInput.responseMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*ResponseGenerationProtoResponseGenerationInput.responseMode.modify())()
{
  return nullsub_1;
}

void ResponseGenerationProtoResponseGenerationInput.responseLocale.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void ResponseGenerationProtoResponseGenerationInput.responseLocale.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  sub_23F694C84();
}

uint64_t (*ResponseGenerationProtoResponseGenerationInput.responseLocale.modify())()
{
  return nullsub_1;
}

uint64_t ResponseGenerationProtoResponseGenerationInput.statementResultDigests.getter()
{
  return swift_bridgeObjectRetain();
}

void ResponseGenerationProtoResponseGenerationInput.statementResultDigests.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  sub_23F694CC8();
}

uint64_t (*ResponseGenerationProtoResponseGenerationInput.statementResultDigests.modify())()
{
  return nullsub_1;
}

uint64_t ResponseGenerationProtoResponseGenerationInput.init(clientRequestID:utterance:responseMode:responseLocale:statementResultDigests:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v17;
  uint64_t result;

  v17 = *a5;
  type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  result = _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = v17;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  return result;
}

void ResponseGenerationProtoStatementResultDigest.toolDefinition.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F6B4F58(v1, a1, &qword_256EA3268);
}

void ResponseGenerationProtoStatementResultDigest.toolDefinition.setter(uint64_t a1)
{
  uint64_t v1;

  sub_23F710E80(a1, v1, &qword_256EA3268);
}

uint64_t (*ResponseGenerationProtoStatementResultDigest.toolDefinition.modify())()
{
  return nullsub_1;
}

void ResponseGenerationProtoStatementResultDigest.actionCreated.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F76C678();
  sub_23F76C690(v0 + *(int *)(v1 + 20), v2, &qword_256EA7E80);
  sub_23F694CC8();
}

void ResponseGenerationProtoStatementResultDigest.actionCreated.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F76C684();
  sub_23F76C698(v1, v0 + *(int *)(v1 + 20), &qword_256EA7E80);
  sub_23F694CC8();
}

uint64_t (*ResponseGenerationProtoStatementResultDigest.actionCreated.modify())()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  return nullsub_1;
}

void ResponseGenerationProtoStatementResultDigest.statementOutcome.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F76C678();
  sub_23F76C690(v0 + *(int *)(v1 + 24), v2, &qword_256EA7E70);
  sub_23F694CC8();
}

void ResponseGenerationProtoStatementResultDigest.statementOutcome.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F76C684();
  sub_23F76C698(v1, v0 + *(int *)(v1 + 24), &qword_256EA7E70);
  sub_23F694CC8();
}

uint64_t (*ResponseGenerationProtoStatementResultDigest.statementOutcome.modify())()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  return nullsub_1;
}

void ResponseGenerationProtoStatementResultDigest.undoOperation.getter()
{
  _BYTE *v0;
  uint64_t v1;

  *v0 = *(_BYTE *)(v1 + *(int *)(sub_23F76C678() + 28));
  sub_23F694CC8();
}

void ResponseGenerationProtoStatementResultDigest.undoOperation.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_BYTE *)(v1 + *(int *)(type metadata accessor for ResponseGenerationProtoStatementResultDigest(0) + 28)) = v2;
  sub_23F694CC8();
}

uint64_t (*ResponseGenerationProtoStatementResultDigest.undoOperation.modify())()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  return nullsub_1;
}

void ResponseGenerationProtoStatementResultDigest.responseManifest.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F76C678();
  sub_23F76C690(v0 + *(int *)(v1 + 32), v2, &qword_256EA7E60);
  sub_23F694CC8();
}

void ResponseGenerationProtoStatementResultDigest.responseManifest.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F76C684();
  sub_23F76C698(v1, v0 + *(int *)(v1 + 32), &qword_256EA7E60);
  sub_23F694CC8();
}

uint64_t (*ResponseGenerationProtoStatementResultDigest.responseManifest.modify())()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  return nullsub_1;
}

void ResponseGenerationProtoStatementResultDigest.returnValueTypeDisplayRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F76C678();
  sub_23F76C690(v0 + *(int *)(v1 + 36), v2, &qword_256EA7E50);
  sub_23F694CC8();
}

void ResponseGenerationProtoStatementResultDigest.returnValueTypeDisplayRepresentation.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F76C684();
  sub_23F76C698(v1, v0 + *(int *)(v1 + 36), &qword_256EA7E50);
  sub_23F694CC8();
}

uint64_t (*ResponseGenerationProtoStatementResultDigest.returnValueTypeDisplayRepresentation.modify())()
{
  type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  return nullsub_1;
}

void ResponseGenerationProtoStatementResultDigest.init(toolDefinition:actionCreated:statementOutcome:undoOperation:responseManifest:returnValueTypeDisplayRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v30 = *a4;
  v11 = sub_23FB2EBC4();
  sub_23F76C664(v11);
  v12 = (int *)type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  v13 = a7 + v12[5];
  v14 = type metadata accessor for TranscriptProtoAction(0);
  sub_23F6B5A8C(v13, v15, v16, v14);
  v17 = a7 + v12[6];
  v18 = type metadata accessor for TranscriptProtoStatementOutcome(0);
  sub_23F6B5A8C(v17, v19, v20, v18);
  v21 = v12[7];
  *(_BYTE *)(a7 + v21) = 2;
  v22 = a7 + v12[8];
  v23 = type metadata accessor for TranscriptProtoResponseManifest(0);
  sub_23F6B5A8C(v22, v24, v25, v23);
  v26 = a7 + v12[9];
  v27 = sub_23FB2EBA0();
  sub_23F6B5A8C(v26, v28, v29, v27);
  _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
  sub_23F710E80(a1, a7, &qword_256EA3268);
  sub_23F710E80(a2, v13, &qword_256EA7E80);
  sub_23F710E80(a3, v17, &qword_256EA7E70);
  *(_BYTE *)(a7 + v21) = v30;
  sub_23F710E80(a5, v22, &qword_256EA7E60);
  sub_23F710E80(a6, v26, &qword_256EA7E50);
}

unint64_t sub_23F761CF8()
{
  unint64_t result;

  result = qword_256EA7F10;
  if (!qword_256EA7F10)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseGenerationProtoResponseMode, &type metadata for ResponseGenerationProtoResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA7F10);
  }
  return result;
}

unint64_t sub_23F761D38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA7F18;
  if (!qword_256EA7F18)
  {
    v1 = sub_23F6AE310(&qword_256EA7F20);
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256EA7F18);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationProtoResponseMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23F761DC8 + 4 * byte_23FB5C685[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23F761DFC + 4 * byte_23FB5C680[v4]))();
}

uint64_t sub_23F761DFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F761E04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F761E0CLL);
  return result;
}

uint64_t sub_23F761E18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F761E20);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23F761E24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F761E2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResponseGenerationProtoResponseMode()
{
  return &type metadata for ResponseGenerationProtoResponseMode;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResponseGenerationProtoResponseGenerationInput(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    v8 = *(int *)(a3 + 36);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 56) = a2[7];
    v11 = sub_23FB2D718();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for ResponseGenerationProtoResponseGenerationInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_23FB2D718();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ResponseGenerationProtoResponseGenerationInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = sub_23FB2D718();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for ResponseGenerationProtoResponseGenerationInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23FB2D718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for ResponseGenerationProtoResponseGenerationInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_23FB2D718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ResponseGenerationProtoResponseGenerationInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23FB2D718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseGenerationProtoResponseGenerationInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F762244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_23F694C84();
  }
  else
  {
    v6 = sub_23F6B53A4();
    sub_23F6F07D0(a1 + *(int *)(a3 + 36), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationProtoResponseGenerationInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F7622B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_23F694C84();
  }
  else
  {
    v7 = sub_23F6B53A4();
    sub_23F6F07C4(a1 + *(int *)(a4 + 36), a2, a2, v7);
  }
}

uint64_t sub_23F762308()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2D718();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResponseGenerationProtoStatementResultDigest(_QWORD *a1, char *a2, int *a3)
{
  char *v3;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  char *v108;
  char *v109;
  _QWORD *v110;
  _QWORD *v111;
  char *v112;
  char *v113;
  char *v114;
  int *v115;
  int *v116;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = sub_23FB2EBC4();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v3, 1, v7))
    {
      v8 = sub_23F6916B8(&qword_256EA3268);
      memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v10 = v6[5];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = &v3[v10];
    v13 = (int *)type metadata accessor for TranscriptProtoAction(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, (uint64_t)v13))
    {
      v14 = sub_23F6916B8(&qword_256EA7E80);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v113 = v3;
      v115 = v6;
      v110 = a1;
      v15 = *((_QWORD *)v12 + 1);
      *v11 = *(_QWORD *)v12;
      v11[1] = v15;
      *((_BYTE *)v11 + 16) = v12[16];
      v11[3] = *((_QWORD *)v12 + 3);
      v16 = v13[7];
      v17 = (_QWORD *)((char *)v11 + v16);
      v18 = &v12[v16];
      v19 = type metadata accessor for TranscriptProtoStatementID(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_23F6916B8(&qword_256EA25E0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *(_DWORD *)v17 = *(_DWORD *)v18;
        v21 = *((_QWORD *)v18 + 2);
        v17[1] = *((_QWORD *)v18 + 1);
        v17[2] = v21;
        v22 = *(int *)(v19 + 24);
        v23 = (char *)v17 + v22;
        v24 = &v18[v22];
        v25 = sub_23FB2D718();
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        v26(v23, v24, v25);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, 0, 1, v19);
      }
      v27 = v13[8];
      v28 = (_QWORD *)((char *)v11 + v27);
      v29 = &v12[v27];
      v30 = *((_QWORD *)v29 + 1);
      *v28 = *(_QWORD *)v29;
      v28[1] = v30;
      v31 = v13[9];
      v32 = (_QWORD *)((char *)v11 + v31);
      v33 = &v12[v31];
      v34 = *((_QWORD *)v33 + 1);
      *v32 = *(_QWORD *)v33;
      v32[1] = v34;
      v35 = v13[10];
      v36 = (_QWORD *)((char *)v11 + v35);
      v37 = &v12[v35];
      v38 = *((_QWORD *)v37 + 1);
      *v36 = *(_QWORD *)v37;
      v36[1] = v38;
      v39 = v13[11];
      v40 = (char *)v11 + v39;
      v41 = &v12[v39];
      v42 = sub_23FB2D718();
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43(v40, v41, v42);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v11, 0, 1, (uint64_t)v13);
      a1 = v110;
      v3 = v113;
      v6 = v115;
    }
    v44 = v6[6];
    v45 = (char *)a1 + v44;
    v46 = &v3[v44];
    v47 = type metadata accessor for TranscriptProtoStatementOutcome(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v46, 1, v47))
    {
      v48 = sub_23F6916B8(&qword_256EA7E70);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v49 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
      if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v46, 1, v49))
      {
        v51 = (char *)&loc_23F7626EC + 4 * word_23FB5C68A[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v50 = sub_23F6916B8(&qword_256EA7FF8);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      v52 = *(int *)(v47 + 20);
      v53 = &v45[v52];
      v54 = &v46[v52];
      v55 = sub_23FB2D718();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v45, 0, 1, v47);
    }
    v56 = v6[8];
    *((_BYTE *)a1 + v6[7]) = v3[v6[7]];
    v57 = (_QWORD *)((char *)a1 + v56);
    v58 = &v3[v56];
    v59 = (int *)type metadata accessor for TranscriptProtoResponseManifest(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v58, 1, (uint64_t)v59))
    {
      v60 = sub_23F6916B8(&qword_256EA7E60);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v114 = v3;
      v116 = v6;
      *v57 = *(_QWORD *)v58;
      v61 = v59[5];
      v62 = (_QWORD *)((char *)v57 + v61);
      v63 = &v58[v61];
      v64 = type metadata accessor for TranscriptProtoResponseDialog(0);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v63, 1, v64))
      {
        v65 = sub_23F6916B8(&qword_256EA8000);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        v66 = *((_QWORD *)v63 + 1);
        *v62 = *(_QWORD *)v63;
        v62[1] = v66;
        v67 = *((_QWORD *)v63 + 3);
        v62[2] = *((_QWORD *)v63 + 2);
        v62[3] = v67;
        v111 = a1;
        v68 = *((_QWORD *)v63 + 5);
        v62[4] = *((_QWORD *)v63 + 4);
        v62[5] = v68;
        v69 = *((_QWORD *)v63 + 7);
        v62[6] = *((_QWORD *)v63 + 6);
        v62[7] = v69;
        v70 = *(int *)(v64 + 32);
        v107 = &v63[v70];
        v108 = (char *)v62 + v70;
        v71 = sub_23FB2D718();
        v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a1 = v111;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v106(v108, v107, v71);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v62, 0, 1, v64);
      }
      v72 = v59[6];
      v73 = (_QWORD *)((char *)v57 + v72);
      v74 = &v58[v72];
      v75 = type metadata accessor for TranscriptProtoResponseVisual(0);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v74, 1, v75))
      {
        v76 = sub_23F6916B8(&qword_256EA8008);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        v77 = *((_QWORD *)v74 + 1);
        *v73 = *(_QWORD *)v74;
        v73[1] = v77;
        v78 = *(int *)(v75 + 24);
        v109 = &v74[v78];
        v112 = (char *)v73 + v78;
        v79 = a1;
        v80 = sub_23FB2D718();
        v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v82 = v80;
        a1 = v79;
        v81(v112, v109, v82);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v73, 0, 1, v75);
      }
      v83 = v59[7];
      v84 = (_QWORD *)((char *)v57 + v83);
      v85 = &v58[v83];
      v86 = *((_QWORD *)v85 + 1);
      *v84 = *(_QWORD *)v85;
      v84[1] = v86;
      v87 = v59[8];
      v88 = (_QWORD *)((char *)v57 + v87);
      v89 = &v58[v87];
      v90 = *((_QWORD *)v89 + 1);
      *v88 = *(_QWORD *)v89;
      v88[1] = v90;
      *((_BYTE *)v57 + v59[9]) = v58[v59[9]];
      *((_BYTE *)v57 + v59[10]) = v58[v59[10]];
      v91 = v59[11];
      v92 = (char *)v57 + v91;
      v93 = &v58[v91];
      v94 = sub_23FB2D718();
      v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v95(v92, v93, v94);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v57, 0, 1, (uint64_t)v59);
      v3 = v114;
      v6 = v116;
    }
    v96 = v6[9];
    v97 = (char *)a1 + v96;
    v98 = &v3[v96];
    v99 = sub_23FB2EBA0();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v98, 1, v99))
    {
      v100 = sub_23F6916B8(&qword_256EA7E50);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v97, 0, 1, v99);
    }
    v101 = v6[10];
    v102 = (char *)a1 + v101;
    v103 = &v3[v101];
    v104 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
  }
  return a1;
}

uint64_t destroy for ResponseGenerationProtoStatementResultDigest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = sub_23FB2EBC4();
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v4))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for TranscriptProtoAction(0);
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v5 + *(int *)(v6 + 28);
    v8 = type metadata accessor for TranscriptProtoStatementID(0);
    if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v7, 1, v8))
    {
      swift_bridgeObjectRelease();
      v9 = v7 + *(int *)(v8 + 24);
      v10 = sub_23FB2D718();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v5 + *(int *)(v6 + 44);
    v12 = sub_23FB2D718();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  v13 = a1 + a2[6];
  v14 = type metadata accessor for TranscriptProtoStatementOutcome(0);
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v14))
  {
    v15 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v15))
    {
LABEL_53:
      v54 = v13 + *(int *)(v14 + 20);
      v55 = sub_23FB2D718();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
      goto LABEL_54;
    }
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v16 = (int *)type metadata accessor for TranscriptProtoActionSuccess(0);
        v17 = v13 + v16[6];
        v18 = sub_23FB2EB1C();
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v17, 1, v18))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
        v19 = v13 + v16[7];
        v20 = type metadata accessor for TranscriptProtoUndoContext(0);
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v19, 1, v20))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v21 = v19 + *(int *)(v20 + 28);
          v22 = sub_23FB2D718();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
        }
        v23 = v16[8];
        goto LABEL_52;
      case 1u:
        swift_bridgeObjectRelease();
        v24 = type metadata accessor for TranscriptProtoActionConfirmation(0);
        goto LABEL_51;
      case 2u:
        swift_bridgeObjectRelease();
        v24 = type metadata accessor for TranscriptProtoParameterNeedsValue(0);
        goto LABEL_51;
      case 3u:
        swift_bridgeObjectRelease();
        v25 = type metadata accessor for TranscriptProtoParameterConfirmation(0);
        goto LABEL_20;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = *(int *)(type metadata accessor for TranscriptProtoParameterDisambiguation(0) + 28);
        goto LABEL_52;
      case 5u:
        swift_bridgeObjectRelease();
        v25 = type metadata accessor for TranscriptProtoParameterNotAllowed(0);
LABEL_20:
        v26 = v25;
        v27 = v13 + *(int *)(v25 + 24);
        v28 = sub_23FB2EB1C();
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v27, 1, v28))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
        v23 = *(int *)(v26 + 28);
        goto LABEL_52;
      case 6u:
        swift_bridgeObjectRelease();
        v29 = type metadata accessor for TranscriptProtoParameterCandidatesNotFound(0);
        v30 = v13 + *(int *)(v29 + 20);
        v31 = sub_23FB2EB1C();
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v30, 1, v31))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
        v23 = *(int *)(v29 + 24);
        goto LABEL_52;
      case 7u:
        v32 = type metadata accessor for TranscriptProtoActionRequirementEnum(0);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v32))goto LABEL_50;
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload != 2)
        {
          if (EnumCaseMultiPayload == 1)
          {
            v34 = type metadata accessor for TranscriptProtoPermissionRequirement(0);
          }
          else
          {
            if (EnumCaseMultiPayload)
              goto LABEL_50;
            v34 = type metadata accessor for TranscriptProtoAppRequirement(0);
          }
LABEL_49:
          v50 = v13 + *(int *)(v34 + 20);
          v51 = sub_23FB2D718();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v50, v51);
LABEL_50:
          v24 = type metadata accessor for TranscriptProtoActionRequirement(0);
LABEL_51:
          v23 = *(int *)(v24 + 20);
LABEL_52:
          v52 = v13 + v23;
          v53 = sub_23FB2D718();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
          goto LABEL_53;
        }
        v42 = type metadata accessor for TranscriptProtoSystemRequirementMessageEnum(0);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v42))goto LABEL_48;
        v43 = swift_getEnumCaseMultiPayload();
        if (v43 == 1)
        {
          v45 = type metadata accessor for TranscriptProtoSystemRequirementAuthenticationRequestAuthenticationLevel(0);
          if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v45))
          {
            v46 = v13 + *(int *)(v45 + 20);
            v47 = sub_23FB2D718();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
          }
          v44 = type metadata accessor for TranscriptProtoSystemRequirementAuthenticationRequest(0);
        }
        else
        {
          if (v43)
          {
LABEL_48:
            v34 = type metadata accessor for TranscriptProtoSystemRequirementMessage(0);
            goto LABEL_49;
          }
          swift_bridgeObjectRelease();
          v44 = type metadata accessor for TranscriptProtoSystemRequirementProtectedAppRequest(0);
        }
        v48 = v13 + *(int *)(v44 + 20);
        v49 = sub_23FB2D718();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
        goto LABEL_48;
      case 8u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = *(int *)(type metadata accessor for TranscriptProtoToolDisambiguation(0) + 24);
        goto LABEL_52;
      case 9u:
        v35 = type metadata accessor for TranscriptProtoActionFailureFailure(0);
        if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v35))
        {
          v36 = type metadata accessor for TranscriptProtoActionFailureFailureEnum(0);
          if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v36))
          {
            v37 = type metadata accessor for TranscriptProtoActionFailureDeveloperDefinedError(0);
            if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 16, v37))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v38 = v13 + *(int *)(v37 + 28);
              v39 = sub_23FB2D718();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
            }
          }
          v40 = v13 + *(int *)(v35 + 20);
          v41 = sub_23FB2D718();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
        }
        v24 = type metadata accessor for TranscriptProtoActionFailure(0);
        goto LABEL_51;
      case 0xAu:
        swift_bridgeObjectRelease();
        v24 = type metadata accessor for TranscriptProtoValueDisambiguation(0);
        goto LABEL_51;
      default:
        goto LABEL_53;
    }
  }
LABEL_54:
  v56 = a1 + a2[8];
  v57 = (int *)type metadata accessor for TranscriptProtoResponseManifest(0);
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v56, 1, (uint64_t)v57))
  {
    swift_bridgeObjectRelease();
    v58 = v56 + v57[5];
    v59 = type metadata accessor for TranscriptProtoResponseDialog(0);
    if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v58, 1, v59))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v60 = v58 + *(int *)(v59 + 32);
      v61 = sub_23FB2D718();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v60, v61);
    }
    v62 = v56 + v57[6];
    v63 = type metadata accessor for TranscriptProtoResponseVisual(0);
    if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v62, 1, v63))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 = v62 + *(int *)(v63 + 24);
      v65 = sub_23FB2D718();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v64, v65);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v66 = v56 + v57[11];
    v67 = sub_23FB2D718();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v66, v67);
  }
  v68 = a1 + a2[9];
  v69 = sub_23FB2EBA0();
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v68, 1, v69))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v68, v69);
  v70 = a1 + a2[10];
  v71 = sub_23FB2D718();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v70, v71);
}

char *initializeWithCopy for ResponseGenerationProtoStatementResultDigest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  int *v113;
  int *v114;

  v6 = sub_23FB2EBC4();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_23F6916B8(&qword_256EA3268);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for TranscriptProtoAction(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v10, 1, (uint64_t)v11))
  {
    v12 = sub_23F6916B8(&qword_256EA7E80);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v111 = a2;
    v113 = a3;
    v108 = a1;
    v13 = *((_QWORD *)v10 + 1);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *((_QWORD *)v9 + 1) = v13;
    v9[16] = v10[16];
    *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
    v14 = v11[7];
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = type metadata accessor for TranscriptProtoStatementID(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v16, 1, v17))
    {
      v18 = sub_23F6916B8(&qword_256EA25E0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      v19 = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      *((_QWORD *)v15 + 2) = v19;
      v20 = *(int *)(v17 + 24);
      v21 = &v15[v20];
      v22 = &v16[v20];
      v23 = sub_23FB2D718();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      v24(v21, v22, v23);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v15, 0, 1, v17);
    }
    v25 = v11[8];
    v26 = &v9[v25];
    v27 = &v10[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v11[9];
    v30 = &v9[v29];
    v31 = &v10[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v11[10];
    v34 = &v9[v33];
    v35 = &v10[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v11[11];
    v38 = &v9[v37];
    v39 = &v10[v37];
    v40 = sub_23FB2D718();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v38, v39, v40);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v9, 0, 1, (uint64_t)v11);
    a1 = v108;
    a2 = v111;
    a3 = v113;
  }
  v42 = a3[6];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = type metadata accessor for TranscriptProtoStatementOutcome(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v44, 1, v45))
  {
    v46 = sub_23F6916B8(&qword_256EA7E70);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v47 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
    if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v44, 1, v47))
    {
      v49 = (char *)&loc_23F764168 + 4 * word_23FB5C6AC[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v48 = sub_23F6916B8(&qword_256EA7FF8);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    v50 = *(int *)(v45 + 20);
    v51 = &v43[v50];
    v52 = &v44[v50];
    v53 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v43, 0, 1, v45);
  }
  v54 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = (int *)type metadata accessor for TranscriptProtoResponseManifest(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v56, 1, (uint64_t)v57))
  {
    v58 = sub_23F6916B8(&qword_256EA7E60);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v112 = a2;
    v114 = a3;
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v59 = v57[5];
    v60 = &v55[v59];
    v61 = &v56[v59];
    v62 = type metadata accessor for TranscriptProtoResponseDialog(0);
    swift_bridgeObjectRetain();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v61, 1, v62))
    {
      v63 = sub_23F6916B8(&qword_256EA8000);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      v64 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v64;
      v65 = *((_QWORD *)v61 + 3);
      *((_QWORD *)v60 + 2) = *((_QWORD *)v61 + 2);
      *((_QWORD *)v60 + 3) = v65;
      v109 = a1;
      v66 = *((_QWORD *)v61 + 5);
      *((_QWORD *)v60 + 4) = *((_QWORD *)v61 + 4);
      *((_QWORD *)v60 + 5) = v66;
      v67 = *((_QWORD *)v61 + 7);
      *((_QWORD *)v60 + 6) = *((_QWORD *)v61 + 6);
      *((_QWORD *)v60 + 7) = v67;
      v68 = *(int *)(v62 + 32);
      v105 = &v61[v68];
      v106 = &v60[v68];
      v69 = sub_23FB2D718();
      v104 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1 = v109;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v104(v106, v105, v69);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v60, 0, 1, v62);
    }
    v70 = v57[6];
    v71 = &v55[v70];
    v72 = &v56[v70];
    v73 = type metadata accessor for TranscriptProtoResponseVisual(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v72, 1, v73))
    {
      v74 = sub_23F6916B8(&qword_256EA8008);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      v75 = *((_QWORD *)v72 + 1);
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v75;
      v76 = *(int *)(v73 + 24);
      v107 = &v72[v76];
      v110 = &v71[v76];
      v77 = a1;
      v78 = sub_23FB2D718();
      v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v80 = v78;
      a1 = v77;
      v79(v110, v107, v80);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v71, 0, 1, v73);
    }
    v81 = v57[7];
    v82 = &v55[v81];
    v83 = &v56[v81];
    v84 = *((_QWORD *)v83 + 1);
    *(_QWORD *)v82 = *(_QWORD *)v83;
    *((_QWORD *)v82 + 1) = v84;
    v85 = v57[8];
    v86 = &v55[v85];
    v87 = &v56[v85];
    v88 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_QWORD *)v86 + 1) = v88;
    v55[v57[9]] = v56[v57[9]];
    v55[v57[10]] = v56[v57[10]];
    v89 = v57[11];
    v90 = &v55[v89];
    v91 = &v56[v89];
    v92 = sub_23FB2D718();
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v93(v90, v91, v92);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v55, 0, 1, (uint64_t)v57);
    a2 = v112;
    a3 = v114;
  }
  v94 = a3[9];
  v95 = &a1[v94];
  v96 = &a2[v94];
  v97 = sub_23FB2EBA0();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v96, 1, v97))
  {
    v98 = sub_23F6916B8(&qword_256EA7E50);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v95, 0, 1, v97);
  }
  v99 = a3[10];
  v100 = &a1[v99];
  v101 = &a2[v99];
  v102 = sub_23FB2D718();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
  return a1;
}

char *assignWithCopy for ResponseGenerationProtoStatementResultDigest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  int *v99;
  int v100;
  int v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  void (*v149)(char *, char *, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  void (*v184)(char *, char *, uint64_t);
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  int *v199;
  int *v200;
  int *v201;
  int *v202;

  v6 = sub_23FB2EBC4();
  v7 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, v6);
  v8 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_23F6916B8(&qword_256EA3268);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = (uint64_t)&a1[v11];
  v13 = (uint64_t)&a2[v11];
  v14 = (int *)type metadata accessor for TranscriptProtoAction(0);
  v15 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v12, 1, (uint64_t)v14);
  v16 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, (uint64_t)v14);
  if (!v15)
  {
    if (v16)
    {
      sub_23F6F5978(v12, type metadata accessor for TranscriptProtoAction);
      goto LABEL_13;
    }
    v196 = a2;
    v200 = a3;
    v191 = a1;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v23 = v14[7];
    v24 = (_QWORD *)(v12 + v23);
    v25 = (_QWORD *)(v13 + v23);
    v26 = type metadata accessor for TranscriptProtoStatementID(0);
    v27 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v24, 1, v26);
    v28 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v25, 1, v26);
    if (v27)
    {
      if (!v28)
      {
        *(_DWORD *)v24 = *(_DWORD *)v25;
        v24[1] = v25[1];
        v24[2] = v25[2];
        v29 = *(int *)(v26 + 24);
        v30 = (char *)v24 + v29;
        v31 = (char *)v25 + v29;
        v32 = sub_23FB2D718();
        v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
        swift_bridgeObjectRetain();
        v33(v30, v31, v32);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v24, 0, 1, v26);
LABEL_23:
        a2 = v196;
        v55 = v14[8];
        v56 = (_QWORD *)(v12 + v55);
        v57 = (_QWORD *)(v13 + v55);
        *v56 = *v57;
        v56[1] = v57[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v58 = v14[9];
        v59 = (_QWORD *)(v12 + v58);
        v60 = (_QWORD *)(v13 + v58);
        *v59 = *v60;
        v59[1] = v60[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v61 = v14[10];
        v62 = (_QWORD *)(v12 + v61);
        v63 = (_QWORD *)(v13 + v61);
        *v62 = *v63;
        v62[1] = v63[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v64 = v14[11];
        v65 = v12 + v64;
        v66 = v13 + v64;
        v67 = sub_23FB2D718();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
        a1 = v191;
        a3 = v200;
        goto LABEL_24;
      }
    }
    else
    {
      if (!v28)
      {
        *(_DWORD *)v24 = *(_DWORD *)v25;
        v24[1] = v25[1];
        v24[2] = v25[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v83 = *(int *)(v26 + 24);
        v84 = (char *)v24 + v83;
        v85 = (char *)v25 + v83;
        v86 = sub_23FB2D718();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 24))(v84, v85, v86);
        goto LABEL_23;
      }
      sub_23F6F5978((uint64_t)v24, type metadata accessor for TranscriptProtoStatementID);
    }
    v54 = sub_23F6916B8(&qword_256EA25E0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_23;
  }
  if (v16)
  {
LABEL_13:
    v22 = sub_23F6916B8(&qword_256EA7E80);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_24;
  }
  v195 = a2;
  v199 = a3;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
  v17 = v14[7];
  v18 = (_QWORD *)(v12 + v17);
  v19 = (_QWORD *)(v13 + v17);
  v20 = type metadata accessor for TranscriptProtoStatementID(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v19, 1, v20))
  {
    v21 = sub_23F6916B8(&qword_256EA25E0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[1] = v19[1];
    v18[2] = v19[2];
    v34 = *(int *)(v20 + 24);
    v192 = (char *)v18 + v34;
    v35 = (char *)v19 + v34;
    v36 = a1;
    v37 = sub_23FB2D718();
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    swift_bridgeObjectRetain();
    v39 = v37;
    a1 = v36;
    v38(v192, v35, v39);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v18, 0, 1, v20);
  }
  v40 = v14[8];
  v41 = (_QWORD *)(v12 + v40);
  v42 = (_QWORD *)(v13 + v40);
  *v41 = *v42;
  v41[1] = v42[1];
  v43 = v14[9];
  v44 = (_QWORD *)(v12 + v43);
  v45 = (_QWORD *)(v13 + v43);
  *v44 = *v45;
  v44[1] = v45[1];
  v46 = v14[10];
  v47 = (_QWORD *)(v12 + v46);
  v48 = (_QWORD *)(v13 + v46);
  *v47 = *v48;
  v47[1] = v48[1];
  v49 = v14[11];
  v50 = v12 + v49;
  v51 = v13 + v49;
  v52 = sub_23FB2D718();
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53(v50, v51, v52);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v12, 0, 1, (uint64_t)v14);
  a2 = v195;
  a3 = v199;
LABEL_24:
  v68 = a3[6];
  v69 = &a1[v68];
  v70 = &a2[v68];
  v71 = type metadata accessor for TranscriptProtoStatementOutcome(0);
  v72 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v69, 1, v71);
  v73 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v70, 1, v71);
  if (!v72)
  {
    if (v73)
    {
      sub_23F6F5978((uint64_t)v69, type metadata accessor for TranscriptProtoStatementOutcome);
      goto LABEL_30;
    }
    v77 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
    v78 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v69, 1, v77);
    v79 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v70, 1, v77);
    if (v78)
    {
      if (!v79)
      {
        v80 = (char *)&loc_23F765730 + 4 * word_23FB5C6D8[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
    }
    else
    {
      if (!v79)
      {
        if (a1 != a2)
        {
          sub_23F6F5978((uint64_t)v69, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
          v87 = (char *)&loc_23F765910 + 4 * word_23FB5C6EE[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        goto LABEL_41;
      }
      sub_23F6F5978((uint64_t)v69, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
    }
    v82 = sub_23F6916B8(&qword_256EA7FF8);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
LABEL_41:
    v92 = *(int *)(v71 + 20);
    v93 = &v69[v92];
    v94 = &v70[v92];
    v95 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 24))(v93, v94, v95);
    goto LABEL_42;
  }
  if (v73)
  {
LABEL_30:
    v76 = sub_23F6916B8(&qword_256EA7E70);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_42;
  }
  v74 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v70, 1, v74))
  {
    v81 = (char *)&loc_23F7657CC + 4 * word_23FB5C6C2[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v75 = sub_23F6916B8(&qword_256EA7FF8);
  memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  v88 = *(int *)(v71 + 20);
  v89 = &v69[v88];
  v90 = &v70[v88];
  v91 = sub_23FB2D718();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v69, 0, 1, v71);
LABEL_42:
  a1[a3[7]] = a2[a3[7]];
  v96 = a3[8];
  v97 = &a1[v96];
  v98 = &a2[v96];
  v99 = (int *)type metadata accessor for TranscriptProtoResponseManifest(0);
  v100 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v97, 1, (uint64_t)v99);
  v101 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v98, 1, (uint64_t)v99);
  if (!v100)
  {
    if (v101)
    {
      sub_23F6F5978((uint64_t)v97, type metadata accessor for TranscriptProtoResponseManifest);
      goto LABEL_48;
    }
    v198 = a2;
    v202 = a3;
    *(_QWORD *)v97 = *(_QWORD *)v98;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v108 = v99[5];
    v109 = &v97[v108];
    v110 = &v98[v108];
    v111 = type metadata accessor for TranscriptProtoResponseDialog(0);
    v112 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v109, 1, v111);
    v113 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v110, 1, v111);
    if (v112)
    {
      if (!v113)
      {
        *(_QWORD *)v109 = *(_QWORD *)v110;
        *((_QWORD *)v109 + 1) = *((_QWORD *)v110 + 1);
        *((_QWORD *)v109 + 2) = *((_QWORD *)v110 + 2);
        *((_QWORD *)v109 + 3) = *((_QWORD *)v110 + 3);
        *((_QWORD *)v109 + 4) = *((_QWORD *)v110 + 4);
        *((_QWORD *)v109 + 5) = *((_QWORD *)v110 + 5);
        *((_QWORD *)v109 + 6) = *((_QWORD *)v110 + 6);
        *((_QWORD *)v109 + 7) = *((_QWORD *)v110 + 7);
        v114 = *(int *)(v111 + 32);
        v185 = &v110[v114];
        v187 = &v109[v114];
        v115 = sub_23FB2D718();
        v183 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v183(v187, v185, v115);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v109, 0, 1, v111);
        goto LABEL_60;
      }
    }
    else
    {
      if (!v113)
      {
        *(_QWORD *)v109 = *(_QWORD *)v110;
        *((_QWORD *)v109 + 1) = *((_QWORD *)v110 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((_QWORD *)v109 + 2) = *((_QWORD *)v110 + 2);
        *((_QWORD *)v109 + 3) = *((_QWORD *)v110 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((_QWORD *)v109 + 4) = *((_QWORD *)v110 + 4);
        *((_QWORD *)v109 + 5) = *((_QWORD *)v110 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((_QWORD *)v109 + 6) = *((_QWORD *)v110 + 6);
        *((_QWORD *)v109 + 7) = *((_QWORD *)v110 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v175 = *(int *)(v111 + 32);
        v176 = &v109[v175];
        v177 = &v110[v175];
        v178 = sub_23FB2D718();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v178 - 8) + 24))(v176, v177, v178);
LABEL_60:
        v140 = v99[6];
        v141 = &v97[v140];
        v142 = &v98[v140];
        v143 = type metadata accessor for TranscriptProtoResponseVisual(0);
        v144 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v141, 1, v143);
        v145 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v142, 1, v143);
        if (v144)
        {
          if (!v145)
          {
            *(_QWORD *)v141 = *(_QWORD *)v142;
            *((_QWORD *)v141 + 1) = *((_QWORD *)v142 + 1);
            v146 = *(int *)(v143 + 24);
            v190 = &v142[v146];
            v194 = &v141[v146];
            v147 = a1;
            v148 = sub_23FB2D718();
            v149 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v150 = v148;
            a1 = v147;
            v149(v194, v190, v150);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v141, 0, 1, v143);
LABEL_66:
            a2 = v198;
            v152 = v99[7];
            v153 = &v97[v152];
            v154 = &v98[v152];
            *(_QWORD *)v153 = *(_QWORD *)v154;
            *((_QWORD *)v153 + 1) = *((_QWORD *)v154 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v155 = v99[8];
            v156 = &v97[v155];
            v157 = &v98[v155];
            *(_QWORD *)v156 = *(_QWORD *)v157;
            *((_QWORD *)v156 + 1) = *((_QWORD *)v157 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v97[v99[9]] = v98[v99[9]];
            v97[v99[10]] = v98[v99[10]];
            v158 = v99[11];
            v159 = &v97[v158];
            v160 = &v98[v158];
            v161 = sub_23FB2D718();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 24))(v159, v160, v161);
            a3 = v202;
            goto LABEL_67;
          }
        }
        else
        {
          if (!v145)
          {
            *(_QWORD *)v141 = *(_QWORD *)v142;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *((_QWORD *)v141 + 1) = *((_QWORD *)v142 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v179 = *(int *)(v143 + 24);
            v180 = &v141[v179];
            v181 = &v142[v179];
            v182 = sub_23FB2D718();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 24))(v180, v181, v182);
            goto LABEL_66;
          }
          sub_23F6F5978((uint64_t)v141, type metadata accessor for TranscriptProtoResponseVisual);
        }
        v151 = sub_23F6916B8(&qword_256EA8008);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
        goto LABEL_66;
      }
      sub_23F6F5978((uint64_t)v109, type metadata accessor for TranscriptProtoResponseDialog);
    }
    v139 = sub_23F6916B8(&qword_256EA8000);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    goto LABEL_60;
  }
  if (v101)
  {
LABEL_48:
    v107 = sub_23F6916B8(&qword_256EA7E60);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    goto LABEL_67;
  }
  v197 = a2;
  v201 = a3;
  *(_QWORD *)v97 = *(_QWORD *)v98;
  v102 = v99[5];
  v103 = &v97[v102];
  v104 = &v98[v102];
  v105 = type metadata accessor for TranscriptProtoResponseDialog(0);
  swift_bridgeObjectRetain();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v104, 1, v105))
  {
    v106 = sub_23F6916B8(&qword_256EA8000);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v103 = *(_QWORD *)v104;
    *((_QWORD *)v103 + 1) = *((_QWORD *)v104 + 1);
    *((_QWORD *)v103 + 2) = *((_QWORD *)v104 + 2);
    *((_QWORD *)v103 + 3) = *((_QWORD *)v104 + 3);
    *((_QWORD *)v103 + 4) = *((_QWORD *)v104 + 4);
    *((_QWORD *)v103 + 5) = *((_QWORD *)v104 + 5);
    *((_QWORD *)v103 + 6) = *((_QWORD *)v104 + 6);
    *((_QWORD *)v103 + 7) = *((_QWORD *)v104 + 7);
    v116 = *(int *)(v105 + 32);
    v186 = &v104[v116];
    v188 = &v103[v116];
    v117 = sub_23FB2D718();
    v184 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v184(v188, v186, v117);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v103, 0, 1, v105);
  }
  v118 = v99[6];
  v119 = &v97[v118];
  v120 = &v98[v118];
  v121 = type metadata accessor for TranscriptProtoResponseVisual(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v120, 1, v121))
  {
    v122 = sub_23F6916B8(&qword_256EA8008);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v119 = *(_QWORD *)v120;
    *((_QWORD *)v119 + 1) = *((_QWORD *)v120 + 1);
    v123 = *(int *)(v121 + 24);
    v189 = &v120[v123];
    v193 = &v119[v123];
    v124 = a1;
    v125 = sub_23FB2D718();
    v126 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v127 = v125;
    a1 = v124;
    v126(v193, v189, v127);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v119, 0, 1, v121);
  }
  v128 = v99[7];
  v129 = &v97[v128];
  v130 = &v98[v128];
  *(_QWORD *)v129 = *(_QWORD *)v130;
  *((_QWORD *)v129 + 1) = *((_QWORD *)v130 + 1);
  v131 = v99[8];
  v132 = &v97[v131];
  v133 = &v98[v131];
  *(_QWORD *)v132 = *(_QWORD *)v133;
  *((_QWORD *)v132 + 1) = *((_QWORD *)v133 + 1);
  v97[v99[9]] = v98[v99[9]];
  v97[v99[10]] = v98[v99[10]];
  v134 = v99[11];
  v135 = &v97[v134];
  v136 = &v98[v134];
  v137 = sub_23FB2D718();
  v138 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v138(v135, v136, v137);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v97, 0, 1, (uint64_t)v99);
  a2 = v197;
  a3 = v201;
LABEL_67:
  v162 = a3[9];
  v163 = &a1[v162];
  v164 = &a2[v162];
  v165 = sub_23FB2EBA0();
  v166 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v163, 1, v165);
  v167 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v164, 1, v165);
  if (!v166)
  {
    v168 = *(_QWORD *)(v165 - 8);
    if (!v167)
    {
      (*(void (**)(char *, char *, uint64_t))(v168 + 24))(v163, v164, v165);
      goto LABEL_73;
    }
    (*(void (**)(char *, uint64_t))(v168 + 8))(v163, v165);
    goto LABEL_72;
  }
  if (v167)
  {
LABEL_72:
    v169 = sub_23F6916B8(&qword_256EA7E50);
    memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 16))(v163, v164, v165);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v163, 0, 1, v165);
LABEL_73:
  v170 = a3[10];
  v171 = &a1[v170];
  v172 = &a2[v170];
  v173 = sub_23FB2D718();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 24))(v171, v172, v173);
  return a1;
}

char *initializeWithTake for ResponseGenerationProtoStatementResultDigest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;

  v6 = sub_23FB2EBC4();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_23F6916B8(&qword_256EA3268);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for TranscriptProtoAction(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v10, 1, (uint64_t)v11))
  {
    v12 = sub_23F6916B8(&qword_256EA7E80);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v9[16] = v10[16];
    *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
    v13 = v11[7];
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for TranscriptProtoStatementID(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v16))
    {
      v17 = sub_23F6916B8(&qword_256EA25E0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
      v18 = *(int *)(v16 + 24);
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = sub_23FB2D718();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v14, 0, 1, v16);
    }
    *(_OWORD *)&v9[v11[8]] = *(_OWORD *)&v10[v11[8]];
    *(_OWORD *)&v9[v11[9]] = *(_OWORD *)&v10[v11[9]];
    *(_OWORD *)&v9[v11[10]] = *(_OWORD *)&v10[v11[10]];
    v22 = v11[11];
    v23 = &v9[v22];
    v24 = &v10[v22];
    v25 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v9, 0, 1, (uint64_t)v11);
  }
  v26 = a3[6];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = type metadata accessor for TranscriptProtoStatementOutcome(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v28, 1, v29))
  {
    v30 = sub_23F6916B8(&qword_256EA7E70);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v31 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
    if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v28, 1, v31))
    {
      v33 = (char *)&loc_23F7688B4 + 4 * byte_23FB5C704[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v32 = sub_23F6916B8(&qword_256EA7FF8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    v34 = *(int *)(v29 + 20);
    v35 = &v27[v34];
    v36 = &v28[v34];
    v37 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v27, 0, 1, v29);
  }
  v38 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = (int *)type metadata accessor for TranscriptProtoResponseManifest(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v40, 1, (uint64_t)v41))
  {
    v42 = sub_23F6916B8(&qword_256EA7E60);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v43 = v41[5];
    v44 = &v39[v43];
    v45 = &v40[v43];
    v46 = type metadata accessor for TranscriptProtoResponseDialog(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v45, 1, v46))
    {
      v47 = sub_23F6916B8(&qword_256EA8000);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v48 = *((_OWORD *)v45 + 1);
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *((_OWORD *)v44 + 1) = v48;
      v49 = *((_OWORD *)v45 + 3);
      *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
      *((_OWORD *)v44 + 3) = v49;
      v50 = *(int *)(v46 + 32);
      v51 = &v44[v50];
      v52 = &v45[v50];
      v53 = sub_23FB2D718();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v44, 0, 1, v46);
    }
    v54 = v41[6];
    v55 = &v39[v54];
    v56 = &v40[v54];
    v57 = type metadata accessor for TranscriptProtoResponseVisual(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v56, 1, v57))
    {
      v58 = sub_23F6916B8(&qword_256EA8008);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v55 = *(_OWORD *)v56;
      v59 = *(int *)(v57 + 24);
      v60 = &v55[v59];
      v61 = &v56[v59];
      v62 = sub_23FB2D718();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v55, 0, 1, v57);
    }
    *(_OWORD *)&v39[v41[7]] = *(_OWORD *)&v40[v41[7]];
    *(_OWORD *)&v39[v41[8]] = *(_OWORD *)&v40[v41[8]];
    v39[v41[9]] = v40[v41[9]];
    v39[v41[10]] = v40[v41[10]];
    v63 = v41[11];
    v64 = &v39[v63];
    v65 = &v40[v63];
    v66 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v39, 0, 1, (uint64_t)v41);
  }
  v67 = a3[9];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v70 = sub_23FB2EBA0();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v69, 1, v70))
  {
    v71 = sub_23F6916B8(&qword_256EA7E50);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v68, 0, 1, v70);
  }
  v72 = a3[10];
  v73 = &a1[v72];
  v74 = &a2[v72];
  v75 = sub_23FB2D718();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  return a1;
}

char *assignWithTake for ResponseGenerationProtoStatementResultDigest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int *v94;
  int v95;
  int v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int v107;
  int v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;

  v6 = sub_23FB2EBC4();
  v7 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, v6);
  v8 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_23F6916B8(&qword_256EA3268);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = (uint64_t)&a1[v11];
  v13 = (uint64_t)&a2[v11];
  v14 = (int *)type metadata accessor for TranscriptProtoAction(0);
  v15 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v12, 1, (uint64_t)v14);
  v16 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, (uint64_t)v14);
  if (!v15)
  {
    if (v16)
    {
      sub_23F6F5978(v12, type metadata accessor for TranscriptProtoAction);
      goto LABEL_13;
    }
    v23 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_QWORD *)(v12 + 8) = v23;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
    swift_bridgeObjectRelease();
    v24 = v14[7];
    v25 = (char *)(v12 + v24);
    v26 = (char *)(v13 + v24);
    v27 = type metadata accessor for TranscriptProtoStatementID(0);
    v28 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v25, 1, v27);
    v29 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v26, 1, v27);
    if (v28)
    {
      if (!v29)
      {
        *(_DWORD *)v25 = *(_DWORD *)v26;
        *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 8);
        v30 = *(int *)(v27 + 24);
        v31 = &v25[v30];
        v32 = &v26[v30];
        v33 = sub_23FB2D718();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v25, 0, 1, v27);
LABEL_23:
        v43 = v14[8];
        v44 = (_QWORD *)(v12 + v43);
        v45 = (uint64_t *)(v13 + v43);
        v47 = *v45;
        v46 = v45[1];
        *v44 = v47;
        v44[1] = v46;
        swift_bridgeObjectRelease();
        v48 = v14[9];
        v49 = (_QWORD *)(v12 + v48);
        v50 = (uint64_t *)(v13 + v48);
        v52 = *v50;
        v51 = v50[1];
        *v49 = v52;
        v49[1] = v51;
        swift_bridgeObjectRelease();
        v53 = v14[10];
        v54 = (_QWORD *)(v12 + v53);
        v55 = (uint64_t *)(v13 + v53);
        v57 = *v55;
        v56 = v55[1];
        *v54 = v57;
        v54[1] = v56;
        swift_bridgeObjectRelease();
        v58 = v14[11];
        v59 = v12 + v58;
        v60 = v13 + v58;
        v61 = sub_23FB2D718();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v29)
      {
        *(_DWORD *)v25 = *(_DWORD *)v26;
        v77 = *((_QWORD *)v26 + 2);
        *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
        *((_QWORD *)v25 + 2) = v77;
        swift_bridgeObjectRelease();
        v78 = *(int *)(v27 + 24);
        v79 = &v25[v78];
        v80 = &v26[v78];
        v81 = sub_23FB2D718();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 40))(v79, v80, v81);
        goto LABEL_23;
      }
      sub_23F6F5978((uint64_t)v25, type metadata accessor for TranscriptProtoStatementID);
    }
    v42 = sub_23F6916B8(&qword_256EA25E0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_23;
  }
  if (v16)
  {
LABEL_13:
    v22 = sub_23F6916B8(&qword_256EA7E80);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_24;
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
  v17 = v14[7];
  v18 = (_DWORD *)(v12 + v17);
  v19 = (_DWORD *)(v13 + v17);
  v20 = type metadata accessor for TranscriptProtoStatementID(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v19, 1, v20))
  {
    v21 = sub_23F6916B8(&qword_256EA25E0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *(_OWORD *)(v18 + 2) = *(_OWORD *)(v19 + 2);
    v34 = *(int *)(v20 + 24);
    v35 = (char *)v18 + v34;
    v36 = (char *)v19 + v34;
    v37 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v18, 0, 1, v20);
  }
  *(_OWORD *)(v12 + v14[8]) = *(_OWORD *)(v13 + v14[8]);
  *(_OWORD *)(v12 + v14[9]) = *(_OWORD *)(v13 + v14[9]);
  *(_OWORD *)(v12 + v14[10]) = *(_OWORD *)(v13 + v14[10]);
  v38 = v14[11];
  v39 = v12 + v38;
  v40 = v13 + v38;
  v41 = sub_23FB2D718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v12, 0, 1, (uint64_t)v14);
LABEL_24:
  v62 = a3[6];
  v63 = &a1[v62];
  v64 = &a2[v62];
  v65 = type metadata accessor for TranscriptProtoStatementOutcome(0);
  v66 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v63, 1, v65);
  v67 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v64, 1, v65);
  if (!v66)
  {
    if (v67)
    {
      sub_23F6F5978((uint64_t)v63, type metadata accessor for TranscriptProtoStatementOutcome);
      goto LABEL_30;
    }
    v71 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
    v72 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v63, 1, v71);
    v73 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v64, 1, v71);
    if (v72)
    {
      if (!v73)
      {
        v74 = (char *)&loc_23F769B88 + 4 * word_23FB5C726[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
    }
    else
    {
      if (!v73)
      {
        if (a1 != a2)
        {
          sub_23F6F5978((uint64_t)v63, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
          v82 = (char *)&loc_23F769D38 + 4 * word_23FB5C73C[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        goto LABEL_41;
      }
      sub_23F6F5978((uint64_t)v63, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
    }
    v76 = sub_23F6916B8(&qword_256EA7FF8);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
LABEL_41:
    v87 = *(int *)(v65 + 20);
    v88 = &v63[v87];
    v89 = &v64[v87];
    v90 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 40))(v88, v89, v90);
    goto LABEL_42;
  }
  if (v67)
  {
LABEL_30:
    v70 = sub_23F6916B8(&qword_256EA7E70);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_42;
  }
  v68 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v64, 1, v68))
  {
    v75 = (char *)&loc_23F769C14 + 4 * word_23FB5C710[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v69 = sub_23F6916B8(&qword_256EA7FF8);
  memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  v83 = *(int *)(v65 + 20);
  v84 = &v63[v83];
  v85 = &v64[v83];
  v86 = sub_23FB2D718();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v84, v85, v86);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v63, 0, 1, v65);
LABEL_42:
  v91 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v92 = &a1[v91];
  v93 = &a2[v91];
  v94 = (int *)type metadata accessor for TranscriptProtoResponseManifest(0);
  v95 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v92, 1, (uint64_t)v94);
  v96 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v93, 1, (uint64_t)v94);
  if (!v95)
  {
    if (v96)
    {
      sub_23F6F5978((uint64_t)v92, type metadata accessor for TranscriptProtoResponseManifest);
      goto LABEL_48;
    }
    *(_QWORD *)v92 = *(_QWORD *)v93;
    swift_bridgeObjectRelease();
    v103 = v94[5];
    v104 = &v92[v103];
    v105 = &v93[v103];
    v106 = type metadata accessor for TranscriptProtoResponseDialog(0);
    v107 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v104, 1, v106);
    v108 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v105, 1, v106);
    if (v107)
    {
      if (!v108)
      {
        v109 = *((_OWORD *)v105 + 1);
        *(_OWORD *)v104 = *(_OWORD *)v105;
        *((_OWORD *)v104 + 1) = v109;
        v110 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
        *((_OWORD *)v104 + 3) = v110;
        v111 = *(int *)(v106 + 32);
        v112 = &v104[v111];
        v113 = &v105[v111];
        v114 = sub_23FB2D718();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v104, 0, 1, v106);
        goto LABEL_60;
      }
    }
    else
    {
      if (!v108)
      {
        v173 = *((_QWORD *)v105 + 1);
        *(_QWORD *)v104 = *(_QWORD *)v105;
        *((_QWORD *)v104 + 1) = v173;
        swift_bridgeObjectRelease();
        v174 = *((_QWORD *)v105 + 3);
        *((_QWORD *)v104 + 2) = *((_QWORD *)v105 + 2);
        *((_QWORD *)v104 + 3) = v174;
        swift_bridgeObjectRelease();
        v175 = *((_QWORD *)v105 + 5);
        *((_QWORD *)v104 + 4) = *((_QWORD *)v105 + 4);
        *((_QWORD *)v104 + 5) = v175;
        swift_bridgeObjectRelease();
        v176 = *((_QWORD *)v105 + 7);
        *((_QWORD *)v104 + 6) = *((_QWORD *)v105 + 6);
        *((_QWORD *)v104 + 7) = v176;
        swift_bridgeObjectRelease();
        v177 = *(int *)(v106 + 32);
        v178 = &v104[v177];
        v179 = &v105[v177];
        v180 = sub_23FB2D718();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 40))(v178, v179, v180);
LABEL_60:
        v135 = v94[6];
        v136 = &v92[v135];
        v137 = &v93[v135];
        v138 = type metadata accessor for TranscriptProtoResponseVisual(0);
        v139 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v136, 1, v138);
        v140 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v137, 1, v138);
        if (v139)
        {
          if (!v140)
          {
            *(_OWORD *)v136 = *(_OWORD *)v137;
            v141 = *(int *)(v138 + 24);
            v142 = &v136[v141];
            v143 = &v137[v141];
            v144 = sub_23FB2D718();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 32))(v142, v143, v144);
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v136, 0, 1, v138);
LABEL_66:
            v146 = v94[7];
            v147 = &v92[v146];
            v148 = &v93[v146];
            v150 = *(_QWORD *)v148;
            v149 = *((_QWORD *)v148 + 1);
            *(_QWORD *)v147 = v150;
            *((_QWORD *)v147 + 1) = v149;
            swift_bridgeObjectRelease();
            v151 = v94[8];
            v152 = &v92[v151];
            v153 = &v93[v151];
            v155 = *(_QWORD *)v153;
            v154 = *((_QWORD *)v153 + 1);
            *(_QWORD *)v152 = v155;
            *((_QWORD *)v152 + 1) = v154;
            swift_bridgeObjectRelease();
            v92[v94[9]] = v93[v94[9]];
            v92[v94[10]] = v93[v94[10]];
            v156 = v94[11];
            v157 = &v92[v156];
            v158 = &v93[v156];
            v159 = sub_23FB2D718();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 40))(v157, v158, v159);
            goto LABEL_67;
          }
        }
        else
        {
          if (!v140)
          {
            *(_QWORD *)v136 = *(_QWORD *)v137;
            swift_bridgeObjectRelease();
            *((_QWORD *)v136 + 1) = *((_QWORD *)v137 + 1);
            swift_bridgeObjectRelease();
            v181 = *(int *)(v138 + 24);
            v182 = &v136[v181];
            v183 = &v137[v181];
            v184 = sub_23FB2D718();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 40))(v182, v183, v184);
            goto LABEL_66;
          }
          sub_23F6F5978((uint64_t)v136, type metadata accessor for TranscriptProtoResponseVisual);
        }
        v145 = sub_23F6916B8(&qword_256EA8008);
        memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
        goto LABEL_66;
      }
      sub_23F6F5978((uint64_t)v104, type metadata accessor for TranscriptProtoResponseDialog);
    }
    v134 = sub_23F6916B8(&qword_256EA8000);
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    goto LABEL_60;
  }
  if (v96)
  {
LABEL_48:
    v102 = sub_23F6916B8(&qword_256EA7E60);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_67;
  }
  *(_QWORD *)v92 = *(_QWORD *)v93;
  v97 = v94[5];
  v98 = &v92[v97];
  v99 = &v93[v97];
  v100 = type metadata accessor for TranscriptProtoResponseDialog(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v99, 1, v100))
  {
    v101 = sub_23F6916B8(&qword_256EA8000);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
  }
  else
  {
    v115 = *((_OWORD *)v99 + 1);
    *(_OWORD *)v98 = *(_OWORD *)v99;
    *((_OWORD *)v98 + 1) = v115;
    v116 = *((_OWORD *)v99 + 3);
    *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
    *((_OWORD *)v98 + 3) = v116;
    v117 = *(int *)(v100 + 32);
    v118 = &v98[v117];
    v119 = &v99[v117];
    v120 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v98, 0, 1, v100);
  }
  v121 = v94[6];
  v122 = &v92[v121];
  v123 = &v93[v121];
  v124 = type metadata accessor for TranscriptProtoResponseVisual(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v123, 1, v124))
  {
    v125 = sub_23F6916B8(&qword_256EA8008);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v122 = *(_OWORD *)v123;
    v126 = *(int *)(v124 + 24);
    v127 = &v122[v126];
    v128 = &v123[v126];
    v129 = sub_23FB2D718();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v122, 0, 1, v124);
  }
  *(_OWORD *)&v92[v94[7]] = *(_OWORD *)&v93[v94[7]];
  *(_OWORD *)&v92[v94[8]] = *(_OWORD *)&v93[v94[8]];
  v92[v94[9]] = v93[v94[9]];
  v92[v94[10]] = v93[v94[10]];
  v130 = v94[11];
  v131 = &v92[v130];
  v132 = &v93[v130];
  v133 = sub_23FB2D718();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32))(v131, v132, v133);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v92, 0, 1, (uint64_t)v94);
LABEL_67:
  v160 = a3[9];
  v161 = &a1[v160];
  v162 = &a2[v160];
  v163 = sub_23FB2EBA0();
  v164 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v161, 1, v163);
  v165 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v162, 1, v163);
  if (!v164)
  {
    v166 = *(_QWORD *)(v163 - 8);
    if (!v165)
    {
      (*(void (**)(char *, char *, uint64_t))(v166 + 40))(v161, v162, v163);
      goto LABEL_73;
    }
    (*(void (**)(char *, uint64_t))(v166 + 8))(v161, v163);
    goto LABEL_72;
  }
  if (v165)
  {
LABEL_72:
    v167 = sub_23F6916B8(&qword_256EA7E50);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v161, v162, v163);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v161, 0, 1, v163);
LABEL_73:
  v168 = a3[10];
  v169 = &a1[v168];
  v170 = &a2[v168];
  v171 = sub_23FB2D718();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 40))(v169, v170, v171);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseGenerationProtoStatementResultDigest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F76C308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_23F6916B8(&qword_256EA3268);
  sub_23F6F07DC();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_23F6916B8(&qword_256EA7E80);
    sub_23F6F07DC();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      sub_23F6916B8(&qword_256EA7E70);
      sub_23F6F07DC();
      if (v12)
      {
        v7 = v13;
        v11 = a3[6];
      }
      else
      {
        if ((_DWORD)a2 == 253)
        {
          sub_23F694C84();
          return;
        }
        sub_23F6916B8(&qword_256EA7E60);
        sub_23F6F07DC();
        if (v9)
        {
          v7 = v14;
          v11 = a3[8];
        }
        else
        {
          sub_23F6916B8(&qword_256EA7E50);
          sub_23F6F07DC();
          if (v15)
          {
            v7 = v16;
            v11 = a3[9];
          }
          else
          {
            v7 = sub_23F6B53A4();
            v11 = a3[10];
          }
        }
      }
    }
    v8 = a1 + v11;
  }
  sub_23F6F07D0(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationProtoStatementResultDigest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F76C41C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_23F6916B8(&qword_256EA3268);
  sub_23F6F07EC();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_23F6916B8(&qword_256EA7E80);
    sub_23F6F07EC();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      sub_23F6916B8(&qword_256EA7E70);
      sub_23F6F07EC();
      if (v14)
      {
        v9 = v15;
        v13 = a4[6];
      }
      else
      {
        if (a3 == 253)
        {
          *(_BYTE *)(a1 + a4[7]) = a2 + 2;
          sub_23F694C84();
          return;
        }
        sub_23F6916B8(&qword_256EA7E60);
        sub_23F6F07EC();
        if (v11)
        {
          v9 = v16;
          v13 = a4[8];
        }
        else
        {
          sub_23F6916B8(&qword_256EA7E50);
          sub_23F6F07EC();
          if (v17)
          {
            v9 = v18;
            v13 = a4[9];
          }
          else
          {
            v9 = sub_23F6B53A4();
            v13 = a4[10];
          }
        }
      }
    }
    v10 = a1 + v13;
  }
  sub_23F6F07C4(v10, a2, a2, v9);
}

void sub_23F76C518()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_23F6DE58C(319, &qword_256EA8078, (void (*)(uint64_t))MEMORY[0x24BEB96E0]);
  if (v0 <= 0x3F)
  {
    sub_23F6DE58C(319, &qword_256EA8080, (void (*)(uint64_t))type metadata accessor for TranscriptProtoAction);
    if (v1 <= 0x3F)
    {
      sub_23F6DE58C(319, &qword_256EA8088, (void (*)(uint64_t))type metadata accessor for TranscriptProtoStatementOutcome);
      if (v2 <= 0x3F)
      {
        sub_23F6DE58C(319, &qword_256EA8090, (void (*)(uint64_t))type metadata accessor for TranscriptProtoResponseManifest);
        if (v3 <= 0x3F)
        {
          sub_23F6DE58C(319, qword_256EA8098, (void (*)(uint64_t))MEMORY[0x24BEB96B0]);
          if (v4 <= 0x3F)
          {
            sub_23FB2D718();
            if (v5 <= 0x3F)
              swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t sub_23F76C664(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 1, 1, a1);
}

uint64_t sub_23F76C678()
{
  return type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
}

uint64_t sub_23F76C684()
{
  return type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
}

void sub_23F76C690(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_23F6B4F58(a1, v3, a3);
}

void sub_23F76C698(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_23F710E80(v3, a2, a3);
}

uint64_t ResponseGenerationInput.fsf_serialize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_23FB2E7F8();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B51A4();
  sub_23FB2D754();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B51A4();
  v3 = sub_23F76D088();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v7 = (_QWORD *)(v6 - v5);
  type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6BD134();
  v11 = v10 - v9;
  sub_23F732E30(v0, (uint64_t)v7, type metadata accessor for ResponseGenerationInput);
  v12 = v7[1];
  v13 = (_QWORD *)((char *)v7 + *(int *)(v3 + 28));
  v14 = v13[1];
  v23 = *v13;
  v24 = *v7;
  v15 = *((_BYTE *)v7 + *(int *)(v3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_23FB2C4D0();
  v18 = v17;
  v19 = swift_bridgeObjectRetain();
  v20 = sub_23F76CBEC(v19);
  _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
  *(_QWORD *)v11 = v24;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = v23;
  *(_QWORD *)(v11 + 24) = v14;
  *(_BYTE *)(v11 + 32) = 0x4030102u >> (8 * v15);
  *(_QWORD *)(v11 + 40) = v16;
  *(_QWORD *)(v11 + 48) = v18;
  *(_QWORD *)(v11 + 56) = v20;
  sub_23F6F5978((uint64_t)v7, type metadata accessor for ResponseGenerationInput);
  sub_23FB2D748();
  sub_23F76CFB0();
  v22 = sub_23FB2D8BC();
  sub_23F76D078();
  sub_23F6F5978(v11, type metadata accessor for ResponseGenerationProtoResponseGenerationInput);
  return v22;
}

uint64_t static ResponseGenerationInput.fsf_deserialize(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23FB2E7F8();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6BD134();
  static ResponseGenerationInput.load(fromProtobufJSON:)(a1, a2, a3);
  v7 = sub_23F76D088();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a3, 0, 1, v7);
}

uint64_t sub_23F76CBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = *(_QWORD *)(type metadata accessor for ResponseGenerationProtoStatementResultDigest(0) - 8);
  sub_23F693E20();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v36 = (char *)&v35 - v7;
  v8 = type metadata accessor for StatementResultDigest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v35 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v39 = (uint64_t)&v35 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v38 = (uint64_t)&v35 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  v45 = MEMORY[0x24BEE4AF8];
  sub_23F711BD8();
  v20 = v45;
  v37 = a1;
  v43 = v9;
  if (v19)
  {
    v21 = *(_QWORD *)(a1 + 16);
    v41 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v42 = v21;
    result = swift_bridgeObjectRetain();
    v23 = 0;
    v40 = v6;
    while (v42 != v23)
    {
      sub_23F732E30(v41 + *(_QWORD *)(v43 + 72) * v23, (uint64_t)v15, type metadata accessor for StatementResultDigest);
      sub_23F732E30((uint64_t)v15, (uint64_t)v12, type metadata accessor for StatementResultDigest);
      ResponseGenerationProtoStatementResultDigest.init(rg:)();
      if (v1)
      {
        swift_release();
        v20 = v37;
        swift_bridgeObjectRelease();
        sub_23F6F5978((uint64_t)v15, type metadata accessor for StatementResultDigest);
        swift_bridgeObjectRelease();
        return v20;
      }
      sub_23F6F5978((uint64_t)v15, type metadata accessor for StatementResultDigest);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F76D03C();
        v20 = v45;
      }
      v24 = *(_QWORD *)(v20 + 16);
      if (v24 >= *(_QWORD *)(v20 + 24) >> 1)
      {
        sub_23F711BD8();
        v20 = v45;
      }
      ++v23;
      *(_QWORD *)(v20 + 16) = v24 + 1;
      sub_23F76D05C();
      result = sub_23F76CFF0((uint64_t)v40, v25 + v26 * v24);
      if (v19 == v23)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_27;
  }
  result = swift_bridgeObjectRetain();
LABEL_12:
  v27 = v37;
  v28 = *(_QWORD *)(v37 + 16);
  if (v19 != v28)
  {
    v29 = (uint64_t)v36;
    v30 = v43;
    while (v19 < v28)
    {
      v31 = v38;
      sub_23F732E30(v27+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v19, v38, type metadata accessor for StatementResultDigest);
      sub_23F732E30(v31, v39, type metadata accessor for StatementResultDigest);
      ResponseGenerationProtoStatementResultDigest.init(rg:)();
      sub_23F6F5978(v31, type metadata accessor for StatementResultDigest);
      if (v1)
      {
        swift_bridgeObjectRelease();
        v20 = v45;
        swift_bridgeObjectRelease();
        swift_release();
        return v20;
      }
      v20 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F76D03C();
        v20 = v45;
      }
      v32 = *(_QWORD *)(v20 + 16);
      if (v32 >= *(_QWORD *)(v20 + 24) >> 1)
      {
        sub_23F711BD8();
        v20 = v45;
      }
      ++v19;
      *(_QWORD *)(v20 + 16) = v32 + 1;
      sub_23F76D05C();
      result = sub_23F76CFF0(v29, v33 + v34 * v32);
      v28 = *(_QWORD *)(v27 + 16);
      if (v19 == v28)
        goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return result;
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  return v20;
}

unint64_t sub_23F76CFB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA7EB8;
  if (!qword_256EA7EB8)
  {
    v1 = type metadata accessor for ResponseGenerationProtoResponseGenerationInput(255);
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput, v1);
    atomic_store(result, (unint64_t *)&qword_256EA7EB8);
  }
  return result;
}

uint64_t sub_23F76CFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23F76D034()
{
  void *v0;

}

void sub_23F76D03C()
{
  sub_23F711BD8();
}

id sub_23F76D054()
{
  void *v0;

  return v0;
}

uint64_t sub_23F76D078()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 8))(v0, *(_QWORD *)(v1 - 128));
}

uint64_t sub_23F76D088()
{
  return type metadata accessor for ResponseGenerationInput(0);
}

void static ResponseGenerationInput.load(fromProtobufJSON:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18[4];

  v18[1] = a3;
  type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  sub_23F6D3588();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v18[0] = (uint64_t)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - v8;
  v10 = sub_23FB2D73C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v18 - v15;
  sub_23FB2D730();
  sub_23FB2D724();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  sub_23F6D1E20(a1, a2);
  sub_23F6D3458((unint64_t *)&qword_256EA7EB8, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
  v17 = v18[3];
  sub_23FB2D8C8();
  if (!v17)
  {
    sub_23F6D8A14((uint64_t)v9, v18[0], type metadata accessor for ResponseGenerationProtoResponseGenerationInput);
    ResponseGenerationInput.init(transcript:)();
    sub_23F6D3508((uint64_t)v9, type metadata accessor for ResponseGenerationProtoResponseGenerationInput);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  sub_23F6B5100();
}

void ResponseGenerationInput.clientRequestId.getter()
{
  swift_bridgeObjectRetain();
  sub_23F694CC8();
}

uint64_t ResponseGenerationInput.responseLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(sub_23F76D088() + 20);
  v4 = sub_23F7717C4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void ResponseGenerationInput.responseMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + *(int *)(sub_23F76D088() + 24));
  sub_23F694CC8();
}

void ResponseGenerationInput.utterance.getter()
{
  sub_23F76D088();
  swift_bridgeObjectRetain();
  sub_23F694CC8();
}

uint64_t ResponseGenerationInput.statementResultDigests.getter()
{
  sub_23F76D088();
  return swift_bridgeObjectRetain();
}

uint64_t ResponseGenerationInput.init(clientRequestId:responseLocale:responseMode:utterance:statementResultDigests:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  char v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;

  v13 = *a4;
  *a8 = a1;
  a8[1] = a2;
  v14 = (int *)sub_23F76D088();
  v15 = (char *)a8 + v14[5];
  v16 = sub_23F7717C4();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a3, v16);
  *((_BYTE *)a8 + v14[6]) = v13;
  v18 = (_QWORD *)((char *)a8 + v14[7]);
  *v18 = a5;
  v18[1] = a6;
  *(_QWORD *)((char *)a8 + v14[8]) = a7;
  return result;
}

uint64_t sub_23F76D3B0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;

  v2 = a1 == 0x6552746E65696C63 && a2 == 0xEF64497473657571;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x65736E6F70736572 && a2 == 0xEE00656C61636F4CLL;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x65736E6F70736572 && a2 == 0xEC00000065646F4DLL;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x636E617265747475 && a2 == 0xE900000000000065;
        if (v8 || (sub_23FB2FB78() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000016 && a2 == 0x800000023FB32E80)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = sub_23FB2FB78();
          swift_bridgeObjectRelease();
          if ((v9 & 1) != 0)
            return 4;
          else
            return 5;
        }
      }
    }
  }
}

uint64_t sub_23F76D620(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F76D660 + 4 * byte_23FB5C9B0[a1]))(0x6552746E65696C63, 0xEF64497473657571);
}

uint64_t sub_23F76D660()
{
  return 0x65736E6F70736572;
}

uint64_t sub_23F76D694()
{
  return 0x636E617265747475;
}

unint64_t sub_23F76D6B0()
{
  return 0xD000000000000016;
}

uint64_t sub_23F76D6D0()
{
  unsigned __int8 *v0;

  return sub_23F76D620(*v0);
}

uint64_t sub_23F76D6D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F76D3B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F76D6FC()
{
  sub_23F76ECF0();
  return sub_23FB2FD10();
}

uint64_t sub_23F76D724()
{
  sub_23F76ECF0();
  return sub_23FB2FD1C();
}

void ResponseGenerationInput.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_23F6916B8(&qword_256EA80E0);
  sub_23F70D528();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6ADC98(a1, a1[3]);
  sub_23F76ECF0();
  sub_23F6B63A4();
  sub_23F70D90C();
  if (!v1)
  {
    type metadata accessor for ResponseGenerationInput(0);
    sub_23F771798();
    sub_23FB2C50C();
    sub_23F6D3458(&qword_256EA80F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    sub_23F70D78C();
    sub_23F76ED2C();
    sub_23F70D78C();
    sub_23F7717E0();
    sub_23F70D90C();
    sub_23F6916B8(&qword_256EA8100);
    sub_23F76EDB8(&qword_256EA8108, &qword_256EA8110, (uint64_t)&protocol conformance descriptor for StatementResultDigest, MEMORY[0x24BEE12A0]);
    sub_23F70D78C();
  }
  sub_23F7717B4();
  sub_23F6D3710();
}

void ResponseGenerationInput.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v5 = sub_23FB2C50C();
  v15 = *(_QWORD *)(v5 - 8);
  v16 = v5;
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B59E0();
  v6 = sub_23F6916B8(&qword_256EA8118);
  v7 = sub_23F7717CC(v6);
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5268();
  v8 = (int *)type metadata accessor for ResponseGenerationInput(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B53AC();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F76ECF0();
  sub_23FB2FCB0();
  if (v17)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    *v2 = sub_23F7717F4();
    v2[1] = v10;
    sub_23F6D3458(&qword_256EA8120, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
    sub_23F7717EC();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))((char *)v2 + v8[5], v3, v16);
    sub_23F76ED7C();
    sub_23F7717EC();
    *((_BYTE *)v2 + v8[6]) = v19;
    sub_23F7717E0();
    v11 = sub_23F7717F4();
    v12 = (uint64_t *)((char *)v2 + v8[7]);
    *v12 = v11;
    v12[1] = v13;
    sub_23F6916B8(&qword_256EA8100);
    sub_23F76EDB8(&qword_256EA8130, &qword_256EA8138, (uint64_t)&protocol conformance descriptor for StatementResultDigest, MEMORY[0x24BEE12D0]);
    sub_23F7717EC();
    sub_23F771774();
    *(uint64_t *)((char *)v2 + v8[8]) = v18;
    sub_23F6D8A14((uint64_t)v2, a2, type metadata accessor for ResponseGenerationInput);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
    sub_23F6D3508((uint64_t)v2, type metadata accessor for ResponseGenerationInput);
  }
  sub_23F6B5100();
}

void sub_23F76DBFC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ResponseGenerationInput.init(from:)(a1, a2);
}

void sub_23F76DC10(_QWORD *a1)
{
  ResponseGenerationInput.encode(to:)(a1);
}

void StatementResultDigest.toolDefinition.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F6D8AB0(v1, a1, &qword_256EA8140);
}

void StatementResultDigest.action.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F771780();
  sub_23F6D8AB0(v1 + *(int *)(v2 + 20), v0, &qword_256EA8148);
  sub_23F694CC8();
}

void StatementResultDigest.statementResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F771780();
  sub_23F6D8A14(v1 + *(int *)(v2 + 24), v0, type metadata accessor for StatementResult);
  sub_23F694CC8();
}

void StatementResultDigest.undoOperation.getter()
{
  _BYTE *v0;
  uint64_t v1;

  *v0 = *(_BYTE *)(v1 + *(int *)(sub_23F771780() + 28));
  sub_23F694CC8();
}

void StatementResultDigest.returnValueTypeDisplayRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F771780();
  sub_23F6D8AB0(v1 + *(int *)(v2 + 32), v0, &qword_256EA8150);
  sub_23F694CC8();
}

void StatementResultDigest.init(toolDefinition:action:statementResult:undoOperation:returnValueTypeDisplayRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10;
  int *v11;

  v10 = *a4;
  sub_23F76EE80(a1, a6, &qword_256EA8140);
  v11 = (int *)type metadata accessor for StatementResultDigest(0);
  sub_23F76EE80(a2, a6 + v11[5], &qword_256EA8148);
  sub_23F76EE3C(a3, a6 + v11[6]);
  *(_BYTE *)(a6 + v11[7]) = v10;
  sub_23F76EE80(a5, a6 + v11[8], &qword_256EA8150);
}

uint64_t sub_23F76DD9C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;

  v2 = a1 == 0x696665446C6F6F74 && a2 == 0xEE006E6F6974696ELL;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6E6F69746361 && a2 == 0xE600000000000000;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6E656D6574617473 && a2 == 0xEF746C7573655274;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x7265704F6F646E75 && a2 == 0xED00006E6F697461;
        if (v8 || (sub_23FB2FB78() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000024 && a2 == 0x800000023FB32EA0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = sub_23FB2FB78();
          swift_bridgeObjectRelease();
          if ((v9 & 1) != 0)
            return 4;
          else
            return 5;
        }
      }
    }
  }
}

uint64_t sub_23F76E00C()
{
  return 5;
}

void sub_23F76E014()
{
  sub_23FB2FC5C();
  sub_23FB2FC68();
  sub_23FB2FC8C();
  sub_23F6B5398();
}

uint64_t sub_23F76E050(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F76E090 + 4 * byte_23FB5C9B5[a1]))(0x696665446C6F6F74, 0xEE006E6F6974696ELL);
}

uint64_t sub_23F76E090()
{
  return 0x6E6F69746361;
}

uint64_t sub_23F76E0A4()
{
  return 0x6E656D6574617473;
}

uint64_t sub_23F76E0C8()
{
  return 0x7265704F6F646E75;
}

unint64_t sub_23F76E0EC()
{
  return 0xD000000000000024;
}

void sub_23F76E108()
{
  sub_23F76E014();
}

void sub_23F76E120()
{
  sub_23FB2FC5C();
  sub_23FB2FC68();
  sub_23FB2FC8C();
  sub_23F6B5398();
}

uint64_t sub_23F76E158()
{
  unsigned __int8 *v0;

  return sub_23F76E050(*v0);
}

uint64_t sub_23F76E160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F76DD9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F76E184@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23F76E00C();
  *a1 = result;
  return result;
}

uint64_t sub_23F76E1A8()
{
  sub_23F76EEB4();
  return sub_23FB2FD10();
}

uint64_t sub_23F76E1D0()
{
  sub_23F76EEB4();
  return sub_23FB2FD1C();
}

void StatementResultDigest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_23F6916B8(&qword_256EA8158);
  sub_23F70D528();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6ADC98(a1, a1[3]);
  sub_23F76EEB4();
  sub_23F6B63A4();
  sub_23FB2E8D0();
  sub_23F6D3458(&qword_256EA8168, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8FE0], MEMORY[0x24BEB8FF0]);
  sub_23F77178C();
  if (!v1)
  {
    type metadata accessor for StatementResultDigest(0);
    v4 = sub_23F771798();
    type metadata accessor for Action(v4);
    sub_23F6D3458(&qword_256EA8170, type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    sub_23F77178C();
    type metadata accessor for StatementResult(0);
    sub_23F6D3458(&qword_256EA8178, type metadata accessor for StatementResult, (uint64_t)&protocol conformance descriptor for StatementResult);
    sub_23F70D78C();
    sub_23F7717E0();
    sub_23F76EEF0();
    sub_23F77178C();
    sub_23FB2EF6C();
    sub_23F6D3458(&qword_256EA8188, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA670], MEMORY[0x24BEBA680]);
    sub_23F77178C();
  }
  sub_23F7717B4();
  sub_23F6D3710();
}

void StatementResultDigest.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;

  sub_23F6916B8(&qword_256EA8150);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v16 = v6;
  type metadata accessor for StatementResult(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v17 = v8;
  sub_23F6916B8(&qword_256EA8148);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA8140);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v18 = v11;
  v12 = sub_23F6916B8(&qword_256EA8190);
  v13 = sub_23F7717CC(v12);
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B59E0();
  v14 = (int *)type metadata accessor for StatementResultDigest(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B5268();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F76EEB4();
  sub_23FB2FCB0();
  if (v20)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_23FB2E8D0();
    sub_23F6D3458(&qword_256EA8198, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8FE0], MEMORY[0x24BEB9008]);
    sub_23F771760();
    sub_23F76EE80(v18, v3, &qword_256EA8140);
    type metadata accessor for Action(0);
    sub_23F6D3458(&qword_256EA81A0, type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    sub_23F771760();
    sub_23F76EE80(v2, v3 + v14[5], &qword_256EA8148);
    sub_23F6D3458(&qword_256EA81A8, type metadata accessor for StatementResult, (uint64_t)&protocol conformance descriptor for StatementResult);
    sub_23FB2FA7C();
    sub_23F76EE3C(v17, v3 + v14[6]);
    sub_23F7717E0();
    sub_23F76EF2C();
    sub_23FB2FA34();
    *(_BYTE *)(v3 + v14[7]) = v21;
    sub_23FB2EF6C();
    sub_23F6D3458(&qword_256EA81B8, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA670], MEMORY[0x24BEBA688]);
    sub_23F771760();
    sub_23F771750();
    sub_23F76EE80(v16, v3 + v14[8], &qword_256EA8150);
    sub_23F6D8A14(v3, a2, type metadata accessor for StatementResultDigest);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
    sub_23F6D3508(v3, type metadata accessor for StatementResultDigest);
  }
  sub_23F6B5100();
}

void sub_23F76E804(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  StatementResultDigest.init(from:)(a1, a2);
}

void sub_23F76E818(_QWORD *a1)
{
  StatementResultDigest.encode(to:)(a1);
}

IntelligenceFlowPlannerSupport::RequestType_optional __swiftcall RequestType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  IntelligenceFlowPlannerSupport::RequestType_optional result;

  sub_23F76EB50(v1);
  return result;
}

uint64_t RequestType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1868852853;
  else
    return 0x6D726F66726570;
}

void sub_23F76E86C(char *a1, char *a2)
{
  sub_23F6BE894(*a1, *a2);
}

void sub_23F76E878()
{
  sub_23F7F6E88();
}

uint64_t sub_23F76E880()
{
  return sub_23F7F7698();
}

void sub_23F76E888()
{
  sub_23F7F7948();
}

IntelligenceFlowPlannerSupport::RequestType_optional sub_23F76E890(Swift::String *a1)
{
  return RequestType.init(rawValue:)(*a1);
}

void sub_23F76E89C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = RequestType.rawValue.getter();
  a1[1] = v2;
  sub_23F694CC8();
}

uint64_t sub_23F76E8BC()
{
  sub_23F77170C();
  return sub_23FB2F38C();
}

uint64_t sub_23F76E918()
{
  sub_23F77170C();
  return sub_23FB2F374();
}

void ResponseMode.condensed.getter(BOOL *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 > 1u;
}

IntelligenceFlowPlannerSupport::ResponseMode_optional __swiftcall ResponseMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  unint64_t v2;
  char *v3;
  char v4;
  IntelligenceFlowPlannerSupport::ResponseMode_optional result;

  v3 = v1;
  sub_23FB2F9E0();
  sub_23F694C78();
  v4 = 4;
  if (v2 < 4)
    v4 = v2;
  *v3 = v4;
  sub_23F694C84();
  return result;
}

uint64_t ResponseMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F76E9FC + 4 * byte_23FB5C9BA[*v0]))(0x4F465F4543494F56, 0xED00004452415752);
}

uint64_t sub_23F76E9FC()
{
  return 0x4E4F5F4543494F56;
}

uint64_t sub_23F76EA18()
{
  return 0x5F59414C50534944;
}

void sub_23F76EA4C(char *a1)
{
  sub_23F6BE74C(*a1);
}

void sub_23F76EA58()
{
  sub_23F7F6E94();
}

void sub_23F76EA60(uint64_t a1)
{
  char *v1;

  sub_23F7F75F0(a1, *v1);
}

void sub_23F76EA68()
{
  sub_23F7F79A4();
}

IntelligenceFlowPlannerSupport::ResponseMode_optional sub_23F76EA70(Swift::String *a1)
{
  return ResponseMode.init(rawValue:)(*a1);
}

void sub_23F76EA7C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ResponseMode.rawValue.getter();
  a1[1] = v2;
  sub_23F694CC8();
}

uint64_t sub_23F76EA9C()
{
  sub_23F7716D0();
  return sub_23FB2F38C();
}

uint64_t sub_23F76EAF8()
{
  sub_23F7716D0();
  return sub_23FB2F374();
}

IntelligenceFlowPlannerSupport::CondensedResponseMode_optional __swiftcall CondensedResponseMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  IntelligenceFlowPlannerSupport::CondensedResponseMode_optional result;

  sub_23F76EB50(v1);
  return result;
}

void sub_23F76EB50(char *a1@<X8>)
{
  uint64_t v1;
  char v3;

  sub_23FB2F9E0();
  sub_23F694C78();
  if (v1 == 1)
    v3 = 1;
  else
    v3 = 2;
  if (!v1)
    v3 = 0;
  *a1 = v3;
  sub_23F694C84();
}

uint64_t CondensedResponseMode.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x4149445F4C4C5546;
}

void sub_23F76EBE4(char *a1, char *a2)
{
  sub_23F6BE27C(*a1, *a2);
}

void sub_23F76EBF0()
{
  sub_23F7F6EA0();
}

uint64_t sub_23F76EBF8()
{
  return sub_23F7F733C();
}

void sub_23F76EC00()
{
  sub_23F7F7AD4();
}

IntelligenceFlowPlannerSupport::CondensedResponseMode_optional sub_23F76EC08(Swift::String *a1)
{
  return CondensedResponseMode.init(rawValue:)(*a1);
}

void sub_23F76EC14(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = CondensedResponseMode.rawValue.getter();
  a1[1] = v2;
  sub_23F694CC8();
}

uint64_t sub_23F76EC34()
{
  sub_23F771694();
  return sub_23FB2F38C();
}

uint64_t sub_23F76EC90()
{
  sub_23F771694();
  return sub_23FB2F374();
}

uint64_t type metadata accessor for ResponseGenerationInput(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA8230);
}

unint64_t sub_23F76ECF0()
{
  unint64_t result;

  result = qword_256EA80E8;
  if (!qword_256EA80E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D04C, &type metadata for ResponseGenerationInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA80E8);
  }
  return result;
}

unint64_t sub_23F76ED2C()
{
  unint64_t result;

  result = qword_256EA80F8;
  if (!qword_256EA80F8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseMode, &type metadata for ResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA80F8);
  }
  return result;
}

uint64_t type metadata accessor for StatementResultDigest(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EA82D0);
}

unint64_t sub_23F76ED7C()
{
  unint64_t result;

  result = qword_256EA8128;
  if (!qword_256EA8128)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseMode, &type metadata for ResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA8128);
  }
  return result;
}

uint64_t sub_23F76EDB8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = sub_23F6AE310(&qword_256EA8100);
    sub_23F6D3458(a2, type metadata accessor for StatementResultDigest, a3);
    v11 = v10;
    result = MEMORY[0x242674E5C](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23F76EE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StatementResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23F76EE80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_23F6B6B88(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_23F694CC8();
}

unint64_t sub_23F76EEB4()
{
  unint64_t result;

  result = qword_256EA8160;
  if (!qword_256EA8160)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5CFFC, &type metadata for StatementResultDigest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8160);
  }
  return result;
}

unint64_t sub_23F76EEF0()
{
  unint64_t result;

  result = qword_256EA8180;
  if (!qword_256EA8180)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for UndoOperation, &type metadata for UndoOperation);
    atomic_store(result, (unint64_t *)&qword_256EA8180);
  }
  return result;
}

unint64_t sub_23F76EF2C()
{
  unint64_t result;

  result = qword_256EA81B0;
  if (!qword_256EA81B0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for UndoOperation, &type metadata for UndoOperation);
    atomic_store(result, (unint64_t *)&qword_256EA81B0);
  }
  return result;
}

unint64_t sub_23F76EF6C()
{
  unint64_t result;

  result = qword_256EA81C0;
  if (!qword_256EA81C0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for RequestType, &type metadata for RequestType);
    atomic_store(result, (unint64_t *)&qword_256EA81C0);
  }
  return result;
}

unint64_t sub_23F76EFAC()
{
  unint64_t result;

  result = qword_256EA81C8;
  if (!qword_256EA81C8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseMode, &type metadata for ResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA81C8);
  }
  return result;
}

unint64_t sub_23F76EFEC()
{
  unint64_t result;

  result = qword_256EA81D0;
  if (!qword_256EA81D0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for CondensedResponseMode, &type metadata for CondensedResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA81D0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResponseGenerationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23FB2C50C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ResponseGenerationInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23FB2C50C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ResponseGenerationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23FB2C50C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ResponseGenerationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2C50C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ResponseGenerationInput(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2C50C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for ResponseGenerationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23FB2C50C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseGenerationInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F76F444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_23F694C84();
  }
  else
  {
    v6 = sub_23F7717C4();
    sub_23F6F07D0(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F76F4B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_23F694C84();
  }
  else
  {
    v7 = sub_23F7717C4();
    sub_23F6F07C4(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_23F76F508()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2C50C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StatementResultDigest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23FB2E8D0();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_23F6916B8(&qword_256EA8140);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = (int *)type metadata accessor for Action(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, (uint64_t)v13))
    {
      v14 = sub_23F6916B8(&qword_256EA8148);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v15 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = v13[5];
      v17 = &v11[v16];
      v18 = &v12[v16];
      v19 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = v19;
      v20 = v13[6];
      v21 = &v11[v20];
      v22 = &v12[v20];
      v23 = *((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = v23;
      v24 = v13[7];
      v25 = &v11[v24];
      v26 = &v12[v24];
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = v27;
      v11[v13[8]] = v12[v13[8]];
      *(_QWORD *)&v11[v13[9]] = *(_QWORD *)&v12[v13[9]];
      v28 = v13[10];
      v29 = &v11[v28];
      v30 = &v12[v28];
      v31 = *((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v11, 0, 1, (uint64_t)v13);
    }
    v32 = *(int *)(a3 + 24);
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_23FB2C4B8();
    v63 = a3;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v34, 1, v35))
    {
      v36 = sub_23F6916B8(&qword_256EA2798);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v33, 0, 1, v35);
    }
    v37 = (int *)type metadata accessor for StatementResult(0);
    v38 = v37[5];
    v39 = &v33[v38];
    v40 = &v34[v38];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v42 = v37[6];
    v43 = &v33[v42];
    v44 = &v34[v42];
    v45 = sub_23FB2D0DC();
    v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
    swift_bridgeObjectRetain();
    v46(v43, v44, v45);
    v47 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
    v48 = &v43[v47];
    v49 = &v44[v47];
    v50 = sub_23FB2D0B8();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v49, 1, v50))
    {
      v51 = sub_23F6916B8(&qword_256EA2780);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v48, 0, 1, v50);
    }
    v52 = v37[7];
    v53 = &v33[v52];
    v54 = &v34[v52];
    v55 = sub_23FB2C764();
    v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
    v56(v53, v54, v55);
    v56(&v33[v37[8]], &v34[v37[8]], v55);
    v56(&v33[v37[9]], &v34[v37[9]], v55);
    v57 = *(int *)(v63 + 32);
    *((_BYTE *)a1 + *(int *)(v63 + 28)) = *((_BYTE *)a2 + *(int *)(v63 + 28));
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    v60 = sub_23FB2EF6C();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v59, 1, v60))
    {
      v61 = sub_23F6916B8(&qword_256EA8150);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v58, 0, 1, v60);
    }
  }
  return a1;
}

uint64_t destroy for StatementResultDigest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v4 = sub_23FB2E8D0();
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v4))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Action(0);
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v5, 1, v6))
  {
    v7 = sub_23FB2C764();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = a1 + a2[6];
  v9 = sub_23FB2C4B8();
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, 1, v9))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = (int *)type metadata accessor for StatementResult(0);
  swift_bridgeObjectRelease();
  v11 = v8 + v10[6];
  v12 = sub_23FB2D0DC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v11 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  v14 = sub_23FB2D0B8();
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v13, 1, v14))(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v8 + v10[7];
  v16 = sub_23FB2C764();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v17(v15, v16);
  v17(v8 + v10[8], v16);
  v17(v8 + v10[9], v16);
  v18 = a1 + a2[8];
  v19 = sub_23FB2EF6C();
  result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v18, 1, v19);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  return result;
}

char *initializeWithCopy for StatementResultDigest(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;

  v6 = sub_23FB2E8D0();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_23F6916B8(&qword_256EA8140);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for Action(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v10, 1, (uint64_t)v11))
  {
    v12 = sub_23F6916B8(&qword_256EA8148);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = v11[7];
    v23 = &v9[v22];
    v24 = &v10[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v9[v11[8]] = v10[v11[8]];
    *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
    v26 = v11[10];
    v27 = &v9[v26];
    v28 = &v10[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v9, 0, 1, (uint64_t)v11);
  }
  v30 = *(int *)(a3 + 24);
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = sub_23FB2C4B8();
  v61 = a3;
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v32, 1, v33))
  {
    v34 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v31, 0, 1, v33);
  }
  v35 = (int *)type metadata accessor for StatementResult(0);
  v36 = v35[5];
  v37 = &v31[v36];
  v38 = &v32[v36];
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v39;
  v40 = v35[6];
  v41 = &v31[v40];
  v42 = &v32[v40];
  v43 = sub_23FB2D0DC();
  v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
  swift_bridgeObjectRetain();
  v44(v41, v42, v43);
  v45 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  v46 = &v41[v45];
  v47 = &v42[v45];
  v48 = sub_23FB2D0B8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v47, 1, v48))
  {
    v49 = sub_23F6916B8(&qword_256EA2780);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v46, 0, 1, v48);
  }
  v50 = v35[7];
  v51 = &v31[v50];
  v52 = &v32[v50];
  v53 = sub_23FB2C764();
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
  v54(v51, v52, v53);
  v54(&v31[v35[8]], &v32[v35[8]], v53);
  v54(&v31[v35[9]], &v32[v35[9]], v53);
  v55 = *(int *)(v61 + 32);
  a1[*(int *)(v61 + 28)] = a2[*(int *)(v61 + 28)];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = sub_23FB2EF6C();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v57, 1, v58))
  {
    v59 = sub_23F6916B8(&qword_256EA8150);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v56, 0, 1, v58);
  }
  return a1;
}

char *assignWithCopy for StatementResultDigest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;

  v6 = sub_23FB2E8D0();
  v7 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, v6);
  v8 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_23F6916B8(&qword_256EA8140);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for Action(0);
  v15 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  v16 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (v15)
  {
    if (!v16)
    {
      v17 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
      v18 = v14[5];
      v19 = &v12[v18];
      v20 = &v13[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
      v21 = v14[6];
      v22 = &v12[v21];
      v23 = &v13[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
      v24 = v14[7];
      v25 = &v12[v24];
      v26 = &v13[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
      v12[v14[8]] = v13[v14[8]];
      *(_QWORD *)&v12[v14[9]] = *(_QWORD *)&v13[v14[9]];
      v27 = v14[10];
      v28 = &v12[v27];
      v29 = &v13[v27];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    sub_23F6D3508((uint64_t)v12, type metadata accessor for Action);
LABEL_12:
    v30 = sub_23F6916B8(&qword_256EA8148);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  v69 = sub_23FB2C764();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 24))(v12, v13, v69);
  v70 = v14[5];
  v71 = &v12[v70];
  v72 = &v13[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73 = v14[6];
  v74 = &v12[v73];
  v75 = &v13[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v76 = v14[7];
  v77 = &v12[v76];
  v78 = &v13[v76];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[v14[8]] = v13[v14[8]];
  *(_QWORD *)&v12[v14[9]] = *(_QWORD *)&v13[v14[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v79 = v14[10];
  v80 = &v12[v79];
  v81 = &v13[v79];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  v31 = a3[6];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = sub_23FB2C4B8();
  v35 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v32, 1, v34);
  v36 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v33, 1, v34);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v37 = *(_QWORD *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_18:
    v38 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v32, v33, v34);
LABEL_19:
  v39 = (int *)type metadata accessor for StatementResult(0);
  v40 = v39[5];
  v41 = &v32[v40];
  v42 = &v33[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = v39[6];
  v44 = &v32[v43];
  v45 = &v33[v43];
  v46 = sub_23FB2D0DC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  v48 = &v44[v47];
  v49 = &v45[v47];
  v50 = sub_23FB2D0B8();
  v51 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v48, 1, v50);
  v52 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v48, 0, 1, v50);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v53 = *(_QWORD *)(v50 - 8);
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v50);
LABEL_24:
    v54 = sub_23F6916B8(&qword_256EA2780);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 24))(v48, v49, v50);
LABEL_25:
  v55 = v39[7];
  v56 = &v32[v55];
  v57 = &v33[v55];
  v58 = sub_23FB2C764();
  v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 24);
  v59(v56, v57, v58);
  v59(&v32[v39[8]], &v33[v39[8]], v58);
  v59(&v32[v39[9]], &v33[v39[9]], v58);
  a1[a3[7]] = a2[a3[7]];
  v60 = a3[8];
  v61 = &a1[v60];
  v62 = &a2[v60];
  v63 = sub_23FB2EF6C();
  v64 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v61, 1, v63);
  v65 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v62, 1, v63);
  if (!v64)
  {
    v66 = *(_QWORD *)(v63 - 8);
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 24))(v61, v62, v63);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v63);
    goto LABEL_30;
  }
  if (v65)
  {
LABEL_30:
    v67 = sub_23F6916B8(&qword_256EA8150);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v61, 0, 1, v63);
  return a1;
}

char *initializeWithTake for StatementResultDigest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_23FB2E8D0();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_23F6916B8(&qword_256EA8140);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for Action(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v10, 1, (uint64_t)v11))
  {
    v12 = sub_23F6916B8(&qword_256EA8148);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
    *(_OWORD *)&v9[v11[5]] = *(_OWORD *)&v10[v11[5]];
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    *(_OWORD *)&v9[v11[7]] = *(_OWORD *)&v10[v11[7]];
    v9[v11[8]] = v10[v11[8]];
    *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
    *(_OWORD *)&v9[v11[10]] = *(_OWORD *)&v10[v11[10]];
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v9, 0, 1, (uint64_t)v11);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_23FB2C4B8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v16, 1, v17))
  {
    v18 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v15, 0, 1, v17);
  }
  v19 = (int *)type metadata accessor for StatementResult(0);
  *(_OWORD *)&v15[v19[5]] = *(_OWORD *)&v16[v19[5]];
  v20 = v19[6];
  v21 = &v15[v20];
  v22 = &v16[v20];
  v23 = sub_23FB2D0DC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  v25 = &v21[v24];
  v26 = &v22[v24];
  v27 = sub_23FB2D0B8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v26, 1, v27))
  {
    v28 = sub_23F6916B8(&qword_256EA2780);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v25, 0, 1, v27);
  }
  v29 = v19[7];
  v30 = &v15[v29];
  v31 = &v16[v29];
  v32 = sub_23FB2C764();
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v33(v30, v31, v32);
  v33(&v15[v19[8]], &v16[v19[8]], v32);
  v33(&v15[v19[9]], &v16[v19[9]], v32);
  v34 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = sub_23FB2EF6C();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v36, 1, v37))
  {
    v38 = sub_23F6916B8(&qword_256EA8150);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v35, 0, 1, v37);
  }
  return a1;
}

char *assignWithTake for StatementResultDigest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;

  v6 = sub_23FB2E8D0();
  v7 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, v6);
  v8 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_23F6916B8(&qword_256EA8140);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for Action(0);
  v15 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  v16 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (v15)
  {
    if (!v16)
    {
      v17 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v12, v13, v17);
      *(_OWORD *)&v12[v14[5]] = *(_OWORD *)&v13[v14[5]];
      *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
      *(_OWORD *)&v12[v14[7]] = *(_OWORD *)&v13[v14[7]];
      v12[v14[8]] = v13[v14[8]];
      *(_QWORD *)&v12[v14[9]] = *(_QWORD *)&v13[v14[9]];
      *(_OWORD *)&v12[v14[10]] = *(_OWORD *)&v13[v14[10]];
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    sub_23F6D3508((uint64_t)v12, type metadata accessor for Action);
LABEL_12:
    v18 = sub_23F6916B8(&qword_256EA8148);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_13;
  }
  v59 = sub_23FB2C764();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v12, v13, v59);
  v60 = v14[5];
  v61 = &v12[v60];
  v62 = &v13[v60];
  v64 = *(_QWORD *)v62;
  v63 = *((_QWORD *)v62 + 1);
  *(_QWORD *)v61 = v64;
  *((_QWORD *)v61 + 1) = v63;
  swift_bridgeObjectRelease();
  v65 = v14[6];
  v66 = &v12[v65];
  v67 = &v13[v65];
  v69 = *(_QWORD *)v67;
  v68 = *((_QWORD *)v67 + 1);
  *(_QWORD *)v66 = v69;
  *((_QWORD *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  v70 = v14[7];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v74 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = v74;
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRelease();
  v12[v14[8]] = v13[v14[8]];
  *(_QWORD *)&v12[v14[9]] = *(_QWORD *)&v13[v14[9]];
  swift_bridgeObjectRelease();
  v75 = v14[10];
  v76 = &v12[v75];
  v77 = &v13[v75];
  v79 = *(_QWORD *)v77;
  v78 = *((_QWORD *)v77 + 1);
  *(_QWORD *)v76 = v79;
  *((_QWORD *)v76 + 1) = v78;
  swift_bridgeObjectRelease();
LABEL_13:
  v19 = a3[6];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_23FB2C4B8();
  v23 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v20, 1, v22);
  v24 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v21, 1, v22);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v20, 0, 1, v22);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v25 = *(_QWORD *)(v22 - 8);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v22);
LABEL_18:
    v26 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v20, v21, v22);
LABEL_19:
  v27 = (int *)type metadata accessor for StatementResult(0);
  v28 = v27[5];
  v29 = &v20[v28];
  v30 = &v21[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  v33 = v27[6];
  v34 = &v20[v33];
  v35 = &v21[v33];
  v36 = sub_23FB2D0DC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  v37 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  v38 = &v34[v37];
  v39 = &v35[v37];
  v40 = sub_23FB2D0B8();
  v41 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v38, 1, v40);
  v42 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v39, 1, v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v38, 0, 1, v40);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v43 = *(_QWORD *)(v40 - 8);
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v40);
LABEL_24:
    v44 = sub_23F6916B8(&qword_256EA2780);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v38, v39, v40);
LABEL_25:
  v45 = v27[7];
  v46 = &v20[v45];
  v47 = &v21[v45];
  v48 = sub_23FB2C764();
  v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40);
  v49(v46, v47, v48);
  v49(&v20[v27[8]], &v21[v27[8]], v48);
  v49(&v20[v27[9]], &v21[v27[9]], v48);
  v50 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v51 = &a1[v50];
  v52 = &a2[v50];
  v53 = sub_23FB2EF6C();
  v54 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v51, 1, v53);
  v55 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v52, 1, v53);
  if (!v54)
  {
    v56 = *(_QWORD *)(v53 - 8);
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 40))(v51, v52, v53);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v53);
    goto LABEL_30;
  }
  if (v55)
  {
LABEL_30:
    v57 = sub_23F6916B8(&qword_256EA8150);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v51, 0, 1, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for StatementResultDigest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F771004(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_23F6916B8(&qword_256EA8140);
  sub_23F6F07DC();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_23F6916B8(&qword_256EA8148);
    sub_23F6F07DC();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      type metadata accessor for StatementResult(0);
      sub_23F6F07DC();
      if (v12)
      {
        v7 = v13;
        v11 = a3[6];
      }
      else
      {
        if ((_DWORD)a2 == 253)
        {
          sub_23F694C84();
          return;
        }
        v7 = sub_23F6916B8(&qword_256EA8150);
        v11 = a3[8];
      }
    }
    v8 = a1 + v11;
  }
  sub_23F6F07D0(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for StatementResultDigest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F7710DC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  sub_23F6916B8(&qword_256EA8140);
  sub_23F6F07EC();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_23F6916B8(&qword_256EA8148);
    sub_23F6F07EC();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      type metadata accessor for StatementResult(0);
      sub_23F6F07EC();
      if (v14)
      {
        v9 = v15;
        v13 = a4[6];
      }
      else
      {
        if (a3 == 253)
        {
          *(_BYTE *)(a1 + a4[7]) = a2 + 2;
          sub_23F694C84();
          return;
        }
        v9 = sub_23F6916B8(&qword_256EA8150);
        v13 = a4[8];
      }
    }
    v10 = a1 + v13;
  }
  sub_23F6F07C4(v10, a2, a2, v9);
}

void sub_23F77119C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_23F6DE58C(319, &qword_256EA82E0, (void (*)(uint64_t))MEMORY[0x24BEB8FE0]);
  if (v0 <= 0x3F)
  {
    sub_23F6DE58C(319, &qword_256EA82E8, (void (*)(uint64_t))type metadata accessor for Action);
    if (v1 <= 0x3F)
    {
      type metadata accessor for StatementResult(319);
      if (v2 <= 0x3F)
      {
        sub_23F6DE58C(319, qword_256EA82F0, (void (*)(uint64_t))MEMORY[0x24BEBA670]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for RequestType()
{
  sub_23F694C70();
}

uint64_t storeEnumTagSinglePayload for ResponseMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23F7712EC + 4 * byte_23FB5C9C3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23F771320 + 4 * byte_23FB5C9BE[v4]))();
}

uint64_t sub_23F771320(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F771328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F771330);
  return result;
}

uint64_t sub_23F77133C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F771344);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23F771348(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F771350(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ResponseMode()
{
  sub_23F694C70();
}

uint64_t _s30IntelligenceFlowPlannerSupport11RequestTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F7713B4 + 4 * byte_23FB5C9CD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F7713E8 + 4 * byte_23FB5C9C8[v4]))();
}

uint64_t sub_23F7713E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7713F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7713F8);
  return result;
}

uint64_t sub_23F771404(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F77140CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F771410(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F771418(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CondensedResponseMode()
{
  sub_23F694C70();
}

ValueMetadata *type metadata accessor for StatementResultDigest.CodingKeys()
{
  return &type metadata for StatementResultDigest.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport21StatementResultDigestV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23F771494 + 4 * byte_23FB5C9D7[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23F7714C8 + 4 * byte_23FB5C9D2[v4]))();
}

uint64_t sub_23F7714C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7714D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7714D8);
  return result;
}

uint64_t sub_23F7714E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7714ECLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23F7714F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7714F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResponseGenerationInput.CodingKeys()
{
  return &type metadata for ResponseGenerationInput.CodingKeys;
}

unint64_t sub_23F771518()
{
  unint64_t result;

  result = qword_256EA8330;
  if (!qword_256EA8330)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5CF1C, &type metadata for ResponseGenerationInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8330);
  }
  return result;
}

unint64_t sub_23F771558()
{
  unint64_t result;

  result = qword_256EA8338;
  if (!qword_256EA8338)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5CFD4, &type metadata for StatementResultDigest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8338);
  }
  return result;
}

unint64_t sub_23F771598()
{
  unint64_t result;

  result = qword_256EA8340;
  if (!qword_256EA8340)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5CF44, &type metadata for StatementResultDigest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8340);
  }
  return result;
}

unint64_t sub_23F7715D8()
{
  unint64_t result;

  result = qword_256EA8348;
  if (!qword_256EA8348)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5CF6C, &type metadata for StatementResultDigest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8348);
  }
  return result;
}

unint64_t sub_23F771618()
{
  unint64_t result;

  result = qword_256EA8350;
  if (!qword_256EA8350)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5CE8C, &type metadata for ResponseGenerationInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8350);
  }
  return result;
}

unint64_t sub_23F771658()
{
  unint64_t result;

  result = qword_256EA8358;
  if (!qword_256EA8358)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5CEB4, &type metadata for ResponseGenerationInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8358);
  }
  return result;
}

unint64_t sub_23F771694()
{
  unint64_t result;

  result = qword_256EA8360;
  if (!qword_256EA8360)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for CondensedResponseMode, &type metadata for CondensedResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA8360);
  }
  return result;
}

unint64_t sub_23F7716D0()
{
  unint64_t result;

  result = qword_256EA8368;
  if (!qword_256EA8368)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ResponseMode, &type metadata for ResponseMode);
    atomic_store(result, (unint64_t *)&qword_256EA8368);
  }
  return result;
}

unint64_t sub_23F77170C()
{
  unint64_t result;

  result = qword_256EA8370;
  if (!qword_256EA8370)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for RequestType, &type metadata for RequestType);
    atomic_store(result, (unint64_t *)&qword_256EA8370);
  }
  return result;
}

uint64_t sub_23F771750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 96), v1);
}

uint64_t sub_23F771760()
{
  return sub_23FB2FA34();
}

uint64_t sub_23F771774()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 112), *(_QWORD *)(v1 - 104));
}

uint64_t sub_23F771780()
{
  return type metadata accessor for StatementResultDigest(0);
}

uint64_t sub_23F77178C()
{
  return sub_23FB2FAD0();
}

uint64_t sub_23F771798()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return 0;
}

uint64_t sub_23F7717B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23F7717C4()
{
  return sub_23FB2C50C();
}

uint64_t sub_23F7717CC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = result;
  return result;
}

void sub_23F7717E0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 3;
}

uint64_t sub_23F7717EC()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F7717F4()
{
  return sub_23FB2FA40();
}

void ResponseGenerationProtoResponseGenerationInput.init(rg:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a1[1];
  v18 = *a1;
  v6 = type metadata accessor for ResponseGenerationInput(0);
  v7 = (_QWORD *)((char *)a1 + *(int *)(v6 + 28));
  v8 = v7[1];
  v17 = *v7;
  v9 = *((_BYTE *)a1 + *(int *)(v6 + 24));
  sub_23F6B5F1C();
  sub_23F6B6548();
  v16 = sub_23FB2C4D0();
  v11 = v10;
  v12 = swift_bridgeObjectRetain();
  v13 = sub_23F76CBEC(v12);
  if (v2)
  {
    sub_23F714040(v13, type metadata accessor for ResponseGenerationInput);
    sub_23F717D54();
    sub_23F6B5908();
    sub_23F6B6090();
  }
  else
  {
    v14 = v13;
    type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
    v15 = _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 32) = 0x4030102u >> (8 * v9);
    *(_QWORD *)(a2 + 40) = v16;
    *(_QWORD *)(a2 + 48) = v11;
    *(_QWORD *)(a2 + 56) = v14;
    sub_23F714040(v15, type metadata accessor for ResponseGenerationInput);
  }
}

void ResponseGenerationInput.init(transcript:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F6B5220();
  v1 = v0;
  sub_23FB2C50C();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B59F8();
  sub_23F77DCD4();
  sub_23F77E600();
  sub_23FB2C4C4();
  __asm { BR              X10 }
}

void sub_23F7719A4()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  sub_23F779AF8();
  sub_23F6B5AD4();
  *v0 = 0;
  sub_23F77D9E4();
  v1 = sub_23F6B644C();
  sub_23F77DD2C(v1, type metadata accessor for ResponseGenerationProtoResponseGenerationInput);
  v2 = sub_23F6B63E8();
  v3(v2);
  sub_23F6B5100();
}

uint64_t sub_23F771A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[4];
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for ResponseGenerationInput(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)&v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ResponseGenerationProtoResponseGenerationInput(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23F6F5920(v0, (uint64_t)v4, type metadata accessor for ResponseGenerationInput);
  v8 = v4[1];
  v21 = *v4;
  v9 = (uint64_t *)((char *)v4 + *(int *)(v2 + 28));
  v10 = v9[1];
  v20 = *v9;
  v19 = *((unsigned __int8 *)v4 + *(int *)(v2 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_23FB2C4D0();
  v13 = v12;
  v14 = swift_bridgeObjectRetain();
  v15 = sub_23F76CBEC(v14);
  if (v1)
  {
    sub_23F6D3508((uint64_t)v4, type metadata accessor for ResponseGenerationInput);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = v15;
    v19 = 0x4030102u >> (8 * v19);
    _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
    *(_QWORD *)v7 = v21;
    *((_QWORD *)v7 + 1) = v8;
    *((_QWORD *)v7 + 2) = v20;
    *((_QWORD *)v7 + 3) = v10;
    v7[32] = v19;
    *((_QWORD *)v7 + 5) = v11;
    *((_QWORD *)v7 + 6) = v13;
    *((_QWORD *)v7 + 7) = v16;
    sub_23F6D3508((uint64_t)v4, type metadata accessor for ResponseGenerationInput);
    sub_23F6D3458((unint64_t *)&qword_256EA7EB8, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
    v13 = sub_23FB2D8EC();
    sub_23F6D3508((uint64_t)v7, type metadata accessor for ResponseGenerationProtoResponseGenerationInput);
  }
  return v13;
}

uint64_t sub_23F771CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = v0;
  v3 = type metadata accessor for StatementResultDigest(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6F5920(v2, (uint64_t)v5, type metadata accessor for StatementResultDigest);
  ResponseGenerationProtoStatementResultDigest.init(rg:)();
  if (!v1)
  {
    sub_23F6D3458(&qword_256EA7E38, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
    v6 = sub_23FB2D8EC();
    sub_23F6D3508((uint64_t)v8, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
  }
  return v6;
}

uint64_t TranscriptResponseGenerationBidirectionalConvertibleProtocol.protoBytes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[10];
  uint64_t v16;
  uint64_t v17;

  sub_23F6B5220();
  v16 = v4;
  v17 = v5;
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5268();
  v15[1] = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v15 - v10;
  sub_23F75E710(v2, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v12 = sub_23F77E578();
  v13 = AssociatedTypeWitness;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v2, AssociatedTypeWitness, v12);
  if (!v1)
  {
    sub_23F77E578();
    sub_23F6B5994();
    _s16IntelligenceFlow3ASTO0aB14PlannerSupportE7BuiltinO6SearchV5query24isLowConfidenceKnowledge7pickOneAHSS_S2btcfcfA0__0();
    v13 = sub_23FB2D8EC();
    sub_23F6B56E0((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  }
  return v13;
}

uint64_t Array<A>.init<A>(rg:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  sub_23F6916B8(&qword_256EA2828);
  sub_23F772110();
  if (!v3)
  {
    v7 = sub_23FB2F488();
    MEMORY[0x242674E5C](MEMORY[0x24BEE12C8], v7);
    a2 = sub_23FB2F494();
  }
  sub_23F6B56E0(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8));
  return a2;
}

uint64_t sub_23F772040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v17 - v13, a1);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 16))(v14, a3, a5);
  if (v7)
    *a7 = v7;
  return result;
}

void sub_23F772110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, char *);
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_23F6B5220();
  v41 = v3;
  v42 = v2;
  v47 = v0;
  v5 = v4;
  v55 = v6;
  v56 = v7;
  v40 = *(_QWORD *)(v2 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)v39 - v11;
  v13 = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v15);
  v45 = (char *)v39 - v16;
  sub_23F6D398C();
  v17 = sub_23FB2F65C();
  v43 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v18);
  v51 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F693E0C();
  v39[1] = v22;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v23);
  v50 = *(_QWORD *)(v13 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B5404(v25, v39[0]);
  v48 = v5;
  v58 = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(v58 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v26);
  v52 = (char *)v39 - v27;
  v28 = sub_23FB2F314();
  sub_23FB2F8A8();
  sub_23FB2F8B4();
  sub_23FB2F86C();
  sub_23F759774(v49, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 16));
  v50 = v13;
  sub_23FB2F308();
  if (v28 < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  if (v28)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_23F77E430();
      v29 = sub_23F6B6468();
      sub_23F6B5164(v29, v30, AssociatedTypeWitness);
      if (v31)
        goto LABEL_20;
      v32 = sub_23F77E564();
      v33(v32, v54);
      if (v1)
      {
        sub_23F77DC64();
        sub_23F77DB70();
        (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v41, v54, v42);
        sub_23F77DB4C();
        goto LABEL_18;
      }
      sub_23F77DB4C();
      sub_23F77E45C();
      if (!--v28)
      {
        v34 = (uint64_t)v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = (uint64_t)v51;
LABEL_9:
  sub_23FB2F674();
  sub_23F6B5164(v34, 1, AssociatedTypeWitness);
  v35 = v45;
  if (v31)
  {
    v36 = (uint64_t)v51;
LABEL_15:
    sub_23F77DC64();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v36, v44);
  }
  else
  {
    v54 = *(char **)(v57 + 32);
    v36 = (uint64_t)v51;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v54)(v35, v36, AssociatedTypeWitness);
      v37 = sub_23F77E564();
      v38(v37, v53);
      if (v1)
        break;
      sub_23F77DB4C();
      sub_23F77E45C();
      sub_23F77E430();
      sub_23F6B5164(v36, 1, AssociatedTypeWitness);
      if (v31)
        goto LABEL_15;
    }
    sub_23F77DB4C();
    sub_23F77DC64();
    sub_23F77DB70();
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v41, v53, v42);
  }
LABEL_18:
  sub_23F6B5100();
}

IntelligenceFlowPlannerSupport::ResponseMode __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ResponseMode.init(transcript:)(IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode transcript)
{
  IntelligenceFlowPlannerSupport::ResponseMode result;

  __asm { BR              X12 }
  return result;
}

uint64_t sub_23F772510()
{
  _BYTE *v0;

  sub_23F779AF8();
  sub_23F6B5AD4();
  *v0 = 0;
  return sub_23F77D9E4();
}

void sub_23F77255C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = type metadata accessor for StatementResultDigest(0);
  v36 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v38 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v30 = (char *)&v29 - v6;
  v7 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v29 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v33 = (uint64_t)&v29 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v32 = (uint64_t)&v29 - v17;
  v18 = *(_QWORD *)(a1 + 16);
  v39 = MEMORY[0x24BEE4AF8];
  sub_23F711C14();
  v19 = v39;
  v37 = v8;
  v31 = a1;
  if (v18)
  {
    v20 = *(_QWORD *)(a1 + 16);
    v34 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v35 = v20;
    swift_bridgeObjectRetain();
    v21 = 0;
    while (v35 != v21)
    {
      sub_23F6F5920(v34 + *(_QWORD *)(v8 + 72) * v21, (uint64_t)v14, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
      sub_23F6F5920((uint64_t)v14, (uint64_t)v11, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
      StatementResultDigest.init(transcript:)();
      if (v1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        sub_23F6D3508((uint64_t)v14, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
        swift_bridgeObjectRelease();
        return;
      }
      sub_23F6D3508((uint64_t)v14, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F711C14();
        v19 = v39;
      }
      v22 = *(_QWORD *)(v19 + 16);
      if (v22 >= *(_QWORD *)(v19 + 24) >> 1)
      {
        sub_23F711C14();
        v19 = v39;
      }
      ++v21;
      *(_QWORD *)(v19 + 16) = v22 + 1;
      sub_23F6F594C(v38, v19+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v22, type metadata accessor for StatementResultDigest);
      v8 = v37;
      if (v18 == v21)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_12:
    v23 = v31;
    v24 = *(_QWORD *)(v31 + 16);
    if (v18 == v24)
    {
LABEL_13:
      swift_bridgeObjectRelease_n();
      return;
    }
    v25 = (uint64_t)v30;
    while (v18 < v24)
    {
      v26 = v32;
      sub_23F6F5920(v23+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v18, v32, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
      sub_23F6F5920(v26, v33, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
      StatementResultDigest.init(transcript:)();
      sub_23F6D3508(v26, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      v27 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F711C14();
        v27 = v39;
      }
      v28 = *(_QWORD *)(v27 + 16);
      if (v28 >= *(_QWORD *)(v27 + 24) >> 1)
      {
        sub_23F711C14();
        v27 = v39;
      }
      ++v18;
      *(_QWORD *)(v27 + 16) = v28 + 1;
      sub_23F6F594C(v25, v27+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v28, type metadata accessor for StatementResultDigest);
      v24 = *(_QWORD *)(v23 + 16);
      if (v18 == v24)
        goto LABEL_13;
    }
  }
  __break(1u);
}

void sub_23F772984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F773E78(a1, (uint64_t)MEMORY[0x24BE53BB8], (uint64_t)type metadata accessor for TranscriptProtoInterpretedStatementResult, (uint64_t)sub_23F711CC8, (uint64_t)InterpretedStatementResult.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F7729B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  sub_23F6B5220();
  sub_23F77DAA0();
  v14 = sub_23FB2ED38();
  v80 = *(_QWORD *)(v14 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  v75 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6D3D14();
  v79 = v18;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v19);
  v66 = (char *)&v63 - v20;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v21);
  v76 = (char *)&v63 - v22;
  sub_23FB2EB1C();
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v23);
  v73 = (uint64_t)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F6D3D14();
  v72 = v26;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v27);
  v74 = (uint64_t)&v63 - v28;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v29);
  v65 = (uint64_t)&v63 - v30;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  v64 = (char *)&v63 - v32;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F77E490();
  v34 = *(_QWORD *)(v11 + 16);
  sub_23F77DA1C(MEMORY[0x24BEE4AF8]);
  sub_23F711D04();
  v77 = v12;
  v67 = v11;
  v63 = v13;
  if (v34)
  {
    sub_23F77DAD0();
    v70 = v35;
    v71 = v36;
    sub_23F6B5F1C();
    v37 = 0;
    v68 = v34;
    v69 = v14;
    while (v71 != v37)
    {
      v38 = *(_QWORD *)(v12 + 72);
      v78 = v37;
      v39 = v70 + v38 * v37;
      v40 = v74;
      sub_23F77DE34(v74, v39);
      v41 = v12;
      v42 = v72;
      v43 = sub_23F72E430();
      sub_23F77DE34(v43, v44);
      sub_23F77DE34(v73, v42);
      v45 = v75;
      sub_23FB2ED2C();
      if (v10)
      {
        sub_23F77DC80(v42);
        sub_23F6B5908();
        sub_23F77DB70();
        sub_23F77DC80(v40);
        sub_23F6B5908();
        goto LABEL_25;
      }
      v46 = *(_QWORD *)(v41 + 8);
      sub_23F77DC80(v42);
      (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v79, v45, v14);
      sub_23F77DC80(v40);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DF9C();
        v46 = a10;
      }
      v34 = v68;
      v47 = v78;
      v48 = *(_QWORD *)(v46 + 16);
      if (v48 >= *(_QWORD *)(v46 + 24) >> 1)
      {
        sub_23F77DE5C();
        v46 = a10;
      }
      v37 = v47 + 1;
      *(_QWORD *)(v46 + 16) = v48 + 1;
      v49 = sub_23F77E150();
      v14 = v69;
      sub_23F77E55C(v49, v50);
      a10 = v46;
      v12 = v77;
      if (v34 == v37)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_27;
  }
  sub_23F6B5F1C();
LABEL_12:
  v51 = *(_QWORD *)(v67 + 16);
  if (v34 != v51)
  {
    v52 = v63;
    while (v34 < v51)
    {
      sub_23F77E058();
      sub_23F77DE34(v52, v53 + *(_QWORD *)(v12 + 72) * v34);
      v54 = (uint64_t)v64;
      v55 = sub_23F77E46C();
      sub_23F77DE34(v55, v56);
      sub_23F77DE34(v65, v54);
      v57 = v66;
      sub_23FB2ED2C();
      if (v10)
      {
        sub_23F77DC80(v54);
        sub_23F77DC80(v52);
        sub_23F6B5908();
        sub_23F6B5908();
        sub_23F77DA7C();
        goto LABEL_25;
      }
      v58 = v57;
      v59 = *(_QWORD *)(v12 + 8);
      sub_23F77DC80(v54);
      v60 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
      v60(v76, v58, v14);
      sub_23F77DC80(v52);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DF9C();
        v59 = a10;
      }
      v61 = *(_QWORD *)(v59 + 16);
      if (v61 >= *(_QWORD *)(v59 + 24) >> 1)
      {
        sub_23F77DE5C();
        v59 = a10;
      }
      ++v34;
      *(_QWORD *)(v59 + 16) = v61 + 1;
      v62 = sub_23F77E134();
      v60((char *)v62, v76, v14);
      a10 = v59;
      v51 = *(_QWORD *)(v67 + 16);
      v12 = v77;
      if (v34 == v51)
        goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return;
  }
LABEL_13:
  sub_23F6B6740();
LABEL_25:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F772DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_23F6B5220();
  v15 = sub_23F77DAA0();
  type metadata accessor for TranscriptProtoASTExpr(v15);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F77DA54();
  MEMORY[0x24BDAC7A8](v18);
  v41 = (char *)&v38 - v19;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  v40 = (uint64_t)&v38 - v21;
  v22 = *(_QWORD *)(v11 + 16);
  sub_23F77DAE0(MEMORY[0x24BEE4AF8]);
  sub_23F711D40();
  v23 = a10;
  v39 = v11;
  if (v22)
  {
    sub_23F77DAD0();
    v43 = v24;
    v44 = v25;
    sub_23F6B5F1C();
    v42 = v14;
    while (v44)
    {
      sub_23F77DC78(v43, v12);
      sub_23F77DC78(v12, v13);
      AST.Expr.init(transcript:)();
      if (v10)
      {
        sub_23F77DA7C();
        v37 = sub_23F693DFC();
        sub_23F72E404(v37, type metadata accessor for TranscriptProtoASTExpr);
        sub_23F693DFC();
        goto LABEL_27;
      }
      sub_23F77DB60(v12);
      if ((sub_23F77D9A4() & 1) == 0)
      {
        sub_23F77DFFC();
        v23 = a10;
      }
      sub_23F77E2B4();
      if (v27)
      {
        sub_23F77DA64(v26);
        sub_23F711D40();
        v23 = a10;
      }
      sub_23F77E4A0();
      v14 = v42;
      if (v28)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_29;
  }
  sub_23F6B5F1C();
LABEL_13:
  v29 = v39;
  sub_23F77E218();
  if (!v28)
  {
    while (v22 < v30)
    {
      v31 = v40;
      sub_23F77DB78(v29+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v22, v40);
      sub_23F77E6E0();
      sub_23F77DB78(v32, v33);
      AST.Expr.init(transcript:)();
      sub_23F77DB80(v31);
      if (v10)
      {
        sub_23F6B644C();
        sub_23F6B644C();
        sub_23F77DA7C();
        goto LABEL_27;
      }
      v34 = v45;
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DFFC();
        v23 = a10;
      }
      v36 = *(_QWORD *)(v23 + 16);
      v35 = *(_QWORD *)(v23 + 24);
      if (v36 >= v35 >> 1)
      {
        sub_23F77E27C(v35);
        sub_23F711D40();
        v23 = a10;
      }
      ++v22;
      *(_QWORD *)(v23 + 16) = v36 + 1;
      *(_QWORD *)(v23 + 8 * v36 + 32) = v34;
      sub_23F77E218();
      if (v28)
        goto LABEL_15;
    }
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  sub_23F6B6740();
LABEL_27:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F773028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  sub_23F6B5220();
  v16 = sub_23F77DAA0();
  type metadata accessor for TranscriptProtoASTStmt(v16);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F77DA54();
  MEMORY[0x24BDAC7A8](v19);
  v50 = (uint64_t)&v48 - v20;
  sub_23F6B5664();
  v22 = MEMORY[0x24BDAC7A8](v21);
  sub_23F77E478(v22, v23, v24, v25, v26, v27, v28, v29, v48);
  sub_23F77DAE0(MEMORY[0x24BEE4AF8]);
  sub_23F711D74();
  v30 = a10;
  v48 = v11;
  if (v12)
  {
    v31 = *(_QWORD *)(v11 + 16);
    v52 = v11 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v53 = v31;
    sub_23F6B5F1C();
    v32 = 0;
    v51 = v15;
    while (v53 != v32)
    {
      v33 = sub_23F77E4D8();
      sub_23F77DC78(v33, v34);
      sub_23F77DC78(v13, v14);
      v35 = AST.Stmt.init(transcript:)(v14);
      if (v10)
      {
        sub_23F77DA7C();
        v47 = sub_23F693DFC();
        sub_23F72E404(v47, type metadata accessor for TranscriptProtoASTStmt);
        sub_23F693DFC();
        goto LABEL_26;
      }
      v36 = v35;
      sub_23F77DB60(v13);
      if ((sub_23F77D9A4() & 1) == 0)
      {
        sub_23F77E02C();
        v30 = a10;
      }
      v38 = *(_QWORD *)(v30 + 16);
      v37 = *(_QWORD *)(v30 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_23F77D9EC(v37);
        sub_23F711D74();
        v30 = a10;
      }
      ++v32;
      *(_QWORD *)(v30 + 16) = v38 + 1;
      *(_QWORD *)(v30 + 8 * v38 + 32) = v36;
      v15 = v51;
      if (v12 == v32)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_28;
  }
  sub_23F6B5F1C();
LABEL_12:
  v39 = v48;
  sub_23F77E218();
  if (!v41)
  {
    while (v12 < v40)
    {
      v42 = v49;
      sub_23F77DB78(v39+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v12, v49);
      v43 = v50;
      sub_23F77DB78(v42, v50);
      v44 = AST.Stmt.init(transcript:)(v43);
      sub_23F77DB80(v42);
      if (v10)
      {
        sub_23F6B644C();
        sub_23F6B644C();
        sub_23F77DA7C();
        goto LABEL_26;
      }
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77E02C();
        v43 = a10;
      }
      v46 = *(_QWORD *)(v43 + 16);
      v45 = *(_QWORD *)(v43 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_23F77DA64(v45);
        sub_23F711D74();
        v43 = a10;
      }
      ++v12;
      *(_QWORD *)(v43 + 16) = v46 + 1;
      *(_QWORD *)(v43 + 8 * v46 + 32) = v44;
      sub_23F77E218();
      if (v41)
        goto LABEL_14;
    }
LABEL_28:
    __break(1u);
    return;
  }
LABEL_14:
  sub_23F6B6740();
LABEL_26:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F77328C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36[4];
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;

  sub_23F6B5220();
  v6 = sub_23F77DAA0();
  v40 = *(_QWORD *)(type metadata accessor for AST.FlatValue(v6) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  v36[1] = (uint64_t)v36 - v10;
  v11 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoASTFlatValue(v11);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v14);
  v37 = (uint64_t)v36 - v15;
  sub_23F6B5664();
  v17 = MEMORY[0x24BDAC7A8](v16);
  sub_23F77DAF8(v17, v18, v19, v20, v21, v22, v23, v24, v36[0]);
  sub_23F77DA1C(MEMORY[0x24BEE4AF8]);
  sub_23F711DA8();
  sub_23F77DCC4();
  if (v3)
  {
    v25 = *(_QWORD *)(v1 + 16);
    v38 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v39 = v25;
    sub_23F6B5F1C();
    while (1)
    {
      sub_23F77E440();
      if (v26)
        break;
      sub_23F77DA3C();
      sub_23F77DB10(v5, v2);
      v27 = sub_23F77DC88();
      AST.FlatValue.init(transcript:)(v27);
      if (v0)
      {
        sub_23F77DA7C();
        v35 = sub_23F693DFC();
        sub_23F77DB94(v35, type metadata accessor for TranscriptProtoASTFlatValue);
        sub_23F693DFC();
        goto LABEL_27;
      }
      sub_23F77DB68(v5);
      if ((sub_23F77D9A4() & 1) == 0)
        sub_23F77DEF4();
      sub_23F77DD04();
      if (v29)
      {
        sub_23F77D9EC(v28);
        sub_23F711DA8();
      }
      v30 = sub_23F77D9B8();
      sub_23F6F594C(v30, v31, type metadata accessor for AST.FlatValue);
      sub_23F77E424();
      if (v26)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_29;
  }
  sub_23F6B5F1C();
LABEL_13:
  sub_23F77DB88();
  if (!v26)
  {
    while (v3 < v32)
    {
      sub_23F77D978();
      sub_23F77DA34(v1, v37);
      v33 = sub_23F77DCF4();
      AST.FlatValue.init(transcript:)(v33);
      sub_23F77DAB0(v1);
      if (v0)
      {
        sub_23F717D54();
        sub_23F717D54();
        sub_23F77DA7C();
        goto LABEL_27;
      }
      if ((sub_23F77D93C() & 1) == 0)
        sub_23F77DEF4();
      sub_23F77DD14();
      if (v29)
      {
        sub_23F77DA04(v34);
        sub_23F711DA8();
      }
      sub_23F77D948();
      sub_23F77DB88();
      if (v26)
        goto LABEL_15;
    }
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  sub_23F6B6740();
LABEL_27:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F7734E4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  sub_23F77DAA0();
  v5 = sub_23FB2DE38();
  v49 = *(_QWORD *)(v5 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v8);
  v47 = (char *)&v39 - v9;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  v45 = (char *)&v39 - v11;
  v12 = sub_23F6D398C();
  type metadata accessor for ContextProtoSampleInvocation(v12);
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F77DA54();
  v16 = MEMORY[0x24BDAC7A8](v15);
  sub_23F77E6B8(v16, v17, v18, v19, v20, v21, v22, v23, v39);
  v24 = *(_QWORD *)(v1 + 16);
  v50 = MEMORY[0x24BEE4AF8];
  sub_23F711E5C();
  v41 = v1;
  v46 = v2;
  v39 = v0;
  if (v24)
  {
    v44 = *(_QWORD *)(v1 + 16);
    sub_23F77DAD0();
    v42 = v25;
    sub_23F6B5F1C();
    v26 = 0;
    v43 = v5;
    while (v44 != v26)
    {
      sub_23F77DA34(v42 + *(_QWORD *)(v2 + 72) * v26, v4);
      sub_23F77DA34(v4, v3);
      sub_23F6B54F8();
      sub_23F77E088();
      sub_23F77DAB0(v3);
      v27 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 32);
      v27(v48, v1, v5);
      sub_23F77DAB0(v4);
      v28 = v50;
      if ((sub_23F77D9A4() & 1) == 0)
      {
        sub_23F77DE94();
        v28 = v50;
      }
      v1 = *(_QWORD *)(v28 + 16);
      if (v1 >= *(_QWORD *)(v28 + 24) >> 1)
      {
        sub_23F711E5C();
        v28 = v50;
      }
      ++v26;
      *(_QWORD *)(v28 + 16) = v1 + 1;
      sub_23F77DAB8();
      v5 = v43;
      ((void (*)(unint64_t))v27)(v29 + v30 * v1);
      v50 = v28;
      v2 = v46;
      if (v24 == v26)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    sub_23F6B5F1C();
LABEL_11:
    v31 = *(_QWORD *)(v41 + 16);
    if (v24 == v31)
    {
LABEL_12:
      sub_23F6B6740();
      sub_23F70D684();
      return;
    }
    while (v24 < v31)
    {
      sub_23F77E058();
      v33 = v32 + *(_QWORD *)(v2 + 72) * v24;
      v34 = v40;
      sub_23F77DC5C(v33, v40);
      sub_23F77DC5C(v34, v4);
      sub_23F6B54F8();
      sub_23F77E088();
      sub_23F6D3928(v4);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 32);
      v35(v45, v1, v5);
      sub_23F6D3928(v34);
      v36 = v50;
      if ((sub_23F77D9A4() & 1) == 0)
      {
        sub_23F77DE94();
        v36 = v50;
      }
      v37 = *(_QWORD *)(v36 + 16);
      v1 = v37 + 1;
      if (v37 >= *(_QWORD *)(v36 + 24) >> 1)
      {
        sub_23F711E5C();
        v36 = v50;
      }
      ++v24;
      *(_QWORD *)(v36 + 16) = v1;
      v38 = sub_23F77DBA4();
      v35((char *)v38, (unint64_t)v45, v5);
      v50 = v36;
      v31 = *(_QWORD *)(v41 + 16);
      v2 = v46;
      if (v24 == v31)
        goto LABEL_12;
    }
  }
  __break(1u);
}

void sub_23F773810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unsigned int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;

  v5 = v1;
  v7 = sub_23FB2DC64();
  v101 = *(_QWORD *)(v7 - 8);
  v102 = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  v95 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  v94 = (char *)&v84 - v11;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  v86 = (char *)&v84 - v13;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  v85 = (uint64_t)&v84 - v15;
  sub_23F77E698();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v17);
  v87 = (char *)&v84 - v18;
  sub_23F77E68C();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  v106 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B6580();
  v91 = v22;
  sub_23F6D398C();
  v23 = sub_23FB2DC7C();
  v99 = *(_QWORD *)(v23 - 8);
  v100 = v23;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F693E0C();
  v105 = v25;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v26);
  v90 = (char *)&v84 - v27;
  v28 = sub_23F6D398C();
  v104 = type metadata accessor for ContextProtoRetrievedTool(v28);
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v30);
  v107 = (uint64_t)&v84 - v31;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F6D3D14();
  v98 = v33;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F6B6580();
  v93 = v35;
  v36 = *(_QWORD *)(a1 + 16);
  v108 = MEMORY[0x24BEE4AF8];
  sub_23F711ED4();
  v89 = a1;
  v103 = v2;
  if (v36)
  {
    v97 = *(_QWORD *)(a1 + 16);
    sub_23F77E348();
    v96 = v37;
    HIDWORD(v84) = *v38;
    v88 = *v39;
    v92 = *v40;
    sub_23F6B6548();
    v41 = 0;
    while (v97 != v41)
    {
      sub_23F77DC78(v96 + *(_QWORD *)(v2 + 72) * v41, v107);
      v42 = sub_23F77E19C();
      sub_23F77DC78(v42, v43);
      sub_23F77B5EC(&qword_256EA2588, type metadata accessor for ContextProtoRetrievedTool.Definition, (uint64_t)&unk_256EA8490);
      if (v5)
      {
        sub_23F6D38A0(v4);
        sub_23F6B6090();
        swift_release();
        sub_23F6D38A0(v107);
        sub_23F6B6090();
        goto LABEL_31;
      }
      RetrievedTool.Definition.init(transcript:)(v3, v44, v45, v46, v47, v48, v49, v50, v84, v85);
      v5 = 0;
      v51 = v3;
      swift_bridgeObjectRetain();
      sub_23F7734E4();
      v52 = v92;
      if (*(_BYTE *)(v4 + 16))
      {
        v52 = v88;
        if (*(_BYTE *)(v4 + 16) != 1)
          v52 = HIDWORD(v84);
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 104))(v95, v52, v102);
      v53 = v94;
      v54 = sub_23F77E608();
      v55(v54);
      sub_23F77E3A0();
      sub_23F6D38A0(v4);
      sub_23F6D38A0(v107);
      if ((sub_23F77E528() & 1) == 0)
      {
        sub_23F77DE44();
        v53 = (char *)v108;
      }
      v56 = *((_QWORD *)v53 + 2);
      if (v56 >= *((_QWORD *)v53 + 3) >> 1)
      {
        sub_23F711ED4();
        v53 = (char *)v108;
      }
      ++v41;
      *((_QWORD *)v53 + 2) = v56 + 1;
      sub_23F77E0E8();
      (*(void (**)(unint64_t, uint64_t))(v59 + 32))(v57 + v58 * v56, v105);
      v108 = (uint64_t)v53;
      v2 = v103;
      v3 = v51;
      if (v36 == v41)
        goto LABEL_16;
    }
    __break(1u);
    goto LABEL_33;
  }
  sub_23F6B6548();
LABEL_16:
  v60 = *(_QWORD *)(v89 + 16);
  if (v36 != v60)
  {
    LODWORD(v107) = *MEMORY[0x24BE575E8];
    v61 = *MEMORY[0x24BE575D8];
    v62 = *MEMORY[0x24BE575D0];
    while (v36 < v60)
    {
      sub_23F77E348();
      v65 = v93;
      sub_23F77DC78(v64 + *(_QWORD *)(v63 + 72) * v36, v93);
      sub_23F77DC78(v65, v98);
      v66 = (uint64_t)v87;
      sub_23F77B5EC(&qword_256EA2588, type metadata accessor for ContextProtoRetrievedTool.Definition, (uint64_t)&unk_256EA8490);
      if (v5)
      {
        sub_23F6D38A0(v98);
        sub_23F6D38A0(v93);
        swift_release();
        sub_23F6B6740();
        goto LABEL_31;
      }
      RetrievedTool.Definition.init(transcript:)(v66, v67, v68, v69, v70, v71, v72, v73, v84, v85);
      v5 = 0;
      v74 = v98;
      swift_bridgeObjectRetain();
      sub_23F7734E4();
      v75 = v62;
      if (*(_BYTE *)(v74 + 16))
      {
        v75 = v61;
        if (*(_BYTE *)(v74 + 16) != 1)
          v75 = v107;
      }
      v76 = v101;
      v77 = (uint64_t)v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 104))(v86, v75, v102);
      v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32);
      v79 = v85;
      sub_23F75E710(v85, v77, v78);
      sub_23F77E3A0();
      sub_23F77DB60(v98);
      sub_23F77DB60(v93);
      if ((sub_23F77E528() & 1) == 0)
      {
        sub_23F77DE44();
        v79 = v108;
      }
      v80 = *(_QWORD *)(v79 + 16);
      if (v80 >= *(_QWORD *)(v79 + 24) >> 1)
      {
        sub_23F711ED4();
        v79 = v108;
      }
      ++v36;
      *(_QWORD *)(v79 + 16) = v80 + 1;
      sub_23F77E0E8();
      (*(void (**)(unint64_t, char *))(v83 + 32))(v81 + v82 * v80, v90);
      v108 = v79;
      v60 = *(_QWORD *)(v89 + 16);
      if (v36 == v60)
        goto LABEL_17;
    }
LABEL_33:
    __break(1u);
    return;
  }
LABEL_17:
  sub_23F6B6740();
LABEL_31:
  sub_23F77DB18();
  sub_23F70D684();
}

void sub_23F773E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F773E78(a1, (uint64_t)MEMORY[0x24BE577B0], (uint64_t)type metadata accessor for ContextProtoRetrievedContext, (uint64_t)sub_23F711F88, (uint64_t)RetrievedContext.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F773E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void (*v14)(uint64_t);
  void (*v15)(_QWORD);
  void (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(unint64_t, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(unint64_t, char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  char *v64;

  sub_23F6B5220();
  v63 = v13;
  v56 = v14;
  v16 = v15;
  v17 = v10;
  v19 = v18;
  v61 = sub_23F6F0918(v18, v20);
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v21);
  v64 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v53 - v24;
  v16(0);
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v26);
  v59 = (uint64_t)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6D3A70();
  MEMORY[0x24BDAC7A8](v29);
  v55 = (uint64_t)&v53 - v30;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B6580();
  v62 = v32;
  v33 = *(_QWORD *)(v19 + 16);
  v34 = sub_23F77DCDC(MEMORY[0x24BEE4AF8]);
  v56(v34);
  v35 = a10;
  v60 = v12;
  v53 = v25;
  v54 = v19;
  if (v33)
  {
    sub_23F77E338();
    v57 = v36;
    v58 = v37;
    sub_23F77DCD4();
    v38 = 0;
    v39 = v12;
    while (v58 != v38)
    {
      sub_23F77DA34(v57 + *(_QWORD *)(v39 + 72) * v38, v11);
      v40 = v59;
      sub_23F77DA34(v11, v59);
      v10 = v17;
      v63(v40);
      if (v17)
      {
        sub_23F77DA7C();
        sub_23F693DFC();
        sub_23F77DAB0(v11);
        sub_23F693DFC();
        goto LABEL_25;
      }
      sub_23F77DAB0(v11);
      if ((sub_23F77D9A4() & 1) == 0)
      {
        sub_23F77DD84(0, *(_QWORD *)(v35 + 16) + 1);
        v35 = a10;
      }
      v42 = *(_QWORD *)(v35 + 16);
      v41 = *(_QWORD *)(v35 + 24);
      if (v42 >= v41 >> 1)
      {
        sub_23F77DD84(v41 > 1, v42 + 1);
        v35 = a10;
      }
      ++v38;
      *(_QWORD *)(v35 + 16) = v42 + 1;
      v43 = sub_23F77E068();
      v44(v43, v64, v61);
      a10 = v35;
      v39 = v60;
      v45 = v62;
      if (v33 == v38)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_27;
  }
  sub_23F77DCD4();
  v39 = v12;
  v45 = v62;
LABEL_12:
  v46 = v54;
  v47 = *(_QWORD *)(v54 + 16);
  if (v33 != v47)
  {
    v48 = v53;
    while (v33 < v47)
    {
      sub_23F77DA34(v46+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v33, v45);
      sub_23F77DA34(v45, v55);
      sub_23F77DDE4();
      if (v10)
      {
        sub_23F77DAB0(v45);
        sub_23F77DA7C();
        sub_23F6B6740();
        goto LABEL_25;
      }
      sub_23F77DAB0(v45);
      if ((sub_23F77D9A4() & 1) == 0)
        sub_23F77DD84(0, *(_QWORD *)(v35 + 16) + 1);
      v35 = a10;
      v50 = *(_QWORD *)(a10 + 16);
      v49 = *(_QWORD *)(a10 + 24);
      if (v50 >= v49 >> 1)
      {
        sub_23F77DD84(v49 > 1, v50 + 1);
        v35 = a10;
      }
      ++v33;
      *(_QWORD *)(v35 + 16) = v50 + 1;
      v51 = sub_23F77E068();
      v52(v51, v48, v61);
      a10 = v35;
      v47 = *(_QWORD *)(v46 + 16);
      v39 = v60;
      v45 = v62;
      if (v33 == v47)
        goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return;
  }
LABEL_13:
  sub_23F6B6740();
LABEL_25:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F7741B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(unint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  sub_23F6B5220();
  v16 = v15;
  sub_23F6916B8(&qword_256EA2610);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  v110 = (uint64_t)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  v20 = MEMORY[0x24BDAC7A8](v19);
  sub_23F77E6A4(v20, v21, v22, v23, v24, v25, v26, v27, v96);
  sub_23F6916B8(&qword_256EA2950);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v29);
  v100 = (char *)&v96 - v30;
  sub_23F6D398C();
  v31 = sub_23FB2DE8C();
  v114 = *(_QWORD *)(v31 - 8);
  v115 = v31;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v32);
  v107 = (char *)&v96 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v34);
  v106 = (char *)&v96 - v35;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v36);
  v113 = (uint64_t)&v96 - v37;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6D3D14();
  v98 = v39;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v40);
  v97 = (uint64_t)&v96 - v41;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B6580();
  v103 = v43;
  v44 = sub_23F6D398C();
  v112 = type metadata accessor for ContextProtoSpanMatchedEntity(v44);
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6B5CB8();
  MEMORY[0x24BDAC7A8](v46);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v47);
  v99 = (char *)&v96 - v48;
  sub_23F6B5664();
  v50 = MEMORY[0x24BDAC7A8](v49);
  sub_23F77E6B8(v50, v51, v52, v53, v54, v55, v56, v57, v96);
  v58 = *(_QWORD *)(v16 + 16);
  sub_23F77DCDC(MEMORY[0x24BEE4AF8]);
  sub_23F7111CC();
  v102 = v16;
  v111 = v13;
  if (v58)
  {
    sub_23F77E348();
    v108 = v59;
    v109 = v60;
    sub_23F6B6548();
    v61 = 0;
    v104 = v12;
    while (v109 != v61)
    {
      sub_23F70D654(v108 + *(_QWORD *)(v13 + 72) * v61, v14);
      sub_23F70D654(v14, v10);
      sub_23F77E63C();
      sub_23F6B568C(v10 + v62, v110);
      sub_23F77A714();
      if (v11)
      {
        sub_23F714040(v63, type metadata accessor for ContextProtoSpanMatchedEntity);
        sub_23F693E04();
        v95 = sub_23F77DB70();
        sub_23F77DB94(v95, type metadata accessor for ContextProtoSpanMatchedEntity);
        sub_23F693E04();
        goto LABEL_25;
      }
      v64 = swift_bridgeObjectRetain();
      sub_23F773E78(v64, (uint64_t)MEMORY[0x24BE573C8], (uint64_t)type metadata accessor for ContextProtoEntityMatch, (uint64_t)sub_23F711F4C, (uint64_t)EntityMatch.init(transcript:), v65, v66, v67, v96, v97);
      sub_23FB2DE68();
      sub_23F77DB68(v10);
      v68 = *(void (**)(unint64_t))(v114 + 32);
      v69 = (uint64_t)v106;
      v70 = sub_23F77E680();
      v71 = v115;
      sub_23F77E274(v70, v72);
      sub_23F77E274(v113, v69);
      sub_23F77DB68(v14);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DEDC();
        v71 = a10;
      }
      v74 = *(_QWORD *)(v71 + 16);
      v73 = *(_QWORD *)(v71 + 24);
      if (v74 >= v73 >> 1)
      {
        sub_23F77DA64(v73);
        sub_23F7111CC();
        v71 = a10;
      }
      ++v61;
      *(_QWORD *)(v71 + 16) = v74 + 1;
      v75 = sub_23F77DBA4();
      v68(v75);
      a10 = v71;
      v13 = v111;
      if (v58 == v61)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_27;
  }
  sub_23F6B6548();
LABEL_12:
  v76 = *(_QWORD *)(v102 + 16);
  if (v58 != v76)
  {
    v77 = (uint64_t)v99;
    while (v58 < v76)
    {
      sub_23F77E338();
      v79 = v78 + *(_QWORD *)(v13 + 72) * v58;
      v80 = v105;
      sub_23F77DC5C(v79, v105);
      sub_23F77DC5C(v80, v77);
      sub_23F77E63C();
      sub_23F6B568C(v77 + v81, v101);
      sub_23F77A714();
      if (v11)
      {
        sub_23F77DB94(v82, type metadata accessor for ContextProtoSpanMatchedEntity);
        sub_23F6D3508(v105, type metadata accessor for ContextProtoSpanMatchedEntity);
        sub_23F77DA7C();
        sub_23F6B6740();
        goto LABEL_25;
      }
      v83 = swift_bridgeObjectRetain();
      sub_23F773E78(v83, (uint64_t)MEMORY[0x24BE573C8], (uint64_t)type metadata accessor for ContextProtoEntityMatch, (uint64_t)sub_23F711F4C, (uint64_t)EntityMatch.init(transcript:), v84, v85, v86, v96, v97);
      v87 = v98;
      sub_23FB2DE68();
      sub_23F6D3928(v77);
      v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 32);
      v89 = v97;
      v90 = v87;
      v91 = v115;
      v88(v97, v90, v115);
      v88(v103, v89, v91);
      sub_23F6D3928(v105);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DEDC();
        v91 = a10;
      }
      v93 = *(_QWORD *)(v91 + 16);
      v92 = *(_QWORD *)(v91 + 24);
      if (v93 >= v92 >> 1)
      {
        sub_23F77DA04(v92);
        sub_23F7111CC();
        v91 = a10;
      }
      ++v58;
      *(_QWORD *)(v91 + 16) = v93 + 1;
      v94 = sub_23F77E134();
      ((void (*)(unint64_t, uint64_t))v88)(v94, v103);
      a10 = v91;
      v76 = *(_QWORD *)(v102 + 16);
      v13 = v111;
      if (v58 == v76)
        goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return;
  }
LABEL_13:
  sub_23F6B6740();
LABEL_25:
  sub_23F77E390();
  sub_23F6B5100();
}

void sub_23F774754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  sub_23F6B5220();
  v16 = v15;
  sub_23F6916B8(&qword_256EA2588);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v18);
  v104 = (uint64_t)&v100 - v19;
  v120 = sub_23F77E698();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v20);
  v115 = (uint64_t)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B6580();
  v103 = v23;
  v24 = sub_23F77E68C();
  v117 = *(_QWORD *)(v24 - 8);
  v118 = v24;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F693E0C();
  v114 = v26;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v27);
  v102 = (char *)&v100 - v28;
  sub_23F6D398C();
  v116 = *(_QWORD *)(type metadata accessor for ToolQuery.Output() - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v29);
  v111 = (char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6D3D14();
  v110 = v32;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v33);
  v121 = (uint64_t)&v100 - v34;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v35);
  v101 = (uint64_t)&v100 - v36;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v37);
  v100 = (uint64_t)&v100 - v38;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B6580();
  v106 = v40;
  v41 = sub_23F6D398C();
  type metadata accessor for ContextProtoToolQueryOutput(v41);
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B65E0();
  v44 = MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)&v100 - v45;
  MEMORY[0x24BDAC7A8](v44);
  v109 = (uint64_t)&v100 - v47;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v48);
  v108 = (uint64_t)&v100 - v49;
  v50 = *(_QWORD *)(v16 + 16);
  sub_23F77E3F4(MEMORY[0x24BEE4AF8]);
  sub_23F711F10();
  v105 = v16;
  v119 = v12;
  if (v50)
  {
    sub_23F77E338();
    v112 = v51;
    v113 = v52;
    sub_23F77DCD4();
    v53 = 0;
    v107 = v13;
    while (v113 != v53)
    {
      sub_23F77E534(v112 + *(_QWORD *)(v12 + 72) * v53, (uint64_t)v46);
      sub_23F77E534((uint64_t)v46, v14);
      sub_23F6B4F58(v14, v13, &qword_256EA2588);
      v54 = sub_23F6B5164(v13, 1, v120);
      if (v55)
      {
        sub_23F77DD64(v54, &qword_256EA2588);
        sub_23F77E630();
        sub_23F6916B8(&qword_256EA8490);
        sub_23F77D9AC();
        sub_23F77DA84();
        sub_23F6B5AD4();
        *v98 = v50;
        v98[1] = v10;
        sub_23F77D9E4();
LABEL_25:
        sub_23F6D3928(v14);
        sub_23F693DFC();
        sub_23F77DB70();
        sub_23F6D3928((uint64_t)v46);
        sub_23F693DFC();
        goto LABEL_28;
      }
      sub_23F6F594C(v13, v115, type metadata accessor for ContextProtoRetrievedTool.Definition);
      v56 = v114;
      sub_23F77E5DC(v57, v58, v59, v60, v61, v62, v63, v64, v100, v101);
      if (v11)
        goto LABEL_25;
      sub_23F77E5B8();
      v65 = v111;
      v66(v111, v56);
      sub_23F77E330(v14);
      v67 = (uint64_t)v65;
      v10 = v110;
      sub_23F77DC08(v67, v110);
      sub_23F77DC08(v10, v121);
      sub_23F77E330((uint64_t)v46);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77E014();
        v10 = a10;
      }
      v69 = *(_QWORD *)(v10 + 16);
      v68 = *(_QWORD *)(v10 + 24);
      if (v69 >= v68 >> 1)
      {
        sub_23F77DCA0(v68);
        sub_23F711F10();
        v10 = a10;
      }
      ++v53;
      *(_QWORD *)(v10 + 16) = v69 + 1;
      sub_23F77E16C();
      sub_23F6F594C(v121, v70, (uint64_t (*)(_QWORD))type metadata accessor for ToolQuery.Output);
      v12 = v119;
      v13 = v107;
      if (v50 == v53)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_30;
  }
  sub_23F77DCD4();
LABEL_13:
  v71 = v105;
  v72 = *(_QWORD *)(v105 + 16);
  if (v50 != v72)
  {
    while (v50 < v72)
    {
      v73 = v108;
      sub_23F77DA34(v71+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(_QWORD *)(v119 + 72) * v50, v108);
      v74 = v73;
      v75 = v109;
      sub_23F77DA34(v74, v109);
      v76 = v75;
      v77 = v104;
      sub_23F6B71D0(v76, v104);
      v78 = sub_23F77E1A8();
      v80 = sub_23F6B5164(v78, v79, v120);
      if (v55)
      {
        sub_23F77DC10(v80, &qword_256EA2588);
        sub_23F77E630();
        sub_23F6916B8(&qword_256EA8490);
        sub_23F77D9AC();
        sub_23F77DA84();
        sub_23F6B5AD4();
        *v99 = v50;
        v99[1] = v77;
        sub_23F77D9E4();
LABEL_27:
        sub_23F6D3928(v109);
        sub_23F6D3928(v108);
        sub_23F756640();
        sub_23F756640();
        sub_23F713F08();
        goto LABEL_28;
      }
      sub_23F6F594C(v77, v103, type metadata accessor for ContextProtoRetrievedTool.Definition);
      sub_23F77E5DC(v81, v82, v83, v84, v85, v86, v87, v88, v100, v101);
      if (v11)
        goto LABEL_27;
      sub_23F77E5B8();
      v89 = v101;
      v90 = sub_23F77E19C();
      v91(v90);
      sub_23F77DAB0(v109);
      v92 = v89;
      v93 = v100;
      sub_23F77DC08(v92, v100);
      sub_23F77DC08(v93, v106);
      sub_23F77DAB0(v108);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77E014();
        v93 = a10;
      }
      v95 = *(_QWORD *)(v93 + 16);
      v94 = *(_QWORD *)(v93 + 24);
      if (v95 >= v94 >> 1)
      {
        sub_23F77E27C(v94);
        sub_23F711F10();
        v93 = a10;
      }
      ++v50;
      *(_QWORD *)(v93 + 16) = v95 + 1;
      sub_23F77DAB8();
      sub_23F77DC08(v106, v96 + v97 * v95);
      v71 = v105;
      v72 = *(_QWORD *)(v105 + 16);
      if (v50 == v72)
        goto LABEL_14;
    }
LABEL_30:
    __break(1u);
    return;
  }
LABEL_14:
  sub_23F6B6740();
LABEL_28:
  sub_23F77E390();
  sub_23F6B5100();
}

void sub_23F774D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F773E78(a1, (uint64_t)MEMORY[0x24BE573C8], (uint64_t)type metadata accessor for ContextProtoEntityMatch, (uint64_t)sub_23F711F4C, (uint64_t)EntityMatch.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F774D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t a1))
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void (*v63)(void);
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void (*v80)(void);
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  sub_23F6B5220();
  v94 = v10;
  v16 = v15;
  sub_23F6916B8(&qword_256EA25E0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F693E0C();
  v111 = v18;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v19);
  v119 = sub_23F77DDB8((uint64_t)&v93 - v20);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F693E0C();
  v109 = v22;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v23);
  v25 = sub_23F77DBF8((uint64_t)&v93 - v24);
  v116 = *(_QWORD *)(v25 - 8);
  v117 = v25;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  v110 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v28);
  v98 = (char *)&v93 - v29;
  v30 = sub_23F6D398C();
  v31 = type metadata accessor for SpeechRequestCandidate(v30);
  v114 = *(_QWORD *)(v31 - 8);
  v115 = v31;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v32);
  v108 = (uint64_t *)((char *)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v34);
  v107 = (uint64_t)&v93 - v35;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v36);
  v120 = (uint64_t)&v93 - v37;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6D3D14();
  v97 = v39;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6D3D14();
  v96 = v41;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v42);
  v112 = (uint64_t)&v93 - v43;
  v44 = sub_23F6D398C();
  v118 = type metadata accessor for TranscriptProtoSpeechRequestCandidate(v44);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v46);
  sub_23F72E1A4();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F6D3A70();
  MEMORY[0x24BDAC7A8](v48);
  v101 = (uint64_t)&v93 - v49;
  v50 = *(_QWORD *)(v16 + 16);
  sub_23F77DA1C(MEMORY[0x24BEE4AF8]);
  sub_23F711FC4();
  v102 = v16;
  v51 = v12;
  v113 = v12;
  v95 = v11;
  if (v50)
  {
    v52 = *(_QWORD *)(v16 + 16);
    v105 = v16 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v106 = v52;
    sub_23F6B5508();
    v53 = 0;
    v103 = v50;
    v104 = v14;
    while (v106 != v53)
    {
      sub_23F77DE8C(v105 + *(_QWORD *)(v51 + 72) * v53, v13);
      sub_23F77DE8C(v13, (uint64_t)v14);
      v55 = *v14;
      v54 = v14[1];
      v56 = v111;
      sub_23F6B4F58((uint64_t)v14 + *(int *)(v118 + 20), v111, &qword_256EA25E0);
      v57 = sub_23F77E654();
      sub_23F6B5164(v57, v58, v119);
      if (v59)
      {
        v87 = sub_23F6B54F8();
        sub_23F77E660(v87, &qword_256EA25E0);
        sub_23F77E630();
        sub_23F6916B8(&qword_256EA8618);
        v88 = sub_23F77D9AC();
        sub_23F77DC54();
        sub_23F6B5AD4();
        *v89 = v88;
        v89[1] = v53;
        sub_23F77D9E4();
        sub_23F693DFC();
        sub_23F6D3928((uint64_t)v14);
        sub_23F693DFC();
        sub_23F77DB70();
        sub_23F6D3928(v13);
        sub_23F693DFC();
        goto LABEL_26;
      }
      v60 = v109;
      sub_23F6F594C(v56, v109, type metadata accessor for TranscriptProtoStatementID);
      sub_23F77DCD4();
      sub_23F6B54F8();
      sub_23FB2C74C();
      v61 = v60;
      v14 = v104;
      sub_23F6D3508(v61, type metadata accessor for TranscriptProtoStatementID);
      v62 = v108;
      *v108 = v55;
      v62[1] = v54;
      sub_23F77E5B8();
      v63();
      sub_23F6D3508((uint64_t)v14, type metadata accessor for TranscriptProtoSpeechRequestCandidate);
      v64 = (uint64_t)v62;
      v65 = v107;
      v66 = type metadata accessor for SpeechRequestCandidate;
      sub_23F77DC98(v64, v107);
      sub_23F77DC98(v65, v120);
      sub_23F6D3508(v13, type metadata accessor for TranscriptProtoSpeechRequestCandidate);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DFCC();
        v66 = a10;
      }
      v51 = v113;
      v50 = v103;
      v68 = *((_QWORD *)v66 + 2);
      v67 = *((_QWORD *)v66 + 3);
      if (v68 >= v67 >> 1)
      {
        sub_23F77E294(v67);
        sub_23F711FC4();
        v66 = a10;
      }
      ++v53;
      *((_QWORD *)v66 + 2) = v68 + 1;
      sub_23F77DBDC();
      sub_23F6F594C(v120, v69, type metadata accessor for SpeechRequestCandidate);
      if (v50 == v53)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_28;
  }
  sub_23F6B5508();
LABEL_12:
  v70 = v101;
  v71 = v102;
  sub_23F77DB88();
  v73 = v95;
  if (!v59)
  {
    while (v50 < v72)
    {
      sub_23F77DA34(v71+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v50, v70);
      sub_23F77DA34(v70, (uint64_t)v73);
      v75 = *v73;
      v74 = v73[1];
      v76 = v100;
      sub_23F6B4F58((uint64_t)v73 + *(int *)(v118 + 20), v100, &qword_256EA25E0);
      sub_23F6B5164(v76, 1, v119);
      v77 = (uint64_t)v73;
      if (v59)
      {
        v90 = sub_23F6B54F8();
        sub_23F77DD64(v90, &qword_256EA25E0);
        sub_23F77E630();
        sub_23F6916B8(&qword_256EA8618);
        v91 = sub_23F77D9AC();
        sub_23F77DC54();
        sub_23F6B5AD4();
        *v92 = v91;
        v92[1] = (uint64_t)v73;
        sub_23F77D9E4();
        sub_23F693DFC();
        sub_23F6D38A0((uint64_t)v73);
        sub_23F6D38A0(v70);
        sub_23F717D54();
        sub_23F717D54();
        sub_23F713F08();
        goto LABEL_26;
      }
      v78 = v99;
      sub_23F6F594C(v76, v99, type metadata accessor for TranscriptProtoStatementID);
      sub_23F77E584();
      sub_23F6B54F8();
      sub_23FB2C74C();
      sub_23F6D3508(v78, type metadata accessor for TranscriptProtoStatementID);
      v79 = v97;
      *v97 = v75;
      v79[1] = v74;
      sub_23F77E5B8();
      v80();
      v81 = (uint64_t *)v77;
      sub_23F77DAB0(v77);
      sub_23F77DD9C();
      sub_23F77E12C(v82, v83);
      sub_23F77E12C(v74, v112);
      v84 = v101;
      sub_23F77DAB0(v101);
      v73 = v81;
      v70 = v84;
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DFCC();
        v74 = (uint64_t)a10;
      }
      v51 = v113;
      v85 = *(_QWORD *)(v74 + 16);
      if (v85 >= *(_QWORD *)(v74 + 24) >> 1)
      {
        sub_23F711FC4();
        v74 = (uint64_t)a10;
      }
      ++v50;
      *(_QWORD *)(v74 + 16) = v85 + 1;
      sub_23F77E16C();
      sub_23F77E12C(v112, v86);
      v71 = v102;
      sub_23F77DB88();
      if (v59)
        goto LABEL_14;
    }
LABEL_28:
    __break(1u);
    return;
  }
LABEL_14:
  sub_23F6B6740();
LABEL_26:
  sub_23F6B5100();
}

void sub_23F77542C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34[4];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  sub_23F6B5220();
  v6 = sub_23F77DAA0();
  v38 = *(_QWORD *)(type metadata accessor for Candidate(v6) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  v34[1] = (uint64_t)v34 - v10;
  v11 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoCandidate(v11);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v14);
  v35 = (uint64_t)v34 - v15;
  sub_23F6B5664();
  v17 = MEMORY[0x24BDAC7A8](v16);
  sub_23F77DAF8(v17, v18, v19, v20, v21, v22, v23, v24, v34[0]);
  sub_23F77DA1C(MEMORY[0x24BEE4AF8]);
  sub_23F712000();
  sub_23F77DCC4();
  if (v3)
  {
    v25 = *(_QWORD *)(v1 + 16);
    v36 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v37 = v25;
    sub_23F6B5F1C();
    while (1)
    {
      sub_23F77E440();
      if (v26)
        break;
      sub_23F77DA3C();
      sub_23F77DB10(v5, v2);
      sub_23F77DC88();
      Candidate.init(transcript:)();
      if (v0)
      {
        sub_23F77DA7C();
        v33 = sub_23F693DFC();
        sub_23F77DB94(v33, type metadata accessor for TranscriptProtoCandidate);
        sub_23F693DFC();
        goto LABEL_27;
      }
      sub_23F77DB68(v5);
      if ((sub_23F77D9A4() & 1) == 0)
        sub_23F77DF3C();
      sub_23F77DD04();
      if (v28)
      {
        sub_23F77D9EC(v27);
        sub_23F712000();
      }
      v29 = sub_23F77D9B8();
      sub_23F6F594C(v29, v30, type metadata accessor for Candidate);
      sub_23F77E424();
      if (v26)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_29;
  }
  sub_23F6B5F1C();
LABEL_13:
  sub_23F77DB88();
  if (!v26)
  {
    while (v3 < v31)
    {
      sub_23F77D978();
      sub_23F77DA34(v1, v35);
      sub_23F77DCF4();
      Candidate.init(transcript:)();
      sub_23F77DAB0(v1);
      if (v0)
      {
        sub_23F717D54();
        sub_23F717D54();
        sub_23F77DA7C();
        goto LABEL_27;
      }
      if ((sub_23F77D93C() & 1) == 0)
        sub_23F77DF3C();
      sub_23F77DD14();
      if (v28)
      {
        sub_23F77DA04(v32);
        sub_23F712000();
      }
      sub_23F77D948();
      sub_23F77DB88();
      if (v26)
        goto LABEL_15;
    }
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  sub_23F6B6740();
LABEL_27:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F775684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t a1))
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  int v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t);
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL8 v139;
  unint64_t v140;
  char v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  void (*v153)(uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  _DWORD *v185;
  uint64_t v186;
  int *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  void (*v195)(uint64_t);
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t, uint64_t);
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(uint64_t);
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  char *v264;
  _DWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  _DWORD *v277;
  _DWORD *v278;
  uint64_t v279;
  char *v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  _QWORD *v297;
  _QWORD v298[5];
  _QWORD v299[6];

  sub_23F6B5220();
  v293 = v10;
  v16 = v15;
  sub_23F6916B8(&qword_256EA2610);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v18);
  v20 = sub_23F77DDA8((uint64_t)&v235 - v19);
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F693E0C();
  v249 = v22;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v23);
  v248 = (uint64_t)&v235 - v24;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v25);
  v280 = (char *)&v235 - v26;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F6D3D14();
  v240 = v28;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6D3D14();
  v261 = v30;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B6580();
  v292 = sub_23F77DDC8(v32);
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F693E0C();
  v247 = v34;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F6D3D14();
  v246 = v36;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v37);
  v287 = (uint64_t)&v235 - v38;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6D3D14();
  v279 = v40;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v41);
  v286 = (uint64_t)&v235 - v42;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F72E1A4();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6D3D14();
  v239 = v45;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v46);
  v271 = (uint64_t)&v235 - v47;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v48);
  sub_23F6D3D14();
  v266 = v49;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v50);
  v52 = sub_23F77DBF8((uint64_t)&v235 - v51);
  v295 = *(uint64_t **)(v52 - 8);
  v296 = v52;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v53);
  v294 = (uint64_t)&v235 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v55);
  sub_23F6D3D14();
  v289 = v56;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v57);
  sub_23F6D3D14();
  v275 = v58;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v59);
  sub_23F6B5314((uint64_t)&v235 - v60);
  v283 = sub_23F6916B8(&qword_256EA2678);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v61);
  sub_23F693E0C();
  v278 = v62;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v63);
  v290 = (int *)((char *)&v235 - v64);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v65);
  sub_23F6D3D14();
  v277 = v66;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v67);
  v265 = (_DWORD *)((char *)&v235 - v68);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v69);
  v274 = (int *)((char *)&v235 - v70);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v71);
  v264 = (char *)&v235 - v72;
  v73 = sub_23F6D398C();
  v251 = type metadata accessor for VariableSetter(v73);
  v250 = *(_QWORD *)(v251 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v74);
  sub_23F693E0C();
  v245 = v75;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v76);
  sub_23F6D3D14();
  v244 = v77;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v78);
  sub_23F6D3D14();
  v255 = v79;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v80);
  sub_23F6D3D14();
  v238 = v81;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v82);
  sub_23F6D3D14();
  v237 = v83;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v84);
  sub_23F6B6580();
  v241 = v85;
  v86 = sub_23F6D398C();
  v252 = type metadata accessor for TranscriptProtoVariableSetter(v86);
  v87 = *(_QWORD *)(v252 - 8);
  MEMORY[0x24BDAC7A8](v252);
  sub_23F693E0C();
  v263 = (uint64_t *)v88;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v89);
  sub_23F6D3D14();
  v260 = v90;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v91);
  sub_23F6D3D14();
  v256 = (uint64_t *)v92;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v93);
  sub_23F6B5314((uint64_t)&v235 - v94);
  v95 = *(_QWORD *)(v16 + 16);
  sub_23F77DCDC(MEMORY[0x24BEE4AF8]);
  sub_23F71203C();
  v282 = v20;
  v284 = v12;
  v291 = v14;
  v268 = v13;
  v257 = v95;
  if (!v95)
  {
    sub_23F6B5F1C();
LABEL_55:
    if (v257 == *(_QWORD *)(v16 + 16))
      goto LABEL_56;
    v165 = &qword_256EA2678;
    sub_23F77E614();
LABEL_58:
    if (v167 >= v166)
      goto LABEL_118;
    v281 = v167 + 1;
    sub_23F77DAD0();
    sub_23F77E1C0();
    sub_23F70D654(v168, v169);
    v170 = v87;
    v171 = v256;
    sub_23F70D654(v170, (uint64_t)v256);
    v172 = *v171;
    sub_23F6D3458(&qword_256EA15A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52140], MEMORY[0x24BE52158]);
    sub_23F6B5508();
    v173 = sub_23F77E44C();
    sub_23F78F084(v172, v298);
    v288 = v298[0];
    v286 = v298[1];
    v289 = v298[3];
    v174 = v298[4];
    v287 = (unint64_t)(v298[2] + 64) >> 6;
    v285 = v172;
    sub_23F6B5508();
    v175 = v284;
    while (1)
    {
      v294 = v173;
      if (v174)
      {
        v176 = __clz(__rbit64(v174));
        v174 &= v174 - 1;
        v290 = (int *)v174;
        v177 = v176 | (v289 << 6);
      }
      else
      {
        if (__OFADD__(v289, 1))
          goto LABEL_116;
        if (v289 + 1 >= v287)
        {
          v215 = v173;
          v216 = v175;
          v180 = v262;
          v16 = v261;
          goto LABEL_97;
        }
        sub_23F77E2D4();
        v180 = v262;
        v16 = v261;
        if (!v179)
        {
          sub_23F77E674();
          if (v114 == v115)
            goto LABEL_96;
          sub_23F77DDD8();
          if (v179)
            goto LABEL_77;
          sub_23F77E674();
          if (v114 == v115)
            goto LABEL_96;
          sub_23F77DDD8();
          if (v179)
            goto LABEL_77;
          sub_23F77E674();
          if (v114 == v115)
            goto LABEL_96;
          sub_23F77DDD8();
          if (v179)
            goto LABEL_77;
          sub_23F77E674();
          if (v114 == v115)
            goto LABEL_96;
          sub_23F77DDD8();
          if (v179)
          {
LABEL_77:
            v178 = v181;
          }
          else
          {
            if (v182 + 5 >= v287)
              goto LABEL_96;
            sub_23F77E2D4();
            if (!v179)
            {
              v213 = v289 + 7;
              while (v213 < v287)
              {
                sub_23F77E2D4();
                v213 = v214 + 1;
                if (v179)
                {
                  v178 = v213 - 1;
                  goto LABEL_78;
                }
              }
LABEL_96:
              v215 = v173;
              v216 = v175;
LABEL_97:
              swift_release();
              sub_23F77DE3C();
              sub_23F6B4F58((uint64_t)v256 + *(int *)(v252 + 20), v180, &qword_256EA2610);
              v217 = sub_23F77E654();
              v108 = sub_23F6B5164(v217, v218, v20);
              if (v151)
                goto LABEL_113;
              sub_23F77DB9C(v16, v180, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v216 + 32));
              sub_23F77DB9C(v240, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v216 + 16));
              sub_23F77DE28();
              v293 = 0;
              sub_23F6B6178(v16, *(uint64_t (**)(uint64_t, uint64_t))(v216 + 8));
              v219 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
              v220 = v239;
              v221 = v292;
              v219(v239, v13, v292);
              *v238 = v215;
              v222 = sub_23F77E360((uint64_t)&v283);
              v219(v222, v220, v221);
              sub_23F77DB60((uint64_t)v256);
              sub_23F77E1C0();
              v223 = type metadata accessor for VariableSetter;
              sub_23F77DC98(v224, v225);
              sub_23F77DC98((uint64_t)v219, v241);
              sub_23F77DB60(v254);
              if ((sub_23F77D93C() & 1) == 0)
              {
                sub_23F77DFB4();
                v223 = a10;
              }
              v227 = *((_QWORD *)v223 + 2);
              v226 = *((_QWORD *)v223 + 3);
              if (v227 >= v226 >> 1)
              {
                sub_23F77E294(v226);
                sub_23F71203C();
                v223 = a10;
              }
              *((_QWORD *)v223 + 2) = v227 + 1;
              sub_23F77DBC0();
              sub_23F6F594C(v241, v228, type metadata accessor for VariableSetter);
              v166 = *(_QWORD *)(v259 + 16);
              v167 = v281;
              v87 = v242;
              if (v281 == v166)
              {
LABEL_56:
                sub_23F6B6740();
                goto LABEL_106;
              }
              goto LABEL_58;
            }
          }
        }
LABEL_78:
        v289 = v178;
        v290 = (int *)((v179 - 1) & v179);
        v177 = __clz(__rbit64(v179)) + (v178 << 6);
      }
      v183 = *(_DWORD *)(*(_QWORD *)(v288 + 48) + 4 * v177);
      v184 = v283;
      v185 = v264;
      v186 = v175;
      (*(void (**)(char *, uint64_t, unint64_t))(v175 + 16))(&v264[*(int *)(v283 + 48)], *(_QWORD *)(v288 + 56) + *(_QWORD *)(v175 + 72) * v177, v20);
      *v185 = v183;
      v187 = v274;
      sub_23F6B4EC0((uint64_t)v185, (uint64_t)v274, v165);
      v188 = *v187;
      v189 = v272;
      sub_23F77DD90();
      v190 = *(int *)(v184 + 48);
      v191 = v265;
      v192 = (uint64_t)v265 + v190;
      *v265 = v188;
      sub_23F77E55C((uint64_t)v191 + v190, (uint64_t)v187 + v190);
      sub_23F77E55C(v267, v192);
      sub_23F77DE28();
      v293 = v174;
      if (v174)
      {
        sub_23F6B6178(v192, *(uint64_t (**)(uint64_t, uint64_t))(v186 + 8));
        ((void (*)(uint64_t, uint64_t))v295[1])(v189, v296);
        swift_bridgeObjectRelease();
        sub_23F6B4F84((uint64_t)v274, &qword_256EA2678);
        sub_23F77DE3C();
        swift_release();
        goto LABEL_105;
      }
      v193 = v165;
      sub_23F6B6178(v192, *(uint64_t (**)(uint64_t, uint64_t))(v186 + 8));
      v194 = v14;
      v195 = *(void (**)(uint64_t))(v14 + 32);
      v196 = v270;
      v197 = sub_23F6B6854();
      v195(v197);
      v198 = (void (*)(uint64_t, uint64_t, uint64_t))v295[2];
      v198(v275, v189, v296);
      sub_23F759774(v271, v196, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v194 + 16));
      v199 = v294;
      sub_23F77D9A4();
      v297 = (_QWORD *)v199;
      sub_23F78C678();
      if (__OFADD__(*(_QWORD *)(v199 + 16), (v201 & 1) == 0))
      {
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
      v202 = v200;
      v20 = v201;
      sub_23F6916B8(&qword_256EA86F0);
      if ((sub_23FB2F914() & 1) != 0)
      {
        sub_23F78C678();
        if ((v20 & 1) != (v204 & 1))
          goto LABEL_119;
        v202 = v203;
      }
      v205 = v297;
      if ((v20 & 1) != 0)
      {
        v14 = v291;
        v206 = v297[7] + *(_QWORD *)(v291 + 72) * v202;
        v207 = v292;
        sub_23F75E710(v206, v271, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v291 + 40));
      }
      else
      {
        v297[(v202 >> 6) + 8] |= 1 << v202;
        v198(v205[6] + v295[9] * v202, v275, v296);
        v208 = v205[7] + *(_QWORD *)(v291 + 72) * v202;
        v207 = v292;
        ((void (*)(uint64_t, uint64_t, uint64_t))v195)(v208, v271, v292);
        v209 = v205[2];
        v115 = __OFADD__(v209, 1);
        v210 = v209 + 1;
        if (v115)
          goto LABEL_115;
        v205[2] = v210;
        v14 = v291;
      }
      v173 = (uint64_t)v297;
      swift_bridgeObjectRelease();
      v211 = (void (*)(uint64_t, uint64_t))v295[1];
      v211(v275, v296);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v270, v207);
      v212 = sub_23F6B6854();
      ((void (*)(uint64_t))v211)(v212);
      v165 = v193;
      sub_23F6D3930((uint64_t)v274);
      sub_23F77E6EC();
      v13 = v268;
      v174 = (unint64_t)v290;
    }
  }
  v96 = *(_QWORD *)(v16 + 16);
  sub_23F77DAD0();
  v253 = v97;
  sub_23F6B5F1C();
  v276 = v11;
  sub_23F77E614();
  v236 = v96;
LABEL_3:
  if (v98 != v96)
  {
    v243 = v98 + 1;
    sub_23F77E1C0();
    sub_23F70D654(v99, v100);
    v101 = v87;
    v102 = v263;
    sub_23F70D654(v101, (uint64_t)v263);
    v103 = *v102;
    sub_23F6D3458(&qword_256EA15A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52140], MEMORY[0x24BE52158]);
    v105 = v104;
    sub_23F6B5508();
    v106 = sub_23F77E44C();
    sub_23F78F084(v103, v299);
    v281 = v299[0];
    v269 = v299[1];
    v285 = v299[3];
    v107 = v299[4];
    v273 = (unint64_t)(v299[2] + 64) >> 6;
    v258 = v103;
    v108 = sub_23F6B5508();
    v109 = v284;
    while (1)
    {
      v288 = v106;
      if (v107)
      {
        v110 = v20;
        v111 = __clz(__rbit64(v107));
        v107 &= v107 - 1;
        v112 = v111 | (v285 << 6);
        goto LABEL_26;
      }
      if (__OFADD__(v285, 1))
        goto LABEL_112;
      sub_23F77E3B0();
      if (v114 == v115)
      {
LABEL_43:
        v149 = v113;
        sub_23F77E53C();
        sub_23F77DE3C();
        sub_23F6B4F58((uint64_t)v263 + *(int *)(v252 + 20), v11, &qword_256EA2610);
        v150 = sub_23F6B5164(v11, 1, v20);
        if (v151)
        {
          sub_23F77DD24(v150, &qword_256EA2610);
          v297 = (_QWORD *)v20;
          sub_23F6916B8(&qword_256EA8628);
          v229 = sub_23F77E5E8();
          sub_23F77DC54();
          v230 = sub_23F6B5AD4();
          *v231 = v229;
          v231[1] = v16;
          v293 = v230;
          sub_23F77D9E4();
          goto LABEL_109;
        }
        v152 = v248;
        sub_23F77DB9C(v248, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 32));
        sub_23F77DB9C(v249, v152, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 16));
        sub_23F77DE28();
        v293 = v105;
        if (v105)
        {
          sub_23F6B6178(v152, *(uint64_t (**)(uint64_t, uint64_t))(v149 + 8));
LABEL_109:
          sub_23F756640();
LABEL_53:
          sub_23F6D3928((uint64_t)v263);
          sub_23F693DFC();
          sub_23F77DB70();
          sub_23F6D3928(v260);
          sub_23F693DFC();
          goto LABEL_106;
        }
        sub_23F6B6178(v152, *(uint64_t (**)(uint64_t, uint64_t))(v149 + 8));
        v153 = *(void (**)(uint64_t))(v14 + 32);
        v154 = v246;
        v155 = sub_23F72E430();
        v156 = v292;
        v153(v155);
        *v245 = v106;
        v157 = sub_23F77E360((uint64_t)&v283);
        ((void (*)(uint64_t, uint64_t, uint64_t))v153)(v157, v154, v156);
        sub_23F77DB60((uint64_t)v263);
        sub_23F77E1C0();
        v158 = type metadata accessor for VariableSetter;
        sub_23F77DC98(v159, v160);
        sub_23F77DC98(v156, v255);
        sub_23F77DB60(v260);
        if ((sub_23F77D93C() & 1) == 0)
        {
          sub_23F77DFB4();
          v158 = a10;
        }
        v161 = v243;
        v163 = *((_QWORD *)v158 + 2);
        v162 = *((_QWORD *)v158 + 3);
        v13 = v268;
        if (v163 >= v162 >> 1)
        {
          sub_23F77DA64(v162);
          sub_23F71203C();
          v158 = a10;
        }
        *((_QWORD *)v158 + 2) = v163 + 1;
        sub_23F77DBC0();
        sub_23F6F594C(v255, v164, type metadata accessor for VariableSetter);
        v98 = v161;
        v151 = v161 == v257;
        v16 = v259;
        v87 = v242;
        v11 = v276;
        v96 = v236;
        if (v151)
          goto LABEL_55;
        goto LABEL_3;
      }
      sub_23F77E3C0();
      if (!v117)
      {
        sub_23F77E0A0();
        if (v114 == v115)
          goto LABEL_43;
        sub_23F77DDD8();
        if (v117)
          goto LABEL_24;
        sub_23F77E0A0();
        if (v114 == v115)
          goto LABEL_43;
        sub_23F77DDD8();
        if (v117)
          goto LABEL_24;
        sub_23F77E0A0();
        if (v114 == v115)
          goto LABEL_43;
        sub_23F77DDD8();
        if (v117)
          goto LABEL_24;
        sub_23F77E0A0();
        if (v114 == v115)
          goto LABEL_43;
        sub_23F77DDD8();
        if (v117)
        {
LABEL_24:
          v110 = v20;
          v116 = v118;
          goto LABEL_25;
        }
        sub_23F77E3B0();
        if (v114 == v115)
          goto LABEL_43;
        sub_23F77E3C0();
        if (!v117)
        {
          do
          {
            sub_23F77E3B0();
            if (v114 == v115)
              goto LABEL_43;
            sub_23F77E3C0();
            v148 = v147 + 1;
          }
          while (!v117);
          v110 = v20;
          v116 = v148 - 1;
          goto LABEL_25;
        }
      }
      v110 = v20;
LABEL_25:
      v107 = (v117 - 1) & v117;
      v112 = __clz(__rbit64(v117)) + (v116 << 6);
      v285 = v116;
LABEL_26:
      v20 = v289;
      v119 = *(_DWORD *)(*(_QWORD *)(v281 + 48) + 4 * v112);
      v120 = v283;
      v121 = v277;
      v122 = v109;
      (*(void (**)(char *, unint64_t, unint64_t))(v109 + 16))((char *)v277 + *(int *)(v283 + 48), *(_QWORD *)(v281 + 56) + *(_QWORD *)(v109 + 72) * v112, v110);
      *v121 = v119;
      v123 = (uint64_t)v121;
      v124 = v290;
      sub_23F6B4EC0(v123, (uint64_t)v290, &qword_256EA2678);
      v125 = *v124;
      sub_23F77DD90();
      v126 = *(int *)(v120 + 48);
      v127 = v278;
      v128 = (uint64_t)v278 + v126;
      *v278 = v125;
      sub_23F77E4EC((uint64_t)v127 + v126, (uint64_t)v124 + v126);
      v129 = sub_23F77E668();
      sub_23F77E4EC(v129, v130);
      v131 = v279;
      sub_23F77DE28();
      v293 = v105;
      if (v105)
      {
        sub_23F6B563C(v128, *(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
        ((void (*)(unint64_t, uint64_t))v295[1])(v20, v296);
        swift_bridgeObjectRelease();
        sub_23F6B4F84((uint64_t)v290, &qword_256EA2678);
        sub_23F77DE3C();
        sub_23F77E53C();
        goto LABEL_53;
      }
      sub_23F6B563C(v128, *(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
      v132 = v291;
      v133 = v286;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v291 + 32))(v286, v131, v292);
      v134 = (void (*)(uint64_t))v295[2];
      v135 = sub_23F77E19C();
      v134(v135);
      sub_23F6B633C(v287, v133, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 16));
      v136 = (_QWORD *)v288;
      swift_isUniquelyReferenced_nonNull_native();
      v297 = v136;
      sub_23F78C678();
      v138 = v136[2];
      v139 = (v137 & 1) == 0;
      v16 = v138 + v139;
      if (__OFADD__(v138, v139))
      {
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        sub_23F77E660(v108, &qword_256EA2610);
        v297 = (_QWORD *)v20;
        sub_23F6916B8(&qword_256EA8628);
        v232 = sub_23F77E5E8();
        sub_23F77DC54();
        v233 = sub_23F6B5AD4();
        *v234 = v232;
        v234[1] = v16;
        v293 = v233;
        sub_23F77D9E4();
        sub_23F6B644C();
LABEL_105:
        sub_23F6D3928((uint64_t)v256);
        sub_23F6D3928(v254);
        sub_23F693DFC();
        sub_23F693DFC();
        sub_23F713F08();
LABEL_106:
        sub_23F6B5100();
        return;
      }
      v20 = v108;
      v14 = v137;
      sub_23F6916B8(&qword_256EA86F0);
      if ((sub_23FB2F914() & 1) != 0)
      {
        sub_23F78C678();
        if ((v14 & 1) != (v141 & 1))
          goto LABEL_119;
        v20 = v140;
      }
      v142 = v297;
      if ((v14 & 1) != 0)
      {
        v143 = sub_23F77E548();
        sub_23F77DD54(v143, v287, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40));
      }
      else
      {
        v297[(v20 >> 6) + 8] |= 1 << v20;
        ((void (*)(unint64_t, uint64_t, uint64_t))v134)(v142[6] + v295[9] * v20, v294, v296);
        v144 = sub_23F77E548();
        v108 = sub_23F77E4EC(v144, v287);
        v145 = v142[2];
        v115 = __OFADD__(v145, 1);
        v146 = v145 + 1;
        if (v115)
          goto LABEL_111;
        v142[2] = v146;
      }
      v106 = (uint64_t)v297;
      swift_bridgeObjectRelease();
      v16 = v295[1];
      sub_23F77DD5C(v294);
      sub_23F6B563C(v286, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
      sub_23F77DD5C(v289);
      sub_23F6B4F84((uint64_t)v290, &qword_256EA2678);
      sub_23F77E6EC();
      v11 = v276;
    }
  }
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  sub_23FB2FBD8();
  __break(1u);
}

void sub_23F776A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, _QWORD);
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  unint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  unint64_t *v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;

  sub_23F6B5220();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  sub_23F6916B8(&qword_256EA84C8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F693E0C();
  v161 = v29;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B6580();
  v149 = v31;
  v32 = sub_23F6D398C();
  v171 = type metadata accessor for ContextProtoRetrievedContext(v32);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F693E0C();
  v160 = v34;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v35);
  v147 = (char *)&v146 - v36;
  sub_23F6D398C();
  v37 = sub_23FB2DE08();
  v165 = *(_QWORD *)(v37 - 8);
  v166 = v37;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F693E0C();
  v159 = v39;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6B6580();
  sub_23F6B5314(v41);
  sub_23F6916B8(&qword_256EA25E0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6B6580();
  v172 = sub_23F77DDB8(v44);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v46);
  sub_23F6B6580();
  v48 = sub_23F77DBF8(v47);
  v168 = *(_QWORD *)(v48 - 8);
  v169 = v48;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v49);
  v174 = (char *)&v146 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v51);
  v153 = (uint64_t)&v146 - v52;
  v53 = sub_23F6D398C();
  v54 = type metadata accessor for RetrievedContextStatement(v53);
  v163 = *(_QWORD *)(v54 - 8);
  v164 = v54;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v55);
  sub_23F693E0C();
  v156 = v56;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v57);
  v155 = (uint64_t)&v146 - v58;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v59);
  v173 = (uint64_t)&v146 - v60;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v61);
  sub_23F6B6580();
  v152 = v62;
  v63 = sub_23F6D398C();
  v170 = type metadata accessor for TranscriptProtoRetrievedContextStatement(v63);
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v64);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v65);
  v175 = (uint64_t)&v146 - v66;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v67);
  v162 = (uint64_t)&v146 - v68;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v69);
  sub_23F6B5314((uint64_t)&v146 - v70);
  v71 = *(_QWORD *)(v27 + 16);
  sub_23F77E3F4(MEMORY[0x24BEE4AF8]);
  sub_23F7120B4();
  v151 = v27;
  v167 = v20;
  if (v71)
  {
    sub_23F77DAD0();
    v157 = v72;
    v158 = v73;
    sub_23F6B5F1C();
    v74 = 0;
    while (v158 != v74)
    {
      v75 = v175;
      sub_23F77DB10(v157 + *(_QWORD *)(v20 + 72) * v74, v175);
      v76 = sub_23F77E19C();
      sub_23F77DB10(v76, v77);
      sub_23F6B4F58(v23, v21, &qword_256EA25E0);
      v78 = sub_23F77E3D0();
      v80 = sub_23F6B5164(v78, v79, v172);
      if (v81)
      {
        sub_23F77E3DC(v80, &qword_256EA25E0);
        v176 = v172;
        sub_23F6916B8(&qword_256EA8618);
        sub_23F77D9AC();
        sub_23F77DA84();
        sub_23F6B5AD4();
        *v138 = v71;
        v138[1] = v75;
        v139 = sub_23F77D9E4();
        sub_23F77DB94(v139, type metadata accessor for TranscriptProtoRetrievedContextStatement);
        goto LABEL_31;
      }
      v82 = sub_23F77E608();
      sub_23F6F594C(v82, v83, type metadata accessor for TranscriptProtoStatementID);
      v84 = *v22;
      sub_23F77E600();
      sub_23FB2C74C();
      sub_23F77DB68((uint64_t)v22);
      v85 = v161;
      sub_23F6B4F58(v23 + *(int *)(v170 + 20), v161, &qword_256EA84C8);
      v86 = sub_23F6B5164(v85, 1, v171);
      if (v81)
      {
        sub_23F77DC10(v86, &qword_256EA84C8);
        v176 = v171;
        sub_23F6916B8(&qword_256EA84D0);
        sub_23F77D9AC();
        sub_23F77DA84();
        sub_23F6B5AD4();
        *v140 = v71;
        v140[1] = v85;
        v96 = sub_23F77D9E4();
LABEL_30:
        sub_23F77DB94(v96, type metadata accessor for TranscriptProtoRetrievedContextStatement);
        (*(void (**)(char *, uint64_t))(v168 + 8))(v174, v169);
LABEL_31:
        sub_23F693E04();
        v141 = sub_23F77DB70();
        sub_23F77E244(v141, type metadata accessor for TranscriptProtoRetrievedContextStatement);
        sub_23F693E04();
        goto LABEL_37;
      }
      sub_23F6F594C(v85, v160, type metadata accessor for ContextProtoRetrievedContext);
      v87 = v159;
      sub_23F77E5D0(v88, v89, v90, v91, v92, v93, v94, v95, v146, (int)v147, SWORD2(v147), SBYTE6(v147), SHIBYTE(v147), (uint64_t)v148, v149, v150, v151, v152, v153,
        v154,
        v155,
        v156,
        v157);
      if (v84)
        goto LABEL_30;
      v97 = v156;
      (*(void (**)(uint64_t, char *, uint64_t))(v168 + 32))(v156, v174, v169);
      v98 = sub_23F77E40C();
      v99(v98, v87);
      sub_23F77DB68(v23);
      sub_23F77DD9C();
      sub_23F77DC08(v100, v101);
      sub_23F77DC08(v97, v173);
      sub_23F77DB68(v175);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DEAC();
        v97 = a10;
      }
      v103 = *(_QWORD *)(v97 + 16);
      v102 = *(_QWORD *)(v97 + 24);
      if (v103 >= v102 >> 1)
      {
        sub_23F77DCA0(v102);
        sub_23F7120B4();
        v97 = a10;
      }
      ++v74;
      *(_QWORD *)(v97 + 16) = v103 + 1;
      sub_23F77DBDC();
      sub_23F6F594C(v173, v104, type metadata accessor for RetrievedContextStatement);
      v20 = v167;
      if (v71 == v74)
        goto LABEL_14;
    }
    __break(1u);
LABEL_39:
    __break(1u);
  }
  else
  {
    sub_23F6B5F1C();
LABEL_14:
    sub_23F77E700();
    if (!v81)
    {
      v106 = v148;
      while (1)
      {
        if (v71 >= v105)
          goto LABEL_39;
        sub_23F77DAD0();
        v109 = v154;
        sub_23F77DB78(v108 + *(_QWORD *)(v107 + 72) * v71, v154);
        sub_23F77DB78(v109, v162);
        sub_23F77DD9C();
        sub_23F6B71D0(v110, v111);
        v112 = sub_23F77E1A8();
        v114 = sub_23F6B5164(v112, v113, v172);
        if (v81)
          break;
        sub_23F77E380();
        v115 = *v106;
        v116 = *((_QWORD *)v106 + 1);
        sub_23F77E1FC();
        v117 = v162;
        sub_23FB2C74C();
        sub_23F77E330((uint64_t)v106);
        sub_23F77DD9C();
        sub_23F6B4F58(v118, v119, &qword_256EA84C8);
        v120 = sub_23F6B5164(v116, 1, v171);
        if (v81)
        {
          sub_23F77DC10(v120, &qword_256EA84C8);
          v176 = v171;
          sub_23F6916B8(&qword_256EA84D0);
          sub_23F77D9AC();
          sub_23F77DA84();
          sub_23F6B5AD4();
          *v144 = v71;
          v144[1] = v116;
          sub_23F77D9E4();
          v145 = v117;
          goto LABEL_35;
        }
        sub_23F77DD9C();
        sub_23F6F594C(v121, v122, type metadata accessor for ContextProtoRetrievedContext);
        v123 = v146;
        sub_23F77E5D0(v124, v125, v126, v127, v128, v129, v130, v131, v146, (int)v147, SWORD2(v147), SBYTE6(v147), SHIBYTE(v147), (uint64_t)v148, v149, v150, v151, v152, v153,
          v154,
          v155,
          v156,
          v157);
        if (v115)
        {
          v145 = v162;
LABEL_35:
          sub_23F6D3508(v145, type metadata accessor for TranscriptProtoRetrievedContextStatement);
          sub_23F77E23C(*(uint64_t (**)(_QWORD))(v168 + 8));
LABEL_36:
          sub_23F77E0D4(type metadata accessor for TranscriptProtoRetrievedContextStatement, (uint64_t)&a17);
          sub_23F6B5908();
          sub_23F6B5908();
          sub_23F713F08();
          goto LABEL_37;
        }
        sub_23F77DB80(v162);
        v132 = sub_23F77E324();
        sub_23F6B6344(v132, v133);
        v134 = sub_23F77E40C();
        v135(v134, v123);
        sub_23F77DB80(v154);
        if ((sub_23F77D93C() & 1) == 0)
        {
          sub_23F77DEAC();
          v116 = a10;
        }
        v136 = *(_QWORD *)(v116 + 16);
        if (v136 >= *(_QWORD *)(v116 + 24) >> 1)
        {
          sub_23F7120B4();
          v116 = a10;
        }
        ++v71;
        *(_QWORD *)(v116 + 16) = v136 + 1;
        sub_23F77DBC0();
        sub_23F6F594C(v152, v137, type metadata accessor for RetrievedContextStatement);
        sub_23F77E700();
        if (v81)
          goto LABEL_16;
      }
      sub_23F77DC10(v114, &qword_256EA25E0);
      v176 = v172;
      sub_23F6916B8(&qword_256EA8618);
      sub_23F77D9AC();
      sub_23F77DA84();
      sub_23F6B5AD4();
      *v142 = v71;
      v142[1] = v109;
      v143 = sub_23F77D9E4();
      sub_23F77DB94(v143, type metadata accessor for TranscriptProtoRetrievedContextStatement);
      goto LABEL_36;
    }
LABEL_16:
    sub_23F6B6740();
LABEL_37:
    sub_23F6B5100();
  }
}

void sub_23F777260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  sub_23F6B5220();
  v16 = sub_23F77DAA0();
  type metadata accessor for TranscriptProtoQueryResults(v16);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F77DA54();
  MEMORY[0x24BDAC7A8](v19);
  v49 = (uint64_t)&v47 - v20;
  sub_23F6B5664();
  v22 = MEMORY[0x24BDAC7A8](v21);
  sub_23F77E478(v22, v23, v24, v25, v26, v27, v28, v29, v47);
  sub_23F77DAE0(MEMORY[0x24BEE4AF8]);
  sub_23F7120F0();
  v47 = v11;
  if (v12)
  {
    v30 = *(_QWORD *)(v11 + 16);
    v51 = v11 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v52 = v30;
    sub_23F6B5F1C();
    v50 = v15;
    while (v52)
    {
      v31 = sub_23F77E4D8();
      sub_23F77DA34(v31, v32);
      v33 = sub_23F77E608();
      sub_23F77DA34(v33, v34);
      swift_bridgeObjectRetain();
      sub_23F77542C();
      sub_23F77DAB0(v14);
      if (v10)
      {
        sub_23F693DFC();
        v46 = sub_23F77DB70();
        sub_23F72E404(v46, type metadata accessor for TranscriptProtoQueryResults);
        sub_23F693DFC();
        goto LABEL_27;
      }
      sub_23F77DAB0(v13);
      if ((sub_23F77D93C() & 1) == 0)
        sub_23F77DF84();
      sub_23F77E2B4();
      if (v36)
      {
        sub_23F77DA64(v35);
        sub_23F7120F0();
      }
      sub_23F77E4A0();
      v15 = v50;
      if (v37)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_29;
  }
  sub_23F6B5F1C();
LABEL_13:
  v38 = v47;
  sub_23F77E218();
  if (!v37)
  {
    while (v12 < v39)
    {
      v40 = v48;
      sub_23F77DB78(v38+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v12, v48);
      v41 = v49;
      sub_23F77DB78(v40, v49);
      swift_bridgeObjectRetain();
      sub_23F77542C();
      v43 = v42;
      sub_23F77DB80(v41);
      sub_23F77DB80(v40);
      if (v10)
      {
        sub_23F6B644C();
        sub_23F6B644C();
        sub_23F77DA7C();
        goto LABEL_27;
      }
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DF84();
        v41 = a10;
      }
      v45 = *(_QWORD *)(v41 + 16);
      v44 = *(_QWORD *)(v41 + 24);
      if (v45 >= v44 >> 1)
      {
        sub_23F77D9EC(v44);
        sub_23F7120F0();
        v41 = a10;
      }
      ++v12;
      *(_QWORD *)(v41 + 16) = v45 + 1;
      *(_QWORD *)(v41 + 8 * v45 + 32) = v43;
      sub_23F77E218();
      if (v37)
        goto LABEL_15;
    }
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  sub_23F6B6740();
LABEL_27:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F7774C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34[4];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  sub_23F6B5220();
  v6 = sub_23F77DAA0();
  v38 = *(_QWORD *)(type metadata accessor for StatementResult(v6) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  v34[1] = (uint64_t)v34 - v10;
  v11 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoStatementResult(v11);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v14);
  v35 = (uint64_t)v34 - v15;
  sub_23F6B5664();
  v17 = MEMORY[0x24BDAC7A8](v16);
  sub_23F77DAF8(v17, v18, v19, v20, v21, v22, v23, v24, v34[0]);
  sub_23F77DA1C(MEMORY[0x24BEE4AF8]);
  sub_23F712158();
  sub_23F77DCC4();
  if (v3)
  {
    v25 = *(_QWORD *)(v1 + 16);
    v36 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v37 = v25;
    sub_23F6B5F1C();
    while (1)
    {
      sub_23F77E440();
      if (v26)
        break;
      sub_23F77DA3C();
      sub_23F77DB10(v5, v2);
      sub_23F77DC88();
      StatementResult.init(transcript:)();
      if (v0)
      {
        sub_23F77DA7C();
        v33 = sub_23F693DFC();
        sub_23F77DB94(v33, type metadata accessor for TranscriptProtoStatementResult);
        sub_23F693DFC();
        goto LABEL_27;
      }
      sub_23F77DB68(v5);
      if ((sub_23F77D9A4() & 1) == 0)
        sub_23F77DF54();
      sub_23F77DD04();
      if (v28)
      {
        sub_23F77D9EC(v27);
        sub_23F712158();
      }
      v29 = sub_23F77D9B8();
      sub_23F6F594C(v29, v30, type metadata accessor for StatementResult);
      sub_23F77E424();
      if (v26)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_29;
  }
  sub_23F6B5F1C();
LABEL_13:
  sub_23F77DB88();
  if (!v26)
  {
    while (v3 < v31)
    {
      sub_23F77D978();
      sub_23F77DA34(v1, v35);
      sub_23F77DCF4();
      StatementResult.init(transcript:)();
      sub_23F77DAB0(v1);
      if (v0)
      {
        sub_23F717D54();
        sub_23F717D54();
        sub_23F77DA7C();
        goto LABEL_27;
      }
      if ((sub_23F77D93C() & 1) == 0)
        sub_23F77DF54();
      sub_23F77DD14();
      if (v28)
      {
        sub_23F77DA04(v32);
        sub_23F712158();
      }
      sub_23F77D948();
      sub_23F77DB88();
      if (v26)
        goto LABEL_15;
    }
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  sub_23F6B6740();
LABEL_27:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F777718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34[4];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  sub_23F6B5220();
  v6 = sub_23F77DAA0();
  v38 = *(_QWORD *)(type metadata accessor for ParameterQuery(v6) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  v34[1] = (uint64_t)v34 - v10;
  v11 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoParameterQuery(v11);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v14);
  v35 = (uint64_t)v34 - v15;
  sub_23F6B5664();
  v17 = MEMORY[0x24BDAC7A8](v16);
  sub_23F77DAF8(v17, v18, v19, v20, v21, v22, v23, v24, v34[0]);
  sub_23F77DA1C(MEMORY[0x24BEE4AF8]);
  sub_23F712194();
  sub_23F77DCC4();
  if (v3)
  {
    v25 = *(_QWORD *)(v1 + 16);
    v36 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v37 = v25;
    sub_23F6B5F1C();
    while (1)
    {
      sub_23F77E440();
      if (v26)
        break;
      sub_23F77DA3C();
      sub_23F77DB10(v5, v2);
      sub_23F77DC88();
      ParameterQuery.init(transcript:)();
      if (v0)
      {
        sub_23F77DA7C();
        v33 = sub_23F693DFC();
        sub_23F77DB94(v33, type metadata accessor for TranscriptProtoParameterQuery);
        sub_23F693DFC();
        goto LABEL_27;
      }
      sub_23F77DB68(v5);
      if ((sub_23F77D9A4() & 1) == 0)
        sub_23F77DEC4();
      sub_23F77DD04();
      if (v28)
      {
        sub_23F77D9EC(v27);
        sub_23F712194();
      }
      v29 = sub_23F77D9B8();
      sub_23F6F594C(v29, v30, type metadata accessor for ParameterQuery);
      sub_23F77E424();
      if (v26)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_29;
  }
  sub_23F6B5F1C();
LABEL_13:
  sub_23F77DB88();
  if (!v26)
  {
    while (v3 < v31)
    {
      sub_23F77D978();
      sub_23F77DA34(v1, v35);
      sub_23F77DCF4();
      ParameterQuery.init(transcript:)();
      sub_23F77DAB0(v1);
      if (v0)
      {
        sub_23F717D54();
        sub_23F717D54();
        sub_23F77DA7C();
        goto LABEL_27;
      }
      if ((sub_23F77D93C() & 1) == 0)
        sub_23F77DEC4();
      sub_23F77DD14();
      if (v28)
      {
        sub_23F77DA04(v32);
        sub_23F712194();
      }
      sub_23F77D948();
      sub_23F77DB88();
      if (v26)
        goto LABEL_15;
    }
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  sub_23F6B6740();
LABEL_27:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F777970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34[4];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  sub_23F6B5220();
  v6 = sub_23F77DAA0();
  v38 = *(_QWORD *)(type metadata accessor for ProgramStatement(v6) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  v34[1] = (uint64_t)v34 - v10;
  v11 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoProgramStatement(v11);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v14);
  v35 = (uint64_t)v34 - v15;
  sub_23F6B5664();
  v17 = MEMORY[0x24BDAC7A8](v16);
  sub_23F77DAF8(v17, v18, v19, v20, v21, v22, v23, v24, v34[0]);
  sub_23F77DA1C(MEMORY[0x24BEE4AF8]);
  sub_23F711244();
  sub_23F77DCC4();
  if (v3)
  {
    v25 = *(_QWORD *)(v1 + 16);
    v36 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v37 = v25;
    sub_23F6B5F1C();
    while (1)
    {
      sub_23F77E440();
      if (v26)
        break;
      sub_23F77DA3C();
      sub_23F77DB10(v5, v2);
      sub_23F77DC88();
      ProgramStatement.init(transcript:)();
      if (v0)
      {
        sub_23F77DA7C();
        v33 = sub_23F693DFC();
        sub_23F77DB94(v33, type metadata accessor for TranscriptProtoProgramStatement);
        sub_23F693DFC();
        goto LABEL_27;
      }
      sub_23F77DB68(v5);
      if ((sub_23F77D9A4() & 1) == 0)
        sub_23F77DFE4();
      sub_23F77DD04();
      if (v28)
      {
        sub_23F77D9EC(v27);
        sub_23F711244();
      }
      v29 = sub_23F77D9B8();
      sub_23F6F594C(v29, v30, type metadata accessor for ProgramStatement);
      sub_23F77E424();
      if (v26)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_29;
  }
  sub_23F6B5F1C();
LABEL_13:
  sub_23F77DB88();
  if (!v26)
  {
    while (v3 < v31)
    {
      sub_23F77D978();
      sub_23F77DA34(v1, v35);
      sub_23F77DCF4();
      ProgramStatement.init(transcript:)();
      sub_23F77DAB0(v1);
      if (v0)
      {
        sub_23F717D54();
        sub_23F717D54();
        sub_23F77DA7C();
        goto LABEL_27;
      }
      if ((sub_23F77D93C() & 1) == 0)
        sub_23F77DFE4();
      sub_23F77DD14();
      if (v28)
      {
        sub_23F77DA04(v32);
        sub_23F711244();
      }
      sub_23F77D948();
      sub_23F77DB88();
      if (v26)
        goto LABEL_15;
    }
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  sub_23F6B6740();
LABEL_27:
  sub_23F77DA90();
  sub_23F6B5100();
}

void sub_23F777BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t);
  uint64_t v151;
  uint64_t (*v152)(uint64_t, uint64_t, _QWORD);
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(_QWORD);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  void (*v194)(_QWORD, char *, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, _QWORD);
  uint64_t v198;
  uint64_t (*v199)(uint64_t, uint64_t, _QWORD);
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (**v207)(uint64_t);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t *v227;
  _QWORD v228[3];
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276[2];
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;

  sub_23F6B5220();
  a19 = v25;
  a20 = v26;
  v285 = v20;
  v28 = v27;
  sub_23F6916B8(&qword_256EA2610);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F693E0C();
  v253 = v30;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B6580();
  v33 = sub_23F77DDA8(v32);
  v268 = *(_QWORD *)(v33 - 8);
  v269 = v33;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F693E0C();
  v250 = v35;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v36);
  v249 = (char *)v228 - v37;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6D3D14();
  v231 = v39;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6B6580();
  v267 = sub_23F77DDC8(v41);
  v266 = *(_QWORD *)(v267 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F693E0C();
  v248 = v43;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v44);
  v247 = (char *)v228 - v45;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v46);
  v229 = (char *)v228 - v47;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v48);
  sub_23F6B6580();
  sub_23F6B5314(v49);
  sub_23F6916B8(&qword_256EA2E00);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v50);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F6B6580();
  v53 = sub_23F77E314(v52);
  v270 = *(_QWORD *)(v53 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v54);
  sub_23F693E0C();
  v255 = v55;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v56);
  v254 = (uint64_t)v228 - v57;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v58);
  sub_23F6D3D14();
  v234 = v59;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v60);
  sub_23F6B6580();
  v62 = sub_23F77E2F4(v61);
  v271 = *(_QWORD *)(v62 - 8);
  v272 = v62;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v63);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v64);
  v281 = (char *)v228 - v65;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v66);
  sub_23F6D3D14();
  v232 = v67;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v68);
  sub_23F6B5314((uint64_t)v228 - v69);
  sub_23F6916B8(&qword_256EA84B8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v70);
  sub_23F693E0C();
  v257 = v71;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v72);
  sub_23F6B6580();
  v74 = sub_23F77E2E4(v73);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v75);
  v284 = (uint64_t)v228 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v77);
  v264 = sub_23F77E304((uint64_t)v228 - v78);
  v263 = *(_QWORD *)(v264 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v79);
  sub_23F693E0C();
  v246 = v80;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v81);
  sub_23F6B6580();
  sub_23F6B5314(v82);
  sub_23F6916B8(&qword_256EA25E0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v83);
  v259 = (char *)v228 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v85);
  sub_23F6B6580();
  v276[0] = sub_23F77DDB8(v86);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v87);
  sub_23F693E0C();
  v256 = v88;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v89);
  v91 = sub_23F77DBF8((uint64_t)v228 - v90);
  v273 = *(_QWORD *)(v91 - 8);
  v274 = v91;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v92);
  v282 = (char *)v228 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v94);
  sub_23F6B6580();
  v243 = v95;
  v96 = sub_23F6D398C();
  v262 = type metadata accessor for DynamicEnumerationEntityStatement(v96);
  v261 = *(_QWORD *)(v262 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v97);
  v280 = (uint64_t)v228 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v99);
  sub_23F6B6580();
  v240 = v100;
  v101 = sub_23F6D398C();
  v275 = type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement(v101);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v102);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v103);
  v283 = (uint64_t)v228 - v104;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v105);
  sub_23F6D3D14();
  v239 = v106;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v107);
  sub_23F6B5314((uint64_t)v228 - v108);
  v109 = *(_QWORD *)(v28 + 16);
  a10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v110 = &a10;
  sub_23F712204();
  v241 = v28;
  v265 = v53;
  v277 = v74;
  v260 = v24;
  v279 = v109;
  if (v109)
  {
    v245 = v21;
    v252 = *(_QWORD *)(v28 + 16);
    v251 = v28 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    sub_23F6B90D8();
    v111 = 0;
    v112 = v74;
    v113 = (uint64_t)v259;
    v278 = v23;
    while (v252 != v111)
    {
      sub_23F77E6E0();
      sub_23F77DE8C(v114, v115);
      sub_23F77DE8C((uint64_t)v110, v23);
      sub_23F6B4F58(v23, v113, &qword_256EA25E0);
      v116 = sub_23F6B6468();
      v118 = sub_23F6B5164(v116, v117, v276[0]);
      if (v119)
      {
        sub_23F6B6034(v118, &qword_256EA25E0);
        v286 = v276[0];
        sub_23F6916B8(&qword_256EA8618);
        sub_23F77D9AC();
        sub_23F77DA84();
        v203 = sub_23F6B5AD4();
        *v204 = v53;
        v204[1] = (uint64_t)v110;
        v285 = v203;
        v205 = sub_23F77D9E4();
        sub_23F72E404(v205, type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement);
        goto LABEL_41;
      }
      v120 = v113;
      v121 = v256;
      sub_23F77E2AC(v120, v256);
      v122 = *(_QWORD *)(v121 + 8);
      sub_23F77E1FC();
      sub_23F77E24C();
      sub_23F6D3928(v121);
      sub_23F77DD9C();
      sub_23F6B4F58(v123, v124, &qword_256EA84B8);
      v125 = sub_23F6B5164(v122, 1, v112);
      if (v119)
      {
        sub_23F77DC10(v125, &qword_256EA84B8);
        v286 = v112;
        sub_23F6916B8(&qword_256EA84C0);
        sub_23F77D9AC();
        sub_23F77DA84();
        v206 = sub_23F6B5AD4();
        *v207 = type metadata accessor for TranscriptProtoStatementID;
        v207[1] = (uint64_t (*)(uint64_t))v122;
        v285 = v206;
        v208 = sub_23F77D9E4();
        sub_23F72E404(v208, type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement);
        sub_23F77E104(v273);
        goto LABEL_41;
      }
      v126 = v284;
      sub_23F6F594C(v122, v284, type metadata accessor for ContextProtoDynamicEnumerationEntity);
      v127 = *(_QWORD *)(v126 + 8);
      sub_23F6B4F58(v126 + *(int *)(v112 + 20), v22, &qword_256EA2E00);
      v128 = sub_23F77DCB8();
      sub_23F6B5164(v128, v129, v53);
      if (v119)
      {
        v209 = sub_23F6B54F8();
        sub_23F77DD64(v209, &qword_256EA2E00);
        v286 = v53;
        sub_23F6916B8(&qword_256EA8620);
        sub_23F77D9AC();
        sub_23F77DB40();
        v210 = sub_23F6B5AD4();
        *v211 = v53;
        v211[1] = v111;
        v285 = v210;
        v212 = sub_23F77D9E4();
        sub_23F77E5B0(v212, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        v213 = sub_23F693DFC();
        goto LABEL_40;
      }
      v130 = v270;
      v131 = v254;
      sub_23F759774(v254, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v270 + 32));
      v132 = sub_23F77E324();
      sub_23F759774(v132, v131, v133);
      v276[1] = v127;
      sub_23F6B5F1C();
      v134 = v245;
      v135 = v285;
      sub_23FB2ED50();
      v285 = v135;
      if (v135)
      {
        v214 = sub_23F6B56E0(v131, *(uint64_t (**)(uint64_t, uint64_t))(v130 + 8));
        sub_23F77E5B0(v214, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        v213 = swift_bridgeObjectRelease();
        goto LABEL_40;
      }
      sub_23F6B56E0(v131, *(uint64_t (**)(uint64_t, uint64_t))(v130 + 8));
      sub_23F77E508();
      v136(v281, v134);
      v137 = v277;
      sub_23F77E1C0();
      sub_23F6B4F58(v138, v139, &qword_256EA2610);
      v140 = sub_23F77E654();
      v141 = v269;
      v143 = sub_23F6B5164(v140, v142, v269);
      if (v119)
      {
        sub_23F77E660(v143, &qword_256EA2610);
        v286 = v141;
        sub_23F6916B8(&qword_256EA8628);
        sub_23F77D9AC();
        sub_23F77DB40();
        v215 = sub_23F6B5AD4();
        *v216 = v53;
        v216[1] = v111;
        v285 = v215;
        sub_23F77D9E4();
        goto LABEL_39;
      }
      v144 = v137;
      v145 = v22;
      v146 = v53;
      v147 = v268;
      (*(void (**)(char *, uint64_t, uint64_t))(v268 + 32))(v249, v146, v141);
      sub_23F77E0DC(v250, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 16));
      v148 = v285;
      sub_23FB2ED2C();
      v285 = v148;
      if (v148)
      {
        sub_23F77E4B8();
LABEL_39:
        v217 = swift_bridgeObjectRelease();
        sub_23F77E5B0(v217, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        v213 = (*(uint64_t (**)(char *, uint64_t))(v271 + 8))(v281, v272);
LABEL_40:
        sub_23F72E404(v213, type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement);
        sub_23F77E104(v273);
LABEL_41:
        sub_23F693E04();
        sub_23F77DB70();
        sub_23F6D3508(v283, type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement);
        sub_23F693E04();
        goto LABEL_53;
      }
      sub_23F77E4B8();
      sub_23F77E5C4();
      v149 = sub_23F6B5994();
      v150(v149);
      v110 = v246;
      sub_23F77E714();
      sub_23F6D3508(v284, type metadata accessor for ContextProtoDynamicEnumerationEntity);
      sub_23F77DB60(v278);
      (*(void (**)(uint64_t, char *, uint64_t))(v273 + 32))(v280, v282, v274);
      sub_23F77E5C4();
      sub_23F77E5A4(v151, (uint64_t)v110, v152);
      sub_23F77DB60(v283);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DF0C();
        v110 = a10;
      }
      v53 = v265;
      v112 = v144;
      v113 = (uint64_t)v259;
      v153 = v110[2];
      if (v153 >= v110[3] >> 1)
      {
        sub_23F77DE74();
        v110 = a10;
      }
      ++v111;
      v110[2] = v153 + 1;
      sub_23F77DAB8();
      sub_23F6F594C(v280, v154 + v155 * v153, type metadata accessor for DynamicEnumerationEntityStatement);
      v22 = v145;
      v23 = v278;
      if (v279 == v111)
        goto LABEL_17;
    }
    __break(1u);
LABEL_55:
    __break(1u);
  }
  else
  {
    v110 = a10;
    sub_23F6B90D8();
LABEL_17:
    v156 = *(_QWORD *)(v241 + 16);
    v157 = v279;
    if (v279 != v156)
    {
      v158 = v238;
      v159 = v237;
      v160 = v239;
      v161 = v236;
      while (1)
      {
        if (v157 >= v156)
          goto LABEL_55;
        sub_23F77DAD0();
        sub_23F77DD9C();
        sub_23F77DE8C(v162, v163);
        sub_23F77DE8C((uint64_t)v110, v160);
        sub_23F6B4F58(v160, v161, &qword_256EA25E0);
        v164 = sub_23F77DCB8();
        v166 = sub_23F6B5164(v164, v165, v276[0]);
        if (v119)
          break;
        v279 = v157;
        v167 = v235;
        sub_23F6F594C(v161, v235, type metadata accessor for TranscriptProtoStatementID);
        v168 = *(_QWORD *)(v167 + 8);
        sub_23F77E1FC();
        sub_23F77E24C();
        v169 = sub_23F77E46C();
        sub_23F6D3508(v169, v170);
        sub_23F77DD9C();
        sub_23F6B4F58(v171, v172, &qword_256EA84B8);
        v173 = sub_23F77E1A8();
        v174 = v277;
        v176 = sub_23F6B5164(v173, v175, v277);
        if (v119)
        {
          sub_23F77DC10(v176, &qword_256EA84B8);
          v286 = v174;
          sub_23F6916B8(&qword_256EA84C0);
          sub_23F77D9AC();
          sub_23F77DA84();
          v220 = sub_23F6B5AD4();
          *v221 = v53;
          v221[1] = v168;
          v285 = v220;
          sub_23F77D9E4();
          v222 = v160;
          goto LABEL_51;
        }
        v177 = v258;
        sub_23F6F594C(v168, v258, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        v110 = *(_QWORD **)(v177 + 8);
        sub_23F6B4F58(v177 + *(int *)(v174 + 20), v159, &qword_256EA2E00);
        v178 = sub_23F6B6468();
        sub_23F6B5164(v178, v179, v53);
        if (v119)
        {
          v223 = sub_23F6B54F8();
          sub_23F6B6034(v223, &qword_256EA2E00);
          v286 = v53;
          sub_23F6916B8(&qword_256EA8620);
          sub_23F77D9AC();
          sub_23F77DB40();
          v224 = sub_23F6B5AD4();
          *v225 = v53;
          v225[1] = v174;
          v285 = v224;
          sub_23F77D9E4();
LABEL_46:
          sub_23F77E0D4(type metadata accessor for ContextProtoDynamicEnumerationEntity, (uint64_t)&a10);
          sub_23F693DFC();
          goto LABEL_50;
        }
        v180 = v270;
        v181 = v233;
        sub_23F759774(v233, v159, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v270 + 32));
        sub_23F759774(v234, v181, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v180 + 16));
        sub_23F6B54F8();
        v182 = v232;
        v183 = v285;
        sub_23FB2ED50();
        v285 = v183;
        if (v183)
        {
          sub_23F6B56E0(v181, *(uint64_t (**)(uint64_t, uint64_t))(v180 + 8));
          goto LABEL_46;
        }
        sub_23F6B56E0(v181, *(uint64_t (**)(uint64_t, uint64_t))(v180 + 8));
        sub_23F77E508();
        v184(v242, v182);
        sub_23F6B4F58(v258 + *(int *)(v277 + 24), v158, &qword_256EA2610);
        v185 = sub_23F77E3D0();
        v186 = v269;
        v188 = sub_23F6B5164(v185, v187, v269);
        if (v119)
        {
          sub_23F77E3DC(v188, &qword_256EA2610);
          v286 = v186;
          sub_23F6916B8(&qword_256EA8628);
          sub_23F77D9AC();
          sub_23F77DB40();
          v226 = sub_23F6B5AD4();
          *v227 = v53;
          v227[1] = v182;
          v285 = v226;
          sub_23F77D9E4();
          goto LABEL_49;
        }
        v189 = v230;
        v190 = v158;
        v191 = v268;
        sub_23F77DD54(v230, v190, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v268 + 32));
        sub_23F77DD54(v231, v189, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 16));
        v192 = v229;
        v193 = v285;
        sub_23FB2ED2C();
        v285 = v193;
        if (v193)
        {
          sub_23F6B563C(v189, *(uint64_t (**)(uint64_t, uint64_t))(v191 + 8));
LABEL_49:
          sub_23F693DFC();
          sub_23F77E0D4(type metadata accessor for ContextProtoDynamicEnumerationEntity, (uint64_t)&a10);
          sub_23F77E23C(*(uint64_t (**)(_QWORD))(v271 + 8));
LABEL_50:
          v222 = v239;
LABEL_51:
          sub_23F6D3508(v222, type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement);
          sub_23F77E23C(*(uint64_t (**)(_QWORD))(v273 + 8));
LABEL_52:
          sub_23F77E0D4(type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement, (uint64_t)v276);
          sub_23F6B5908();
          sub_23F6B5908();
          sub_23F713F08();
          goto LABEL_53;
        }
        sub_23F6B563C(v189, *(uint64_t (**)(uint64_t, uint64_t))(v191 + 8));
        sub_23F77E5C4();
        v194(v228[2], v192, v267);
        v195 = v228[1];
        sub_23FB2E2AC();
        sub_23F6D3508(v258, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        v160 = v239;
        sub_23F77DB60(v239);
        v196 = sub_23F77E324();
        sub_23F6B6344(v196, v197);
        sub_23F77E360((uint64_t)&a14);
        sub_23F77E5C4();
        sub_23F77E5A4(v198, v195, v199);
        sub_23F77DB60(v244);
        if ((sub_23F77D93C() & 1) == 0)
        {
          sub_23F77DF0C();
          v110 = a10;
        }
        v158 = v238;
        v53 = v265;
        v159 = v237;
        v161 = v236;
        v200 = v110[2];
        if (v200 >= v110[3] >> 1)
        {
          sub_23F77DE74();
          v110 = a10;
        }
        v110[2] = v200 + 1;
        sub_23F77DBDC();
        v157 = v201;
        sub_23F6F594C(v240, v202, type metadata accessor for DynamicEnumerationEntityStatement);
        v156 = *(_QWORD *)(v241 + 16);
        if (v157 == v156)
          goto LABEL_18;
      }
      sub_23F77DD64(v166, &qword_256EA25E0);
      v286 = v276[0];
      sub_23F6916B8(&qword_256EA8618);
      sub_23F77D9AC();
      sub_23F77DA84();
      v218 = sub_23F6B5AD4();
      *v219 = v53;
      v219[1] = (uint64_t)v110;
      v285 = v218;
      sub_23F77D9E4();
      sub_23F6D3508(v160, type metadata accessor for TranscriptProtoDynamicEnumerationEntityStatement);
      goto LABEL_52;
    }
LABEL_18:
    sub_23F6B6740();
LABEL_53:
    sub_23F6B5100();
  }
}

void sub_23F778C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v101)(_QWORD, uint64_t);
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v132)(_QWORD, uint64_t);
  unint64_t v133;
  char v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  _QWORD v144[6];
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)(uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;

  sub_23F6B5220();
  v14 = v11;
  v16 = v15;
  sub_23F6916B8(&qword_256EA2610);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F693E0C();
  v159 = v18;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6B6580();
  v21 = sub_23F77DDA8(v20);
  v169 = *(_QWORD *)(v21 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F693E0C();
  v156 = v23;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v24);
  v155 = (uint64_t)v144 - v25;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v26);
  v144[4] = (char *)v144 - v27;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B6580();
  v30 = sub_23F77DDC8(v29);
  v166 = *(_QWORD *)(v30 - 8);
  v167 = v30;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v31);
  v154 = (char *)v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6D3D14();
  v153 = v34;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v35);
  v144[2] = (char *)v144 - v36;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6B5314((uint64_t)v144 - v38);
  sub_23F6916B8(&qword_256EA2E00);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v40);
  v42 = sub_23F77E314((uint64_t)v144 - v41);
  v170 = *(_QWORD *)(v42 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F693E0C();
  v161 = v44;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6D3D14();
  v47 = v46;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v48);
  v147 = (uint64_t)v144 - v49;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v50);
  v52 = sub_23F77E2F4((uint64_t)v144 - v51);
  v171 = *(_QWORD *)(v52 - 8);
  v172 = v52;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v53);
  sub_23F693E0C();
  v160 = v54;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v55);
  v178 = (char *)v144 - v56;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v57);
  v145 = (char *)v144 - v58;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v59);
  sub_23F6B6580();
  v61 = sub_23F77E304(v60);
  v164 = *(_QWORD *)(v61 - 8);
  v165 = v61;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v62);
  sub_23F693E0C();
  v177 = v63;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v64);
  sub_23F6B6580();
  v180 = sub_23F77E2E4(v65);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v66);
  v181 = (_QWORD *)((char *)v144 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v68);
  v179 = (uint64_t)v144 - v69;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v70);
  v162 = (_QWORD *)((char *)v144 - v71);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v72);
  sub_23F6B6580();
  sub_23F6B5314(v73);
  v74 = *((_QWORD *)v16 + 2);
  sub_23F77DAE0(MEMORY[0x24BEE4AF8]);
  sub_23F712240();
  v149 = v16;
  v168 = v21;
  v173 = v42;
  v163 = v12;
  if (v74)
  {
    v158 = *((_QWORD *)v16 + 2);
    v157 = (char *)v16 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    sub_23F6B5508();
    v75 = 0;
    v152 = v47;
    while (v158 != v75)
    {
      v76 = v21;
      sub_23F77E6E0();
      sub_23F77DB10(v77, v78);
      v79 = v10;
      v80 = v181;
      sub_23F77DB10(v79, (uint64_t)v181);
      v81 = v80[1];
      v175 = *v80;
      sub_23F77E63C();
      sub_23F6B4F58((uint64_t)v80 + v82, v13, &qword_256EA2E00);
      v83 = v173;
      sub_23F6B5164(v13, 1, v173);
      if (v84)
      {
        sub_23F77E584();
        sub_23F6B4F84(v13, &qword_256EA2E00);
        v182 = v83;
        sub_23F6916B8(&qword_256EA8620);
        sub_23F77D9AC();
        sub_23F77DB40();
        sub_23F6B5AD4();
        *v137 = v76;
        v137[1] = v47;
        v138 = sub_23F77D9E4();
        sub_23F77E244(v138, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        sub_23F693E04();
LABEL_31:
        sub_23F756640();
        sub_23F77DB70();
        sub_23F6D3508(v179, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        sub_23F693E04();
        goto LABEL_37;
      }
      v174 = v75;
      v85 = v13;
      v86 = v74;
      v87 = v14;
      v88 = v81;
      v89 = v170;
      v90 = v85;
      sub_23F77DD54(v47, v85, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 32));
      v91 = sub_23F77E324();
      sub_23F77DD54(v91, v47, v92);
      v176 = v88;
      sub_23F6B5F1C();
      v93 = v160;
      sub_23FB2ED50();
      if (v87)
      {
        v139 = sub_23F6B563C(v47, *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
        sub_23F77E244(v139, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        sub_23F693E04();
        goto LABEL_31;
      }
      sub_23F6B563C(v47, *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
      (*(void (**)(char *, uint64_t, uint64_t))(v171 + 32))(v178, v93, v172);
      v94 = v159;
      sub_23F6B4F58((uint64_t)v181 + *(int *)(v180 + 24), v159, &qword_256EA2610);
      v95 = sub_23F77DCB8();
      v97 = sub_23F6B5164(v95, v96, v76);
      if (v84)
      {
        sub_23F77DD64(v97, &qword_256EA2610);
        v182 = v76;
        sub_23F6916B8(&qword_256EA8628);
        sub_23F77D9AC();
        sub_23F77DB40();
        sub_23F6B5AD4();
        *v140 = v76;
        v140[1] = v47;
        sub_23F77D9E4();
        v141 = swift_bridgeObjectRelease();
        sub_23F77E244(v141, type metadata accessor for ContextProtoDynamicEnumerationEntity);
        sub_23F77E104(v171);
        goto LABEL_31;
      }
      sub_23F77DD54(v155, v94, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 32));
      v98 = sub_23F6B6854();
      sub_23F77DD54(v98, v99, v100);
      v10 = v76;
      sub_23F77E204();
      v14 = 0;
      sub_23F77E4C8();
      sub_23F77E508();
      sub_23F77E224(v101);
      sub_23F77E714();
      v16 = type metadata accessor for ContextProtoDynamicEnumerationEntity;
      sub_23F6D3928((uint64_t)v181);
      sub_23F6D3928(v179);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DF24();
        v10 = a10;
      }
      v74 = v86;
      v13 = v90;
      v103 = *(_QWORD *)(v10 + 16);
      v102 = *(_QWORD *)(v10 + 24);
      if (v103 >= v102 >> 1)
      {
        sub_23F77DCA0(v102);
        sub_23F712240();
        v10 = a10;
      }
      v104 = v174 + 1;
      *(_QWORD *)(v10 + 16) = v103 + 1;
      v75 = v104;
      v105 = sub_23F77DBA4();
      (*(void (**)(unint64_t, uint64_t))(v106 + 32))(v105, v177);
      a10 = v10;
      v21 = v168;
      v47 = v152;
      if (v74 == v75)
        goto LABEL_14;
    }
    __break(1u);
LABEL_39:
    __break(1u);
  }
  else
  {
    sub_23F6B5508();
LABEL_14:
    sub_23F77E4F4();
    if (!v84)
    {
      v108 = v148;
      while (1)
      {
        if (v74 >= v107)
          goto LABEL_39;
        sub_23F77E058();
        sub_23F77E1C0();
        sub_23F70D654(v109, v110);
        v111 = (uint64_t)v16;
        v112 = v173;
        v113 = v162;
        sub_23F70D654(v111, (uint64_t)v162);
        v115 = *v113;
        v114 = v113[1];
        sub_23F77E63C();
        sub_23F6B4F58((uint64_t)v113 + v116, v108, &qword_256EA2E00);
        sub_23F6B5164(v108, 1, v112);
        if (v84)
          break;
        v117 = v170;
        v118 = v146;
        sub_23F759774(v146, v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 32));
        sub_23F759774(v147, v118, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 16));
        sub_23F6B54F8();
        v119 = v145;
        sub_23FB2ED50();
        if (v14)
        {
          sub_23F6B56E0(v118, *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8));
          goto LABEL_34;
        }
        sub_23F6B56E0(v118, *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8));
        (*(void (**)(uint64_t, char *, uint64_t))(v171 + 32))(v150, v119, v172);
        sub_23F6B4F58((uint64_t)v162 + *(int *)(v180 + 24), v144[5], &qword_256EA2610);
        v120 = sub_23F77DCB8();
        v121 = v168;
        v123 = sub_23F6B5164(v120, v122, v168);
        if (v84)
        {
          sub_23F77DD64(v123, &qword_256EA2610);
          v182 = v121;
          sub_23F6916B8(&qword_256EA8628);
          sub_23F77D9AC();
          sub_23F77DB40();
          sub_23F6B5AD4();
          *v143 = v112;
          v143[1] = v115;
          sub_23F77D9E4();
          sub_23F693DFC();
          sub_23F6D3508((uint64_t)v162, type metadata accessor for ContextProtoDynamicEnumerationEntity);
          sub_23F77E23C(*(uint64_t (**)(_QWORD))(v171 + 8));
          goto LABEL_36;
        }
        v124 = v169;
        v125 = v144[3];
        v126 = sub_23F77E608();
        sub_23F77DB9C(v126, v127, v128);
        v129 = sub_23F6D3D70();
        sub_23F77DB9C(v129, v130, v131);
        sub_23F77E204();
        sub_23F6B6178(v125, *(uint64_t (**)(uint64_t, uint64_t))(v124 + 8));
        sub_23F77E508();
        sub_23F77E224(v132);
        sub_23F77E680();
        sub_23F77E714();
        v16 = type metadata accessor for ContextProtoDynamicEnumerationEntity;
        sub_23F6D3928((uint64_t)v162);
        sub_23F6D3928(v151);
        if ((sub_23F77D93C() & 1) == 0)
        {
          sub_23F77DF24();
          v114 = a10;
        }
        v108 = v148;
        sub_23F77E2B4();
        if (v134)
        {
          sub_23F77DA64(v133);
          sub_23F712240();
          v114 = a10;
        }
        ++v74;
        *(_QWORD *)(v114 + 16) = v115;
        v135 = sub_23F77E150();
        sub_23F6B6344(v135, *(uint64_t (**)(uint64_t, _QWORD))(v136 + 32));
        a10 = v114;
        sub_23F77E4F4();
        if (v84)
          goto LABEL_16;
      }
      sub_23F6B54F8();
      sub_23F6B4F84(v108, &qword_256EA2E00);
      v182 = v112;
      sub_23F6916B8(&qword_256EA8620);
      sub_23F77D9AC();
      sub_23F77DB40();
      sub_23F6B5AD4();
      *v142 = v112;
      v142[1] = v115;
      sub_23F77D9E4();
LABEL_34:
      sub_23F6D3508((uint64_t)v162, type metadata accessor for ContextProtoDynamicEnumerationEntity);
      sub_23F693DFC();
LABEL_36:
      sub_23F77E0D4(type metadata accessor for ContextProtoDynamicEnumerationEntity, (uint64_t)&v183);
      sub_23F693DFC();
      sub_23F693DFC();
      sub_23F713F08();
      goto LABEL_37;
    }
LABEL_16:
    sub_23F6B6740();
LABEL_37:
    sub_23F77E390();
    sub_23F6B5100();
  }
}

void sub_23F7796C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F773E78(a1, (uint64_t)MEMORY[0x24BE57720], (uint64_t)type metadata accessor for ContextProtoSurroundingText, (uint64_t)sub_23F7122B8, (uint64_t)SurroundingText.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F7796F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t a1))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(uint64_t);
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;

  sub_23F6B5220();
  v13 = v12;
  v14 = sub_23FB2D1F0();
  v67 = *(_QWORD *)(v14 - 8);
  v68 = v14;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  v73 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v17);
  v64 = (char *)v60 - v18;
  v19 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoResponseParameter(v19);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B5CB8();
  MEMORY[0x24BDAC7A8](v21);
  v65 = (char *)v60 - v22;
  sub_23F6B5664();
  v24 = MEMORY[0x24BDAC7A8](v23);
  sub_23F77E6A4(v24, v25, v26, v27, v28, v29, v30, v31, v60[0]);
  v32 = *(_QWORD *)(v13 + 16);
  sub_23F77DAE0(MEMORY[0x24BEE4AF8]);
  sub_23F712330();
  v61 = v13;
  v66 = v11;
  if (v32)
  {
    sub_23F77DAD0();
    v62 = v33;
    v63 = v34;
    sub_23F6B5F1C();
    v35 = 0;
    v74 = v32;
    v36 = (uint64_t)v65;
    while (v63 != v35)
    {
      sub_23F70D654(v62 + *(_QWORD *)(v11 + 72) * v35, v36);
      sub_23F70D654(v36, v10);
      v37 = *(_QWORD *)v10;
      v38 = *(_QWORD *)(v10 + 16);
      v39 = *(_QWORD *)(v10 + 24);
      v70 = *(_QWORD *)(v10 + 32);
      v71 = v37;
      v72 = *(_QWORD *)(v10 + 56);
      v69 = *(unsigned __int8 *)(v10 + 48);
      sub_23F6B5F1C();
      sub_23F6D1E0C(v38, v39);
      sub_23F6B90D8();
      sub_23F77E1FC();
      sub_23FB2D1A8();
      v40 = type metadata accessor for TranscriptProtoResponseParameter;
      sub_23F6D38A0(v10);
      sub_23F6D38A0(v36);
      if ((sub_23F77D93C() & 1) == 0)
      {
        sub_23F77DF6C();
        v40 = a10;
      }
      v32 = v74;
      v42 = *((_QWORD *)v40 + 2);
      v41 = *((_QWORD *)v40 + 3);
      if (v42 >= v41 >> 1)
      {
        sub_23F77D9EC(v41);
        sub_23F712330();
        v40 = a10;
      }
      ++v35;
      *((_QWORD *)v40 + 2) = v42 + 1;
      sub_23F77DAB8();
      (*(void (**)(unint64_t, char *))(v45 + 32))(v43 + v44 * v42, v73);
      a10 = v40;
      v11 = v66;
      if (v32 == v35)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    sub_23F6B5F1C();
LABEL_11:
    v46 = *(_QWORD *)(v61 + 16);
    if (v32 == v46)
    {
LABEL_12:
      sub_23F6B6740();
      sub_23F6B5100();
      return;
    }
    v47 = v60[1];
    v48 = (uint64_t)v65;
    while (v32 < v46)
    {
      sub_23F77E058();
      v49 = *(_QWORD *)(v11 + 72);
      v74 = v32;
      sub_23F77DC5C(v50 + v49 * v32, v47);
      sub_23F77DC5C(v47, v48);
      v51 = *(_QWORD *)v48;
      v53 = *(_QWORD *)(v48 + 16);
      v52 = *(_QWORD *)(v48 + 24);
      v71 = *(_QWORD *)(v48 + 32);
      v72 = v51;
      v73 = *(char **)(v48 + 56);
      LODWORD(v70) = *(unsigned __int8 *)(v48 + 48);
      sub_23F77DCD4();
      sub_23F6D1E0C(v53, v52);
      sub_23F77E584();
      sub_23F6B5508();
      sub_23FB2D1A8();
      sub_23F6D3928(v48);
      sub_23F6D3928(v47);
      if ((sub_23F77D9A4() & 1) == 0)
        sub_23F77DF6C();
      v54 = a10;
      v56 = *((_QWORD *)a10 + 2);
      v55 = *((_QWORD *)a10 + 3);
      if (v56 >= v55 >> 1)
      {
        sub_23F77DA04(v55);
        sub_23F712330();
        v54 = a10;
      }
      v32 = v74 + 1;
      *((_QWORD *)v54 + 2) = v56 + 1;
      sub_23F77DAB8();
      (*(void (**)(unint64_t, char *))(v59 + 32))(v57 + v58 * v56, v64);
      a10 = v54;
      v46 = *(_QWORD *)(v61 + 16);
      v11 = v66;
      if (v32 == v46)
        goto LABEL_12;
    }
  }
  __break(1u);
}

void sub_23F779A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F773E78(a1, (uint64_t)MEMORY[0x24BE52EA8], (uint64_t)type metadata accessor for TranscriptProtoVisualOutput, (uint64_t)sub_23F71236C, (uint64_t)ResponseOutput.VisualOutput.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F779AB4()
{
  ResponseGenerationInput.init(transcript:)();
}

uint64_t sub_23F779AC8()
{
  return sub_23F771A9C();
}

IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ResponseGenerationProtoResponseMode.init(rg:)(IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode rg)
{
  _BYTE *v1;

  *v1 = 0x4030102u >> (8 * *(_BYTE *)rg);
  return rg;
}

unint64_t sub_23F779AF8()
{
  unint64_t result;

  result = qword_256EA8378;
  if (!qword_256EA8378)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for HandwrittenConversion.Error, &type metadata for HandwrittenConversion.Error);
    atomic_store(result, (unint64_t *)&qword_256EA8378);
  }
  return result;
}

uint64_t sub_23F779B34(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;

  return sub_23F772040(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

void sub_23F779B58(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ResponseGenerationProtoResponseGenerationInput.init(rg:)(a1, a2);
}

uint64_t sub_23F779B6C(char *a1)
{
  char v2;

  v2 = *a1;
  return ResponseMode.init(transcript:)((IntelligenceFlowPlannerSupport::ResponseGenerationProtoResponseMode)&v2);
}

uint64_t sub_23F779B94(char *a1)
{
  char v2;

  v2 = *a1;
  return ResponseGenerationProtoResponseMode.init(rg:)((IntelligenceFlowPlannerSupport::ResponseMode)&v2);
}

void StatementResultDigest.init(transcript:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;

  sub_23F6B5220();
  v8 = v7;
  v91 = v9;
  sub_23F6916B8(&qword_256EA7E50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v97 = v11;
  sub_23F6916B8(&qword_256EA8150);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5404(v13, v83);
  v92 = sub_23FB2C764();
  v96 = *(_QWORD *)(v92 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  v106 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B6580();
  v99 = v17;
  sub_23F6916B8(&qword_256EA7E60);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B51A4();
  v100 = v19;
  sub_23F6916B8(&qword_256EA2780);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B51A4();
  v103 = v21;
  v22 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoStatementOutcome(v22);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B5C10(v24, v83);
  v25 = sub_23FB2D0DC();
  v101 = *(_QWORD *)(v25 - 8);
  v102 = v25;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  v104 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23F6D398C();
  v93 = type metadata accessor for StatementResultPayload(v28);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v29);
  v94 = (char *)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B6580();
  v95 = v32;
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v33);
  v105 = (uint64_t)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_23F6D398C();
  v36 = type metadata accessor for StatementResult(v35);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F693EB0();
  sub_23F6916B8(&qword_256EA7E80);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA8148);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B5268();
  sub_23F6B5D90();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6B5CB8();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F6B5F6C();
  sub_23F6916B8(&qword_256EA8140);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B59E0();
  sub_23F6B58F8(v8, v3);
  sub_23F77A714();
  if (v1)
  {
    sub_23F77DD2C(v43, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
  }
  else
  {
    v89 = v2;
    v90 = v0;
    v88 = (int *)v36;
    v107 = v5;
    v44 = v106;
    v45 = type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
    sub_23F6B71D0(v8 + *(int *)(v45 + 20), v4);
    sub_23F77D690();
    v87 = v6;
    v85 = sub_23FB2C4B8();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v105, 1, 1, v85);
    sub_23F6B4F58(v8, v90, &qword_256EA3268);
    v46 = sub_23FB2EBC4();
    v47 = sub_23F77DCB8();
    v49 = sub_23F6B5164(v47, v48, v46);
    if (v50)
    {
      sub_23F77DD64(v49, &qword_256EA3268);
      v84 = 0;
      v86 = 0;
    }
    else
    {
      v84 = sub_23FB2EBB8();
      v86 = v51;
      v52 = sub_23F6B6854();
      v53(v52);
    }
    v54 = (uint64_t)v44;
    v55 = (int *)v45;
    sub_23F77B5EC(&qword_256EA7E70, type metadata accessor for TranscriptProtoStatementOutcome, (uint64_t)&unk_256EA8770);
    StatementOutcome.init(transcript:)();
    v56 = v100;
    sub_23F6B71D0(v8 + v55[8], v100);
    v57 = v103;
    sub_23F77A914(v56, (uint64_t)MEMORY[0x24BE532A0], (uint64_t)&qword_256EA7E60, (uint64_t)type metadata accessor for TranscriptProtoResponseManifest, (uint64_t)ResponseManifest.init(transcript:), v58, v59, v60, v83, v84);
    v61 = (uint64_t)v94;
    v62 = (uint64_t)&v94[*(int *)(v93 + 20)];
    v63 = sub_23FB2D0B8();
    sub_23F6B5A8C(v62, v64, v65, v63);
    (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v61, v104, v102);
    sub_23F710E80(v57, v62, &qword_256EA2780);
    v66 = v95;
    sub_23F6F594C(v61, v95, type metadata accessor for StatementResultPayload);
    sub_23F77DD90();
    sub_23F77DD90();
    v67 = v89;
    v68 = sub_23F77E3D0();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v68, v69, 1, v85);
    v70 = v88;
    v71 = (_QWORD *)(v67 + v88[5]);
    *v71 = 0;
    v71[1] = 0;
    v72 = sub_23F6D3D70();
    sub_23F710E80(v72, v73, v74);
    swift_bridgeObjectRelease();
    v75 = v86;
    *v71 = v84;
    v71[1] = v75;
    sub_23F6F594C(v66, v67 + v70[6], type metadata accessor for StatementResultPayload);
    v76 = v96;
    sub_23F77E25C(v67 + v70[7], v99);
    sub_23F77E0DC(v67 + v70[8], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 16));
    sub_23F77E25C(v67 + v70[9], v54);
    v77 = *(unsigned __int8 *)(v8 + v55[7]);
    sub_23F6B6A10(v8 + v55[9], v97);
    v78 = v98;
    sub_23F77A714();
    if (v77 == 2)
      v80 = 2;
    else
      v80 = v77 & 1;
    sub_23F77DD2C(v79, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
    v81 = v91;
    sub_23F6B4EC0(v107, v91, &qword_256EA8140);
    v82 = (int *)type metadata accessor for StatementResultDigest(0);
    sub_23F6B4EC0(v87, v81 + v82[5], &qword_256EA8148);
    sub_23F6F594C(v67, v81 + v82[6], type metadata accessor for StatementResult);
    *(_BYTE *)(v81 + v82[7]) = v80;
    sub_23F6B4EC0(v78, v81 + v82[8], &qword_256EA8150);
  }
  sub_23F6B5100();
}

void sub_23F77A32C()
{
  sub_23F77A714();
}

void sub_23F77A360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  sub_23F6916B8(&qword_256EA8700);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23F6B5864();
  v6 = type metadata accessor for TranscriptProtoParticipantID(v5);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  sub_23F6B4F58(a1, v1, &qword_256EA8700);
  sub_23F6B5164(v1, 1, v6);
  if (v11)
  {
    sub_23F6B62DC(a1);
    sub_23F6B62DC(v1);
  }
  else
  {
    sub_23F77DC08(v1, (uint64_t)v10);
    sub_23F77DB78((uint64_t)v10, v2);
    sub_23F6B90D8();
    sub_23F77DB80(v2);
    sub_23F77DC10(v12, &qword_256EA8700);
    sub_23F77DB80((uint64_t)v10);
  }
  sub_23F77E0B0();
}

void sub_23F77A488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  sub_23F6916B8(&qword_256EA86F8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23F6B5864();
  v6 = type metadata accessor for TranscriptProtoSpanID(v5);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v12 - v9;
  sub_23F6B568C(a1, v1);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, v6) == 1)
  {
    sub_23F6D3930(a1);
    sub_23F6D3930(v1);
  }
  else
  {
    sub_23F77DC08(v1, (uint64_t)v10);
    sub_23F77DB78((uint64_t)v10, v2);
    sub_23F77DB80(v2);
    sub_23F77DC10(v11, &qword_256EA86F8);
    sub_23F77DB80((uint64_t)v10);
  }
  sub_23F77E0B0();
}

void sub_23F77A5B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  char v15;

  sub_23F6916B8(&qword_256EA8698);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693EB0();
  v9 = type metadata accessor for TranscriptProtoRequestPrescribedPlan(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B5F6C();
  sub_23F6B4F58(a1, v3, &qword_256EA8698);
  sub_23F6B5164(v3, 1, v9);
  if (v12)
  {
    sub_23F6D3930(a1);
    sub_23F6D3930(v3);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v13 = -2;
LABEL_6:
    *(_BYTE *)(a2 + 16) = v13;
    goto LABEL_7;
  }
  sub_23F77DC08(v3, v4);
  sub_23F77DB78(v4, v5);
  RequestPrescribedPlan.init(transcript:)();
  sub_23F6B4F84(a1, &qword_256EA8698);
  sub_23F77DB80(v4);
  if (!v2)
  {
    v13 = v15;
    *(_OWORD *)a2 = v14;
    goto LABEL_6;
  }
LABEL_7:
  sub_23F77E0B0();
  sub_23F6D3710();
}

void sub_23F77A6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE53158], (uint64_t)&qword_256EA8598, (uint64_t)type metadata accessor for TranscriptProtoPromptSelection, (uint64_t)PromptSelection.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77A714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;

  sub_23F6B5220();
  v30 = v3;
  v5 = v4;
  v7 = v6;
  v32 = v8;
  v31 = sub_23F6F0918(v6, v9);
  v29 = *(_QWORD *)(v31 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - v11;
  sub_23F6916B8(v5);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  v14 = sub_23F77DDF0();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B5C80();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v29 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v29 - v20;
  sub_23F6B568C(v7, v2);
  v22 = sub_23F77E3D0();
  sub_23F6B5164(v22, v23, v14);
  if (v24)
  {
    sub_23F6B62DC(v7);
    sub_23F6B62DC(v2);
    v25 = 1;
    v26 = v32;
LABEL_7:
    sub_23F77DD6C(v26, v25);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v21, v2, v14);
  v27 = *(void (**)(uint64_t))(v15 + 16);
  v28 = sub_23F77E19C();
  v27(v28);
  ((void (*)(uint64_t, char *, uint64_t))v27)(v1, v19, v14);
  v30(v1);
  if (!v0)
  {
    sub_23F77E358((uint64_t)v19);
    sub_23F6B62DC(v7);
    sub_23F77E358((uint64_t)v21);
    v26 = v32;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v32, v12, v31);
    v25 = 0;
    goto LABEL_7;
  }
  sub_23F77E358((uint64_t)v19);
  sub_23F6B62DC(v7);
  sub_23F77E358((uint64_t)v21);
LABEL_8:
  sub_23F6B5100();
}

void sub_23F77A8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE532A0], (uint64_t)&qword_256EA7E60, (uint64_t)type metadata accessor for TranscriptProtoResponseManifest, (uint64_t)ResponseManifest.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77A914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t);
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);

  sub_23F6B5220();
  v16 = v15;
  sub_23F77E0BC(v17, v18);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F77E1E8();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v20);
  v21 = sub_23F77DB24();
  v22 = v16(v21);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v24);
  v25 = sub_23F77E6CC();
  sub_23F6B568C(v25, v14);
  sub_23F6B5164(v14, 1, v22);
  if (v26)
  {
    sub_23F6B62DC(v12);
    sub_23F6B62DC(v14);
    v27 = 1;
    v28 = a10;
LABEL_6:
    sub_23F77DD78(v28, v27);
    goto LABEL_7;
  }
  sub_23F6F594C(v14, v10, v16);
  sub_23F77DB10(v10, v13);
  sub_23F77DDE4();
  sub_23F6B62DC(v12);
  sub_23F77DB68(v10);
  if (!v11)
  {
    v28 = a10;
    v29 = sub_23F6B63E8();
    sub_23F6B633C(v29, v30, v31);
    v27 = 0;
    goto LABEL_6;
  }
LABEL_7:
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F77AA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE57E10], (uint64_t)&qword_256EA2DD0, (uint64_t)type metadata accessor for ContextProtoQueryDecorationToolRetrievalResponse, (uint64_t)QueryDecorationToolRetrievalResponse.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77AA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_23F6B5220();
  sub_23F77E044(v4);
  v5 = sub_23FB2C764();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B5208();
  sub_23F6B5D90();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_23F70D7F8();
  v9 = type metadata accessor for TranscriptProtoStatementID(v8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - v12;
  v14 = sub_23F77E46C();
  sub_23F6B58F8(v14, v15);
  v16 = sub_23F77DCB8();
  sub_23F6B5164(v16, v17, v9);
  if (v18)
  {
    sub_23F6B64F4(v0);
    sub_23F6B64F4(v3);
    v21 = 1;
    v22 = v24;
  }
  else
  {
    sub_23F77E2AC(v3, (uint64_t)v13);
    sub_23F77DC5C((uint64_t)v13, v2);
    sub_23F77E1FC();
    sub_23FB2C74C();
    sub_23F6D3928(v2);
    sub_23F77DD24(v19, &qword_256EA25E0);
    sub_23F6D3928((uint64_t)v13);
    v20 = v24;
    sub_23F6B633C(v24, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    v21 = 0;
    v22 = v20;
  }
  sub_23F77DD78(v22, v21);
  sub_23F6B5100();
}

void sub_23F77ABD4(char a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23FB2DFC4();
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5F6C();
  __asm { BR              X11 }
}

void sub_23F77AC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, *MEMORY[0x24BE579D8], v0);
  sub_23F77E274(v3, v2);
  sub_23F77E274(v1, v3);
  sub_23F77DD6C(v1, 0);
  sub_23F77E0B0();
  sub_23F6D3750();
}

void sub_23F77ACC0()
{
  JUMPOUT(0x23F77ACB0);
}

void sub_23F77ACCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE57B20], (uint64_t)&qword_256EA2CD8, (uint64_t)type metadata accessor for ContextProtoStructuredContext, (uint64_t)StructuredContext.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77AD00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_23F6B5220();
  v6 = v5;
  v35 = v7;
  v8 = sub_23FB2DA90();
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5F6C();
  sub_23F6916B8(&qword_256EA2CF8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  v12 = sub_23F70D7F8();
  v13 = type metadata accessor for ContextProtoConfidence(v12);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - v16;
  v18 = sub_23F77E46C();
  sub_23F6B4F58(v18, v19, &qword_256EA2CF8);
  v20 = sub_23F77DCB8();
  sub_23F6B5164(v20, v21, v13);
  if (v22)
  {
    sub_23F6D3748(v6);
    sub_23F6D3748(v3);
    v23 = 1;
    v24 = v35;
    v25 = v34;
LABEL_7:
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v24, v23, 1, v25);
    goto LABEL_8;
  }
  v26 = sub_23F6D3D70();
  sub_23F77DC98(v26, v27);
  sub_23F70D654((uint64_t)v17, v4);
  sub_23FB2DA6C();
  sub_23F6D38A0(v4);
  if (!v0)
  {
    v30 = v2;
    v25 = v34;
    v31 = sub_23F77E25C(v1, v30);
    sub_23F77DD24(v31, &qword_256EA2CF8);
    sub_23F72E404(v32, type metadata accessor for ContextProtoConfidence);
    v24 = v35;
    sub_23F77E25C(v35, v1);
    v23 = 0;
    goto LABEL_7;
  }
  sub_23F77DD24(v28, &qword_256EA2CF8);
  sub_23F72E404(v29, type metadata accessor for ContextProtoConfidence);
LABEL_8:
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F77AEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE576C8], (uint64_t)&qword_256EA2CE8, (uint64_t)type metadata accessor for ContextProtoContextMetadata, (uint64_t)ContextMetadata.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77AED8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v32 = a2;
  v31 = sub_23FB2DAE4();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5208();
  sub_23F6B6088();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23F70D7F8();
  v11 = type metadata accessor for ContextProtoBoundingBox(v10);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  v16 = sub_23F77E46C();
  sub_23F6B4F58(v16, v17, &qword_256EA2800);
  v18 = sub_23F77DCB8();
  sub_23F6B5164(v18, v19, v11);
  if (v20)
  {
    sub_23F6D3748(a1);
    sub_23F6D3748(v5);
    v21 = 1;
    v22 = v32;
LABEL_4:
    sub_23F77DD78(v22, v21);
    return;
  }
  v23 = sub_23F6B6854();
  sub_23F77DC98(v23, v24);
  sub_23F70D654((uint64_t)v15, (uint64_t)v4);
  v25 = *v4;
  v36 = *((_BYTE *)v4 + 4);
  sub_23F77DC34(v25);
  if (!v2)
  {
    v26 = v4[2];
    v35 = *((_BYTE *)v4 + 12);
    sub_23F77DC34(v26);
    v27 = v4[4];
    v34 = *((_BYTE *)v4 + 20);
    sub_23F77DC34(v27);
    v28 = v4[6];
    v33 = *((_BYTE *)v4 + 28);
    sub_23F77DC34(v28);
    sub_23FB2DAA8();
    sub_23F6D38A0((uint64_t)v4);
    sub_23F77DD24(v30, &qword_256EA2800);
    sub_23F6D38A0((uint64_t)v15);
    v22 = v32;
    sub_23F6B633C(v32, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    v21 = 0;
    goto LABEL_4;
  }
  sub_23F6D38A0((uint64_t)v4);
  sub_23F77DD24(v29, &qword_256EA2800);
  sub_23F6D38A0((uint64_t)v15);
}

void sub_23F77B0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE57108], (uint64_t)&qword_256EA2ED0, (uint64_t)type metadata accessor for ContextProtoAliasTypes, (uint64_t)AliasTypes.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77B124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23F6B5220();
  v4 = v3;
  v6 = v5;
  v7 = sub_23FB2CD4C();
  v26 = *(_QWORD *)(v7 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v25 = v9;
  sub_23F6916B8(&qword_256EA8000);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  v11 = sub_23F77DB24();
  v12 = type metadata accessor for TranscriptProtoResponseDialog(v11);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - v15;
  sub_23F6B4F58(v4, v2, &qword_256EA8000);
  sub_23F6B5164(v2, 1, v12);
  if (v17)
  {
    sub_23F6B64F4(v4);
    sub_23F6B64F4(v2);
    v19 = 1;
  }
  else
  {
    sub_23F77E2AC(v2, (uint64_t)v16);
    sub_23F77DC5C((uint64_t)v16, v1);
    v23 = v6;
    v24 = v0;
    v20 = *(_QWORD *)(v1 + 32);
    v21 = v4;
    v22 = v7;
    sub_23F77DCD4();
    sub_23F6B5508();
    sub_23F6B54F8();
    sub_23F6B5F1C();
    v18 = v25;
    v6 = v23;
    sub_23FB2CD28();
    sub_23F6D3928(v1);
    sub_23F6B4F84(v21, &qword_256EA8000);
    sub_23F6D3928((uint64_t)v16);
    sub_23F75E710(v6, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32));
    v19 = 0;
  }
  sub_23F77E598(v6, v19);
  sub_23F6B5100();
}

void sub_23F77B2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE53098], (uint64_t)&qword_256EA8008, (uint64_t)type metadata accessor for TranscriptProtoResponseVisual, (uint64_t)ResponseVisual.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77B320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_23F77A914(a1, (uint64_t)MEMORY[0x24BE52F30], (uint64_t)&qword_256EA85E8, (uint64_t)type metadata accessor for TranscriptProtoDialogType, (uint64_t)ResponseOutput.DialogType.init(transcript:), a6, a7, a8, vars0, vars8);
}

void sub_23F77B354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  _QWORD v33[3];
  uint64_t v34;

  sub_23F6B5220();
  sub_23F77E044(v14);
  sub_23FB2C4B8();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  v17 = sub_23F77DE0C();
  v33[1] = *(_QWORD *)(v17 - 8);
  v33[2] = v17;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B59E0();
  sub_23F6B6E54();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  v20 = sub_23F6B5864();
  v21 = type metadata accessor for TranscriptProtoUndoContext(v20);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v33 - v24;
  sub_23F6B6A10(v12, v11);
  sub_23F6B5164(v11, 1, v21);
  if (v26)
  {
    sub_23F6B64F4(v12);
    sub_23F6B64F4(v11);
    v27 = 1;
    v28 = v34;
LABEL_7:
    sub_23F77DD6C(v28, v27);
    goto LABEL_8;
  }
  sub_23F77E2AC(v11, (uint64_t)v25);
  sub_23F77DC5C((uint64_t)v25, v13);
  sub_23FB2C47C();
  sub_23F77B72C(&qword_256EA2798, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58], (uint64_t)&unk_256EA8728);
  sub_23F6B64F4(v10);
  if (!a10)
  {
    sub_23F6B5508();
    sub_23F6B5F1C();
    sub_23FB2C83C();
    sub_23F6D3928(v13);
    sub_23F77DD24(v30, &qword_256EA7FC8);
    sub_23F6D3928((uint64_t)v25);
    v28 = v34;
    v31 = sub_23F77E668();
    v32(v31);
    v27 = 0;
    goto LABEL_7;
  }
  sub_23F6D3928(v13);
  sub_23F77DD24(v29, &qword_256EA7FC8);
  sub_23F6D3928((uint64_t)v25);
LABEL_8:
  sub_23F6B5100();
}

void sub_23F77B568()
{
  sub_23F77B72C(&qword_256EA2798, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58], (uint64_t)&unk_256EA8728);
}

void sub_23F77B594()
{
  sub_23F77B5EC(&qword_256EA7FF0, type metadata accessor for TranscriptProtoActionFailureFailure, (uint64_t)&unk_256EA8568);
}

void sub_23F77B5C0()
{
  sub_23F77B5EC(&qword_256EA86B0, type metadata accessor for TranscriptProtoDeviceDetailsDeviceType, (uint64_t)&unk_256EA86B8);
}

void sub_23F77B5EC(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;

  sub_23F77E3E4(a1);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B53AC();
  sub_23F6B71D0(v5, v4);
  v9 = a2(0);
  v10 = sub_23F6B6468();
  sub_23F6B5164(v10, v11, v9);
  if (v12)
  {
    sub_23F6D3930(v4);
    sub_23F6B6088();
    v13 = sub_23F77E5F4();
    sub_23F77DC54();
    sub_23F6B5AD4();
    *v14 = v13;
    v14[1] = a3;
    sub_23F77D9E4();
  }
  else
  {
    sub_23F6F594C(v4, v3, a2);
  }
  sub_23F77E0B0();
  sub_23F6D3750();
}

void sub_23F77B6A8()
{
  sub_23F77B5EC(&qword_256EA2660, type metadata accessor for TranscriptProtoVisualOutputType, (uint64_t)&unk_256EA8520);
}

void sub_23F77B6D4()
{
  sub_23F77B5EC(&qword_256EA2640, type metadata accessor for TranscriptProtoLabel, (uint64_t)&qword_256EA8540);
}

void sub_23F77B700()
{
  sub_23F77B72C(&qword_256EA8528, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9E18], (uint64_t)&unk_256EA8530);
}

void sub_23F77B72C(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  sub_23F77E3E4(a1);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5208();
  sub_23F6B568C(v5, v4);
  v9 = a2(0);
  sub_23F6B5164(v4, 1, v9);
  if (v10)
  {
    sub_23F6B62DC(v4);
    sub_23F6B6088();
    v11 = sub_23F77E5F4();
    sub_23F77DC54();
    sub_23F6B5AD4();
    *v12 = v11;
    v12[1] = a3;
    sub_23F77D9E4();
  }
  else
  {
    sub_23F77E0DC(v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32));
  }
  sub_23F77E0B0();
  sub_23F6D3750();
}

void sub_23F77B7EC()
{
  sub_23F77B5EC(&qword_256EA2650, type metadata accessor for TranscriptProtoUitype, (uint64_t)&unk_256EA8538);
}

void sub_23F77B818()
{
  sub_23F77B5EC(&qword_256EA7FD0, type metadata accessor for TranscriptProtoSystemRequirementAuthenticationRequestAuthenticationLevel, (uint64_t)&unk_256EA8570);
}

void sub_23F77B844()
{
  sub_23F77B72C(&qword_256EA2610, (uint64_t (*)(_QWORD))MEMORY[0x24BEB95B0], (uint64_t)&unk_256EA8628);
}

void sub_23F77B870()
{
  sub_23F77B5EC(&qword_256EA25A0, type metadata accessor for TranscriptProtoASTExpr, (uint64_t)&unk_256EA8508);
}

void sub_23F77B89C()
{
  sub_23F77B5EC(&qword_256EA8510, type metadata accessor for TranscriptProtoASTPickType, (uint64_t)&unk_256EA8518);
}

void sub_23F77B8C8()
{
  sub_23F77B5EC(&qword_256EA25E0, type metadata accessor for TranscriptProtoStatementID, (uint64_t)&unk_256EA8618);
}

void sub_23F77B8F4()
{
  sub_23F77B5EC(&qword_256EA84F8, type metadata accessor for TranscriptProtoASTBlockStmt, (uint64_t)&qword_256EA8500);
}

void sub_23F77B920()
{
  sub_23F77B5EC(&qword_256EA84E8, type metadata accessor for TranscriptProtoASTFlatValue, (uint64_t)&unk_256EA84F0);
}

uint64_t sub_23F77B94C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  if ((result & 0x100000000) != 0)
  {
    sub_23F6916B8(&qword_256EA8758);
    v2 = sub_23F77E1B4();
    sub_23F77DC54();
    sub_23F6B5AD4();
    *v3 = v2;
    v3[1] = v1;
    return sub_23F77D9E4();
  }
  return result;
}

void sub_23F77B9C0()
{
  sub_23F77B5EC(&qword_256EA2578, type metadata accessor for ContextProtoRetrievedTool.ContextProtoDefinitionEnum, (uint64_t)&unk_256EA8748);
}

void sub_23F77B9EC()
{
  sub_23F77B5EC(&qword_256EA2588, type metadata accessor for ContextProtoRetrievedTool.Definition, (uint64_t)&unk_256EA8490);
}

uint64_t sub_23F77BA18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  if (a2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_23F6916B8(&qword_256EA8750);
    a1 = sub_23F77E1B4();
    sub_23F77DC54();
    sub_23F6B5AD4();
    *v4 = a1;
    v4[1] = v2;
    sub_23F77D9E4();
  }
  return a1;
}

void sub_23F77BAA0()
{
  sub_23F77B72C(&qword_256EA2E58, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9618], (uint64_t)&qword_256EA8740);
}

void sub_23F77BACC()
{
  sub_23F77B72C(&qword_256EA2E48, (uint64_t (*)(_QWORD))MEMORY[0x24BEB95F8], (uint64_t)&qword_256EA8738);
}

void sub_23F77BAF8()
{
  sub_23F77B72C(&qword_256EA2E00, (uint64_t (*)(_QWORD))MEMORY[0x24BEB95D8], (uint64_t)&unk_256EA8620);
}

void sub_23F77BB24()
{
  sub_23F77B5EC(&qword_256EA8608, type metadata accessor for TranscriptProtoQueryDecorationPrePlannerResultPayload, (uint64_t)&unk_256EA8610);
}

void sub_23F77BB50()
{
  sub_23F77B5EC(&qword_256EA2688, type metadata accessor for TranscriptProtoShimParameterResolutionEnum, (uint64_t)&unk_256EA84A0);
}

void sub_23F77BB7C()
{
  sub_23F77B5EC(&qword_256EA84A8, type metadata accessor for TranscriptProtoSessionCoordinatorErrorEnum, (uint64_t)&unk_256EA84B0);
}

void sub_23F77BBA8()
{
  sub_23F77B5EC(&qword_256EA8668, type metadata accessor for TranscriptProtoSessionErrorEnum, (uint64_t)&unk_256EA8670);
}

void sub_23F77BBD4()
{
  sub_23F77B5EC(&qword_256EA86D0, type metadata accessor for TranscriptProtoLocaleSettings, (uint64_t)&unk_256EA86D8);
}

void sub_23F77BC00()
{
  sub_23F77B5EC(&qword_256EA86C0, type metadata accessor for TranscriptProtoDeviceDetails, (uint64_t)&unk_256EA86C8);
}

void sub_23F77BC2C()
{
  sub_23F77B5EC(&qword_256EA85A0, type metadata accessor for TranscriptProtoPropertyQueryEnum, (uint64_t)&unk_256EA85A8);
}

void sub_23F77BC58()
{
  sub_23F77B5EC(&qword_256EA85B0, type metadata accessor for TranscriptProtoQueryDataEnum, (uint64_t)&unk_256EA85B8);
}

void sub_23F77BC84()
{
  sub_23F77B5EC(&qword_256EA85D0, type metadata accessor for TranscriptProtoActionParameterContext, (uint64_t)&unk_256EA85D8);
}

void sub_23F77BCB0()
{
  sub_23F77B5EC(&qword_256EA85C0, type metadata accessor for TranscriptProtoQueryData, (uint64_t)&unk_256EA85C8);
}

void sub_23F77BCDC()
{
  sub_23F77B5EC(&qword_256EA8658, type metadata accessor for TranscriptProtoSystemPromptResolutionUserAction, (uint64_t)&unk_256EA8660);
}

void sub_23F77BD08()
{
  sub_23F77B5EC(&qword_256EA8648, type metadata accessor for TranscriptProtoSystemPromptResolutionInput, (uint64_t)&unk_256EA8650);
}

void sub_23F77BD34()
{
  sub_23F77B72C(&qword_256EA3268, (uint64_t (*)(_QWORD))MEMORY[0x24BEB96E0], (uint64_t)&unk_256EA8630);
}

void sub_23F77BD60()
{
  sub_23F77B5EC(&qword_256EA84C8, type metadata accessor for ContextProtoRetrievedContext, (uint64_t)&qword_256EA84D0);
}

void sub_23F77BD8C()
{
  sub_23F77B5EC(&qword_256EA8578, type metadata accessor for TranscriptProtoExpression, (uint64_t)&unk_256EA8580);
}

void sub_23F77BDB8()
{
  sub_23F77B5EC(&qword_256EA85F0, type metadata accessor for TranscriptProtoRequestPrescribedPlanEnum, (uint64_t)&unk_256EA85F8);
}

void sub_23F77BDE4()
{
  sub_23F77B5EC(&qword_256EA84B8, type metadata accessor for ContextProtoDynamicEnumerationEntity, (uint64_t)&qword_256EA84C0);
}

void sub_23F77BE10()
{
  sub_23F77B5EC(&qword_256EA8678, type metadata accessor for TranscriptProtoPlanGenerationErrorEnum, (uint64_t)&unk_256EA8680);
}

void sub_23F77BE3C()
{
  sub_23F77B5EC(&qword_256EA8688, type metadata accessor for TranscriptProtoRecoverableErrorEnum, (uint64_t)&unk_256EA8690);
}

void sub_23F77BE68()
{
  sub_23F77B72C(&qword_256EA86E0, (uint64_t (*)(_QWORD))MEMORY[0x24BE5B990], (uint64_t)&unk_256EA86E8);
}

void sub_23F77BE94()
{
  sub_23F77B5EC(&qword_256EA8588, type metadata accessor for TranscriptProtoCandidatePromptStatus, (uint64_t)&unk_256EA8590);
}

void sub_23F77BEC0()
{
  sub_23F77B5EC(&qword_256EA8718, type metadata accessor for TranscriptProtoPayload, (uint64_t)&unk_256EA8720);
}

void sub_23F77BEEC()
{
  sub_23F77B5EC(&qword_256EA8708, type metadata accessor for TranscriptProtoTimepoint, (uint64_t)&unk_256EA8710);
}

void sub_23F77BF18()
{
  sub_23F77B5EC(&qword_256EA86A0, type metadata accessor for TranscriptProtoRequestContent, (uint64_t)&unk_256EA86A8);
}

void sub_23F77BF44()
{
  sub_23F77B5EC(&qword_256EA84D8, type metadata accessor for TranscriptProtoToolParameterValue, (uint64_t)&qword_256EA84E0);
}

void sub_23F77BF70()
{
  sub_23F77B5EC(&qword_256EA7E70, type metadata accessor for TranscriptProtoStatementOutcome, (uint64_t)&unk_256EA8770);
}

void sub_23F77BF9C()
{
  sub_23F77B5EC(&qword_256EA8638, type metadata accessor for TranscriptProtoStatementResultPayload, (uint64_t)&unk_256EA8640);
}

uint64_t sub_23F77BFC8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;

  if ((a2 & 1) != 0)
  {
    sub_23F6916B8(&qword_256EA8760);
    v3 = sub_23F77E1B4();
    sub_23F77DC54();
    sub_23F6B5AD4();
    *v4 = v3;
    v4[1] = v2;
    return sub_23F77D9E4();
  }
  return result;
}

void sub_23F77C03C()
{
  sub_23F77B5EC(&qword_256EA2EB8, type metadata accessor for ContextProtoMatchProperties, (uint64_t)&unk_256EA8730);
}

void sub_23F77C068()
{
  sub_23F77B5EC(&qword_256EA7FF8, type metadata accessor for TranscriptProtoStatementOutcomeEnum, (uint64_t)&unk_256EA8768);
}

void sub_23F77C094()
{
  StatementResultDigest.init(transcript:)();
}

uint64_t sub_23F77C0A8()
{
  return sub_23F771CAC();
}

void ResponseGenerationProtoStatementResultDigest.init(rg:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  sub_23F6B5220();
  v82 = v2;
  v83 = v7;
  v77 = v8;
  v76 = (int *)type metadata accessor for ResponseGenerationProtoStatementResultDigest(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B51A4();
  v75 = v10;
  sub_23F6916B8(&qword_256EA8150);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  v78 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA7E50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B51A4();
  v81 = v14;
  sub_23F6916B8(&qword_256EA2780);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B5C10(v16, v71);
  sub_23F6916B8(&qword_256EA7E60);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  v80 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23FB2D0DC();
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B5208();
  sub_23F6916B8(&qword_256EA7E70);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA8148);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA7E80);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F6B59F8();
  sub_23F6916B8(&qword_256EA8140);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B5298();
  sub_23F6916B8(&qword_256EA3268);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F693EB0();
  sub_23F6B4F58(v83, v0, &qword_256EA8140);
  v28 = v82;
  sub_23F77C6C0();
  if (!v28)
  {
    v73 = v6;
    v74 = v5;
    v82 = v19;
    v30 = v81;
    v31 = (int *)type metadata accessor for StatementResultDigest(0);
    sub_23F6B6A10(v83 + v31[5], (uint64_t)v24);
    sub_23F77D690();
    v72 = v1;
    v32 = v83 + v31[6];
    v33 = v32 + *(int *)(type metadata accessor for StatementResult(0) + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v4, v33, v82);
    v34 = v74;
    TranscriptProtoStatementOutcome.init(handwritten:)(v4, v35, v36, v37, v38, v39, v40, v41, v71, v72, v73, v74, v75, (uint64_t)v76, v77, v78, v79, v80, v81,
      v82);
    v42 = type metadata accessor for TranscriptProtoStatementOutcome(0);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v34, 0, 1, v42);
    v43 = *(unsigned __int8 *)(v83 + v31[7]);
    if (v43 == 2)
      v44 = 2;
    else
      v44 = v43 & 1;
    LODWORD(v82) = v44;
    v45 = type metadata accessor for StatementResultPayload(0);
    v46 = v79;
    sub_23F6B6A10(v33 + *(int *)(v45 + 20), v79);
    sub_23F77D058();
    v79 = v42;
    sub_23F77E6E0();
    sub_23F6B4F58(v47, v48, v49);
    sub_23F77C870(v46, v30);
    v50 = v72;
    v51 = v3;
    v52 = sub_23FB2EBC4();
    v53 = v75;
    sub_23F6B5A8C(v75, v54, v55, v52);
    v56 = v76;
    v78 = v53 + v76[5];
    v57 = v78;
    v58 = type metadata accessor for TranscriptProtoAction(0);
    sub_23F6B5A8C(v57, v59, v60, v58);
    v61 = v53 + v56[6];
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v61, 1, 1, v79);
    v62 = v56[7];
    *(_BYTE *)(v53 + v62) = 2;
    v63 = v53 + v56[8];
    v64 = type metadata accessor for TranscriptProtoResponseManifest(0);
    sub_23F6B5A8C(v63, v65, v66, v64);
    v67 = v53 + v56[9];
    v68 = sub_23FB2EBA0();
    sub_23F6B5A8C(v67, v69, v70, v68);
    _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
    sub_23F710E80(v51, v53, &qword_256EA3268);
    sub_23F710E80(v50, v78, &qword_256EA7E80);
    sub_23F710E80(v74, v61, &qword_256EA7E70);
    *(_BYTE *)(v53 + v62) = v82;
    sub_23F710E80(v80, v63, &qword_256EA7E60);
    sub_23F710E80(v81, v67, &qword_256EA7E50);
    sub_23F6F594C(v53, v77, type metadata accessor for ResponseGenerationProtoStatementResultDigest);
  }
  sub_23F77E124(v29, type metadata accessor for StatementResultDigest);
  sub_23F6B5100();
}

void sub_23F77C658()
{
  sub_23F77C6C0();
}

void sub_23F77C68C()
{
  sub_23F77C6C0();
}

void sub_23F77C6C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(_QWORD);
  uint64_t (*v6)(_QWORD);
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  void (*v32)(uint64_t);
  uint64_t v33;
  _QWORD v34[3];
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;

  sub_23F6B5220();
  v35 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v37 = v11;
  v36 = sub_23F6F0918(v9, v12);
  v34[2] = *(_QWORD *)(v36 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v34 - v15;
  sub_23F6916B8(v8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B5298();
  v18 = v6(0);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F77DC18();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F77E490();
  sub_23F6B71D0(v10, v0);
  v21 = sub_23F77E654();
  sub_23F6B5164(v21, v22, v18);
  if (v23)
  {
    sub_23F6D3930(v10);
    sub_23F6D3930(v0);
    v24 = 1;
    v25 = v37;
LABEL_7:
    sub_23F77E598(v25, v24);
    goto LABEL_8;
  }
  v34[1] = v16;
  sub_23F6B633C(v3, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  v26 = sub_23F6B63E8();
  v29 = sub_23F6B633C(v26, v27, v28);
  v35(v29);
  if (!v1)
  {
    sub_23F77E234((uint64_t)v6);
    v30 = sub_23F77E19C();
    v32 = v31;
    v31(v30);
    sub_23F6D3930(v10);
    sub_23F77E234(v3);
    v25 = v37;
    v33 = sub_23F6B5994();
    v32(v33);
    v24 = 0;
    goto LABEL_7;
  }
  sub_23F77E234((uint64_t)v6);
  sub_23F6D3930(v10);
  sub_23F77E234(v3);
LABEL_8:
  sub_23F6B5100();
}

uint64_t sub_23F77C870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v3 = sub_23FB2EBA0();
  v21 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23F6916B8(&qword_256EA8150);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23FB2EF6C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v21 - v14;
  sub_23F6B4F58(a1, (uint64_t)v8, &qword_256EA8150);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_23F6B4F84(a1, &qword_256EA8150);
    sub_23F6B4F84((uint64_t)v8, &qword_256EA8150);
    v16 = 1;
    v17 = v22;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    sub_23FB2EF60();
    v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v13, v9);
    sub_23F6B4F84(a1, &qword_256EA8150);
    v18(v15, v9);
    v19 = v22;
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v22, v5, v3);
    v16 = 0;
    v17 = v19;
  }
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v17, v16, 1, v3);
}

uint64_t sub_23F77CA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v8 = type metadata accessor for TranscriptProtoExternalAgentRequestRewriteMetadata(0);
    sub_23F6B6548();
    sub_23F6B5F1C();
    _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
    sub_23F77D90C(a1, a2);
    *a4 = a1;
    a4[1] = a2;
    a4[2] = a3;
    v9 = (uint64_t)a4;
    v10 = 0;
    v11 = v8;
  }
  else
  {
    v11 = type metadata accessor for TranscriptProtoExternalAgentRequestRewriteMetadata(0);
    v9 = (uint64_t)a4;
    v10 = 1;
  }
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v9, v10, 1, v11);
}

void sub_23F77CB14()
{
  sub_23F77D058();
}

void sub_23F77CB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  sub_23F6B5220();
  v3 = sub_23F77E514();
  v18 = type metadata accessor for TranscriptProtoStatementID(v3);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B53AC();
  sub_23F6B6E54();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F77DB24();
  v6 = sub_23FB2C764();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F77DC18();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F77DD34();
  sub_23F6B5164(v2, 1, v6);
  if (v9)
  {
    sub_23F6B64F4(v17);
    sub_23F6B64F4(v2);
    v15 = 1;
  }
  else
  {
    sub_23F77E110();
    sub_23F77E188();
    v16 = sub_23FB2C758();
    v10 = sub_23FB2C740();
    v12 = v11;
    sub_23F77E628();
    *(_DWORD *)v1 = v16;
    *(_QWORD *)(v1 + 8) = v10;
    *(_QWORD *)(v1 + 16) = v12;
    sub_23F77E264();
    sub_23F6B4F84(v17, &qword_256EA49D8);
    v13 = sub_23F77E58C();
    sub_23F77E648(v13, v14, type metadata accessor for TranscriptProtoStatementID);
    v15 = 0;
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, v15, 1, v18);
  sub_23F6B5100();
}

void sub_23F77CC74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23F6B5220();
  v8 = sub_23F77E044(v7);
  v38 = type metadata accessor for TranscriptProtoPromptSelection(v8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5F6C();
  sub_23F6916B8(&qword_256EA2750);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F77E1CC();
  v12 = sub_23FB2D040();
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B5CB8();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F72E2B0();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - v16;
  v18 = sub_23F77E680();
  sub_23F6B4F58(v18, v19, &qword_256EA2750);
  v20 = sub_23F77E1A8();
  sub_23F6B5164(v20, v21, v12);
  if (v22)
  {
    sub_23F6B64F4(v3);
    sub_23F6B64F4(v1);
    v23 = 1;
    v24 = v39;
LABEL_11:
    sub_23F77DD6C(v24, v23);
    sub_23F6B5100();
    return;
  }
  v37 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v17, v1, v12);
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 16);
  v25((uint64_t)v6, v17, v12);
  v25((uint64_t)v0, v6, v12);
  v26 = sub_23F77E668();
  v28 = v27(v26);
  v29 = v28;
  v30 = *MEMORY[0x24BE53140];
  if (v28 == *MEMORY[0x24BE53140])
  {
    v32 = sub_23F77E668();
    v33(v32);
    v31 = *v0;
    goto LABEL_10;
  }
  if (v28 == *MEMORY[0x24BE53150])
  {
    v31 = 0;
LABEL_10:
    *(_QWORD *)v5 = 0;
    *(_WORD *)(v5 + 8) = 256;
    _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
    v34 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v34((uint64_t)v6, v12);
    sub_23F77E12C(v5, v4);
    *(_QWORD *)v4 = v31;
    *(_WORD *)(v4 + 8) = v29 != v30;
    sub_23F6B4F84(v37, &qword_256EA2750);
    v35 = sub_23F6D3D70();
    ((void (*)(uint64_t))v34)(v35);
    v24 = v39;
    sub_23F77E12C(v4, v39);
    v23 = 0;
    goto LABEL_11;
  }
  if (v28 == *MEMORY[0x24BE53148])
  {
    v31 = 1;
    goto LABEL_10;
  }
  sub_23FB2FB6C();
  __break(1u);
}

void sub_23F77CEC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_23F6B5220();
  v3 = sub_23F77E514();
  v28 = type metadata accessor for TranscriptProtoResponseDialog(v3);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B53AC();
  sub_23F6B6E54();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F77DB24();
  v6 = sub_23FB2CD4C();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F77DC18();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F77DD34();
  sub_23F6B5164(v2, 1, v6);
  if (v9)
  {
    sub_23F6B64F4(v27);
    sub_23F6B64F4(v2);
    v21 = 1;
  }
  else
  {
    sub_23F77E110();
    sub_23F77E188();
    v10 = sub_23FB2CD34();
    v25 = v11;
    v12 = sub_23FB2CD40();
    v23 = v13;
    v24 = v12;
    v26 = v0;
    v14 = sub_23FB2CD10();
    v22 = v15;
    v16 = sub_23FB2CD1C();
    v18 = v17;
    sub_23F77E628();
    *v1 = v10;
    v1[1] = v25;
    v1[2] = v24;
    v1[3] = v23;
    v1[4] = v14;
    v0 = v26;
    v1[5] = v22;
    v1[6] = v16;
    v1[7] = v18;
    sub_23F77E264();
    sub_23F6B4F84(v27, &qword_256EA8558);
    v19 = sub_23F77E58C();
    sub_23F77E648(v19, v20, type metadata accessor for TranscriptProtoResponseDialog);
    v21 = 0;
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, v21, 1, v28);
  sub_23F6B5100();
}

void sub_23F77D024()
{
  sub_23F77D058();
}

void sub_23F77D058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  sub_23F6B5220();
  v7 = v6;
  sub_23F77E0BC(v8, v9);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F77E1E8();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  v12 = sub_23F77DDF0();
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v14);
  v15 = sub_23F77E6CC();
  sub_23F6B568C(v15, v4);
  v16 = sub_23F77E3D0();
  sub_23F6B5164(v16, v17, v12);
  if (v18)
  {
    sub_23F6B62DC(v3);
    sub_23F6B62DC(v4);
    v20 = 1;
LABEL_7:
    sub_23F77E370(v19, v20);
    goto LABEL_8;
  }
  sub_23F77DB9C(v7, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
  sub_23F77DB9C(v2, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  sub_23F77DDE4();
  v21 = sub_23F72E430();
  if (!v0)
  {
    sub_23F6B4F84(v21, v22);
    sub_23F6B6178(v7, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_23F77E2C4(v5);
    v20 = 0;
    goto LABEL_7;
  }
  sub_23F6B4F84(v21, v22);
  sub_23F6B6178(v7, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
LABEL_8:
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F77D180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(uint64_t, char *, uint64_t);
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  int v44;
  BOOL v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;

  sub_23F6B5220();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  a10 = v28;
  sub_23F6B5D90();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F70D7F8();
  v30 = sub_23FB2D04C();
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F77DA54();
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&a9 - v34;
  v36 = sub_23F6B63E8();
  sub_23F6B58F8(v36, v37);
  v38 = sub_23F77DCB8();
  sub_23F6B5164(v38, v39, v30);
  if (v45)
  {
    sub_23F6B62DC(v27);
    sub_23F6B62DC(v23);
    v40 = 2;
LABEL_10:
    *a10 = v40;
    goto LABEL_11;
  }
  sub_23F75E710((uint64_t)v35, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
  v41 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
  v41(v22, v35, v30);
  v41(v21, (char *)v22, v30);
  v42 = sub_23F72E430();
  v44 = v43(v42);
  v45 = v44 == *MEMORY[0x24BE53220] || v44 == *MEMORY[0x24BE53218];
  if (v45)
  {
    v40 = v44 != *MEMORY[0x24BE53220];
    v46 = sub_23F77DD5C(v22);
    sub_23F77DC10(v46, &qword_256EA8548);
    sub_23F77DD5C((uint64_t)v35);
    goto LABEL_10;
  }
  sub_23F779AF8();
  sub_23F6B5AD4();
  *v47 = 0;
  sub_23F77D9E4();
  sub_23F77DD5C(v22);
  v48 = sub_23F77DD5C(v21);
  sub_23F77DC10(v48, &qword_256EA8548);
  sub_23F77DD5C((uint64_t)v35);
LABEL_11:
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F77D32C()
{
  sub_23F77D058();
}

void sub_23F77D360()
{
  sub_23F77D058();
}

void sub_23F77D394()
{
  sub_23F77D058();
}

void sub_23F77D3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_23F6B5220();
  v45 = v5;
  v7 = v6;
  v8 = sub_23FB2C4B8();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23F70D7F8();
  v46 = type metadata accessor for TranscriptProtoUndoContext(v10);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA8560);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23F77DE0C();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v39 - v16;
  v44 = v7;
  v18 = sub_23F77E680();
  sub_23F6B4F58(v18, v19, &qword_256EA8560);
  v20 = sub_23F77E1A8();
  sub_23F6B5164(v20, v21, v13);
  if (v22)
  {
    sub_23F6B64F4(v44);
    sub_23F6B64F4(v0);
    v37 = 1;
    v38 = v45;
  }
  else
  {
    v23 = sub_23F6B5994();
    sub_23F77DB9C(v23, v24, v25);
    sub_23F77DB9C(v1, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    sub_23FB2C830();
    v26 = sub_23FB2C488();
    v40 = v27;
    v41 = v26;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v4, v43);
    v28 = sub_23FB2C818();
    v30 = v29;
    v31 = sub_23FB2C824();
    v33 = v32;
    sub_23F77E628();
    v34 = v40;
    *v3 = v41;
    v3[1] = v34;
    v3[2] = v28;
    v3[3] = v30;
    v3[4] = v31;
    v3[5] = v33;
    v35 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v35(v1, v13);
    sub_23F6B4F84(v44, &qword_256EA8560);
    v35((uint64_t)v17, v13);
    v36 = v45;
    sub_23F6F594C((uint64_t)v3, v45, type metadata accessor for TranscriptProtoUndoContext);
    v37 = 0;
    v38 = v36;
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v38, v37, 1, v46);
  sub_23F6B5100();
}

void sub_23F77D5AC()
{
  sub_23F77D058();
}

void sub_23F77D5E0(unsigned __int8 a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a1;
  type metadata accessor for TranscriptProtoRequestPrescribedPlan(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B59E0();
  if (v5 > 0xFD)
  {
    v7 = sub_23F77E1A8();
LABEL_5:
    sub_23F77DD78(v7, v8);
    goto LABEL_6;
  }
  TranscriptProtoRequestPrescribedPlan.init(handwritten:)();
  if (!v2)
  {
    sub_23F6F594C(v3, a2, type metadata accessor for TranscriptProtoRequestPrescribedPlan);
    v7 = a2;
    v8 = 0;
    goto LABEL_5;
  }
LABEL_6:
  sub_23F77E0B0();
  sub_23F6D3710();
}

void sub_23F77D690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  sub_23F6B5220();
  v23[1] = v4;
  v23[2] = v5;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v23[3] = sub_23F6F0918(v10, v4);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v23 - v13;
  sub_23F6916B8(v9);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_23F77E1CC();
  v17 = v7(v16);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B6618();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F77E490();
  sub_23F6B71D0(v11, v0);
  sub_23F6B5164(v0, 1, v17);
  if (v20)
  {
    sub_23F6D3930(v11);
    sub_23F6D3930(v0);
    v22 = 1;
LABEL_6:
    sub_23F77E370(v21, v22);
    goto LABEL_7;
  }
  sub_23F77E380();
  sub_23F77E534(v3, v2);
  sub_23F77DDE4();
  sub_23F6D3930(v11);
  sub_23F77E330(v3);
  if (!v1)
  {
    sub_23F77E2C4((uint64_t)v14);
    v22 = 0;
    goto LABEL_6;
  }
LABEL_7:
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F77D7BC()
{
  ResponseGenerationProtoStatementResultDigest.init(rg:)();
}

_UNKNOWN **sub_23F77D7D0()
{
  return &protocol witness table for ResponseGenerationProtoResponseGenerationInput;
}

void sub_23F77D7DC(uint64_t a1)
{
  uint64_t v2;

  sub_23F6D3458(&qword_256EA8398, type metadata accessor for ResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationInput);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_23F77D818()
{
  sub_23F6D3458((unint64_t *)&qword_256EA7EB8, type metadata accessor for ResponseGenerationProtoResponseGenerationInput, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoResponseGenerationInput);
}

_UNKNOWN **sub_23F77D844()
{
  return &protocol witness table for ResponseGenerationProtoStatementResultDigest;
}

void sub_23F77D850(uint64_t a1)
{
  uint64_t v2;

  sub_23F6D3458(&qword_256EA8438, type metadata accessor for StatementResultDigest, (uint64_t)&protocol conformance descriptor for StatementResultDigest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_23F77D88C()
{
  sub_23F6D3458(&qword_256EA7E38, type metadata accessor for ResponseGenerationProtoStatementResultDigest, (uint64_t)&protocol conformance descriptor for ResponseGenerationProtoStatementResultDigest);
}

uint64_t dispatch thunk of ConvertibleFromResponseGenerationProtocol.init(rg:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unint64_t sub_23F77D8D0()
{
  unint64_t result;

  result = qword_256EA8498;
  if (!qword_256EA8498)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for TranscriptConversion.Error, &type metadata for TranscriptConversion.Error);
    atomic_store(result, (unint64_t *)&qword_256EA8498);
  }
  return result;
}

uint64_t sub_23F77D90C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23F77D93C()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_23F77D948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v2;
  sub_23F6F594C(v4, v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 104) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 104) + 80))+ *(_QWORD *)(*(_QWORD *)(v5 - 104) + 72) * v1, v3);
}

void sub_23F77D978()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F6F5920(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 96) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 96) + 80))+ *(_QWORD *)(*(_QWORD *)(v3 - 96) + 72) * v2, *(_QWORD *)(v3 - 136), v0);
}

uint64_t sub_23F77D9A4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23F77D9AC()
{
  return sub_23FB2F17C();
}

uint64_t sub_23F77D9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = v1;
  return *(_QWORD *)(v2 - 88);
}

uint64_t sub_23F77D9E4()
{
  return swift_willThrow();
}

BOOL sub_23F77D9EC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_23F77DA04@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_23F77DA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return 0;
}

void sub_23F77DA34(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

void sub_23F77DA3C()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23F6F5920(*(_QWORD *)(v4 - 120) + *(_QWORD *)(v2 + 72) * v1, v3, v0);
}

BOOL sub_23F77DA64@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_23F77DA7C()
{
  return swift_release();
}

unint64_t sub_23F77DA84()
{
  return sub_23F77D8D0();
}

uint64_t sub_23F77DA90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77DAA0()
{
  return 0;
}

void sub_23F77DAB0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6D3508(a1, v1);
}

uint64_t sub_23F77DAE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return 0;
}

void sub_23F77DAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 136) = (char *)&a9 - v9;
}

void sub_23F77DB10(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

uint64_t sub_23F77DB24()
{
  return 0;
}

unint64_t sub_23F77DB40()
{
  return sub_23F77D8D0();
}

uint64_t sub_23F77DB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v0, v1);
}

void sub_23F77DB60(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6D3508(a1, v1);
}

void sub_23F77DB68(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6D3508(a1, v1);
}

uint64_t sub_23F77DB70()
{
  return swift_release();
}

void sub_23F77DB78(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

void sub_23F77DB80(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6D3508(a1, v1);
}

void sub_23F77DB94(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(v2, a2);
}

uint64_t sub_23F77DB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

unint64_t sub_23F77DBA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return v1
       + ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))
       + *(_QWORD *)(v0 + 72) * v2;
}

uint64_t sub_23F77DBF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23FB2C764();
}

void sub_23F77DC08(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F594C(a1, a2, v2);
}

void sub_23F77DC10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23F6B4F84(v2, a2);
}

uint64_t sub_23F77DC34@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v1;

  return sub_23F77B94C(a1 | ((unint64_t)v1 << 32));
}

unint64_t sub_23F77DC54()
{
  return sub_23F77D8D0();
}

void sub_23F77DC5C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

uint64_t sub_23F77DC64()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 192) + 8))(v0, *(_QWORD *)(v1 - 96));
}

void sub_23F77DC78(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

uint64_t sub_23F77DC80(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_23F77DC88()
{
  uint64_t v0;

  return v0;
}

void sub_23F77DC98(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F594C(a1, a2, v2);
}

BOOL sub_23F77DCA0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_23F77DCB8()
{
  uint64_t v0;

  return v0;
}

void sub_23F77DCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v1;
  *(_QWORD *)(v2 - 144) = v0;
}

uint64_t sub_23F77DCD4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F77DCDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return 0;
}

uint64_t sub_23F77DCF4()
{
  uint64_t v0;

  return v0;
}

void sub_23F77DD24(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23F6B4F84(v2, a2);
}

void sub_23F77DD2C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(v2, a2);
}

void sub_23F77DD34()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 88) = v1;
  sub_23F6B4F58(v1, v2, v0);
}

uint64_t sub_23F77DD54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_23F77DD5C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_23F77DD64(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23F6B4F84(v2, a2);
}

uint64_t sub_23F77DD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, 1, v2);
}

uint64_t sub_23F77DD78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, 1, v2);
}

uint64_t sub_23F77DD84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 152))(a1, a2, 1);
}

uint64_t sub_23F77DD90()
{
  return sub_23FB2C74C();
}

uint64_t sub_23F77DDA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23FB2EB1C();
}

uint64_t sub_23F77DDB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for TranscriptProtoStatementID(0);
}

uint64_t sub_23F77DDC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23FB2ED38();
}

uint64_t sub_23F77DDE4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 96))();
}

uint64_t sub_23F77DDF0()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_23F77DE0C()
{
  return sub_23FB2C848();
}

uint64_t sub_23F77DE28()
{
  return sub_23FB2ED2C();
}

uint64_t sub_23F77DE34(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_23F77DE3C()
{
  return swift_bridgeObjectRelease();
}

void sub_23F77DE44()
{
  sub_23F711ED4();
}

void sub_23F77DE5C()
{
  sub_23F711D04();
}

void sub_23F77DE74()
{
  sub_23F712204();
}

void sub_23F77DE8C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

void sub_23F77DE94()
{
  sub_23F711E5C();
}

void sub_23F77DEAC()
{
  sub_23F7120B4();
}

void sub_23F77DEC4()
{
  sub_23F712194();
}

void sub_23F77DEDC()
{
  sub_23F7111CC();
}

void sub_23F77DEF4()
{
  sub_23F711DA8();
}

void sub_23F77DF0C()
{
  sub_23F712204();
}

void sub_23F77DF24()
{
  sub_23F712240();
}

void sub_23F77DF3C()
{
  sub_23F712000();
}

void sub_23F77DF54()
{
  sub_23F712158();
}

void sub_23F77DF6C()
{
  sub_23F712330();
}

void sub_23F77DF84()
{
  sub_23F7120F0();
}

void sub_23F77DF9C()
{
  sub_23F711D04();
}

void sub_23F77DFB4()
{
  sub_23F71203C();
}

void sub_23F77DFCC()
{
  sub_23F711FC4();
}

void sub_23F77DFE4()
{
  sub_23F711244();
}

void sub_23F77DFFC()
{
  sub_23F711D40();
}

void sub_23F77E014()
{
  sub_23F711F10();
}

void sub_23F77E02C()
{
  sub_23F711D74();
}

uint64_t sub_23F77E044@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = v1;
  *(_QWORD *)(v2 - 88) = a1;
  return 0;
}

unint64_t sub_23F77E068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return v0
       + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
       + *(_QWORD *)(v2 + 72) * v1;
}

uint64_t sub_23F77E088()
{
  return sub_23FB2DE14();
}

uint64_t sub_23F77E0BC@<X0>(uint64_t (*a1)(_QWORD)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = a2;
  return a1(0);
}

void sub_23F77E0D4(uint64_t (*a1)(_QWORD)@<X1>, uint64_t a2@<X8>)
{
  sub_23F6D3508(*(_QWORD *)(a2 - 256), a1);
}

uint64_t sub_23F77E0DC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_23F77E104@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(v1 - 128));
}

uint64_t sub_23F77E110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v2, v3, v1);
}

void sub_23F77E124(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(*(_QWORD *)(v2 - 72), a2);
}

void sub_23F77E12C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F594C(a1, a2, v2);
}

unint64_t sub_23F77E134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return v1
       + ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))
       + *(_QWORD *)(v0 + 72) * v2;
}

unint64_t sub_23F77E150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return v1
       + ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))
       + *(_QWORD *)(v0 + 72) * v2;
}

uint64_t sub_23F77E188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v0, v3, v2);
}

uint64_t sub_23F77E19C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77E1A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77E1B4()
{
  return sub_23FB2F17C();
}

uint64_t sub_23F77E1CC()
{
  return 0;
}

uint64_t sub_23F77E1E8()
{
  uint64_t *v0;

  return sub_23F6916B8(v0);
}

uint64_t sub_23F77E1FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F77E204()
{
  return sub_23FB2ED2C();
}

uint64_t sub_23F77E224@<X0>(uint64_t (*a1)(_QWORD, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v1 - 256), v2);
}

uint64_t sub_23F77E234(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_23F77E23C@<X0>(uint64_t (*a1)(_QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 256));
}

void sub_23F77E244(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(*(_QWORD *)(v2 - 104), a2);
}

uint64_t sub_23F77E24C()
{
  return sub_23FB2C74C();
}

uint64_t sub_23F77E25C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_23F77E264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_23F77E274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

BOOL sub_23F77E27C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_23F77E294@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_23F77E2AC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F594C(a1, a2, v2);
}

void sub_23F77E2C4(uint64_t a1)
{
  uint64_t v1;

  sub_23F6F594C(a1, *(_QWORD *)(v1 - 72), *(uint64_t (**)(_QWORD))(v1 - 104));
}

uint64_t sub_23F77E2E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for ContextProtoDynamicEnumerationEntity(0);
}

uint64_t sub_23F77E2F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23FB2ED5C();
}

uint64_t sub_23F77E304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23FB2E2DC();
}

uint64_t sub_23F77E314@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23FB2EB28();
}

uint64_t sub_23F77E324()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 256);
}

void sub_23F77E330(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6D3508(a1, v1);
}

uint64_t sub_23F77E358(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_23F77E360@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + *(int *)(*(_QWORD *)(a1 - 256) + 20);
}

uint64_t sub_23F77E370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v2, a2, 1, *(_QWORD *)(v3 - 88));
}

void sub_23F77E380()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_23F6F594C(v0, v2, v1);
}

uint64_t sub_23F77E390()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77E3A0()
{
  return sub_23FB2DC34();
}

uint64_t sub_23F77E3D0()
{
  uint64_t v0;

  return v0;
}

void sub_23F77E3DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23F6B4F84(v2, a2);
}

uint64_t sub_23F77E3E4(uint64_t *a1)
{
  return sub_23F6916B8(a1);
}

uint64_t sub_23F77E3F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return 0;
}

uint64_t sub_23F77E40C()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(*(_QWORD *)(v1 - 192) + 20);
}

uint64_t sub_23F77E430()
{
  return sub_23FB2F674();
}

uint64_t sub_23F77E44C()
{
  return sub_23FB2F050();
}

uint64_t sub_23F77E45C()
{
  return sub_23FB2F89C();
}

uint64_t sub_23F77E46C()
{
  uint64_t v0;

  return v0;
}

void sub_23F77E478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 120) = (char *)&a9 - v9;
}

void sub_23F77E4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 8 * v3 + 32) = v1;
}

uint64_t sub_23F77E4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_23F77E4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_23F77E4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v2 - 96) + *(_QWORD *)(v1 + 72) * v0;
}

uint64_t sub_23F77E4EC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_23F77E4F4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 368);
}

uint64_t sub_23F77E514()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  return 0;
}

uint64_t sub_23F77E528()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_23F77E534(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

uint64_t sub_23F77E53C()
{
  return swift_release();
}

uint64_t sub_23F77E548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v0 + 56) + *(_QWORD *)(*(_QWORD *)(v2 - 224) + 72) * v1;
}

uint64_t sub_23F77E55C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_23F77E564()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77E578()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_23F77E584()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F77E58C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_23F77E598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, 1, v2);
}

uint64_t sub_23F77E5A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 280));
}

void sub_23F77E5B0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(*(_QWORD *)(v2 - 112), a2);
}

void sub_23F77E5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  RetrievedContext.init(transcript:)(v23, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23);
}

void sub_23F77E5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  RetrievedTool.Definition.init(transcript:)(v10, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_23F77E5E8()
{
  return sub_23FB2F17C();
}

uint64_t sub_23F77E5F4()
{
  return sub_23FB2F17C();
}

uint64_t sub_23F77E600()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F77E608()
{
  uint64_t v0;

  return v0;
}

void sub_23F77E614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 480) = v1;
  *(_QWORD *)(v2 - 616) = v0;
}

uint64_t sub_23F77E628()
{
  return _s30IntelligenceFlowPlannerSupport033TranscriptProtoRequestContentStopH0VACycfC_0();
}

void sub_23F77E630()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = *(_QWORD *)(v0 - 112);
}

void sub_23F77E648(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_23F6F594C(v4, v3, a3);
}

uint64_t sub_23F77E654()
{
  uint64_t v0;

  return v0;
}

void sub_23F77E660(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23F6B4F84(v2, a2);
}

uint64_t sub_23F77E668()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77E680()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77E68C()
{
  return sub_23FB2DC28();
}

uint64_t sub_23F77E698()
{
  return type metadata accessor for ContextProtoRetrievedTool.Definition(0);
}

void sub_23F77E6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 200) = (char *)&a9 - v9;
}

void sub_23F77E6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 168) = (char *)&a9 - v9;
}

uint64_t sub_23F77E6CC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F77E714()
{
  return sub_23FB2E2AC();
}

uint64_t Result<>.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[10] = sub_23F77EA14(a1, a2, a3, a4, a5);
  v6[11] = *(_QWORD *)(v5 - 8);
  v6[12] = sub_23F750AE4();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F77E75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F77EA88();
  v1 = sub_23F77EAD8();
  v2 = *(_QWORD *)(v0 + 96);
  if ((_DWORD)v1 == 1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 24) - 8) + 32))(*(_QWORD *)(v0 + 16), v2, *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24));
    sub_23FB2FC98();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    return sub_23F77EA44(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    sub_23F77EAC4(v1, v2);
    v4 = (_QWORD *)sub_23F750B2C();
    v5 = sub_23F77EAA4(v4);
    return sub_23F77EA78(v5, v6, v7);
  }
}

uint64_t sub_23F77E814()
{
  sub_23F77EA58();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F77E840()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  sub_23FB2FC98();
  swift_storeEnumTagMultiPayload();
  sub_23F6F52B0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Result<>.asyncFlatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[10] = sub_23F77EA14(a1, a2, a3, a4, a5);
  v6[11] = *(_QWORD *)(v5 - 8);
  v6[12] = sub_23F750AE4();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F77E900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F77EA88();
  v1 = sub_23F77EAD8();
  v2 = *(_QWORD *)(v0 + 96);
  if ((_DWORD)v1 == 1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 24) - 8) + 32))(*(_QWORD *)(v0 + 16), v2, *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24));
    sub_23FB2FC98();
    swift_storeEnumTagMultiPayload();
    sub_23F77EAE4();
    sub_23F6F52B0();
    return sub_23F77EA44(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    sub_23F77EAC4(v1, v2);
    v4 = (_QWORD *)sub_23F750B2C();
    v5 = sub_23F77EAA4(v4);
    return sub_23F77EA78(v5, v6, v7);
  }
}

uint64_t sub_23F77E9A8()
{
  sub_23F77EA58();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F77E9D4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  sub_23F77EAE4();
  sub_23F6F52B0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F77EA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = *(_QWORD *)(a4 + 16);
  v6[8] = v7;
  v6[9] = *(_QWORD *)(v7 - 8);
  return swift_task_alloc();
}

uint64_t sub_23F77EA44(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F77EA58()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_23F77EA78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_23F77EA88()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[11] + 16))(v0[12], v0[7], v0[5]);
}

uint64_t sub_23F77EAA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_23F77EAC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v2[9] + 32))(v2[10], a2, v2[8]);
}

uint64_t sub_23F77EAD8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F77EAE4()
{
  return swift_task_dealloc();
}

uint64_t sub_23F77EAF0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023FB32ED0 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000023FB32EF0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23F77EC30(char a1)
{
  if (!a1)
    return 0x726568746FLL;
  if (a1 == 1)
    return 0xD000000000000017;
  return 0xD00000000000001ALL;
}

uint64_t sub_23F77EC88()
{
  char *v0;

  return sub_23F77EC30(*v0);
}

uint64_t sub_23F77EC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F77EAF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F77ECB4()
{
  sub_23F77F6BC();
  return sub_23FB2FD10();
}

uint64_t sub_23F77ECDC()
{
  sub_23F77F6BC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F77ED04()
{
  sub_23F77F6F8();
  return sub_23FB2FD10();
}

uint64_t sub_23F77ED2C()
{
  sub_23F77F6F8();
  return sub_23FB2FD1C();
}

uint64_t sub_23F77ED54()
{
  sub_23F77F734();
  return sub_23FB2FD10();
}

uint64_t sub_23F77ED7C()
{
  sub_23F77F734();
  return sub_23FB2FD1C();
}

uint64_t sub_23F77EDA4()
{
  sub_23F77F770();
  return sub_23FB2FD10();
}

uint64_t sub_23F77EDCC()
{
  sub_23F77F770();
  return sub_23FB2FD1C();
}

uint64_t sub_23F77EDF4()
{
  sub_23F6F2930(&qword_256EA8810, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  return sub_23FB2FC08();
}

uint64_t sub_23F77EE34()
{
  sub_23F6F2930(&qword_256EA8810, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  return sub_23FB2FBFC();
}

unint64_t static SessionCoordinatorError.errorDomainValue.getter()
{
  return 0xD000000000000017;
}

uint64_t SessionCoordinatorError.innerError.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v9;

  sub_23F78081C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F780748(v4, v9);
  v5 = sub_23FB2C6F8();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BE52080];
  a1[3] = v5;
  a1[4] = sub_23F6F2930(&qword_256EA4870, v6, (uint64_t)&protocol conformance descriptor for IntelligenceFlowError);
  v7 = sub_23F6F601C(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v7, v1, v5);
}

uint64_t type metadata accessor for SessionCoordinatorError()
{
  uint64_t result;

  result = qword_256EA8888;
  if (!qword_256EA8888)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23F77EF58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SessionCoordinatorError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SessionCoordinatorError.errorCodeValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_23F78081C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F780748(v2, v5);
  v3 = qword_23FB5D870[(int)swift_getEnumCaseMultiPayload()];
  sub_23F77F004(v0);
  return v3;
}

uint64_t sub_23F77F004(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SessionCoordinatorError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static SessionCoordinatorError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = sub_23FB2C6F8();
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F693E0C();
  v36 = v7;
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6D3A70();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - v10;
  sub_23F78081C();
  sub_23F693E20();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v35 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v35 - v19;
  sub_23F6916B8(&qword_256EA8788);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6BD134();
  v24 = v23 - v22;
  v26 = v23 - v22 + *(int *)(v25 + 48);
  sub_23F77EF58(a1, v23 - v22);
  sub_23F77EF58(a2, v26);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23F77EF58(v24, (uint64_t)v20);
    if (sub_23F7807A8())
    {
      v15 = v20;
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v11, v26, v38);
    v30 = sub_23FB2C6EC();
    sub_23F780808((uint64_t)v11);
    v33 = (uint64_t)v20;
LABEL_12:
    sub_23F780808(v33);
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_23F77EF58(v24, (uint64_t)v15);
    if (sub_23F7807A8() != 2)
      goto LABEL_10;
    v32 = v36;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v36, v26, v38);
    v30 = sub_23FB2C6EC();
    sub_23F780808(v32);
    v33 = (uint64_t)v15;
    goto LABEL_12;
  }
  sub_23F77EF58(v24, (uint64_t)v18);
  if (sub_23F7807A8() == 1)
  {
    v28 = v37;
    v29 = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v2, v26, v38);
    v30 = sub_23FB2C6EC();
    v31 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v31(v2, v29);
    v31((uint64_t)v18, v29);
LABEL_13:
    sub_23F77F004(v24);
    return v30 & 1;
  }
  v15 = v18;
LABEL_10:
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
  sub_23F77F2EC(v24);
  v30 = 0;
  return v30 & 1;
}

uint64_t sub_23F77F2EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA8788);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void SessionCoordinatorError.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v46 = sub_23F6916B8(&qword_256EA8790);
  v37 = *(_QWORD *)(v46 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B57F4(v3, v36);
  v4 = sub_23F6916B8(&qword_256EA8798);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v42 = v6;
  v7 = sub_23F6916B8(&qword_256EA87A0);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v47 = v9;
  v49 = sub_23F6F74E8();
  v10 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  sub_23F693E0C();
  v39 = v11;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v38 = (char *)&v36 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v36 - v15;
  type metadata accessor for SessionCoordinatorError();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6BD134();
  v20 = v19 - v18;
  v48 = *(_QWORD *)(sub_23F6916B8(&qword_256EA87A8) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6BD134();
  v24 = v23 - v22;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F77F6BC();
  sub_23FB2FCC8();
  sub_23F77EF58(v50, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v26 = v49;
    v27 = v10;
    if (EnumCaseMultiPayload == 1)
    {
      v28 = v38;
      sub_23F7807EC(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
      sub_23F780810();
      v29 = v42;
      sub_23F780768();
      sub_23F6F2930(&qword_256EA48B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52090]);
      v30 = v44;
      sub_23F780794();
      v31 = v43;
    }
    else
    {
      v28 = v39;
      sub_23F7807EC(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
      sub_23F7807FC();
      v29 = v45;
      sub_23F780768();
      sub_23F6F2930(&qword_256EA48B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52090]);
      v30 = v46;
      sub_23F780794();
      v31 = v37;
    }
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
    v16 = v28;
  }
  else
  {
    v32 = v20;
    v33 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v16, v32, v49);
    v51 = 0;
    sub_23F77F770();
    sub_23F780768();
    sub_23F6F2930(&qword_256EA48B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52090]);
    v34 = v41;
    sub_23FB2FB18();
    v26 = v33;
    v27 = v10;
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v47, v34);
  }
  v35 = v48;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v26);
  sub_23F6B530C(v24, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
  sub_23F6B5100();
}

unint64_t sub_23F77F6BC()
{
  unint64_t result;

  result = qword_256EA87B0;
  if (!qword_256EA87B0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D818, &type metadata for SessionCoordinatorError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA87B0);
  }
  return result;
}

unint64_t sub_23F77F6F8()
{
  unint64_t result;

  result = qword_256EA87B8;
  if (!qword_256EA87B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D7C8, &type metadata for SessionCoordinatorError.FailedToConvertClientEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA87B8);
  }
  return result;
}

unint64_t sub_23F77F734()
{
  unint64_t result;

  result = qword_256EA87C0;
  if (!qword_256EA87C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D778, &type metadata for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA87C0);
  }
  return result;
}

unint64_t sub_23F77F770()
{
  unint64_t result;

  result = qword_256EA87C8;
  if (!qword_256EA87C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D728, &type metadata for SessionCoordinatorError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA87C8);
  }
  return result;
}

void SessionCoordinatorError.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;

  v65 = a2;
  v64 = sub_23F6916B8(&qword_256EA87D0);
  v61 = *(_QWORD *)(v64 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  v67 = v5;
  v63 = sub_23F6916B8(&qword_256EA87D8);
  v60 = *(_QWORD *)(v63 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B57F4(v7, v52);
  v62 = sub_23F6916B8(&qword_256EA87E0);
  v59 = *(_QWORD *)(v62 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v66 = v9;
  v10 = sub_23F6916B8(&qword_256EA87E8);
  v68 = *(_QWORD *)(v10 - 8);
  v69 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6BD134();
  v14 = v13 - v12;
  v15 = type metadata accessor for SessionCoordinatorError();
  sub_23F693E20();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6D3A70();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v52 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v52 - v24;
  v26 = a1[3];
  v70 = a1;
  sub_23F6ADC98(a1, v26);
  sub_23F77F6BC();
  v27 = v71;
  sub_23FB2FCB0();
  if (v27)
    goto LABEL_2;
  v56 = v2;
  v57 = v19;
  v54 = v23;
  v55 = v25;
  v58 = v15;
  v29 = v69;
  v71 = v14;
  v30 = sub_23FB2FA94();
  v31 = *(_QWORD *)(v30 + 16);
  if (!v31)
  {
    v28 = (uint64_t)v70;
LABEL_10:
    v38 = v68;
    v39 = v58;
    v40 = sub_23FB2F818();
    swift_allocError();
    v42 = v41;
    sub_23F6916B8(&qword_256EA1870);
    *v42 = v39;
    v43 = v71;
    sub_23FB2FA04();
    sub_23FB2F80C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x24BEE26D0], v40);
    swift_willThrow();
    sub_23F780740();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, v29);
    goto LABEL_11;
  }
  v53 = 0;
  v32 = v29;
  v33 = *(unsigned __int8 *)(v30 + 32);
  sub_23F6B4E44(1, v31, v30, v30 + 32, 0, (2 * v31) | 1);
  v35 = v34;
  v37 = v36;
  swift_bridgeObjectRelease();
  if (v35 != v37 >> 1)
  {
    v28 = (uint64_t)v70;
    v29 = v32;
    goto LABEL_10;
  }
  if (v33)
  {
    if (v33 == 1)
    {
      sub_23F780810();
      sub_23F780778();
      sub_23F6F74E8();
      sub_23F6F2930(&qword_256EA48D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52098]);
      sub_23F7807B4();
      v28 = (uint64_t)v70;
      sub_23F780730(v60);
      sub_23F780740();
      sub_23F6B530C(v15, *(uint64_t (**)(uint64_t, uint64_t))(v68 + 8));
      v48 = v56;
    }
    else
    {
      sub_23F7807FC();
      sub_23F780778();
      sub_23F6F74E8();
      sub_23F6F2930(&qword_256EA48D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52098]);
      sub_23F7807B4();
      v28 = (uint64_t)v70;
      v47 = v68;
      sub_23F780730(v61);
      sub_23F780740();
      sub_23F6B530C(v15, *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
      v48 = (uint64_t)v57;
    }
    goto LABEL_16;
  }
  v72 = 0;
  sub_23F77F770();
  v44 = v53;
  sub_23FB2F9F8();
  if (!v44)
  {
    sub_23F6F74E8();
    sub_23F6F2930(&qword_256EA48D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52098]);
    v48 = (uint64_t)v54;
    sub_23FB2FA7C();
    v28 = (uint64_t)v70;
    sub_23F7807C8();
    sub_23F780740();
    v49 = sub_23F7807DC();
    sub_23F6B530C(v49, v50);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    v51 = (uint64_t)v55;
    sub_23F77FD88(v48, (uint64_t)v55);
    sub_23F77FD88(v51, v65);
    goto LABEL_11;
  }
  sub_23F780740();
  v45 = sub_23F7807DC();
  sub_23F6B530C(v45, v46);
LABEL_2:
  v28 = (uint64_t)v70;
LABEL_11:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v28);
  sub_23F6B5100();
}

unint64_t sub_23F77FD34()
{
  static SessionCoordinatorError.errorDomainValue.getter();
  return 0xD000000000000017;
}

void sub_23F77FD54(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SessionCoordinatorError.init(from:)(a1, a2);
}

void sub_23F77FD68(_QWORD *a1)
{
  SessionCoordinatorError.encode(to:)(a1);
}

uint64_t sub_23F77FD88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SessionCoordinatorError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F77FDCC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23F6F2930(&qword_256EA87F0, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  a1[2] = sub_23F6F2930(&qword_256EA87F8, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  a1[3] = sub_23F6F2930(&qword_256EA8800, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  result = sub_23F6F2930(&qword_256EA8808, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  a1[4] = result;
  return result;
}

uint64_t sub_23F77FE60(uint64_t a1)
{
  uint64_t result;

  result = sub_23F6F2930(&qword_256EA87F0, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23F77FE9C(uint64_t a1)
{
  uint64_t result;

  result = sub_23F6F2930(&qword_256EA8810, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23F77FED8()
{
  return sub_23F6F2930(&qword_256EA4850, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinatorError, (uint64_t)&protocol conformance descriptor for SessionCoordinatorError);
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionCoordinatorError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v6 = sub_23FB2C6F8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SessionCoordinatorError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 2)
  {
    v3 = sub_23FB2C6F8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t initializeWithCopy for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = sub_23FB2C6F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_23F77F004(a1);
    swift_getEnumCaseMultiPayload();
    v4 = sub_23FB2C6F8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = sub_23FB2C6F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_23F77F004(a1);
    swift_getEnumCaseMultiPayload();
    v4 = sub_23FB2C6F8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23F780238()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2C6F8();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SessionCoordinatorError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F7802EC + 4 * byte_23FB5D235[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F780320 + 4 * asc_23FB5D230[v4]))();
}

uint64_t sub_23F780320(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F780328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F780330);
  return result;
}

uint64_t sub_23F78033C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F780344);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23F780348(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F780350(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.CodingKeys()
{
  return &type metadata for SessionCoordinatorError.CodingKeys;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.OtherCodingKeys()
{
  return &type metadata for SessionCoordinatorError.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys()
{
  return &type metadata for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorO15OtherCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7803D0 + 4 * byte_23FB5D23A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F7803F0 + 4 * byte_23FB5D23F[v4]))();
}

_BYTE *sub_23F7803D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F7803F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7803F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F780400(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F780408(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F780410(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.FailedToConvertClientEventCodingKeys()
{
  return &type metadata for SessionCoordinatorError.FailedToConvertClientEventCodingKeys;
}

unint64_t sub_23F780430()
{
  unint64_t result;

  result = qword_256EA88C0;
  if (!qword_256EA88C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D4D8, &type metadata for SessionCoordinatorError.FailedToConvertClientEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88C0);
  }
  return result;
}

unint64_t sub_23F780470()
{
  unint64_t result;

  result = qword_256EA88C8;
  if (!qword_256EA88C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D590, &type metadata for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88C8);
  }
  return result;
}

unint64_t sub_23F7804B0()
{
  unint64_t result;

  result = qword_256EA88D0;
  if (!qword_256EA88D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D648, &type metadata for SessionCoordinatorError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88D0);
  }
  return result;
}

unint64_t sub_23F7804F0()
{
  unint64_t result;

  result = qword_256EA88D8;
  if (!qword_256EA88D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D700, &type metadata for SessionCoordinatorError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88D8);
  }
  return result;
}

unint64_t sub_23F780530()
{
  unint64_t result;

  result = qword_256EA88E0;
  if (!qword_256EA88E0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D5B8, &type metadata for SessionCoordinatorError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88E0);
  }
  return result;
}

unint64_t sub_23F780570()
{
  unint64_t result;

  result = qword_256EA88E8;
  if (!qword_256EA88E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D5E0, &type metadata for SessionCoordinatorError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88E8);
  }
  return result;
}

unint64_t sub_23F7805B0()
{
  unint64_t result;

  result = qword_256EA88F0;
  if (!qword_256EA88F0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D500, &type metadata for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88F0);
  }
  return result;
}

unint64_t sub_23F7805F0()
{
  unint64_t result;

  result = qword_256EA88F8;
  if (!qword_256EA88F8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D528, &type metadata for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA88F8);
  }
  return result;
}

unint64_t sub_23F780630()
{
  unint64_t result;

  result = qword_256EA8900;
  if (!qword_256EA8900)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D448, &type metadata for SessionCoordinatorError.FailedToConvertClientEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8900);
  }
  return result;
}

unint64_t sub_23F780670()
{
  unint64_t result;

  result = qword_256EA8908;
  if (!qword_256EA8908)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D470, &type metadata for SessionCoordinatorError.FailedToConvertClientEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8908);
  }
  return result;
}

unint64_t sub_23F7806B0()
{
  unint64_t result;

  result = qword_256EA8910;
  if (!qword_256EA8910)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D670, &type metadata for SessionCoordinatorError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8910);
  }
  return result;
}

unint64_t sub_23F7806F0()
{
  unint64_t result;

  result = qword_256EA8918;
  if (!qword_256EA8918)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D698, &type metadata for SessionCoordinatorError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8918);
  }
  return result;
}

uint64_t sub_23F780730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_23F780740()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23F780748@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return sub_23F77EF58(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_23F780768()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F780778()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F780794()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F7807A8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F7807B4()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F7807C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v1, v0);
}

uint64_t sub_23F7807DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7807EC@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v2, v1);
}

unint64_t sub_23F7807FC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_23F77F6F8();
}

uint64_t sub_23F780808(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

unint64_t sub_23F780810()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_23F77F734();
}

uint64_t sub_23F78081C()
{
  return type metadata accessor for SessionCoordinatorError();
}

uint64_t Session.SessionEnded.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23F72E034();
  return sub_23F6B64B0(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t Session.SessionEnded.init(sessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23F72E034();
  return sub_23F6B64B0(a2, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 32));
}

uint64_t sub_23F780888(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F780918()
{
  return 0x496E6F6973736573;
}

uint64_t sub_23F780938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F780888(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F780960()
{
  sub_23F780AB0();
  return sub_23FB2FD10();
}

uint64_t sub_23F780988()
{
  sub_23F780AB0();
  return sub_23FB2FD1C();
}

uint64_t Session.SessionEnded.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_23F6916B8(&qword_256EA8920);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6BD134();
  v6 = v5 - v4;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F780AB0();
  sub_23FB2FCC8();
  sub_23FB2C4B8();
  sub_23F780CC8(&qword_256EA6620, MEMORY[0x24BDCEA70]);
  sub_23FB2FB18();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
}

unint64_t sub_23F780AB0()
{
  unint64_t result;

  result = qword_256EA8928;
  if (!qword_256EA8928)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D9BC, &_s12SessionEndedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA8928);
  }
  return result;
}

uint64_t Session.SessionEnded.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = sub_23FB2C4B8();
  v16 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6BD134();
  v18 = v5 - v4;
  v6 = sub_23F6916B8(&qword_256EA8930);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6BD134();
  v10 = v9 - v8;
  v11 = type metadata accessor for Session.SessionEnded();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6BD134();
  v14 = v13 - v12;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F780AB0();
  sub_23FB2FCB0();
  if (!v2)
  {
    sub_23F780CC8(&qword_256EA6700, MEMORY[0x24BDCEAA8]);
    sub_23FB2FA7C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v14, v18, v19);
    sub_23F780D08(v14, a2);
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
}

uint64_t type metadata accessor for Session.SessionEnded()
{
  uint64_t result;

  result = qword_256EA8990;
  if (!qword_256EA8990)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23F780CC8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23FB2C4B8();
    result = MEMORY[0x242674E5C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23F780D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Session.SessionEnded();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F780D4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Session.SessionEnded.init(from:)(a1, a2);
}

uint64_t sub_23F780D60(_QWORD *a1)
{
  return Session.SessionEnded.encode(to:)(a1);
}

uint64_t _s12SessionEndedVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2C4B8();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s12SessionEndedVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s12SessionEndedVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s12SessionEndedVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F780E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F72E034();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v4);
}

uint64_t _s12SessionEndedVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F780E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F72E034();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, a2, v4);
}

uint64_t _s12SessionEndedV10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F780EF4 + 4 * byte_23FB5D888[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F780F14 + 4 * byte_23FB5D88D[v4]))();
}

_BYTE *sub_23F780EF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F780F14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F780F1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F780F24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F780F2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F780F34(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s12SessionEndedV10CodingKeysOMa()
{
  return &_s12SessionEndedV10CodingKeysON;
}

unint64_t sub_23F780F54()
{
  unint64_t result;

  result = qword_256EA89C8;
  if (!qword_256EA89C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D994, &_s12SessionEndedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA89C8);
  }
  return result;
}

unint64_t sub_23F780F94()
{
  unint64_t result;

  result = qword_256EA89D0;
  if (!qword_256EA89D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D904, &_s12SessionEndedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA89D0);
  }
  return result;
}

unint64_t sub_23F780FD4()
{
  unint64_t result;

  result = qword_256EA89D8;
  if (!qword_256EA89D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5D92C, &_s12SessionEndedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA89D8);
  }
  return result;
}

void sub_23F781010()
{
  sub_23F7839CC();
}

unint64_t sub_23F781024()
{
  return 0xD000000000000017;
}

uint64_t sub_23F781040()
{
  return 0x456E6F6973736553;
}

void sub_23F781060()
{
  sub_23F781078((uint64_t (*)(_QWORD))type metadata accessor for ExecutorError);
}

void sub_23F78106C()
{
  sub_23F781078((uint64_t (*)(_QWORD))type metadata accessor for PlannerError);
}

void sub_23F781078(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1;
  v4 = a1(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - v5;
  sub_23F6F5920(v3, (uint64_t)&v8 - v5, a1);
  v7 = sub_23FB2C6F8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v6, 1, v7) != 1)sub_23F6F5978((uint64_t)v6, a1);
  sub_23F694C84();
}

void sub_23F781114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for SessionCoordinatorError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F72DFF0(v1, v2);
  sub_23F72E388();
  sub_23F78397C();
  sub_23F694C84();
}

uint64_t sub_23F781170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for SessionError();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6F5920(v0, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
  v4 = swift_getEnumCaseMultiPayload() + 1;
  sub_23F6F5978((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
  return v4;
}

uint64_t sub_23F781208(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023FB32F10 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = a1 == 0x4572656E6E616C70 && a2 == 0xEC000000726F7272;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0x726F747563657865 && a2 == 0xED0000726F727245)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      v8 = sub_23FB2FB78();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 3;
      else
        return 4;
    }
  }
}

uint64_t sub_23F7813E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F781414 + 4 * byte_23FB5DA10[a1]))(0x726568746FLL, 0xE500000000000000);
}

unint64_t sub_23F781414()
{
  return 0xD000000000000017;
}

uint64_t sub_23F781430()
{
  return 0x4572656E6E616C70;
}

uint64_t sub_23F781450()
{
  return 0x726F747563657865;
}

uint64_t sub_23F781474()
{
  unsigned __int8 *v0;

  return sub_23F7813E4(*v0);
}

uint64_t sub_23F78147C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F781208(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7814A0()
{
  sub_23F7820FC();
  return sub_23FB2FD10();
}

uint64_t sub_23F7814C8()
{
  sub_23F7820FC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7814F0()
{
  sub_23F782138();
  return sub_23FB2FD10();
}

uint64_t sub_23F781518()
{
  sub_23F782138();
  return sub_23FB2FD1C();
}

uint64_t sub_23F781540()
{
  sub_23F7821EC();
  return sub_23FB2FD10();
}

uint64_t sub_23F781568()
{
  sub_23F7821EC();
  return sub_23FB2FD1C();
}

uint64_t sub_23F781590()
{
  sub_23F782174();
  return sub_23FB2FD10();
}

uint64_t sub_23F7815B8()
{
  sub_23F782174();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7815E0()
{
  sub_23F7821B0();
  return sub_23FB2FD10();
}

uint64_t sub_23F781608()
{
  sub_23F7821B0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F781630()
{
  sub_23F6D3458(&qword_256EA8A80, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  return sub_23FB2FC08();
}

uint64_t sub_23F781670()
{
  sub_23F6D3458(&qword_256EA8A80, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  return sub_23FB2FBFC();
}

void static SessionError.errorDomainValue.getter()
{
  sub_23F7839CC();
}

void SessionError.innerError.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;

  sub_23F7839F8();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B5298();
  sub_23F6F5920(v1, v0, v3);
  v4 = (char *)sub_23F781734 + 4 * byte_23FB5DA14[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23F781734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t *v5;

  v2 = sub_23FB2C6F8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BE52080];
  *(_QWORD *)(v1 + 24) = v2;
  sub_23F6D3458(&qword_256EA4870, v3, (uint64_t)&protocol conformance descriptor for IntelligenceFlowError);
  v5 = sub_23F783A68(v4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5, v0, v2);
}

uint64_t type metadata accessor for SessionError()
{
  uint64_t result;

  result = qword_256EA8AF8;
  if (!qword_256EA8AF8)
    return swift_getSingletonMetadata();
  return result;
}

void SessionError.errorCodeValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7839F8();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F72DFF0(v1, v2);
  sub_23F72E388();
  sub_23F78397C();
  sub_23F694C84();
}

void static SessionError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  type metadata accessor for ExecutorError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B51A4();
  sub_23F6D398C();
  type metadata accessor for PlannerError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  sub_23F6D398C();
  type metadata accessor for SessionCoordinatorError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  sub_23F6D398C();
  v14 = sub_23FB2C6F8();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6BD134();
  sub_23F7839F8();
  sub_23F6D3588();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6916B8(&qword_256EA89E0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5298();
  v12 = v2 + *(int *)(v11 + 48);
  sub_23F6F5920(a1, v2, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
  sub_23F6F5920(a2, v12, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
  v13 = (char *)sub_23F781A58 + 4 * byte_23FB5DA18[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23F781A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  sub_23F6F5920(v0, v2, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
  if (sub_23F783988())
  {
    (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v5 - 104));
    sub_23F781C38(v0);
    v6 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v5 - 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v1, v7);
    v6 = sub_23FB2C6EC();
    v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v8(v4, v7);
    v8(v2, v7);
    sub_23F6F5978(v0, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
  }
  return v6 & 1;
}

uint64_t sub_23F781C38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA89E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void SessionError.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23F6916B8(&qword_256EA89E8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B57BC(v4, v16);
  type metadata accessor for ExecutorError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B5598(v6, v17);
  sub_23F6916B8(&qword_256EA89F0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  sub_23F6D398C();
  type metadata accessor for PlannerError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  sub_23F6916B8(&qword_256EA89F8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B51A4();
  sub_23F6D398C();
  type metadata accessor for SessionCoordinatorError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  sub_23F6916B8(&qword_256EA8A00);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23FB2C6F8();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6BD134();
  type metadata accessor for SessionError();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B5298();
  sub_23F6916B8(&qword_256EA8A08);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6BD134();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7820FC();
  sub_23FB2FCC8();
  sub_23F6F5920(v18, v1, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
  v15 = (char *)sub_23F781EC4 + 4 * byte_23FB5DA1C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F781EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v5 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v0, v4);
  *(_BYTE *)(v5 - 68) = 0;
  sub_23F7821EC();
  v7 = *(_QWORD *)(v5 - 112);
  sub_23FB2FAA0();
  sub_23F6D3458(&qword_256EA48B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE52080], MEMORY[0x24BE52090]);
  v8 = *(_QWORD *)(v5 - 240);
  sub_23FB2FB18();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 8))(v1, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 120) + 8))(v2, v7);
  sub_23F6B5100();
}

unint64_t sub_23F7820FC()
{
  unint64_t result;

  result = qword_256EA8A10;
  if (!qword_256EA8A10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5E130, &type metadata for SessionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8A10);
  }
  return result;
}

unint64_t sub_23F782138()
{
  unint64_t result;

  result = qword_256EA8A18;
  if (!qword_256EA8A18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5E0E0, &type metadata for SessionError.ExecutorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8A18);
  }
  return result;
}

unint64_t sub_23F782174()
{
  unint64_t result;

  result = qword_256EA8A20;
  if (!qword_256EA8A20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5E090, &type metadata for SessionError.PlannerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8A20);
  }
  return result;
}

unint64_t sub_23F7821B0()
{
  unint64_t result;

  result = qword_256EA8A28;
  if (!qword_256EA8A28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5E040, &type metadata for SessionError.SessionCoordinatorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8A28);
  }
  return result;
}

unint64_t sub_23F7821EC()
{
  unint64_t result;

  result = qword_256EA8A30;
  if (!qword_256EA8A30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DFF0, &type metadata for SessionError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8A30);
  }
  return result;
}

void SessionError.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49[17];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v49[14] = a2;
  v3 = sub_23F6916B8(&qword_256EA8A38);
  v49[12] = *(_QWORD *)(v3 - 8);
  v49[13] = v3;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B57BC(v5, v49[0]);
  v6 = sub_23F6916B8(&qword_256EA8A40);
  v49[10] = *(_QWORD *)(v6 - 8);
  v49[11] = v6;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5598(v8, v49[0]);
  v9 = sub_23F6916B8(&qword_256EA8A48);
  v49[8] = *(_QWORD *)(v9 - 8);
  v49[9] = v9;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v49[16] = v11;
  v52 = sub_23F6916B8(&qword_256EA8A50);
  v49[7] = *(_QWORD *)(v52 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B51A4();
  v49[15] = v13;
  v53 = sub_23F6916B8(&qword_256EA8A58);
  v50 = *(_QWORD *)(v53 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6BD134();
  v17 = v16 - v15;
  v51 = type metadata accessor for SessionError();
  sub_23F6D3588();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)v49 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)v49 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)v49 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)v49 - v31;
  v33 = a1[3];
  v54 = a1;
  sub_23F6ADC98(a1, v33);
  sub_23F7820FC();
  v34 = v55;
  sub_23FB2FCB0();
  if (!v34)
  {
    v49[2] = (uint64_t)v27;
    v49[3] = (uint64_t)v24;
    v49[4] = (uint64_t)v21;
    v49[5] = (uint64_t)v30;
    v35 = v51;
    v49[6] = (uint64_t)v32;
    v36 = sub_23FB2FA94();
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v55 = 0;
      v38 = *(unsigned __int8 *)(v36 + 32);
      v39 = sub_23F6B4E44(1, v37, v36, v36 + 32, 0, (2 * v37) | 1);
      v41 = v40;
      v43 = v42;
      swift_bridgeObjectRelease();
      if (v41 == v43 >> 1)
      {
        v49[1] = v39;
        __asm { BR              X9 }
      }
    }
    v44 = v17;
    v45 = sub_23FB2F818();
    swift_allocError();
    v47 = v46;
    sub_23F6916B8(&qword_256EA1870);
    *v47 = v35;
    v48 = v53;
    sub_23FB2FA04();
    sub_23FB2F80C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v47, *MEMORY[0x24BEE26D0], v45);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v44, v48);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v54);
  sub_23F6B5100();
}

void sub_23F7828C8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SessionError.init(from:)(a1, a2);
}

void sub_23F7828DC(_QWORD *a1)
{
  SessionError.encode(to:)(a1);
}

void sub_23F7828FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F6D3458(&qword_256EA8A60, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  a1[1] = v2;
  sub_23F6D3458(&qword_256EA8A68, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  a1[2] = v3;
  sub_23F6D3458(&qword_256EA8A70, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  a1[3] = v4;
  sub_23F6D3458(&qword_256EA8A78, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  a1[4] = v5;
}

void sub_23F782990(uint64_t a1)
{
  uint64_t v2;

  sub_23F6D3458(&qword_256EA8A60, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_23F7829CC(uint64_t a1)
{
  uint64_t v2;

  sub_23F6D3458(&qword_256EA8A80, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_23F782A08()
{
  sub_23F6D3458(&qword_256EA4848, (uint64_t (*)(uint64_t))type metadata accessor for SessionError, (uint64_t)&protocol conformance descriptor for SessionError);
}

uint64_t initializeBufferWithCopyOfBuffer for SessionError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_23F782A88 + 4 * byte_23FB5DA24[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for SessionError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      goto LABEL_5;
    case 1:
      type metadata accessor for SessionCoordinatorError();
      result = swift_getEnumCaseMultiPayload();
      if (result >= 3)
        return result;
LABEL_5:
      v3 = sub_23FB2C6F8();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 2:
    case 3:
      v3 = sub_23FB2C6F8();
      result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v3);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      return result;
    default:
      return result;
  }
}

void initializeWithCopy for SessionError()
{
  char *v0;

  v0 = (char *)sub_23F782D3C + 4 * byte_23FB5DA2C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23F782D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23FB2C6F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for SessionError(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_23F6F5978(result, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
    v2 = (char *)&loc_23F782ED4 + 4 * byte_23FB5DA30[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for SessionError()
{
  char *v0;

  v0 = (char *)sub_23F783054 + 4 * byte_23FB5DA34[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23F783054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23FB2C6F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for SessionError(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_23F6F5978(result, (uint64_t (*)(_QWORD))type metadata accessor for SessionError);
    v2 = (char *)&loc_23F7831EC + 4 * byte_23FB5DA38[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23F783320()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = sub_23FB2C6F8();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SessionCoordinatorError();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PlannerError();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for ExecutorError();
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SessionError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23F783424 + 4 * byte_23FB5DA41[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23F783458 + 4 * byte_23FB5DA3C[v4]))();
}

uint64_t sub_23F783458(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F783460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F783468);
  return result;
}

uint64_t sub_23F783474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F78347CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23F783480(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F783488(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionError.CodingKeys()
{
  return &type metadata for SessionError.CodingKeys;
}

ValueMetadata *type metadata accessor for SessionError.OtherCodingKeys()
{
  return &type metadata for SessionError.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for SessionError.SessionCoordinatorErrorCodingKeys()
{
  return &type metadata for SessionError.SessionCoordinatorErrorCodingKeys;
}

ValueMetadata *type metadata accessor for SessionError.PlannerErrorCodingKeys()
{
  return &type metadata for SessionError.PlannerErrorCodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport12SessionErrorO15OtherCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F783518 + 4 * byte_23FB5DA46[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F783538 + 4 * byte_23FB5DA4B[v4]))();
}

_BYTE *sub_23F783518(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F783538(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F783540(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F783548(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F783550(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F783558(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SessionError.ExecutorErrorCodingKeys()
{
  return &type metadata for SessionError.ExecutorErrorCodingKeys;
}

unint64_t sub_23F783578()
{
  unint64_t result;

  result = qword_256EA8B30;
  if (!qword_256EA8B30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DCE8, &type metadata for SessionError.ExecutorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B30);
  }
  return result;
}

unint64_t sub_23F7835B8()
{
  unint64_t result;

  result = qword_256EA8B38;
  if (!qword_256EA8B38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DDA0, &type metadata for SessionError.PlannerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B38);
  }
  return result;
}

unint64_t sub_23F7835F8()
{
  unint64_t result;

  result = qword_256EA8B40;
  if (!qword_256EA8B40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DE58, &type metadata for SessionError.SessionCoordinatorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B40);
  }
  return result;
}

unint64_t sub_23F783638()
{
  unint64_t result;

  result = qword_256EA8B48;
  if (!qword_256EA8B48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DF10, &type metadata for SessionError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B48);
  }
  return result;
}

unint64_t sub_23F783678()
{
  unint64_t result;

  result = qword_256EA8B50;
  if (!qword_256EA8B50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DFC8, &type metadata for SessionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B50);
  }
  return result;
}

unint64_t sub_23F7836B8()
{
  unint64_t result;

  result = qword_256EA8B58;
  if (!qword_256EA8B58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DE80, &type metadata for SessionError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B58);
  }
  return result;
}

unint64_t sub_23F7836F8()
{
  unint64_t result;

  result = qword_256EA8B60;
  if (!qword_256EA8B60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DEA8, &type metadata for SessionError.OtherCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B60);
  }
  return result;
}

unint64_t sub_23F783738()
{
  unint64_t result;

  result = qword_256EA8B68;
  if (!qword_256EA8B68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DDC8, &type metadata for SessionError.SessionCoordinatorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B68);
  }
  return result;
}

unint64_t sub_23F783778()
{
  unint64_t result;

  result = qword_256EA8B70;
  if (!qword_256EA8B70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DDF0, &type metadata for SessionError.SessionCoordinatorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B70);
  }
  return result;
}

unint64_t sub_23F7837B8()
{
  unint64_t result;

  result = qword_256EA8B78;
  if (!qword_256EA8B78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DD10, &type metadata for SessionError.PlannerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B78);
  }
  return result;
}

unint64_t sub_23F7837F8()
{
  unint64_t result;

  result = qword_256EA8B80;
  if (!qword_256EA8B80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DD38, &type metadata for SessionError.PlannerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B80);
  }
  return result;
}

unint64_t sub_23F783838()
{
  unint64_t result;

  result = qword_256EA8B88;
  if (!qword_256EA8B88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DC58, &type metadata for SessionError.ExecutorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B88);
  }
  return result;
}

unint64_t sub_23F783878()
{
  unint64_t result;

  result = qword_256EA8B90;
  if (!qword_256EA8B90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DC80, &type metadata for SessionError.ExecutorErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B90);
  }
  return result;
}

unint64_t sub_23F7838B8()
{
  unint64_t result;

  result = qword_256EA8B98;
  if (!qword_256EA8B98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DF38, &type metadata for SessionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8B98);
  }
  return result;
}

unint64_t sub_23F7838F8()
{
  unint64_t result;

  result = qword_256EA8BA0;
  if (!qword_256EA8BA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5DF60, &type metadata for SessionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA8BA0);
  }
  return result;
}

uint64_t sub_23F783934()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F783948()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23F783954()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F78396C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_23F78397C()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_23F6F5978(v1, v0);
}

uint64_t sub_23F783988()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F783994()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F7839A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 224) + 8))(v0, v1);
}

void sub_23F7839B4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_23F6F594C(a1, v2, v1);
}

void sub_23F7839C0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_23F6F594C(a1, v2, v1);
}

uint64_t sub_23F7839DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7839F0()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F7839F8()
{
  return type metadata accessor for SessionError();
}

unint64_t sub_23F783A00()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 1;
  return sub_23F7821B0();
}

uint64_t sub_23F783A0C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F783A20()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23F783A34()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
  return sub_23F782138();
}

uint64_t sub_23F783A40()
{
  uint64_t v0;

  return v0;
}

void sub_23F783A54(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_23F6D3458(a1, v3, a3);
}

unint64_t sub_23F783A5C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
  return sub_23F782174();
}

uint64_t *sub_23F783A68(uint64_t a1)
{
  uint64_t *v1;

  v1[4] = a1;
  return sub_23F6F601C(v1);
}

__n128 Session.SessionIdentityToken.untrustedAuditToken.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t Session.SessionIdentityToken.identityToken.getter()
{
  return swift_retain();
}

double Session.SessionIdentityToken.init(untrustedAuditToken:identityToken:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  sub_23F783AD4(a1, (uint64_t)v8);
  v5 = v9;
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 32) = v5;
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

uint64_t sub_23F783AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA8BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s20SessionIdentityTokenVwxx()
{
  return swift_release();
}

uint64_t _s20SessionIdentityTokenVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t _s20SessionIdentityTokenVwca(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *a2;
  v4 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s20SessionIdentityTokenVwta(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t _s20SessionIdentityTokenVwet(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s20SessionIdentityTokenVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.SessionIdentityToken()
{
  return &type metadata for Session.SessionIdentityToken;
}

uint64_t static SessionInjectionContext<>.inherited.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _QWORD __src[9];
  _BYTE __dst[72];

  if (qword_256EA0AA8 != -1)
    swift_once();
  sub_23FB2FD40();
  if (__src[3] == 1)
  {
    *(_QWORD *)__dst = 0;
    __dst[8] = 1;
    memset(&__dst[16], 0, 56);
    sub_23F693B4C((uint64_t)__src, &qword_256EA8BB0);
  }
  else
  {
    memcpy(__dst, __src, sizeof(__dst));
  }
  sub_23F785024((uint64_t)&__dst[32], (uint64_t)__src);
  sub_23F78506C((uint64_t)__dst);
  sub_23F785024((uint64_t)__src, (uint64_t)&v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = &type metadata for AnySessionInjectionContext;
    *(_QWORD *)(a1 + 32) = &protocol witness table for AnySessionInjectionContext;
    v2 = swift_allocObject();
    *(_QWORD *)a1 = v2;
    sub_23F6F4E24(&v4, v2 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return sub_23F693B4C((uint64_t)__src, &qword_256EA8BB8);
}

uint64_t static SessionInjection.request<A, B>(id:instanceId:_:_:injectionContext:with:isolatedTo:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  *(_QWORD *)(v8 + 264) = v22;
  *(_OWORD *)(v8 + 248) = v21;
  *(_OWORD *)(v8 + 232) = v20;
  *(_QWORD *)(v8 + 216) = v18;
  *(_QWORD *)(v8 + 224) = v19;
  *(_QWORD *)(v8 + 200) = v16;
  *(_QWORD *)(v8 + 208) = v17;
  *(_QWORD *)(v8 + 184) = v14;
  *(_QWORD *)(v8 + 192) = v15;
  *(_QWORD *)(v8 + 168) = a7;
  *(_QWORD *)(v8 + 176) = a8;
  *(_QWORD *)(v8 + 152) = a5;
  *(_QWORD *)(v8 + 160) = a6;
  *(_QWORD *)(v8 + 136) = a3;
  *(_QWORD *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 120) = a1;
  *(_QWORD *)(v8 + 128) = a2;
  v9 = sub_23FB2E7F8();
  *(_QWORD *)(v8 + 272) = v9;
  *(_QWORD *)(v8 + 280) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 288) = sub_23F750AE4();
  v10 = sub_23FB2F65C();
  *(_QWORD *)(v8 + 296) = v10;
  *(_QWORD *)(v8 + 304) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 312) = sub_23F750AE4();
  if (v16)
  {
    sub_23F785644();
    sub_23F785600();
    sub_23F785658();
  }
  else
  {
    sub_23F78564C();
  }
  *(_QWORD *)(v8 + 320) = v12;
  *(_QWORD *)(v8 + 328) = v11;
  return swift_task_switch();
}

uint64_t sub_23F783EA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_23F785024(*(_QWORD *)(v0 + 184), v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_23F6F4E24((__int128 *)(v0 + 56), v0 + 16);
    sub_23F6ADC98((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v1 = (_QWORD *)sub_23F7855A8();
    *(_QWORD *)(v0 + 336) = v1;
    *v1 = v0;
    v1[1] = sub_23F783FB0;
    return sub_23F7855F0(v5);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 120);
    sub_23F693B4C(v0 + 56, &qword_256EA8BB8);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v4, 1, 1, v3);
    sub_23F785684();
    sub_23F6F52B0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23F783FB0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_23F785578(&v2);
  return sub_23F6F50C0();
}

uint64_t sub_23F783FEC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(*(_QWORD *)(v0 + 312), 1, *(_QWORD *)(v0 + 224)) == 1)
  {
    sub_23FB2E3E4();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v1 = sub_23FB2E7E0();
    v2 = sub_23FB2F5E4();
    v3 = os_log_type_enabled(v1, v2);
    v5 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 288);
    v6 = *(_QWORD *)(v0 + 272);
    if (v3)
    {
      v7 = *(_QWORD *)(v0 + 168);
      v13 = *(_QWORD *)(v0 + 176);
      v12 = *(_QWORD *)(v0 + 160);
      v9 = *(_QWORD *)(v0 + 128);
      v8 = *(_QWORD *)(v0 + 136);
      v10 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_DWORD *)v10 = 136315650;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 96) = sub_23F69334C(v9, v8, &v14);
      sub_23FB2F680();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 104) = sub_23F69334C(v12, v7, &v14);
      sub_23FB2F680();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 22) = 2048;
      *(_QWORD *)(v0 + 112) = v13;
      sub_23FB2F680();
      _os_log_impl(&dword_23F68F000, v1, v2, "Injection value was not provided for InjectionPoint %s @ %s:%ld", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      sub_23F693DD0();
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296));
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
  sub_23F785684();
  sub_23F6F52B0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static SessionInjection.capture<A>(id:instanceId:_:_:injectionContext:value:isolatedTo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 200) = v16;
  *(_OWORD *)(v8 + 184) = v15;
  *(_QWORD *)(v8 + 168) = v13;
  *(_QWORD *)(v8 + 176) = v14;
  *(_QWORD *)(v8 + 152) = a8;
  *(_QWORD *)(v8 + 160) = v12;
  *(_QWORD *)(v8 + 136) = a6;
  *(_QWORD *)(v8 + 144) = a7;
  *(_QWORD *)(v8 + 120) = a4;
  *(_QWORD *)(v8 + 128) = a5;
  *(_QWORD *)(v8 + 104) = a2;
  *(_QWORD *)(v8 + 112) = a3;
  *(_QWORD *)(v8 + 96) = a1;
  if (v13)
  {
    sub_23F785644();
    sub_23F785600();
    sub_23F785658();
  }
  else
  {
    sub_23F78564C();
  }
  *(_QWORD *)(v8 + 208) = v10;
  *(_QWORD *)(v8 + 216) = v9;
  return swift_task_switch();
}

uint64_t sub_23F7842E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);

  sub_23F785024(*(_QWORD *)(v0 + 152), v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_23F6F4E24((__int128 *)(v0 + 56), v0 + 16);
    sub_23F6ADC98((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v1 = (_QWORD *)sub_23F7855C4();
    *(_QWORD *)(v0 + 224) = v1;
    *v1 = v0;
    v1[1] = sub_23F7843AC;
    sub_23F785664(*(_QWORD *)(v0 + 96));
    return sub_23F7855F0(v2);
  }
  else
  {
    sub_23F693B4C(v0 + 56, &qword_256EA8BB8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23F7843AC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_23F785578(&v2);
  return sub_23F6F50C0();
}

uint64_t sub_23F7843E8()
{
  uint64_t v0;

  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t _s30IntelligenceFlowPlannerSupport16SessionInjectionO7perform2id10instanceId__16injectionContext4with10isolatedTo_xSS_SSSgSSSiAA0efL0_pSgq_ScA_pSgYixq_q0_YKXEtYaq0_YKSeRzSERzSeR_SER_s5ErrorR0_r1_lFZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v23[16] = a19;
  v23[17] = a23;
  v23[14] = a17;
  v23[15] = a18;
  v23[12] = a14;
  v23[13] = a15;
  v23[10] = a12;
  v23[11] = a13;
  v23[8] = a10;
  v23[9] = a11;
  v23[6] = a5;
  v23[7] = a9;
  v23[4] = a3;
  v23[5] = a4;
  v23[2] = a1;
  v23[3] = a2;
  v23[18] = *(_QWORD *)(a17 - 8);
  v23[19] = sub_23F750AE4();
  v23[20] = *(_QWORD *)(a15 - 8);
  v23[21] = sub_23F750AE4();
  v25 = sub_23F785678();
  v23[22] = v25;
  v23[23] = *(_QWORD *)(v25 - 8);
  v26 = sub_23F750AE4();
  v23[24] = v26;
  v27 = (_QWORD *)swift_task_alloc();
  v23[25] = v27;
  *v27 = v23;
  v27[1] = sub_23F784548;
  return sub_23F78558C(v26, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23F784548()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = (_QWORD *)*v0;
  v6 = v1;
  v2 = v1[9];
  sub_23F785578(&v6);
  if (v2)
  {
    sub_23F785644();
    sub_23F785600();
    sub_23F785658();
  }
  else
  {
    sub_23F78564C();
  }
  v1[26] = v4;
  v1[27] = v3;
  return sub_23F7855E0();
}

uint64_t sub_23F7845AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[24];
  v2 = v0[13];
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, v2) == 1)
  {
    v3 = v0[19];
    v4 = (void (*)(uint64_t, uint64_t))v0[11];
    v5 = v0[8];
    (*(void (**)(uint64_t, _QWORD))(v0[23] + 8))(v1, v0[22]);
    v4(v5, v3);
    v7 = (_QWORD *)swift_task_alloc();
    v0[28] = v7;
    *v7 = v0;
    v7[1] = sub_23F784714;
    v8 = sub_23F785608(v0[3]);
    return static SessionInjection.capture<A>(id:instanceId:_:_:injectionContext:value:isolatedTo:)(v8, v9, v10, v11, v12, v13, 120, v14);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0[20] + 32))(v0[2], v1, v2);
    sub_23F6F5224();
    sub_23F6F52B0();
    sub_23F6F5280();
    v6 = (uint64_t (*)(void))sub_23F750B9C();
    return v6();
  }
}

uint64_t sub_23F784714()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_23F785578(&v2);
  return sub_23F6F50C0();
}

uint64_t sub_23F784750()
{
  _QWORD *v0;
  uint64_t (*v1)(void);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[20] + 32))(v0[2], v0[21], v0[13]);
  sub_23F6F5268();
  sub_23F6F52B0();
  sub_23F6F5224();
  v1 = (uint64_t (*)(void))sub_23F750B9C();
  return v1();
}

uint64_t _s30IntelligenceFlowPlannerSupport16SessionInjectionO7perform2id10instanceId__16injectionContext4with10isolatedTo_xSS_SSSgSSSiAA0efL0_pSgq_nScA_pSgYixq_nYuYaq0_YKYTXEtYaq0_YKSeRzSERzSeR_SER_s5ErrorR0_r1_lFZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v23[17] = a19;
  v23[18] = a23;
  v23[15] = a17;
  v23[16] = a18;
  v23[13] = a15;
  v23[14] = a16;
  v23[11] = a13;
  v23[12] = a14;
  v23[9] = a11;
  v23[10] = a12;
  v23[7] = a9;
  v23[8] = a10;
  v23[5] = a4;
  v23[6] = a5;
  v23[3] = a2;
  v23[4] = a3;
  v23[2] = a1;
  v23[19] = *(_QWORD *)(a17 - 8);
  v23[20] = sub_23F750AE4();
  v23[21] = *(_QWORD *)(a16 - 8);
  v23[22] = sub_23F750AE4();
  v23[23] = *(_QWORD *)(a15 - 8);
  v23[24] = sub_23F750AE4();
  v24 = sub_23F785678();
  v23[25] = v24;
  v23[26] = *(_QWORD *)(v24 - 8);
  v25 = sub_23F750AE4();
  v23[27] = v25;
  v26 = (_QWORD *)swift_task_alloc();
  v23[28] = v26;
  *v26 = v23;
  v26[1] = sub_23F7848E0;
  return sub_23F78558C(v25, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23F7848E0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = (_QWORD *)*v0;
  v6 = v1;
  v2 = v1[9];
  sub_23F785578(&v6);
  if (v2)
  {
    sub_23F785644();
    sub_23F785600();
    sub_23F785658();
  }
  else
  {
    sub_23F78564C();
  }
  v1[29] = v4;
  v1[30] = v3;
  return sub_23F7855E0();
}

uint64_t sub_23F784944()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t (*v12)(void);
  int *v13;

  v2 = v0[27];
  v3 = v0[13];
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v2, 1, v3) == 1)
  {
    v5 = v0[21];
    v4 = v0[22];
    v6 = v0[14];
    v7 = (int *)v0[11];
    v8 = v0[8];
    (*(void (**)(uint64_t, _QWORD))(v0[26] + 8))(v2, v0[25]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
    v13 = (int *)((char *)v7 + *v7);
    v9 = (_QWORD *)swift_task_alloc();
    v0[31] = v9;
    *v9 = v0;
    v9[1] = sub_23F784A5C;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v13)(v0[24], v0[22], v0[20]);
  }
  else
  {
    v11 = v0[23];
    sub_23F785634(v0[21]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v1, v2, v3);
    sub_23F6F52B0();
    sub_23F6F5224();
    sub_23F6F5280();
    swift_task_dealloc();
    v12 = (uint64_t (*)(void))sub_23F750B9C();
    return sub_23F785560(v12);
  }
}

uint64_t sub_23F784A5C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = (_QWORD *)*v1;
  v18[0] = *v1;
  sub_23F785578(v18);
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  v2[32] = v4;
  *v4 = v1;
  v4[1] = sub_23F784B08;
  v5 = v2[24];
  v6 = v2[17];
  v7 = v2[13];
  v9 = v2[9];
  v8 = v2[10];
  v10 = v2[3];
  v18[7] = v2[16];
  v18[8] = v6;
  v18[5] = v8;
  v18[6] = v7;
  v18[3] = v5;
  v18[4] = v9;
  v11 = sub_23F785608(v10);
  return static SessionInjection.capture<A>(id:instanceId:_:_:injectionContext:value:isolatedTo:)(v11, v12, v13, v14, v15, v16, 158, v17);
}

uint64_t sub_23F784B08()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_23F785578(&v2);
  return sub_23F6F50C0();
}

uint64_t sub_23F784B44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v3 = v0[23];
  v2 = v0[24];
  v4 = v0[13];
  sub_23F785634(v0[21]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  sub_23F6F5268();
  sub_23F6F52B0();
  sub_23F6F5224();
  sub_23F6F5280();
  v5 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F785560(v5);
}

uint64_t sub_23F784BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 112));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v1, v4);
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  return sub_23F785560(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AnySessionInjectionContext.init(context:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F6F4E24(a1, a2);
}

uint64_t AnySessionInjectionContext.request<A, B>(id:instanceId:file:line:isolatedTo:with:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v9 + 152) = v17;
  *(_QWORD *)(v9 + 160) = v8;
  *(_QWORD *)(v9 + 144) = v16;
  *(_OWORD *)(v9 + 112) = v14;
  *(_OWORD *)(v9 + 128) = v15;
  *(_OWORD *)(v9 + 96) = v13;
  *(_QWORD *)(v9 + 80) = v11;
  *(_QWORD *)(v9 + 88) = v12;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 72) = a8;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  if (v11)
  {
    swift_getObjectType();
    sub_23F785600();
  }
  return swift_task_switch();
}

uint64_t sub_23F784CC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  sub_23F6ADC98(*(_QWORD **)(v0 + 160), *(_QWORD *)(*(_QWORD *)(v0 + 160) + 24));
  v1 = (_QWORD *)sub_23F7855A8();
  *(_QWORD *)(v0 + 168) = v1;
  *v1 = v0;
  v1[1] = sub_23F784D40;
  return sub_23F7855F0(v3);
}

uint64_t sub_23F784D40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  sub_23F785624();
  v1 = *v0;
  sub_23F785584(&v3);
  return sub_23F7440D0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t AnySessionInjectionContext.capture<A>(id:instanceId:file:line:isolatedTo:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v9 + 112) = v14;
  *(_QWORD *)(v9 + 120) = v8;
  *(_QWORD *)(v9 + 104) = v13;
  *(_OWORD *)(v9 + 88) = v12;
  *(_QWORD *)(v9 + 72) = a8;
  *(_QWORD *)(v9 + 80) = v11;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 16) = a1;
  if (a8)
  {
    swift_getObjectType();
    sub_23F785600();
  }
  return swift_task_switch();
}

uint64_t sub_23F784E04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);

  sub_23F6ADC98(*(_QWORD **)(v0 + 120), *(_QWORD *)(*(_QWORD *)(v0 + 120) + 24));
  v1 = (_QWORD *)sub_23F7855C4();
  *(_QWORD *)(v0 + 128) = v1;
  *v1 = v0;
  v1[1] = sub_23F784E70;
  sub_23F785664(*(_QWORD *)(v0 + 16));
  return sub_23F7855F0(v2);
}

uint64_t sub_23F784E70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  sub_23F785624();
  v1 = *v0;
  sub_23F785584(&v3);
  return sub_23F7440D0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_23F784EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v9;
  *v9 = v8;
  v9[1] = sub_23F78555C;
  return AnySessionInjectionContext.request<A, B>(id:instanceId:file:line:isolatedTo:with:expecting:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23F784F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v13;
  *v13 = v8;
  v13[1] = sub_23F78555C;
  return AnySessionInjectionContext.capture<A>(id:instanceId:file:line:isolatedTo:value:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23F785024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA8BB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F78506C(uint64_t a1)
{
  destroy for SpanDynamicContext(a1);
  return a1;
}

uint64_t sub_23F7850A0()
{
  uint64_t v0;

  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for SessionInjection()
{
  return &type metadata for SessionInjection;
}

uint64_t dispatch thunk of SessionInjectionContext.request<A, B>(id:instanceId:file:line:isolatedTo:with:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a20 + 8) + *(_QWORD *)(a20 + 8));
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v20 + 16) = v21;
  *v21 = v20;
  v21[1] = sub_23F78555C;
  return v23(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t dispatch thunk of SessionInjectionContext.capture<A>(id:instanceId:file:line:isolatedTo:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a15 + 16) + *(_QWORD *)(a15 + 16));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v15 + 16) = v18;
  *v18 = v15;
  v18[1] = sub_23F785290;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_23F785290()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  sub_23F785624();
  v1 = *v0;
  sub_23F785584(&v3);
  return sub_23F7440D0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t initializeWithCopy for AnySessionInjectionContext(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnySessionInjectionContext(uint64_t *a1, uint64_t *a2)
{
  sub_23F785324(a1, a2);
  return a1;
}

uint64_t *sub_23F785324(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for AnySessionInjectionContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySessionInjectionContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySessionInjectionContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySessionInjectionContext()
{
  return &type metadata for AnySessionInjectionContext;
}

uint64_t sub_23F785560(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F785578@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_task_dealloc();
}

uint64_t sub_23F785584@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_task_dealloc();
}

uint64_t sub_23F78558C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static SessionInjection.request<A, B>(id:instanceId:_:_:injectionContext:with:isolatedTo:expecting:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23F7855A8()
{
  return swift_task_alloc();
}

uint64_t sub_23F7855C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = **(int **)(v0 + 16) + *(_QWORD *)(v0 + 16);
  return swift_task_alloc();
}

uint64_t sub_23F7855E0()
{
  return swift_task_switch();
}

uint64_t sub_23F7855F0@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_23F785600()
{
  return sub_23FB2F4A0();
}

uint64_t sub_23F785608@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void sub_23F785624()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_23F785634@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(v1 + 64));
}

uint64_t sub_23F785644()
{
  return swift_getObjectType();
}

uint64_t sub_23F785664@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_23F785678()
{
  return sub_23FB2F65C();
}

uint64_t sub_23F785684()
{
  return swift_task_dealloc();
}

uint64_t sub_23F785690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v56[2];
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v60 = sub_23F6916B8(&qword_256EA8CD0);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v58 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23F6916B8(&qword_256EA8CD8);
  MEMORY[0x24BDAC7A8](v6);
  v70 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23F6916B8(&qword_256EA8CE0);
  v69 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v57 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Expression(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (_QWORD *)((char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_23F6916B8(&qword_256EA8CE8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23FB2D5EC();
  v77 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v76 = (char *)v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v68 = (char *)v56 - v19;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    v61 = a2;
    v71 = v2;
    v74 = type metadata accessor for ProgramStatement(0);
    v21 = *(_QWORD *)(v74 - 8);
    v22 = a1;
    v23 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v73 = *(_QWORD *)(v21 + 72);
    v56[1] = v22;
    swift_bridgeObjectRetain();
    v82 = MEMORY[0x24BEE4AF8];
    v75 = v16;
    v66 = v12;
    v67 = v10;
    v65 = v15;
    do
    {
      sub_23F6F5920(v23 + *(int *)(v74 + 20), (uint64_t)v12, type metadata accessor for Expression);
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        v24 = v8;
        v25 = *v12;
        v26 = v12[1];
        v72 = v12[2];
        v78 = v25;
        v79 = v26;
        v27 = qword_256EA0AA0;
        swift_bridgeObjectRetain();
        if (v27 != -1)
          swift_once();
        v28 = sub_23F6916B8(&qword_256EA8CF0);
        sub_23F6BF1A4(v28, (uint64_t)qword_256EA8C10);
        sub_23F723348();
        sub_23F723384(&qword_256EA8CF8, &qword_256EA8CF0);
        v29 = v70;
        sub_23FB2F0E0();
        v30 = (uint64_t)v29;
        swift_bridgeObjectRelease();
        v31 = (uint64_t)v29;
        v8 = v24;
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v31, 1, v24) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23F6B4F84(v30, &qword_256EA8CD8);
          v15 = v65;
          v32 = (uint64_t)v65;
          v33 = 1;
        }
        else
        {
          v34 = v57;
          (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v57, v30, v24);
          swift_getKeyPath();
          sub_23FB2D658();
          swift_release();
          v35 = MEMORY[0x242673E24](v78, v79, v80, v81);
          v63 = v36;
          v64 = v35;
          swift_bridgeObjectRelease();
          swift_getKeyPath();
          sub_23FB2D658();
          swift_release();
          v62 = MEMORY[0x242673E24](v78, v79, v80, v81);
          v38 = v37;
          swift_bridgeObjectRelease();
          v39 = v61;
          sub_23F78CFEC(v61);
          v40 = swift_bridgeObjectRetain();
          v41 = v71;
          sub_23F785D70(v40, v39);
          v43 = v42;
          v71 = v41;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v78 = v43;
          swift_getKeyPath();
          v44 = v58;
          sub_23FB2C1D0();
          sub_23F6916B8(&qword_256EA8D00);
          sub_23F723384(&qword_256EA8D08, &qword_256EA8D00);
          sub_23F723384(&qword_256EA8D10, &qword_256EA8CD0);
          v45 = v60;
          v46 = sub_23FB2F2FC();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v45);
          swift_bridgeObjectRelease();
          v15 = v65;
          MEMORY[0x242672210](v64, v63, v62, v38, v46);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v34, v8);
          v32 = (uint64_t)v15;
          v33 = 0;
        }
        v16 = v75;
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v32, v33, 1, v75);
        v12 = v66;
      }
      else
      {
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v15, 1, 1, v16);
        sub_23F6D3508((uint64_t)v12, type metadata accessor for Expression);
      }
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v16) == 1)
      {
        sub_23F6B4F84((uint64_t)v15, &qword_256EA8CE8);
      }
      else
      {
        v47 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
        v48 = v68;
        v47(v68, v15, v16);
        v47(v76, v48, v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v49 = v82;
        }
        else
        {
          sub_23F753FE4();
          v49 = v53;
        }
        v50 = *(_QWORD *)(v49 + 16);
        if (v50 >= *(_QWORD *)(v49 + 24) >> 1)
        {
          sub_23F753FE4();
          v49 = v54;
        }
        *(_QWORD *)(v49 + 16) = v50 + 1;
        v51 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
        v82 = v49;
        v52 = v49 + v51 + *(_QWORD *)(v77 + 72) * v50;
        v16 = v75;
        v47((char *)v52, v76, v75);
      }
      v23 += v73;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    sub_23F78D03C(v61);
    return v82;
  }
  else
  {
    sub_23F78D03C(a2);
    return MEMORY[0x24BEE4AF8];
  }
}

void sub_23F785D70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[6];
  uint64_t v81;

  v76 = a2;
  v3 = sub_23F6916B8(&qword_256EA8D18);
  MEMORY[0x24BDAC7A8](v3);
  v74 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_23FB2D5D4();
  v67 = *(_QWORD *)(v81 - 8);
  v5 = MEMORY[0x24BDAC7A8](v81);
  v66 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v65 = (char *)&v58 - v7;
  v8 = sub_23F6916B8(&qword_256EA8D20);
  MEMORY[0x24BDAC7A8](v8);
  v73 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23FB2D5E0();
  v61 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v60 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v59 = (char *)&v58 - v13;
  v72 = sub_23F6916B8(&qword_256EA27E8);
  v14 = MEMORY[0x24BDAC7A8](v72);
  v63 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v71 = (uint64_t *)((char *)&v58 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v70 = (char *)&v58 - v18;
  sub_23F78F0C8(a1, v80);
  v75 = v80[0];
  v77 = v80[3];
  v19 = v80[4];
  v68 = v80[1];
  v69 = (unint64_t)(v80[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v62 = MEMORY[0x24BEE4AF8];
  v64 = v10;
  while (1)
  {
    if (v19)
    {
      v79 = (v19 - 1) & v19;
      v20 = __clz(__rbit64(v19)) | (v77 << 6);
      goto LABEL_20;
    }
    v21 = v77 + 1;
    if (__OFADD__(v77, 1))
      break;
    if (v21 >= v69)
      goto LABEL_30;
    v22 = *(_QWORD *)(v68 + 8 * v21);
    v23 = v77 + 1;
    if (!v22)
    {
      v23 = v77 + 2;
      if (v77 + 2 >= v69)
        goto LABEL_30;
      v22 = *(_QWORD *)(v68 + 8 * v23);
      if (!v22)
      {
        v23 = v77 + 3;
        if (v77 + 3 >= v69)
          goto LABEL_30;
        v22 = *(_QWORD *)(v68 + 8 * v23);
        if (!v22)
        {
          v23 = v77 + 4;
          if (v77 + 4 >= v69)
            goto LABEL_30;
          v22 = *(_QWORD *)(v68 + 8 * v23);
          if (!v22)
          {
            v23 = v77 + 5;
            if (v77 + 5 >= v69)
              goto LABEL_30;
            v22 = *(_QWORD *)(v68 + 8 * v23);
            if (!v22)
            {
              v24 = v77 + 6;
              while (v24 < v69)
              {
                v22 = *(_QWORD *)(v68 + 8 * v24++);
                if (v22)
                {
                  v23 = v24 - 1;
                  goto LABEL_19;
                }
              }
LABEL_30:
              swift_release();
              sub_23F78D03C(v76);
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v79 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
    v77 = v23;
LABEL_20:
    v25 = *(_QWORD *)(v75 + 56);
    v26 = (uint64_t *)(*(_QWORD *)(v75 + 48) + 16 * v20);
    v28 = *v26;
    v27 = v26[1];
    v29 = sub_23FB2C764();
    v30 = *(_QWORD *)(v29 - 8);
    v31 = v25 + *(_QWORD *)(v30 + 72) * v20;
    v32 = v72;
    v33 = v70;
    v34 = &v70[*(int *)(v72 + 48)];
    v78 = v30;
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    v35(v34, v31, v29);
    *v33 = v28;
    v33[1] = v27;
    v36 = v32;
    v37 = (uint64_t)v33;
    v38 = v71;
    sub_23F78F12C(v37, (uint64_t)v71, &qword_256EA27E8);
    v39 = (char *)v38 + *(int *)(v32 + 48);
    v40 = *(_QWORD *)(v76 + 32);
    swift_bridgeObjectRetain();
    v41 = v74;
    sub_23F789A38(v40, v74);
    v42 = v81;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v41, 1, v81) == 1)
    {
      sub_23F6B4F84(v41, &qword_256EA8D18);
      v43 = 1;
      v44 = (uint64_t)v73;
    }
    else
    {
      v45 = v67;
      v46 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v65, v41, v42);
      v47 = *(int *)(v36 + 48);
      v48 = v63;
      v49 = &v63[v47];
      v50 = v38[1];
      *(_QWORD *)v63 = *v38;
      *((_QWORD *)v48 + 1) = v50;
      v35(&v48[v47], (uint64_t)v39, v29);
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v66, v46, v81);
      swift_bridgeObjectRetain();
      v44 = (uint64_t)v73;
      sub_23FB2D598();
      v51 = v46;
      v10 = v64;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v81);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v29);
      v43 = 0;
    }
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v44, v43, 1, v10);
    sub_23F6B4F84((uint64_t)v38, &qword_256EA27E8);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v44, 1, v10) == 1)
    {
      sub_23F6B4F84(v44, &qword_256EA8D20);
      v19 = v79;
    }
    else
    {
      v52 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 32);
      v53 = v59;
      v52(v59, v44, v10);
      v52(v60, (uint64_t)v53, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F753FF8();
        v62 = v56;
      }
      v54 = *(_QWORD *)(v62 + 16);
      if (v54 >= *(_QWORD *)(v62 + 24) >> 1)
      {
        sub_23F753FF8();
        v62 = v57;
      }
      v55 = v62;
      *(_QWORD *)(v62 + 16) = v54 + 1;
      v52((char *)(v55+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v54), (uint64_t)v60, v10);
      v19 = v79;
    }
  }
  __break(1u);
}

uint64_t sub_23F7863B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = sub_23F6916B8(&qword_256EA8D18);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2D5D4();
  v26 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v27 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v25 = (char *)v23 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v23[2] = v2;
    v13 = *(_QWORD *)(sub_23FB2C764() - 8);
    v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    v23[1] = a1;
    swift_bridgeObjectRetain();
    v16 = MEMORY[0x24BEE4AF8];
    v24 = a2;
    do
    {
      sub_23F789A38(a2);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v7, 1, v8) == 1)
      {
        sub_23F6B4F84((uint64_t)v7, &qword_256EA8D18);
      }
      else
      {
        v17 = v25;
        v18 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
        v18(v25, v7, v8);
        v18(v27, v17, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F75400C();
          v16 = v20;
        }
        v19 = *(_QWORD *)(v16 + 16);
        if (v19 >= *(_QWORD *)(v16 + 24) >> 1)
        {
          sub_23F75400C();
          v16 = v21;
        }
        *(_QWORD *)(v16 + 16) = v19 + 1;
        v18((char *)(v16+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v19), v27, v8);
        a2 = v24;
      }
      v14 += v15;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v16;
}

void sub_23F786604(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_23F6916B8(&qword_256EA44E0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7DC9E4();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_23F78D9D4((unint64_t)v6);
  *a1 = v3;
}

void Request.init(client:context:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[4];
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  char v95[48];
  uint64_t v96;

  v96 = a2;
  v87 = a3;
  v86 = type metadata accessor for Request(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  v90 = &v74[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v85 = sub_23F78F58C();
  v88 = *(_QWORD *)(v85 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F693E0C();
  v81 = v13;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B6580();
  v80 = v15;
  sub_23F6916B8(&qword_256EA8C28);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  v83 = &v74[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v18);
  v89 = &v74[-v19];
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B51A4();
  v82 = v21;
  sub_23F6D398C();
  v84 = sub_23FB2CC14();
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v23);
  v25 = &v74[-v24];
  sub_23F6916B8(&qword_256EA8C30);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F78F2D0();
  sub_23FB2CA34();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v28);
  v29 = sub_23F78F260();
  type metadata accessor for RequestContent(v29);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B573C();
  v31 = a1;
  sub_23FB2CAE8();
  v32 = v96;
  sub_23F78F56C();
  v33 = v91;
  RequestContent.init(client:context:)(v6, (uint64_t)v95, v8);
  if (v33)
  {
    v34 = sub_23FB2CCD4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v31, v34);
    v35 = v32;
  }
  else
  {
    v78 = v8;
    v77 = sub_23FB2CC8C();
    v79 = v31;
    sub_23FB2CC98();
    v91 = v3;
    v36 = sub_23F6B7194();
    sub_23F6B4F58(v36, v37, v38);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v4, 1, v84) == 1)
    {
      v39 = 0;
      v40 = 0;
      v41 = 254;
    }
    else
    {
      v42 = sub_23F78F534();
      sub_23F759774(v42, v43, v44);
      sub_23F759774(v7, (uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
      sub_23F78F56C();
      RequestPrescribedPlan.init(client:context:)();
      v39 = v92;
      v40 = v93;
      v41 = v94;
      sub_23F78F5BC(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    }
    v45 = v88;
    v75 = v41;
    v76 = v40;
    v84 = v39;
    sub_23F6B4F84(v91, &qword_256EA8C30);
    sub_23FB2CCA4();
    v46 = (uint64_t)v89;
    sub_23FB2CCB0();
    v47 = v83;
    sub_23F6B4F58(v46, (uint64_t)v83, &qword_256EA8C28);
    v48 = v85;
    v49 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v47, 1, v85);
    v50 = (uint64_t)v90;
    v51 = v86;
    if (v49 == 1)
    {
      v52 = 0;
      v91 = 0;
      v88 = 0;
    }
    else
    {
      v53 = v80;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v45 + 32))(v80, v47, v48);
      v54 = v81;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v81, v53, v48);
      v55 = sub_23FB2CC68();
      v91 = v56;
      v88 = MEMORY[0x2426718F8]();
      v57 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v58 = v54;
      v52 = v55;
      v57(v58, v48);
      v59 = v53;
      v50 = (uint64_t)v90;
      v57(v59, v48);
      v46 = (uint64_t)v89;
    }
    sub_23F6B4F84(v46, &qword_256EA8C28);
    v60 = *(int *)(v51 + 28);
    v61 = v51;
    v62 = v50 + *(int *)(v51 + 24);
    v63 = v50 + v60;
    v64 = sub_23FB2C4B8();
    sub_23F6B5A8C(v63, v65, v66, v64);
    v67 = (uint64_t *)(v50 + *(int *)(v61 + 32));
    *v67 = 0;
    v67[1] = 0;
    v67[2] = 0;
    sub_23F78F088(v78, v50, type metadata accessor for RequestContent);
    *(_BYTE *)(v50 + *(int *)(v61 + 20)) = v77 & 1;
    v68 = v76;
    *(_QWORD *)v62 = v84;
    *(_QWORD *)(v62 + 8) = v68;
    *(_BYTE *)(v62 + 16) = v75;
    v69 = sub_23F6B6AAC();
    sub_23F787578(v69, v70);
    sub_23F77D90C(*v67, v67[1]);
    v71 = v91;
    *v67 = v52;
    v67[1] = v71;
    v72 = v87;
    v67[2] = v88;
    sub_23F78F088(v50, v72, type metadata accessor for Request);
    v73 = sub_23FB2CCD4();
    sub_23F78F2A8(v73);
    v35 = v96;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v35);
  sub_23F6B5100();
}

void RequestContent.init(client:context:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  char v72[8];

  v68 = a2;
  v66 = a3;
  v10 = sub_23FB2D4E4();
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F693E0C();
  v54 = v12;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B6580();
  v56 = v14;
  sub_23F6D398C();
  v60 = sub_23FB2CA28();
  v55 = *(_QWORD *)(v60 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F77DC18();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B6580();
  v57 = v17;
  sub_23F6D398C();
  v18 = sub_23FB2C764();
  v61 = *(_QWORD *)(v18 - 8);
  v62 = v18;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6B51A4();
  v63 = v20;
  v21 = sub_23F6D398C();
  v65 = type metadata accessor for RequestContent(v21);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v22);
  v64 = (uint64_t *)((char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6D398C();
  v24 = sub_23FB2C9E0();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F78F404();
  v27 = sub_23FB2CA34();
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B5298();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, a1, v27);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v3, v27);
  if (v29 == *MEMORY[0x24BE527F8])
  {
    v30 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v30(v3, v27);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v68);
    v30(a1, v27);
    v31 = (uint64_t)v64;
LABEL_9:
    swift_storeEnumTagMultiPayload();
    sub_23F78F088(v31, v66, type metadata accessor for RequestContent);
    sub_23F6B5100();
    return;
  }
  v53 = a1;
  if (v29 == *MEMORY[0x24BE52800])
  {
    sub_23F78F364();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v3, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v5, v24);
    sub_23F6AF9C8(v68, (uint64_t)v69);
    v32 = sub_23FB2C9A4();
    v59 = v33;
    v60 = v32;
    v34 = v70;
    v35 = v71;
    sub_23F6ADC98(v69, v70);
    (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
    v36 = *(void (**)(uint64_t))(v6 + 8);
    v37 = sub_23F78F4B0();
    v36(v37);
    v31 = (uint64_t)v64;
    v38 = v59;
    *v64 = v60;
    *(_QWORD *)(v31 + 8) = v38;
    v39 = type metadata accessor for RequestContent.TextContent(0);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v61 + 32))(v31 + *(int *)(v39 + 20), v63, v62);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v69);
    sub_23F78F2EC(v68);
    ((void (*)(uint64_t, uint64_t))v36)(v5, v24);
    goto LABEL_9;
  }
  if (v29 == *MEMORY[0x24BE52808])
  {
    sub_23F78F364();
    v40 = v55;
    v41 = v57;
    v42 = v60;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v57, v3, v60);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v4, v41, v42);
    v43 = v68;
    v44 = sub_23F6AF9C8(v68, (uint64_t)v69);
    v45 = MEMORY[0x24267167C](v44);
    v63 = &v53;
    MEMORY[0x24BDAC7A8](v45);
    v52[2] = v69;
    v67 = sub_23F70E068((void (*)(uint64_t))sub_23F7893E0, (uint64_t)v52, v45, (uint64_t)v72);
    v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(v4, v42);
    swift_bridgeObjectRelease();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v69);
    sub_23F78F2EC(v43);
    v47 = sub_23F6B6AAC();
    ((void (*)(uint64_t))v46)(v47);
    v31 = (uint64_t)v64;
    *v64 = v67;
    goto LABEL_9;
  }
  v48 = v68;
  if (v29 == *MEMORY[0x24BE527F0])
  {
    sub_23F78F364();
    v49 = v58;
    v50 = v56;
    sub_23F759774(v56, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 32));
    v51 = v54;
    sub_23F759774(v54, v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16));
    sub_23F6AF9C8(v48, (uint64_t)v69);
    v31 = (uint64_t)v64;
    RequestContent.SystemPromptResolution.init(client:context:)(v51, v69);
    sub_23F78F2EC(v48);
    sub_23F78F5BC(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    goto LABEL_9;
  }
  sub_23FB2FB6C();
  __break(1u);
}

void RequestPrescribedPlan.init(client:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;

  sub_23F6B50E8();
  v119 = v6;
  v120 = v7;
  v9 = v8;
  v107 = sub_23FB2CBB4();
  v105 = *(_QWORD *)(v107 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  v104 = (uint64_t)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6580();
  v106 = v13;
  sub_23F6D398C();
  v103 = sub_23FB2CB84();
  v101 = *(_QWORD *)(v103 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F693E0C();
  v100 = v15;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B6580();
  v102 = v17;
  sub_23F6D398C();
  v111 = sub_23FB2CB54();
  v109 = *(_QWORD *)(v111 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F693E0C();
  v108 = v19;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  v110 = (char *)&v98 - v21;
  sub_23F6D398C();
  v115 = sub_23FB2CC08();
  v113 = *(_QWORD *)(v115 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F693E0C();
  v112 = v23;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B6580();
  v114 = v25;
  sub_23F6D398C();
  v117 = sub_23FB2CBD8();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F6B6580();
  v116 = v28;
  sub_23F6D398C();
  v29 = sub_23FB2CB24();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F77DC18();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v98 - v32;
  sub_23F78F504();
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F6B59E0();
  sub_23F77DD54(v4, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v35 = sub_23F78F560();
  v37 = v36(v35);
  if (v37 == *MEMORY[0x24BE52A98])
  {
    sub_23F6B563C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    v38 = sub_23F78F5B0();
    sub_23F759774(v38, v39, v40);
    sub_23F759774(v0, (uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    v118 = sub_23FB2CB18();
    v42 = v41;
    v43 = sub_23FB2CB00();
    v44 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v44(v0, v29);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v119);
    v45 = v9;
    v46 = v42;
    sub_23F6B563C(v45, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    v44((uint64_t)v33, v29);
    v47 = v43 & 1;
LABEL_14:
    v97 = v120;
    *v120 = v118;
    v97[1] = v46;
    *((_BYTE *)v97 + 16) = v47;
    sub_23F693DDC();
    return;
  }
  v48 = v119;
  v99 = v9;
  if (v37 == *MEMORY[0x24BE52B30])
  {
    sub_23F6B563C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    v49 = v116;
    v50 = v4;
    v51 = v117;
    sub_23F75E68C(v116, v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    v52 = sub_23F6B6AAC();
    sub_23F75E68C(v52, v53, v54);
    v118 = sub_23FB2C9A4();
    v46 = v55;
    v56 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v56(v1, v51);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v48);
    sub_23F6B563C(v99, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    v56(v49, v51);
    v47 = 32;
    goto LABEL_14;
  }
  if (v37 == *MEMORY[0x24BE52B58])
  {
    sub_23F6B563C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    v57 = v113;
    v58 = v114;
    v59 = sub_23F6D3D70();
    v60 = v115;
    sub_23F6B633C(v59, v61, v62);
    v63 = v112;
    sub_23F6B633C(v112, v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16));
    v118 = sub_23FB2CB18();
    v46 = v64;
    v65 = sub_23FB2CB00();
    v66 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v66(v63, v60);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v48);
    sub_23F6B563C(v99, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    v66(v58, v60);
    v47 = v65 & 1 | 0x40;
    goto LABEL_14;
  }
  v67 = v99;
  v68 = v119;
  if (v37 == *MEMORY[0x24BE52AE0])
  {
    sub_23F6B563C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    v70 = v109;
    v69 = (uint64_t)v110;
    v71 = sub_23F6D3D70();
    sub_23F77DD54(v71, v72, v73);
    sub_23F77DD54(v108, v69, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 16));
    v118 = sub_23FB2CB18();
    v74 = v67;
    v46 = v75;
    v76 = sub_23FB2CB00();
    sub_23F78F45C(v76);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v68);
    sub_23F6B51EC(v74, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_23F78F5E4();
    v77 = 96;
LABEL_11:
    v47 = v77 & 0xFE | v117 & 1;
    goto LABEL_14;
  }
  if (v37 == *MEMORY[0x24BE52AE8])
  {
    sub_23F6B51EC(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    v79 = v101;
    v78 = v102;
    v80 = sub_23F6D3D70();
    sub_23F77DD54(v80, v81, v82);
    sub_23F77DD54(v100, v78, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 16));
    v118 = sub_23FB2CB18();
    v83 = v67;
    v46 = v84;
    v85 = sub_23FB2CB00();
    sub_23F78F45C(v85);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v68);
    sub_23F6B51EC(v83, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_23F78F5E4();
    v77 = 0x80;
    goto LABEL_11;
  }
  if (v37 == *MEMORY[0x24BE52B10])
  {
    sub_23F6B51EC(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    v87 = v105;
    v86 = v106;
    v88 = sub_23F6D3D70();
    v117 = v3;
    v89 = v107;
    sub_23F6B5EF0(v88, v90, v91);
    v92 = v104;
    sub_23F6B5EF0(v104, v86, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 16));
    v118 = sub_23FB2CB18();
    v94 = v93;
    v95 = sub_23FB2CB00();
    v96 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v96(v92, v89);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v68);
    sub_23F6B51EC(v67, *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8));
    v46 = v94;
    v96(v86, v89);
    v47 = v95 & 1 | 0xA0;
    goto LABEL_14;
  }
  sub_23FB2FB6C();
  __break(1u);
}

void ExternalAgentRequestRewriteMetadata.init(client:context:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23F78F3BC();
  v2 = sub_23FB2CC68();
  v4 = v3;
  v5 = MEMORY[0x2426718F8]();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  v6 = sub_23F78F470();
  sub_23F78F1B0(v6);
  *v1 = v2;
  v1[1] = v4;
  v1[2] = v5;
  sub_23F6B5F7C();
}

uint64_t sub_23F787578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA2798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void MessagePayload.Request.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  char v30;

  sub_23F6B50E8();
  v4 = v3;
  sub_23F6916B8(&qword_256EA8C28);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B6B5C();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B52B0();
  sub_23F6916B8(&qword_256EA8C30);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F693EB0();
  type metadata accessor for RequestContent(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F78F314();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5208();
  sub_23F78F490();
  MessagePayload.RequestContent.init(ifps:)();
  v10 = (int *)type metadata accessor for Request(0);
  v11 = v4 + v10[6];
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 <= 0xFD)
  {
    v16 = *(_QWORD *)(v11 + 8);
    v29[0] = *(_QWORD *)v11;
    v15 = v29[0];
    v29[1] = v16;
    v30 = v12;
    sub_23F78F4BC();
    sub_23F78F4BC();
    MessagePayload.RequestPrescribedPlan.init(ifps:)((uint64_t)v29);
    v17 = sub_23F78F504();
    sub_23F75965C(v2, v18, v19, v17);
    sub_23F78942C(v15, v16, v12);
  }
  else
  {
    v13 = sub_23F78F504();
    sub_23F78F2E4(v2, 1, v14, v13);
  }
  sub_23F6B4F58(v4 + v10[7], v1, &qword_256EA2798);
  if (*(_QWORD *)(v4 + v10[8] + 8))
  {
    v20 = sub_23F78F51C();
    sub_23F7893FC(v20, v21);
    swift_bridgeObjectRetain();
    sub_23F6B54F8();
    v22 = sub_23F78F51C();
    MEMORY[0x2426718E0](v22);
    v23 = sub_23F78F470();
    sub_23F78F2BC(v23);
    v24 = sub_23F78F51C();
    sub_23F77D90C(v24, v25);
  }
  else
  {
    v26 = sub_23F78F470();
    sub_23F78F2E4(v0, 1, v27, v26);
  }
  v28 = sub_23FB2CCBC();
  sub_23F714040(v28, type metadata accessor for Request);
  sub_23F693DDC();
}

void MessagePayload.RequestContent.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;

  sub_23F6D3A90();
  v2 = sub_23F78F298();
  type metadata accessor for RequestContent.SystemPromptResolution(v2);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for RequestContent.TextContent(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_23F78F2D0();
  type metadata accessor for RequestContent(v7);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B53AC();
  sub_23F6F5920(v0, v1, v9);
  sub_23F6B6224();
  v10 = (char *)sub_23F787890 + 4 * byte_23FB5E240[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F787890()
{
  uint64_t v0;
  uint64_t v1;

  v0 = _s16IntelligenceFlow14MessagePayloadO14RequestContentO04StopF0V0aB14PlannerSupportE4ifpsAghDOAFV_tcfC_0();
  sub_23F78F204(v0, type metadata accessor for RequestContent);
  sub_23F78F448();
  v1 = sub_23FB2CA34();
  sub_23F78F1EC(v1);
  sub_23F6B69E0();
}

void MessagePayload.RequestPrescribedPlan.init(ifps:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23F7879D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F78F484();
  sub_23FB2CB0C();
  sub_23F78F448();
  v2 = sub_23FB2CC14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t MessagePayload.ExternalAgentRequestRewriteMetadata.init(ifps:)()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  sub_23F6B5F1C();
  v0 = sub_23F6B68CC();
  MEMORY[0x2426718E0](v0);
  sub_23F6B5908();
  return swift_bridgeObjectRelease();
}

void ExternalAgentRequest.init(client:context:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];
  uint64_t v60;

  v58 = a1;
  v54 = a3;
  v56 = type metadata accessor for ExternalAgentRequest(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v55 = v9;
  v57 = sub_23F78F58C();
  v53 = *(_QWORD *)(v57 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F693E0C();
  v52 = v11;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B6580();
  v51 = v13;
  sub_23F6916B8(&qword_256EA8C28);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v48 - v16;
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B5864();
  sub_23FB2CA34();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  v20 = sub_23F77DB24();
  type metadata accessor for RequestContent(v20);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B5208();
  v23 = a2[3];
  v22 = a2[4];
  sub_23F6ADC98(a2, v23);
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v23, v22);
  sub_23FB2CAE8();
  sub_23F6AF9C8((uint64_t)a2, (uint64_t)v59);
  v24 = v60;
  RequestContent.init(client:context:)(v6, (uint64_t)v59, v4);
  if (v24)
  {
    sub_23F78F374();
    v25 = sub_23FB2CAF4();
    sub_23F78F2A8(v25);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a2);
  }
  else
  {
    v26 = v53;
    v49 = v3;
    v50 = 0;
    sub_23FB2CAC4();
    sub_23FB2CAD0();
    sub_23F6B4F58((uint64_t)v17, v5, &qword_256EA8C28);
    v27 = (uint64_t)v17;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v5, 1, v57) == 1)
    {
      v28 = 0;
      v60 = 0;
      v29 = 0;
    }
    else
    {
      v30 = v51;
      v31 = v57;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v51, v5, v57);
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      v48 = v27;
      v33 = v52;
      v32(v52, v30, v31);
      v34 = sub_23FB2CC68();
      v60 = v35;
      v29 = MEMORY[0x2426718F8]();
      v36 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v37 = v33;
      v27 = v48;
      v36(v37, v31);
      v38 = sub_23F78F5B0();
      v28 = v34;
      ((void (*)(uint64_t))v36)(v38);
    }
    v39 = v55;
    v40 = v56;
    sub_23F6B4F84(v27, &qword_256EA8C28);
    v41 = v39 + *(int *)(v40 + 20);
    v42 = sub_23FB2C4B8();
    sub_23F6B5A8C(v41, v43, v44, v42);
    v45 = (uint64_t *)(v39 + *(int *)(v40 + 24));
    *v45 = 0;
    v45[1] = 0;
    v45[2] = 0;
    sub_23F78F088(v4, v39, type metadata accessor for RequestContent);
    sub_23F787578(v49, v41);
    sub_23F77D90C(*v45, v45[1]);
    v46 = v60;
    *v45 = v28;
    v45[1] = v46;
    v45[2] = v29;
    sub_23F78F088(v39, v54, type metadata accessor for ExternalAgentRequest);
    sub_23F78F374();
    v47 = sub_23FB2CAF4();
    sub_23F78F2A8(v47);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a2);
  }
  sub_23F6B5100();
}

void MessagePayload.ExternalAgentRequest.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23F6D3A90();
  v3 = v2;
  sub_23F6916B8(&qword_256EA8C28);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B6B5C();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23F6B5864();
  type metadata accessor for RequestContent(v6);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F78F314();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693EB0();
  sub_23F78F490();
  MessagePayload.RequestContent.init(ifps:)();
  v9 = type metadata accessor for ExternalAgentRequest(0);
  sub_23F6B4F58(v3 + *(int *)(v9 + 20), v1, &qword_256EA2798);
  if (*(_QWORD *)(v3 + *(int *)(v9 + 24) + 8))
  {
    v10 = sub_23F78F4A0();
    sub_23F7893FC(v10, v11);
    sub_23F77DCD4();
    sub_23F6B90D8();
    v12 = sub_23F78F4A0();
    MEMORY[0x2426718E0](v12);
    v13 = sub_23F78F470();
    sub_23F78F2BC(v13);
    v14 = sub_23F78F4A0();
    sub_23F77D90C(v14, v15);
  }
  else
  {
    v16 = sub_23F78F470();
    sub_23F78F2E4(v0, 1, v17, v16);
  }
  v18 = sub_23FB2CADC();
  sub_23F714040(v18, type metadata accessor for ExternalAgentRequest);
  sub_23F6B69E0();
}

void RequestContent.TextContent.init(client:context:)()
{
  sub_23F788724();
}

uint64_t RequestContent.SpeechContent.init(client:context:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];
  _BYTE v9[16];

  v4 = MEMORY[0x24267167C]();
  v8[2] = a1;
  v5 = sub_23F70E068((void (*)(uint64_t))sub_23F78F19C, (uint64_t)v8, v4, (uint64_t)v9);
  v6 = sub_23FB2CA28();
  sub_23F78F1B0(v6);
  sub_23F6B6090();
  result = _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  *a2 = v5;
  return result;
}

#error "23F7880DC: call analysis failed (funcsize=94)"

uint64_t RequestContent.StopContent.init(client:context:)(uint64_t a1, uint64_t a2)
{
  return sub_23F789204(a1, a2, MEMORY[0x24BE52798]);
}

void MessagePayload.RequestContent.TextContent.init(ifps:)(uint64_t a1)
{
  sub_23F788818(a1, (void (*)(uint64_t))MEMORY[0x24BE527A0]);
}

void MessagePayload.RequestContent.SpeechContent.init(ifps:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  sub_23F6B50E8();
  v2 = v1;
  v4 = v3;
  type metadata accessor for SpeechRequestCandidate(0);
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F693E0C();
  v36 = (uint64_t *)v6;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B6580();
  v37 = v8;
  sub_23F6D398C();
  v9 = sub_23FB2CA1C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v38 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v32 - v13;
  v15 = *v2;
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v32[1] = v4;
    v40 = MEMORY[0x24BEE4AF8];
    sub_23F7123A8();
    sub_23F78F3B0();
    v32[0] = v15;
    v18 = v15 + v17;
    v33 = *(_QWORD *)(v0 + 72);
    v34 = v14;
    v35 = v9;
    v19 = v38;
    do
    {
      v39 = v16;
      v20 = v10;
      v21 = v37;
      sub_23F78F5C8(v18, v37);
      v22 = v36;
      sub_23F78F5C8(v21, (uint64_t)v36);
      v23 = *v22;
      v24 = v22[1];
      sub_23F6B90D8();
      MEMORY[0x242671688](v23, v24);
      sub_23F6D3508((uint64_t)v22, type metadata accessor for SpeechRequestCandidate);
      v25 = v20;
      v26 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v26(v14, v19, v9);
      sub_23F6D3508(v21, type metadata accessor for SpeechRequestCandidate);
      v27 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7123A8();
        v27 = v40;
      }
      v29 = *(_QWORD *)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      v10 = v25;
      if (v29 >= v28 >> 1)
      {
        sub_23F78F598(v28);
        sub_23F7123A8();
        v27 = v40;
      }
      *(_QWORD *)(v27 + 16) = v29 + 1;
      sub_23F78F3B0();
      v31 = v27 + v30 + *(_QWORD *)(v25 + 72) * v29;
      v14 = v34;
      v9 = v35;
      v26((char *)v31, v34, v35);
      v40 = v27;
      v18 += v33;
      v16 = v39 - 1;
    }
    while (v39 != 1);
  }
  swift_bridgeObjectRelease();
  sub_23FB2C9EC();
  sub_23F693DDC();
}

void SystemPromptResolution.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_23F6B50E8();
  v5 = v4;
  v24 = v6;
  sub_23F78F35C();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v23 = v8;
  sub_23F6916B8(&qword_256EA8C40);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23F6B58C8();
  v21 = *(_QWORD *)(v10 - 8);
  v22 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F78F258();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B5864();
  sub_23FB2D484();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F78F260();
  v16 = sub_23FB2C4B8();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B5268();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B573C();
  sub_23F6B4F58(v5, v3, &qword_256EA2798);
  v19 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v5 + v19[5], v16);
  sub_23F6F5920(v5 + v19[6], v0, type metadata accessor for RequestContent.SystemPromptResolution.UserAction);
  SystemPromptResolution.UserAction.init(ifps:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v13, v5 + v19[7], v22);
  sub_23F6F5920(v5 + v19[8], v23, type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput);
  SystemPromptResolution.ResolutionInput.init(ifps:)();
  v20 = sub_23FB2D478();
  sub_23F78F2BC(v20);
  sub_23FB2D4A8();
  sub_23F6D3508(v5, type metadata accessor for RequestContent.SystemPromptResolution);
  sub_23F693DDC();
}

uint64_t sub_23F7885A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v21 = a3;
  v5 = sub_23FB2C764();
  v22 = *(_QWORD *)(v5 - 8);
  v23 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2CA1C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  sub_23F6AF9C8(a2, (uint64_t)v24);
  v12 = sub_23FB2C9A4();
  v14 = v13;
  v15 = v25;
  v16 = v26;
  sub_23F6ADC98(v24, v25);
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v17 = v21;
  *v21 = v12;
  v17[1] = v14;
  v18 = v17;
  v19 = type metadata accessor for SpeechRequestCandidate(0);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))((char *)v18 + *(int *)(v19 + 20), v7, v23);
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v24);
}

void SpeechRequestCandidate.init(client:context:)()
{
  sub_23F788724();
}

void sub_23F788724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t (*v3)(_QWORD);
  uint64_t (*v4)(void);
  uint64_t (*v5)(void);
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t (*v22)(_QWORD);

  sub_23F6B50E8();
  v22 = v2;
  v20 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v21 = sub_23F6B58C8();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5268();
  v13 = v5();
  v15 = v14;
  v16 = v7[3];
  v17 = v7[4];
  sub_23F6ADC98(v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  v18 = v20(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v9, v18);
  *v11 = v13;
  v11[1] = v15;
  v19 = v22(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 32))((char *)v11 + *(int *)(v19 + 20), v1, v21);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v7);
  sub_23F693DDC();
}

void MessagePayload.RequestContent.SpeechContent.Candidate.init(ifps:)(uint64_t a1)
{
  sub_23F788818(a1, (void (*)(uint64_t))MEMORY[0x24BE527C8]);
}

void sub_23F788818(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;

  sub_23F77DCD4();
  v4 = sub_23F6B7194();
  a2(v4);
  sub_23F6D3928(a1);
  sub_23F6B5F7C();
}

void RequestContent.SystemPromptResolution.UserAction.init(client:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  int v40;
  uint64_t v41;
  char v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;

  sub_23F6B50E8();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = sub_23FB2D46C();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&a9 - v35;
  sub_23FB2D484();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6B59F8();
  sub_23F72E0C8((uint64_t)v20, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16));
  v38 = sub_23F6B68CC();
  v40 = v39(v38);
  if (v40 == *MEMORY[0x24BE53A30])
    goto LABEL_2;
  if (v40 == *MEMORY[0x24BE53A50])
  {
    sub_23F78F1C4();
    sub_23F78F1E4((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    v41 = sub_23FB2ED38();
    sub_23F78F240(v41);
    sub_23F78F258();
    sub_23F713E50();
    goto LABEL_16;
  }
  if (v40 == *MEMORY[0x24BE53A38])
  {
LABEL_2:
    sub_23F78F1C4();
    sub_23F78F1E4((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    *v31 = *v20;
    sub_23F78F258();
    sub_23F713E50();
LABEL_16:
    swift_storeEnumTagMultiPayload();
    sub_23F693DDC();
    return;
  }
  if (v40 == *MEMORY[0x24BE53A48])
  {
    sub_23F78F1C4();
    sub_23F78F1E4((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    *(_QWORD *)v31 = *(_QWORD *)v20;
    sub_23F78F258();
    goto LABEL_16;
  }
  if (v40 == *MEMORY[0x24BE53A58])
  {
    sub_23F78F1C4();
    sub_23F78F1E4((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    *(_QWORD *)v31 = *(_QWORD *)v20;
    sub_23F78F258();
    sub_23F713E50();
    goto LABEL_16;
  }
  if (v40 == *MEMORY[0x24BE53A40])
  {
    sub_23F78F1E4((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    sub_23F77DD54((uint64_t)v36, (uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
    sub_23F77DD54(v21, (uint64_t)v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
    v42 = sub_23FB2D460();
    v43 = *(void (**)(uint64_t))(v23 + 8);
    v44 = sub_23F78F560();
    v43(v44);
    sub_23F78F1C4();
    ((void (*)(char *, uint64_t))v43)(v36, v32);
    *v31 = v42 & 1;
    sub_23F78F258();
    sub_23F713E50();
    goto LABEL_16;
  }
  if (v40 == *MEMORY[0x24BE53A20])
  {
    v45 = *(void (**)(uint64_t))(v22 + 8);
    v46 = sub_23F6B68CC();
    v45(v46);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v27);
    v47 = sub_23F78F478();
    v45(v47);
    sub_23F78F258();
    sub_23F713E50();
    goto LABEL_16;
  }
  if (v40 == *MEMORY[0x24BE53A28])
  {
    sub_23F78F1C4();
    sub_23F78F258();
    sub_23F713E50();
    goto LABEL_16;
  }
  sub_23F78F5A4();
  __break(1u);
}

void RequestContent.SystemPromptResolution.ResolutionInput.init(client:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  _QWORD v42[4];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  sub_23F6B50E8();
  v50 = v8;
  v51 = v7;
  v10 = v9;
  v45 = sub_23FB2CA28();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F77DC18();
  MEMORY[0x24BDAC7A8](v12);
  v44 = (uint64_t)&v43 - v13;
  sub_23F6D398C();
  v14 = sub_23FB2C764();
  v47 = *(_QWORD *)(v14 - 8);
  v48 = (uint64_t *)v14;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B51A4();
  v46 = v16;
  sub_23F6D398C();
  v17 = sub_23FB2C9E0();
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F78F2D0();
  v20 = sub_23FB2D478();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B5298();
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v49 = v10;
  sub_23F77DD54(v0, v10, v22);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v0, v20);
  if (v23 == *MEMORY[0x24BE539F8])
  {
    sub_23F6B563C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
    sub_23F72E0C8(v3, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    sub_23F72E0C8(v2, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
    sub_23F6AF9C8(v51, (uint64_t)v53);
    v24 = sub_23FB2C9A4();
    v44 = v25;
    v45 = v24;
    v26 = v54;
    v27 = v55;
    sub_23F6ADC98(v53, v54);
    v28 = v46;
    (*(void (**)(uint64_t, uint64_t))(v27 + 16))(v26, v27);
    v29 = *(void (**)(uint64_t))(v4 + 8);
    v30 = sub_23F78F478();
    v29(v30);
    v31 = v50;
    v32 = v44;
    *v50 = v45;
    v31[1] = v32;
    v33 = type metadata accessor for RequestContent.TextContent(0);
    (*(void (**)(char *, uint64_t, uint64_t *))(v47 + 32))((char *)v31 + *(int *)(v33 + 20), v28, v48);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v53);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v51);
    sub_23F6B563C(v49, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    ((void (*)(uint64_t, uint64_t))v29)(v3, v17);
    sub_23F78F35C();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    sub_23F693DDC();
    return;
  }
  v34 = v51;
  if (v23 == *MEMORY[0x24BE53A08])
  {
    sub_23F6B563C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
    v35 = v44;
    v36 = v45;
    sub_23F75E68C(v44, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    sub_23F75E68C(v1, v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    v37 = sub_23F6AF9C8(v34, (uint64_t)v53);
    v38 = MEMORY[0x24267167C](v37);
    v48 = &v43;
    MEMORY[0x24BDAC7A8](v38);
    v42[2] = v53;
    v39 = sub_23F70E068((void (*)(uint64_t))sub_23F78F19C, (uint64_t)v42, v38, (uint64_t)&v52);
    v40 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v40(v1, v36);
    swift_bridgeObjectRelease();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v53);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v34);
    sub_23F6B563C(v49, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    v40(v35, v36);
    *v50 = v39;
    sub_23F78F35C();
    goto LABEL_9;
  }
  if (v23 == *MEMORY[0x24BE53A00])
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v51);
    sub_23F6B563C(v49, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_23F78F35C();
    goto LABEL_9;
  }
  v41 = v49;
  if (v23 == *MEMORY[0x24BE539F0])
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v51);
    sub_23F6B563C(v41, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_23F78F35C();
    goto LABEL_9;
  }
  sub_23FB2FB6C();
  __break(1u);
}

void SystemPromptResolution.UserAction.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;

  sub_23F78F258();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B6B5C();
  v1 = sub_23F6B68CC();
  sub_23F6F5920(v1, v2, v3);
  v4 = (char *)sub_23F788F20 + 4 * byte_23FB5E24A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F788F20(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;

  sub_23F78F204(a1, type metadata accessor for RequestContent.SystemPromptResolution.UserAction);
  *v1 = *v2;
  sub_23F78F448();
  v3 = sub_23FB2D484();
  sub_23F78F1EC(v3);
  sub_23F694C84();
}

void SystemPromptResolution.ResolutionInput.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;

  sub_23F6D3A90();
  v2 = sub_23F78F298();
  type metadata accessor for RequestContent.TextContent(v2);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F78F35C();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F693EB0();
  sub_23F6F5920(v0, v1, v6);
  sub_23F6B7194();
  v7 = (char *)sub_23F7890E8 + 4 * byte_23FB5E252[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F7890E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;

  sub_23F78F088(v2, v0, type metadata accessor for RequestContent.TextContent);
  sub_23F6F5920(v0, (uint64_t)v1, type metadata accessor for RequestContent.TextContent);
  v3 = *v1;
  v4 = v1[1];
  sub_23F6B90D8();
  MEMORY[0x24267164C](v3, v4);
  v5 = sub_23F78F534();
  sub_23F6D3508(v5, v6);
  sub_23F78F204(v7, type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput);
  sub_23F6D3508(v0, type metadata accessor for RequestContent.TextContent);
  sub_23F78F448();
  v8 = sub_23FB2D478();
  sub_23F78F1EC(v8);
  sub_23F6B69E0();
}

void RequestContent.SystemPromptResolution.RequirementResolution.init(client:context:)()
{
  uint64_t v0;
  _BYTE *v1;
  char v2;
  uint64_t v3;

  sub_23F78F3BC();
  v2 = sub_23FB2D460();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  v3 = sub_23FB2D46C();
  sub_23F78F1B0(v3);
  *v1 = v2 & 1;
  sub_23F694C84();
}

uint64_t RequestContent.SystemPromptResolution.ActionCancellation.init(client:context:)(uint64_t a1, uint64_t a2)
{
  return sub_23F789204(a1, a2, MEMORY[0x24BE53A90]);
}

uint64_t sub_23F789204(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a2);
  v5 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t SystemPromptResolution.RequirementResolution.init(ifps:)()
{
  return sub_23FB2D454();
}

void RequestPrescribedPlan.SearchTool.init(client:context:)()
{
  sub_23F789320();
}

void RequestPrescribedPlan.LowConfidenceKnowledgeTool.init(client:context:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F78F3BC();
  v2 = sub_23FB2C9A4();
  v4 = v3;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  v5 = sub_23FB2CBD8();
  sub_23F78F1B0(v5);
  *v1 = v2;
  v1[1] = v4;
  sub_23F6B5F7C();
}

void RequestPrescribedPlan.TextTool.init(client:context:)()
{
  sub_23F789320();
}

void RequestPrescribedPlan.ConvertTool.init(client:context:)()
{
  sub_23F789320();
}

void RequestPrescribedPlan.DisplayTool.init(client:context:)()
{
  sub_23F789320();
}

void RequestPrescribedPlan.KnowledgeTool.init(client:context:)()
{
  sub_23F789320();
}

void sub_23F789320()
{
  uint64_t (*v0)(_QWORD);
  uint64_t (*v1)(_QWORD);
  uint64_t (*v2)(void);
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23F6D3A90();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8();
  v11 = v10;
  LOBYTE(v3) = v3();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v5);
  v12 = v1(0);
  sub_23F78F1B0(v12);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v11;
  *(_BYTE *)(v7 + 16) = v3 & 1;
  sub_23F6B69E0();
}

uint64_t MessagePayload.RequestPrescribedPlan.SearchTool.init(ifps:)()
{
  return sub_23FB2CB0C();
}

void MessagePayload.RequestPrescribedPlan.LowConfidenceKnowledgeTool.init(ifps:)()
{
  JUMPOUT(0x242671844);
}

uint64_t MessagePayload.RequestPrescribedPlan.TextTool.init(ifps:)()
{
  return sub_23FB2CB0C();
}

uint64_t MessagePayload.RequestPrescribedPlan.ConvertTool.init(ifps:)()
{
  return sub_23FB2CB0C();
}

uint64_t MessagePayload.RequestPrescribedPlan.DisplayTool.init(ifps:)()
{
  return sub_23FB2CB0C();
}

uint64_t MessagePayload.RequestPrescribedPlan.KnowledgeTool.init(ifps:)()
{
  return sub_23FB2CB0C();
}

uint64_t sub_23F7893E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23F7885A8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_23F7893FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23F78942C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFDu)
    return sub_23F735FE8(a1, a2, a3);
  return a1;
}

uint64_t MessagePayload.PlannerReturnedRawPlan.init(ifps:)(__int128 *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  v1 = a1[2];
  v2 = *a1;
  v8 = a1[1];
  v9[0] = v1;
  v7 = v2;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)a1 + 41);
  v3 = v8;
  sub_23F78CFEC((uint64_t)&v7);
  sub_23F6B5F1C();
  v4 = sub_23F6B6548();
  v5 = sub_23F785690(v4, (uint64_t)&v7);
  sub_23F6B6090();
  MEMORY[0x2426718B0](v3, *((_QWORD *)&v3 + 1), v5);
  return sub_23F78D03C((uint64_t)&v7);
}

void MessagePayload.ActionWillExecute.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F6B50E8();
  v2 = v1;
  v3 = sub_23F6B58C8();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B52B0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v2);
  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for Action(0) + 36));
  sub_23F6B54F8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23F78D08C(v5);
  swift_bridgeObjectRetain();
  sub_23FB2CA40();
  sub_23F6D3508(v2, type metadata accessor for Action);
  sub_23F693DDC();
}

#error "23F7896D0: call analysis failed (funcsize=99)"

void MessagePayload.ActionWillExecute.ToolParameterValue.init(ifps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_23F6D3A90();
  a17 = v22;
  a18 = v23;
  sub_23F78F298();
  sub_23FB2ED38();
  sub_23F78F54C();
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v28 = sub_23F78F404();
  type metadata accessor for ToolParameterValue(v28);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6B5208();
  sub_23F6F5920(v18, (uint64_t)v20, v30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v31 = sub_23F78F534();
    sub_23F72E0C8(v31, v32, v33);
    sub_23F72E0C8((uint64_t)v27, v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
    v34 = sub_23FB2CA94();
    sub_23F78F204(v34, type metadata accessor for ToolParameterValue);
    sub_23F78F1E4(v19, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  }
  else
  {
    v35 = MEMORY[0x242671724](*v20, v20[1]);
    sub_23F78F204(v35, type metadata accessor for ToolParameterValue);
  }
  sub_23F78F448();
  v36 = sub_23FB2CAAC();
  sub_23F78F1EC(v36);
  sub_23F6B69E0();
}

void MessagePayload.ActionWillExecute.PromptSelection.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  int v6;
  uint64_t v7;

  sub_23F78F298();
  sub_23FB2D040();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B52B0();
  sub_23F72E0C8(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v4 = sub_23F78F478();
  v6 = v5(v4);
  if (v6 == *MEMORY[0x24BE53140])
  {
    sub_23F78F1E4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    sub_23FB2CA64();
    sub_23F78F1E4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
LABEL_7:
    sub_23F78F448();
    v7 = sub_23FB2CA88();
    sub_23F78F1EC(v7);
    sub_23F6B5F7C();
    return;
  }
  if (v6 == *MEMORY[0x24BE53150])
  {
    sub_23FB2CA7C();
    sub_23F78F1E4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    goto LABEL_7;
  }
  if (v6 == *MEMORY[0x24BE53148])
  {
    sub_23FB2CA70();
    sub_23F78F1E4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    goto LABEL_7;
  }
  sub_23F78F5A4();
  __break(1u);
}

uint64_t sub_23F7899BC()
{
  uint64_t v0;

  v0 = sub_23F6916B8(&qword_256EA8CF0);
  sub_23F6D3418(v0, qword_256EA8C10);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA8C10);
  sub_23F6916B8(&qword_256EA8D30);
  return sub_23FB2D64C();
}

uint64_t sub_23F789A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v54 = a2;
  v4 = sub_23F6916B8(&qword_256EA6540);
  MEMORY[0x24BDAC7A8](v4);
  v55 = (uint64_t *)((char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_23F6916B8(&qword_256EA8D28);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v53 = (uint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v56 = (uint64_t)&v52 - v9;
  v61 = type metadata accessor for ProgramStatement(0);
  v10 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for Expression(0);
  MEMORY[0x24BDAC7A8](v62);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23FB2C764();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v52 - v19;
  v59 = v22;
  v60 = v21;
  (*(void (**)(char *, uint64_t))(v22 + 16))((char *)&v52 - v19, v2);
  v23 = *(_QWORD *)(a1 + 16);
  v57 = a1;
  v58 = v23;
  if (v23)
  {
    v24 = v57 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v25 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      v26 = v58;
      while (1)
      {
        --v26;
        sub_23F6F5920(v24 + v25 * v26, (uint64_t)v12, type metadata accessor for ProgramStatement);
        v27 = v20;
        v28 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
        sub_23F6D3508((uint64_t)v12, type metadata accessor for ProgramStatement);
        if ((v28 & 1) != 0)
          break;
        v20 = v27;
        if (!v26)
          goto LABEL_10;
      }
      sub_23F6F5920(v24 + v25 * v26 + *(int *)(v61 + 20), (uint64_t)v14, type metadata accessor for Expression);
      if (swift_getEnumCaseMultiPayload() != 1)
        break;
      v30 = v59;
      v29 = v60;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v18, v14, v60);
      v20 = v27;
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v27, v18, v29);
    }
    sub_23F6D3508((uint64_t)v14, type metadata accessor for Expression);
    v20 = v27;
  }
LABEL_10:
  v63 = v57;
  v31 = sub_23F78EF60(v57, (uint64_t)v20);
  MEMORY[0x24BDAC7A8](v31);
  *(&v52 - 2) = (uint64_t)&v63;
  v32 = v55;
  sub_23F7F5D14((_QWORD *(*)(_QWORD *__return_ptr, uint64_t *))sub_23F78F180, v33, v34, v55);
  v35 = v61;
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v32, 1, v61) == 1)
  {
    sub_23F6B4F84((uint64_t)v32, &qword_256EA6540);
    v36 = v56;
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v56, 1, 1, v62);
  }
  else
  {
    v36 = v56;
    sub_23F6F5920((uint64_t)v32 + *(int *)(v35 + 20), v56, type metadata accessor for Expression);
    sub_23F6D3508((uint64_t)v32, type metadata accessor for ProgramStatement);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v36, 0, 1, v62);
    v37 = v53;
    sub_23F6B4F58(v36, (uint64_t)v53, &qword_256EA8D28);
    if (!swift_getEnumCaseMultiPayload())
    {
      v44 = *v37;
      v43 = v37[1];
      v45 = *((unsigned __int8 *)v37 + 16);
      if (v45 == 4)
      {
        v49 = v57;
        swift_bridgeObjectRetain();
        sub_23F7863B0(v44, v49);
        sub_23F6FEA10(v44, v43, 4);
        v50 = v54;
        sub_23FB2C9EC();
        v51 = *MEMORY[0x24BE53E90];
        v48 = sub_23FB2D5D4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, v51, v48);
        v40 = v50;
      }
      else
      {
        if (v45 != 3)
        {
          sub_23F6FEA10(*v37, v37[1], v45);
          goto LABEL_14;
        }
        v46 = v54;
        MEMORY[0x24267224C](*v37, v37[1]);
        v47 = *MEMORY[0x24BE53E98];
        v48 = sub_23FB2D5D4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v46, v47, v48);
        v40 = v46;
      }
      v41 = 0;
      v39 = v48;
      goto LABEL_15;
    }
    sub_23F6D3508((uint64_t)v37, type metadata accessor for Expression);
  }
LABEL_14:
  v38 = v54;
  v39 = sub_23FB2D5D4();
  v40 = v38;
  v41 = 1;
LABEL_15:
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v40, v41, 1, v39);
  sub_23F6B4F84(v36, &qword_256EA8D28);
  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v20, v60);
}

uint64_t sub_23F789F38()
{
  swift_bridgeObjectRetain();
  return sub_23FB2D5B0();
}

void PlannerPromptData.init(ifps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(unint64_t, uint64_t);
  uint64_t v122;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t DecorationResult;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t);
  uint64_t v148;
  void (*v149)(_QWORD, _QWORD);
  void (*v150)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t);
  uint64_t v157;
  void (*v158)(uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD v172[6];
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  int v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  void (*v218)(_QWORD, _QWORD);
  void (*v219)(uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void (*v230)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  uint64_t v231;

  sub_23F6B50E8();
  a19 = v26;
  a20 = v27;
  v29 = v28;
  v176 = v30;
  sub_23FB2DC28();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B51A4();
  sub_23F6B5314(v32);
  sub_23F6916B8(&qword_256EA8C50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B51A4();
  v206 = v34;
  sub_23F6D398C();
  v35 = sub_23FB2D178();
  sub_23F6B53F8(v35, (uint64_t)&a14);
  v196 = v36;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F693E0C();
  v195 = (void (*)(uint64_t, uint64_t))v38;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B6580();
  sub_23F6B5314(v40);
  sub_23F6916B8(&qword_256EA8C58);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F6B51A4();
  v199 = v42;
  sub_23F6D398C();
  v43 = sub_23FB2D190();
  sub_23F6B53F8(v43, (uint64_t)&v231);
  v208 = v44;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F693E0C();
  v204 = v46;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F6D3D14();
  v193 = v48;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v49);
  sub_23F6D3D14();
  v192 = v50;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F6B6580();
  v191 = v52;
  sub_23F6D398C();
  v53 = sub_23FB2DC7C();
  sub_23F6B53F8(v53, (uint64_t)&v230);
  v207 = v54;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v55);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v56);
  sub_23F6B6580();
  v218 = v57;
  sub_23F6916B8(&qword_256EA2950);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v58);
  v209 = sub_23F78F330();
  v190 = *(_QWORD *)(v209 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v59);
  sub_23F693E0C();
  v189 = v60;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v61);
  sub_23F6B6580();
  v188 = v62;
  sub_23F6D398C();
  v220 = sub_23FB2DAF0();
  sub_23F6B5B70();
  MEMORY[0x24BDAC7A8](v63);
  sub_23F693E0C();
  v221 = v64;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v65);
  v217 = (char *)v172 - v66;
  sub_23F6916B8(&qword_256EA8C60);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v67);
  v214 = (uint64_t)v172 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6D398C();
  v223 = sub_23FB2D100();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v69);
  sub_23F693E0C();
  v187 = v70;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v71);
  v213 = (char *)v172 - v72;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v73);
  v75 = (char *)v172 - v74;
  v76 = sub_23F78F4FC();
  v229 = *(_QWORD *)(v76 - 8);
  v230 = (void (*)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v76;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v77);
  sub_23F693EB0();
  sub_23F6916B8(&qword_256EA8C68);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v78);
  v80 = (char *)v172 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_23FB2D118();
  v222 = *(_QWORD *)(v224 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v81);
  sub_23F693E0C();
  v216 = v82;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v83);
  sub_23F6D3D14();
  v186 = v84;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v85);
  sub_23F6D3D14();
  v185 = v86;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v87);
  sub_23F6B6580();
  v203 = v88;
  v89 = sub_23F6D398C();
  v215 = type metadata accessor for RetrievedContextStatement(v89);
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v90);
  sub_23F6B51A4();
  v228 = v91;
  sub_23F6916B8(&qword_256EA71F8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v92);
  sub_23F6B51A4();
  sub_23F6B5314(v93);
  v178 = v29;
  v94 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 16);
  v219 = v24;
  if (v94)
  {
    v226 = v94;
    v227 = v22;
    sub_23F78F3B0();
    v97 = v95 + v96;
    v212 = *(_QWORD *)(v20 + 72);
    v211 = *MEMORY[0x24BE57298];
    v201 = *MEMORY[0x24BE57300];
    v183 = *MEMORY[0x24BE572F0];
    v180 = *MEMORY[0x24BE57308];
    v175 = *MEMORY[0x24BE572D8];
    v172[5] = *MEMORY[0x24BE572E8];
    v172[3] = *MEMORY[0x24BE57268];
    v172[2] = *MEMORY[0x24BE533F8];
    v172[4] = *MEMORY[0x24BE533D8];
    v174 = *MEMORY[0x24BE533D0];
    v179 = *MEMORY[0x24BE533F0];
    v182 = *MEMORY[0x24BE533E0];
    v200 = *MEMORY[0x24BE533E8];
    v210 = *MEMORY[0x24BE53400];
    v173 = v95;
    swift_bridgeObjectRetain();
    v225 = MEMORY[0x24BEE4AF8];
    v202 = v21;
    v98 = v209;
    v184 = v80;
    v181 = v25;
    while (1)
    {
      v99 = v228;
      sub_23F6F5920(v97, v228, type metadata accessor for RetrievedContextStatement);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v229 + 16))(v227, v99 + *(int *)(v215 + 20), v230);
      v100 = v217;
      sub_23FB2DDD8();
      v102 = v220;
      v101 = v221;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v221, v100, v220);
      v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v101, v102);
      v104 = v210;
      if (v103 == v211
        || (sub_23F78F43C(), v110)
        || (sub_23F78F43C(), v110)
        || (sub_23F78F43C(), v110)
        || (sub_23F78F43C(), v110)
        || (sub_23F78F43C(), v110)
        || (sub_23F78F43C(), v110))
      {
        v105 = (uint64_t)v213;
        v131 = v223;
        (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v213, v104, v223);
        v130 = v214;
        sub_23F6B633C(v214, v105, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
        v129 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v221, v220);
        v129 = 1;
        v130 = v214;
        v131 = v223;
      }
      sub_23F77DD78(v130, v129);
      sub_23F6B5164(v130, 1, v131);
      if (v110)
        break;
      sub_23F6B633C((uint64_t)v75, v130, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
      v108 = v202;
      sub_23FB2DDCC();
      v109 = v98;
      sub_23F6B5164(v108, 1, v98);
      if (v110)
      {
        sub_23F750B40(v229);
        sub_23F6B530C((uint64_t)v75, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
        v106 = v108;
        v107 = &qword_256EA2950;
        goto LABEL_18;
      }
      v111 = v190;
      v112 = v188;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 32))(v188, v108, v109);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v189, v112, v109);
      v113 = sub_23F78F534();
      v114(v113);
      v115 = v186;
      sub_23FB2D10C();
      sub_23F750B40(v229);
      v116 = v112;
      v80 = v184;
      sub_23F6B51EC(v116, *(uint64_t (**)(uint64_t, uint64_t))(v111 + 8));
      v117 = v181;
      (*(void (**)(char *, uint64_t))(v181 + 8))(v75, v223);
      v118 = v185;
      v119 = v224;
      sub_23F713F84(v185, v115);
      sub_23F713F84((uint64_t)v80, v118);
      v98 = v209;
      v120 = 0;
      v25 = v117;
LABEL_19:
      sub_23F77DD78((uint64_t)v80, v120);
      sub_23F6D3508(v228, type metadata accessor for RetrievedContextStatement);
      sub_23F6B5164((uint64_t)v80, 1, v119);
      if (v110)
      {
        sub_23F6B4F84((uint64_t)v80, &qword_256EA8C68);
      }
      else
      {
        v121 = *(void (**)(unint64_t, uint64_t))(v222 + 32);
        v122 = v203;
        sub_23F713F84(v203, (uint64_t)v80);
        sub_23F713F84(v216, v122);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_23F78F50C();
          sub_23F754034();
          v225 = v132;
        }
        v125 = *(_QWORD *)(v225 + 16);
        v124 = *(_QWORD *)(v225 + 24);
        if (v125 >= v124 >> 1)
        {
          sub_23F78F598(v124);
          sub_23F754034();
          v225 = v133;
        }
        *(_QWORD *)(v225 + 16) = v125 + 1;
        sub_23F78F3B0();
        v121(v127 + v126 + *(_QWORD *)(v128 + 72) * v125, v216);
        v98 = v209;
      }
      v97 += v212;
      if (!--v226)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
    (*(void (**)(uint64_t, void (*)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t)))(v229 + 8))(v227, v230);
    v106 = v130;
    v107 = &qword_256EA8C60;
LABEL_18:
    sub_23F6B4F84(v106, v107);
    v120 = 1;
    v119 = v224;
    goto LABEL_19;
  }
  v225 = MEMORY[0x24BEE4AF8];
LABEL_30:
  v134 = v177;
  DecorationResult = type metadata accessor for QueryDecorationResult(0);
  sub_23F6B4F58(v178 + *(int *)(DecorationResult + 28), v134, &qword_256EA71F8);
  v136 = sub_23FB2E354();
  sub_23F6B5164(v134, 1, v136);
  v137 = v199;
  v138 = v198;
  v139 = v197;
  if (v110)
  {
    sub_23F6B4F84(v134, &qword_256EA71F8);
LABEL_49:
    v148 = MEMORY[0x24BEE4AF8];
    goto LABEL_50;
  }
  v140 = sub_23FB2E33C();
  sub_23F78F1E4(v134, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 8));
  v141 = *(_QWORD *)(v140 + 16);
  if (!v141)
  {
    sub_23F6B5908();
    goto LABEL_49;
  }
  sub_23F78F3B0();
  v142 = v140;
  v144 = v140 + v143;
  v146 = *(_QWORD *)(v145 + 72);
  v147 = *(void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v145 + 16);
  v229 = v142;
  v230 = v147;
  swift_bridgeObjectRetain();
  v148 = MEMORY[0x24BEE4AF8];
  do
  {
    v149 = v218;
    v150 = v230;
    v230(v218, v144, v139);
    v151 = v219;
    v150(v219, (uint64_t)v149, v139);
    sub_23FB2DC40();
    v152 = v206;
    PlannerPromptData.Tool.Definition.init(ifps:)();
    v153 = v205;
    sub_23F6B5164(v152, 1, v205);
    if (v110)
    {
      sub_23F78F3EC();
      sub_23F6B4F84(v152, &qword_256EA8C50);
      v162 = 1;
    }
    else
    {
      v154 = v196;
      v155 = v194;
      sub_23F759774(v194, v152, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v196 + 32));
      v151 = v195;
      sub_23F759774((uint64_t)v195, v155, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 16));
      sub_23FB2D184();
      sub_23F78F3EC();
      v156 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
      v137 = v199;
      v157 = v155;
      v138 = v198;
      v156(v157, v153);
      v158 = *(void (**)(uint64_t))(v208 + 32);
      v159 = v192;
      v160 = sub_23F6D3D70();
      v158(v160);
      v161 = v159;
      v139 = v197;
      ((void (*)(uint64_t, uint64_t, uint64_t))v158)(v137, v161, v138);
      v162 = 0;
    }
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v137, v162, 1, v138);
    v151((uint64_t)v218, v139);
    sub_23F6B5164(v137, 1, v138);
    if (v110)
    {
      sub_23F6B4F84(v137, &qword_256EA8C58);
    }
    else
    {
      v163 = v191;
      sub_23F78F52C(v191, v137);
      sub_23F78F52C(v204, v163);
      v164 = swift_isUniquelyReferenced_nonNull_native();
      if ((v164 & 1) == 0)
      {
        sub_23F78F50C();
        sub_23F754020();
        v148 = v169;
      }
      v166 = *(_QWORD *)(v148 + 16);
      v165 = *(_QWORD *)(v148 + 24);
      if (v166 >= v165 >> 1)
      {
        sub_23F78F598(v165);
        sub_23F754020();
        v148 = v170;
      }
      *(_QWORD *)(v148 + 16) = v166 + 1;
      sub_23F78F3B0();
      sub_23F78F52C(v148 + v167 + *(_QWORD *)(v168 + 72) * v166, v204);
    }
    v144 += v146;
    --v141;
  }
  while (v141);
  swift_bridgeObjectRelease_n();
LABEL_50:
  v171 = MEMORY[0x242671D78](v225, v148);
  sub_23F714040(v171, type metadata accessor for QueryDecorationResult);
  sub_23F693DDC();
}

void PlannerPromptData.OnScreenContextValue.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_23F6B50E8();
  v34 = v4;
  sub_23F6916B8(&qword_256EA2950);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23F78F330();
  v33 = *(_QWORD *)(v6 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v32 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F78F2D0();
  sub_23FB2DAF0();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5298();
  sub_23F6916B8(&qword_256EA8C60);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F77DB24();
  v12 = sub_23FB2D100();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B65FC();
  MEMORY[0x24BDAC7A8](v14);
  sub_23FB2DDD8();
  PlannerPromptData.OnScreenContextValue.ContextType.init(ifps:)();
  sub_23F6B5164(v3, 1, v12);
  if (v21)
  {
    v15 = sub_23F78F4FC();
    sub_23F78F1B0(v15);
    v16 = &qword_256EA8C60;
    v17 = v3;
LABEL_7:
    sub_23F6B4F84(v17, v16);
    v29 = 1;
    v27 = v34;
    goto LABEL_8;
  }
  v18 = sub_23F78F4B0();
  sub_23F6B5EF0(v18, v19, v20);
  sub_23FB2DDCC();
  sub_23F6B5164(v0, 1, v6);
  if (v21)
  {
    v22 = sub_23F78F4FC();
    sub_23F78F1B0(v22);
    sub_23F78F308(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v16 = &qword_256EA2950;
    v17 = v0;
    goto LABEL_7;
  }
  v23 = v33;
  sub_23F72E0C8(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32));
  sub_23F72E0C8(v32, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
  v24 = sub_23F6D3D70();
  sub_23F6B5EF0(v24, v25, v26);
  v27 = v34;
  sub_23FB2D10C();
  v28 = sub_23F78F4FC();
  sub_23F78F1B0(v28);
  sub_23F78F1E4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  sub_23F78F308(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v29 = 0;
LABEL_8:
  v30 = sub_23FB2D118();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, v29, 1, v30);
  sub_23F693DDC();
}

