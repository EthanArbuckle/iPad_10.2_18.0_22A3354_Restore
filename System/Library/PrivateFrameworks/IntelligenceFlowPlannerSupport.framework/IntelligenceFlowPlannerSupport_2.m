void PlannerPromptData.Tool.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23F6D3A90();
  sub_23F78F298();
  sub_23FB2DC28();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA8C50);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5864();
  sub_23FB2D178();
  sub_23F78F54C();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F78F578();
  sub_23FB2DC40();
  PlannerPromptData.Tool.Definition.init(ifps:)();
  sub_23F6B5164(v2, 1, v1);
  if (v10)
  {
    v11 = sub_23FB2DC7C();
    sub_23F78F1B0(v11);
    sub_23F6B4F84(v2, &qword_256EA8C50);
    v13 = 1;
  }
  else
  {
    sub_23F72E0C8(v3, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    sub_23F72E0C8(v4, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    sub_23FB2D184();
    v12 = sub_23FB2DC7C();
    sub_23F78F1B0(v12);
    sub_23F78F1E4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    v13 = 0;
  }
  v14 = sub_23FB2D190();
  sub_23F78F2E4(v0, v13, v15, v14);
  sub_23F6B69E0();
}

void PlannerPromptData.Tool.Definition.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  int v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  sub_23F6B50E8();
  v101 = v5;
  v102 = v4;
  sub_23F6916B8(&qword_256EA8C70);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v95 = v7;
  sub_23F6D398C();
  v94 = sub_23FB2D148();
  v87 = *(_QWORD *)(v94 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v88 = v9;
  sub_23F6D398C();
  v10 = sub_23FB2DCB8();
  v92 = *(_QWORD *)(v10 - 8);
  v93 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F693E0C();
  v90 = v12;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v13);
  v91 = (char *)&v85 - v14;
  sub_23F6D398C();
  v15 = sub_23FB2E8D0();
  v99 = *(_QWORD *)(v15 - 8);
  v100 = v15;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F693E0C();
  v18 = v17;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F78F404();
  v20 = sub_23FB2EF54();
  v97 = *(_QWORD *)(v20 - 8);
  v98 = (char *)v20;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F693E0C();
  v96 = v22;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B6580();
  v25 = v24;
  sub_23F6D398C();
  v26 = sub_23FB2DC28();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F78F260();
  v28 = sub_23FB2D178();
  sub_23F6B6124();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v85 - v33;
  sub_23F77DB9C(v3, v102, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v35 = sub_23F78F4B0();
  v37 = v36(v35);
  if (v37 == *MEMORY[0x24BE57550])
  {
    v38 = sub_23F78F4B0();
    v39(v38);
    v40 = v1;
    v41 = v99;
    v42 = sub_23F6B6224();
    sub_23F75E68C(v42, v43, v44);
    sub_23F75E68C(v18, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 16));
    sub_23FB2D154();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v102, v26);
    v45 = sub_23F6B6224();
    v46(v45);
    v47 = *MEMORY[0x24BE53480];
LABEL_8:
    sub_23F78F5D0((uint64_t)v32, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
    v64 = *(void (**)(char *, char *, uint64_t))(v0 + 32);
    v64(v34, v32, v28);
    goto LABEL_9;
  }
  v48 = v2;
  v86 = v18;
  v49 = v26;
  v50 = v1;
  v51 = v99;
  v52 = v100;
  v89 = v0;
  if (v37 == *MEMORY[0x24BE57558])
  {
    v53 = v48;
    v54 = v49;
    (*(void (**)(uint64_t, uint64_t))(v48 + 96))(v3, v49);
    v55 = v97;
    v56 = sub_23F6B6224();
    sub_23F6B633C(v56, v57, v58);
    sub_23F6B633C(v96, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16));
    sub_23FB2D16C();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v102, v54);
    sub_23F6B530C(v25, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
    v59 = (unsigned int *)MEMORY[0x24BE53478];
LABEL_7:
    v47 = *v59;
    v0 = v89;
    goto LABEL_8;
  }
  v60 = v48;
  if (v37 == *MEMORY[0x24BE57548])
  {
    sub_23F78F308(*(uint64_t (**)(uint64_t, uint64_t))(v48 + 96));
    sub_23F77DB9C(v50, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32));
    v61 = sub_23F78F560();
    sub_23F77DB9C(v61, v62, v63);
    sub_23FB2D154();
    sub_23F70D728(v102, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    v59 = (unsigned int *)MEMORY[0x24BE53480];
    goto LABEL_7;
  }
  v67 = v102;
  if (v37 == *MEMORY[0x24BE57540])
  {
    v68 = *(void (**)(uint64_t, uint64_t))(v48 + 96);
    v98 = v32;
    v69 = v89;
    v68(v3, v49);
    sub_23F72E0C8(v50, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32));
    sub_23F72E0C8(v86, v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16));
    v70 = (uint64_t)v98;
    sub_23FB2D160();
    sub_23F70D728(v102, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
    sub_23F78F1E4(v50, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    sub_23F78F5D0(v70, *MEMORY[0x24BE53468], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 104));
    v64 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    v64(v34, (char *)v70, v28);
    goto LABEL_9;
  }
  if (v37 == *MEMORY[0x24BE57568])
  {
    sub_23F78F308(*(uint64_t (**)(uint64_t, uint64_t))(v48 + 96));
    v72 = (uint64_t)v91;
    v71 = v92;
    v73 = sub_23F78F5B0();
    sub_23F6B633C(v73, v74, v75);
    v76 = sub_23F78F4B0();
    sub_23F6B633C(v76, v77, v78);
    v79 = v95;
    PlannerPromptData.Tool.Definition.UIControlTool.init(ifps:)();
    sub_23F70D728(v67, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
    sub_23F6B530C(v72, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
    v80 = v94;
    sub_23F6B5164(v79, 1, v94);
    if (v81)
    {
      sub_23F6B4F84(v79, &qword_256EA8C70);
      v66 = 1;
      v65 = v101;
      goto LABEL_10;
    }
    v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32);
    v82(v88, v79, v80);
    v83 = sub_23F6B7194();
    ((void (*)(uint64_t))v82)(v83);
    v84 = v89;
    sub_23F78F5D0((uint64_t)v34, *MEMORY[0x24BE53488], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 104));
    v64 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
LABEL_9:
    v65 = v101;
    v64((char *)v101, v34, v28);
    v66 = 0;
LABEL_10:
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v65, v66, 1, v28);
    sub_23F693DDC();
    return;
  }
  sub_23FB2FB6C();
  __break(1u);
}

void PlannerPromptData.Tool.Definition.UIControlTool.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23F6B50E8();
  v5 = v4;
  sub_23FB2D13C();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B6B5C();
  sub_23F6916B8(&qword_256EA8140);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51D0();
  v8 = sub_23FB2E8D0();
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F78F578();
  sub_23FB2DCA0();
  sub_23F6B5164(v3, 1, v8);
  if (v11)
  {
    v12 = sub_23FB2DCB8();
    sub_23F78F1B0(v12);
    sub_23F6B4F84(v3, &qword_256EA8140);
    v14 = 1;
  }
  else
  {
    sub_23F6B633C(v1, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
    sub_23FB2DC88();
    sub_23FB2DC94();
    sub_23FB2DCAC();
    sub_23FB2D130();
    sub_23F6B633C(v2, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
    sub_23FB2D124();
    v13 = sub_23FB2DCB8();
    sub_23F78F1B0(v13);
    sub_23F6B530C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    v14 = 0;
  }
  v15 = sub_23FB2D148();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v5, v14, 1, v15);
  sub_23F693DDC();
}

void PlannerPromptData.OnScreenContextValue.ContextType.init(ifps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_23F6D3A90();
  v20 = v1;
  v21 = v2;
  v4 = v3;
  v6 = v5;
  v7 = sub_23FB2D100();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(sub_23FB2DAF0() - 8);
  v12 = sub_23F6B6AAC();
  v14 = v13(v12);
  if (v14 == *MEMORY[0x24BE57298])
  {
    v15 = (unsigned int *)MEMORY[0x24BE53400];
LABEL_15:
    (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v10, *v15, v7);
    v16 = sub_23F6B68CC();
    sub_23F759774(v16, v17, v18);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v6, 0, 1, v7);
    sub_23F6B69E0();
    return;
  }
  if (v14 == *MEMORY[0x24BE57300])
  {
    v15 = (unsigned int *)MEMORY[0x24BE533E8];
    goto LABEL_15;
  }
  if (v14 == *MEMORY[0x24BE572F0])
  {
    v15 = (unsigned int *)MEMORY[0x24BE533E0];
    goto LABEL_15;
  }
  if (v14 == *MEMORY[0x24BE57308])
  {
    v15 = (unsigned int *)MEMORY[0x24BE533F0];
    goto LABEL_15;
  }
  if (v14 == *MEMORY[0x24BE572D8])
  {
    v15 = (unsigned int *)MEMORY[0x24BE533D0];
    goto LABEL_15;
  }
  if (v14 == *MEMORY[0x24BE572E8])
  {
    v15 = (unsigned int *)MEMORY[0x24BE533D8];
    goto LABEL_15;
  }
  if (v14 == *MEMORY[0x24BE57268])
  {
    v15 = (unsigned int *)MEMORY[0x24BE533F8];
    goto LABEL_15;
  }
  sub_23F6B51EC(v4, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v6, 1, 1, v7);
}

void ActionResolutionUpdate.init(ifps:)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ActionResolverRequest(0);
  sub_23F6B6548();
  sub_23F77DCD4();
  Dictionary<>.init(parameterCandidates:)();
  v2 = sub_23F6B6AAC();
  MEMORY[0x2426720CC](v2);
  sub_23F6D3DAC(a1);
  sub_23F6B5F7C();
}

uint64_t Dictionary<>.init(parameterCandidates:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  char v56;
  _QWORD *v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  uint64_t result;
  _QWORD v87[2];
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104[3];
  uint64_t v105;
  _QWORD v106[5];
  _QWORD v107[15];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  sub_23F6B50E8();
  v109 = v0;
  v110 = v1;
  v3 = v2;
  v4 = 0;
  v5 = sub_23F6916B8(&qword_256EA44E0);
  sub_23F6B53F8(v5, (uint64_t)&v108);
  v90 = v6;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v102 = (_QWORD *)((char *)v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = sub_23F6916B8(&qword_256EA26F0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F693E0C();
  v95 = v10;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6D3D14();
  v94 = v12;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6D3D14();
  v93 = v14;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v15);
  v101 = (uint64_t)v87 - v16;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B6580();
  sub_23F6B5314(v18);
  sub_23F78F0C8(v3, v106);
  v98 = v106[0];
  v88 = v106[1];
  v99 = v106[3];
  v19 = v106[4];
  v89 = (unint64_t)(v106[2] + 64) >> 6;
  v87[1] = v3;
  swift_bridgeObjectRetain();
  v103 = (_QWORD *)MEMORY[0x24BEE4B00];
  v91 = 0;
  if (!v19)
    goto LABEL_3;
LABEL_2:
  v100 = (v19 - 1) & v19;
  for (i = __clz(__rbit64(v19)) | (v99 << 6); ; i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    v28 = *(_QWORD *)(v98 + 56);
    v29 = *(_QWORD *)(v98 + 48) + 32 * i;
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(_QWORD *)(v29 + 16);
    v33 = *(_BYTE *)(v29 + 24);
    v34 = v28 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for Candidate(0) - 8) + 72) * i;
    v35 = v96;
    v36 = v92;
    sub_23F78F454(v34, v92 + *(int *)(v96 + 48));
    *(_QWORD *)v36 = v31;
    *(_QWORD *)(v36 + 8) = v30;
    *(_QWORD *)(v36 + 16) = v32;
    *(_BYTE *)(v36 + 24) = v33;
    v37 = v36;
    v38 = v101;
    sub_23F78F12C(v37, v101, &qword_256EA26F0);
    v39 = v93 + *(int *)(v35 + 48);
    v40 = *(_QWORD *)v38;
    v41 = *(_QWORD *)(v38 + 8);
    v42 = *(_QWORD *)(v38 + 16);
    v43 = *(_BYTE *)(v38 + 24);
    v44 = sub_23F78F418();
    sub_23F78F454(v44, v39);
    v45 = v94 + *(int *)(v35 + 48);
    v46 = sub_23F78F418();
    sub_23F78F454(v46, v45);
    v47 = v95 + *(int *)(v35 + 48);
    v48 = sub_23F78F418();
    sub_23F78F454(v48, v47);
    v49 = v102;
    v50 = (uint64_t)v102 + *(int *)(v97 + 48);
    *v102 = v42;
    *((_BYTE *)v49 + 8) = v43;
    sub_23F78F088(v47, v50, type metadata accessor for Candidate);
    sub_23F6B54F8();
    sub_23F6B90D8();
    v51 = (uint64_t)v103;
    swift_isUniquelyReferenced_nonNull_native();
    v107[0] = v51;
    v52 = sub_23F78F540();
    if (__OFADD__(*(_QWORD *)(v51 + 16), (v53 & 1) == 0))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v54 = v52;
    v55 = v53;
    sub_23F6916B8(&qword_256EA8C78);
    v56 = sub_23FB2F914();
    v57 = (_QWORD *)v107[0];
    if ((v56 & 1) != 0)
    {
      v58 = sub_23F78F540();
      if ((v55 & 1) != (v59 & 1))
        goto LABEL_68;
      v54 = v58;
    }
    swift_bridgeObjectRelease();
    if ((v55 & 1) == 0)
    {
      v57[(v54 >> 6) + 8] |= 1 << v54;
      v60 = (_QWORD *)(v57[6] + 16 * v54);
      *v60 = v40;
      v60[1] = v41;
      *(_QWORD *)(v57[7] + 8 * v54) = MEMORY[0x24BEE4AF8];
      v61 = v57[2];
      v25 = __OFADD__(v61, 1);
      v62 = v61 + 1;
      if (v25)
        goto LABEL_64;
      v57[2] = v62;
      sub_23F6B90D8();
    }
    v63 = v57[7];
    v64 = *(_QWORD *)(v63 + 8 * v54);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v63 + 8 * v54) = v64;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23F78F50C();
      sub_23F754048();
      v64 = v70;
      *(_QWORD *)(v63 + 8 * v54) = v70;
    }
    v67 = *(_QWORD *)(v64 + 16);
    v66 = *(_QWORD *)(v64 + 24);
    v103 = v57;
    if (v67 >= v66 >> 1)
    {
      sub_23F78F598(v66);
      sub_23F754048();
      v64 = v71;
      *(_QWORD *)(v63 + 8 * v54) = v71;
    }
    v4 = v91;
    *(_QWORD *)(v64 + 16) = v67 + 1;
    sub_23F78F3B0();
    sub_23F78F12C((uint64_t)v102, v64 + v68 + *(_QWORD *)(v69 + 72) * v67, &qword_256EA44E0);
    swift_bridgeObjectRelease();
    sub_23F6D3928(v45);
    sub_23F6D3928(v39);
    sub_23F6B4F84(v101, &qword_256EA26F0);
    v19 = v100;
    if (v100)
      goto LABEL_2;
LABEL_3:
    v21 = v99 + 1;
    if (__OFADD__(v99, 1))
      goto LABEL_65;
    if (v21 >= v89)
      goto LABEL_38;
    v22 = *(_QWORD *)(v88 + 8 * v21);
    v23 = v99 + 1;
    if (!v22)
    {
      sub_23F78F3A0();
      if (v24 == v25)
        goto LABEL_38;
      sub_23F78F42C();
      if (!v22)
      {
        sub_23F78F3A0();
        if (v24 == v25)
          goto LABEL_38;
        sub_23F78F42C();
        if (!v22)
        {
          sub_23F78F3A0();
          if (v24 == v25)
            goto LABEL_38;
          sub_23F78F42C();
          if (!v22)
          {
            sub_23F78F3A0();
            if (v24 == v25)
              goto LABEL_38;
            sub_23F78F42C();
            if (!v22)
            {
              v23 = v26 + 5;
              if (v26 + 5 >= v89)
                goto LABEL_38;
              v22 = *(_QWORD *)(v88 + 8 * v23);
              if (!v22)
                break;
            }
          }
        }
      }
    }
LABEL_24:
    v99 = v23;
    v100 = (v22 - 1) & v22;
  }
  v27 = v99 + 7;
  while (v27 < v89)
  {
    v22 = *(_QWORD *)(v88 + 8 * v27++);
    if (v22)
    {
      v23 = v27 - 1;
      goto LABEL_24;
    }
  }
LABEL_38:
  swift_release();
  swift_bridgeObjectRelease();
  v105 = MEMORY[0x24BEE4B00];
  sub_23F78F0C8((uint64_t)v103, v107);
  v72 = v107[0];
  v73 = v107[1];
  v74 = v107[3];
  v75 = v107[4];
  v76 = (unint64_t)(v107[2] + 64) >> 6;
  sub_23F6B54F8();
  if (!v75)
    goto LABEL_40;
LABEL_39:
  v77 = __clz(__rbit64(v75));
  v75 &= v75 - 1;
  v78 = v77 | (v74 << 6);
  while (1)
  {
    v82 = (uint64_t *)(*(_QWORD *)(v72 + 48) + 16 * v78);
    v83 = v82[1];
    v84 = *(_QWORD *)(*(_QWORD *)(v72 + 56) + 8 * v78);
    v104[0] = *v82;
    v104[1] = v83;
    v104[2] = v84;
    sub_23F6B5F1C();
    sub_23F6B6548();
    sub_23F78BF5C((uint64_t)&v105, v104);
    if (v4)
      break;
    sub_23F6B6090();
    sub_23F6B5908();
    if (v75)
      goto LABEL_39;
LABEL_40:
    v79 = v74 + 1;
    if (__OFADD__(v74, 1))
      goto LABEL_66;
    if (v79 >= v76)
      goto LABEL_62;
    v80 = *(_QWORD *)(v73 + 8 * v79);
    if (!v80)
    {
      v81 = v74 + 2;
      if (v74 + 2 >= v76)
        goto LABEL_62;
      v80 = *(_QWORD *)(v73 + 8 * v81);
      if (v80)
        goto LABEL_51;
      v81 = v74 + 3;
      if (v74 + 3 >= v76)
        goto LABEL_62;
      v80 = *(_QWORD *)(v73 + 8 * v81);
      if (v80)
        goto LABEL_51;
      v81 = v74 + 4;
      if (v74 + 4 >= v76)
        goto LABEL_62;
      v80 = *(_QWORD *)(v73 + 8 * v81);
      if (v80)
        goto LABEL_51;
      v81 = v74 + 5;
      if (v74 + 5 >= v76)
        goto LABEL_62;
      v80 = *(_QWORD *)(v73 + 8 * v81);
      if (v80)
      {
LABEL_51:
        v79 = v81;
      }
      else
      {
        v79 = v74 + 6;
        if (v74 + 6 >= v76)
          goto LABEL_62;
        v80 = *(_QWORD *)(v73 + 8 * v79);
        if (!v80)
        {
          v85 = v74 + 7;
          while (v85 < v76)
          {
            v80 = *(_QWORD *)(v73 + 8 * v85++);
            if (v80)
            {
              v79 = v85 - 1;
              goto LABEL_52;
            }
          }
LABEL_62:
          swift_bridgeObjectRelease();
          swift_release();
          return v105;
        }
      }
    }
LABEL_52:
    v75 = (v80 - 1) & v80;
    v78 = __clz(__rbit64(v80)) + (v79 << 6);
    v74 = v79;
  }
LABEL_67:
  swift_release();
  sub_23F6B6090();
  sub_23F6B5908();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_68:
  result = sub_23FB2FBD8();
  __break(1u);
  return result;
}

void sub_23F78BF5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v5 = sub_23FB2ED38();
  v88 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v86 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23F6916B8(&qword_256EA2950);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v80 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v73 = (uint64_t *)((char *)&v69 - v10);
  v74 = sub_23FB2EDD4();
  v77 = *(_QWORD *)(v74 - 8);
  v11 = MEMORY[0x24BDAC7A8](v74);
  v71 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v72 = (char *)&v69 - v13;
  v14 = sub_23F6916B8(&qword_256EA8CC0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v79 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v76 = (char *)&v69 - v17;
  v18 = type metadata accessor for Candidate(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v70 = (uint64_t)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v69 - v21;
  v89 = sub_23F6916B8(&qword_256EA44E0);
  v23 = MEMORY[0x24BDAC7A8](v89);
  v85 = (char **)((char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x24BDAC7A8](v23);
  v84 = (uint64_t)&v69 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v69 - v28;
  v30 = *a2;
  v31 = a2[2];
  v81 = a2[1];
  v82 = v30;
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    v87 = v5;
    v75 = a1;
    v78 = v2;
    v33 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v34 = v31 + v33;
    v35 = *(_QWORD *)(v27 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23F6B4F58(v34, (uint64_t)v29, &qword_256EA44E0);
      v36 = v29[8];
      sub_23F6B4F84((uint64_t)v29, &qword_256EA44E0);
      if (v36 != 1)
        break;
      v34 += v35;
      if (!--v32)
      {
        swift_bridgeObjectRelease();
LABEL_8:
        v5 = v87;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    v37 = (uint64_t)v76;
    sub_23F70E3BC();
    v38 = v89;
    v39 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v37, 1, v89);
    v40 = v78;
    if (v39 == 1)
    {
      sub_23F6B4F84(v37, &qword_256EA8CC0);
      goto LABEL_8;
    }
    v47 = v37 + *(int *)(v38 + 48);
    v48 = v70;
    sub_23F78F088(v47, v70, type metadata accessor for Candidate);
    sub_23F78F088(v48, (uint64_t)v22, type metadata accessor for Candidate);
    v90 = v31;
    swift_bridgeObjectRetain();
    sub_23F786604(&v90);
    v78 = v40;
    v49 = v87;
    if (v40)
    {
      swift_release();
      __break(1u);
    }
    else
    {
      v50 = v90;
      v51 = *(_QWORD *)(v90 + 16);
      v52 = v88;
      v69 = v22;
      if (v51)
      {
        v90 = MEMORY[0x24BEE4AF8];
        sub_23F711D04();
        v80 = (char *)v50;
        v53 = v50 + v33;
        v54 = v86;
        v83 = v35;
        do
        {
          v55 = v84;
          sub_23F6B4F58(v53, v84, &qword_256EA44E0);
          v56 = *(int *)(v89 + 48);
          v57 = v85;
          v58 = (uint64_t)v85 + v56;
          v59 = *(_BYTE *)(v55 + 8);
          *v85 = *(_QWORD *)v55;
          *((_BYTE *)v57 + 8) = v59;
          sub_23F6F5920(v55 + v56, v58, type metadata accessor for Candidate);
          (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v54, v58, v49);
          sub_23F6D3508(v58, type metadata accessor for Candidate);
          sub_23F6B4F84(v55, &qword_256EA44E0);
          v60 = v90;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23F711D04();
            v60 = v90;
          }
          v61 = *(_QWORD *)(v60 + 16);
          v62 = v83;
          if (v61 >= *(_QWORD *)(v60 + 24) >> 1)
          {
            sub_23F711D04();
            v60 = v90;
          }
          *(_QWORD *)(v60 + 16) = v61 + 1;
          v49 = v87;
          v63 = v60
              + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))
              + *(_QWORD *)(v88 + 72) * v61;
          v52 = v88;
          v54 = v86;
          (*(void (**)(unint64_t, char *, uint64_t))(v88 + 32))(v63, v86, v87);
          v90 = v60;
          v53 += v62;
          --v51;
        }
        while (v51);
      }
      swift_release();
      v64 = v72;
      sub_23FB2ECF0();
      sub_23FB2EBF4();
      v65 = swift_allocBox();
      v66 = v74;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v71, v64, v74);
      v67 = v81;
      swift_bridgeObjectRetain();
      sub_23FB2EBD0();
      v68 = (uint64_t)v73;
      *v73 = v65;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 104))(v68, *MEMORY[0x24BEB9988], v49);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v68, 0, 1, v49);
      sub_23F7D32C0(v68, v82, v67);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v64, v66);
      sub_23F6D3508((uint64_t)v69, type metadata accessor for Candidate);
    }
  }
  else
  {
LABEL_9:
    v41 = (uint64_t)v79;
    sub_23F70E3BC();
    v42 = v89;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v41, 1, v89) == 1)
    {
      v43 = v81;
      swift_bridgeObjectRetain();
      sub_23F6B4F84(v41, &qword_256EA8CC0);
      v44 = 1;
      v45 = (uint64_t)v80;
    }
    else
    {
      v46 = v41 + *(int *)(v42 + 48);
      v45 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v80, v46, v5);
      v43 = v81;
      swift_bridgeObjectRetain();
      sub_23F6D3508(v46, type metadata accessor for Candidate);
      v44 = 0;
    }
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v45, v44, 1, v5);
    sub_23F7D32C0(v45, v82, v43);
  }
}

unint64_t sub_23F78C62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F78F3D4();
  swift_bridgeObjectRetain();
  sub_23F78F4EC();
  swift_bridgeObjectRelease();
  sub_23F6B5608();
  v0 = sub_23F78F478();
  return sub_23F78CA94(v0, v1, v2);
}

void sub_23F78C678()
{
  sub_23F78F22C();
  sub_23FB2C764();
  sub_23F78F3CC(&qword_256EA15A8);
  sub_23F78F21C();
  sub_23F78F20C();
  sub_23F6B5F7C();
}

unint64_t sub_23F78C6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F78F3D4();
  sub_23F78F4EC();
  sub_23F6B5608();
  v0 = sub_23F78F478();
  return sub_23F78CA94(v0, v1, v2);
}

unint64_t sub_23F78C718(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x2426748C8](*(_QWORD *)(v1 + 40), a1, 4);
  return sub_23F78CB74(a1, v3);
}

void sub_23F78C74C()
{
  sub_23F78F22C();
  sub_23FB2EDD4();
  sub_23F78F3CC(&qword_256EA8CA0);
  sub_23F78F21C();
  sub_23F78F20C();
  sub_23F6B5F7C();
}

unint64_t sub_23F78C7B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8;
  uint64_t v9;

  v8 = a4 & 1;
  sub_23FB2FC5C();
  sub_23F6B6548();
  sub_23FB2F200();
  sub_23F6B6090();
  sub_23FB2FC74();
  if ((a4 & 1) == 0)
    sub_23FB2FC68();
  v9 = sub_23F6B5608();
  return sub_23F78CD38(a1, a2, a3, v8, v9);
}

unint64_t sub_23F78C860(uint64_t *a1)
{
  uint64_t v2;

  sub_23FB2FC5C();
  sub_23F6B5F1C();
  sub_23F78F34C();
  sub_23F6B5908();
  sub_23F6B5F1C();
  sub_23F78F34C();
  sub_23F6B5908();
  sub_23F6B5F1C();
  sub_23F78F34C();
  sub_23F6B5908();
  v2 = sub_23F6B5608();
  return sub_23F78CE24(a1, v2);
}

unint64_t sub_23F78C8D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F78F4DC();
  return sub_23F78CF50(v0, v1);
}

void sub_23F78C904()
{
  sub_23F78F22C();
  sub_23FB2EF54();
  sub_23F78F3CC(&qword_256EA8CB0);
  sub_23F78F21C();
  sub_23F78F20C();
  sub_23F6B5F7C();
}

void sub_23F78C968()
{
  sub_23F78F22C();
  sub_23FB2C320();
  sub_23F78F3CC(&qword_256EA8C90);
  sub_23F78F21C();
  sub_23F78F20C();
  sub_23F6B5F7C();
}

void sub_23F78C9CC()
{
  sub_23F78F22C();
  sub_23FB2C674();
  sub_23F78F3CC(&qword_256EA8C80);
  sub_23F78F21C();
  sub_23F78F20C();
  sub_23F6B5F7C();
}

void sub_23F78CA30()
{
  sub_23F78F22C();
  sub_23FB2C4B8();
  sub_23F78F3CC(&qword_256EA27C8);
  sub_23F78F21C();
  sub_23F78F20C();
  sub_23F6B5F7C();
}

unint64_t sub_23F78CA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23FB2FB78() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23FB2FB78() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_23F78CB74(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23F78CC10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23F6B50E8();
  v25 = v1;
  v26 = v2;
  v23 = v3;
  v24 = v4;
  v5 = v0;
  v7 = v6;
  v21 = v8;
  v22 = v9;
  v10 = ((uint64_t (*)(_QWORD))v9)(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v14 = -1 << *(_BYTE *)(v5 + 32);
  v15 = v7 & ~v14;
  if (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v11 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    do
    {
      v18(v13, *(_QWORD *)(v5 + 48) + v17 * v15, v10);
      sub_23F72156C(v23, v22);
      v19 = sub_23FB2F11C();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v19 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  return v15;
}

unint64_t sub_23F78CD38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v18;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = v14 + 32 * v8;
      v16 = *(_QWORD *)(v15 + 16);
      v17 = *(_BYTE *)(v15 + 24);
      v18 = *(_QWORD *)v15 == a1 && *(_QWORD *)(v15 + 8) == a2;
      if (v18 || (sub_23FB2FB78() & 1) != 0)
      {
        if ((v17 & 1) != 0)
        {
          if ((a4 & 1) != 0)
            return v8;
        }
        else if ((a4 & 1) == 0 && v16 == a3)
        {
          return v8;
        }
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_23F78CE24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  uint64_t v19;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v19 = ~v4;
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *a1;
    v9 = a1[1];
    do
    {
      v10 = (_QWORD *)(v7 + 48 * v5);
      v11 = v10[2];
      v12 = v10[3];
      v13 = v10[4];
      v14 = v10[5];
      v15 = *v10 == v8 && v10[1] == v9;
      if (v15 || (sub_23FB2FB78() & 1) != 0)
      {
        v16 = v11 == a1[2] && v12 == a1[3];
        if (v16 || (sub_23FB2FB78() & 1) != 0)
        {
          v17 = v13 == a1[4] && v14 == a1[5];
          if (v17 || (sub_23FB2FB78() & 1) != 0)
            break;
        }
      }
      v5 = (v5 + 1) & v19;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_23F78CF50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_23F78CFEC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23F78D03C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23F78D08C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t i;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  void (*v55)(_BYTE *, uint64_t);
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  void (*v67)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v68;
  int v69;
  _BYTE *v70;
  void (*v71)(_BYTE *, uint64_t);
  uint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t result;
  _BYTE v80[16];
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;

  v2 = sub_23FB2D040();
  v94 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v93 = &v80[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = &v80[-v6];
  MEMORY[0x24BDAC7A8](v5);
  v110 = &v80[-v8];
  v9 = sub_23F6916B8(&qword_256EA2750);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v80[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_23F6916B8(&qword_256EA8C48);
  MEMORY[0x24BDAC7A8](v12);
  v108 = &v80[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v92 = sub_23FB2ED38();
  v91 = *(_QWORD *)(v92 - 8);
  v14 = MEMORY[0x24BDAC7A8](v92);
  v90 = &v80[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v89 = &v80[-v16];
  v107 = type metadata accessor for ToolParameterValue(0);
  v17 = MEMORY[0x24BDAC7A8](v107);
  v19 = &v80[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v80[-v20];
  v22 = sub_23FB2CAAC();
  v104 = *(_QWORD *)(v22 - 8);
  v105 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v24 = &v80[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = sub_23FB2CA58();
  v26 = *(_QWORD *)(v25 - 8);
  v102 = v25;
  v103 = v26;
  MEMORY[0x24BDAC7A8](v25);
  v101 = &v80[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = type metadata accessor for Action.ParameterValue(0);
  v99 = *(_QWORD *)(v28 - 8);
  v100 = v28;
  v29 = MEMORY[0x24BDAC7A8](v28);
  v120 = &v80[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v29);
  v119 = &v80[-v31];
  sub_23F6916B8(&qword_256EA8CC8);
  v32 = sub_23FB2F98C();
  v33 = v32;
  v34 = 0;
  v35 = *(_QWORD *)(a1 + 64);
  v95 = a1 + 64;
  v36 = 1 << *(_BYTE *)(a1 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v96 = (unint64_t)(v36 + 63) >> 6;
  v88 = *MEMORY[0x24BE528D8];
  v87 = *MEMORY[0x24BE528C8];
  v86 = *MEMORY[0x24BE53140];
  v85 = *MEMORY[0x24BE53150];
  v83 = *MEMORY[0x24BE53148];
  v82 = *MEMORY[0x24BE52898];
  v81 = *MEMORY[0x24BE528A8];
  v84 = *MEMORY[0x24BE52888];
  v97 = v32 + 64;
  v111 = a1;
  v112 = v24;
  v109 = v11;
  v106 = v19;
  v113 = v21;
  v98 = v32;
  if (!v38)
    goto LABEL_5;
LABEL_4:
  v114 = (v38 - 1) & v38;
  for (i = __clz(__rbit64(v38)) | (v34 << 6); ; i = __clz(__rbit64(v41)) + (v34 << 6))
  {
    v43 = *(_QWORD *)(v111 + 56);
    v44 = (uint64_t *)(*(_QWORD *)(v111 + 48) + 16 * i);
    v45 = v44[1];
    v116 = *v44;
    v117 = i;
    v46 = v119;
    sub_23F6F5920(v43 + *(_QWORD *)(v99 + 72) * i, (uint64_t)v119, type metadata accessor for Action.ParameterValue);
    v47 = (uint64_t)v46;
    v48 = v120;
    sub_23F6F5920(v47, (uint64_t)v120, type metadata accessor for Action.ParameterValue);
    sub_23F6F5920((uint64_t)v48, (uint64_t)v21, type metadata accessor for ToolParameterValue);
    sub_23F6F5920((uint64_t)v21, (uint64_t)v19, type metadata accessor for ToolParameterValue);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v115 = v34;
    v118 = v45;
    if (EnumCaseMultiPayload == 1)
    {
      v50 = v2;
      v51 = v91;
      v52 = v89;
      v53 = v92;
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v91 + 32))(v89, v19, v92);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v51 + 16))(v90, v52, v53);
      swift_bridgeObjectRetain();
      v54 = v112;
      v19 = v106;
      sub_23FB2CA94();
      sub_23F6D3508((uint64_t)v113, type metadata accessor for ToolParameterValue);
      v55 = *(void (**)(_BYTE *, uint64_t))(v51 + 8);
      v2 = v50;
      v56 = v52;
      v21 = v113;
      v55(v56, v53);
      v57 = v87;
      v58 = (uint64_t)v109;
    }
    else
    {
      v60 = *v19;
      v59 = v19[1];
      swift_bridgeObjectRetain();
      v54 = v112;
      v61 = v59;
      v58 = (uint64_t)v109;
      MEMORY[0x242671724](v60, v61);
      sub_23F6D3508((uint64_t)v21, type metadata accessor for ToolParameterValue);
      v57 = v88;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v104 + 104))(v54, v57, v105);
    sub_23F6B4F58((uint64_t)&v120[*(int *)(v100 + 20)], v58, &qword_256EA2750);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v58, 1, v2) == 1)
    {
      v62 = sub_23FB2CA88();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v108, 1, 1, v62);
      v63 = v118;
    }
    else
    {
      v64 = v58;
      v65 = v94;
      v66 = v110;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v94 + 32))(v110, v64, v2);
      v67 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 16);
      v67(v7, v66, v2);
      v68 = v93;
      v67(v93, v7, v2);
      v69 = (*(uint64_t (**)(_BYTE *, uint64_t))(v65 + 88))(v68, v2);
      v63 = v118;
      if (v69 == v86)
      {
        (*(void (**)(_BYTE *, uint64_t))(v65 + 96))(v68, v2);
        v70 = v108;
        sub_23FB2CA64();
        v71 = *(void (**)(_BYTE *, uint64_t))(v65 + 8);
        v71(v7, v2);
        v72 = sub_23FB2CA88();
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v70, v84, v72);
      }
      else
      {
        v70 = v108;
        if (v69 == v85)
        {
          sub_23FB2CA7C();
          v71 = *(void (**)(_BYTE *, uint64_t))(v65 + 8);
          v71(v7, v2);
          v72 = sub_23FB2CA88();
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v70, v81, v72);
        }
        else
        {
          if (v69 != v83)
            goto LABEL_38;
          sub_23FB2CA70();
          v71 = *(void (**)(_BYTE *, uint64_t))(v65 + 8);
          v71(v7, v2);
          v72 = sub_23FB2CA88();
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v70, v82, v72);
        }
      }
      v21 = v113;
      v71(v110, v2);
      sub_23FB2CA88();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v70, 0, 1, v72);
      v19 = v106;
    }
    v73 = v101;
    sub_23FB2CA4C();
    sub_23F6D3508((uint64_t)v120, type metadata accessor for Action.ParameterValue);
    sub_23F6D3508((uint64_t)v119, type metadata accessor for Action.ParameterValue);
    v74 = v117;
    *(_QWORD *)(v97 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v117;
    v33 = v98;
    v75 = (_QWORD *)(*(_QWORD *)(v98 + 48) + 16 * v74);
    *v75 = v116;
    v75[1] = v63;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v103 + 32))(*(_QWORD *)(v33 + 56) + *(_QWORD *)(v103 + 72) * v74, v73, v102);
    v76 = *(_QWORD *)(v33 + 16);
    v77 = __OFADD__(v76, 1);
    v78 = v76 + 1;
    if (v77)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    *(_QWORD *)(v33 + 16) = v78;
    v38 = v114;
    v34 = v115;
    if (v114)
      goto LABEL_4;
LABEL_5:
    v40 = v34 + 1;
    if (__OFADD__(v34, 1))
      goto LABEL_36;
    if (v40 >= v96)
      return v33;
    v41 = *(_QWORD *)(v95 + 8 * v40);
    ++v34;
    if (!v41)
    {
      v34 = v40 + 1;
      if (v40 + 1 >= v96)
        return v33;
      v41 = *(_QWORD *)(v95 + 8 * v34);
      if (!v41)
      {
        v34 = v40 + 2;
        if (v40 + 2 >= v96)
          return v33;
        v41 = *(_QWORD *)(v95 + 8 * v34);
        if (!v41)
          break;
      }
    }
LABEL_18:
    v114 = (v41 - 1) & v41;
  }
  v42 = v40 + 3;
  if (v42 >= v96)
    return v33;
  v41 = *(_QWORD *)(v95 + 8 * v42);
  if (v41)
  {
    v34 = v42;
    goto LABEL_18;
  }
  while (1)
  {
    v34 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v34 >= v96)
      return v33;
    v41 = *(_QWORD *)(v95 + 8 * v34);
    ++v42;
    if (v41)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  result = sub_23FB2FB6C();
  __break(1u);
  return result;
}

void sub_23F78D9D4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  char v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;

  v2 = v1;
  v197 = sub_23F6916B8(&qword_256EA44E0);
  v4 = *(_QWORD *)(v197 - 8);
  v5 = MEMORY[0x24BDAC7A8](v197);
  v180 = (uint64_t)&v170 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v198 = (uint64_t)&v170 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v192 = (uint64_t *)((char *)&v170 - v10);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v191 = (uint64_t *)((char *)&v170 - v12);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v190 = (uint64_t)&v170 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v189 = (uint64_t)&v170 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v184 = (uint64_t *)((char *)&v170 - v18);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v183 = (uint64_t *)((char *)&v170 - v20);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v182 = (uint64_t)&v170 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v181 = (uint64_t)&v170 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v177 = (uint64_t *)((char *)&v170 - v26);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v176 = (uint64_t *)((char *)&v170 - v28);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v175 = (uint64_t)&v170 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v174 = (uint64_t)&v170 - v31;
  v32 = *(_QWORD *)(a1 + 8);
  v33 = sub_23FB2FB30();
  if (v33 >= v32)
  {
    if (v32 < 0)
      goto LABEL_157;
    if (v32)
      sub_23F78E694(0, v32, 1, (_QWORD *)a1);
    return;
  }
  v173 = v33;
  v171 = sub_23F6F0638(v32 / 2);
  v187 = v34;
  v188 = v4;
  v172 = v32;
  if (v32 <= 0)
    goto LABEL_120;
  v35 = 0;
  v36 = (char *)MEMORY[0x24BEE4AF8];
  v37 = v32;
  v186 = (_QWORD *)a1;
  while (1)
  {
    v38 = v35 + 1;
    v179 = v36;
    v185 = v35;
    if (v35 + 1 >= v37)
    {
      v56 = v35;
    }
    else
    {
      v39 = *(_QWORD *)a1;
      v40 = *(_QWORD *)(v4 + 72);
      v200 = v40;
      v201 = v35 + 1;
      v41 = v174;
      sub_23F6B4F58(v39 + v40 * v38, v174, &qword_256EA44E0);
      v199 = v37;
      v42 = v175;
      sub_23F6B4F58(v39 + v40 * v185, v175, &qword_256EA44E0);
      v43 = v197;
      v44 = *(int *)(v197 + 48);
      v45 = v176;
      v46 = (uint64_t)v176 + v44;
      v47 = *(_QWORD *)v41;
      LODWORD(v40) = *(unsigned __int8 *)(v41 + 8);
      *v176 = *(_QWORD *)v41;
      *((_BYTE *)v45 + 8) = v40;
      sub_23F6F5920(v41 + v44, (uint64_t)v45 + v44, type metadata accessor for Candidate);
      v48 = (_DWORD)v40 ? 0 : v47;
      v196 = v48;
      sub_23F6D3508(v46, type metadata accessor for Candidate);
      v49 = *(int *)(v43 + 48);
      v50 = v177;
      v51 = (uint64_t)v177 + v49;
      v52 = *(_QWORD *)v42;
      v53 = *(unsigned __int8 *)(v42 + 8);
      *v177 = *(_QWORD *)v42;
      *((_BYTE *)v50 + 8) = v53;
      sub_23F6F5920(v42 + v49, (uint64_t)v50 + v49, type metadata accessor for Candidate);
      v54 = v53 ? 0 : v52;
      v195 = v54;
      sub_23F6D3508(v51, type metadata accessor for Candidate);
      v37 = v199;
      sub_23F6B4F84(v42, &qword_256EA44E0);
      v55 = v41;
      v56 = v185;
      sub_23F6B4F84(v55, &qword_256EA44E0);
      v38 = v56 + 2;
      v178 = v39;
      if (v56 + 2 >= v37)
      {
        v4 = v188;
      }
      else
      {
        v170 = v2;
        v57 = v39;
        v193 = v200 * v38;
        v194 = v200 * v201;
        while (1)
        {
          v58 = v38;
          LODWORD(v201) = v196 < v195;
          v59 = v181;
          sub_23F6B4F58(v57 + v193, v181, &qword_256EA44E0);
          v60 = v182;
          sub_23F6B4F58(v57 + v194, v182, &qword_256EA44E0);
          v61 = v197;
          v62 = *(int *)(v197 + 48);
          v63 = v183;
          v64 = (uint64_t)v183 + v62;
          v65 = *(_QWORD *)v59;
          v66 = *(unsigned __int8 *)(v59 + 8);
          *v183 = *(_QWORD *)v59;
          *((_BYTE *)v63 + 8) = v66;
          sub_23F6F5920(v59 + v62, (uint64_t)v63 + v62, type metadata accessor for Candidate);
          if (v66)
            v65 = 0;
          sub_23F6D3508(v64, type metadata accessor for Candidate);
          v67 = *(int *)(v61 + 48);
          v68 = v184;
          v69 = (uint64_t)v184 + v67;
          v70 = *(_QWORD *)v60;
          v71 = *(unsigned __int8 *)(v60 + 8);
          *v184 = *(_QWORD *)v60;
          *((_BYTE *)v68 + 8) = v71;
          sub_23F6F5920(v60 + v67, (uint64_t)v68 + v67, type metadata accessor for Candidate);
          v72 = v71 ? 0 : v70;
          sub_23F6D3508(v69, type metadata accessor for Candidate);
          sub_23F6B4F84(v60, &qword_256EA44E0);
          sub_23F6B4F84(v59, &qword_256EA44E0);
          if ((_DWORD)v201 == v65 >= v72)
            break;
          v38 = v58 + 1;
          v37 = v199;
          v57 += v200;
          if (v38 >= v199)
          {
            v38 = v199;
            v2 = v170;
            v4 = v188;
            v56 = v185;
            a1 = (unint64_t)v186;
            goto LABEL_24;
          }
        }
        v2 = v170;
        v4 = v188;
        v56 = v185;
        a1 = (unint64_t)v186;
        v38 = v58;
        v37 = v199;
      }
LABEL_24:
      if (v196 < v195)
      {
        if (v38 < v56)
          goto LABEL_158;
        if (v56 < v38)
        {
          v73 = 0;
          v74 = v200;
          v75 = v200 * (v38 - 1);
          v76 = v38 * v200;
          v77 = v56;
          v78 = v56 * v200;
          do
          {
            if (v77 != v38 + v73 - 1)
            {
              v79 = v38;
              v80 = v178;
              if (!v178)
                goto LABEL_164;
              v81 = v178 + v78;
              v201 = v178 + v75;
              sub_23F78F12C(v178 + v78, v180, &qword_256EA44E0);
              if (v78 < v75 || v81 >= v80 + v76)
              {
                v83 = v201;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v83 = v201;
                if (v78 != v75)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_23F78F12C(v180, v83, &qword_256EA44E0);
              v38 = v79;
              v56 = v185;
              v74 = v200;
            }
            ++v77;
            --v73;
            v75 -= v74;
            v76 -= v74;
            v78 += v74;
          }
          while (v77 < v38 + v73);
          v4 = v188;
          a1 = (unint64_t)v186;
          v37 = v199;
        }
      }
    }
    if (v38 < v37)
    {
      if (__OFSUB__(v38, v56))
        goto LABEL_156;
      if (v38 - v56 < v173)
      {
        if (__OFADD__(v56, v173))
          goto LABEL_159;
        if (v56 + v173 >= v37)
          v84 = v37;
        else
          v84 = v56 + v173;
        if (v84 < v56)
        {
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
        if (v38 != v84)
        {
          v170 = v2;
          v85 = *(_QWORD *)(v4 + 72);
          v86 = v85 * (v38 - 1);
          v193 = v85;
          v87 = v38 * v85;
          v178 = v84;
          do
          {
            v88 = 0;
            v195 = v86;
            v196 = v38;
            v194 = v87;
            while (1)
            {
              v89 = *(_QWORD *)a1;
              v199 = v87 + v88;
              v200 = v56;
              v90 = v87 + v88 + v89;
              v91 = v189;
              sub_23F6B4F58(v90, v189, &qword_256EA44E0);
              v92 = v86 + v88 + v89;
              v93 = v190;
              sub_23F6B4F58(v92, v190, &qword_256EA44E0);
              v94 = v197;
              v95 = *(int *)(v197 + 48);
              v96 = v191;
              v97 = (uint64_t)v191 + v95;
              v98 = *(_QWORD *)v91;
              v99 = *(unsigned __int8 *)(v91 + 8);
              *v191 = *(_QWORD *)v91;
              *((_BYTE *)v96 + 8) = v99;
              sub_23F6F5920(v91 + v95, (uint64_t)v96 + v95, type metadata accessor for Candidate);
              if (v99)
                v100 = 0;
              else
                v100 = v98;
              v201 = v100;
              sub_23F6D3508(v97, type metadata accessor for Candidate);
              v101 = *(int *)(v94 + 48);
              v102 = v192;
              v103 = (uint64_t)v192 + v101;
              v104 = *(_QWORD *)v93;
              v105 = *(unsigned __int8 *)(v93 + 8);
              *v192 = *(_QWORD *)v93;
              *((_BYTE *)v102 + 8) = v105;
              sub_23F6F5920(v93 + v101, (uint64_t)v102 + v101, type metadata accessor for Candidate);
              if (v105)
                v104 = 0;
              sub_23F6D3508(v103, type metadata accessor for Candidate);
              sub_23F6B4F84(v93, &qword_256EA44E0);
              sub_23F6B4F84(v91, &qword_256EA44E0);
              if (v201 >= v104)
                break;
              v106 = *(_QWORD *)a1;
              if (!*(_QWORD *)a1)
                goto LABEL_162;
              v87 = v194;
              v86 = v195;
              v107 = v106 + v195 + v88;
              sub_23F78F12C(v106 + v194 + v88, v198, &qword_256EA44E0);
              swift_arrayInitWithTakeFrontToBack();
              sub_23F78F12C(v198, v107, &qword_256EA44E0);
              v88 -= v193;
              v56 = v200 + 1;
              v108 = v196;
              if (v196 == v200 + 1)
                goto LABEL_62;
            }
            v86 = v195;
            v108 = v196;
            v87 = v194;
LABEL_62:
            v38 = v108 + 1;
            v86 += v193;
            v87 += v193;
            v56 = v185;
          }
          while (v38 != v178);
          v38 = v178;
          v2 = v170;
        }
      }
    }
    if (v38 < v56)
      goto LABEL_155;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v196 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v36 = v179;
    }
    else
    {
      sub_23F7DB74C(0, *((_QWORD *)v179 + 2) + 1, 1, v179);
      v36 = v161;
    }
    v111 = *((_QWORD *)v36 + 2);
    v110 = *((_QWORD *)v36 + 3);
    v112 = v111 + 1;
    if (v111 >= v110 >> 1)
    {
      sub_23F7DB74C(v110 > 1, v111 + 1, 1, v36);
      v36 = v162;
    }
    *((_QWORD *)v36 + 2) = v112;
    v113 = v36 + 32;
    v114 = &v36[16 * v111 + 32];
    v115 = v196;
    *(_QWORD *)v114 = v56;
    *((_QWORD *)v114 + 1) = v115;
    if (v111)
      break;
    v112 = 1;
LABEL_112:
    a1 = (unint64_t)v186;
    v37 = v186[1];
    v35 = v196;
    v4 = v188;
    if (v196 >= v37)
      goto LABEL_121;
  }
  while (1)
  {
    a1 = v112 - 1;
    if (v112 >= 4)
    {
      v120 = &v113[16 * v112];
      v121 = *((_QWORD *)v120 - 8);
      v122 = *((_QWORD *)v120 - 7);
      v126 = __OFSUB__(v122, v121);
      v123 = v122 - v121;
      if (v126)
        goto LABEL_140;
      v125 = *((_QWORD *)v120 - 6);
      v124 = *((_QWORD *)v120 - 5);
      v126 = __OFSUB__(v124, v125);
      v118 = v124 - v125;
      v119 = v126;
      if (v126)
        goto LABEL_141;
      v127 = (_QWORD *)(v112 - 2);
      v128 = &v113[16 * v112 - 32];
      v130 = *(_QWORD *)v128;
      v129 = *((_QWORD *)v128 + 1);
      v126 = __OFSUB__(v129, v130);
      v131 = v129 - v130;
      if (v126)
        goto LABEL_142;
      v126 = __OFADD__(v118, v131);
      v132 = v118 + v131;
      if (v126)
        goto LABEL_144;
      if (v132 >= v123)
      {
        v150 = &v113[16 * a1];
        v152 = *(_QWORD *)v150;
        v151 = *((_QWORD *)v150 + 1);
        v126 = __OFSUB__(v151, v152);
        v153 = v151 - v152;
        if (v126)
          goto LABEL_150;
        v143 = v118 < v153;
        goto LABEL_101;
      }
    }
    else
    {
      if (v112 != 3)
      {
        v144 = *((_QWORD *)v36 + 4);
        v145 = *((_QWORD *)v36 + 5);
        v126 = __OFSUB__(v145, v144);
        v137 = v145 - v144;
        v138 = v126;
        goto LABEL_95;
      }
      v117 = *((_QWORD *)v36 + 4);
      v116 = *((_QWORD *)v36 + 5);
      v126 = __OFSUB__(v116, v117);
      v118 = v116 - v117;
      v119 = v126;
    }
    if ((v119 & 1) != 0)
      goto LABEL_143;
    v127 = (_QWORD *)(v112 - 2);
    v133 = &v113[16 * v112 - 32];
    v135 = *(_QWORD *)v133;
    v134 = *((_QWORD *)v133 + 1);
    v136 = __OFSUB__(v134, v135);
    v137 = v134 - v135;
    v138 = v136;
    if (v136)
      goto LABEL_145;
    v139 = &v113[16 * a1];
    v141 = *(_QWORD *)v139;
    v140 = *((_QWORD *)v139 + 1);
    v126 = __OFSUB__(v140, v141);
    v142 = v140 - v141;
    if (v126)
      goto LABEL_147;
    if (__OFADD__(v137, v142))
      goto LABEL_149;
    if (v137 + v142 >= v118)
    {
      v143 = v118 < v142;
LABEL_101:
      if (v143)
        a1 = (unint64_t)v127;
      goto LABEL_103;
    }
LABEL_95:
    if ((v138 & 1) != 0)
      goto LABEL_146;
    v146 = &v113[16 * a1];
    v148 = *(_QWORD *)v146;
    v147 = *((_QWORD *)v146 + 1);
    v126 = __OFSUB__(v147, v148);
    v149 = v147 - v148;
    if (v126)
      goto LABEL_148;
    if (v149 < v137)
      goto LABEL_112;
LABEL_103:
    v154 = a1 - 1;
    if (a1 - 1 >= v112)
    {
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    if (!*v186)
      goto LABEL_163;
    v155 = v36;
    v156 = &v113[16 * v154];
    v157 = *(_QWORD *)v156;
    v158 = &v113[16 * a1];
    v159 = *((_QWORD *)v158 + 1);
    sub_23F78E990(*v186 + *(_QWORD *)(v188 + 72) * *(_QWORD *)v156, *v186 + *(_QWORD *)(v188 + 72) * *(_QWORD *)v158, *v186 + *(_QWORD *)(v188 + 72) * v159, v187);
    if (v2)
      break;
    if (v159 < v157)
      goto LABEL_137;
    if (a1 > *((_QWORD *)v155 + 2))
      goto LABEL_138;
    *(_QWORD *)v156 = v157;
    *(_QWORD *)&v113[16 * v154 + 8] = v159;
    v160 = *((_QWORD *)v155 + 2);
    if (a1 >= v160)
      goto LABEL_139;
    v112 = v160 - 1;
    memmove(&v113[16 * a1], v158 + 16, 16 * (v160 - 1 - a1));
    v36 = v155;
    *((_QWORD *)v155 + 2) = v160 - 1;
    if (v160 <= 2)
      goto LABEL_112;
  }
LABEL_118:
  swift_bridgeObjectRelease();
  if (v172 >= -1)
    goto LABEL_133;
  __break(1u);
LABEL_120:
  v36 = (char *)MEMORY[0x24BEE4AF8];
  v112 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_121:
  if (v112 >= 2)
  {
    v163 = *(_QWORD *)a1;
    while (1)
    {
      v164 = v112 - 2;
      if (v112 < 2)
        break;
      if (!v163)
        goto LABEL_165;
      v165 = v36;
      a1 = *(_QWORD *)&v36[16 * v164 + 32];
      v166 = *(_QWORD *)&v36[16 * v112 + 24];
      sub_23F78E990(v163 + *(_QWORD *)(v188 + 72) * a1, v163 + *(_QWORD *)(v188 + 72) * *(_QWORD *)&v36[16 * v112 + 16], v163 + *(_QWORD *)(v188 + 72) * v166, v187);
      if (v2)
        goto LABEL_118;
      if (v166 < (uint64_t)a1)
        goto LABEL_152;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7DB834();
        v165 = v169;
      }
      if (v164 >= *((_QWORD *)v165 + 2))
        goto LABEL_153;
      v167 = (unint64_t *)&v165[16 * v164 + 32];
      *v167 = a1;
      v167[1] = v166;
      v168 = *((_QWORD *)v165 + 2);
      if (v112 > v168)
        goto LABEL_154;
      memmove(&v165[16 * v112 + 16], &v165[16 * v112 + 32], 16 * (v168 - v112));
      v36 = v165;
      *((_QWORD *)v165 + 2) = v168 - 1;
      v112 = v168 - 1;
      if (v168 <= 2)
        goto LABEL_132;
    }
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
LABEL_132:
  swift_bridgeObjectRelease();
  if (v172 >= -1)
  {
LABEL_133:
    *(_QWORD *)(v171 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
}

void sub_23F78E694(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v44 = a1;
  v54 = sub_23F6916B8(&qword_256EA44E0);
  v7 = MEMORY[0x24BDAC7A8](v54);
  v55 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v49 = (uint64_t *)((char *)&v42 - v10);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v48 = (uint64_t *)((char *)&v42 - v12);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v47 = (uint64_t)&v42 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v46 = (uint64_t)&v42 - v16;
  v53 = a3;
  v43 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v18 = v17 * (v53 - 1);
    v50 = v17;
    v19 = v17 * v53;
    v45 = a4;
    while (2)
    {
      v20 = 0;
      v21 = v44;
      v51 = v19;
      v52 = v18;
      do
      {
        v22 = *a4;
        v56 = v19 + v20;
        v23 = v19 + v20 + v22;
        v24 = v46;
        sub_23F6B4F58(v23, v46, &qword_256EA44E0);
        v25 = v47;
        sub_23F6B4F58(v18 + v20 + v22, v47, &qword_256EA44E0);
        v26 = v54;
        v27 = *(int *)(v54 + 48);
        v28 = v48;
        v29 = (uint64_t)v48 + v27;
        v30 = *(_QWORD *)v24;
        v31 = *(unsigned __int8 *)(v24 + 8);
        *v48 = *(_QWORD *)v24;
        *((_BYTE *)v28 + 8) = v31;
        sub_23F6F5920(v24 + v27, (uint64_t)v28 + v27, type metadata accessor for Candidate);
        if (v31)
          v32 = 0;
        else
          v32 = v30;
        v57 = v32;
        sub_23F6D3508(v29, type metadata accessor for Candidate);
        v33 = *(int *)(v26 + 48);
        v34 = v49;
        v35 = (uint64_t)v49 + v33;
        v36 = *(_QWORD *)v25;
        v37 = *(unsigned __int8 *)(v25 + 8);
        *v49 = *(_QWORD *)v25;
        *((_BYTE *)v34 + 8) = v37;
        sub_23F6F5920(v25 + v33, (uint64_t)v34 + v33, type metadata accessor for Candidate);
        v38 = v37 == 0;
        v18 = v52;
        if (!v38)
          v36 = 0;
        sub_23F6D3508(v35, type metadata accessor for Candidate);
        sub_23F6B4F84(v25, &qword_256EA44E0);
        v39 = v24;
        v19 = v51;
        sub_23F6B4F84(v39, &qword_256EA44E0);
        a4 = v45;
        if (v57 >= v36)
          break;
        v40 = *v45;
        if (!*v45)
        {
          __break(1u);
          return;
        }
        v41 = v40 + v18 + v20;
        sub_23F78F12C(v40 + v19 + v20, v55, &qword_256EA44E0);
        swift_arrayInitWithTakeFrontToBack();
        sub_23F78F12C(v55, v41, &qword_256EA44E0);
        v20 -= v50;
        ++v21;
      }
      while (v53 != v21);
      v18 += v50;
      v19 += v50;
      if (++v53 != v43)
        continue;
      break;
    }
  }
}

void sub_23F78E990(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  BOOL v75;
  BOOL v76;
  _QWORD *v77;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;

  v94 = sub_23F6916B8(&qword_256EA44E0);
  v8 = MEMORY[0x24BDAC7A8](v94);
  v88 = (uint64_t *)((char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v8);
  v87 = (uint64_t *)((char *)&v79 - v11);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v86 = (uint64_t)&v79 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v85 = (char *)&v79 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v90 = (uint64_t *)((char *)&v79 - v17);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v89 = (uint64_t *)((char *)&v79 - v19);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v84 = (uint64_t)&v79 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v83 = (char *)&v79 - v23;
  v24 = *(_QWORD *)(v22 + 72);
  if (!v24)
  {
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v25 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v24 == -1)
    goto LABEL_83;
  v27 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v24 == -1)
    goto LABEL_84;
  v29 = v25 / v24;
  v30 = v27 / v24;
  v92 = *(_QWORD *)(v22 + 72);
  if (v25 / v24 >= v27 / v24)
  {
    sub_23F755734(a2, v27 / v24);
    v31 = (_QWORD *)(a4 + v30 * v24);
    if (v30 * v24 < 1 || a1 >= a2)
      goto LABEL_46;
    v84 = -v24;
    v82 = a4;
    v80 = a1;
    v55 = (uint64_t)v85;
    while (1)
    {
      v93 = (unint64_t)v31;
      v56 = v84;
      v90 = (_QWORD *)((char *)v31 + v84);
      v91 = a3;
      v57 = a2;
      sub_23F6B4F58((uint64_t)v31 + v84, v55, &qword_256EA44E0);
      v58 = a2 + v56;
      v89 = (_QWORD *)(a2 + v56);
      v59 = v86;
      sub_23F6B4F58(v58, v86, &qword_256EA44E0);
      v60 = v94;
      v61 = *(int *)(v94 + 48);
      v62 = v87;
      v63 = (uint64_t)v87 + v61;
      v64 = *(_QWORD *)v55;
      v65 = *(unsigned __int8 *)(v55 + 8);
      *v87 = *(_QWORD *)v55;
      *((_BYTE *)v62 + 8) = v65;
      sub_23F6F5920(v55 + v61, (uint64_t)v62 + v61, type metadata accessor for Candidate);
      if (v65)
        v66 = 0;
      else
        v66 = v64;
      sub_23F6D3508(v63, type metadata accessor for Candidate);
      v67 = *(int *)(v60 + 48);
      v68 = v88;
      v69 = (uint64_t)v88 + v67;
      v70 = *(_QWORD *)v59;
      v71 = *(unsigned __int8 *)(v59 + 8);
      *v88 = *(_QWORD *)v59;
      *((_BYTE *)v68 + 8) = v71;
      sub_23F6F5920(v59 + v67, (uint64_t)v68 + v67, type metadata accessor for Candidate);
      if (v71)
        v70 = 0;
      v72 = v91 + v56;
      v73 = v91;
      sub_23F6D3508(v69, type metadata accessor for Candidate);
      sub_23F6B4F84(v59, &qword_256EA44E0);
      sub_23F6B4F84(v55, &qword_256EA44E0);
      if (v66 < v70)
        break;
      v76 = v73 < v93 || v72 >= v93;
      a3 = v72;
      a2 = v57;
      if (!v76)
      {
        a4 = v82;
        v24 = v92;
        if (v73 == v93)
        {
          v31 = v90;
          goto LABEL_76;
        }
        v74 = v90;
LABEL_73:
        swift_arrayInitWithTakeBackToFront();
        goto LABEL_75;
      }
      v77 = v90;
      swift_arrayInitWithTakeFrontToBack();
      v31 = v77;
      a4 = v82;
      v24 = v92;
LABEL_76:
      if ((unint64_t)v31 <= a4 || a2 <= v80)
        goto LABEL_46;
    }
    v74 = (_QWORD *)v93;
    v75 = v73 < v57 || v72 >= v57;
    a3 = v72;
    if (v75)
    {
      a2 = (unint64_t)v89;
      swift_arrayInitWithTakeFrontToBack();
      a4 = v82;
      v24 = v92;
    }
    else
    {
      a4 = v82;
      v24 = v92;
      if (v73 != v57)
      {
        a2 = (unint64_t)v89;
        goto LABEL_73;
      }
      a2 = (unint64_t)v89;
    }
LABEL_75:
    v31 = v74;
    goto LABEL_76;
  }
  sub_23F755734(a1, v25 / v24);
  v31 = (_QWORD *)(a4 + v29 * v24);
  if (v29 * v24 >= 1 && a2 < a3)
  {
    v81 = a3;
    v93 = a4 + v29 * v24;
    v33 = (uint64_t)v83;
    do
    {
      v91 = a2;
      sub_23F6B4F58(a2, v33, &qword_256EA44E0);
      v34 = v84;
      sub_23F6B4F58(a4, v84, &qword_256EA44E0);
      v35 = v94;
      v36 = *(int *)(v94 + 48);
      v37 = v89;
      v38 = (uint64_t)v89 + v36;
      v39 = *(_QWORD *)v33;
      v40 = a4;
      v41 = *(unsigned __int8 *)(v33 + 8);
      *v89 = *(_QWORD *)v33;
      *((_BYTE *)v37 + 8) = v41;
      sub_23F6F5920(v33 + v36, (uint64_t)v37 + v36, type metadata accessor for Candidate);
      if (v41)
        v39 = 0;
      sub_23F6D3508(v38, type metadata accessor for Candidate);
      v42 = *(int *)(v35 + 48);
      v43 = v90;
      v44 = (uint64_t)v90 + v42;
      v45 = *(_QWORD *)v34;
      v46 = *(unsigned __int8 *)(v34 + 8);
      *v90 = *(_QWORD *)v34;
      *((_BYTE *)v43 + 8) = v46;
      sub_23F6F5920(v34 + v42, (uint64_t)v43 + v42, type metadata accessor for Candidate);
      if (v46)
        v45 = 0;
      sub_23F6D3508(v44, type metadata accessor for Candidate);
      sub_23F6B4F84(v34, &qword_256EA44E0);
      sub_23F6B4F84(v33, &qword_256EA44E0);
      if (v39 >= v45)
      {
        a2 = v91;
        v24 = v92;
        a4 = v40 + v92;
        v49 = a1 < v40 || a1 >= a4;
        v50 = v40;
        if (v49)
        {
LABEL_32:
          swift_arrayInitWithTakeFrontToBack();
          v48 = v81;
          goto LABEL_35;
        }
        v48 = v81;
        if (a1 != v50)
LABEL_34:
          swift_arrayInitWithTakeBackToFront();
      }
      else
      {
        v24 = v92;
        a2 = v91 + v92;
        v47 = a1 < v91 || a1 >= a2;
        a4 = v40;
        if (v47)
          goto LABEL_32;
        v48 = v81;
        if (a1 != v91)
          goto LABEL_34;
      }
LABEL_35:
      v31 = (_QWORD *)v93;
      a1 += v24;
    }
    while (a4 < v93 && a2 < v48);
  }
LABEL_46:
  v53 = (uint64_t)v31 - a4;
  if (v24 != -1 || v53 != 0x8000000000000000)
  {
    sub_23F755734(a4, v53 / v24);
    return;
  }
LABEL_85:
  __break(1u);
}

uint64_t sub_23F78EF60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v19[2];

  v5 = sub_23FB2C764();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return 0;
  v19[1] = v2;
  v10 = *(_QWORD *)(type metadata accessor for ProgramStatement(0) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 72);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14 = v9 - 1;
  v15 = a1 + ((v11 + 32) & ~v11) + v12 * (v9 - 1);
  v16 = -v12;
  while (1)
  {
    v13(v8, a2, v5);
    v17 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v17 & 1) != 0)
      break;
    --v14;
    v15 += v16;
    if (v14 == -1)
      return 0;
  }
  return v14;
}

void sub_23F78F088(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_23F6F59F8(a1, a2, a3);
  sub_23F78F240(v3);
  sub_23F694CC8();
}

uint64_t dispatch thunk of ClientConversionContext.transcript.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClientConversionContext.generateNextStatmentId()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClientConversionContext.enableStatementId()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClientConversionContext.disableStatementId()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_23F78F0C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_23F78F100@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23FB2D5A4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_23F78F12C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_23F6B6B88(a1, a2, a3);
  sub_23F78F240(v3);
  sub_23F694CC8();
}

void sub_23F78F14C(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_23F7F5C78(*a1, *a2, a3);
}

void sub_23F78F180(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_23F78F14C(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_23F78F19C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23F7893E0(a1, a2);
}

uint64_t sub_23F78F1B0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_23F78F1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

uint64_t sub_23F78F1E4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_23F78F1EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

void sub_23F78F204(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(v2, a2);
}

unint64_t sub_23F78F20C()
{
  return sub_23F78CC10();
}

uint64_t sub_23F78F21C()
{
  return sub_23FB2F068();
}

uint64_t sub_23F78F22C()
{
  return 0;
}

uint64_t sub_23F78F240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t sub_23F78F258()
{
  return type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
}

uint64_t sub_23F78F260()
{
  return 0;
}

uint64_t sub_23F78F27C()
{
  return 0;
}

uint64_t sub_23F78F298()
{
  return 0;
}

uint64_t sub_23F78F2A8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_23F78F2BC(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 0, 1, a1);
}

uint64_t sub_23F78F2D0()
{
  return 0;
}

uint64_t sub_23F78F2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, 1, a4);
}

uint64_t sub_23F78F2EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v3 - 256), v2);
}

uint64_t sub_23F78F308@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23F78F314()
{
  return sub_23FB2CA34();
}

uint64_t sub_23F78F330()
{
  return sub_23FB2ED38();
}

uint64_t sub_23F78F34C()
{
  return sub_23FB2F200();
}

uint64_t sub_23F78F35C()
{
  return type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
}

uint64_t sub_23F78F364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

uint64_t sub_23F78F374()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_23F6ADC98(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

void sub_23F78F3CC(_QWORD *a1)
{
  void (*v1)(uint64_t);

  sub_23F72156C(a1, v1);
}

uint64_t sub_23F78F3D4()
{
  return sub_23FB2FC5C();
}

uint64_t sub_23F78F3EC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 272) + 8))(*(_QWORD *)(v1 - 184), v0);
}

uint64_t sub_23F78F404()
{
  return 0;
}

uint64_t sub_23F78F418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_QWORD *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 24) = v4;
  return v1;
}

uint64_t sub_23F78F448()
{
  return 0;
}

void sub_23F78F454(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

uint64_t sub_23F78F45C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(v4 - 120) = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

uint64_t sub_23F78F470()
{
  return sub_23FB2CC80();
}

uint64_t sub_23F78F478()
{
  uint64_t v0;

  return v0;
}

void sub_23F78F490()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_23F6F5920(v0, v2, v1);
}

uint64_t sub_23F78F4A0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F78F4B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F78F4BC()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;

  return sub_23F73515C(v0, v2, v1);
}

void sub_23F78F4CC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  MessagePayload.RequestContent.SpeechContent.init(ifps:)();
}

uint64_t sub_23F78F4DC()
{
  return sub_23FB2FC50();
}

uint64_t sub_23F78F4EC()
{
  return sub_23FB2F200();
}

uint64_t sub_23F78F4FC()
{
  return sub_23FB2DE08();
}

uint64_t sub_23F78F504()
{
  return sub_23FB2CC14();
}

uint64_t sub_23F78F50C()
{
  return 0;
}

uint64_t sub_23F78F51C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F78F52C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_23F78F534()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23F78F540()
{
  return sub_23F78C6DC();
}

uint64_t sub_23F78F560()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F78F56C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F6AF9C8(v0, v1 - 128);
}

uint64_t sub_23F78F58C()
{
  return sub_23FB2CC80();
}

BOOL sub_23F78F598@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_23F78F5A4()
{
  return sub_23FB2FB6C();
}

uint64_t sub_23F78F5B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F78F5BC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_23F78F5C8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(a1, a2, v2);
}

uint64_t sub_23F78F5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_23F78F5D8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F6AF9C8(v0, v1 - 120);
}

uint64_t sub_23F78F5E4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

Swift::UInt32 __swiftcall Session.StatementIdCounter.newStatementIdIndex()()
{
  uint64_t v0;
  unsigned int *v1;
  Swift::UInt32 result;

  v1 = (unsigned int *)(v0 + 16);
  do
    result = __ldxr(v1);
  while (__stxr(result + 1, v1));
  return result;
}

void Session.SessionState.transcript.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F6F5920(v1, a1, type metadata accessor for Session.Transcript);
}

uint64_t Session.SessionState.transcript.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23F78F634(a1, v1);
}

uint64_t sub_23F78F634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Session.Transcript(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*Session.SessionState.transcript.modify())()
{
  return nullsub_1;
}

uint64_t Session.SessionState.statementIdCounter.getter()
{
  sub_23F790958();
  return swift_retain();
}

uint64_t type metadata accessor for Session.SessionState()
{
  uint64_t result;

  result = qword_256EA8D98;
  if (!qword_256EA8D98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Session.SessionState.init(transcript:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  sub_23F6F5920(a1, a2, type metadata accessor for Session.Transcript);
  sub_23F75E73C();
  v4 = swift_bridgeObjectRetain();
  sub_23F78F76C(v4);
  v6 = v5;
  swift_bridgeObjectRelease();
  type metadata accessor for Session.StatementIdCounter();
  v7 = sub_23F79094C();
  *(_DWORD *)(v7 + 16) = v6;
  sub_23F6D3508(a1, type metadata accessor for Session.Transcript);
  result = sub_23F790958();
  *(_QWORD *)(a2 + *(int *)(result + 20)) = v7;
  return result;
}

void sub_23F78F76C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  int v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v2 = sub_23FB2C764();
  v3 = *(_QWORD *)(v2 - 8);
  v97 = v2;
  v98 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Session.Event(0);
  v93 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v91 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v84 - v9;
  v11 = sub_23F6916B8(&qword_256EA7A90);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v88 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v84 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v84 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v84 - v20;
  v22 = *(_QWORD *)(a1 + 16);
  v95 = a1;
  swift_bridgeObjectRetain();
  v94 = v22;
  v92 = v6;
  v86 = v21;
  v87 = v16;
  v89 = v10;
  v85 = v19;
  if (!v22)
    goto LABEL_27;
LABEL_2:
  if (--v22 >= v94)
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
  }
  else
  {
    sub_23F6F5920(v95+ ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))+ *(_QWORD *)(v93 + 72) * v22, (uint64_t)v21, type metadata accessor for Session.Event);
    for (i = 0; ; i = 1)
    {
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v21, i, 1, v6);
      sub_23F790904((uint64_t)v21, (uint64_t)v19);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v19, 1, v6) == 1)break;
      v96 = v22;
      sub_23F6F594C((uint64_t)v19, (uint64_t)v10, type metadata accessor for Session.Event);
      Session.Event.Payload.statementIds.getter();
      v25 = v24;
      v26 = *(_QWORD *)(v24 + 16);
      if (v26)
      {
        v99 = MEMORY[0x24BEE4AF8];
        sub_23F7123E4(0, v26, 0);
        v27 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        v90 = v25;
        v28 = v25 + v27;
        v29 = *(_QWORD *)(v98 + 72);
        v30 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
        do
        {
          v31 = v97;
          v30(v5, v28, v97);
          v32 = sub_23FB2C758();
          (*(void (**)(char *, uint64_t))(v98 + 8))(v5, v31);
          v33 = v99;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23F7123E4(0, *(_QWORD *)(v33 + 16) + 1, 1);
            v33 = v99;
          }
          v35 = *(_QWORD *)(v33 + 16);
          v34 = *(_QWORD *)(v33 + 24);
          if (v35 >= v34 >> 1)
          {
            sub_23F7123E4((char *)(v34 > 1), v35 + 1, 1);
            v33 = v99;
          }
          *(_QWORD *)(v33 + 16) = v35 + 1;
          *(_DWORD *)(v33 + 4 * v35 + 32) = v32;
          v28 += v29;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        v19 = v85;
      }
      else
      {
        swift_bridgeObjectRelease();
        v33 = MEMORY[0x24BEE4AF8];
      }
      v36 = *(_QWORD *)(v33 + 16);
      if (v36)
      {
        v37 = (int *)(v33 + 32);
        v38 = MEMORY[0x24BEE4AF8];
        do
        {
          v40 = *v37++;
          v39 = v40;
          if (v40)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v99 = v38;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_23F7123E4(0, *(_QWORD *)(v38 + 16) + 1, 1);
              v38 = v99;
            }
            v43 = *(_QWORD *)(v38 + 16);
            v42 = *(_QWORD *)(v38 + 24);
            if (v43 >= v42 >> 1)
            {
              sub_23F7123E4((char *)(v42 > 1), v43 + 1, 1);
              v38 = v99;
            }
            *(_QWORD *)(v38 + 16) = v43 + 1;
            *(_DWORD *)(v38 + 4 * v43 + 32) = v39;
          }
          --v36;
        }
        while (v36);
      }
      else
      {
        v38 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      v44 = *(_QWORD *)(v38 + 16);
      if (v44)
      {
        v46 = *(_DWORD *)(v38 + 32);
        v47 = v44 - 1;
        v48 = (uint64_t)v87;
        v49 = v96;
        v50 = (uint64_t)v89;
        if (v47)
        {
          v51 = (unsigned int *)(v38 + 36);
          do
          {
            v53 = *v51++;
            v52 = v53;
            if (v46 <= v53)
              v46 = v52;
            --v47;
          }
          while (v47);
        }
        LODWORD(v86) = v46;
        swift_release();
        sub_23F6D3508(v50, type metadata accessor for Session.Event);
        while (1)
        {
          v54 = v92;
          v55 = (uint64_t)v88;
          if (v49)
            break;
          while (1)
          {
            v56 = 1;
LABEL_38:
            _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v48, v56, 1, v54);
            sub_23F790904(v48, v55);
            if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v55, 1, v54) == 1)
            {
              v45 = (int)v86;
              goto LABEL_71;
            }
            v96 = v49;
            sub_23F6F594C(v55, v91, type metadata accessor for Session.Event);
            Session.Event.Payload.statementIds.getter();
            v58 = v57;
            v59 = *(_QWORD *)(v57 + 16);
            if (v59)
            {
              v99 = MEMORY[0x24BEE4AF8];
              sub_23F7123E4(0, v59, 0);
              v60 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
              v90 = v58;
              v61 = v58 + v60;
              v62 = *(_QWORD *)(v98 + 72);
              v63 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
              do
              {
                v64 = v97;
                v63(v5, v61, v97);
                v65 = sub_23FB2C758();
                (*(void (**)(char *, uint64_t))(v98 + 8))(v5, v64);
                v66 = v99;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_23F7123E4(0, *(_QWORD *)(v66 + 16) + 1, 1);
                  v66 = v99;
                }
                v68 = *(_QWORD *)(v66 + 16);
                v67 = *(_QWORD *)(v66 + 24);
                if (v68 >= v67 >> 1)
                {
                  sub_23F7123E4((char *)(v67 > 1), v68 + 1, 1);
                  v66 = v99;
                }
                *(_QWORD *)(v66 + 16) = v68 + 1;
                *(_DWORD *)(v66 + 4 * v68 + 32) = v65;
                v61 += v62;
                --v59;
              }
              while (v59);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              v66 = MEMORY[0x24BEE4AF8];
            }
            v69 = *(_QWORD *)(v66 + 16);
            if (v69)
            {
              v70 = (int *)(v66 + 32);
              v71 = MEMORY[0x24BEE4AF8];
              do
              {
                v73 = *v70++;
                v72 = v73;
                if (v73)
                {
                  v74 = swift_isUniquelyReferenced_nonNull_native();
                  v99 = v71;
                  if ((v74 & 1) == 0)
                  {
                    sub_23F7123E4(0, *(_QWORD *)(v71 + 16) + 1, 1);
                    v71 = v99;
                  }
                  v76 = *(_QWORD *)(v71 + 16);
                  v75 = *(_QWORD *)(v71 + 24);
                  if (v76 >= v75 >> 1)
                  {
                    sub_23F7123E4((char *)(v75 > 1), v76 + 1, 1);
                    v71 = v99;
                  }
                  *(_QWORD *)(v71 + 16) = v76 + 1;
                  *(_DWORD *)(v71 + 4 * v76 + 32) = v72;
                }
                --v69;
              }
              while (v69);
            }
            else
            {
              v71 = MEMORY[0x24BEE4AF8];
            }
            swift_bridgeObjectRelease();
            v77 = *(_QWORD *)(v71 + 16);
            if (v77)
              break;
            swift_release();
            sub_23F6D3508(v91, type metadata accessor for Session.Event);
            v54 = v92;
            v48 = (uint64_t)v87;
            v55 = (uint64_t)v88;
            v49 = v96;
            if (v96)
              goto LABEL_36;
          }
          v78 = *(_DWORD *)(v71 + 32);
          v79 = v77 - 1;
          v48 = (uint64_t)v87;
          v49 = v96;
          if (v79)
          {
            v80 = (unsigned int *)(v71 + 36);
            do
            {
              v82 = *v80++;
              v81 = v82;
              if (v78 <= v82)
                v78 = v81;
              --v79;
            }
            while (v79);
          }
          swift_release();
          sub_23F6D3508(v91, type metadata accessor for Session.Event);
          v83 = v86;
          if (v86 <= v78)
            v83 = v78;
          LODWORD(v86) = v83;
        }
LABEL_36:
        if (--v49 < v94)
        {
          sub_23F6F5920(v95+ ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))+ *(_QWORD *)(v93 + 72) * v49, v48, type metadata accessor for Session.Event);
          v56 = 0;
          goto LABEL_38;
        }
        goto LABEL_74;
      }
      swift_release();
      v10 = v89;
      sub_23F6D3508((uint64_t)v89, type metadata accessor for Session.Event);
      v6 = v92;
      v22 = v96;
      v21 = v86;
      if (v96)
        goto LABEL_2;
LABEL_27:
      ;
    }
    v45 = 0;
LABEL_71:
    swift_bridgeObjectRelease();
    if (v45 == -1)
      goto LABEL_75;
  }
}

void Session.StatementIdCounter.__allocating_init(baseStatementIdIndex:)(int a1)
{
  *(_DWORD *)(sub_23F79094C() + 16) = a1;
  sub_23F694CC8();
}

uint64_t type metadata accessor for Session.StatementIdCounter()
{
  return objc_opt_self();
}

uint64_t Session.SessionState.init(events:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v4 = (int *)sub_23F75E73C();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v39 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v39 - v11;
  v13 = sub_23F790958();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v16 = (int *)type metadata accessor for Session.Event(0);
    v17 = *(unsigned __int8 *)(*((_QWORD *)v16 - 1) + 80);
    v40 = v13;
    v18 = a1 + ((v17 + 32) & ~v17);
    v19 = v18 + v16[5];
    v20 = sub_23FB2C4B8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v7, v19, v20);
    v21 = (uint64_t *)(v18 + v16[9]);
    v22 = *v21;
    v23 = v21[1];
    v24 = &v7[v4[5]];
    *(_QWORD *)v24 = v22;
    *((_QWORD *)v24 + 1) = v23;
    v25 = (uint64_t *)(v18 + v16[10]);
    v39 = a2;
    v26 = *v25;
    v27 = v25[1];
    v28 = &v7[v4[6]];
    *(_QWORD *)v28 = v26;
    *((_QWORD *)v28 + 1) = v27;
    v29 = (uint64_t *)(v18 + v16[11]);
    v30 = *v29;
    v31 = v29[1];
    v32 = &v7[v4[7]];
    *(_QWORD *)v32 = v30;
    *((_QWORD *)v32 + 1) = v31;
    *(_QWORD *)&v7[v4[8]] = a1;
    sub_23F6F594C((uint64_t)v7, (uint64_t)v10, type metadata accessor for Session.Transcript);
    sub_23F6F594C((uint64_t)v10, (uint64_t)v12, type metadata accessor for Session.Transcript);
    sub_23F6F5920((uint64_t)v12, (uint64_t)v15, type metadata accessor for Session.Transcript);
    v33 = *(_QWORD *)&v12[v4[8]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23F78F76C(v33);
    LODWORD(v27) = v34;
    swift_bridgeObjectRelease();
    type metadata accessor for Session.StatementIdCounter();
    v35 = sub_23F79094C();
    *(_DWORD *)(v35 + 16) = v27;
    sub_23F6D3508((uint64_t)v12, type metadata accessor for Session.Transcript);
    v37 = v39;
    v36 = v40;
    *(_QWORD *)&v15[*(int *)(v40 + 20)] = v35;
    sub_23F6F594C((uint64_t)v15, v37, (uint64_t (*)(_QWORD))type metadata accessor for Session.SessionState);
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v37, 0, 1, v36);
  }
  else
  {
    swift_bridgeObjectRelease();
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 1, 1, v13);
  }
}

uint64_t Session.StatementIdCounter.init(baseStatementIdIndex:)(int a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t Session.StatementIdCounter.newStatementId()()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(v0 + 16);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return sub_23FB2C74C();
}

void Session.StatementIdCounter.deinit()
{
  uint64_t v0;

  v0 = sub_23F6916B8(&qword_256EA8D38);
  sub_23F6B6454(v0);
  sub_23F694CC8();
}

uint64_t Session.StatementIdCounter.__deallocating_deinit()
{
  uint64_t v0;

  v0 = sub_23F6916B8(&qword_256EA8D38);
  sub_23F6B6454(v0);
  return swift_deallocClassInstance();
}

uint64_t *_s12SessionStateVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23FB2C4B8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = (int *)type metadata accessor for Session.Transcript(0);
    v9 = v8[5];
    v10 = (uint64_t *)((char *)v4 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v13 = *v11;
    v12 = v11[1];
    *v10 = v13;
    v10[1] = v12;
    v14 = v8[6];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v8[7];
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)v4 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t _s12SessionStateVwxx(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for Session.Transcript(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s12SessionStateVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Session.Transcript(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  v13 = v7[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v7[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s12SessionStateVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Session.Transcript(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v7[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s12SessionStateVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;

  v6 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Session.Transcript(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s12SessionStateVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Session.Transcript(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = v7[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t _s12SessionStateVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F790764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_23F75E73C();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t _s12SessionStateVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7907E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_23F75E73C();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_23F790854()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Session.Transcript(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for Session.StatementIdCounter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Session.StatementIdCounter.__allocating_init(baseStatementIdIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_23F7908DC()
{
  if (MEMORY[0x24BEE4F18])
    return sub_23F6916B8(&qword_256EA8D38);
  else
    return MEMORY[0x24BEE4AE0] + 8;
}

uint64_t sub_23F790904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA7A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F79094C()
{
  return swift_allocObject();
}

uint64_t sub_23F790958()
{
  return type metadata accessor for Session.SessionState();
}

uint64_t sub_23F790960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;

  v3 = sub_23FB2DE8C();
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (!v6)
    return v7;
  v19[1] = v1;
  v34 = MEMORY[0x24BEE4AF8];
  sub_23F7111CC();
  v7 = v34;
  result = sub_23F7AE664(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v10 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v11 = a1 + 64;
      v22 = &v30;
      v23 = &v29;
      v20 = a1 + 64;
      v21 = a1;
      while (1)
      {
        v27 = v6;
        if ((*(_QWORD *)(v11 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
          break;
        if ((_DWORD)v9 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v26 = v9;
        v12 = *(_QWORD *)(a1 + 56);
        v13 = (__int128 *)(*(_QWORD *)(a1 + 48) + 48 * v10);
        v14 = v13[2];
        v15 = *v13;
        v29 = v13[1];
        v30 = v14;
        v28 = v15;
        v16 = *v23;
        v31 = v15;
        v32 = v16;
        v33[0] = *v22;
        v17 = *(_QWORD *)(v12 + 8 * v10);
        sub_23F794F70((uint64_t)&v31);
        sub_23F794F70((uint64_t)&v32);
        sub_23F794F70((uint64_t)v33);
        swift_bridgeObjectRetain();
        sub_23F794F70((uint64_t)&v31);
        sub_23F794F70((uint64_t)&v32);
        sub_23F794F70((uint64_t)v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23F792DA0(v17, (uint64_t)v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = v7;
        v18 = *(_QWORD *)(v7 + 16);
        if (v18 >= *(_QWORD *)(v7 + 24) >> 1)
        {
          sub_23F7111CC();
          v7 = v34;
        }
        *(_QWORD *)(v7 + 16) = v18 + 1;
        result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v24 + 32))(v7+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v18, v5, v25);
        a1 = v21;
        if ((uint64_t)v10 >= -(-1 << *(_BYTE *)(v21 + 32)))
          goto LABEL_19;
        v11 = v20;
        if ((*(_QWORD *)(v20 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
          goto LABEL_20;
        if ((_DWORD)v26 != *(_DWORD *)(v21 + 36))
          goto LABEL_21;
        result = sub_23FB2F740();
        v6 = v27 - 1;
        if (v27 == 1)
          return v7;
        v10 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v9 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_23F790C44(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(id *);
  id v30;

  v29 = a1;
  v5 = sub_23F6916B8(&qword_256EA8FB8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23F6916B8(&qword_256EA2910);
  v25 = *(_QWORD *)(v28 - 8);
  v8 = MEMORY[0x24BDAC7A8](v28);
  v27 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v24 = (uint64_t)&v22 - v10;
  if (a3 >> 62)
    goto LABEL_20;
  v11 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; v11 = sub_23FB2F974())
  {
    v12 = MEMORY[0x24BEE4AF8];
    v26 = a3 & 0xC000000000000001;
    v13 = 4;
    v23 = a3;
    while (1)
    {
      v14 = v26 ? (id)MEMORY[0x242674478](v13 - 4, a3) : *(id *)(a3 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      v30 = v14;
      v29(&v30);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v12;
      }

      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v7, 1, v28) == 1)
      {
        sub_23F6B4F84((uint64_t)v7, &qword_256EA8FB8);
      }
      else
      {
        v17 = v24;
        sub_23F6B4EC0((uint64_t)v7, v24, &qword_256EA2910);
        sub_23F6B4EC0(v17, v27, &qword_256EA2910);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F753C30();
          v12 = v19;
        }
        v18 = *(_QWORD *)(v12 + 16);
        if (v18 >= *(_QWORD *)(v12 + 24) >> 1)
        {
          sub_23F753C30();
          v12 = v20;
        }
        *(_QWORD *)(v12 + 16) = v18 + 1;
        sub_23F6B4EC0(v27, v12+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v18, &qword_256EA2910);
        a3 = v23;
      }
      ++v13;
      if (v16 == v11)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

void SiriEntityMatcherShim.__allocating_init(maxEntityCount:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44[2];

  v44[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_23F6F52E4();
  v43 = *(_QWORD *)(v4 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v42 = v6;
  v7 = sub_23FB2C50C();
  v41 = *(_QWORD *)(v7 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA8E70);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B631C();
  v14 = v12 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v39 - v16;
  v18 = objc_msgSend((id)objc_opt_self(), sel_indexMatcher);
  v44[0] = 0;
  v19 = objc_msgSend(v18, sel_indexLocaleWithUserId_error_, 0, v44);
  v20 = v44[0];
  if (v19)
  {
    v21 = v19;
    sub_23FB2C4F4();
    v22 = v20;

    v23 = 0;
  }
  else
  {
    v24 = v44[0];
    v25 = sub_23FB2C290();
    v40 = v10;
    v26 = a1;
    v27 = v4;
    v28 = a2;
    v29 = (void *)v25;

    swift_willThrow();
    v30 = v29;
    a2 = v28;
    v4 = v27;
    a1 = v26;
    v10 = v40;

    v23 = 1;
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v17, v23, 1, v7);
  sub_23F6B4F58((uint64_t)v17, v14, &qword_256EA8E70);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v14, 1, v7) == 1)
  {
    v31 = v18;
    sub_23FB2C500();
    sub_23F6B4F84(v14, &qword_256EA8E70);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v10, v14, v7);
    v32 = v18;
  }
  sub_23F6B9088(0, &qword_256EA8E78);
  v33 = sub_23F7913C4((uint64_t)v10);

  sub_23F6B4F84((uint64_t)v17, &qword_256EA8E70);
  v35 = v42;
  v34 = v43;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v42, *MEMORY[0x24BE57858], v4);
  type metadata accessor for SiriEntityMatcherShim();
  v36 = swift_allocObject();
  v37 = (_QWORD *)(v36 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher);
  v37[3] = sub_23F6B9088(0, &qword_256EA8E80);
  v37[4] = &protocol witness table for SEMSpanMatcher;
  *v37 = v18;
  *(_QWORD *)(v36 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_tokenizer) = v33;
  v38 = v36 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount;
  *(_QWORD *)v38 = a1;
  *(_BYTE *)(v38 + 8) = a2 & 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v36 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType, v35, v4);
  sub_23F693DDC();
}

void sub_23F79123C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_23F6916B8(&qword_256EA2910) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7DC9D4();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_23F793624((unint64_t)v6);
  *a1 = v3;
}

uint64_t sub_23F7912C0(uint64_t a1)
{
  return sub_23F7912E0(a1);
}

uint64_t sub_23F7912E0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v3 = objc_msgSend(v1, sel_matchSpans_error_, a1, v9);
  v4 = v9[0];
  if (v3)
  {
    v5 = v3;
    sub_23F6B9088(0, (unint64_t *)&unk_256EA9030);
    v2 = sub_23FB2F3BC();
    v6 = v4;

  }
  else
  {
    v7 = v9[0];
    sub_23FB2C290();

    swift_willThrow();
  }
  return v2;
}

id sub_23F7913C4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_23FB2C4DC();
  v4 = objc_msgSend(v2, sel_initWithLocale_, v3);

  v5 = sub_23FB2C50C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

void SiriEntityMatcherShim.__allocating_init(maxEntityCount:spanMatcher:tokenizer:matcherType:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_23F791490(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23F794C48);
}

uint64_t type metadata accessor for SiriEntityMatcherShim()
{
  uint64_t result;

  result = qword_256EA8ED0;
  if (!qword_256EA8ED0)
    return swift_getSingletonMetadata();
  return result;
}

void SiriEntityMatcherShim.init(maxEntityCount:spanMatcher:tokenizer:matcherType:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_23F791490(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23F794D34);
}

void sub_23F791490(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v12 = a2 & 1;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(a3 + 32);
  v15 = sub_23F6BD10C(a3, v13);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  a6(a1, v12, v17, a4, a5, v6, v13, v14);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a3);
  sub_23F693DDC();
}

uint64_t sub_23F791554@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType;
  v4 = sub_23F6F52E4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23F791594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_23FB2EDD4();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = sub_23F750AE4();
  v5 = sub_23FB2E7F8();
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 - 8);
  v3[10] = sub_23F750AE4();
  v6 = sub_23F6916B8(&qword_256EA2910);
  v3[11] = v6;
  v3[12] = *(_QWORD *)(v6 - 8);
  v3[13] = sub_23F750AE4();
  sub_23F6916B8(&qword_256EA2950);
  v3[14] = sub_23F79514C();
  v3[15] = sub_23F795160();
  v3[16] = sub_23F795160();
  v7 = sub_23FB2DBA4();
  v3[17] = v7;
  v3[18] = *(_QWORD *)(v7 - 8);
  v3[19] = sub_23F79514C();
  v3[20] = sub_23F795160();
  v3[21] = sub_23F6916B8(&qword_256EA8E90);
  v3[22] = sub_23F750AE4();
  sub_23F6916B8((uint64_t *)&unk_256EA8E98);
  v3[23] = sub_23F79514C();
  v3[24] = sub_23F795160();
  return swift_task_switch();
}

uint64_t sub_23F7916B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *log;
  unint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[2];

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_tokenizer);
  v3 = (void *)sub_23FB2F134();
  v4 = objc_msgSend(v2, sel_queryFromText_, v3);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher + 24);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher + 32);
  sub_23F6ADC98((_QWORD *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher), v5);
  v7 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v6 + 8))(v4, v5, v6);
  v9 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v10 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = sub_23F791FA8(v7, v8, v10, v9);
  sub_23F693DFC();
  v70 = *(_QWORD *)(v0 + 168);
  v61 = *(_QWORD *)(v0 + 96);
  v62 = v11;
  v67 = *(_QWORD *)(v0 + 88);
  v68 = *(_QWORD *)(v0 + 144);
  v65 = *(_QWORD *)(v0 + 72);
  v60 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v11 + 16);
  result = swift_bridgeObjectRetain();
  v14 = 0;
  v66 = v4;
  v64 = v12;
  while (1)
  {
    if (v14 == v12)
    {
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(*(_QWORD *)(v0 + 184), 1, 1, *(_QWORD *)(v0 + 168));
      v15 = v12;
      goto LABEL_6;
    }
    if (v14 >= *(_QWORD *)(v62 + 16))
      break;
    v16 = *(unint64_t **)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 168);
    v15 = v14 + 1;
    v18 = *(_QWORD *)(v0 + 176) + *(int *)(v70 + 48);
    sub_23F6B4F58(v62+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v14, v18, &qword_256EA2910);
    v19 = (uint64_t)v16 + *(int *)(v70 + 48);
    *v16 = v14;
    sub_23F6B4EC0(v18, v19, &qword_256EA2910);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v16, 0, 1, v17);
LABEL_6:
    v20 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 168);
    sub_23F6B4EC0(*(_QWORD *)(v0 + 184), v20, (uint64_t *)&unk_256EA8E98);
    v22 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v20, 1, v21);
    v23 = *(uint64_t **)(v0 + 192);
    if (v22 == 1)
    {
      swift_bridgeObjectRelease();
      v57 = sub_23F793150(v62);
      swift_bridgeObjectRelease();
      sub_23F7929D0(v57);
      v59 = v58;
      sub_23F693DFC();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v59);
    }
    v24 = *(_QWORD *)(v0 + 160);
    v71 = v15;
    v72 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 136);
    v73 = *(_QWORD *)(v0 + 120);
    v27 = *(_QWORD *)(v0 + 104);
    v69 = *v23;
    v28 = *(int *)(v67 + 48);
    v29 = (uint64_t)v23 + *(int *)(v70 + 48) + v28;
    v30 = v27 + v28;
    v31 = *(void (**)(uint64_t))(v68 + 32);
    v31(v27);
    sub_23F6B4EC0(v29, v30, &qword_256EA2950);
    ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v24, v27, v25);
    sub_23F6B4EC0(v30, v26, &qword_256EA2950);
    sub_23FB2E390();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v72, v24, v25);
    sub_23F6B4F58(v26, v73, &qword_256EA2950);
    v32 = sub_23FB2E7E0();
    v33 = sub_23FB2F5E4();
    if (os_log_type_enabled(v32, v33))
    {
      log = v32;
      v34 = *(_QWORD *)(v0 + 152);
      v35 = *(_QWORD *)(v0 + 136);
      v37 = *(_QWORD *)(v0 + 112);
      v36 = *(_QWORD *)(v0 + 120);
      v38 = swift_slowAlloc();
      v74[0] = swift_slowAlloc();
      *(_DWORD *)v38 = 134218498;
      *(_QWORD *)(v38 + 4) = v69;
      *(_WORD *)(v38 + 12) = 2080;
      v39 = sub_23FB2DB44();
      *(_QWORD *)(v38 + 14) = sub_23F69334C(v39, v40, v74);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v34, v35);
      *(_WORD *)(v38 + 22) = 2080;
      sub_23F6B4F58(v36, v37, &qword_256EA2950);
      v41 = sub_23FB2ED38();
      v42 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v37, 1, v41);
      v43 = *(_QWORD *)(v0 + 112);
      if (v42 == 1)
      {
        sub_23F6B6884(*(_QWORD *)(v0 + 112));
        v44 = 0xE700000000000000;
        v45 = 0x6E776F6E6B6E75;
      }
      else
      {
        sub_23FB2ECF0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v43, v41);
        v45 = sub_23FB2EDB0();
        v44 = v55;
        sub_23F79517C(v60);
      }
      v56 = *(_QWORD *)(v0 + 120);
      *(_QWORD *)(v38 + 24) = sub_23F69334C(v45, v44, v74);
      swift_bridgeObjectRelease();
      sub_23F6B6884(v56);
      _os_log_impl(&dword_23F68F000, log, v33, "[SiriEntityMatcherShim] Span match [%ld]: %s \nWith entity type: %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      sub_23F693DD0();
    }
    v46 = v32;
    v47 = *(_QWORD *)(v0 + 152);
    v48 = *(_QWORD *)(v0 + 160);
    v50 = *(_QWORD *)(v0 + 128);
    v49 = *(_QWORD *)(v0 + 136);
    v51 = *(_QWORD *)(v0 + 120);
    v52 = *(_QWORD *)(v0 + 80);
    v53 = *(_QWORD *)(v0 + 64);

    sub_23F6B6884(v51);
    v54 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v54(v47, v49);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v52, v53);
    sub_23F6B6884(v50);
    result = ((uint64_t (*)(uint64_t, uint64_t))v54)(v48, v49);
    v4 = v66;
    v12 = v64;
    v14 = v71;
  }
  __break(1u);
  return result;
}

uint64_t sub_23F791D74@<X0>(void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD v27[2];
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v28 = a4;
  v8 = sub_23F6916B8(&qword_256EA2910);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v27 - v13;
  result = (uint64_t)sub_23F792130(*a1, a2, a3);
  if (!v4)
  {
    v29 = v9;
    v30 = v8;
    v33 = v12;
    v16 = MEMORY[0x24BEE4AF8];
    v34 = MEMORY[0x24BEE4AF8];
    v32 = *(_QWORD *)(result + 16);
    if (v32)
    {
      v27[1] = 0;
      v17 = 0;
      v18 = v29;
      v19 = v30;
      v31 = result;
      while (v17 < *(_QWORD *)(result + 16))
      {
        v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
        v21 = *(_QWORD *)(v18 + 72);
        sub_23F6B4F58(result + v20 + v21 * v17, (uint64_t)v14, &qword_256EA2910);
        v22 = (uint64_t)&v14[*(int *)(v19 + 48)];
        v23 = sub_23FB2ED38();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v22, 1, v23) == 1)
        {
          sub_23F6B4F84((uint64_t)v14, &qword_256EA2910);
        }
        else
        {
          sub_23F6B4EC0((uint64_t)v14, (uint64_t)v33, &qword_256EA2910);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_23F712400();
          v24 = v34;
          v25 = *(_QWORD *)(v34 + 16);
          if (v25 >= *(_QWORD *)(v34 + 24) >> 1)
          {
            sub_23F712400();
            v24 = v34;
          }
          *(_QWORD *)(v24 + 16) = v25 + 1;
          sub_23F6B4EC0((uint64_t)v33, v24 + v20 + v25 * v21, &qword_256EA2910);
          v18 = v29;
          v19 = v30;
        }
        ++v17;
        result = v31;
        if (v32 == v17)
        {
          v16 = v34;
          v26 = v28;
          goto LABEL_15;
        }
      }
      __break(1u);
    }
    else
    {
      v26 = v28;
LABEL_15:
      result = swift_bridgeObjectRelease();
      *v26 = v16;
    }
  }
  return result;
}

uint64_t sub_23F791FA8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_13;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; v7 = sub_23FB2F974())
  {
    v8 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x242674478](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v16 = v9;
      sub_23F791D74(&v16, a3, a4, &v15);
      if (v4)
      {
        swift_bridgeObjectRelease();

        v12 = v17;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return v12;
      }

      sub_23F6B9988();
      ++v8;
      if (v11 == v7)
      {
        swift_release();
        swift_bridgeObjectRelease();
        v12 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  v12 = MEMORY[0x24BEE4AF8];
LABEL_15:
  swift_bridgeObjectRelease();
  return v12;
}

id sub_23F792130(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id result;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = sub_23FB2DD60();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v43 = v8;
  sub_23F6916B8((uint64_t *)&unk_256EA8FA0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B631C();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v33 - v14;
  v40 = a1;
  v16 = objc_msgSend(a1, sel_spanInfo);
  result = objc_msgSend(v16, sel_spanRange);
  if (!__OFADD__(result, v18))
  {
    v38 = v7;
    v39 = v6;
    v41 = a2;
    v42 = a3;
    sub_23F731C2C();
    swift_bridgeObjectRetain();
    v35 = sub_23F79519C();
    v36 = a2;
    v41 = a2;
    v42 = a3;
    swift_bridgeObjectRetain();
    v19 = sub_23F79519C();
    v20 = (unsigned __int16)sub_23F7951BC(v19, sel_aliasMatchOptions);
    v21 = sub_23F7924A4(v20, (uint64_t)v15);
    v22 = sub_23F7951BC(v21, sel_maxTokenCount);
    sub_23F7951BC((uint64_t)v22, sel_matchedTokenCount);
    sub_23F6B4F58((uint64_t)v15, v12, (uint64_t *)&unk_256EA8FA0);
    sub_23FB2DD30();
    v23 = v40;
    v24 = objc_msgSend(v40, sel_entityInfo);
    objc_opt_self();
    v25 = (void *)swift_dynamicCastObjCClass();
    if (v25)
    {
      v26 = v25;
      v27 = sub_23F794BE8(v25);
      v28 = v38;
      if (v27)
      {
        v29 = v27;
        v34 = v15;
        v30 = v43;
        v33[1] = v33;
        MEMORY[0x24BDAC7A8](v27);
        v33[-10] = v26;
        v33[-9] = v23;
        v33[-8] = v35;
        v33[-7] = v19;
        v33[-6] = v36;
        v33[-5] = a3;
        v33[-4] = v16;
        v33[-3] = v30;
        v33[-2] = v37;
        a3 = sub_23F790C44((void (*)(id *))sub_23F794F3C, (uint64_t)&v33[-12], v29);
        sub_23F6B4F84((uint64_t)v34, (uint64_t *)&unk_256EA8FA0);

        sub_23F72DFBC();
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v39);
        swift_bridgeObjectRelease();
        return (id)a3;
      }
      sub_23FB2DE98();
      sub_23F6D3458(&qword_256EA8FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE578F0], MEMORY[0x24BE578F8]);
      sub_23F795168();
      sub_23F79518C(v32, *MEMORY[0x24BE578E0]);
      swift_willThrow();

      sub_23F72DFBC();
    }
    else
    {
      sub_23F72DFBC();
      sub_23FB2DE98();
      sub_23F6D3458(&qword_256EA8FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE578F0], MEMORY[0x24BE578F8]);
      sub_23F795168();
      sub_23F79518C(v31, *MEMORY[0x24BE578E8]);
      swift_willThrow();

      v28 = v38;
    }
    sub_23F6B4F84((uint64_t)v15, (uint64_t *)&unk_256EA8FA0);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v43, v39);
    return (id)a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_23F7924A4@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  void (*v16)(uint64_t, uint64_t);
  _DWORD v18[4];

  v4 = sub_23FB2DA60();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B631C();
  v8 = v6 - v7;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v18 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v18 - v13;
  v18[3] = 0;
  sub_23F6D3458(&qword_256EA9028, v15, MEMORY[0x24BE57128]);
  sub_23FB2FD28();
  switch(a1)
  {
    case 1:
      sub_23FB2DA0C();
      goto LABEL_6;
    case 2:
      sub_23FB2DA48();
      goto LABEL_6;
    case 4:
      sub_23FB2DA3C();
      goto LABEL_6;
    case 8:
      sub_23FB2DA30();
LABEL_6:
      sub_23FAC4508((uint64_t)v12, v8);
      v16 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16((uint64_t)v12, v4);
      break;
    default:
      break;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v14, v4);
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 0, 1, v4);
}

uint64_t sub_23F79262C@<X0>(id *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t *, uint64_t);
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v58 = a9;
  v49 = a8;
  v55 = a6;
  v56 = a7;
  v53 = a4;
  v54 = a5;
  v50 = sub_23FB2DE5C();
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23FB2DD60();
  v46 = *(_QWORD *)(v15 - 8);
  v47 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v51 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23F6916B8(&qword_256EA2950);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)((char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_23FB2ED38();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v57 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(*a1, sel_sourceItemIdentifier);
  v24 = sub_23FB2F140();
  v26 = v25;

  v44 = a3;
  v27 = objc_msgSend(a3, sel_spanValue);
  v28 = sub_23FB2F140();
  v30 = v29;

  v45 = v24;
  sub_23F6B79CC(v24, v26, v28, v30, v19);
  swift_bridgeObjectRelease();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v19, 1, v20) == 1)
  {
    swift_bridgeObjectRelease();
    sub_23F6B4F84((uint64_t)v19, &qword_256EA2950);
    v31 = sub_23F6916B8(&qword_256EA2910);
    v32 = v58;
    v33 = 1;
  }
  else
  {
    v43 = a11;
    v34 = *(void (**)(char *, uint64_t *, uint64_t))(v21 + 32);
    v34(v57, v19, v20);
    swift_bridgeObjectRetain();
    v35 = objc_msgSend(v44, sel_spanValue);
    v44 = (id)sub_23FB2F140();
    v42 = v36;

    objc_msgSend(v49, sel_matchScore);
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v51, a10, v47);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v52, v43 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType, v50);
    v37 = objc_msgSend(a2, sel_sourceIdentifierOrConstant);
    sub_23FB2F140();

    v38 = v58;
    sub_23FB2DB14();
    v39 = sub_23F6916B8(&qword_256EA2910);
    v40 = v38 + *(int *)(v39 + 48);
    v34((char *)v40, (uint64_t *)v57, v20);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v40, 0, 1, v20);
    v32 = v38;
    v33 = 0;
    v31 = v39;
  }
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v32, v33, 1, v31);
}

void sub_23F7929D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v63 = sub_23F6916B8(&qword_256EA2910);
  v2 = MEMORY[0x24BDAC7A8](v63);
  v61 = (uint64_t)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)v54 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v54 - v7;
  v9 = MEMORY[0x24BEE4B00];
  v67 = (_QWORD *)MEMORY[0x24BEE4B00];
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v6 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = a1 + v12;
    v14 = *(_QWORD *)(v6 + 72);
    v59 = v12;
    v56 = v11 | 7;
    v57 = v14 + v12;
    v54[1] = a1;
    swift_bridgeObjectRetain();
    v66 = (_QWORD *)MEMORY[0x24BEE4B00];
    v55 = xmmword_23FB47010;
    v60 = v8;
    v58 = v14;
    while (1)
    {
      v64 = v13;
      v65 = v10;
      sub_23F6B4F58(v13, (uint64_t)v8, &qword_256EA2910);
      v15 = v62;
      v16 = *(int *)(v63 + 48);
      v17 = (uint64_t)&v62[v16];
      v18 = (uint64_t)&v8[v16];
      v19 = sub_23FB2DBA4();
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v15, v8, v19);
      sub_23F6B4F58(v18, v17, &qword_256EA2950);
      v21 = sub_23FB2DB8C();
      v23 = v22;
      v24 = sub_23FB2DB80();
      v26 = v25;
      v27 = sub_23FB2DB74();
      v29 = v28;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
      *(_QWORD *)&v68 = v21;
      *((_QWORD *)&v68 + 1) = v23;
      *(_QWORD *)&v69 = v24;
      *((_QWORD *)&v69 + 1) = v26;
      *(_QWORD *)&v70 = v27;
      *((_QWORD *)&v70 + 1) = v29;
      sub_23F6B4F84(v17, &qword_256EA2950);
      v30 = v66;
      v32 = sub_23F78C860((uint64_t *)&v68);
      v33 = v30[2];
      v34 = (v31 & 1) == 0;
      v35 = v33 + v34;
      if (__OFADD__(v33, v34))
        break;
      v36 = v31;
      if (v30[3] < v35)
      {
        sub_23FB1F4A8(v35, 1);
        v30 = v67;
        v37 = sub_23F78C860((uint64_t *)&v68);
        if ((v36 & 1) != (v38 & 1))
          goto LABEL_20;
        v32 = v37;
      }
      v66 = v30;
      if ((v36 & 1) != 0)
      {
        sub_23F6B5908();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v39 = v30[7];
        v8 = v60;
        sub_23F7951A8((uint64_t)v60, v61);
        v40 = *(_QWORD *)(v39 + 8 * v32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v39 + 8 * v32) = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_23F7951B0();
          v40 = v52;
          *(_QWORD *)(v39 + 8 * v32) = v52;
        }
        v42 = v58;
        v43 = *(_QWORD *)(v40 + 16);
        if (v43 >= *(_QWORD *)(v40 + 24) >> 1)
        {
          sub_23F7951B0();
          v40 = v53;
          *(_QWORD *)(v39 + 8 * v32) = v53;
        }
        v45 = v64;
        v44 = v65;
        *(_QWORD *)(v40 + 16) = v43 + 1;
        sub_23F7951A8(v61, v40 + v59 + v43 * v42);
      }
      else
      {
        sub_23F6916B8(&qword_256EA2918);
        v46 = swift_allocObject();
        *(_OWORD *)(v46 + 16) = v55;
        v8 = v60;
        sub_23F7951A8((uint64_t)v60, v46 + v59);
        v30[(v32 >> 6) + 8] |= 1 << v32;
        v47 = (_OWORD *)(v30[6] + 48 * v32);
        v48 = v69;
        *v47 = v68;
        v47[1] = v48;
        v47[2] = v70;
        *(_QWORD *)(v30[7] + 8 * v32) = v46;
        v49 = v30[2];
        v50 = __OFADD__(v49, 1);
        v51 = v49 + 1;
        if (v50)
          goto LABEL_19;
        v30[2] = v51;
        v45 = v64;
        v44 = v65;
        v42 = v58;
      }
      v13 = v45 + v42;
      v10 = v44 - 1;
      if (!v10)
      {
        swift_bridgeObjectRelease();
        v9 = (uint64_t)v66;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    sub_23FB2FBD8();
    __break(1u);
  }
  else
  {
LABEL_17:
    sub_23F790960(v9);
    swift_release();
    sub_23F693DDC();
  }
}

void sub_23F792DA0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_23F6916B8(&qword_256EA2910);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)v34 - v8;
  v43 = sub_23FB2DBA4();
  v9 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v42 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23F6916B8(&qword_256EA8FB8);
  MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23F6916B8(&qword_256EA2950);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v37 = (uint64_t)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v36 = (uint64_t)v34 - v16;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v34[1] = a2;
    v44 = MEMORY[0x24BEE4AF8];
    sub_23F711F4C();
    v18 = *(unsigned __int8 *)(v5 + 80);
    v34[0] = a1;
    v19 = a1 + ((v18 + 32) & ~v18);
    v38 = *(_QWORD *)(v5 + 72);
    v39 = v4;
    v20 = v42;
    v21 = v43;
    v22 = (uint64_t)v40;
    do
    {
      sub_23F6B4F58(v19, v22, &qword_256EA2910);
      v23 = *(int *)(v4 + 48);
      v24 = v41;
      v25 = (uint64_t)&v41[v23];
      v26 = v22 + v23;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v41, v22, v21);
      sub_23F6B4F58(v26, v25, &qword_256EA2950);
      v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v27(v20, v24, v21);
      sub_23F6B4F84(v25, &qword_256EA2950);
      sub_23F6B4F84(v22, &qword_256EA2910);
      v28 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F711F4C();
        v28 = v44;
      }
      v29 = *(_QWORD *)(v28 + 16);
      if (v29 >= *(_QWORD *)(v28 + 24) >> 1)
      {
        sub_23F711F4C();
        v28 = v44;
      }
      *(_QWORD *)(v28 + 16) = v29 + 1;
      v20 = v42;
      v21 = v43;
      v27((char *)(v28+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v29), v42, v43);
      v44 = v28;
      v4 = v39;
      v19 += v38;
      --v17;
    }
    while (v17);
  }
  v30 = (uint64_t)v35;
  sub_23F70E3C8();
  v31 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v30, 1, v4);
  v32 = v36;
  if (v31 == 1)
  {
    sub_23F6B4F84(v30, &qword_256EA8FB8);
    v33 = sub_23FB2ED38();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v32, 1, 1, v33);
  }
  else
  {
    sub_23F6B4EC0(v30 + *(int *)(v4 + 48), v36, &qword_256EA2950);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v30, v43);
  }
  sub_23F6B4F58(v32, v37, &qword_256EA2950);
  sub_23FB2DE68();
  sub_23F6B4F84(v32, &qword_256EA2950);
}

uint64_t sub_23F793150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v7 = a1;
  swift_bridgeObjectRetain();
  sub_23F79123C(&v7);
  v3 = v7;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount + 8) & 1) != 0)
    return v7;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount);
  if ((int64_t)v4 >= *(_QWORD *)(a1 + 16))
    return v7;
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v7 + 16) >= v4)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_23F6916B8(&qword_256EA2910) - 8) + 80);
    return sub_23F6B8C58(v3, v3 + ((v5 + 32) & ~v5), 0, (2 * v4) | 1);
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_23F793228()
{
  swift_bridgeObjectRetain();
  sub_23F6B5B48();
  sub_23F6B5908();
  swift_bridgeObjectRetain();
  sub_23F6B5B48();
  sub_23F6B5908();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F793294(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  BOOL v7;
  char v8;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_23FB2FB78(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = sub_23FB2FB78(), result = 0, (v8 & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5])
        return 1;
      else
        return sub_23FB2FB78();
    }
  }
  return result;
}

uint64_t sub_23F793330()
{
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  return sub_23FB2FC8C();
}

uint64_t sub_23F7933D8()
{
  return sub_23F793330();
}

uint64_t sub_23F793410()
{
  return sub_23F793228();
}

uint64_t sub_23F793448()
{
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  sub_23F693DFC();
  return sub_23FB2FC8C();
}

uint64_t sub_23F7934F0(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_23F793294(v7, v8) & 1;
}

void SiriEntityMatcherShim.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F6F52E4();
  sub_23F6B6454(v1);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher);

  sub_23F694CC8();
}

uint64_t SiriEntityMatcherShim.__deallocating_deinit()
{
  SiriEntityMatcherShim.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23F7935A4@<X0>(uint64_t a1@<X8>)
{
  return sub_23F791554(a1);
}

uint64_t sub_23F7935C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F730A30;
  return sub_23F791594(a1, a2);
}

void sub_23F793624(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  float v38;
  float v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  float v61;
  float v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  float v98;
  float v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  char v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  void (*v185)(char *, uint64_t, uint64_t);
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;

  v2 = v1;
  v192 = sub_23F6916B8(&qword_256EA2910);
  v4 = *(_QWORD *)(v192 - 8);
  v5 = MEMORY[0x24BDAC7A8](v192);
  v180 = (uint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v193 = (uint64_t)&v171 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v188 = (char *)&v171 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v187 = (char *)&v171 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v189 = (uint64_t)&v171 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v198 = (uint64_t)&v171 - v15;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = sub_23FB2FB30();
  if (v17 >= v16)
  {
    if (v16 < 0)
      goto LABEL_139;
    if (v16)
      sub_23F7942A8(0, v16, 1, (_QWORD *)a1);
    return;
  }
  v183 = v4;
  v174 = v17;
  v172 = sub_23F6F05B8(v16 / 2);
  v182 = v18;
  v173 = v16;
  if (v16 <= 0)
    goto LABEL_102;
  v19 = 0;
  v20 = (char *)MEMORY[0x24BEE4AF8];
  v21 = v16;
  v190 = (uint64_t *)a1;
  while (1)
  {
    v22 = v19;
    v23 = v19 + 1;
    v179 = v20;
    if (v19 + 1 < v21)
    {
      v175 = v2;
      v176 = *(_QWORD *)a1;
      v24 = v176;
      v25 = v21;
      v26 = *(char **)(v183 + 72);
      v195 = v26;
      v196 = v19 + 1;
      v27 = v176 + (_QWORD)v26 * v23;
      v28 = v198;
      sub_23F6B4F58(v27, v198, &qword_256EA2910);
      v194 = v25;
      sub_23F6B4F58(v24 + (_QWORD)v26 * v22, v189, &qword_256EA2910);
      v181 = v22;
      v29 = v192;
      v30 = *(int *)(v192 + 48);
      v31 = v187;
      v32 = (uint64_t)&v187[v30];
      v197 = &v187[v30];
      v33 = v28;
      v34 = v28 + v30;
      v35 = sub_23FB2DBA4();
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
      v37(v31, v33, v35);
      sub_23F6B4F58(v34, v32, &qword_256EA2950);
      sub_23FB2DB2C();
      v39 = v38;
      v40 = *(void (**)(char *, uint64_t))(v36 + 8);
      v40(v31, v35);
      v41 = *(int *)(v29 + 48);
      v42 = v188;
      v43 = v189;
      v44 = (uint64_t)&v188[v41];
      v45 = v189 + v41;
      v185 = v37;
      v37(v188, v189, v35);
      sub_23F6B4F58(v45, v44, &qword_256EA2950);
      sub_23FB2DB2C();
      v47 = v46;
      v48 = v42;
      v22 = v181;
      v186 = v35;
      v49 = v35;
      v50 = v195;
      v184 = (char *)v40;
      v40(v48, v49);
      sub_23F6B4F84(v44, &qword_256EA2950);
      sub_23F6B4F84((uint64_t)v197, &qword_256EA2950);
      v21 = v194;
      sub_23F6B4F84(v43, &qword_256EA2910);
      sub_23F6B4F84(v198, &qword_256EA2910);
      v23 = v22 + 2;
      if (v22 + 2 < v21)
      {
        v178 = (_QWORD)v50 * v196;
        v51 = v176;
        v177 = (_QWORD)v50 * v23;
        while (1)
        {
          v191 = v23;
          LODWORD(v197) = v47 < v39;
          v52 = v198;
          sub_23F6B4F58(v51 + v177, v198, &qword_256EA2910);
          v53 = v189;
          sub_23F6B4F58(v51 + v178, v189, &qword_256EA2910);
          v54 = v192;
          v55 = *(int *)(v192 + 48);
          v57 = v186;
          v56 = v187;
          v58 = (uint64_t)&v187[v55];
          v196 = (uint64_t)&v187[v55];
          v59 = v52 + v55;
          v60 = v185;
          v185(v187, v52, v186);
          sub_23F6B4F58(v59, v58, &qword_256EA2950);
          sub_23FB2DB2C();
          v62 = v61;
          v63 = (void (*)(char *, uint64_t))v184;
          ((void (*)(char *, uint64_t))v184)(v56, v57);
          v64 = *(int *)(v54 + 48);
          v65 = v188;
          v66 = (uint64_t)&v188[v64];
          v67 = v53 + v64;
          v60(v188, v53, v57);
          sub_23F6B4F58(v67, v66, &qword_256EA2950);
          sub_23FB2DB2C();
          v69 = v68;
          v63(v65, v57);
          sub_23F6B4F84(v66, &qword_256EA2950);
          sub_23F6B4F84(v196, &qword_256EA2950);
          sub_23F6B4F84(v53, &qword_256EA2910);
          sub_23F6B4F84(v52, &qword_256EA2910);
          if ((_DWORD)v197 == v69 >= v62)
            break;
          v23 = v191 + 1;
          v21 = v194;
          v50 = v195;
          v51 += (uint64_t)v195;
          if (v191 + 1 >= v194)
          {
            v23 = v194;
            a1 = (unint64_t)v190;
            v22 = v181;
            goto LABEL_11;
          }
        }
        a1 = (unint64_t)v190;
        v23 = v191;
        v22 = v181;
        v21 = v194;
        v50 = v195;
      }
LABEL_11:
      v2 = v175;
      if (v47 < v39)
      {
        if (v23 < v22)
          goto LABEL_140;
        if (v22 < v23)
        {
          v70 = 0;
          v71 = (_QWORD)v50 * (v23 - 1);
          v72 = v22;
          v73 = v23 * (_QWORD)v50;
          v74 = v72;
          v75 = v72 * (_QWORD)v50;
          do
          {
            if (v74 != v23 + v70 - 1)
            {
              v76 = v23;
              v77 = v176;
              if (!v176)
                goto LABEL_146;
              v78 = v176 + v75;
              sub_23F6B4EC0(v176 + v75, v180, &qword_256EA2910);
              if (v75 < v71 || v78 >= v77 + v73)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v75 != v71)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_23F6B4EC0(v180, v77 + v71, &qword_256EA2910);
              v23 = v76;
              v50 = v195;
            }
            ++v74;
            --v70;
            v71 -= (uint64_t)v50;
            v73 -= (uint64_t)v50;
            v75 += (uint64_t)v50;
          }
          while (v74 < v23 + v70);
          v2 = v175;
          a1 = (unint64_t)v190;
          v22 = v181;
          v21 = v194;
        }
      }
    }
    if (v23 < v21)
    {
      if (__OFSUB__(v23, v22))
        goto LABEL_138;
      if (v23 - v22 < v174)
      {
        if (__OFADD__(v22, v174))
          goto LABEL_141;
        if (v22 + v174 >= v21)
          v80 = v21;
        else
          v80 = v22 + v174;
        if (v80 < v22)
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (v23 != v80)
        {
          v181 = v22;
          v175 = v2;
          v81 = *(char **)(v183 + 72);
          v82 = (_QWORD)v81 * (v23 - 1);
          v184 = v81;
          v83 = v23 * (_QWORD)v81;
          v178 = v80;
          do
          {
            v84 = 0;
            v85 = v181;
            v191 = v23;
            v185 = (void (*)(char *, uint64_t, uint64_t))v83;
            v186 = v82;
            while (1)
            {
              v196 = v85;
              v86 = *(_QWORD *)a1;
              v195 = (char *)(v83 + v84);
              v87 = v83 + v84 + v86;
              v88 = v198;
              sub_23F6B4F58(v87, v198, &qword_256EA2910);
              v194 = v82 + v84;
              v89 = v189;
              sub_23F6B4F58(v82 + v84 + v86, v189, &qword_256EA2910);
              v90 = v192;
              v91 = *(int *)(v192 + 48);
              v92 = v187;
              v197 = &v187[v91];
              v93 = v88 + v91;
              v94 = sub_23FB2DBA4();
              v95 = *(_QWORD *)(v94 - 8);
              v96 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
              v96(v92, v88, v94);
              v97 = (uint64_t)v197;
              sub_23F6B4F58(v93, (uint64_t)v197, &qword_256EA2950);
              sub_23FB2DB2C();
              v99 = v98;
              v100 = *(void (**)(char *, uint64_t))(v95 + 8);
              v100(v92, v94);
              v101 = *(int *)(v90 + 48);
              v102 = v188;
              v103 = (uint64_t)&v188[v101];
              v104 = v89 + v101;
              v96(v188, v89, v94);
              sub_23F6B4F58(v104, v103, &qword_256EA2950);
              sub_23FB2DB2C();
              v106 = v105;
              v100(v102, v94);
              sub_23F6B4F84(v103, &qword_256EA2950);
              sub_23F6B4F84(v97, &qword_256EA2950);
              sub_23F6B4F84(v89, &qword_256EA2910);
              sub_23F6B4F84(v198, &qword_256EA2910);
              if (v106 >= v99)
                break;
              a1 = (unint64_t)v190;
              v107 = *v190;
              if (!*v190)
                goto LABEL_144;
              v83 = (uint64_t)v185;
              v82 = v186;
              v108 = v107 + v186 + v84;
              sub_23F6B4EC0((uint64_t)v185 + v107 + v84, v193, &qword_256EA2910);
              swift_arrayInitWithTakeFrontToBack();
              sub_23F6B4EC0(v193, v108, &qword_256EA2910);
              v84 -= (uint64_t)v184;
              v85 = v196 + 1;
              v109 = v191;
              if (v191 == v196 + 1)
                goto LABEL_44;
            }
            a1 = (unint64_t)v190;
            v109 = v191;
            v83 = (uint64_t)v185;
            v82 = v186;
LABEL_44:
            v23 = v109 + 1;
            v82 += (uint64_t)v184;
            v83 += (uint64_t)v184;
          }
          while (v23 != v178);
          v23 = v178;
          v2 = v175;
          v22 = v181;
        }
      }
    }
    if (v23 < v22)
      goto LABEL_137;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v191 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v20 = v179;
    }
    else
    {
      sub_23F7DB74C(0, *((_QWORD *)v179 + 2) + 1, 1, v179);
      v20 = v161;
    }
    v112 = *((_QWORD *)v20 + 2);
    v111 = *((_QWORD *)v20 + 3);
    v113 = v112 + 1;
    if (v112 >= v111 >> 1)
    {
      sub_23F7DB74C(v111 > 1, v112 + 1, 1, v20);
      v20 = v162;
    }
    *((_QWORD *)v20 + 2) = v113;
    v114 = v20 + 32;
    v115 = &v20[16 * v112 + 32];
    v116 = v191;
    *(_QWORD *)v115 = v22;
    *((_QWORD *)v115 + 1) = v116;
    if (v112)
      break;
    v113 = 1;
LABEL_94:
    a1 = (unint64_t)v190;
    v19 = v191;
    v21 = v190[1];
    if (v191 >= v21)
      goto LABEL_103;
  }
  while (1)
  {
    a1 = v113 - 1;
    if (v113 >= 4)
    {
      v121 = &v114[16 * v113];
      v122 = *((_QWORD *)v121 - 8);
      v123 = *((_QWORD *)v121 - 7);
      v127 = __OFSUB__(v123, v122);
      v124 = v123 - v122;
      if (v127)
        goto LABEL_122;
      v126 = *((_QWORD *)v121 - 6);
      v125 = *((_QWORD *)v121 - 5);
      v127 = __OFSUB__(v125, v126);
      v119 = v125 - v126;
      v120 = v127;
      if (v127)
        goto LABEL_123;
      v128 = (_QWORD *)(v113 - 2);
      v129 = &v114[16 * v113 - 32];
      v131 = *(_QWORD *)v129;
      v130 = *((_QWORD *)v129 + 1);
      v127 = __OFSUB__(v130, v131);
      v132 = v130 - v131;
      if (v127)
        goto LABEL_124;
      v127 = __OFADD__(v119, v132);
      v133 = v119 + v132;
      if (v127)
        goto LABEL_126;
      if (v133 >= v124)
      {
        v151 = &v114[16 * a1];
        v153 = *(_QWORD *)v151;
        v152 = *((_QWORD *)v151 + 1);
        v127 = __OFSUB__(v152, v153);
        v154 = v152 - v153;
        if (v127)
          goto LABEL_132;
        v144 = v119 < v154;
        goto LABEL_83;
      }
    }
    else
    {
      if (v113 != 3)
      {
        v145 = *((_QWORD *)v20 + 4);
        v146 = *((_QWORD *)v20 + 5);
        v127 = __OFSUB__(v146, v145);
        v138 = v146 - v145;
        v139 = v127;
        goto LABEL_77;
      }
      v118 = *((_QWORD *)v20 + 4);
      v117 = *((_QWORD *)v20 + 5);
      v127 = __OFSUB__(v117, v118);
      v119 = v117 - v118;
      v120 = v127;
    }
    if ((v120 & 1) != 0)
      goto LABEL_125;
    v128 = (_QWORD *)(v113 - 2);
    v134 = &v114[16 * v113 - 32];
    v136 = *(_QWORD *)v134;
    v135 = *((_QWORD *)v134 + 1);
    v137 = __OFSUB__(v135, v136);
    v138 = v135 - v136;
    v139 = v137;
    if (v137)
      goto LABEL_127;
    v140 = &v114[16 * a1];
    v142 = *(_QWORD *)v140;
    v141 = *((_QWORD *)v140 + 1);
    v127 = __OFSUB__(v141, v142);
    v143 = v141 - v142;
    if (v127)
      goto LABEL_129;
    if (__OFADD__(v138, v143))
      goto LABEL_131;
    if (v138 + v143 >= v119)
    {
      v144 = v119 < v143;
LABEL_83:
      if (v144)
        a1 = (unint64_t)v128;
      goto LABEL_85;
    }
LABEL_77:
    if ((v139 & 1) != 0)
      goto LABEL_128;
    v147 = &v114[16 * a1];
    v149 = *(_QWORD *)v147;
    v148 = *((_QWORD *)v147 + 1);
    v127 = __OFSUB__(v148, v149);
    v150 = v148 - v149;
    if (v127)
      goto LABEL_130;
    if (v150 < v138)
      goto LABEL_94;
LABEL_85:
    v155 = a1 - 1;
    if (a1 - 1 >= v113)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!*v190)
      goto LABEL_145;
    v156 = &v114[16 * v155];
    v157 = *(_QWORD *)v156;
    v158 = &v114[16 * a1];
    v159 = *((_QWORD *)v158 + 1);
    sub_23F7945F0(*v190 + *(_QWORD *)(v183 + 72) * *(_QWORD *)v156, *v190 + *(_QWORD *)(v183 + 72) * *(_QWORD *)v158, *v190 + *(_QWORD *)(v183 + 72) * v159, v182);
    if (v2)
      break;
    if (v159 < v157)
      goto LABEL_119;
    if (a1 > *((_QWORD *)v20 + 2))
      goto LABEL_120;
    *(_QWORD *)v156 = v157;
    *(_QWORD *)&v114[16 * v155 + 8] = v159;
    v160 = *((_QWORD *)v20 + 2);
    if (a1 >= v160)
      goto LABEL_121;
    v113 = v160 - 1;
    memmove(&v114[16 * a1], v158 + 16, 16 * (v160 - 1 - a1));
    *((_QWORD *)v20 + 2) = v160 - 1;
    if (v160 <= 2)
      goto LABEL_94;
  }
LABEL_100:
  swift_bridgeObjectRelease();
  if (v173 >= -1)
    goto LABEL_115;
  __break(1u);
LABEL_102:
  v20 = (char *)MEMORY[0x24BEE4AF8];
  v113 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_103:
  if (v113 >= 2)
  {
    v163 = *(_QWORD *)a1;
    while (1)
    {
      v164 = v113 - 2;
      if (v113 < 2)
        break;
      if (!v163)
        goto LABEL_147;
      v165 = v2;
      a1 = (unint64_t)v20;
      v166 = *(_QWORD *)&v20[16 * v164 + 32];
      v167 = *(_QWORD *)&v20[16 * v113 + 24];
      sub_23F7945F0(v163 + *(_QWORD *)(v183 + 72) * v166, v163 + *(_QWORD *)(v183 + 72) * *(_QWORD *)&v20[16 * v113 + 16], v163 + *(_QWORD *)(v183 + 72) * v167, v182);
      if (v165)
      {
        v2 = v165;
        goto LABEL_100;
      }
      if (v167 < v166)
        goto LABEL_134;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7DB834();
        a1 = (unint64_t)v170;
      }
      if (v164 >= *(_QWORD *)(a1 + 16))
        goto LABEL_135;
      v168 = (_QWORD *)(a1 + 32 + 16 * v164);
      *v168 = v166;
      v168[1] = v167;
      v169 = *(_QWORD *)(a1 + 16);
      if (v113 > v169)
        goto LABEL_136;
      v20 = (char *)a1;
      memmove((void *)(a1 + 32 + 16 * (v113 - 1)), (const void *)(a1 + 32 + 16 * v113), 16 * (v169 - v113));
      *(_QWORD *)(a1 + 16) = v169 - 1;
      v113 = v169 - 1;
      v2 = 0;
      if (v169 <= 2)
        goto LABEL_114;
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
LABEL_114:
  swift_bridgeObjectRelease();
  if (v173 >= -1)
  {
LABEL_115:
    *(_QWORD *)(v172 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
}

void sub_23F7942A8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  float v31;
  float v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;

  v46 = a1;
  v55 = sub_23F6916B8(&qword_256EA2910);
  v7 = MEMORY[0x24BDAC7A8](v55);
  v56 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v44 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v49 = (char *)&v44 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v48 = (uint64_t)&v44 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v62 = (uint64_t)&v44 - v16;
  v54 = a3;
  v45 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v18 = v17 * (v54 - 1);
    v51 = v17;
    v19 = v17 * v54;
    v47 = a4;
    while (2)
    {
      v20 = 0;
      v59 = v46;
      v52 = v19;
      v53 = v18;
      do
      {
        v21 = *a4;
        v58 = v19 + v20;
        v22 = v62;
        sub_23F6B4F58(v19 + v20 + v21, v62, &qword_256EA2910);
        v57 = v18 + v20;
        v23 = v48;
        sub_23F6B4F58(v18 + v20 + v21, v48, &qword_256EA2910);
        v24 = v55;
        v25 = *(int *)(v55 + 48);
        v26 = v49;
        v27 = (uint64_t)&v49[v25];
        v60 = v22 + v25;
        v61 = &v49[v25];
        v28 = sub_23FB2DBA4();
        v29 = *(_QWORD *)(v28 - 8);
        v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
        v30(v26, v22, v28);
        sub_23F6B4F58(v60, v27, &qword_256EA2950);
        sub_23FB2DB2C();
        v32 = v31;
        v33 = *(void (**)(char *, uint64_t))(v29 + 8);
        v33(v26, v28);
        v34 = *(int *)(v24 + 48);
        v35 = v50;
        v36 = (uint64_t)&v50[v34];
        v37 = v23 + v34;
        v30(v50, v23, v28);
        v19 = v52;
        sub_23F6B4F58(v37, v36, &qword_256EA2950);
        sub_23FB2DB2C();
        v39 = v38;
        v40 = v35;
        v18 = v53;
        v33(v40, v28);
        v41 = v36;
        a4 = v47;
        sub_23F6B4F84(v41, &qword_256EA2950);
        sub_23F6B4F84((uint64_t)v61, &qword_256EA2950);
        sub_23F6B4F84(v23, &qword_256EA2910);
        sub_23F6B4F84(v62, &qword_256EA2910);
        if (v39 >= v32)
          break;
        v42 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v43 = v42 + v18 + v20;
        sub_23F6B4EC0(v42 + v19 + v20, v56, &qword_256EA2910);
        swift_arrayInitWithTakeFrontToBack();
        sub_23F6B4EC0(v56, v43, &qword_256EA2910);
        v20 -= v51;
        ++v59;
      }
      while (v54 != v59);
      v18 += v51;
      v19 += v51;
      if (++v54 != v45)
        continue;
      break;
    }
  }
}

void sub_23F7945F0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  float v35;
  float v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unint64_t v44;
  unint64_t v46;
  unint64_t v48;
  int64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  float v64;
  float v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  float v72;
  unint64_t v73;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;

  v94 = sub_23F6916B8(&qword_256EA2910);
  v8 = MEMORY[0x24BDAC7A8](v94);
  v89 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v88 = (char *)&v79 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v87 = (uint64_t)&v79 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v86 = (uint64_t)&v79 - v14;
  v16 = *(_QWORD *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v17 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_78;
  v19 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
    goto LABEL_79;
  v21 = v17 / v16;
  v22 = v19 / v16;
  if (v17 / v16 >= v19 / v16)
  {
    sub_23F755290(a2, v19 / v16);
    v23 = a4 + v22 * v16;
    if (v22 * v16 < 1 || a1 >= a2)
      goto LABEL_46;
    v80 = -v16;
    v91 = a1;
    v92 = a4;
    v85 = v16;
    while (1)
    {
      v95 = a2;
      v90 = v23;
      v53 = v80;
      v93 = a3 + v80;
      v82 = v23 + v80;
      v83 = a3;
      v54 = v86;
      sub_23F6B4F58(v23 + v80, v86, &qword_256EA2910);
      v81 = a2 + v53;
      v55 = v87;
      sub_23F6B4F58(a2 + v53, v87, &qword_256EA2910);
      v56 = v94;
      v57 = *(int *)(v94 + 48);
      v58 = v88;
      v59 = (uint64_t)&v88[v57];
      v84 = &v88[v57];
      v60 = v54 + v57;
      v61 = sub_23FB2DBA4();
      v62 = *(_QWORD *)(v61 - 8);
      v63 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      v63(v58, v54, v61);
      sub_23F6B4F58(v60, v59, &qword_256EA2950);
      sub_23FB2DB2C();
      v65 = v64;
      v66 = *(void (**)(char *, uint64_t))(v62 + 8);
      v66(v58, v61);
      v67 = *(int *)(v56 + 48);
      v68 = v89;
      v69 = (uint64_t)&v89[v67];
      v70 = v55 + v67;
      v63(v89, v55, v61);
      sub_23F6B4F58(v70, v69, &qword_256EA2950);
      sub_23FB2DB2C();
      v72 = v71;
      v66(v68, v61);
      sub_23F6B4F84(v69, &qword_256EA2950);
      sub_23F6B4F84((uint64_t)v84, &qword_256EA2950);
      sub_23F6B4F84(v55, &qword_256EA2910);
      sub_23F6B4F84(v54, &qword_256EA2910);
      if (v72 < v65)
        break;
      a3 = v93;
      v76 = v83 < v90 || v93 >= v90;
      a2 = v95;
      if (!v76)
      {
        v75 = v91;
        a4 = v92;
        v16 = v85;
        if (v83 == v90)
        {
          v23 = v82;
          goto LABEL_71;
        }
        v73 = v82;
LABEL_68:
        swift_arrayInitWithTakeBackToFront();
        goto LABEL_70;
      }
      v77 = v82;
      swift_arrayInitWithTakeFrontToBack();
      v23 = v77;
      v75 = v91;
      a4 = v92;
      v16 = v85;
LABEL_71:
      if (v23 <= a4 || a2 <= v75)
        goto LABEL_46;
    }
    v73 = v90;
    a3 = v93;
    if (v83 < v95 || v93 >= v95)
    {
      a2 = v81;
      swift_arrayInitWithTakeFrontToBack();
      v75 = v91;
      a4 = v92;
      v16 = v85;
    }
    else
    {
      v75 = v91;
      a4 = v92;
      v16 = v85;
      if (v83 != v95)
      {
        a2 = v81;
        goto LABEL_68;
      }
      a2 = v81;
    }
LABEL_70:
    v23 = v73;
    goto LABEL_71;
  }
  sub_23F755290(a1, v17 / v16);
  v23 = a4 + v21 * v16;
  if (v21 * v16 >= 1 && a2 < a3)
  {
    v93 = a3;
    v85 = v16;
    v90 = a4 + v21 * v16;
    v25 = v86;
    do
    {
      v91 = a1;
      v92 = a4;
      v95 = a2;
      sub_23F6B4F58(a2, v25, &qword_256EA2910);
      v26 = v87;
      sub_23F6B4F58(a4, v87, &qword_256EA2910);
      v27 = v94;
      v28 = *(int *)(v94 + 48);
      v29 = v88;
      v30 = (uint64_t)&v88[v28];
      v84 = &v88[v28];
      v31 = v25 + v28;
      v32 = sub_23FB2DBA4();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
      v34(v29, v25, v32);
      sub_23F6B4F58(v31, v30, &qword_256EA2950);
      sub_23FB2DB2C();
      v36 = v35;
      v37 = *(void (**)(char *, uint64_t))(v33 + 8);
      v37(v29, v32);
      v38 = *(int *)(v27 + 48);
      v39 = v89;
      v40 = (uint64_t)&v89[v38];
      v41 = v26 + v38;
      v34(v89, v26, v32);
      sub_23F6B4F58(v41, v40, &qword_256EA2950);
      sub_23FB2DB2C();
      v43 = v42;
      v37(v39, v32);
      sub_23F6B4F84(v40, &qword_256EA2950);
      sub_23F6B4F84((uint64_t)v84, &qword_256EA2950);
      sub_23F6B4F84(v26, &qword_256EA2910);
      sub_23F6B4F84(v25, &qword_256EA2910);
      if (v43 >= v36)
      {
        v46 = v95;
        v16 = v85;
        v44 = v91;
        a4 = v92 + v85;
        if (v91 >= v92 && v91 < a4)
        {
          v48 = v93;
          if (v91 != v92)
            swift_arrayInitWithTakeBackToFront();
          a2 = v46;
          goto LABEL_35;
        }
        swift_arrayInitWithTakeFrontToBack();
        a2 = v46;
      }
      else
      {
        v16 = v85;
        a2 = v95 + v85;
        v44 = v91;
        a4 = v92;
        if (v91 >= v95 && v91 < a2)
        {
          v48 = v93;
          if (v91 != v95)
            swift_arrayInitWithTakeBackToFront();
          goto LABEL_35;
        }
        swift_arrayInitWithTakeFrontToBack();
      }
      v48 = v93;
LABEL_35:
      v23 = v90;
      a1 = v44 + v16;
    }
    while (a4 < v90 && a2 < v48);
  }
LABEL_46:
  v51 = v23 - a4;
  if (v16 != -1 || v51 != 0x8000000000000000)
  {
    sub_23F755290(a4, v51 / v16);
    return;
  }
LABEL_80:
  __break(1u);
}

uint64_t sub_23F794BE8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_allMetaContent);
  if (!v1)
    return 0;
  v2 = v1;
  sub_23F6916B8(&qword_256EA9020);
  v3 = sub_23FB2F3BC();

  return v3;
}

uint64_t sub_23F794C48(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v14 = a2 & 1;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEntityMatcherShim();
  v18 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a7);
  v19 = sub_23F794D34(a1, v14, (uint64_t)v17, a4, a5, v18, a7, a8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a7);
  return v19;
}

uint64_t sub_23F794D34(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v15 = (uint64_t *)(a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher);
  v15[3] = a7;
  v15[4] = a8;
  v16 = sub_23F6F601C(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v16, a3, a7);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_tokenizer) = a4;
  v17 = a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount;
  *(_QWORD *)v17 = a1;
  *(_BYTE *)(v17 + 8) = a2 & 1;
  v18 = a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType;
  v19 = sub_23FB2DE5C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a5, v19);
  return a6;
}

uint64_t dispatch thunk of SpanMatcher.matchSpans(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_23F794E14()
{
  return type metadata accessor for SiriEntityMatcherShim();
}

uint64_t sub_23F794E1C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2DE5C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SiriEntityMatcherShim()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriEntityMatcherShim.__allocating_init(maxEntityCount:spanMatcher:tokenizer:matcherType:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 112))(a1, a2 & 1);
}

uint64_t dispatch thunk of SiriEntityMatcherShim.getMatcherType()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SiriEntityMatcherShim.matchEntitySpans(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 128) + *(_QWORD *)(*(_QWORD *)v2 + 128));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23F730BB8;
  return v8(a1, a2);
}

uint64_t sub_23F794F3C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23F79262C(a1, *(void **)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void **)(v2 + 64), a2, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_23F794F70(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SiriEntityMatcherShim.GroupingKey()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SiriEntityMatcherShim.GroupingKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SiriEntityMatcherShim.GroupingKey(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SiriEntityMatcherShim.GroupingKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SiriEntityMatcherShim.GroupingKey()
{
  return &type metadata for SiriEntityMatcherShim.GroupingKey;
}

unint64_t sub_23F795110()
{
  unint64_t result;

  result = qword_256EA9040;
  if (!qword_256EA9040)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5E43C, &type metadata for SiriEntityMatcherShim.GroupingKey);
    atomic_store(result, (unint64_t *)&qword_256EA9040);
  }
  return result;
}

uint64_t sub_23F79514C()
{
  return swift_task_alloc();
}

uint64_t sub_23F795160()
{
  return swift_task_alloc();
}

uint64_t sub_23F795168()
{
  return swift_allocError();
}

uint64_t sub_23F79517C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_23F79518C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(a1, a2, v2);
}

uint64_t sub_23F79519C()
{
  return sub_23FB2F20C();
}

void sub_23F7951A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_23F6B4EC0(a1, a2, v2);
}

void sub_23F7951B0()
{
  sub_23F753C30();
}

id sub_23F7951BC(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_23F7951C4(int a1)
{
  uint64_t result;

  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      result = sub_23FB2F140();
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void static SpanDynamicContext.current.getter(_OWORD *a1@<X8>)
{
  _QWORD __src[9];

  if (qword_256EA0AA8 != -1)
    swift_once();
  sub_23FB2FD40();
  if (__src[3] == 1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0u;
    a1[3] = 0u;
    *((_QWORD *)a1 + 8) = 0;
    *((_BYTE *)a1 + 8) = 1;
    *((_QWORD *)a1 + 2) = 0;
    *((_QWORD *)a1 + 3) = 0;
    sub_23F79540C((uint64_t)__src);
  }
  else
  {
    memcpy(a1, __src, 0x48uLL);
  }
  sub_23F6B5398();
}

void sub_23F7952FC()
{
  sub_23F6916B8(&qword_256EA9058);
  swift_allocObject();
  qword_256EA9050 = sub_23FB2FD34();
  sub_23F6B5398();
}

uint64_t static SpanDynamicContext.$taskLocalCurrent.getter()
{
  if (qword_256EA0AA8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static SpanDynamicContext.taskLocalCurrent.getter()
{
  if (qword_256EA0AA8 != -1)
    swift_once();
  return sub_23FB2FD40();
}

uint64_t SpanDynamicContext.init(spanId:participant:injectionContext:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = a1;
  *(_BYTE *)(a6 + 8) = a2 & 1;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  return sub_23F79544C(a5, a6 + 32);
}

uint64_t sub_23F79540C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA8BB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23F79544C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA8BB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SpanDynamicContext.spanId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SpanDynamicContext.participant.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpanDynamicContext.injectionContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23F785024(v1 + 32, a1);
}

uint64_t destroy for SpanDynamicContext(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 32);
  return result;
}

uint64_t initializeWithCopy for SpanDynamicContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2 + 32;
  v6 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 32, v5, v6);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v5 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for SpanDynamicContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[7];
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 56) = v5;
      *(_QWORD *)(a1 + 64) = a2[8];
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 32, (uint64_t)(a2 + 4));
      return a1;
    }
LABEL_7:
    v6 = *((_OWORD *)a2 + 2);
    v7 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    return a1;
  }
  if (!v5)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 32);
    goto LABEL_7;
  }
  sub_23F785324((uint64_t *)(a1 + 32), a2 + 4);
  return a1;
}

void *initializeWithTake for SpanDynamicContext(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for SpanDynamicContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpanDynamicContext(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpanDynamicContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanDynamicContext()
{
  return &type metadata for SpanDynamicContext;
}

uint64_t SpanID.init(_:)(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  char v9;
  unint64_t v10;
  unsigned __int8 v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unsigned __int8 v17;
  char v18;

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)sub_23FB2F83C();
      v2 = (unint64_t)sub_23F796600(v8, v6, 10);
      v3 = v9 & 1;
      goto LABEL_40;
    }
    if (result == 43)
    {
      if (v5)
      {
        if (v5 != 1)
        {
          sub_23F7972F4();
          while (1)
          {
            sub_23F74006C();
            if (!v13 && v12)
              break;
            if (!is_mul_ok(v2, v14))
              break;
            v12 = __CFADD__(10 * v2, v15);
            v2 = 10 * v2 + v15;
            if (v12)
              break;
            sub_23F7972B0();
            if (v13)
              goto LABEL_40;
          }
        }
        goto LABEL_39;
      }
    }
    else
    {
      if (result != 45)
      {
        if (v5)
        {
          v2 = 0;
          while (1)
          {
            sub_23F74006C();
            if (!v13 && v12)
              break;
            if (!is_mul_ok(v2, v16))
              break;
            v12 = __CFADD__(10 * v2, v17);
            v2 = 10 * v2 + v17;
            if (v12)
              break;
            sub_23F7972B0();
            if (v13)
              goto LABEL_40;
          }
        }
        goto LABEL_39;
      }
      if (v5)
      {
        if (v5 != 1)
        {
          sub_23F7972F4();
          while (1)
          {
            sub_23F74006C();
            if (!v13 && v12)
              break;
            if (!is_mul_ok(v2, v10))
              break;
            v12 = 10 * v2 >= v11;
            v2 = 10 * v2 - v11;
            if (!v12)
              break;
            sub_23F7972B0();
            if (v13)
              goto LABEL_40;
          }
        }
LABEL_39:
        v2 = 0;
        v3 = 1;
        goto LABEL_40;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v2 = (unint64_t)sub_23F796DA8(result, a2, 10);
  v3 = v18;
LABEL_40:
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    return 0;
  else
    return v2;
}

void SpanID.init(causingSpanId:for:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_23F79596C(a1, a2, a3);
}

void sub_23F79596C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_23F7972C8(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6BD134();
  v6 = sub_23FB2F008();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6BD134();
  sub_23FB2EFFC();
  sub_23FB2EFE4();
  sub_23F795F30(a2, a3);
  __asm { BR              X10 }
}

void sub_23F795A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23F796F78();
  sub_23F79727C(v4);
  sub_23F79727C(v4);
  sub_23FB2EFF0();
  sub_23FB2EFCC();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v2);
  sub_23F693DDC();
}

void SpanID.init<A>(tracingInteger:for:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;

  v8 = sub_23F7972C8(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6BD134();
  v9 = sub_23FB2F008();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6BD134();
  v12 = v11 - v10;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6BD134();
  v17 = v16 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16 - v15, a1, a4);
  sub_23FB2EFFC();
  v21 = v12;
  sub_23F795E98(v17, (uint64_t)sub_23F796E8C, (uint64_t)v20, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v18);
  sub_23F795F30(a2, a3);
  __asm { BR              X10 }
}

void sub_23F795D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  sub_23F796F78();
  sub_23F79727C(v6);
  sub_23F79727C(v6);
  sub_23FB2EFF0();
  sub_23FB2EFCC();
  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v8(v2, v0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 144) + 8))(v3, *(_QWORD *)(v7 - 136));
  v8(v5, v0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 160) + 8))(v4, *(_QWORD *)(v7 - 152));
  sub_23F693DDC();
}

uint64_t sub_23F795E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_23F795F30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_23F6916B8(&qword_256EA9098);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_23F79718C((uint64_t)v14);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_23FB2F83C();
      }
      if (v2)
        v4 = (char *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_QWORD *)v2;
    }
    v6 = MEMORY[0x242671010](v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      sub_23F7972E0();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_23FB2F284();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = MEMORY[0x242670FF8](v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_23F7968C4();
    __asm { BR              X12 }
  }
  sub_23F6F4E24(v14, (uint64_t)v17);
  sub_23F6ADC98(v17, v17[3]);
  sub_23FB2C1B8();
  sub_23F7972E0();
  v14[0] = v16;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_23F7963BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8;
  uint64_t v9;

  v2 = sub_23FB2F014();
  v8 = v2;
  v9 = sub_23F6F2930(&qword_256EA9088, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B58], MEMORY[0x24BDC6B48]);
  v3 = sub_23F6F601C(v7);
  v4 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v3, a1, v2);
  sub_23F6ADC98(v7, v8);
  sub_23FB2C1B8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v7);
  return v6;
}

_QWORD *sub_23F79649C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t SpanID.description.getter()
{
  sub_23F797084();
  return sub_23FB2F6F8();
}

_QWORD *sub_23F7964E4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_23F7964F4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_23F796500()
{
  sub_23F797150();
  return sub_23FB2F398();
}

uint64_t sub_23F79655C()
{
  sub_23F797150();
  return sub_23FB2F380();
}

void sub_23F7965A8()
{
  sub_23F7F6EAC();
}

void sub_23F7965B0()
{
  sub_23F7F7260();
}

void sub_23F7965B8()
{
  sub_23F7F7DBC();
}

uint64_t sub_23F7965C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;

  result = SpanID.init(_:)(a1, a2);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  return result;
}

BOOL sub_23F7965EC(uint64_t *a1, uint64_t *a2)
{
  return sub_23F6BE0E8(*a1, *a2);
}

uint64_t sub_23F7965F8()
{
  return SpanID.description.getter();
}

unsigned __int8 *sub_23F796600(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v17 = a2 - 1;
      if (a2 != 1)
      {
        v18 = a3 + 48;
        v19 = a3 + 55;
        v20 = a3 + 87;
        if (a3 > 10)
        {
          v18 = 58;
        }
        else
        {
          v20 = 97;
          v19 = 65;
        }
        if (result)
        {
          v9 = 0;
          v21 = result + 1;
          do
          {
            v22 = *v21;
            if (v22 < 0x30 || v22 >= v18)
            {
              if (v22 < 0x41 || v22 >= v19)
              {
                v13 = 0;
                if (v22 < 0x61 || v22 >= v20)
                  return (unsigned __int8 *)v13;
                v23 = -87;
              }
              else
              {
                v23 = -55;
              }
            }
            else
            {
              v23 = -48;
            }
            if (!is_mul_ok(v9, a3))
              return 0;
            v24 = v9 * a3;
            v25 = v22 + v23;
            v16 = __CFADD__(v24, v25);
            v9 = v24 + v25;
            if (v16)
              return 0;
            ++v21;
            --v17;
          }
          while (v17);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v26 = a3 + 48;
        v27 = a3 + 55;
        v28 = a3 + 87;
        if (a3 > 10)
        {
          v26 = 58;
        }
        else
        {
          v28 = 97;
          v27 = 65;
        }
        if (result)
        {
          v29 = 0;
          do
          {
            v30 = *result;
            if (v30 < 0x30 || v30 >= v26)
            {
              if (v30 < 0x41 || v30 >= v27)
              {
                v13 = 0;
                if (v30 < 0x61 || v30 >= v28)
                  return (unsigned __int8 *)v13;
                v31 = -87;
              }
              else
              {
                v31 = -55;
              }
            }
            else
            {
              v31 = -48;
            }
            if (!is_mul_ok(v29, a3))
              return 0;
            v32 = v29 * a3;
            v33 = v30 + v31;
            v16 = __CFADD__(v32, v33);
            v29 = v32 + v33;
            if (v16)
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)v29;
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            if (!is_mul_ok(v9, a3))
              return 0;
            v14 = v9 * a3;
            v15 = v11 + v12;
            v16 = v14 >= v15;
            v9 = v14 - v15;
            if (!v16)
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_23F79687C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_23F796C58((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_23F797258, (uint64_t)v5, a1, a2);
}

void sub_23F7968C4()
{
  __asm { BR              X11 }
}

_QWORD *sub_23F796924@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = sub_23F796D64((uint64_t)&v7, v3, v2, BYTE6(a1));
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_23F796B64@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = sub_23FB2C32C();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = MEMORY[0x242670FC8]();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = MEMORY[0x242670FE0]();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23F796BD8(uint64_t result)
{
  char v1;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_23FB2F7B8();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_23F796C58(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  if (a3)
  {
    v6 = a4 - a3;
    v7 = a3;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  result = a1(&v9, v7, v6);
  if (!v4)
    return (_QWORD *)v9;
  return result;
}

char *sub_23F796CB8(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_23FB2C188();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_23FB2C1A0();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_23FB2C194();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

_QWORD *sub_23F796D64(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  result = a2(&v6, a1, a1 + a4);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

unsigned __int8 *sub_23F796DA8(uint64_t a1, uint64_t a2, int64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_23FB2F2E4();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_23F7E4124();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_23FB2F83C();
  }
LABEL_7:
  v11 = sub_23F796600(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_23F796E8C()
{
  return sub_23FB2EFE4();
}

uint64_t sub_23F796EB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23FB2C188();
  if (!result || (result = sub_23FB2C1A0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23FB2C194();
      sub_23FB2F008();
      sub_23F6F2930(&qword_256EA9090, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_23FB2EFA8();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23F796F78()
{
  sub_23FB2F008();
  sub_23F6F2930(&qword_256EA9090, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  return sub_23FB2EFA8();
}

unint64_t sub_23F797084()
{
  unint64_t result;

  result = qword_256EA9060;
  if (!qword_256EA9060)
  {
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE45A0], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_256EA9060);
  }
  return result;
}

unint64_t sub_23F7970C4()
{
  unint64_t result;

  result = qword_256EA9068;
  if (!qword_256EA9068)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for SpanID, &type metadata for SpanID);
    atomic_store(result, (unint64_t *)&qword_256EA9068);
  }
  return result;
}

unint64_t sub_23F797104()
{
  unint64_t result;

  result = qword_256EA9070;
  if (!qword_256EA9070)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for SpanID, &type metadata for SpanID);
    atomic_store(result, (unint64_t *)&qword_256EA9070);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanID()
{
  return &type metadata for SpanID;
}

unint64_t sub_23F797150()
{
  unint64_t result;

  result = qword_256EA9078;
  if (!qword_256EA9078)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for SpanID, &type metadata for SpanID);
    atomic_store(result, (unint64_t *)&qword_256EA9078);
  }
  return result;
}

uint64_t sub_23F79718C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA90A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_23F7971CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_23F79687C(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

_QWORD *sub_23F797200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_23F7971CC(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_23F797218@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_23F796BD8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_23F797258@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23F797218(a1, a2);
}

uint64_t sub_23F79727C(uint64_t a1)
{
  unint64_t v1;

  return sub_23F6BC34C(a1, v1);
}

double sub_23F797284()
{
  uint64_t v0;
  __int16 v1;
  double result;

  v1 = *(_WORD *)(v0 - 148);
  result = *(double *)(v0 - 160);
  *(double *)(v0 - 136) = result;
  *(_DWORD *)(v0 - 128) = *(_DWORD *)(v0 - 152);
  *(_WORD *)(v0 - 124) = v1;
  return result;
}

void sub_23F7972A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23F7CB758(v2, v1, v0);
}

uint64_t sub_23F7972C0(uint64_t a1)
{
  unint64_t v1;

  return sub_23F6D1E20(a1, v1);
}

uint64_t sub_23F7972C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return sub_23FB2EFD8();
}

uint64_t sub_23F7972D4(uint64_t a1, uint64_t a2)
{
  return sub_23F796EB4(a1, a2);
}

uint64_t sub_23F7972E0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7972E8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23F6D1E64(v0, v1);
}

uint64_t Session.StatusUpdateEvent.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F72E034();
  v0 = sub_23F6B5994();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t Session.StatusUpdateEvent.id.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F72E034();
  v0 = sub_23F6F07FC();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t (*Session.StatusUpdateEvent.id.modify())()
{
  return nullsub_1;
}

uint64_t Session.StatusUpdateEvent.sessionId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7A011C();
  sub_23F72E034();
  v0 = sub_23F6B5994();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t type metadata accessor for Session.StatusUpdateEvent(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA92E0);
}

uint64_t Session.StatusUpdateEvent.sessionId.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7A0110();
  sub_23F72E034();
  v0 = sub_23F6F07FC();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t (*Session.StatusUpdateEvent.sessionId.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  sub_23F6F099C();
  return nullsub_1;
}

uint64_t Session.StatusUpdateEvent.queryEventId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *(int *)(sub_23F7A011C() + 24);
  return sub_23F797420(v2, v0);
}

uint64_t sub_23F797420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA2798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Session.StatusUpdateEvent.queryEventId.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *(int *)(sub_23F7A0110() + 24);
  return sub_23F787578(v0, v2);
}

uint64_t (*Session.StatusUpdateEvent.queryEventId.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.clientRequestId.getter()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  sub_23F7A00A0();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.clientRequestId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7A0090();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.clientRequestId.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.clientSessionId.getter()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  sub_23F7A00A0();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.clientSessionId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7A0090();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.clientSessionId.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.clientApplicationId.getter()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  sub_23F7A00A0();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.clientApplicationId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7A0090();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.clientApplicationId.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.clientGroupId.getter()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  sub_23F7A00A0();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.clientGroupId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7A0090();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.clientGroupId.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.timepoint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F7A011C();
  sub_23F72E068(v0 + *(int *)(v1 + 44), v2, (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.timepoint.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F7A0110();
  sub_23F7A0330(v1, v0 + *(int *)(v1 + 44), (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  sub_23F694CC8();
}

uint64_t (*Session.StatusUpdateEvent.timepoint.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.sender.getter()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  sub_23F7A00A0();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.sender.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7A0090();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.sender.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

uint64_t Session.StatusUpdateEvent.postingSpan.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Session.StatusUpdateEvent(0) + 52));
}

void Session.StatusUpdateEvent.postingSpan.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(type metadata accessor for Session.StatusUpdateEvent(0) + 52);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.postingSpan.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.payload.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F7A011C();
  sub_23F72E068(v0 + *(int *)(v1 + 56), v2, type metadata accessor for Session.StatusUpdateEvent.Payload);
  sub_23F694CC8();
}

uint64_t type metadata accessor for Session.StatusUpdateEvent.Payload(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA93B0);
}

void Session.StatusUpdateEvent.payload.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23F7A0110();
  sub_23F7A0330(v1, v0 + *(int *)(v1 + 56), type metadata accessor for Session.StatusUpdateEvent.Payload);
  sub_23F694CC8();
}

uint64_t (*Session.StatusUpdateEvent.payload.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent(0);
  return nullsub_1;
}

#error "23F797C90: call analysis failed (funcsize=242)"

void static Session.StatusUpdateEvent.Payload.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t updated;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;

  sub_23F6B50E8();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v29);
  v30 = sub_23F77E1CC();
  type metadata accessor for Session.StatusUpdateEvent.Payload(v30);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B631C();
  v34 = (_QWORD *)(v32 - v33);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&a9 - v36;
  sub_23F6916B8(&qword_256EA90A8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F7A0184();
  v40 = v20 + v39;
  sub_23F6F5920(v27, v20, type metadata accessor for Session.StatusUpdateEvent.Payload);
  sub_23F6F5920(v25, v40, type metadata accessor for Session.StatusUpdateEvent.Payload);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_23F6F5920(v20, (uint64_t)v37, type metadata accessor for Session.StatusUpdateEvent.Payload);
    v43 = sub_23F7A030C();
    if ((_DWORD)v43 != 1)
    {
      sub_23F714040(v43, type metadata accessor for Session.StatusUpdateEvent.Payload);
      goto LABEL_15;
    }
LABEL_13:
    sub_23F6B4F84(v20, &qword_256EA90A8);
    goto LABEL_15;
  }
  sub_23F70D594(v20, v41, type metadata accessor for Session.StatusUpdateEvent.Payload);
  if (sub_23F7A030C() != 1)
  {
    sub_23F6D3508((uint64_t)v34, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
    goto LABEL_13;
  }
  sub_23F6F594C(v40, (uint64_t)v21, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
  v42 = *v34 == *v21 && v34[1] == v21[1];
  if ((v42 || (sub_23F6B5280() & 1) != 0)
    && (static Session.StatusUpdateEvent.IntermediateQueryResult.Source.== infix(_:_:)((uint64_t)v34 + *(int *)(updated + 20)) & 1) != 0)
  {
    sub_23F695888();
  }
  sub_23F77DB60((uint64_t)v21);
  sub_23F77DB60((uint64_t)v34);
  sub_23F714040(v44, type metadata accessor for Session.StatusUpdateEvent.Payload);
LABEL_15:
  sub_23F693DDC();
}

uint64_t sub_23F797EA8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  char v15;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6576457972657571 && a2 == 0xEC0000006449746ELL;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x6552746E65696C63 && a2 == 0xEF64497473657571;
        if (v8 || (sub_23FB2FB78() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x6553746E65696C63 && a2 == 0xEF64496E6F697373;
          if (v9 || (sub_23FB2FB78() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0xD000000000000013 && a2 == 0x800000023FB330B0 || (sub_23FB2FB78() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v10 = a1 == 0x7247746E65696C63 && a2 == 0xED0000644970756FLL;
            if (v10 || (sub_23FB2FB78() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              v11 = a1 == 0x6E696F70656D6974 && a2 == 0xE900000000000074;
              if (v11 || (sub_23FB2FB78() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                v12 = a1 == 0x7265646E6573 && a2 == 0xE600000000000000;
                if (v12 || (sub_23FB2FB78() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  v13 = a1 == 0x53676E6974736F70 && a2 == 0xEB000000006E6170;
                  if (v13 || (sub_23FB2FB78() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000)
                  {
                    swift_bridgeObjectRelease();
                    return 10;
                  }
                  else
                  {
                    v15 = sub_23FB2FB78();
                    swift_bridgeObjectRelease();
                    if ((v15 & 1) != 0)
                      return 10;
                    else
                      return 11;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_23F79837C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F7983A4 + 4 * aF[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_23F7983A4()
{
  return 0x496E6F6973736573;
}

uint64_t sub_23F7983C0()
{
  return 0x6576457972657571;
}

uint64_t sub_23F7983E0()
{
  return 0x6552746E65696C63;
}

uint64_t sub_23F798404()
{
  return 0x6553746E65696C63;
}

unint64_t sub_23F798428()
{
  return 0xD000000000000013;
}

uint64_t sub_23F798444()
{
  return 0x7247746E65696C63;
}

uint64_t sub_23F798468()
{
  return 0x6E696F70656D6974;
}

uint64_t sub_23F798488()
{
  return 0x53676E6974736F70;
}

uint64_t sub_23F7984A8()
{
  return 0x64616F6C796170;
}

uint64_t sub_23F7984C0()
{
  return 0x7265646E6573;
}

uint64_t sub_23F7984D8()
{
  unsigned __int8 *v0;

  return sub_23F79837C(*v0);
}

uint64_t sub_23F7984E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F797EA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F798504()
{
  sub_23F79AD38();
  return sub_23FB2FD10();
}

uint64_t sub_23F79852C()
{
  sub_23F79AD38();
  return sub_23FB2FD1C();
}

void Session.StatusUpdateEvent.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *updated;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;

  sub_23F6B5220();
  sub_23F6916B8(&qword_256EA90B0);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F70D4B8();
  sub_23F79AD38();
  sub_23F6F33A0();
  LOBYTE(v9) = 0;
  sub_23FB2C4B8();
  sub_23F6D3458(&qword_256EA6620, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_23F70D78C();
  if (!v1)
  {
    updated = (int *)type metadata accessor for Session.StatusUpdateEvent(0);
    LOBYTE(v9) = 1;
    sub_23F70D78C();
    LOBYTE(v9) = 2;
    sub_23FB2FAD0();
    sub_23F7A02E4(updated[7]);
    LOBYTE(v9) = 3;
    sub_23F70D90C();
    sub_23F7A02E4(updated[8]);
    LOBYTE(v9) = 4;
    sub_23F70D90C();
    sub_23F7A02E4(updated[9]);
    LOBYTE(v9) = 5;
    sub_23F70D90C();
    sub_23F7A02E4(updated[10]);
    LOBYTE(v9) = 6;
    sub_23FB2FAAC();
    LOBYTE(v9) = 7;
    type metadata accessor for Timepoint();
    sub_23F6D3458(&qword_256EA90C0, (uint64_t (*)(uint64_t))type metadata accessor for Timepoint, (uint64_t)&protocol conformance descriptor for Timepoint);
    sub_23F7A02D0();
    sub_23F70D78C();
    v9 = *(_OWORD *)(v0 + updated[12]);
    sub_23F79AD74();
    sub_23F7A0140();
    v7 = (uint64_t *)(v0 + updated[13]);
    v8 = *v7;
    LOBYTE(v7) = *((_BYTE *)v7 + 8);
    *(_QWORD *)&v9 = v8;
    BYTE8(v9) = (_BYTE)v7;
    sub_23F79ADB0();
    sub_23F7A0140();
    LOBYTE(v9) = 10;
    sub_23F7A0208();
    sub_23F6D3458(&qword_256EA90D8, type metadata accessor for Session.StatusUpdateEvent.Payload, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.Payload);
    sub_23F7A02D0();
    sub_23F70D78C();
  }
  sub_23F6B56E0((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F6B5100();
}

void Session.StatusUpdateEvent.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *updated;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int *v30;
  int v31;
  void (*v32)(uint64_t, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(_QWORD);
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;

  sub_23F6B5220();
  v71 = v1;
  v6 = v5;
  v60 = v7;
  v61 = sub_23F7A0208();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v62 = v9;
  v63 = type metadata accessor for Timepoint();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v64 = v11;
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B51A4();
  v65 = v13;
  v14 = sub_23FB2C4B8();
  v69 = *(_QWORD *)(v14 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v16);
  v66 = (char *)v59 - v17;
  v67 = sub_23F6916B8(&qword_256EA90E0);
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v18);
  v19 = sub_23F7A00C8();
  updated = (int *)type metadata accessor for Session.StatusUpdateEvent(v19);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B5268();
  v75 = v4 + *(int *)(v22 + 24);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v75, 1, 1, v14);
  v23 = (uint64_t *)(v4 + updated[10]);
  *v23 = 0;
  v23[1] = 0;
  v73 = v23;
  v74 = v4;
  v24 = (_QWORD *)(v4 + updated[12]);
  *v24 = 0;
  v24[1] = 0;
  v72 = v24;
  v76 = updated;
  v25 = v4 + updated[13];
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  v26 = v6[3];
  v70 = v6;
  sub_23F6ADC98(v6, v26);
  sub_23F79AD38();
  v68 = v0;
  v27 = v71;
  sub_23F7A02FC();
  if (v27)
  {
    v29 = v74;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v70);
    v30 = v76;
    LODWORD(v71) = 0;
    sub_23F6B4F84(v75, &qword_256EA2798);
    v31 = v71;
    sub_23F7A01C8();
    if (v31)
      sub_23F6D3508(v29 + v30[11], (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
    sub_23F7A01C8();
  }
  else
  {
    v59[0] = v25;
    v59[1] = v2;
    LOBYTE(v77) = 0;
    sub_23F6D3458(&qword_256EA6700, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v28 = v66;
    sub_23F7717EC();
    v32 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
    v33 = v74;
    v32(v74, v28, v14);
    LOBYTE(v77) = 1;
    sub_23F7A0220();
    sub_23F7717EC();
    v32(v33 + v76[5], v3, v14);
    LOBYTE(v77) = 2;
    v34 = v65;
    sub_23F7A0220();
    sub_23FB2FA34();
    sub_23F787578(v34, v75);
    v35 = sub_23F7A01A0(3);
    v36 = v76;
    v37 = (uint64_t *)(v33 + v76[7]);
    *v37 = v35;
    v37[1] = v38;
    v39 = sub_23F7A01A0(4);
    v40 = (uint64_t *)(v33 + v36[8]);
    *v40 = v39;
    v40[1] = v41;
    sub_23F7A0238(5);
    v42 = sub_23FB2FA40();
    v43 = (uint64_t *)(v33 + v36[9]);
    *v43 = v42;
    v43[1] = v44;
    sub_23F7A0238(6);
    v45 = sub_23FB2FA10();
    v47 = v46;
    v48 = v73;
    swift_bridgeObjectRelease();
    *v48 = v45;
    v48[1] = v47;
    LOBYTE(v77) = 7;
    sub_23F6D3458(&qword_256EA90E8, (uint64_t (*)(uint64_t))type metadata accessor for Timepoint, (uint64_t)&protocol conformance descriptor for Timepoint);
    v49 = v64;
    sub_23F7717EC();
    LODWORD(v71) = 1;
    sub_23F6F594C(v49, v74 + v76[11], (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
    sub_23F79ADEC();
    sub_23F7A0128();
    v50 = v77;
    v51 = v78;
    v52 = v72;
    swift_bridgeObjectRelease();
    *v52 = v50;
    v52[1] = v51;
    sub_23F79AE28();
    sub_23F7A0128();
    v53 = v78;
    v54 = v59[0];
    *(_QWORD *)v59[0] = v77;
    *(_BYTE *)(v54 + 8) = v53;
    LOBYTE(v77) = 10;
    sub_23F6D3458(&qword_256EA9100, type metadata accessor for Session.StatusUpdateEvent.Payload, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.Payload);
    sub_23F6B6CAC();
    sub_23F7A0250();
    sub_23F7A02BC(v55);
    v56 = v74;
    sub_23F6F594C(v62, v74 + v76[14], type metadata accessor for Session.StatusUpdateEvent.Payload);
    sub_23F6F5920(v56, v60, type metadata accessor for Session.StatusUpdateEvent);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v70);
    v57 = sub_23F6B5994();
    sub_23F6D3508(v57, v58);
  }
  sub_23F6B5100();
}

void sub_23F798E80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  int *updated;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v24 = sub_23F72E034();
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(a9, a1, v24);
  updated = (int *)type metadata accessor for Session.StatusUpdateEvent(0);
  v25(a9 + updated[5], a2, v24);
  sub_23F710E38(a3, a9 + updated[6]);
  v27 = (_QWORD *)(a9 + updated[7]);
  *v27 = a4;
  v27[1] = a5;
  v28 = (_QWORD *)(a9 + updated[8]);
  *v28 = a6;
  v28[1] = a7;
  v29 = (_QWORD *)(a9 + updated[9]);
  *v29 = a8;
  v29[1] = a10;
  v30 = (_QWORD *)(a9 + updated[10]);
  *v30 = a11;
  v30[1] = a12;
  sub_23F6F594C(a13, a9 + updated[11], (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  v31 = (_QWORD *)(a9 + updated[12]);
  *v31 = a14;
  v31[1] = a15;
  v32 = a9 + updated[13];
  *(_QWORD *)v32 = a16;
  *(_BYTE *)(v32 + 8) = a17 & 1;
  sub_23F6F594C(a18, a9 + updated[14], type metadata accessor for Session.StatusUpdateEvent.Payload);
}

void sub_23F79900C()
{
  Session.StatusUpdateEvent.init(from:)();
}

void sub_23F799020()
{
  Session.StatusUpdateEvent.encode(to:)();
}

void Session.Event.formingStatusUpdate(_:)()
{
  uint64_t v0;

  type metadata accessor for PreassignedEventID();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B52B0();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  Session.Event.formingStatusUpdate(id:_:)();
  sub_23F694C84();
}

void Session.Event.formingStatusUpdate(id:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __uint64_t v35;
  __uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  sub_23F6B50E8();
  v53 = v4;
  v54 = v5;
  v7 = v6;
  sub_23F7A0208();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5C10(v9, v40);
  v10 = sub_23FB2C470();
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F70D7F8();
  v12 = (int *)type metadata accessor for Timepoint();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B5208();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B53AC();
  v15 = sub_23F72E034();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v43 = (uint64_t)&v40 - v19;
  v55 = v7;
  sub_23F7A0304((uint64_t)&v40 - v19, v7);
  v20 = (int *)type metadata accessor for Session.Event(0);
  sub_23F6F099C();
  v48 = v18;
  sub_23F7A0304((uint64_t)v18, v21);
  v22 = v0 + v20[6];
  v49 = v2;
  sub_23F797420(v22, v2);
  v23 = (uint64_t *)(v0 + v20[8]);
  v24 = *v23;
  v25 = v23[1];
  v26 = (uint64_t *)(v0 + v20[9]);
  v27 = *v26;
  v28 = v26[1];
  v45 = v24;
  v46 = v27;
  v29 = (uint64_t *)(v0 + v20[10]);
  v30 = *v29;
  v31 = v29[1];
  v32 = (uint64_t *)(v0 + v20[11]);
  v33 = v32[1];
  v41 = *v32;
  v42 = v30;
  sub_23F6B54F8();
  v47 = v25;
  swift_bridgeObjectRetain();
  v44 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v3;
  sub_23FB2C44C();
  v35 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  v36 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_256EA0AC8 != -1)
    swift_once();
  v37 = sub_23F6BF1A4(v15, (uint64_t)qword_256F5C778);
  sub_23F7A0304(v1 + v12[7], v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v1, v34, v51);
  *(_QWORD *)(v1 + v12[5]) = v35;
  *(_QWORD *)(v1 + v12[6]) = v36;
  v38 = v52;
  sub_23F72E068(v53, v39, type metadata accessor for Session.StatusUpdateEvent.Payload);
  sub_23F798E80(v43, (uint64_t)v48, v49, v45, v47, v46, v44, v42, v54, v31, v41, v33, v1, 0, 0, 0, 1, v38);
  sub_23F6D3508(v55, (uint64_t (*)(_QWORD))type metadata accessor for PreassignedEventID);
  sub_23F693DDC();
}

BOOL static Session.StatusUpdateEvent.ToolExecutionProgressUpdate.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

void static Session.StatusUpdateEvent.IntermediateQueryResult.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v3;
  uint64_t updated;

  v3 = *a1 == *a2 && a1[1] == a2[1];
  if ((v3 || (sub_23F6B5280() & 1) != 0)
    && (updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0),
        (static Session.StatusUpdateEvent.IntermediateQueryResult.Source.== infix(_:_:)((uint64_t)a1 + *(int *)(updated + 20)) & 1) != 0))
  {
    sub_23F695888();
  }
  else
  {
    sub_23F694C84();
  }
}

uint64_t type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA9440);
}

uint64_t sub_23F7993B8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000017 && a2 == 0x800000023FB330D0 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023FB330F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_23F7994A0()
{
  return 0xD000000000000017;
}

unint64_t sub_23F7994D4()
{
  return sub_23F7994A0();
}

uint64_t sub_23F7994DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7993B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F799500()
{
  sub_23F79C1A4();
  return sub_23FB2FD10();
}

uint64_t sub_23F799528()
{
  sub_23F79C1A4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F799554()
{
  sub_23F79C21C();
  return sub_23FB2FD10();
}

uint64_t sub_23F79957C()
{
  sub_23F79C21C();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7995A4()
{
  sub_23F79C1E0();
  return sub_23FB2FD10();
}

uint64_t sub_23F7995CC()
{
  sub_23F79C1E0();
  return sub_23FB2FD1C();
}

void Session.StatusUpdateEvent.Payload.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = *(_QWORD *)(sub_23F6916B8(&qword_256EA9108) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B57F4(v3, v9);
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B59E0();
  v10 = *(_QWORD *)(sub_23F6916B8(&qword_256EA9110) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23F7A00C8();
  type metadata accessor for Session.StatusUpdateEvent.Payload(v6);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5268();
  v13 = *(_QWORD *)(sub_23F6916B8(&qword_256EA9118) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B53AC();
  sub_23F7A00F4();
  sub_23F79C1A4();
  sub_23FB2FCC8();
  sub_23F6F5920(v14, v1, type metadata accessor for Session.StatusUpdateEvent.Payload);
  if (sub_23F7A0338() == 1)
  {
    sub_23F7A0350(v1);
    sub_23F79C1E0();
    sub_23F7A00E4();
    sub_23F6D3458(&qword_256EA9130, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult);
    sub_23FB2FB18();
    sub_23F6B530C(v11, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    sub_23F7A0344();
  }
  else
  {
    sub_23F79C21C();
    sub_23F7A00E4();
    sub_23F79C258();
    sub_23FB2FB18();
    sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  }
  sub_23F7A025C(v13);
  sub_23F70D684();
}

void Session.StatusUpdateEvent.Payload.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;

  sub_23F6B5220();
  v66 = v10;
  v14 = v13;
  v57 = v15;
  v16 = sub_23F6916B8(&qword_256EA9148);
  v60 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B5C10(v18, (uint64_t)v53);
  v19 = sub_23F6916B8(&qword_256EA9150);
  v58 = *(_QWORD *)(v19 - 8);
  v59 = v19;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B5420(v21, (uint64_t)v53);
  v22 = sub_23F6916B8(&qword_256EA9158);
  v64 = *(_QWORD *)(v22 - 8);
  v65 = v22;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B5208();
  v24 = sub_23F7A0208();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F6B5C80();
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v53 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v53 - v30;
  sub_23F6ADC98(v14, v14[3]);
  sub_23F79C1A4();
  sub_23F7A01E8();
  if (v10)
    goto LABEL_8;
  v53 = v29;
  v54 = v31;
  v55 = v11;
  v56 = v24;
  v66 = v14;
  v32 = v12;
  v33 = sub_23FB2FA94();
  v34 = *(_QWORD *)(v33 + 16);
  if (!v34
    || (v35 = *(_BYTE *)(v33 + 32),
        v32 = sub_23F6B4E44(1, v34, v33, v33 + 32, 0, (2 * v34) | 1),
        v37 = v36,
        v39 = v38,
        swift_bridgeObjectRelease(),
        v37 != v39 >> 1))
  {
    v43 = v64;
    sub_23F7A0324();
    sub_23F6B5AD4();
    v45 = v44;
    sub_23F6916B8(&qword_256EA1870);
    *v45 = v32;
    sub_23FB2FA04();
    v46 = sub_23F6B56B8();
    sub_23F6B6650(v46, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    sub_23F6B5770();
    sub_23F6B56E0(v12, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
    v14 = v66;
LABEL_8:
    v49 = (uint64_t)v14;
    goto LABEL_9;
  }
  if ((v35 & 1) != 0)
  {
    sub_23F79C1E0();
    v40 = v63;
    sub_23F7A0158();
    type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
    sub_23F6D3458(&qword_256EA9160, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult);
    v41 = v55;
    sub_23F6B6CAC();
    v42 = v64;
    sub_23F6B530C(v40, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
    sub_23F6B5770();
    sub_23F6B56E0(v12, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
    swift_storeEnumTagMultiPayload();
    v50 = v41;
  }
  else
  {
    sub_23F79C21C();
    v47 = v62;
    sub_23F7A0158();
    sub_23F79C294();
    sub_23F6B6CAC();
    v48 = v64;
    sub_23F6B530C(v47, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
    sub_23F6B5770();
    sub_23F6B56E0(v12, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
    v51 = v53;
    *v53 = a10;
    swift_storeEnumTagMultiPayload();
    v50 = (uint64_t)v51;
  }
  v52 = (uint64_t)v54;
  sub_23F6F594C(v50, (uint64_t)v54, type metadata accessor for Session.StatusUpdateEvent.Payload);
  sub_23F6F594C(v52, v57, type metadata accessor for Session.StatusUpdateEvent.Payload);
  v49 = (uint64_t)v66;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v49);
  sub_23F6B5100();
}

void sub_23F799C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  int vars8;

  Session.StatusUpdateEvent.Payload.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_23F799C3C()
{
  Session.StatusUpdateEvent.Payload.encode(to:)();
}

float Session.StatusUpdateEvent.ToolExecutionProgressUpdate.progress.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void Session.StatusUpdateEvent.ToolExecutionProgressUpdate.init(progress:)(float *a1@<X8>, float a2@<S0>)
{
  *a1 = a2;
}

uint64_t sub_23F799C60(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F799CE4()
{
  return 0x73736572676F7270;
}

uint64_t sub_23F799D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F799C60(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F799D28()
{
  sub_23F79C2D0();
  return sub_23FB2FD10();
}

uint64_t sub_23F799D50()
{
  sub_23F79C2D0();
  return sub_23FB2FD1C();
}

uint64_t Session.StatusUpdateEvent.ToolExecutionProgressUpdate.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_23F6916B8(&qword_256EA9170);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5208();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F79C2D0();
  sub_23F6F33A0();
  sub_23FB2FB00();
  return sub_23F6F1CB8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
}

void Session.StatusUpdateEvent.ToolExecutionProgressUpdate.init(from:)(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  int v8;

  sub_23F6916B8(&qword_256EA9180);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5208();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F79C2D0();
  sub_23F7A02FC();
  if (!v2)
  {
    sub_23FB2FA64();
    v8 = v7;
    sub_23F6F1CB8(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    *a2 = v8;
  }
  sub_23F6B6E68();
  sub_23F70D684();
}

void sub_23F799F04(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  Session.StatusUpdateEvent.ToolExecutionProgressUpdate.init(from:)(a1, a2);
}

uint64_t sub_23F799F18(_QWORD *a1)
{
  return Session.StatusUpdateEvent.ToolExecutionProgressUpdate.encode(to:)(a1);
}

void Session.StatusUpdateEvent.IntermediateQueryResult.query.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.query.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F6B5CF8();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.IntermediateQueryResult.query.modify())()
{
  return nullsub_1;
}

void Session.StatusUpdateEvent.IntermediateQueryResult.source.getter()
{
  uint64_t v0;
  uint64_t updated;
  uint64_t v2;

  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  sub_23F72E068(v0 + *(int *)(updated + 20), v2, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.source.setter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7A0318();
  sub_23F6F099C();
  sub_23F7A0330(v0, v1, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  sub_23F694CC8();
}

uint64_t (*Session.StatusUpdateEvent.IntermediateQueryResult.source.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  sub_23F6F099C();
  return nullsub_1;
}

uint64_t Session.StatusUpdateEvent.IntermediateQueryResult.results.getter()
{
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  return swift_bridgeObjectRetain();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.results.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(int *)(sub_23F7A0318() + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v2) = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.IntermediateQueryResult.results.modify())()
{
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  return nullsub_1;
}

void Session.StatusUpdateEvent.IntermediateQueryResult.init(query:source:results:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t updated;

  *a5 = a1;
  a5[1] = a2;
  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  sub_23F6F594C(a3, (uint64_t)a5 + *(int *)(updated + 20), type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  *(_QWORD *)((char *)a5 + *(int *)(updated + 24)) = a4;
  sub_23F694C84();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.associatedActionContext.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23F6F5920(v1, a1, type metadata accessor for ActionParameterContext);
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.associatedActionContext.setter(uint64_t a1)
{
  uint64_t v1;

  sub_23F7232E0(a1, v1, type metadata accessor for ActionParameterContext);
}

uint64_t (*Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.associatedActionContext.modify())()
{
  return nullsub_1;
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.init(associatedActionContext:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23F6F594C(a1, a2, type metadata accessor for ActionParameterContext);
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.toolId.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.toolId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F6B5CF8();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.toolId.modify())()
{
  return nullsub_1;
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.parameterId.getter()
{
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.parameterId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_23F694C84();
}

uint64_t (*Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.parameterId.modify())()
{
  return nullsub_1;
}

uint64_t Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.init(toolId:parameterId:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void static Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  BOOL v8;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if ((v6 || (sub_23F6B5280(), sub_23F7A01D0(), (v7 & 1) != 0)) && (v2 == v4 ? (v8 = v3 == v5) : (v8 = 0), !v8))
  {
    sub_23F6B5994();
    sub_23FB2FB78();
  }
  else
  {
    sub_23F694C84();
  }
}

uint64_t sub_23F79A26C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x64496C6F6F74 && a2 == 0xE600000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xEB00000000644972)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F79A368(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6574656D61726170;
  else
    return 0x64496C6F6F74;
}

uint64_t sub_23F79A3A4()
{
  char *v0;

  return sub_23F79A368(*v0);
}

uint64_t sub_23F79A3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F79A26C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F79A3D0()
{
  sub_23F79C320();
  return sub_23FB2FD10();
}

uint64_t sub_23F79A3F8()
{
  sub_23F79C320();
  return sub_23FB2FD1C();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F6B5220();
  v3 = v2;
  v5 = *(_QWORD *)(sub_23F6916B8(&qword_256EA9188) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B52B0();
  sub_23F6ADC98(v3, v3[3]);
  sub_23F79C320();
  sub_23F7A026C();
  sub_23F70D90C();
  if (!v0)
  {
    sub_23F6B6360();
    sub_23F70D90C();
  }
  sub_23F6B56E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_23F6B5100();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  sub_23F6B5220();
  v3 = v2;
  v5 = v4;
  sub_23F6916B8(&qword_256EA9198);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B53AC();
  sub_23F6ADC98(v3, v3[3]);
  sub_23F79C320();
  sub_23F7A02FC();
  if (v0)
  {
    sub_23F6B6E68();
  }
  else
  {
    v7 = sub_23F7A027C();
    v9 = v8;
    sub_23F6B6360();
    swift_bridgeObjectRetain();
    v10 = sub_23F7A027C();
    v12 = v11;
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    v14 = v10;
    sub_23F7A01DC(v13);
    *v5 = v7;
    v5[1] = v9;
    v5[2] = v14;
    v5[3] = v12;
    sub_23F6B54F8();
    sub_23F6B6E68();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23F6B5100();
}

void sub_23F79A620()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.init(from:)();
}

void sub_23F79A634()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext.encode(to:)();
}

void static Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0)
  {
    v0 = sub_23F7A0218();
    sub_23F7A029C(*(int *)(v0 + 20));
    v3 = v3 && v1 == v2;
    if (v3 || (sub_23F6B5280() & 1) != 0)
    {
      sub_23F7A029C(*(int *)(v0 + 24));
      if (!v3 || v4 != v5)
        sub_23F6B5280();
    }
  }
  sub_23F694C84();
}

uint64_t sub_23F79A6B4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000017 && a2 == 0x800000023FB33110)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_23F79A738()
{
  return 0xD000000000000017;
}

uint64_t sub_23F79A758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F79A6B4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F79A780()
{
  sub_23F79C35C();
  return sub_23FB2FD10();
}

uint64_t sub_23F79A7A8()
{
  sub_23F79C35C();
  return sub_23FB2FD1C();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F6916B8(&qword_256EA91A0);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B5208();
  sub_23F70D4B8();
  sub_23F79C35C();
  sub_23F6F33A0();
  type metadata accessor for ActionParameterContext(0);
  sub_23F6D3458(&qword_256EA91B0, type metadata accessor for ActionParameterContext, (uint64_t)&protocol conformance descriptor for ActionParameterContext);
  sub_23FB2FB18();
  sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_23F6D3710();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23F6B5220();
  v4 = v3;
  v12 = v5;
  type metadata accessor for ActionParameterContext(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v14 = v7;
  v8 = sub_23F6916B8(&qword_256EA91B8);
  v13 = *(_QWORD *)(v8 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23F70D7F8();
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery(v10);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B59E0();
  sub_23F6ADC98(v4, v4[3]);
  sub_23F79C35C();
  sub_23FB2FCB0();
  if (!v0)
  {
    sub_23F6D3458(&qword_256EA91C0, type metadata accessor for ActionParameterContext, (uint64_t)&protocol conformance descriptor for ActionParameterContext);
    sub_23FB2FA7C();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v8);
    sub_23F6F594C(v14, v1, type metadata accessor for ActionParameterContext);
    sub_23F6F594C(v1, v12, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
  }
  sub_23F6B6E68();
  sub_23F6B5100();
}

void sub_23F79AA04()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.init(from:)();
}

void sub_23F79AA18()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.encode(to:)();
}

uint64_t static Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_23F79AA38()
{
  sub_23F79C3AC();
  return sub_23FB2FD10();
}

uint64_t sub_23F79AA60()
{
  sub_23F79C3AC();
  return sub_23FB2FD1C();
}

uint64_t Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F6916B8(&qword_256EA91C8);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  sub_23F693EB0();
  sub_23F7A00F4();
  sub_23F79C3AC();
  sub_23F7A026C();
  return sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
}

uint64_t Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery.init(from:)(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
}

uint64_t sub_23F79AB44(uint64_t a1)
{
  return Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery.init(from:)(a1);
}

uint64_t sub_23F79AB58()
{
  return Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery.encode(to:)();
}

uint64_t static Session.StatusUpdateEvent.IntermediateQueryResult.Source.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;

  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23F77E1CC();
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(v6);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B6B5C();
  sub_23F6916B8(&qword_256EA91D8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F7A0184();
  v10 = v1 + v9;
  sub_23F6F5920(a1, v1, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  sub_23F7A028C();
  if (sub_23F7A02B4() != 1)
  {
    v19 = sub_23F7A02B4();
    if ((_DWORD)v19 != 1)
      goto LABEL_16;
    goto LABEL_18;
  }
  sub_23F70D594(v1, v11, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  if (sub_23F7A02B4() != 1)
  {
    sub_23F6D3508(v3, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
LABEL_18:
    sub_23F6B4F84(v1, &qword_256EA91D8);
    return 0;
  }
  sub_23F6F594C(v10, v2, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
  if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0)
  {
    v12 = sub_23F7A0218();
    sub_23F7A00B0(*(int *)(v12 + 20));
    v15 = v15 && v13 == v14;
    if (v15 || (sub_23F6B5280() & 1) != 0)
    {
      sub_23F7A00B0(*(int *)(v12 + 24));
      v18 = v15 && v16 == v17;
      if (v18 || (sub_23F6B5280() & 1) != 0)
      {
        sub_23F77DB60(v2);
        sub_23F77DB60(v3);
LABEL_16:
        sub_23F714040(v19, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
        return 1;
      }
    }
  }
  sub_23F77DB60(v2);
  sub_23F77DB60(v3);
  sub_23F714040(v21, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  return 0;
}

unint64_t sub_23F79AD38()
{
  unint64_t result;

  result = qword_256EA90B8;
  if (!qword_256EA90B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F84C, &_s17StatusUpdateEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA90B8);
  }
  return result;
}

unint64_t sub_23F79AD74()
{
  unint64_t result;

  result = qword_256EA90C8;
  if (!qword_256EA90C8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ParticipantID, &type metadata for ParticipantID);
    atomic_store(result, (unint64_t *)&qword_256EA90C8);
  }
  return result;
}

unint64_t sub_23F79ADB0()
{
  unint64_t result;

  result = qword_256EA90D0;
  if (!qword_256EA90D0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for SpanID, &type metadata for SpanID);
    atomic_store(result, (unint64_t *)&qword_256EA90D0);
  }
  return result;
}

unint64_t sub_23F79ADEC()
{
  unint64_t result;

  result = qword_256EA90F0;
  if (!qword_256EA90F0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ParticipantID, &type metadata for ParticipantID);
    atomic_store(result, (unint64_t *)&qword_256EA90F0);
  }
  return result;
}

unint64_t sub_23F79AE28()
{
  unint64_t result;

  result = qword_256EA90F8;
  if (!qword_256EA90F8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for SpanID, &type metadata for SpanID);
    atomic_store(result, (unint64_t *)&qword_256EA90F8);
  }
  return result;
}

uint64_t sub_23F79AE64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72616553696E6D6FLL && a2 == 0xEA00000000006863;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023FB33130)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F79AF5C(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000014;
  else
    return 0x72616553696E6D6FLL;
}

uint64_t sub_23F79AF9C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23F6B5280();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F79B004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F79AF9C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F79B02C()
{
  sub_23F79C424();
  return sub_23FB2FD10();
}

uint64_t sub_23F79B054()
{
  sub_23F79C424();
  return sub_23FB2FD1C();
}

void sub_23F79B07C()
{
  sub_23F7A02C4();
  sub_23F6B5A48();
  sub_23F6B5608();
  sub_23F6B5398();
}

uint64_t sub_23F79B0A0()
{
  char *v0;

  return sub_23F79AF5C(*v0);
}

uint64_t sub_23F79B0A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F79AE64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F79B0CC()
{
  sub_23F79C3E8();
  return sub_23FB2FD10();
}

uint64_t sub_23F79B0F4()
{
  sub_23F79C3E8();
  return sub_23FB2FD1C();
}

void sub_23F79B11C()
{
  sub_23FB2FC5C();
  sub_23F6B5FB0();
  sub_23F6B5608();
  sub_23F6B5398();
}

uint64_t sub_23F79B144()
{
  sub_23F79C460();
  return sub_23FB2FD10();
}

uint64_t sub_23F79B16C()
{
  sub_23F79C460();
  return sub_23FB2FD1C();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_23F6B5220();
  v15 = *(_QWORD *)(sub_23F6916B8(&qword_256EA91E0) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B51A4();
  v14 = v4;
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B57F4(v6, v12);
  v7 = sub_23F6916B8(&qword_256EA91E8);
  v13 = *(_QWORD *)(v7 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_23F7A00C8();
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(v9);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5268();
  v16 = *(_QWORD *)(sub_23F6916B8(&qword_256EA91F0) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B53AC();
  sub_23F7A00F4();
  sub_23F79C3E8();
  sub_23FB2FCC8();
  sub_23F6F5920(v1, v2, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  if (sub_23F7A0338() == 1)
  {
    sub_23F7A0350(v2);
    sub_23F7A02F0();
    sub_23F7A00E4();
    sub_23F6D3458(&qword_256EA9208, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
    sub_23FB2FB18();
    sub_23F6B530C(v14, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
    sub_23F7A0344();
  }
  else
  {
    sub_23F79C460();
    sub_23F7A00E4();
    sub_23F79C49C();
    sub_23FB2FB18();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v7);
  }
  sub_23F7A025C(v16);
  sub_23F6B5100();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.Source.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t updated;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  sub_23F6B5220();
  v56 = v0;
  v3 = v2;
  v48 = v4;
  v5 = sub_23F6916B8(&qword_256EA9220);
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5C10(v7, (uint64_t)v44);
  v8 = sub_23F6916B8(&qword_256EA9228);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5420(v10, (uint64_t)v44);
  v11 = sub_23F6916B8(&qword_256EA9230);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23F6B5C2C();
  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(v13);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B631C();
  v18 = v16 - v17;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v44 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v44 - v23;
  sub_23F6ADC98(v3, v3[3]);
  sub_23F79C3E8();
  sub_23F7A01E8();
  if (v0)
    goto LABEL_7;
  v44 = v22;
  v45 = v24;
  v46 = v18;
  v47 = updated;
  v56 = v3;
  v25 = v55;
  v26 = v1;
  v27 = sub_23FB2FA94();
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28
    || (v29 = *(_BYTE *)(v27 + 32),
        v26 = sub_23F6B4E44(1, v28, v27, v27 + 32, 0, (2 * v28) | 1),
        v31 = v30,
        v33 = v32,
        swift_bridgeObjectRelease(),
        v31 != v33 >> 1))
  {
    v34 = v54;
    sub_23F7A0324();
    sub_23F6B5AD4();
    v36 = v35;
    sub_23F6916B8(&qword_256EA1870);
    *v36 = v26;
    sub_23FB2FA04();
    v37 = sub_23F6B56B8();
    sub_23F6B6650(v37, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    sub_23F72DFBC();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v1, v25);
    v3 = v56;
LABEL_7:
    v38 = (uint64_t)v3;
    goto LABEL_8;
  }
  if ((v29 & 1) != 0)
  {
    sub_23F7A02F0();
    sub_23F7A0170();
    type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery(0);
    sub_23F6D3458(&qword_256EA9238, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
    v40 = v46;
    sub_23F7717EC();
    v41 = v54;
    sub_23F7A01B4();
    sub_23F72DFBC();
    sub_23F6B530C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
  }
  else
  {
    sub_23F79C460();
    v39 = v53;
    sub_23F7A0170();
    sub_23F79C4D8();
    sub_23F7717EC();
    v42 = v54;
    sub_23F6B530C(v39, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    sub_23F72DFBC();
    sub_23F6B5900(v1, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
    v40 = (uint64_t)v44;
  }
  swift_storeEnumTagMultiPayload();
  v43 = (uint64_t)v45;
  sub_23F6F594C(v40, (uint64_t)v45, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  sub_23F6F594C(v43, v48, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  v38 = (uint64_t)v56;
LABEL_8:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v38);
  sub_23F6B5100();
}

uint64_t sub_23F79B7C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_23FB2FB78();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_23F79B904(char a1)
{
  if (!a1)
    return 0x7972657571;
  if (a1 == 1)
    return 0x656372756F73;
  return 0x73746C75736572;
}

void sub_23F79B958()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.Source.init(from:)();
}

void sub_23F79B96C()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.Source.encode(to:)();
}

uint64_t sub_23F79B980()
{
  char *v0;

  return sub_23F79B904(*v0);
}

uint64_t sub_23F79B988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F79B7C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F79B9AC()
{
  sub_23F79C514();
  return sub_23FB2FD10();
}

uint64_t sub_23F79B9D4()
{
  sub_23F79C514();
  return sub_23FB2FD1C();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t updated;
  _BYTE v7[16];
  uint64_t v8;
  char v9;

  sub_23F6916B8(&qword_256EA9248);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23F70D4B8();
  sub_23F79C514();
  sub_23F6F33A0();
  v9 = 0;
  sub_23F70D90C();
  if (!v1)
  {
    updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
    sub_23F6B6360();
    type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    sub_23F6D3458(&qword_256EA9258, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    sub_23F70D78C();
    v8 = *(_QWORD *)(v0 + *(int *)(updated + 24));
    v7[15] = 2;
    sub_23F6916B8(&qword_256EA9260);
    sub_23F79C550((unint64_t *)&qword_256EA9268, &qword_256EA7170, MEMORY[0x24BEB9A28], MEMORY[0x24BEE12A0]);
    sub_23F70D78C();
  }
  sub_23F6B56E0((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F6D3710();
}

void Session.StatusUpdateEvent.IntermediateQueryResult.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_23F6B5220();
  v20 = v0;
  v3 = v2;
  v16 = v4;
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23F6916B8(&qword_256EA9270);
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_23F70D7F8();
  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(v9);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = v3;
  sub_23F7A00F4();
  sub_23F79C514();
  v17 = v1;
  v14 = v20;
  sub_23FB2FCB0();
  if (v14)
  {
    sub_23F72E47C();
  }
  else
  {
    *v13 = sub_23FB2FA40();
    v13[1] = v15;
    sub_23F6B6360();
    sub_23F6D3458(&qword_256EA9278, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source, (uint64_t)&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    sub_23F7717EC();
    sub_23F6F594C((uint64_t)v7, (uint64_t)v13 + *(int *)(updated + 20), type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    sub_23F6916B8(&qword_256EA9260);
    sub_23F79C550((unint64_t *)&qword_256EA9280, &qword_256EA7188, MEMORY[0x24BEB9A40], MEMORY[0x24BEE12D0]);
    sub_23FB2FA7C();
    sub_23F7A01FC();
    *(uint64_t *)((char *)v13 + *(int *)(updated + 24)) = v21;
    sub_23F6F5920((uint64_t)v13, v16, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
    sub_23F72E47C();
    sub_23F6D3508((uint64_t)v13, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
  }
  sub_23F6B5100();
}

void sub_23F79BDD0()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.init(from:)();
}

void sub_23F79BDE4()
{
  Session.StatusUpdateEvent.IntermediateQueryResult.encode(to:)();
}

void SessionStatusUpdate.Payload.init(ifps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t updated;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23F6B50E8();
  a19 = v23;
  a20 = v24;
  v26 = v25;
  sub_23F7A0210();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F6B6B5C();
  sub_23FB2D37C();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B52B0();
  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&a9 - v32;
  sub_23F7A0208();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F6B5268();
  sub_23F6F5920(v26, v22, v35);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23F6F594C(v22, (uint64_t)v33, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
    sub_23F7A028C();
    sub_23F70D594(v21 + *(int *)(updated + 20), v36, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    swift_bridgeObjectRetain();
    sub_23F79BFA0(v20);
    swift_bridgeObjectRetain();
    sub_23FB2D340();
    sub_23F6D3508(v21, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
    sub_23F78F204(v37, type metadata accessor for Session.StatusUpdateEvent.Payload);
    sub_23F6D3508((uint64_t)v33, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
  }
  else
  {
    v38 = sub_23FB2D334();
    sub_23F78F204(v38, type metadata accessor for Session.StatusUpdateEvent.Payload);
  }
  v39 = sub_23FB2D388();
  sub_23F78F1EC(v39);
  sub_23F693DDC();
}

uint64_t sub_23F79BFA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - v6;
  sub_23F7A0210();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693EB0();
  sub_23F6F5920(a1, v2, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23F6F594C(v2, (uint64_t)v7, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
    sub_23F6F5920((uint64_t)v7, v1, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
    sub_23F79C0D0();
    sub_23F78F204(v10, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    sub_23F6D3508((uint64_t)v7, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
  }
  else
  {
    v11 = sub_23FB2D34C();
    sub_23F78F204(v11, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
  }
  v12 = sub_23FB2D37C();
  return sub_23F78F1EC(v12);
}

void sub_23F79C0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F6B50E8();
  v2 = v1;
  sub_23F7A0218();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5C2C();
  sub_23FB2D364();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B5208();
  sub_23F6F5920(v2, v0, type metadata accessor for ActionParameterContext);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23FB2D358();
  sub_23F6D3508(v0, type metadata accessor for ActionParameterContext);
  v5 = sub_23FB2D370();
  sub_23F714040(v5, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery);
  sub_23F693DDC();
}

unint64_t sub_23F79C1A4()
{
  unint64_t result;

  result = qword_256EA9120;
  if (!qword_256EA9120)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F7FC, &_s17StatusUpdateEventV7PayloadO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9120);
  }
  return result;
}

unint64_t sub_23F79C1E0()
{
  unint64_t result;

  result = qword_256EA9128;
  if (!qword_256EA9128)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F7AC, &_s17StatusUpdateEventV7PayloadO33IntermediateQueryResultCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9128);
  }
  return result;
}

unint64_t sub_23F79C21C()
{
  unint64_t result;

  result = qword_256EA9138;
  if (!qword_256EA9138)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F75C, &_s17StatusUpdateEventV7PayloadO33ExecutionProgressUpdateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9138);
  }
  return result;
}

unint64_t sub_23F79C258()
{
  unint64_t result;

  result = qword_256EA9140;
  if (!qword_256EA9140)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for Session.StatusUpdateEvent.ToolExecutionProgressUpdate, &type metadata for Session.StatusUpdateEvent.ToolExecutionProgressUpdate);
    atomic_store(result, (unint64_t *)&qword_256EA9140);
  }
  return result;
}

unint64_t sub_23F79C294()
{
  unint64_t result;

  result = qword_256EA9168;
  if (!qword_256EA9168)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for Session.StatusUpdateEvent.ToolExecutionProgressUpdate, &type metadata for Session.StatusUpdateEvent.ToolExecutionProgressUpdate);
    atomic_store(result, (unint64_t *)&qword_256EA9168);
  }
  return result;
}

unint64_t sub_23F79C2D0()
{
  unint64_t result;

  result = qword_256EA9178;
  if (!qword_256EA9178)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F70C, &_s17StatusUpdateEventV27ToolExecutionProgressUpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9178);
  }
  return result;
}

uint64_t type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA94F0);
}

unint64_t sub_23F79C320()
{
  unint64_t result;

  result = qword_256EA9190;
  if (!qword_256EA9190)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F6BC, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9190);
  }
  return result;
}

unint64_t sub_23F79C35C()
{
  unint64_t result;

  result = qword_256EA91A8;
  if (!qword_256EA91A8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F66C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA91A8);
  }
  return result;
}

uint64_t type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA9580);
}

unint64_t sub_23F79C3AC()
{
  unint64_t result;

  result = qword_256EA91D0;
  if (!qword_256EA91D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F61C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO15OmniSearchQueryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA91D0);
  }
  return result;
}

unint64_t sub_23F79C3E8()
{
  unint64_t result;

  result = qword_256EA91F8;
  if (!qword_256EA91F8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F5CC, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA91F8);
  }
  return result;
}

unint64_t sub_23F79C424()
{
  unint64_t result;

  result = qword_256EA9200;
  if (!qword_256EA9200)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F57C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO30AppEntityStringQueryCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9200);
  }
  return result;
}

unint64_t sub_23F79C460()
{
  unint64_t result;

  result = qword_256EA9210;
  if (!qword_256EA9210)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F52C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20OmniSearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9210);
  }
  return result;
}

unint64_t sub_23F79C49C()
{
  unint64_t result;

  result = qword_256EA9218;
  if (!qword_256EA9218)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery, &type metadata for Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery);
    atomic_store(result, (unint64_t *)&qword_256EA9218);
  }
  return result;
}

unint64_t sub_23F79C4D8()
{
  unint64_t result;

  result = qword_256EA9240;
  if (!qword_256EA9240)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery, &type metadata for Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery);
    atomic_store(result, (unint64_t *)&qword_256EA9240);
  }
  return result;
}

unint64_t sub_23F79C514()
{
  unint64_t result;

  result = qword_256EA9250;
  if (!qword_256EA9250)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F4DC, &_s17StatusUpdateEventV23IntermediateQueryResultV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9250);
  }
  return result;
}

uint64_t sub_23F79C550(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = sub_23F6AE310(&qword_256EA9260);
    sub_23F6D3458(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9A18], a3);
    v11 = v10;
    result = MEMORY[0x242674E5C](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23F79C5D4()
{
  sub_23F6D3458(&qword_256EA27C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

uint64_t *_s17StatusUpdateEventVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t updated;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23FB2C4B8();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    v8((char *)a1 + a3[5], (char *)a2 + a3[5], v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v65 = v7;
    v66 = v8;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2 + v9, 1, v7))
    {
      v12 = sub_23F6916B8(&qword_256EA2798);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v7);
    }
    v14 = a3[7];
    v15 = a3[8];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (uint64_t *)((char *)a1 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[9];
    v23 = a3[10];
    v24 = (uint64_t *)((char *)a1 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (uint64_t *)((char *)a1 + v23);
    v28 = (uint64_t *)((char *)a2 + v23);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = a3[11];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = sub_23FB2C470();
    v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64(v31, v32, v33);
    v34 = (int *)type metadata accessor for Timepoint();
    *(_QWORD *)&v31[v34[5]] = *(_QWORD *)&v32[v34[5]];
    *(_QWORD *)&v31[v34[6]] = *(_QWORD *)&v32[v34[6]];
    v66(&v31[v34[7]], &v32[v34[7]], v65);
    v35 = a3[12];
    v36 = a3[13];
    v37 = (uint64_t *)((char *)a1 + v35);
    v38 = (uint64_t *)((char *)a2 + v35);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = (char *)a1 + v36;
    v41 = (char *)a2 + v36;
    v40[8] = v41[8];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v42 = a3[14];
    v43 = (uint64_t *)((char *)a1 + v42);
    v44 = (uint64_t *)((char *)a2 + v42);
    updated = type metadata accessor for Session.StatusUpdateEvent.Payload(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v46 = v44[1];
      *v43 = *v44;
      v43[1] = v46;
      v47 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
      v48 = *(int *)(v47 + 20);
      v49 = (char *)v43 + v48;
      v50 = (char *)v44 + v48;
      v51 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v52 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v49, v50, v52);
        v53 = type metadata accessor for ActionParameterContext(0);
        v54 = *(int *)(v53 + 20);
        v55 = &v49[v54];
        v56 = &v50[v54];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        *(_QWORD *)v55 = v58;
        *((_QWORD *)v55 + 1) = v57;
        v59 = *(int *)(v53 + 24);
        v60 = &v49[v59];
        v61 = &v50[v59];
        v62 = *((_QWORD *)v61 + 1);
        *(_QWORD *)v60 = *(_QWORD *)v61;
        *((_QWORD *)v60 + 1) = v62;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      *(_QWORD *)((char *)v43 + *(int *)(v47 + 24)) = *(_QWORD *)((char *)v44 + *(int *)(v47 + 24));
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s17StatusUpdateEventVwxx(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_23FB2C4B8();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v4))v5(v6, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + a2[11];
  v8 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = type metadata accessor for Timepoint();
  v5(v7 + *(int *)(v9 + 28), v4);
  swift_bridgeObjectRelease();
  v10 = a1 + a2[14];
  type metadata accessor for Session.StatusUpdateEvent.Payload(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    v12 = v10 + *(int *)(type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0) + 20);
    type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      type metadata accessor for ActionParameterContext(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s17StatusUpdateEventVwcp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  int *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t updated;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;

  v6 = sub_23FB2C4B8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v63 = v6;
  v64 = v7;
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a2 + v8, 1, v6))
  {
    v11 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(a1 + v13);
  v18 = (_QWORD *)(a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[9];
  v21 = a3[10];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)(a1 + v21);
  v26 = (_QWORD *)(a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[11];
  v65 = a1;
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = sub_23FB2C470();
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(v29, v30, v31);
  v33 = (int *)type metadata accessor for Timepoint();
  *(_QWORD *)(v29 + v33[5]) = *(_QWORD *)(v30 + v33[5]);
  *(_QWORD *)(v29 + v33[6]) = *(_QWORD *)(v30 + v33[6]);
  v64(v29 + v33[7], v30 + v33[7], v63);
  v34 = a3[12];
  v35 = a3[13];
  v36 = (_QWORD *)(v65 + v34);
  v37 = (_QWORD *)(a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = v65 + v35;
  v40 = a2 + v35;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v41 = a3[14];
  v42 = (_QWORD *)(v65 + v41);
  v43 = (_QWORD *)(a2 + v41);
  updated = type metadata accessor for Session.StatusUpdateEvent.Payload(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v45 = v43[1];
    *v42 = *v43;
    v42[1] = v45;
    v46 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
    v47 = *(int *)(v46 + 20);
    v48 = (char *)v42 + v47;
    v49 = (char *)v43 + v47;
    v50 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v51 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
      v52 = type metadata accessor for ActionParameterContext(0);
      v53 = *(int *)(v52 + 20);
      v54 = &v48[v53];
      v55 = &v49[v53];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      *(_QWORD *)v54 = v57;
      *((_QWORD *)v54 + 1) = v56;
      v58 = *(int *)(v52 + 24);
      v59 = &v48[v58];
      v60 = &v49[v58];
      v61 = *((_QWORD *)v60 + 1);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    *(_QWORD *)((char *)v42 + *(int *)(v46 + 24)) = *(_QWORD *)((char *)v43 + *(int *)(v46 + 24));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
  }
  return v65;
}

uint64_t _s17StatusUpdateEventVwca(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t updated;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;

  v6 = sub_23FB2C4B8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1 + v9, 1, v6);
  v13 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v14 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[9];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[11];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = (int *)type metadata accessor for Timepoint();
  *(_QWORD *)(v28 + v31[5]) = *(_QWORD *)(v29 + v31[5]);
  *(_QWORD *)(v28 + v31[6]) = *(_QWORD *)(v29 + v31[6]);
  v8(v28 + v31[7], v29 + v31[7], v6);
  v32 = a3[12];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = a3[13];
  v36 = a1 + v35;
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  *(_BYTE *)(v36 + 8) = *((_BYTE *)v37 + 8);
  *(_QWORD *)v36 = v38;
  if (a1 != a2)
  {
    v39 = a3[14];
    v40 = (_QWORD *)(a1 + v39);
    v41 = (_QWORD *)(a2 + v39);
    sub_23F6D3508(a1 + v39, type metadata accessor for Session.StatusUpdateEvent.Payload);
    updated = type metadata accessor for Session.StatusUpdateEvent.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v40 = *v41;
      v40[1] = v41[1];
      v43 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
      v44 = *(int *)(v43 + 20);
      v45 = (char *)v40 + v44;
      v46 = (char *)v41 + v44;
      v47 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v48 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v45, v46, v48);
        v49 = type metadata accessor for ActionParameterContext(0);
        v50 = *(int *)(v49 + 20);
        v51 = &v45[v50];
        v52 = &v46[v50];
        *(_QWORD *)v51 = *(_QWORD *)v52;
        *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
        v53 = *(int *)(v49 + 24);
        v54 = &v45[v53];
        v55 = &v46[v53];
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      *(_QWORD *)((char *)v40 + *(int *)(v43 + 24)) = *(_QWORD *)((char *)v41 + *(int *)(v43 + 24));
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s17StatusUpdateEventVwtk(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t updated;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = sub_23FB2C4B8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a2 + v8, 1, v6))
  {
    v11 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[11];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = (int *)type metadata accessor for Timepoint();
  *(_QWORD *)(v15 + v18[5]) = *(_QWORD *)(v16 + v18[5]);
  *(_QWORD *)(v15 + v18[6]) = *(_QWORD *)(v16 + v18[6]);
  v7(v15 + v18[7], v16 + v18[7], v6);
  v19 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = a3[14];
  v23 = (_OWORD *)(a1 + v22);
  v24 = (_OWORD *)(a2 + v22);
  updated = type metadata accessor for Session.StatusUpdateEvent.Payload(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v23 = *v24;
    v26 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
    v27 = *(int *)(v26 + 20);
    v28 = (char *)v23 + v27;
    v29 = (char *)v24 + v27;
    v30 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v31 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
      v32 = type metadata accessor for ActionParameterContext(0);
      *(_OWORD *)&v28[*(int *)(v32 + 20)] = *(_OWORD *)&v29[*(int *)(v32 + 20)];
      *(_OWORD *)&v28[*(int *)(v32 + 24)] = *(_OWORD *)&v29[*(int *)(v32 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    *(_QWORD *)((char *)v23 + *(int *)(v26 + 24)) = *(_QWORD *)((char *)v24 + *(int *)(v26 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
  }
  return a1;
}

uint64_t _s17StatusUpdateEventVwta(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t updated;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = sub_23FB2C4B8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1 + v9, 1, v6);
  v13 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v11, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v10, v11, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v14 = sub_23F6916B8(&qword_256EA2798);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[10];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[11];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = (int *)type metadata accessor for Timepoint();
  *(_QWORD *)(v36 + v39[5]) = *(_QWORD *)(v37 + v39[5]);
  *(_QWORD *)(v36 + v39[6]) = *(_QWORD *)(v37 + v39[6]);
  v8(v36 + v39[7], v37 + v39[7], v6);
  v40 = a3[12];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  v45 = a3[13];
  v46 = a1 + v45;
  v47 = a2 + v45;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  if (a1 != a2)
  {
    v48 = a3[14];
    v49 = (_OWORD *)(a1 + v48);
    v50 = (_OWORD *)(a2 + v48);
    sub_23F6D3508(a1 + v48, type metadata accessor for Session.StatusUpdateEvent.Payload);
    updated = type metadata accessor for Session.StatusUpdateEvent.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v49 = *v50;
      v52 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
      v53 = *(int *)(v52 + 20);
      v54 = (char *)v49 + v53;
      v55 = (char *)v50 + v53;
      v56 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v57 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v54, v55, v57);
        v58 = type metadata accessor for ActionParameterContext(0);
        *(_OWORD *)&v54[*(int *)(v58 + 20)] = *(_OWORD *)&v55[*(int *)(v58 + 20)];
        *(_OWORD *)&v54[*(int *)(v58 + 24)] = *(_OWORD *)&v55[*(int *)(v58 + 24)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      *(_QWORD *)((char *)v49 + *(int *)(v52 + 24)) = *(_QWORD *)((char *)v50 + *(int *)(v52 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s17StatusUpdateEventVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F79D840(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23F72E034();
  sub_23F6F07DC();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_23F6916B8(&qword_256EA2798);
    sub_23F6F07DC();
    if (v9)
    {
      v7 = v10;
      v11 = a3[6];
    }
    else
    {
      if ((_DWORD)a2 == 0x7FFFFFFF)
      {
        sub_23F6F083C(*(_QWORD *)(a1 + a3[7] + 8));
        sub_23F694C84();
        return;
      }
      type metadata accessor for Timepoint();
      sub_23F6F07DC();
      if (v9)
      {
        v7 = v12;
        v11 = a3[11];
      }
      else
      {
        v7 = sub_23F7A0208();
        v11 = a3[14];
      }
    }
    v8 = a1 + v11;
  }
  sub_23F6F07D0(v8, a2, v7);
}

uint64_t _s17StatusUpdateEventVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F79D8FC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23F72E034();
  sub_23F6F07EC();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_23F6916B8(&qword_256EA2798);
    sub_23F6F07EC();
    if (v11)
    {
      v9 = v12;
      v13 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
        sub_23F694C84();
        return;
      }
      type metadata accessor for Timepoint();
      sub_23F6F07EC();
      if (v11)
      {
        v9 = v14;
        v13 = a4[11];
      }
      else
      {
        v9 = sub_23F7A0208();
        v13 = a4[14];
      }
    }
    v10 = a1 + v13;
  }
  sub_23F6F07C4(v10, a2, a2, v9);
}

void sub_23F79D9B4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_23FB2C4B8();
  if (v0 <= 0x3F)
  {
    sub_23F72AE84();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Timepoint();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Session.StatusUpdateEvent.Payload(319);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t *_s17StatusUpdateEventV7PayloadOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t updated;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
    v9 = *(int *)(updated + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = type metadata accessor for ActionParameterContext(0);
      v15 = *(int *)(v14 + 20);
      v16 = &v10[v15];
      v17 = &v11[v15];
      v19 = *(_QWORD *)v17;
      v18 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = v19;
      *((_QWORD *)v16 + 1) = v18;
      v20 = *(int *)(v14 + 24);
      v21 = &v10[v20];
      v22 = &v11[v20];
      v23 = *((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    *(uint64_t *)((char *)a1 + *(int *)(updated + 24)) = *(uint64_t *)((char *)a2 + *(int *)(updated + 24));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t _s17StatusUpdateEventV7PayloadOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    v3 = a1 + *(int *)(type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0) + 20);
    type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_23FB2C764();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      type metadata accessor for ActionParameterContext(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *_s17StatusUpdateEventV7PayloadOwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t updated;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
    v8 = *(int *)(updated + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = type metadata accessor for ActionParameterContext(0);
      v14 = *(int *)(v13 + 20);
      v15 = &v9[v14];
      v16 = &v10[v14];
      v18 = *(_QWORD *)v16;
      v17 = *((_QWORD *)v16 + 1);
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
      v19 = *(int *)(v13 + 24);
      v20 = &v9[v19];
      v21 = &v10[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    *(_QWORD *)((char *)a1 + *(int *)(updated + 24)) = *(_QWORD *)((char *)a2 + *(int *)(updated + 24));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *_s17StatusUpdateEventV7PayloadOwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for Session.StatusUpdateEvent.Payload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
      v7 = *(int *)(updated + 20);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v11 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
        v12 = type metadata accessor for ActionParameterContext(0);
        v13 = *(int *)(v12 + 20);
        v14 = &v8[v13];
        v15 = &v9[v13];
        *(_QWORD *)v14 = *(_QWORD *)v15;
        *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
        v16 = *(int *)(v12 + 24);
        v17 = &v8[v16];
        v18 = &v9[v16];
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      *(_QWORD *)((char *)a1 + *(int *)(updated + 24)) = *(_QWORD *)((char *)a2 + *(int *)(updated + 24));
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *_s17StatusUpdateEventV7PayloadOwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
    v7 = *(int *)(updated + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = type metadata accessor for ActionParameterContext(0);
      *(_OWORD *)&v8[*(int *)(v12 + 20)] = *(_OWORD *)&v9[*(int *)(v12 + 20)];
      *(_OWORD *)&v8[*(int *)(v12 + 24)] = *(_OWORD *)&v9[*(int *)(v12 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    *(_QWORD *)((char *)a1 + *(int *)(updated + 24)) = *(_QWORD *)((char *)a2 + *(int *)(updated + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *_s17StatusUpdateEventV7PayloadOwta(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for Session.StatusUpdateEvent.Payload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
      v7 = *(int *)(updated + 20);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v11 = sub_23FB2C764();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
        v12 = type metadata accessor for ActionParameterContext(0);
        *(_OWORD *)&v8[*(int *)(v12 + 20)] = *(_OWORD *)&v9[*(int *)(v12 + 20)];
        *(_OWORD *)&v8[*(int *)(v12 + 24)] = *(_OWORD *)&v9[*(int *)(v12 + 24)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      *(_QWORD *)((char *)a1 + *(int *)(updated + 24)) = *(_QWORD *)((char *)a2 + *(int *)(updated + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23F79E240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F79EE8C(a1, a2, a3, MEMORY[0x24BEE0170] + 64, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult);
}

void type metadata accessor for Session.StatusUpdateEvent.ToolExecutionProgressUpdate()
{
  sub_23F694C70();
}

uint64_t *_s17StatusUpdateEventV23IntermediateQueryResultVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t updated;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = type metadata accessor for ActionParameterContext(0);
      v14 = *(int *)(v13 + 20);
      v15 = &v9[v14];
      v16 = &v10[v14];
      v18 = *(_QWORD *)v16;
      v17 = *((_QWORD *)v16 + 1);
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
      v19 = *(int *)(v13 + 24);
      v20 = &v9[v19];
      v21 = &v10[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_23FB2C764();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    type metadata accessor for ActionParameterContext(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *_s17StatusUpdateEventV23IntermediateQueryResultVwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = type metadata accessor for ActionParameterContext(0);
    v13 = *(int *)(v12 + 20);
    v14 = &v8[v13];
    v15 = &v9[v13];
    v17 = *(_QWORD *)v15;
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = v17;
    *((_QWORD *)v14 + 1) = v16;
    v18 = *(int *)(v12 + 24);
    v19 = &v8[v18];
    v20 = &v9[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s17StatusUpdateEventV23IntermediateQueryResultVwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_23F6D3508((uint64_t)a1 + v6, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = type metadata accessor for ActionParameterContext(0);
      v12 = *(int *)(v11 + 20);
      v13 = &v7[v12];
      v14 = &v8[v12];
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      v15 = *(int *)(v11 + 24);
      v16 = &v7[v15];
      v17 = &v8[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s17StatusUpdateEventV23IntermediateQueryResultVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    v11 = type metadata accessor for ActionParameterContext(0);
    *(_OWORD *)&v7[*(int *)(v11 + 20)] = *(_OWORD *)&v8[*(int *)(v11 + 20)];
    *(_OWORD *)&v7[*(int *)(v11 + 24)] = *(_OWORD *)&v8[*(int *)(v11 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *_s17StatusUpdateEventV23IntermediateQueryResultVwta(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_23F6D3508((uint64_t)a1 + v7, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    updated = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = type metadata accessor for ActionParameterContext(0);
      *(_OWORD *)&v8[*(int *)(v12 + 20)] = *(_OWORD *)&v9[*(int *)(v12 + 20)];
      *(_OWORD *)&v8[*(int *)(v12 + 24)] = *(_OWORD *)&v9[*(int *)(v12 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(updated - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F79E8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_23F6F083C(*(_QWORD *)(a1 + 8));
    sub_23F694C84();
  }
  else
  {
    v6 = sub_23F7A0210();
    sub_23F6F07D0(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F79E900(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_23F694C84();
  }
  else
  {
    v7 = sub_23F7A0210();
    sub_23F6F07C4(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_23F79E958()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_23FB2C764();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for ActionParameterContext(0);
    v9 = *(int *)(v8 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v13 = *v11;
    v12 = v11[1];
    *v10 = v13;
    v10[1] = v12;
    v14 = *(int *)(v8 + 24);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = sub_23FB2C764();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    type metadata accessor for ActionParameterContext(0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceOwcp(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = type metadata accessor for ActionParameterContext(0);
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v12 = *(_QWORD *)v10;
    v11 = *((_QWORD *)v10 + 1);
    *(_QWORD *)v9 = v12;
    *((_QWORD *)v9 + 1) = v11;
    v13 = *(int *)(v7 + 24);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceOwca(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = type metadata accessor for ActionParameterContext(0);
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
      v11 = *(int *)(v7 + 24);
      v12 = &a1[v11];
      v13 = &a2[v11];
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceOwtk(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23FB2C764();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = type metadata accessor for ActionParameterContext(0);
    *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
    *(_OWORD *)&a1[*(int *)(v7 + 24)] = *(_OWORD *)&a2[*(int *)(v7 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceOwta(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23F6D3508((uint64_t)a1, type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2C764();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = type metadata accessor for ActionParameterContext(0);
      *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
      *(_OWORD *)&a1[*(int *)(v7 + 24)] = *(_OWORD *)&a2[*(int *)(v7 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23F79EE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F79EE8C(a1, a2, a3, MEMORY[0x24BEE4AE8] + 64, type metadata accessor for ActionParameterContext);
}

uint64_t sub_23F79EE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v6;

  result = a5(319);
  if (v6 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for ActionParameterContext(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = sub_23FB2C764();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = *(int *)(v6 + 24);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwxx(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23FB2C764();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for ActionParameterContext(0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = sub_23FB2C764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = type metadata accessor for ActionParameterContext(0);
  v6 = *(int *)(v5 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  v11 = *(int *)(v5 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = sub_23FB2C764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = type metadata accessor for ActionParameterContext(0);
  v6 = *(int *)(v5 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(int *)(v5 + 24);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23FB2C764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = type metadata accessor for ActionParameterContext(0);
  *(_OWORD *)(a1 + *(int *)(v5 + 20)) = *(_OWORD *)(a2 + *(int *)(v5 + 20));
  *(_OWORD *)(a1 + *(int *)(v5 + 24)) = *(_OWORD *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_23FB2C764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = type metadata accessor for ActionParameterContext(0);
  v6 = *(int *)(v5 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v11 = *(int *)(v5 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F79F240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F7A0218();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v4);
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F79F27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F7A0218();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, a2, v4);
}

uint64_t sub_23F79F2B0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ActionParameterContext(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.AppEntityStringQuery.ActionContext()
{
  sub_23F694C70();
}

void type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source.OmniSearchQuery()
{
  sub_23F694C70();
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F79F490 + 4 * byte_23FB5E670[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F79F4C4 + 4 * byte_23FB5E66B[v4]))();
}

uint64_t sub_23F79F4C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F79F4CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F79F4D4);
  return result;
}

uint64_t sub_23F79F4E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F79F4E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23F79F4EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F79F4F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s17StatusUpdateEventV23IntermediateQueryResultV10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV23IntermediateQueryResultV10CodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO10CodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20OmniSearchCodingKeysOMa()
{
  return &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20OmniSearchCodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO30AppEntityStringQueryCodingKeysOMa()
{
  return &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO30AppEntityStringQueryCodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO15OmniSearchQueryV10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO15OmniSearchQueryV10CodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV10CodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextV10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextV10CodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV27ToolExecutionProgressUpdateV10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV27ToolExecutionProgressUpdateV10CodingKeysON;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F79F5D4 + 4 * byte_23FB5E67A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F79F608 + 4 * byte_23FB5E675[v4]))();
}

uint64_t sub_23F79F608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F79F610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F79F618);
  return result;
}

uint64_t sub_23F79F624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F79F62CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F79F630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F79F638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s17StatusUpdateEventV7PayloadO10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV7PayloadO10CodingKeysON;
}

ValueMetadata *_s17StatusUpdateEventV7PayloadO33ExecutionProgressUpdateCodingKeysOMa()
{
  return &_s17StatusUpdateEventV7PayloadO33ExecutionProgressUpdateCodingKeysON;
}

uint64_t _s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20OmniSearchCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F79F6A4 + 4 * byte_23FB5E67F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F79F6C4 + 4 * byte_23FB5E684[v4]))();
}

_BYTE *sub_23F79F6A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F79F6C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F79F6CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F79F6D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F79F6DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F79F6E4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s17StatusUpdateEventV7PayloadO33IntermediateQueryResultCodingKeysOMa()
{
  return &_s17StatusUpdateEventV7PayloadO33IntermediateQueryResultCodingKeysON;
}

uint64_t _s17StatusUpdateEventV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23F79F74C + 4 * byte_23FB5E68E[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23F79F780 + 4 * byte_23FB5E689[v4]))();
}

uint64_t sub_23F79F780(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F79F788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F79F790);
  return result;
}

uint64_t sub_23F79F79C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F79F7A4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23F79F7A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F79F7B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s17StatusUpdateEventV10CodingKeysOMa()
{
  return &_s17StatusUpdateEventV10CodingKeysON;
}

unint64_t sub_23F79F7D0()
{
  unint64_t result;

  result = qword_256EA95B8;
  if (!qword_256EA95B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5ED34, &_s17StatusUpdateEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95B8);
  }
  return result;
}

unint64_t sub_23F79F810()
{
  unint64_t result;

  result = qword_256EA95C0;
  if (!qword_256EA95C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EDEC, &_s17StatusUpdateEventV7PayloadO33IntermediateQueryResultCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95C0);
  }
  return result;
}

unint64_t sub_23F79F850()
{
  unint64_t result;

  result = qword_256EA95C8;
  if (!qword_256EA95C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EEA4, &_s17StatusUpdateEventV7PayloadO33ExecutionProgressUpdateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95C8);
  }
  return result;
}

unint64_t sub_23F79F890()
{
  unint64_t result;

  result = qword_256EA95D0;
  if (!qword_256EA95D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EF5C, &_s17StatusUpdateEventV7PayloadO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95D0);
  }
  return result;
}

unint64_t sub_23F79F8D0()
{
  unint64_t result;

  result = qword_256EA95D8;
  if (!qword_256EA95D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F014, &_s17StatusUpdateEventV27ToolExecutionProgressUpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95D8);
  }
  return result;
}

unint64_t sub_23F79F910()
{
  unint64_t result;

  result = qword_256EA95E0;
  if (!qword_256EA95E0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F0CC, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95E0);
  }
  return result;
}

unint64_t sub_23F79F950()
{
  unint64_t result;

  result = qword_256EA95E8;
  if (!qword_256EA95E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F184, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95E8);
  }
  return result;
}

unint64_t sub_23F79F990()
{
  unint64_t result;

  result = qword_256EA95F0;
  if (!qword_256EA95F0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F28C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO30AppEntityStringQueryCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95F0);
  }
  return result;
}

unint64_t sub_23F79F9D0()
{
  unint64_t result;

  result = qword_256EA95F8;
  if (!qword_256EA95F8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F344, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20OmniSearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA95F8);
  }
  return result;
}

unint64_t sub_23F79FA10()
{
  unint64_t result;

  result = qword_256EA9600;
  if (!qword_256EA9600)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F3FC, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9600);
  }
  return result;
}

unint64_t sub_23F79FA50()
{
  unint64_t result;

  result = qword_256EA9608;
  if (!qword_256EA9608)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F4B4, &_s17StatusUpdateEventV23IntermediateQueryResultV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9608);
  }
  return result;
}

unint64_t sub_23F79FA90()
{
  unint64_t result;

  result = qword_256EA9610;
  if (!qword_256EA9610)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F424, &_s17StatusUpdateEventV23IntermediateQueryResultV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9610);
  }
  return result;
}

unint64_t sub_23F79FAD0()
{
  unint64_t result;

  result = qword_256EA9618;
  if (!qword_256EA9618)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F44C, &_s17StatusUpdateEventV23IntermediateQueryResultV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9618);
  }
  return result;
}

unint64_t sub_23F79FB10()
{
  unint64_t result;

  result = qword_256EA9620;
  if (!qword_256EA9620)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F2B4, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20OmniSearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9620);
  }
  return result;
}

unint64_t sub_23F79FB50()
{
  unint64_t result;

  result = qword_256EA9628;
  if (!qword_256EA9628)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F2DC, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20OmniSearchCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9628);
  }
  return result;
}

unint64_t sub_23F79FB90()
{
  unint64_t result;

  result = qword_256EA9630;
  if (!qword_256EA9630)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F1FC, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO30AppEntityStringQueryCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9630);
  }
  return result;
}

unint64_t sub_23F79FBD0()
{
  unint64_t result;

  result = qword_256EA9638;
  if (!qword_256EA9638)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F224, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO30AppEntityStringQueryCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9638);
  }
  return result;
}

unint64_t sub_23F79FC10()
{
  unint64_t result;

  result = qword_256EA9640;
  if (!qword_256EA9640)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F36C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9640);
  }
  return result;
}

unint64_t sub_23F79FC50()
{
  unint64_t result;

  result = qword_256EA9648;
  if (!qword_256EA9648)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F394, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9648);
  }
  return result;
}

unint64_t sub_23F79FC90()
{
  unint64_t result;

  result = qword_256EA9650;
  if (!qword_256EA9650)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F1AC, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO15OmniSearchQueryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9650);
  }
  return result;
}

unint64_t sub_23F79FCD0()
{
  unint64_t result;

  result = qword_256EA9658;
  if (!qword_256EA9658)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F1D4, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO15OmniSearchQueryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9658);
  }
  return result;
}

unint64_t sub_23F79FD10()
{
  unint64_t result;

  result = qword_256EA9660;
  if (!qword_256EA9660)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F0F4, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9660);
  }
  return result;
}

unint64_t sub_23F79FD50()
{
  unint64_t result;

  result = qword_256EA9668;
  if (!qword_256EA9668)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F11C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9668);
  }
  return result;
}

unint64_t sub_23F79FD90()
{
  unint64_t result;

  result = qword_256EA9670;
  if (!qword_256EA9670)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F03C, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9670);
  }
  return result;
}

unint64_t sub_23F79FDD0()
{
  unint64_t result;

  result = qword_256EA9678;
  if (!qword_256EA9678)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F064, &_s17StatusUpdateEventV23IntermediateQueryResultV6SourceO20AppEntityStringQueryV13ActionContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9678);
  }
  return result;
}

unint64_t sub_23F79FE10()
{
  unint64_t result;

  result = qword_256EA9680;
  if (!qword_256EA9680)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EF84, &_s17StatusUpdateEventV27ToolExecutionProgressUpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9680);
  }
  return result;
}

unint64_t sub_23F79FE50()
{
  unint64_t result;

  result = qword_256EA9688;
  if (!qword_256EA9688)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EFAC, &_s17StatusUpdateEventV27ToolExecutionProgressUpdateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9688);
  }
  return result;
}

unint64_t sub_23F79FE90()
{
  unint64_t result;

  result = qword_256EA9690;
  if (!qword_256EA9690)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EE14, &_s17StatusUpdateEventV7PayloadO33ExecutionProgressUpdateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9690);
  }
  return result;
}

unint64_t sub_23F79FED0()
{
  unint64_t result;

  result = qword_256EA9698;
  if (!qword_256EA9698)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EE3C, &_s17StatusUpdateEventV7PayloadO33ExecutionProgressUpdateCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA9698);
  }
  return result;
}

unint64_t sub_23F79FF10()
{
  unint64_t result;

  result = qword_256EA96A0;
  if (!qword_256EA96A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5ED5C, &_s17StatusUpdateEventV7PayloadO33IntermediateQueryResultCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA96A0);
  }
  return result;
}

unint64_t sub_23F79FF50()
{
  unint64_t result;

  result = qword_256EA96A8;
  if (!qword_256EA96A8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5ED84, &_s17StatusUpdateEventV7PayloadO33IntermediateQueryResultCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA96A8);
  }
  return result;
}

unint64_t sub_23F79FF90()
{
  unint64_t result;

  result = qword_256EA96B0;
  if (!qword_256EA96B0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EECC, &_s17StatusUpdateEventV7PayloadO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA96B0);
  }
  return result;
}

unint64_t sub_23F79FFD0()
{
  unint64_t result;

  result = qword_256EA96B8;
  if (!qword_256EA96B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5EEF4, &_s17StatusUpdateEventV7PayloadO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA96B8);
  }
  return result;
}

unint64_t sub_23F7A0010()
{
  unint64_t result;

  result = qword_256EA96C0;
  if (!qword_256EA96C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5ECA4, &_s17StatusUpdateEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA96C0);
  }
  return result;
}

unint64_t sub_23F7A0050()
{
  unint64_t result;

  result = qword_256EA96C8;
  if (!qword_256EA96C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5ECCC, &_s17StatusUpdateEventV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256EA96C8);
  }
  return result;
}

uint64_t sub_23F7A0090()
{
  return type metadata accessor for Session.StatusUpdateEvent(0);
}

uint64_t sub_23F7A00A0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7A00B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_23F7A00C8()
{
  return 0;
}

uint64_t sub_23F7A00E4()
{
  return sub_23FB2FAA0();
}

_QWORD *sub_23F7A00F4()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_23F6ADC98(v0, v1);
}

uint64_t sub_23F7A0110()
{
  return type metadata accessor for Session.StatusUpdateEvent(0);
}

uint64_t sub_23F7A011C()
{
  return type metadata accessor for Session.StatusUpdateEvent(0);
}

uint64_t sub_23F7A0128()
{
  return sub_23FB2FA34();
}

uint64_t sub_23F7A0140()
{
  return sub_23FB2FAD0();
}

uint64_t sub_23F7A0158()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F7A0170()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F7A01A0@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 104) = a1;
  return sub_23FB2FA40();
}

uint64_t sub_23F7A01B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v1, v0);
}

uint64_t sub_23F7A01C8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7A01D0()
{
  return 0;
}

uint64_t sub_23F7A01DC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23F7A01E8()
{
  return sub_23FB2FCB0();
}

uint64_t sub_23F7A01FC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 120), *(_QWORD *)(v1 - 112));
}

uint64_t sub_23F7A0208()
{
  return type metadata accessor for Session.StatusUpdateEvent.Payload(0);
}

uint64_t sub_23F7A0210()
{
  return type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult.Source(0);
}

uint64_t sub_23F7A0218()
{
  return type metadata accessor for ActionParameterContext(0);
}

uint64_t sub_23F7A0220()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7A0238@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_23F7A025C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_23F7A026C()
{
  return sub_23FB2FCC8();
}

uint64_t sub_23F7A027C()
{
  return sub_23FB2FA40();
}

void sub_23F7A028C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_23F6F5920(v0, v1, v2);
}

uint64_t sub_23F7A029C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_23F7A02B4()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F7A02BC@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 176), *(_QWORD *)(v1 - 184));
}

uint64_t sub_23F7A02C4()
{
  return sub_23FB2FC5C();
}

uint64_t sub_23F7A02D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7A02E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

unint64_t sub_23F7A02F0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_23F79C424();
}

uint64_t sub_23F7A02FC()
{
  return sub_23FB2FCB0();
}

uint64_t sub_23F7A0304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_23F7A030C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F7A0318()
{
  return type metadata accessor for Session.StatusUpdateEvent.IntermediateQueryResult(0);
}

uint64_t sub_23F7A0324()
{
  return sub_23FB2F818();
}

void sub_23F7A0330(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F7232E0(v3, a2, a3);
}

uint64_t sub_23F7A0338()
{
  return swift_getEnumCaseMultiPayload();
}

void sub_23F7A0344()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_23F6D3508(v1, v0);
}

void sub_23F7A0350(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_23F6F594C(a1, v2, v1);
}

void String.quotedForPython.getter()
{
  String.escapedForPython.getter();
  sub_23F7A12A4();
  sub_23F693E04();
  sub_23F6B5508();
  sub_23F6B5A54();
  sub_23F693E04();
  sub_23F6F5A08();
}

unint64_t sub_23F7A03AC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_23FB2F230();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
    {
      v7 = sub_23FB2F2F0();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t String.quoted.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  v0 = sub_23FB2F278();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    do
    {
      v4 = v2 == 34 && v3 == 0xE100000000000000;
      if (v4 || (sub_23F7A126C() & 1) != 0)
        sub_23F6B5A54();
      MEMORY[0x242673ECC](v2, v3);
      sub_23F693E04();
      v2 = sub_23FB2F278();
      v3 = v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_23F6B5A54();
  return 34;
}

unint64_t sub_23F7A0550(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t result;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = sub_23FB2FCEC();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23FB2C14C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v45 - v14;
  sub_23FB2F218();
  sub_23F7540F4();
  v52 = v16;
  v48 = a2;
  v49 = a3;
  sub_23FB2C128();
  sub_23F731C2C();
  v17 = sub_23FB2F6B0();
  v19 = v18;
  v46 = *(void (**)(char *, uint64_t))(v10 + 8);
  v47 = v9;
  v46(v15, v9);
  v20 = HIBYTE(v19) & 0xF;
  v48 = v17;
  v49 = v19;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = v17 & 0xFFFFFFFFFFFFLL;
  v50 = 0;
  v51 = v20;
  swift_beginAccess();
  sub_23FB2F278();
  if (!v21)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    v41 = sub_23F7A1378(v52);
    if (v42)
    {
      if (v41 == 95 && v42 == 0xE100000000000000)
      {
        sub_23F693E04();
      }
      else
      {
        v44 = sub_23F7A126C();
        sub_23F693E04();
        if ((v44 & 1) == 0)
          goto LABEL_60;
      }
      sub_23F7A1260();
      sub_23F7E1454();
      swift_endAccess();
      sub_23F693E04();
    }
LABEL_60:
    v48 = v52;
    sub_23F6916B8(&qword_256EA96E8);
    sub_23F7A1194(&qword_256EA96F0, &qword_256EA96E8, MEMORY[0x24BEE12C8]);
    return sub_23FB2F2D8();
  }
  v22 = 0;
  while (1)
  {
    if ((a1 & 1) != 0)
    {
      sub_23FB2C110();
      swift_bridgeObjectRetain();
      v23 = sub_23F7A1280();
      v25 = sub_23F70E424(v23, v24);
      sub_23F717D54();
      if ((v25 & 0x100000000) != 0)
        v26 = 0;
      else
        v26 = sub_23FB2C134();
      v46(v13, v47);
    }
    else
    {
      v26 = 0;
    }
    sub_23F7A1280();
    if ((sub_23FB2F0C8() & 1) != 0 || (sub_23F7A1280(), ((sub_23FB2F0D4() | v26) & 1) != 0))
    {
      if ((sub_23F7A1248() & 1) == 0)
        goto LABEL_16;
      result = sub_23F7A1254();
      if ((result & 0x100000000) != 0)
        goto LABEL_62;
      sub_23F7A1278();
      sub_23FB2FCD4();
      sub_23F7A1208();
      if ((v8 & 1) == 0)
      {
LABEL_16:
        if ((sub_23F7A123C() & 1) == 0)
          goto LABEL_25;
        if ((sub_23F7A1248() & 1) == 0)
          goto LABEL_20;
        result = sub_23F7A1254();
        if ((result & 0x100000000) != 0)
          goto LABEL_64;
        sub_23F7A1278();
        sub_23FB2FCE0();
        sub_23F7A1208();
        if ((v8 & 1) == 0)
        {
LABEL_20:
          if ((sub_23F7A123C() & 1) != 0)
          {
            if (((sub_23F7A128C() | v22) & 1) != 0)
              goto LABEL_25;
            goto LABEL_24;
          }
        }
      }
      if ((v22 & 1) == 0)
LABEL_24:
        sub_23F7A0A00(&v52);
LABEL_25:
      sub_23F7A1280();
      v28 = sub_23FB2F080();
      v30 = v29;
      sub_23F7A1260();
      sub_23F6B9B5C(v28, v30);
LABEL_26:
      swift_endAccess();
      goto LABEL_27;
    }
    v33 = *(_QWORD *)(v52 + 16);
    if (v33)
    {
      v34 = v52 + 16 * v33;
      v35 = *(_QWORD *)(v34 + 16) == 95 && *(_QWORD *)(v34 + 24) == 0xE100000000000000;
      if (!v35 && (sub_23F7A126C() & 1) == 0)
      {
        sub_23F7A1260();
        v36 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F7A1298();
          v36 = v39;
        }
        v37 = *(_QWORD *)(v36 + 16);
        if (v37 >= *(_QWORD *)(v36 + 24) >> 1)
        {
          sub_23F7A1298();
          v36 = v40;
        }
        *(_QWORD *)(v36 + 16) = v37 + 1;
        v38 = v36 + 16 * v37;
        *(_QWORD *)(v38 + 32) = 95;
        *(_QWORD *)(v38 + 40) = 0xE100000000000000;
        v52 = v36;
        goto LABEL_26;
      }
    }
LABEL_27:
    if ((sub_23F7A1248() & 1) == 0)
      goto LABEL_30;
    result = sub_23F7A1254();
    if ((result & 0x100000000) != 0)
      break;
    sub_23F7A1278();
    sub_23FB2FCD4();
    sub_23F7A1208();
    if ((v8 & 1) != 0)
      goto LABEL_36;
LABEL_30:
    if ((sub_23F7A123C() & 1) == 0)
    {
      sub_23F717D54();
      v22 = 0;
      goto LABEL_38;
    }
    if ((sub_23F7A1248() & 1) != 0)
    {
      result = sub_23F7A1254();
      if ((result & 0x100000000) != 0)
        goto LABEL_63;
      sub_23F7A1278();
      sub_23FB2FCE0();
      sub_23F7A1208();
      if ((v8 & 1) != 0)
        goto LABEL_36;
    }
    if ((sub_23F7A123C() & 1) == 0)
    {
LABEL_36:
      sub_23F717D54();
      v22 = 1;
      goto LABEL_38;
    }
    v31 = sub_23F7A128C();
    sub_23F717D54();
    v22 = v31 ^ 1;
LABEL_38:
    sub_23FB2F278();
    if (!v32)
      goto LABEL_51;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_23F7A0A00(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_beginAccess();
  result = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v3 = sub_23F7A1378(result);
    if (!v4)
    {
LABEL_8:
      swift_beginAccess();
      sub_23F83A978();
      v7 = *(_QWORD *)(*a1 + 16);
      sub_23F83A9E4(v7);
      v8 = *a1;
      *(_QWORD *)(v8 + 16) = v7 + 1;
      v9 = v8 + 16 * v7;
      *(_QWORD *)(v9 + 32) = 95;
      *(_QWORD *)(v9 + 40) = 0xE100000000000000;
      return swift_endAccess();
    }
    if (v3 != 95 || v4 != 0xE100000000000000)
    {
      v6 = sub_23FB2FB78();
      result = swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t String.toLowerSnakeCase.getter(uint64_t a1, unint64_t a2)
{
  return sub_23F7A0550(0, a1, a2);
}

unint64_t String.toLowerSnakeCaseRetainSymbols.getter(uint64_t a1, unint64_t a2)
{
  return sub_23F7A0550(1, a1, a2);
}

uint64_t sub_23F7A0B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = sub_23FB2C14C();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6D3418(v2, qword_256EA96D0);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA96D0);
  sub_23FB2C11C();
  sub_23FB2C140();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t String.toTitleCase.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;

  if (qword_256EA0AB0 != -1)
    swift_once();
  v4 = sub_23FB2C14C();
  sub_23F6BF1A4(v4, (uint64_t)qword_256EA96D0);
  sub_23F731C2C();
  sub_23F7A12B0();
  sub_23FB2F6B0();
  sub_23F7A12B0();
  v5 = sub_23FB2F698();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v22 = a1;
    v23 = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v6, 0);
    v7 = (unint64_t *)(v5 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      swift_bridgeObjectRetain_n();
      v10 = sub_23F72F7DC(1);
      MEMORY[0x242673E24](v10);
      swift_bridgeObjectRelease();
      v11 = sub_23FB2F6A4();
      v13 = v12;
      sub_23F693E04();
      swift_bridgeObjectRetain();
      v14 = sub_23F7A03AC(1uLL, v8, v9);
      MEMORY[0x242673E24](v14);
      sub_23F693E04();
      swift_bridgeObjectRetain();
      sub_23FB2F254();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23F717D54();
      v15 = v13;
      v17 = *(_QWORD *)(v23 + 16);
      v16 = *(_QWORD *)(v23 + 24);
      if (v17 >= v16 >> 1)
        sub_23F711194(v16 > 1, v17 + 1, 1);
      v7 += 2;
      *(_QWORD *)(v23 + 16) = v17 + 1;
      v18 = v23 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v11;
      *(_QWORD *)(v18 + 40) = v15;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    a1 = v22;
  }
  else
  {
    sub_23F717D54();
  }
  sub_23F6916B8(&qword_256EA1918);
  sub_23F7A1194((unint64_t *)&qword_256EA1E38, &qword_256EA1918, MEMORY[0x24BEE12B0]);
  v19 = sub_23FB2F110();
  swift_bridgeObjectRelease();
  sub_23F6B5508();
  v20 = sub_23F70E424(a1, a2);
  sub_23F693E04();
  if ((v20 & 0x100000000) == 0 && (sub_23FB2C134() & 1) != 0)
  {
    sub_23FB2F254();
    sub_23F6B6090();
    return 95;
  }
  return v19;
}

uint64_t String.escapedForPython.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  sub_23F731C2C();
  sub_23FB2F6BC();
  v2 = v1;
  sub_23F7A11D4();
  sub_23F7A121C();
  v5 = (uint64_t)&v5;
  v6 = v0;
  sub_23F7A11D4();
  sub_23F7A122C();
  v5 = (uint64_t)&v5;
  v6 = v2;
  sub_23F7A11D4();
  sub_23F7A121C();
  v5 = (uint64_t)&v5;
  v6 = v0;
  sub_23F7A11D4();
  sub_23F7A122C();
  v5 = (uint64_t)&v5;
  v6 = v2;
  sub_23F7A11D4();
  sub_23F7A121C();
  v5 = (uint64_t)&v5;
  v6 = v0;
  sub_23F7A11D4();
  sub_23F7A122C();
  v5 = (uint64_t)&v5;
  v6 = v2;
  sub_23F7A11D4();
  sub_23F7A121C();
  v5 = (uint64_t)&v5;
  v6 = v0;
  v3 = sub_23F7A11D4();
  sub_23F6B6090();
  return v3;
}

void String.indented.getter()
{
  sub_23F7A12A4();
  sub_23F6F5A08();
}

uint64_t String.blockIndented.getter()
{
  uint64_t v0;

  sub_23FB2F254();
  sub_23F731C2C();
  v0 = sub_23FB2F6BC();
  sub_23F693E04();
  return v0;
}

Swift::String __swiftcall String.truncateForPrompting(allowedLength:)(Swift::Int allowedLength)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String result;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v4 = v1;
  v6 = sub_23FB2F218();
  sub_23F6B5508();
  if (v6 > allowedLength)
  {
    v7 = sub_23F72F7DC(allowedLength);
    v20 = MEMORY[0x242673E24](v7);
    v21 = v8;
    sub_23FB2F23C();
    v9 = MEMORY[0x2426742EC](v20, v21);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    sub_23F693E04();
    v4 = MEMORY[0x242673E24](v9, v11, v13, v15);
    v3 = v16;
    sub_23F6B6090();
  }
  v17 = v4;
  v18 = v3;
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

uint64_t sub_23F7A1194(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_23F6AE310(a2);
    result = MEMORY[0x242674E5C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23F7A11D4()
{
  return sub_23FB2F6BC();
}

uint64_t sub_23F7A1208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23F7A121C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7A122C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7A123C()
{
  return sub_23FB2F0A4();
}

uint64_t sub_23F7A1248()
{
  return sub_23FB2F0B0();
}

unint64_t sub_23F7A1254()
{
  unint64_t v0;
  unint64_t v1;

  return sub_23F70E424(v1, v0);
}

uint64_t sub_23F7A1260()
{
  return swift_beginAccess();
}

uint64_t sub_23F7A126C()
{
  return sub_23FB2FB78();
}

uint64_t sub_23F7A1278()
{
  return sub_23FB2FCF8();
}

uint64_t sub_23F7A1280()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7A128C()
{
  return sub_23FB2F098();
}

void sub_23F7A1298()
{
  sub_23F7540F4();
}

uint64_t sub_23F7A12A4()
{
  return sub_23FB2F254();
}

uint64_t sub_23F7A12B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7A12C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7A12DC(a1, (void (*)(_QWORD))type metadata accessor for ProgramStatement, a2);
}

uint64_t sub_23F7A12D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7A12DC(a1, (void (*)(_QWORD))type metadata accessor for Session.Event, a2);
}

uint64_t sub_23F7A12DC@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = v5 - 1;
    a2(0);
    sub_23F7A1F38();
    sub_23F6D8A14(a1 + v8 + *(_QWORD *)(v9 + 72) * v7, a3, (uint64_t (*)(_QWORD))a2);
    v10 = sub_23F7A1F60();
  }
  else
  {
    a2(0);
    v10 = sub_23F694CD0();
  }
  return sub_23F713EE0(v10, v11, v12, v13);
}

uint64_t sub_23F7A1348(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + a1 + 31);
  else
    v2 = 0;
  return v2 | ((v1 == 0) << 8);
}

uint64_t sub_23F7A1378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16 * v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_23F7A13BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = v3 - 1;
    sub_23F6916B8(&qword_256EA64A0);
    sub_23F7A1F38();
    sub_23F7A1EDC(a1 + v6 + *(_QWORD *)(v7 + 72) * v5, a2, &qword_256EA64A0);
    v8 = sub_23F7A1F60();
  }
  else
  {
    sub_23F6916B8(&qword_256EA64A0);
    v8 = sub_23F694CD0();
  }
  return sub_23F713EE0(v8, v9, v10, v11);
}

void Session.Transcript.formingTraceIds()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD __src[9];
  _OWORD __dst[5];

  v15 = sub_23F72E034();
  v5 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B53AC();
  v6 = sub_23FB2E510();
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6BD134();
  v9 = v8 - v7;
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  v11 = sub_23F77E1CC();
  v12 = type metadata accessor for Session.Event(v11);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B5268();
  v14 = type metadata accessor for Session.Transcript(0);
  sub_23F7A12DC(*(_QWORD *)(v1 + *(int *)(v14 + 32)), (void (*)(_QWORD))type metadata accessor for Session.Event, v1);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, v12) == 1)
  {
    sub_23F743F68(v1, &qword_256EA7A90);
    sub_23FB2E504();
    if (qword_256EA0AA8 != -1)
      swift_once();
    sub_23FB2FD40();
    if (__src[3] == 1)
    {
      *(_QWORD *)&__dst[0] = 0;
      BYTE8(__dst[0]) = 1;
      memset(&__dst[1], 0, 56);
      sub_23F743F68((uint64_t)__src, &qword_256EA8BB0);
    }
    else
    {
      memcpy(__dst, __src, 0x48uLL);
    }
    sub_23F78506C((uint64_t)__dst);
    sub_23FB2E4EC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v1, v15);
    sub_23FB2E4F8();
    sub_23F7A1F18();
    sub_23F7A1F50();
    sub_23FB2E4C8();
    sub_23F7A1F18();
    sub_23F7A1F50();
    sub_23FB2E4D4();
    sub_23F7A1F18();
    sub_23F7A1F50();
    sub_23FB2E4E0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(a1, v9, v17);
  }
  else
  {
    sub_23F7328C0(v1, v3);
    Session.Event.formingTraceIds()();
    sub_23F7594E4(v3);
  }
  sub_23F693DDC();
}

void sub_23F7A1678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_23F6916B8(&qword_256EA97D8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6BD134();
  v10 = v9 - v8;
  sub_23F6916B8(&qword_256EA70B0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA7AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6BD134();
  v15 = v14 - v13;
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F77E1CC();
  v17 = sub_23FB2E468();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B5268();
  sub_23FB2E45C();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  v19 = sub_23F72E034();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v2, 0, 1, v19);
  sub_23FB2E450();
  v20 = sub_23FB2E510();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v15, a1, v20);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v15, 0, 1, v20);
  sub_23FB2E444();
  sub_23FB2E498();
  sub_23F7A1EDC(a2, v3, &qword_256EA70B0);
  sub_23FB2E42C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v10, v4, v17);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v10, 0, 1, v17);
  sub_23FB2E474();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v4, v17);
  sub_23F693DDC();
}

uint64_t static TelemetryStream.insert(_:)()
{
  uint64_t result;
  __int128 v1;
  __int128 v2;
  uint64_t v3;

  if (qword_256EA0AC0 != -1)
    result = swift_once();
  if (qword_256EA9728)
  {
    result = sub_23F6AF9C8((uint64_t)&xmmword_256EA9710, (uint64_t)&v1);
  }
  else
  {
    v1 = xmmword_256EA9710;
    v2 = unk_256EA9720;
    v3 = qword_256EA9730;
  }
  if (*((_QWORD *)&v2 + 1))
  {
    sub_23F6ADC98(&v1, *((uint64_t *)&v2 + 1));
    sub_23FB2E744();
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)&v1);
  }
  return result;
}

uint64_t Session.Event.formingTraceIds()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[9];
  _BYTE __dst[72];

  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6BD134();
  v4 = v3 - v2;
  v5 = sub_23F72E034();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6BD134();
  v9 = v8 - v7;
  sub_23FB2E504();
  if (qword_256EA0AA8 != -1)
    swift_once();
  sub_23FB2FD40();
  if (__src[3] == 1)
  {
    *(_QWORD *)__dst = 0;
    __dst[8] = 1;
    memset(&__dst[16], 0, 56);
    sub_23F743F68((uint64_t)__src, &qword_256EA8BB0);
  }
  else
  {
    memcpy(__dst, __src, sizeof(__dst));
  }
  sub_23F78506C((uint64_t)__dst);
  sub_23FB2E4EC();
  v10 = type metadata accessor for Session.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, v0 + *(int *)(v10 + 20), v5);
  sub_23FB2E4F8();
  sub_23F7A1F08();
  sub_23F7A1F28();
  sub_23FB2E4BC();
  sub_23F7A1F08();
  sub_23F7A1F28();
  sub_23FB2E4C8();
  sub_23F7A1F08();
  sub_23F7A1F28();
  sub_23FB2E4D4();
  sub_23F7A1F08();
  sub_23F7A1F28();
  sub_23FB2E4E0();
  sub_23F7A1EDC(v0 + *(int *)(v10 + 24), v4, &qword_256EA2798);
  return sub_23FB2E4B0();
}

uint64_t sub_23F7A1AD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (!a1)
  {
    v6 = 1;
    goto LABEL_6;
  }
  v3 = a1;
  sub_23FB2E534();
  v4 = objc_msgSend(v3, sel_domain);
  sub_23FB2F140();

  sub_23FB2E528();
  v5 = (unint64_t)objc_msgSend(v3, sel_code);
  if ((v5 & 0x8000000000000000) == 0 && !HIDWORD(v5))
  {
    sub_23FB2E51C();

    v6 = 0;
LABEL_6:
    v7 = sub_23FB2E540();
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, v6, 1, v7);
  }
  sub_23F7561B8();
  result = sub_23FB2F938();
  __break(1u);
  return result;
}

uint64_t sub_23F7A1C14()
{
  uint64_t v0;

  v0 = sub_23FB2E7F8();
  sub_23F6D3418(v0, qword_256EA96F8);
  sub_23F6BF1A4(v0, (uint64_t)qword_256EA96F8);
  return sub_23FB2E7EC();
}

uint64_t sub_23F7A1C5C()
{
  return sub_23F7A1C68();
}

uint64_t sub_23F7A1C68()
{
  sub_23FB2E54C();
  sub_23F7A1E9C();
  return sub_23FB2E714();
}

uint64_t TelemetryStream.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TelemetryStream.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TelemetryStream()
{
  return objc_opt_self();
}

uint64_t method lookup function for TelemetryStream()
{
  return swift_lookUpClassMethod();
}

unint64_t sub_23F7A1E9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA97D0;
  if (!qword_256EA97D0)
  {
    v1 = sub_23FB2E54C();
    result = MEMORY[0x242674E5C](MEMORY[0x24BE59828], v1);
    atomic_store(result, (unint64_t *)&qword_256EA97D0);
  }
  return result;
}

void sub_23F7A1EDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_23F6916B8(a3);
  sub_23F6F0A3C(v3);
  sub_23F694CC8();
}

uint64_t sub_23F7A1F08()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7A1F18()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7A1F28()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7A1F50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7A1F60()
{
  uint64_t v0;

  return v0;
}

uint64_t static Timepoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((sub_23FB2C440() & 1) != 0
    && (v4 = sub_23F7A34F8(), *(_QWORD *)(a1 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20)))
    && *(_QWORD *)(a1 + *(int *)(v4 + 24)) == *(_QWORD *)(a2 + *(int *)(v4 + 24)))
  {
    return sub_23FB2C4A0();
  }
  else
  {
    return 0;
  }
}

uint64_t type metadata accessor for Timepoint()
{
  uint64_t result;

  result = qword_256EA9860;
  if (!qword_256EA9860)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Timepoint.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __uint64_t v7;
  __uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t result;

  v2 = sub_23F7A3510();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6BD134();
  v6 = v5 - v4;
  sub_23FB2C44C();
  v7 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  v8 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_256EA0AC8 != -1)
    swift_once();
  v9 = sub_23F72E034();
  v10 = sub_23F6BF1A4(v9, (uint64_t)qword_256F5C778);
  v11 = (int *)sub_23F7A34F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1 + v11[7], v10, v9);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(a1, v6, v2);
  *(_QWORD *)(a1 + v11[5]) = v7;
  *(_QWORD *)(a1 + v11[6]) = v8;
  return result;
}

uint64_t Timepoint.date.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7A3510();
  v0 = sub_23F6F0814();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t Timepoint.date.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7A3510();
  v0 = sub_23F6F07FC();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t (*Timepoint.date.modify())()
{
  return nullsub_1;
}

uint64_t Timepoint.suspendingClockInstantNs.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_23F7A34F8() + 20));
}

void Timepoint.suspendingClockInstantNs.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(sub_23F7A34F8() + 20)) = a1;
  sub_23F694CC8();
}

uint64_t (*Timepoint.suspendingClockInstantNs.modify())()
{
  sub_23F7A34F8();
  return nullsub_1;
}

uint64_t Timepoint.continuousClockInstantNs.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_23F7A34F8() + 24));
}

void Timepoint.continuousClockInstantNs.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(sub_23F7A34F8() + 24)) = a1;
  sub_23F694CC8();
}

uint64_t (*Timepoint.continuousClockInstantNs.modify())()
{
  sub_23F7A34F8();
  return nullsub_1;
}

uint64_t Timepoint.bootSessionUUID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7A34F8();
  sub_23F72E034();
  v0 = sub_23F6F0814();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t Timepoint.bootSessionUUID.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7A34F8();
  sub_23F72E034();
  v0 = sub_23F6F07FC();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t (*Timepoint.bootSessionUUID.modify())()
{
  sub_23F7A34F8();
  return nullsub_1;
}

uint64_t Timepoint.init(date:suspendingClockInstantNs:continuousClockInstantNs:bootSessionUUID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = sub_23F7A3510();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v11 = (int *)sub_23F7A34F8();
  *(_QWORD *)(a5 + v11[5]) = a2;
  *(_QWORD *)(a5 + v11[6]) = a3;
  v12 = a5 + v11[7];
  v13 = sub_23F72E034();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a4, v13);
}

void sub_23F7A2350()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_23F72E034();
  sub_23F6D3418(v0, qword_256F5C778);
  v1 = sub_23F6BF1A4(v0, (uint64_t)qword_256F5C778);
  sub_23F7A2390(v1);
  sub_23F694CC8();
}

uint64_t sub_23F7A2390@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  size_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v2 = sub_23F6916B8(&qword_256EA2798);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23FB2F434();
  *(_QWORD *)(v5 + 16) = 37;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 61) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  v11[0] = 37;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v5 + 32), v11, 0, 0))
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = sub_23F7A1348(v5);
  if ((v6 & 0x100) != 0)
    goto LABEL_8;
  if ((_BYTE)v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
  }
  v7 = swift_bridgeObjectRetain();
  sub_23F7A2598(v7);
  sub_23FB2C47C();
  v8 = sub_23FB2C4B8();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v4, 1, v8) == 1)
  {
    sub_23F7A34B8((uint64_t)v4);
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    sub_23FB2F7AC();
    sub_23FB2F254();
    sub_23FB2F254();
    sub_23FB2F254();
    result = sub_23FB2F944();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, v4, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23F7A2598(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
    {
LABEL_6:
      v7 = sub_23FB2F1DC();
      swift_bridgeObjectRelease();
      return v7;
    }
    v4 = 0;
    v5 = v1 - 1;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v2 + 33 + v4++))
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23F7A2618(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023FB33210 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023FB33230 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73736553746F6F62 && a2 == 0xEF444955556E6F69)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23F7A27D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F7A27FC + 4 * byte_23FB5F8D0[a1]))(1702125924, 0xE400000000000000);
}

unint64_t sub_23F7A27FC()
{
  return 0xD000000000000018;
}

uint64_t sub_23F7A2824()
{
  return 0x73736553746F6F62;
}

uint64_t sub_23F7A2848()
{
  unsigned __int8 *v0;

  return sub_23F7A27D0(*v0);
}

uint64_t sub_23F7A2850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7A2618(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7A2874()
{
  sub_23F7A2A74();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A289C()
{
  sub_23F7A2A74();
  return sub_23FB2FD1C();
}

uint64_t Timepoint.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_23F6916B8(&qword_256EA97E0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6BD134();
  v7 = v6 - v5;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7A2A74();
  sub_23FB2FCC8();
  sub_23FB2C470();
  sub_23F6F2930(&qword_256EA97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  sub_23F70D4F0();
  if (!v1)
  {
    type metadata accessor for Timepoint();
    sub_23F7A3518();
    sub_23F7A3518();
    sub_23FB2C4B8();
    sub_23F6F2930(&qword_256EA6620, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    sub_23F70D4F0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_23F7A2A74()
{
  unint64_t result;

  result = qword_256EA97E8;
  if (!qword_256EA97E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5FA5C, &type metadata for Timepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA97E8);
  }
  return result;
}

uint64_t Timepoint.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v14 = sub_23FB2C4B8();
  v11 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B51A4();
  v13 = v3;
  v17 = sub_23FB2C470();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B51A4();
  v16 = v5;
  v15 = sub_23F6916B8(&qword_256EA97F8);
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6BD134();
  v6 = (int *)type metadata accessor for Timepoint();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6BD134();
  v9 = v8 - v7;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7A2A74();
  sub_23FB2FCB0();
  if (v18)
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  sub_23F6F2930(&qword_256EA9800, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_23F7A3528();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, v16, v17);
  *(_QWORD *)(v9 + v6[5]) = sub_23FB2FA88();
  *(_QWORD *)(v9 + v6[6]) = sub_23FB2FA88();
  sub_23F6F2930(&qword_256EA6700, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  sub_23F7A3528();
  sub_23F7A3500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9 + v6[7], v13, v14);
  sub_23F7A2DB0(v9, a2);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  return sub_23F7A2DF4(v9);
}

uint64_t sub_23F7A2DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Timepoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F7A2DF4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Timepoint();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23F7A2E30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Timepoint.init(from:)(a1, a2);
}

uint64_t sub_23F7A2E44(_QWORD *a1)
{
  return Timepoint.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Timepoint(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23FB2C470();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23FB2C4B8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for Timepoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = sub_23FB2C4B8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23FB2C470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Timepoint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7A31C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_23F7A3510();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = sub_23F72E034();
    v8 = a1 + *(int *)(a3 + 28);
  }
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for Timepoint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7A3230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_23F7A3510();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = sub_23F72E034();
    v10 = a1 + *(int *)(a4 + 28);
  }
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v10, a2, a2, v9);
}

uint64_t sub_23F7A3298()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23FB2C470();
  if (v1 <= 0x3F)
  {
    result = sub_23FB2C4B8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Timepoint.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23F7A3378 + 4 * byte_23FB5F8D9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23F7A33AC + 4 * byte_23FB5F8D4[v4]))();
}

uint64_t sub_23F7A33AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7A33B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7A33BCLL);
  return result;
}

uint64_t sub_23F7A33C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7A33D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23F7A33D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7A33DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Timepoint.CodingKeys()
{
  return &type metadata for Timepoint.CodingKeys;
}

unint64_t sub_23F7A33FC()
{
  unint64_t result;

  result = qword_256EA98A0;
  if (!qword_256EA98A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5FA34, &type metadata for Timepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA98A0);
  }
  return result;
}

unint64_t sub_23F7A343C()
{
  unint64_t result;

  result = qword_256EA98A8;
  if (!qword_256EA98A8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F9A4, &type metadata for Timepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA98A8);
  }
  return result;
}

unint64_t sub_23F7A347C()
{
  unint64_t result;

  result = qword_256EA98B0;
  if (!qword_256EA98B0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB5F9CC, &type metadata for Timepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA98B0);
  }
  return result;
}

uint64_t sub_23F7A34B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23F6916B8(&qword_256EA2798);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23F7A34F8()
{
  return type metadata accessor for Timepoint();
}

uint64_t sub_23F7A3500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 96), v1);
}

uint64_t sub_23F7A3510()
{
  return sub_23FB2C470();
}

uint64_t sub_23F7A3518()
{
  return sub_23FB2FB24();
}

uint64_t sub_23F7A3528()
{
  return sub_23FB2FA7C();
}

id sub_23F7A3534()
{
  void *v0;
  id v1;

  v0 = (void *)sub_23FB2F134();
  sub_23F693E04();
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleWithIdentifier_, v0);

  return v1;
}

uint64_t sub_23F7A3590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_23FB2F524();
  v10 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_23F7F0E60(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    sub_23F693E04();
    return v10;
  }
  else
  {
    v7 = v2;
    sub_23F693E04();
  }
  return v7;
}

uint64_t sub_23F7A3638(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = sub_23FB2EDD4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - v7;
  sub_23F7A4548(&qword_256EA8CA0, v9);
  v10 = sub_23F7A458C();
  v18 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      sub_23F7F0FB0();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v11;
    }
    while (v11);
    sub_23F693E04();
    return v18;
  }
  else
  {
    v15 = v10;
    sub_23F693E04();
  }
  return v15;
}

uint64_t sub_23F7A376C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  sub_23F6916B8(&qword_256EA98F8);
  sub_23F7A44CC();
  v2 = sub_23F7A458C();
  v9 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(a1 + 8 * v4++ + 32);
      swift_bridgeObjectRetain();
      sub_23F7F10C0(&v8, v5);
      swift_bridgeObjectRelease();
    }
    while (v3 != v4);
    sub_23F693E04();
    return v9;
  }
  else
  {
    v6 = v2;
    sub_23F693E04();
  }
  return v6;
}

uint64_t sub_23F7A3818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_23F7A4454();
  v2 = sub_23FB2F524();
  v12 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23F7F170C(&v11, v5, v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 4;
      --v3;
    }
    while (v3);
    sub_23F693E04();
    return v12;
  }
  else
  {
    v9 = v2;
    sub_23F693E04();
  }
  return v9;
}

uint64_t sub_23F7A38E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_23FB2F524();
  v9 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(a1 + 8 * i + 32);
      sub_23F7F18FC(&v8, v5);
    }
    sub_23F693E04();
    return v9;
  }
  else
  {
    v6 = v2;
    sub_23F693E04();
  }
  return v6;
}

uint64_t sub_23F7A3974(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  unint64_t v17;

  v15 = sub_23FB2F524();
  result = sub_23F78F084(a1, v16);
  v3 = v16[0];
  v4 = v16[1];
  v5 = v16[3];
  v6 = v17;
  v7 = (unint64_t)(v16[2] + 64) >> 6;
  if (!v17)
    goto LABEL_3;
LABEL_2:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v9 = v8 | (v5 << 6);
  while (1)
  {
    result = sub_23F7F18FC(&v14, *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9));
    if (v6)
      goto LABEL_2;
LABEL_3:
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v10 >= v7)
      goto LABEL_21;
    v11 = *(_QWORD *)(v4 + 8 * v10);
    v12 = v5 + 1;
    if (!v11)
    {
      v12 = v5 + 2;
      if (v5 + 2 >= v7)
        goto LABEL_21;
      v11 = *(_QWORD *)(v4 + 8 * v12);
      if (!v11)
      {
        v12 = v5 + 3;
        if (v5 + 3 >= v7)
          goto LABEL_21;
        v11 = *(_QWORD *)(v4 + 8 * v12);
        if (!v11)
        {
          v12 = v5 + 4;
          if (v5 + 4 >= v7)
            goto LABEL_21;
          v11 = *(_QWORD *)(v4 + 8 * v12);
          if (!v11)
          {
            v12 = v5 + 5;
            if (v5 + 5 >= v7)
              goto LABEL_21;
            v11 = *(_QWORD *)(v4 + 8 * v12);
            if (!v11)
            {
              v13 = v5 + 6;
              while (v13 < v7)
              {
                v11 = *(_QWORD *)(v4 + 8 * v13++);
                if (v11)
                {
                  v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return v15;
            }
          }
        }
      }
    }
LABEL_18:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v5 = v12;
  }
  __break(1u);
  return result;
}

void static Toolbox.toolboxAllowList()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a1;
  v2 = sub_23FB2C320();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23FB2E7F8();
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v32 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v32 - v10;
  swift_getKeyPath();
  sub_23F7A4580();
  sub_23F713F08();
  if ((v38 & 1) == 0)
  {
    v34 = v9;
    sub_23F693D90();
    v16 = 0xD00000000000001ALL;
    v17 = sub_23F7A3534();
    swift_getKeyPath();
    sub_23F7A4580();
    sub_23F713F08();
    if (v39)
    {
      v16 = v38;
      v18 = v39;
    }
    else
    {
      v18 = 0x800000023FB332E0;
    }
    swift_getKeyPath();
    sub_23F7A4580();
    sub_23F713F08();
    v19 = *(_QWORD *)(v38 + 16);
    swift_bridgeObjectRelease();
    v33 = v1;
    if (v19)
    {
      sub_23F693DFC();
      swift_getKeyPath();
      sub_23F7A4580();
      sub_23F713F08();
      v15 = sub_23F7A3590(v38);
    }
    else
    {
      if (v17)
      {
        v20 = sub_23F743CBC(v16, v18, 0x7473696C70, 0xE500000000000000, v17);
        if (v21)
        {
          v32 = v20;
          sub_23FB2E378();
          v22 = sub_23FB2E7E0();
          v23 = sub_23FB2F608();
          if (os_log_type_enabled(v22, v23))
          {
            v24 = (uint8_t *)sub_23F693DF4();
            *(_WORD *)v24 = 0;
            _os_log_impl(&dword_23F68F000, v22, v23, "Toolbox Allow List accessed", v24, 2u);
            sub_23F693DD0();
          }

          (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
          sub_23FB2C2C0();
          swift_bridgeObjectRelease();
          sub_23FB2C350();
          if (v1)
          {
            v33 = v1;
            sub_23F7A459C();

            return;
          }
          sub_23F7A459C();
          sub_23FB2C1F4();
          swift_allocObject();
          sub_23FB2C1E8();
          sub_23F7A42A8();
          sub_23FB2C1DC();
          v33 = 0;
          sub_23F7A45AC();
          swift_release();
          v15 = v38;
          goto LABEL_18;
        }
      }
      else
      {
        v17 = 0;
        sub_23F693DFC();
      }
      v15 = 0;
    }
LABEL_18:
    v25 = v34;
    sub_23FB2E378();
    sub_23F7A45B8();
    v26 = sub_23FB2E7E0();
    v27 = sub_23FB2F5E4();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)sub_23F693DF4();
      v38 = sub_23F693DF4();
      *(_DWORD *)v28 = 136315138;
      if (v15)
      {
        v40 = v15;
        sub_23F7A45B8();
        sub_23F6916B8(&qword_256EA98B8);
        sub_23F7A4350(&qword_256EA98C0, &qword_256EA98B8);
        sub_23F731C2C();
        v29 = sub_23FB2F368();
        v31 = v30;
        swift_bridgeObjectRelease();
      }
      else
      {
        v31 = 0xE800000000000000;
        v29 = 0x736C6F6F74206F6ELL;
      }
      swift_bridgeObjectRelease();
      v40 = sub_23F69334C(v29, v31, &v38);
      sub_23FB2F680();
      sub_23F7A45C4();
      sub_23F693DFC();
      _os_log_impl(&dword_23F68F000, v26, v27, "Allowed tools: %s either set through user default or ToolBoxAllowList.plist", v28, 0xCu);
      swift_arrayDestroy();
      sub_23F693DD0();
    }

    sub_23F7A45C4();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v37);
    goto LABEL_24;
  }
  sub_23FB2E378();
  v12 = sub_23FB2E7E0();
  v13 = sub_23FB2F608();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)sub_23F693DF4();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_23F68F000, v12, v13, "Use of allow list is disabled for Toolbox indexing", v14, 2u);
    sub_23F693DD0();
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v37);
  v15 = 0;
LABEL_24:
  *v35 = v15;
}

unint64_t ToolBoxAllowLists.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001ALL;
  else
    return 0xD000000000000022;
}

IntelligenceFlowPlannerSupport::ToolBoxAllowLists_optional __swiftcall ToolBoxAllowLists.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  IntelligenceFlowPlannerSupport::ToolBoxAllowLists_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23FB2F9E0();
  result.value = sub_23F693E04();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static ToolBoxAllowLists.allCases.getter()
{
  return &unk_250FEC408;
}

uint64_t ToolBoxAllowLists.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x305F305F31763174;
  else
    return 0xD000000000000010;
}

void sub_23F7A4130(char *a1, char *a2)
{
  sub_23F6BE310(*a1, *a2);
}

void sub_23F7A413C()
{
  sub_23F7F6ED4();
}

uint64_t sub_23F7A4144()
{
  return sub_23F7F7398();
}

void sub_23F7A414C()
{
  sub_23F7F7A6C();
}

IntelligenceFlowPlannerSupport::ToolBoxAllowLists_optional sub_23F7A4154(Swift::String *a1)
{
  return ToolBoxAllowLists.init(rawValue:)(*a1);
}

void sub_23F7A4160(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ToolBoxAllowLists.rawValue.getter();
  a1[1] = v2;
  sub_23F694CC8();
}

void sub_23F7A4180(_QWORD *a1@<X8>)
{
  *a1 = &unk_250FEC408;
}

uint64_t sub_23F7A4190()
{
  sub_23F7A4490();
  return sub_23FB2F38C();
}

uint64_t sub_23F7A41EC()
{
  sub_23F7A4490();
  return sub_23FB2F374();
}

void sub_23F7A4238(_BYTE *a1@<X8>)
{
  *a1 = sub_23FB2C6C8() & 1;
  sub_23F694CC8();
}

void sub_23F7A4260(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_23FB2C6D4();
  a1[1] = v2;
  sub_23F694CC8();
}

void sub_23F7A4284(uint64_t *a1@<X8>)
{
  *a1 = sub_23FB2C6BC();
  sub_23F694CC8();
}

unint64_t sub_23F7A42A8()
{
  unint64_t result;

  result = qword_256EA98C8;
  if (!qword_256EA98C8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolBoxAllowList, &type metadata for ToolBoxAllowList);
    atomic_store(result, (unint64_t *)&qword_256EA98C8);
  }
  return result;
}

unint64_t sub_23F7A42E8()
{
  unint64_t result;

  result = qword_256EA98D0;
  if (!qword_256EA98D0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolBoxAllowLists, &type metadata for ToolBoxAllowLists);
    atomic_store(result, (unint64_t *)&qword_256EA98D0);
  }
  return result;
}

uint64_t sub_23F7A4324()
{
  return sub_23F7A4350(&qword_256EA98D8, &qword_256EA98E0);
}

uint64_t sub_23F7A4350(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    sub_23F6AE310(a2);
    sub_23F72E3C8();
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ToolBoxAllowLists(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F7A43D4 + 4 * byte_23FB5FAB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F7A4408 + 4 * byte_23FB5FAB0[v4]))();
}

uint64_t sub_23F7A4408(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7A4410(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7A4418);
  return result;
}

uint64_t sub_23F7A4424(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7A442CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F7A4430(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7A4438(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolBoxAllowLists()
{
  return &type metadata for ToolBoxAllowLists;
}

unint64_t sub_23F7A4454()
{
  unint64_t result;

  result = qword_256EA98E8;
  if (!qword_256EA98E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB613F8, &type metadata for DenyTool);
    atomic_store(result, (unint64_t *)&qword_256EA98E8);
  }
  return result;
}

unint64_t sub_23F7A4490()
{
  unint64_t result;

  result = qword_256EA98F0;
  if (!qword_256EA98F0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolBoxAllowLists, &type metadata for ToolBoxAllowLists);
    atomic_store(result, (unint64_t *)&qword_256EA98F0);
  }
  return result;
}

unint64_t sub_23F7A44CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256EA9900;
  if (!qword_256EA9900)
  {
    v1 = sub_23F6AE310(&qword_256EA98F8);
    v2 = sub_23F7A4548(&qword_256EA9908, (void (*)(uint64_t))type metadata accessor for Candidate);
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE04C8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256EA9900);
  }
  return result;
}

uint64_t sub_23F7A4548(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    a2(255);
    sub_23F72E3C8();
  }
  return result;
}

uint64_t sub_23F7A4580()
{
  return sub_23FB2C710();
}

uint64_t sub_23F7A458C()
{
  return sub_23FB2F524();
}

uint64_t sub_23F7A459C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_23F7A45AC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23F6BC34C(v1, v0);
}

uint64_t sub_23F7A45B8()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_23F7A45C4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23F7A45D0(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v26 = sub_23FB2E8D0();
  v7 = *(_QWORD *)(v26 - 8);
  v8 = MEMORY[0x24BDAC7A8](v26);
  v25 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v27 = MEMORY[0x24BEE4AF8];
  v24 = *(_QWORD *)(a3 + 16);
  if (v24)
  {
    v14 = 0;
    v21 = a2;
    v22 = a3;
    v20 = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v13 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + v13 * v14, v26);
      v16 = a1(v12);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v26);
        swift_bridgeObjectRelease();
        swift_release();
        return v13;
      }
      if ((v16 & 1) != 0)
      {
        v23 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v23(v25, v12, v26);
        v17 = v27;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F7122F4();
          v17 = v27;
        }
        v18 = *(_QWORD *)(v17 + 16);
        if (v18 >= *(_QWORD *)(v17 + 24) >> 1)
        {
          sub_23F7122F4();
          v17 = v27;
        }
        *(_QWORD *)(v17 + 16) = v18 + 1;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v17 + v15 + v18 * v13, v25, v26);
        v27 = v17;
        a3 = v22;
        a1 = v20;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v26);
      }
      if (v24 == ++v14)
      {
        v13 = v27;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t Toolbox.toolDatabase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23F6AF9C8(v1, a1);
}

uint64_t Toolbox.clientActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Toolbox.clientActions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Toolbox.clientActions.modify())()
{
  return nullsub_1;
}

uint64_t Toolbox.schemaProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23F6AF9C8(v1 + 48, a1);
}

uint64_t Toolbox.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _UNKNOWN **v9;

  v3 = sub_23FB2EA74();
  result = sub_23FB2EA68();
  if (!v1)
  {
    v8 = v3;
    v9 = &protocol witness table for ToolDatabase;
    *(_QWORD *)&v7 = result;
    v5 = sub_23FB2EF00();
    v6 = sub_23FB2EEF4();
    a1[9] = v5;
    a1[10] = &protocol witness table for AssistantSchemaProvider;
    a1[6] = v6;
    result = sub_23F6F4E24(&v7, (uint64_t)a1);
    a1[5] = MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t Toolbox.init(toolDatabase:schemaProvider:clientActions:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_23F6F4E24(a1, a4);
  *(_QWORD *)(a4 + 40) = a3;
  return sub_23F6F4E24(a2, a4 + 48);
}

void Toolbox.entry(id:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v5 = v3;
  v58 = a2;
  sub_23F6916B8(&qword_256EA9910);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v48 = v9;
  sub_23F6D398C();
  v47 = sub_23FB2E834();
  v46[1] = *(_QWORD *)(v47 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v46[2] = v11;
  sub_23F6916B8(&qword_256EA9918);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B51A4();
  v54 = v13;
  sub_23F6D398C();
  v55 = sub_23FB2EF54();
  v46[4] = *(_QWORD *)(v55 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B51A4();
  v46[3] = v15;
  sub_23F6916B8(&qword_256EA8140);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v46 - v18;
  v20 = sub_23FB2E8D0();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v46 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v46 - v26;
  v28 = v5[5];
  v29 = *(_QWORD *)(v28 + 16);
  v57 = a3;
  v49 = v30;
  if (v29)
  {
    v50 = (char *)v46 - v26;
    v51 = v19;
    v52 = v4;
    v53 = v5;
    v31 = v28 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v32 = *(_QWORD *)(v21 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    v56 = v28;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v33(v25, v31, v20);
      if (sub_23FB2E8A0() == a1 && v34 == v58)
      {
        swift_bridgeObjectRelease();
        v5 = v53;
        goto LABEL_13;
      }
      v36 = a1;
      v37 = sub_23FB2FB78();
      swift_bridgeObjectRelease();
      if ((v37 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
      v31 += v32;
      --v29;
      a1 = v36;
      if (!v29)
      {
        sub_23F693DFC();
        v38 = 1;
        a3 = v57;
        v4 = v52;
        v5 = v53;
        v27 = v50;
        v19 = v51;
        goto LABEL_14;
      }
    }
    v5 = v53;
    a1 = v36;
LABEL_13:
    swift_bridgeObjectRelease();
    v19 = v51;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v51, v25, v20);
    v38 = 0;
    a3 = v57;
    v4 = v52;
    v27 = v50;
  }
  else
  {
    swift_bridgeObjectRetain();
    v38 = 1;
  }
LABEL_14:
  sub_23F7A690C((uint64_t)v19, v38);
  sub_23F693DFC();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v19, 1, v20) == 1)
  {
    sub_23F693B4C((uint64_t)v19, &qword_256EA8140);
    v39 = v5[3];
    v40 = v5[4];
    sub_23F6ADC98(v5, v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8))(a1, v58, v39, v40);
    sub_23F7A690C(v4, 0);
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
    v42 = v49;
    sub_23F7A6940();
    v43 = v57;
    v41(v57, v42, v20);
    v44 = sub_23F7A6938();
    swift_storeEnumTagMultiPayload();
    v45 = v43;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v27, v19, v20);
    sub_23F7A6940();
    v44 = sub_23F7A6938();
    swift_storeEnumTagMultiPayload();
    v45 = a3;
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v45, 0, 1, v44);
  sub_23F693DDC();
}

void AssistantSchemaIdentifier.init(id:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  sub_23F6916B8(&qword_256EA9920);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51D0();
  v8 = sub_23FB2EEAC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v26 - v13;
  v26[2] = a1;
  v26[3] = a2;
  sub_23F731C2C();
  v15 = (_QWORD *)sub_23FB2F6EC();
  swift_bridgeObjectRelease();
  if (v15[2] != 2)
  {
    sub_23F693DFC();
    v20 = 1;
LABEL_6:
    v25 = sub_23FB2EF54();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a3, v20, 1, v25);
    sub_23F693DDC();
    return;
  }
  v26[0] = a3;
  v16 = v15[8];
  v17 = v15[9];
  v18 = v15[10];
  v19 = v15[11];
  swift_bridgeObjectRetain();
  MEMORY[0x242673E24](v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  sub_23FB2EEB8();
  sub_23F77DD78(v3, 0);
  sub_23F6B633C((uint64_t)v14, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  if (v15[2])
  {
    v21 = v15[4];
    v22 = v15[5];
    v23 = v15[6];
    v24 = v15[7];
    swift_bridgeObjectRetain();
    sub_23F693DFC();
    MEMORY[0x242673E24](v21, v22, v23, v24);
    swift_bridgeObjectRelease();
    sub_23F6B633C((uint64_t)v12, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    a3 = v26[0];
    sub_23FB2EF18();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    v20 = 0;
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t type metadata accessor for Toolbox.Entry()
{
  uint64_t result;

  result = qword_256EA99B8;
  if (!qword_256EA99B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Toolbox.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  sub_23F6916B8(&qword_256EA8140);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v35 = v9;
  sub_23F6D398C();
  v10 = sub_23FB2E8D0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5CD4();
  MEMORY[0x24BDAC7A8](v12);
  v33 = (char *)&v30 - v13;
  v14 = v3[5];
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v30 = v3;
    v31 = a3;
    v32 = v4;
    v16 = v11;
    v17 = v14 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v36 = *(_QWORD *)(v16 + 72);
    v37 = v16;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    v34 = v14;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v18(v5, v17, v10);
      if (sub_23FB2E8A0() == a1 && v19 == v38)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      v21 = a1;
      v22 = sub_23FB2FB78();
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        break;
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v5, v10);
      v17 += v36;
      --v15;
      a1 = v21;
      if (!v15)
      {
        swift_bridgeObjectRelease();
        v23 = 1;
        a3 = v31;
        v3 = v30;
        v24 = v35;
        v11 = v37;
        goto LABEL_14;
      }
    }
    a1 = v21;
LABEL_13:
    swift_bridgeObjectRelease();
    v11 = v37;
    v24 = v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v35, v5, v10);
    v23 = 0;
    a3 = v31;
    v3 = v30;
  }
  else
  {
    swift_bridgeObjectRetain();
    v23 = 1;
    v24 = v35;
  }
LABEL_14:
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v24, v23, 1, v10);
  swift_bridgeObjectRelease();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v24, 1, v10) == 1)
  {
    sub_23F693B4C(v24, &qword_256EA8140);
    v25 = v3[3];
    v26 = v3[4];
    sub_23F6ADC98(v3, v25);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8))(a1, v38, v25, v26);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    v29 = v33;
    v28(v33, v24, v10);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(a3, v29, v10);
  }
}

uint64_t Toolbox.subscript.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  sub_23F6ADC98(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
}

uint64_t Toolbox.appIntents(schemaIdentifier:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v3 = sub_23FB2EF54();
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F693E0C();
  v47 = v5;
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v39 - v7;
  sub_23F6D398C();
  v8 = sub_23FB2E7F8();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F693E0C();
  v41 = v10;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v39 - v12;
  v15 = v1[3];
  v14 = v1[4];
  sub_23F6ADC98(v1, v15);
  sub_23F6916B8(&qword_256EA9928);
  v16 = sub_23FB2E810();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_23FB47010;
  v20 = (uint64_t *)(v19 + v18);
  v46 = a1;
  *v20 = sub_23FB2EF24();
  v20[1] = v21;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v17 + 104))(v20, *MEMORY[0x24BEB8E40], v16);
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v14 + 40))(v19, 0, 0, v15, v14);
  v23 = v40;
  v24 = v13;
  v25 = v44;
  v26 = v45;
  v27 = sub_23F6B6090();
  MEMORY[0x24BDAC7A8](v27);
  v28 = v46;
  *(&v39 - 2) = v46;
  result = sub_23F7A45D0(sub_23F7A6090, (uint64_t)(&v39 - 4), v22);
  if (!*(_QWORD *)(result + 16))
  {
    swift_bridgeObjectRelease();
    sub_23FB2E3CC();
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v23, v28, v26);
    v30 = sub_23FB2E7E0();
    v31 = sub_23FB2F5F0();
    v32 = os_log_type_enabled(v30, v31);
    v34 = v42;
    v33 = v43;
    if (v32)
    {
      v35 = (uint8_t *)sub_23F693DF4();
      v48 = sub_23F693DF4();
      v47 = v24;
      *(_DWORD *)v35 = 136315138;
      v36 = AssistantSchemaIdentifier.id.getter();
      v38 = sub_23F693EF0(v36, v37);
      sub_23F7A6950(v38);
      sub_23FB2F680();
      sub_23F693DFC();
      sub_23F7A6918();
      _os_log_impl(&dword_23F68F000, v30, v31, "no tools implement schema ID %s", v35, 0xCu);
      sub_23F7A6928();
      sub_23F693DD0();
    }
    sub_23F7A6918();

    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v33);
    return 0;
  }
  return result;
}

uint64_t sub_23F7A57D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  uint64_t v21;
  _QWORD v23[2];
  void (*v24)(_QWORD, _QWORD, _QWORD);
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v27 = sub_23FB2EF54();
  v29 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v28 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23FB2E81C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2E864();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v23[0] = v8;
    v23[1] = v2;
    v10 = v8 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *MEMORY[0x24BEB8E98];
    v12 = *(_QWORD *)(v5 + 72);
    v13 = *(void (**)(_QWORD, _QWORD, _QWORD))(v5 + 16);
    v26 = v5;
    v25 = v11;
    v24 = v13;
    do
    {
      v13(v7, v10, v4);
      if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == v11)
      {
        (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
        v15 = v28;
        v14 = v29;
        v16 = v12;
        v17 = v27;
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v28, v7, v27);
        sub_23F7A68AC();
        v18 = sub_23FB2F11C();
        v19 = *(void (**)(char *, uint64_t))(v14 + 8);
        v11 = v25;
        v20 = v15;
        v5 = v26;
        v21 = v17;
        v12 = v16;
        v13 = v24;
        v19(v20, v21);
        if ((v18 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
      v10 += v12;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t AssistantSchemaIdentifier.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD v6[2];

  v0 = sub_23FB2EEAC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[0] = sub_23FB2EF24();
  v6[1] = v4;
  sub_23FB2F254();
  sub_23FB2EF30();
  sub_23FB2EE94();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_23FB2F254();
  sub_23F6B6090();
  return v6[0];
}

uint64_t ToolDatabase.tools(query:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = sub_23FB2EB58();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23FB2C50C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23FB2C4E8();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEB9658], v0);
  v8 = sub_23FB2EA44();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t ToolDatabase.iterate(query:block:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_23FB2C50C();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = sub_23F750AE4();
  v6 = sub_23FB2EB58();
  v4[9] = v6;
  v4[10] = *(_QWORD *)(v6 - 8);
  v4[11] = sub_23F750AE4();
  return swift_task_switch();
}

uint64_t sub_23F7A5C18()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 104))(v0[11], *MEMORY[0x24BEB9658], v0[9]);
  sub_23FB2C4E8();
  v1 = (_QWORD *)swift_task_alloc();
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_23F7A5C98;
  return sub_23FB2EA5C();
}

uint64_t sub_23F7A5C98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 56);
  v5 = *(_QWORD *)(*v1 + 64);
  v7 = *v1;
  *(_QWORD *)(v7 + 104) = v0;
  swift_task_dealloc();
  sub_23F6B563C(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_23F7A5D68()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7A5DA0()
{
  return sub_23FB2EA80();
}

uint64_t sub_23F7A5DC0()
{
  return sub_23FB2EA8C();
}

uint64_t sub_23F7A5DE0()
{
  return sub_23FB2EA20();
}

uint64_t sub_23F7A5E00()
{
  return sub_23FB2EA50();
}

uint64_t sub_23F7A5E20()
{
  return sub_23FB2EA08();
}

uint64_t sub_23F7A5E40()
{
  return sub_23FB2EA14();
}

uint64_t sub_23F7A5E60()
{
  return sub_23FB2EA38();
}

uint64_t sub_23F7A5E80()
{
  return ToolDatabase.tools(query:)();
}

uint64_t sub_23F7A5EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7A5F08;
  return ToolDatabase.iterate(query:block:)(a1, a2, a3);
}

uint64_t sub_23F7A5F08()
{
  uint64_t v0;

  sub_23F7A68EC();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7A5F2C()
{
  return sub_23FB2EA2C();
}

Swift::Bool __swiftcall AssistantSchemaProviding.contains(schemaKind:)(Swift::String schemaKind)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2;
  v5 = v1;
  object = schemaKind._object;
  countAndFlagsBits = schemaKind._countAndFlagsBits;
  sub_23F6916B8(&qword_256EA9938);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51D0();
  v9 = sub_23FB2EF9C();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v3, 1, 1, v9);
  v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(v4 + 32))(countAndFlagsBits, object, v3, v5, v4);
  sub_23F693B4C(v3, &qword_256EA9938);
  v11 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRelease();
  return v11 != 0;
}

uint64_t sub_23F7A6010()
{
  return sub_23FB2EEDC();
}

uint64_t sub_23F7A6030()
{
  return sub_23FB2EEE8();
}

uint64_t sub_23F7A6050()
{
  return sub_23FB2EEC4();
}

uint64_t sub_23F7A6070()
{
  return sub_23FB2EED0();
}

uint64_t sub_23F7A6090(uint64_t a1)
{
  uint64_t v1;

  return sub_23F7A57D4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t destroy for Toolbox(uint64_t a1)
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  swift_bridgeObjectRelease();
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 48);
}

uint64_t initializeWithCopy for Toolbox(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a2 + 48;
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 48, v5, v7);
  return a1;
}

uint64_t *assignWithCopy for Toolbox(uint64_t *a1, uint64_t *a2)
{
  sub_23F785324(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23F785324(a1 + 6, a2 + 6);
  return a1;
}

void *initializeWithTake for Toolbox(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for Toolbox(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for Toolbox(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Toolbox(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Toolbox()
{
  return &type metadata for Toolbox;
}

uint64_t *initializeBufferWithCopyOfBuffer for Toolbox.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      v6 = sub_23FB2E834();
    else
      v6 = sub_23FB2E8D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Toolbox.Entry(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = sub_23FB2E834();
  }
  else
  {
    if (result > 1)
      return result;
    v3 = sub_23FB2E8D0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t initializeWithCopy for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 2)
    v4 = sub_23FB2E834();
  else
    v4 = sub_23FB2E8D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_23F7A6540(a1);
    if (swift_getEnumCaseMultiPayload() == 2)
      v4 = sub_23FB2E834();
    else
      v4 = sub_23FB2E8D0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23F7A6540(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Toolbox.Entry();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 2)
    v4 = sub_23FB2E834();
  else
    v4 = sub_23FB2E8D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_23F7A6540(a1);
    if (swift_getEnumCaseMultiPayload() == 2)
      v4 = sub_23FB2E834();
    else
      v4 = sub_23FB2E8D0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23F7A669C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23FB2E8D0();
  if (v1 <= 0x3F)
  {
    result = sub_23FB2E834();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of ToolStoring.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ToolStoring.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ToolStoring.localTools.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ToolStoring.types.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ToolStoring.localTools(implementing:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of ToolStoring.localTools(accepting:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of ToolStoring.type(matching:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ToolStoring.tools(query:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ToolStoring.iterate(query:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 72) + *(_QWORD *)(a5 + 72));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23F7A5F08;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of ToolStoring.get<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.tools.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.types.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.knownToolKinds()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.tools(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.contains(schemaKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

unint64_t sub_23F7A68AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA8CB8;
  if (!qword_256EA8CB8)
  {
    v1 = sub_23FB2EF54();
    result = MEMORY[0x242674E5C](MEMORY[0x24BEBA600], v1);
    atomic_store(result, (unint64_t *)&qword_256EA8CB8);
  }
  return result;
}

uint64_t sub_23F7A68EC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_23F7A690C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, 1, v2);
}

uint64_t sub_23F7A6918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_23F7A6928()
{
  return swift_arrayDestroy();
}

uint64_t sub_23F7A6938()
{
  return type metadata accessor for Toolbox.Entry();
}

uint64_t sub_23F7A6940()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

uint64_t sub_23F7A6950(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

char *sub_23F7A6964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_23FB2F170();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23FB2C104();
  swift_allocObject();
  sub_23FB2C0F8();
  sub_23FB2E9FC();
  sub_23F7A78D0((uint64_t)&unk_256EAA280);
  v4 = sub_23FB2C0E0();
  v6 = v5;
  swift_release();
  if (!v0)
  {
    sub_23FB2F164();
    v7 = sub_23FB2F158();
    if (v8)
    {
      v3 = (char *)v7;
    }
    else
    {
      sub_23F6BD090();
      swift_allocError();
      *(_QWORD *)v10 = 0xD00000000000007FLL;
      *(_QWORD *)(v10 + 8) = 0x800000023FB30F10;
      *(_OWORD *)(v10 + 16) = xmmword_23FB4C9F0;
      *(_QWORD *)(v10 + 32) = 0x800000023FB30F90;
      swift_willThrow();
    }
    sub_23F6BC34C(v4, v6);
  }
  return v3;
}

void sub_23F7A6AF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7DC9F4();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_23F7ADCE0(v5);
  *a1 = v2;
}

BOOL static ToolBoxError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ToolBoxError.hash(into:)()
{
  sub_23F70D9B8();
  sub_23F694CC8();
}

uint64_t sub_23F7A6BA0(uint64_t a1, uint64_t a2)
{
  return ToolboxDelegate.embeddingSnippetForToolInvocation(_:)(*(Swift::String *)&a1)._countAndFlagsBits;
}

Swift::String __swiftcall ToolboxDelegate.embeddingSnippetForToolInvocation(_:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  swift_bridgeObjectRetain();
  sub_23F6B6190();
  sub_23F694CC8();
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t sub_23F7A6BDC()
{
  return ToolboxDelegate.embeddingSnippetForAssistantSchema(_:)();
}

uint64_t ToolboxDelegate.embeddingSnippetForAssistantSchema(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_23FB2EEAC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B6B5C();
  v3 = sub_23FB2EF24();
  sub_23FB2EF30();
  sub_23FB2EE94();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  swift_bridgeObjectRetain();
  sub_23F7B0BC4();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  sub_23F6B6090();
  return v3;
}

BOOL static ToolboxEmbeddingModel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ToolboxEmbeddingModel.hash(into:)()
{
  sub_23F70D9B8();
  sub_23F694CC8();
}

void ToolboxEmbeddingModel.hashValue.getter()
{
  sub_23F6B53C4();
  sub_23F6B5A48();
  sub_23F6B5608();
  sub_23F6B5398();
}

uint64_t ToolboxVersion.versionNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ToolboxVersion.versionNumber.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ToolboxVersion.versionNumber.modify())()
{
  return nullsub_1;
}

uint64_t ToolboxVersion.client.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7B0924();
  v0 = sub_23F6B5994();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t type metadata accessor for ToolboxVersion(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_2543467D0);
}

uint64_t ToolboxVersion.client.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7B0924();
  sub_23F7B0DC4();
  v0 = sub_23F6B6190();
  return sub_23F6B64B0(v0, v1, v2, v3);
}

uint64_t (*ToolboxVersion.client.modify())()
{
  type metadata accessor for ToolboxVersion(0);
  return nullsub_1;
}

uint64_t ToolboxVersion.init(versionNumber:client:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  *a2 = a1;
  sub_23F7B0924();
  sub_23F7B0DC4();
  v2 = sub_23F6B6190();
  return sub_23F6B64B0(v2, v3, v4, v5);
}

uint64_t ToolsOverride.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[7];

  sub_23F6ADC98(a1, a1[3]);
  sub_23F7B0BC4();
  sub_23FB2FCA4();
  if (!v2)
  {
    sub_23F6ADC98(v6, v6[3]);
    sub_23F6916B8(&qword_256EA99F8);
    sub_23F7A715C((uint64_t)&unk_256EA9A00);
    sub_23FB2FB84();
    v4 = v6[6];
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v6);
    *a2 = v4;
  }
  return sub_23F6B6E68();
}

unint64_t sub_23F7A6EF4()
{
  unint64_t result;

  result = qword_256EA9A08;
  if (!qword_256EA9A08)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolDefinitionOverrride, &type metadata for ToolDefinitionOverrride);
    atomic_store(result, (unint64_t *)&qword_256EA9A08);
  }
  return result;
}

uint64_t sub_23F7A6F30(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x736C6F6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F7A6FAC()
{
  return 0x736C6F6F74;
}

uint64_t sub_23F7A6FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7A6F30(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F7A6FEC()
{
  sub_23F7A7120();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A7014()
{
  sub_23F7A7120();
  return sub_23FB2FD1C();
}

void ToolsOverride.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  sub_23F6B5220();
  v2 = sub_23F6916B8(&qword_256EA9A10);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F693EB0();
  v4 = (_QWORD *)sub_23F7B0BC4();
  sub_23F6ADC98(v4, v5);
  sub_23F7A7120();
  sub_23F6F33A0();
  sub_23F6916B8(&qword_256EA99F8);
  sub_23F7A715C((uint64_t)&unk_256EA9A20);
  sub_23FB2FB18();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  sub_23F6B5100();
}

unint64_t sub_23F7A7120()
{
  unint64_t result;

  result = qword_256EA9A18;
  if (!qword_256EA9A18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60DE4, &type metadata for ToolsOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA9A18);
  }
  return result;
}

unint64_t sub_23F7A715C(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  _QWORD v10[2];

  result = sub_23F6B6A68(a1);
  if (!result)
  {
    v6 = v5;
    v7 = v4;
    v8 = v3;
    v9 = sub_23F6AE310(&qword_256EA99F8);
    v10[0] = v7;
    v10[1] = v8();
    result = MEMORY[0x242674E5C](v6, v9, v10);
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_23F7A71CC()
{
  unint64_t result;

  result = qword_256EA9A28;
  if (!qword_256EA9A28)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolDefinitionOverrride, &type metadata for ToolDefinitionOverrride);
    atomic_store(result, (unint64_t *)&qword_256EA9A28);
  }
  return result;
}

void sub_23F7A7208()
{
  sub_23FB2F9E0();
  sub_23F693E04();
  sub_23F694CC8();
}

uint64_t sub_23F7A724C(char a1)
{
  if (!a1)
    return sub_23F7B0B18();
  if (a1 == 1)
    return 0x6D6178655F67656ELL;
  return 0x7470697263736564;
}

uint64_t sub_23F7A72A0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ToolsOverride.init(from:)(a1, a2);
}

void sub_23F7A72B4()
{
  ToolsOverride.encode(to:)();
}

void sub_23F7A72C8(unsigned __int8 *a1, char *a2)
{
  sub_23F6BE0F4(*a1, *a2);
}

void sub_23F7A72D4()
{
  char *v0;

  sub_23F7F6EE0(*v0);
}

uint64_t sub_23F7A72DC(uint64_t a1)
{
  char *v1;

  return sub_23F7F7280(a1, *v1);
}

void sub_23F7A72E4(uint64_t a1)
{
  char *v1;

  sub_23F7F7B8C(a1, *v1);
}

void sub_23F7A72EC(_BYTE *a1@<X8>)
{
  char v2;

  sub_23F7A7208();
  *a1 = v2;
}

void sub_23F7A7318(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *a1 = sub_23F7A724C(*v1);
  a1[1] = v3;
  sub_23F694CC8();
}

uint64_t sub_23F7A733C()
{
  char *v0;

  return sub_23F7A724C(*v0);
}

uint64_t sub_23F7A7344@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23F7A7248();
  *a1 = result;
  return result;
}

uint64_t sub_23F7A7368()
{
  sub_23F7A74F4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A7390()
{
  sub_23F7A74F4();
  return sub_23FB2FD1C();
}

void ToolDefinitionOverrride.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F6B5220();
  v3 = v2;
  v4 = sub_23F6916B8(&qword_256EA9A30);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B52B0();
  sub_23F6ADC98(v3, v3[3]);
  sub_23F7A74F4();
  sub_23FB2FCC8();
  sub_23F6916B8(&qword_256EA1918);
  sub_23F705BF0((uint64_t)&unk_256EA1920);
  sub_23F7B0960();
  if (!v0)
  {
    sub_23F7B0960();
    sub_23FB2FADC();
  }
  sub_23F6B56E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_23F6B6834();
  sub_23F6B5100();
}

unint64_t sub_23F7A74F4()
{
  unint64_t result;

  result = qword_256EA9A38;
  if (!qword_256EA9A38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60D94, &unk_250FF8050);
    atomic_store(result, (unint64_t *)&qword_256EA9A38);
  }
  return result;
}

void ToolDefinitionOverrride.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;

  sub_23F6B5220();
  v13 = v12;
  v15 = v14;
  v16 = sub_23F6916B8(&qword_256EA9A40);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B53AC();
  sub_23F6ADC98(v13, v13[3]);
  sub_23F7A74F4();
  sub_23F6B5DA0();
  if (v10)
  {
    sub_23F6B6E68();
  }
  else
  {
    sub_23F6916B8(&qword_256EA1918);
    sub_23F705BF0((uint64_t)&qword_256EA1930);
    sub_23F7B0900();
    swift_bridgeObjectRetain();
    sub_23F7B0900();
    swift_bridgeObjectRetain();
    v18 = sub_23FB2FA40();
    v20 = v19;
    v21 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    v22 = v18;
    sub_23F6B563C(v11, v21);
    swift_bridgeObjectRetain();
    sub_23F6B54F8();
    sub_23F6B6A48();
    *v15 = a10;
    v15[1] = a10;
    v15[2] = v22;
    v15[3] = v20;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23F6B5100();
}

void sub_23F7A7708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  ToolDefinitionOverrride.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_23F7A771C()
{
  ToolDefinitionOverrride.encode(to:)();
}

uint64_t ToolBoxToolSearchResult.toolDefinition.getter()
{
  return sub_23F7A7E90((void (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

float ToolBoxToolSearchResult.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for ToolBoxToolSearchResult(0) + 20));
}

uint64_t type metadata accessor for ToolBoxToolSearchResult(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA9C70);
}

uint64_t sub_23F7A7770(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65726F6373;
  else
    return 0x696665446C6F6F74;
}

uint64_t sub_23F7A77B0()
{
  char *v0;

  return sub_23F7A7770(*v0);
}

void sub_23F7A77B8(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_23F7A7EF8(a1, a2);
  *a3 = v4;
}

uint64_t sub_23F7A77DC()
{
  sub_23F7A7860();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A7804()
{
  sub_23F7A7860();
  return sub_23FB2FD1C();
}

void ToolBoxToolSearchResult.encode(to:)()
{
  sub_23F7A8074();
}

unint64_t sub_23F7A7860()
{
  unint64_t result;

  result = qword_256EA9A50;
  if (!qword_256EA9A50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60D44, &type metadata for ToolBoxToolSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA9A50);
  }
  return result;
}

void ToolBoxToolSearchResult.init(from:)(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  sub_23F7A81F0(a1, &qword_256EA9A58, type metadata accessor for ToolBoxToolSearchResult, (void (*)(void))sub_23F7A7860, a2);
}

void sub_23F7A78D0(uint64_t a1)
{
  void (*v1)(uint64_t);

  if (!sub_23F6B6A68(a1))
  {
    v1(255);
    sub_23F72E3C8();
  }
  sub_23F694CC8();
}

void sub_23F7A7904(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  ToolBoxToolSearchResult.init(from:)(a1, a2);
}

void sub_23F7A7918()
{
  ToolBoxToolSearchResult.encode(to:)();
}

uint64_t ToolBoxAssistantSchemaSearchResult.assistantSchemaIdentifier.getter()
{
  return sub_23F7A7E90((void (*)(_QWORD))MEMORY[0x24BEBA5E0]);
}

float ToolBoxAssistantSchemaSearchResult.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for ToolBoxAssistantSchemaSearchResult(0) + 20));
}

uint64_t type metadata accessor for ToolBoxAssistantSchemaSearchResult(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA9D00);
}

uint64_t sub_23F7A796C(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000019 && a2 == 0x800000023FB33520 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7A7A4C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65726F6373;
  else
    return 0xD000000000000019;
}

uint64_t sub_23F7A7A84()
{
  char *v0;

  return sub_23F7A7A4C(*v0);
}

uint64_t sub_23F7A7A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7A796C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7A7AB0()
{
  sub_23F7A7C0C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A7AD8()
{
  sub_23F7A7C0C();
  return sub_23FB2FD1C();
}

uint64_t ToolBoxAssistantSchemaSearchResult.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_23F6916B8(&qword_256EA9A60);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B52B0();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7A7C0C();
  sub_23F6F33A0();
  sub_23F7B0D00();
  sub_23F7A78D0((uint64_t)&unk_256EA9A70);
  sub_23FB2FB18();
  if (!v1)
  {
    type metadata accessor for ToolBoxAssistantSchemaSearchResult(0);
    sub_23F7B0AD8();
    sub_23FB2FB00();
  }
  return sub_23F6B56E0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

unint64_t sub_23F7A7C0C()
{
  unint64_t result;

  result = qword_256EA9A68;
  if (!qword_256EA9A68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60CF4, &type metadata for ToolBoxAssistantSchemaSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA9A68);
  }
  return result;
}

void ToolBoxAssistantSchemaSearchResult.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = sub_23F7B0D00();
  v22 = *(_QWORD *)(v21 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B5420(v6, v17);
  v20 = sub_23F6916B8(&qword_256EA9A78);
  v7 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6BD134();
  v10 = v9 - v8;
  v11 = type metadata accessor for ToolBoxAssistantSchemaSearchResult(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5208();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7A7C0C();
  sub_23FB2FCB0();
  if (v2)
  {
    sub_23F70DA94();
  }
  else
  {
    sub_23F7A78D0((uint64_t)&unk_256EA9A80);
    sub_23FB2FA7C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v3, v19, v21);
    sub_23FB2FA64();
    v14 = v13;
    sub_23F6B563C(v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    *(_DWORD *)(v3 + *(int *)(v11 + 20)) = v14;
    sub_23F6D8A14(v3, a2, type metadata accessor for ToolBoxAssistantSchemaSearchResult);
    sub_23F70DA94();
    v15 = sub_23F6B5994();
    sub_23F6D3508(v15, v16);
  }
  sub_23F6B6834();
  sub_23F70D684();
}

void sub_23F7A7E5C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ToolBoxAssistantSchemaSearchResult.init(from:)(a1, a2);
}

uint64_t sub_23F7A7E70(_QWORD *a1)
{
  return ToolBoxAssistantSchemaSearchResult.encode(to:)(a1);
}

uint64_t ToolBoxClientActionSearchResult.toolDefinition.getter()
{
  return sub_23F7A7E90((void (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

uint64_t sub_23F7A7E90(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  a1(0);
  v1 = sub_23F6B5994();
  return sub_23F6B64B0(v1, v2, v3, v4);
}

float ToolBoxClientActionSearchResult.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for ToolBoxClientActionSearchResult(0) + 20));
}

uint64_t type metadata accessor for ToolBoxClientActionSearchResult(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA9D90);
}

void sub_23F7A7EF8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v5;

  v2 = a1 == 0x696665446C6F6F74 && a2 == 0xEE006E6F6974696ELL;
  if (v2 || (sub_23F6B5280() & 1) != 0 || (a1 == 0x65726F6373 ? (v5 = a2 == 0xE500000000000000) : (v5 = 0), v5))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23F6B5280();
    sub_23F693E04();
  }
  sub_23F694CC8();
}

uint64_t sub_23F7A7FF0()
{
  sub_23F7A8180();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A8018()
{
  sub_23F7A8180();
  return sub_23FB2FD1C();
}

void ToolBoxClientActionSearchResult.encode(to:)()
{
  sub_23F7A8074();
}

void sub_23F7A8074()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD);
  void (*v3)(void);
  void (*v4)(void);
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD);

  sub_23F6B5220();
  v10 = v2;
  v4 = v3;
  v6 = v5;
  v8 = sub_23F6916B8(v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B52B0();
  sub_23F6ADC98(v6, v6[3]);
  v4();
  sub_23FB2FCC8();
  sub_23F7B0CF8();
  sub_23F7A78D0((uint64_t)&qword_256EA8168);
  sub_23F7B0D3C();
  if (!v0)
  {
    v10(0);
    sub_23F7B0AD8();
    sub_23FB2FB00();
  }
  sub_23F6B56E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  sub_23F6B6834();
  sub_23F6B5100();
}

unint64_t sub_23F7A8180()
{
  unint64_t result;

  result = qword_256EA9A90;
  if (!qword_256EA9A90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60CA4, &type metadata for ToolBoxClientActionSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA9A90);
  }
  return result;
}

void ToolBoxClientActionSearchResult.init(from:)(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  sub_23F7A81F0(a1, &qword_256EA9A98, type metadata accessor for ToolBoxClientActionSearchResult, (void (*)(void))sub_23F7A8180, a2);
}

void sub_23F7A81F0(void (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  char v30;
  char v31;

  v28 = a4;
  v24 = a5;
  v26 = sub_23F7B0CF8();
  v23 = *(_QWORD *)(v26 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5C10(v9, v21);
  v25 = sub_23F6916B8(a2);
  v10 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  sub_23F6B573C();
  v22 = a3;
  v11 = a3(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - v12;
  sub_23F6ADC98(a1, *((_QWORD *)a1 + 3));
  v28();
  v14 = v29;
  sub_23FB2FCB0();
  if (v14)
  {
    sub_23F70DA94();
  }
  else
  {
    v28 = a1;
    v29 = v10;
    v16 = v23;
    v15 = v24;
    v31 = 0;
    sub_23F7A78D0((uint64_t)&qword_256EA8198);
    v17 = v26;
    sub_23FB2FA7C();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v13, v27, v17);
    v30 = 1;
    sub_23FB2FA64();
    v19 = v18;
    sub_23F7B094C();
    *(_DWORD *)&v13[*(int *)(v11 + 20)] = v19;
    v20 = v22;
    sub_23F6D8A14((uint64_t)v13, v15, v22);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v28);
    sub_23F6D3508((uint64_t)v13, v20);
  }
  sub_23F70D684();
}

void sub_23F7A83FC(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  ToolBoxClientActionSearchResult.init(from:)(a1, a2);
}

void sub_23F7A8410()
{
  ToolBoxClientActionSearchResult.encode(to:)();
}

uint64_t ToolboxCustomKeyResult.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v13;

  v4 = sub_23F7B0C04();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B6B5C();
  v6 = sub_23FB2E8D0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolboxCustomKeyResult(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5208();
  sub_23F6D8A14(v0, v2, v11);
  if (sub_23F7B0C94() == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
    sub_23FB2FC68();
    sub_23F7A78D0((uint64_t)&qword_256EA8CB0);
    sub_23FB2F074();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v2, v6);
    sub_23FB2FC68();
    sub_23F7A78D0((uint64_t)&unk_256EA9AA0);
    sub_23FB2F074();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t type metadata accessor for ToolboxCustomKeyResult(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA9E38);
}

uint64_t static ToolboxCustomKeyResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v3 = sub_23FB2EF54();
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B5C10(v5, v27);
  v6 = sub_23FB2E8D0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolboxCustomKeyResult(0);
  sub_23F693E20();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  sub_23F6916B8(&qword_256EA9AA8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6BD134();
  v19 = v18 - v17;
  v21 = v18 - v17 + *(int *)(v20 + 48);
  sub_23F6D8A14(a1, v18 - v17, type metadata accessor for ToolboxCustomKeyResult);
  sub_23F6D8A14(v30, v21, type metadata accessor for ToolboxCustomKeyResult);
  if (sub_23F7B0C94() == 1)
  {
    sub_23F6D8A14(v19, (uint64_t)v13, type metadata accessor for ToolboxCustomKeyResult);
    if (sub_23F7B0C94() == 1)
    {
      v22 = v27;
      sub_23F72E0C8(v27, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32));
      v23 = sub_23FB2EF0C();
      sub_23F6D3874(v22);
      v24 = (uint64_t)v13;
LABEL_9:
      sub_23F6D3874(v24);
      sub_23F6D3508(v19, type metadata accessor for ToolboxCustomKeyResult);
      return v23 & 1;
    }
    v25 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  }
  else
  {
    sub_23F6D8A14(v19, (uint64_t)v15, type metadata accessor for ToolboxCustomKeyResult);
    if (sub_23F7B0C94() != 1)
    {
      sub_23F72E0C8((uint64_t)v9, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
      v23 = sub_23FB2E894();
      sub_23F6D3874((uint64_t)v9);
      v24 = (uint64_t)v15;
      goto LABEL_9;
    }
    v25 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  sub_23F77E660(v25, &qword_256EA9AA8);
  v23 = 0;
  return v23 & 1;
}

uint64_t sub_23F7A8824(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x696665446C6F6F74 && a2 == 0xEE006E6F6974696ELL;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E61747369737361 && a2 == 0xEF616D6568635374)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7A8958(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E61747369737361;
  else
    return 0x696665446C6F6F74;
}

uint64_t sub_23F7A89A8()
{
  sub_23F7A8DD0();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A89D0()
{
  sub_23F7A8DD0();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7A89F8()
{
  char *v0;

  return sub_23F7A8958(*v0);
}

uint64_t sub_23F7A8A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7A8824(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7A8A24()
{
  sub_23F7A8D94();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A8A4C()
{
  sub_23F7A8D94();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7A8A74()
{
  sub_23F7A8E0C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7A8A9C()
{
  sub_23F7A8E0C();
  return sub_23FB2FD1C();
}

void ToolboxCustomKeyResult.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_23F6B5220();
  v24 = v0;
  v4 = v3;
  v22 = sub_23F6916B8(&qword_256EA9AB0);
  v20 = *(_QWORD *)(v22 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v19 = v6;
  v21 = sub_23F7B0D00();
  v18 = *(_QWORD *)(v21 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v17 = v8;
  sub_23F6916B8(&qword_256EA9AB8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F78F27C();
  v16 = sub_23FB2E8D0();
  v15 = *(_QWORD *)(v16 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B52B0();
  type metadata accessor for ToolboxCustomKeyResult(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B573C();
  v23 = *(_QWORD *)(sub_23F6916B8(&qword_256EA9AC0) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F693EB0();
  sub_23F6ADC98(v4, v4[3]);
  sub_23F7A8D94();
  sub_23FB2FCC8();
  sub_23F6D8A14(v24, v2, type metadata accessor for ToolboxCustomKeyResult);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v2, v21);
    sub_23F7B0E54();
    sub_23F7B0C30();
    sub_23F7A78D0((uint64_t)&unk_256EA9A70);
    sub_23F7B0D3C();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v22);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v21);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v1, v2, v16);
    sub_23F7A8E0C();
    sub_23F7B0C30();
    sub_23F7A78D0((uint64_t)&qword_256EA8168);
    sub_23F7B0D3C();
    v13 = sub_23F7B0BC4();
    v14(v13);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v16);
  }
  sub_23F7B0A1C(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  sub_23F6B5100();
}

unint64_t sub_23F7A8D94()
{
  unint64_t result;

  result = qword_256EA9AC8;
  if (!qword_256EA9AC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60C54, &type metadata for ToolboxCustomKeyResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA9AC8);
  }
  return result;
}

unint64_t sub_23F7A8DD0()
{
  unint64_t result;

  result = qword_256EA9AD0;
  if (!qword_256EA9AD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60C04, &type metadata for ToolboxCustomKeyResult.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA9AD0);
  }
  return result;
}

unint64_t sub_23F7A8E0C()
{
  unint64_t result;

  result = qword_256EA9AD8;
  if (!qword_256EA9AD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60BB4, &type metadata for ToolboxCustomKeyResult.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EA9AD8);
  }
  return result;
}

void ToolboxCustomKeyResult.hashValue.getter()
{
  sub_23F6B53C4();
  ToolboxCustomKeyResult.hash(into:)();
  sub_23F6B5608();
  sub_23F6B5398();
}

void ToolboxCustomKeyResult.init(from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;

  sub_23F6B5220();
  v51 = v0;
  v2 = v1;
  v44 = v3;
  v4 = sub_23F6916B8(&qword_256EA9AE0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B5C10(v6, (uint64_t)v40);
  v7 = sub_23F6916B8(&qword_256EA9AE8);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5420(v9, (uint64_t)v40);
  v10 = sub_23F6916B8(&qword_256EA9AF0);
  v49 = *(_QWORD *)(v10 - 8);
  v50 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  v12 = sub_23F78F27C();
  v13 = type metadata accessor for ToolboxCustomKeyResult(v12);
  sub_23F693E20();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v40 - v21;
  sub_23F6ADC98(v2, v2[3]);
  sub_23F7A8D94();
  v23 = v51;
  sub_23F6B5DA0();
  if (v23)
    goto LABEL_8;
  v41 = v17;
  v42 = v20;
  v40 = v22;
  v43 = v13;
  v51 = v2;
  v24 = sub_23FB2FA94();
  v25 = *(_QWORD *)(v24 + 16);
  if (!v25
    || (v26 = *(_BYTE *)(v24 + 32),
        sub_23F6B4E44(1, v25, v24, v24 + 32, 0, (2 * v25) | 1),
        v28 = v27,
        v30 = v29,
        swift_bridgeObjectRelease(),
        v28 != v30 >> 1))
  {
    v33 = v49;
    v34 = v43;
    v35 = sub_23FB2F818();
    swift_allocError();
    v37 = v36;
    sub_23F6916B8(&qword_256EA1870);
    *v37 = v34;
    sub_23FB2FA04();
    sub_23F7B0B78();
    sub_23FB2F80C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x24BEE26D0], v35);
    swift_willThrow();
    sub_23F6B5770();
    sub_23F7B0A1C(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
    v2 = v51;
LABEL_8:
    v38 = (uint64_t)v2;
    goto LABEL_9;
  }
  if ((v26 & 1) != 0)
  {
    sub_23F7B0E54();
    sub_23F7B0AA8();
    sub_23F7B0D00();
    sub_23F7A78D0((uint64_t)&unk_256EA9A80);
    v31 = (uint64_t)v41;
    sub_23F7B0B50();
    v32 = v49;
    sub_23F7B0A0C(v47);
  }
  else
  {
    sub_23F7A8E0C();
    sub_23F7B0AA8();
    sub_23F7B0CF8();
    sub_23F7A78D0((uint64_t)&qword_256EA8198);
    v31 = (uint64_t)v42;
    sub_23F7B0B50();
    v32 = v49;
    sub_23F7B0A0C(v45);
  }
  sub_23F6B5770();
  sub_23F7B0A1C(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  swift_storeEnumTagMultiPayload();
  v39 = (uint64_t)v40;
  sub_23F7AE5AC(v31, (uint64_t)v40);
  sub_23F7AE5AC(v39, v44);
  v38 = (uint64_t)v51;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v38);
  sub_23F6B5100();
}

void sub_23F7A9264()
{
  ToolboxCustomKeyResult.init(from:)();
}

void sub_23F7A9278()
{
  ToolboxCustomKeyResult.encode(to:)();
}

void sub_23F7A9294()
{
  sub_23F6B63E0();
  ToolboxCustomKeyResult.hash(into:)();
  sub_23F6B5608();
  sub_23F6B5398();
}

IntelligenceFlowPlannerSupport::ToolBoxToolType_optional __swiftcall ToolBoxToolType.init(_:)(Swift::String a1)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  IntelligenceFlowPlannerSupport::ToolBoxToolType_optional result;
  char v7;
  BOOL v10;
  char v12;

  v2 = v1;
  v3 = a1._countAndFlagsBits == 0x6E61747369737361 && a1._object == (void *)0xEF616D6568635374;
  if (v3 || (object = a1._object, countAndFlagsBits = a1._countAndFlagsBits, (sub_23F7B07F0() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
    goto LABEL_7;
  }
  if (countAndFlagsBits == 0x7261507473726966 && object == (void *)0xED00007070417974)
  {
    sub_23F7B0D08();
LABEL_15:
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_7;
  }
  if ((sub_23F7B07F0() & 1) != 0)
    goto LABEL_15;
  if (countAndFlagsBits == 0x7261506472696874 && object == (void *)0xED00007070417974)
  {
    sub_23F7B0D08();
LABEL_23:
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_7;
  }
  if ((sub_23F7B07F0() & 1) != 0)
    goto LABEL_23;
  v10 = countAndFlagsBits == 0x6341746E65696C63 && object == (void *)0xEC0000006E6F6974;
  if (v10 || (sub_23F7B07F0() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else if (countAndFlagsBits == 0x79747265706F7270 && object == (void *)0xEF73726574746553)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 4;
  }
  else
  {
    v12 = sub_23F7B07F0();
    result.value = sub_23F693DFC();
    if ((v12 & 1) != 0)
      v7 = 4;
    else
      v7 = 5;
  }
LABEL_7:
  *v2 = v7;
  return result;
}

uint64_t ToolBoxToolType.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F7A9558 + 4 * byte_23FB5FD30[*v0]))(0x6E61747369737361, 0xEF616D6568635374);
}

uint64_t sub_23F7A9558()
{
  return 0x7261507473726966;
}

uint64_t sub_23F7A958C()
{
  return 0x6341746E65696C63;
}

uint64_t sub_23F7A95AC()
{
  return 0x79747265706F7270;
}

IntelligenceFlowPlannerSupport::ToolBoxToolType_optional __swiftcall ToolBoxToolType.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (IntelligenceFlowPlannerSupport::ToolBoxToolType_optional)rawValue;
}

void *static ToolBoxToolType.allCases.getter()
{
  return &unk_250FEC498;
}

uint64_t ToolBoxToolType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void sub_23F7A95F8()
{
  sub_23F7F6EEC();
}

void sub_23F7A9600()
{
  sub_23F7F7808();
}

void sub_23F7A9608()
{
  sub_23F7F78A0();
}

IntelligenceFlowPlannerSupport::ToolBoxToolType_optional sub_23F7A9610(Swift::Int64 *a1)
{
  return ToolBoxToolType.init(rawValue:)(*a1);
}

void sub_23F7A9618(uint64_t *a1@<X8>)
{
  *a1 = ToolBoxToolType.rawValue.getter();
  sub_23F694CC8();
}

void sub_23F7A9638(_QWORD *a1@<X8>)
{
  *a1 = &unk_250FEC498;
}

void QueryableToolbox.__allocating_init(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;

  sub_23F6B5220();
  sub_23F7B0AF8();
  sub_23F6916B8(&qword_256EA12B0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B53AC();
  sub_23F7B0E28();
  sub_23F7B0E1C();
  sub_23F7B0CAC(v2, v4);
  sub_23F7B0CAC(v3, (uint64_t)&v7);
  sub_23F7B0D88();
  v6();
  sub_23F7B0BF0();
  sub_23F6B4F84(v2, &qword_256EA12B0);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v1);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_23F6B6834();
  sub_23F6B5100();
}

uint64_t sub_23F7A9704(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  return sub_23F7A9794(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_23F7A9794(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint32_t *p_cb;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _UNKNOWN **v58;
  _QWORD v59[11];
  _QWORD __dst[11];
  _QWORD v61[4];
  uint64_t v62;

  v55 = a7;
  v49 = a5;
  v50 = a6;
  HIDWORD(v48) = a3;
  v52 = a2;
  v10 = sub_23F6916B8(&qword_256EA12B0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23FB2C320();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v47 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v43 - v17;
  sub_23F6D8AB0(a4, (uint64_t)v12, &qword_256EA12B0);
  sub_23F7AE5F0((uint64_t)a1, (uint64_t)v61);
  v19 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v12, 1, v13);
  v54 = v7;
  if (v19 == 1)
  {
    sub_23F6ADC98(v61, v61[3]);
    ToolboxDelegate.storagePath()();
    sub_23F6B4F84((uint64_t)v12, &qword_256EA12B0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v61);
  v20 = a1[3];
  v21 = a1[4];
  v53 = a1;
  sub_23F6ADC98(a1, v20);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 8))(__dst, v20, v21);
  v22 = 128;
  if (LOBYTE(__dst[0]))
    v22 = 768;
  v46 = v22;
  v23 = v62;
  v24 = v62 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_databaseBaseURL;
  v51 = v14;
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 16);
  v25(v62 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_databaseBaseURL, v18, v13);
  sub_23F6D8AB0(v55, (uint64_t)v59, (uint64_t *)&unk_256EA9AF8);
  p_cb = &OBJC_PROTOCOL___CCItemMetaContent.cb;
  if (v59[3])
  {
    v44 = v24;
    v45 = a4;
    memcpy(__dst, v59, sizeof(__dst));
  }
  else
  {
    v35 = sub_23FB2EA74();
    v36 = v54;
    v37 = sub_23FB2EA68();
    v54 = v36;
    if (v36)
    {
      swift_bridgeObjectRelease();
      sub_23F6B4F84(v55, (uint64_t *)&unk_256EA9AF8);
      sub_23F6B4F84(a4, &qword_256EA12B0);
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v52);
      v33 = *(void (**)(char *, uint64_t))(v51 + 8);
      v33(v18, v13);
      sub_23F6B4F84((uint64_t)v59, (uint64_t *)&unk_256EA9AF8);
      v34 = 0;
      goto LABEL_12;
    }
    v44 = v24;
    v45 = a4;
    v57 = v35;
    v58 = &protocol witness table for ToolDatabase;
    *(_QWORD *)&v56 = v37;
    v41 = sub_23FB2EF00();
    v42 = sub_23FB2EEF4();
    __dst[9] = v41;
    __dst[10] = &protocol witness table for AssistantSchemaProvider;
    __dst[6] = v42;
    sub_23F6F4E24(&v56, (uint64_t)__dst);
    __dst[5] = MEMORY[0x24BEE4AF8];
    sub_23F6B4F84((uint64_t)v59, (uint64_t *)&unk_256EA9AF8);
    v23 = v62;
  }
  v27 = v23 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_toolbox;
  memcpy((void *)(v23 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_toolbox), __dst, 0x58uLL);
  v28 = (uint64_t)v53;
  sub_23F7AE5F0((uint64_t)v53, (uint64_t)v59);
  v29 = v52;
  sub_23F7AE5F0(v52, (uint64_t)&v56);
  v30 = v47;
  v25(v47, v18, v13);
  sub_23F7B0694(v27, (uint64_t)__dst);
  type metadata accessor for ToolEmbeddingsDatabase(0);
  swift_allocObject();
  v31 = v54;
  sub_23F7B7CA0((uint64_t)v59, (uint64_t)&v56, v30, BYTE4(v48) & 1, v46, v49, v50, (uint64_t)__dst, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, (uint64_t)v53,
    v54);
  if (!v31)
  {
    v39 = v32;
    sub_23F6B4F84(v55, (uint64_t *)&unk_256EA9AF8);
    sub_23F6B4F84(v45, &qword_256EA12B0);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v29);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v13);
    *(_QWORD *)(v23 + 16) = v39;
    v38 = v28;
    goto LABEL_16;
  }
  sub_23F6B4F84(v55, (uint64_t *)&unk_256EA9AF8);
  sub_23F6B4F84(v45, &qword_256EA12B0);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v29);
  v33 = *(void (**)(char *, uint64_t))(v51 + 8);
  v33(v18, v13);
  v34 = 1;
  v24 = v44;
  p_cb = (_DWORD *)(&OBJC_PROTOCOL___CCItemMetaContent + 64);
LABEL_12:
  v33((char *)v24, v13);
  if (v34)
    sub_23F7AE630(v62 + *((_QWORD *)p_cb + 361));
  type metadata accessor for QueryableToolbox(0);
  v23 = v62;
  swift_deallocPartialClassInstance();
  v38 = (uint64_t)v53;
LABEL_16:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v38);
  return v23;
}

uint64_t sub_23F7A9C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  os_log_t v31;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  id v43;

  v34 = a2;
  v35 = a3;
  v37 = a1;
  v36 = sub_23FB2E7F8();
  v39 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v40 = (uint64_t)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23FB2C560();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F7C24B0(a4, a5, v15, v16, v17, v18, v19, v20, (uint64_t)v33, v34, v35, v36, v37, a6, v39, v40, v41, v42[0], v42[1],
    (uint64_t)v43);
  if (v6)
  {
    v43 = v6;
    v21 = v6;
    sub_23F6916B8(&qword_256EA2828);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) == *MEMORY[0x24BEBFC18])
      {

        v22 = v40;
        sub_23FB2E378();
        v23 = v35;
        swift_bridgeObjectRetain_n();
        v24 = sub_23FB2E7E0();
        v25 = sub_23FB2F608();
        v26 = os_log_type_enabled(v24, v25);
        v27 = v36;
        if (v26)
        {
          v28 = swift_slowAlloc();
          v33 = v24;
          v29 = (uint8_t *)v28;
          v30 = swift_slowAlloc();
          v42[0] = v30;
          *(_DWORD *)v29 = 136315138;
          swift_bridgeObjectRetain();
          v41 = sub_23F69334C(v34, v23, v42);
          sub_23FB2F680();
          swift_bridgeObjectRelease_n();
          v31 = v33;
          _os_log_impl(&dword_23F68F000, v33, v25, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v29, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242674F4C](v30, -1, -1);
          MEMORY[0x242674F4C](v29, -1, -1);

          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v27);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v22, v27);
        }
        sub_23F6D8AB0(v37, v38, (uint64_t *)&unk_256EA9B30);

        swift_release();
        return swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }

    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7A9F48(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v21 = a2;
  v22 = a1;
  v23 = sub_23FB2E7F8();
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2C560();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23FB2C56C();
  if (!v3)
  {
    v18 = v12;
    swift_release();
    return v18;
  }
  v26 = v3;
  v13 = v3;
  sub_23F6916B8(&qword_256EA2828);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_8;
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v8) != *MEMORY[0x24BEBFC18])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_8:

    return swift_release();
  }

  sub_23FB2E378();
  swift_bridgeObjectRetain_n();
  v14 = sub_23FB2E7E0();
  v15 = sub_23FB2F608();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v25 = v17;
    *(_DWORD *)v16 = 136315138;
    v20 = v16 + 4;
    swift_bridgeObjectRetain();
    v24 = sub_23F69334C(v21, a3, &v25);
    sub_23FB2F680();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23F68F000, v14, v15, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242674F4C](v17, -1, -1);
    MEMORY[0x242674F4C](v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);

  swift_release();
  return v22;
}

uint64_t sub_23F7AA210(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v21 = a2;
  v22 = a1;
  v23 = sub_23FB2E7F8();
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2C560();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F7C3E78();
  if (!v3)
  {
    v18 = v12;
    swift_release();
    return v18;
  }
  v26 = v3;
  v13 = v3;
  sub_23F6916B8(&qword_256EA2828);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_8;
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v8) != *MEMORY[0x24BEBFC18])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_8:

    return swift_release();
  }

  sub_23FB2E378();
  swift_bridgeObjectRetain_n();
  v14 = sub_23FB2E7E0();
  v15 = sub_23FB2F608();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v25 = v17;
    *(_DWORD *)v16 = 136315138;
    v20 = v16 + 4;
    swift_bridgeObjectRetain();
    v24 = sub_23F69334C(v21, a3, &v25);
    sub_23FB2F680();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23F68F000, v14, v15, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242674F4C](v17, -1, -1);
    MEMORY[0x242674F4C](v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);

  swift_release();
  return v22;
}

uint64_t sub_23F7AA4D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  void *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v24 = a2;
  v25 = a1;
  v9 = sub_23FB2E7F8();
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23FB2C560();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v30) = a6;
  sub_23F7C4008();
  if (!v6)
  {
    v22 = v16;
    swift_release();
    return v22;
  }
  v30 = v6;
  v17 = v6;
  sub_23F6916B8(&qword_256EA2828);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_8;
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v15, v12) != *MEMORY[0x24BEBFC18])
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
LABEL_8:

    return swift_release();
  }

  sub_23FB2E378();
  swift_bridgeObjectRetain_n();
  v18 = sub_23FB2E7E0();
  v19 = sub_23FB2F608();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v29 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain();
    v28 = sub_23F69334C(v24, a3, &v29);
    sub_23FB2F680();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23F68F000, v18, v19, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242674F4C](v21, -1, -1);
    MEMORY[0x242674F4C](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);

  swift_release();
  return v25;
}

void *sub_23F7AA7A0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  void *v6;
  void *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;

  v7 = v6;
  v25 = a2;
  v26 = a1;
  v10 = sub_23FB2E7F8();
  v27 = *(_QWORD *)(v10 - 8);
  v28 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23FB2C560();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v31) = a6;
  sub_23F7C4184();
  if (!v6)
  {
    v7 = v17;
    swift_release();
    return v7;
  }
  v31 = v6;
  v18 = v6;
  sub_23F6916B8(&qword_256EA2828);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:

    swift_release();
    return v7;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v16, v13) != *MEMORY[0x24BEBFC18])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    goto LABEL_8;
  }

  sub_23FB2E378();
  swift_bridgeObjectRetain_n();
  v19 = sub_23FB2E7E0();
  v20 = sub_23FB2F608();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v30 = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain();
    v29 = sub_23F69334C(v25, a3, &v30);
    sub_23FB2F680();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23F68F000, v19, v20, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242674F4C](v22, -1, -1);
    MEMORY[0x242674F4C](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  v23 = v31;
  v7 = v26;
  swift_bridgeObjectRetain();

  swift_release();
  return v7;
}

uint64_t sub_23F7AAA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v8[11] = v12;
  v8[12] = v13;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v9 = sub_23FB2E7F8();
  v8[13] = v9;
  v8[14] = *(_QWORD *)(v9 - 8);
  v8[15] = swift_task_alloc();
  v10 = sub_23FB2C560();
  v8[16] = v10;
  v8[17] = *(_QWORD *)(v10 - 8);
  v8[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F7AAB14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_23F7AAB6C;
  v2 = sub_23F7B0858(*(_QWORD *)(v0 + 64));
  return sub_23F7BF70C(v2, v3, v4, v5, v6);
}

uint64_t sub_23F7AAB6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = v6;
  sub_23F7B0DD0(&v6);
  *(_QWORD *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 168) = a1;
  sub_23F6F522C();
  return sub_23F7855E0();
}

uint64_t sub_23F7AABCC()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release();
  sub_23F7B0B94();
  sub_23F6B6090();
  sub_23F6F5268();
  sub_23F6F5224();
  v0 = sub_23F7B0A98();
  return sub_23F7B073C(v0, v1);
}

uint64_t sub_23F7AAC14()
{
  uint64_t v0;
  os_log_type_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)(void);

  sub_23F7B0CC4();
  v2 = *(void **)(v0 + 160);
  *(_QWORD *)(v0 + 16) = v2;
  v3 = v2;
  sub_23F6916B8(&qword_256EA2828);
  if (!sub_23F7B0AC0())
    goto LABEL_6;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 88))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128)) != *MEMORY[0x24BEBFC18])
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
LABEL_6:
    sub_23F7B0D60();
    swift_release();
    sub_23F6B6090();
    sub_23F6B5AB0();
    sub_23F6F52B0();
    sub_23F6F5268();
    return sub_23F7B0864(*(uint64_t (**)(void))(v0 + 8));
  }

  sub_23F7B0B84();
  sub_23F6B91E8();
  v4 = sub_23FB2E7E0();
  v5 = sub_23FB2F608();
  v6 = sub_23F7B0C7C(v5);
  v7 = *(void **)(v0 + 120);
  if (v6)
  {
    v8 = (uint8_t *)sub_23F693DF4();
    sub_23F693DF4();
    v9 = sub_23F7B0B64(4.8149e-34);
    v13 = sub_23F7B0C40(v9, v10, v11, v12);
    sub_23F7B0A80(v13);
    sub_23F7B0D80();
    sub_23F7B0B48(&dword_23F68F000, v4, v1, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v8);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  sub_23F6B6740();

  v15 = sub_23F6B63F4();
  v16(v15);
  sub_23F7B0C20();

  sub_23F77DA7C();
  sub_23F7B0B94();
  sub_23F6B6090();
  sub_23F6F5268();
  sub_23F6F5224();
  v17 = sub_23F7B0A98();
  return sub_23F7B0880(v17, v18);
}

uint64_t sub_23F7AADF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v9 = sub_23FB2E7F8();
  v8[11] = v9;
  v8[12] = *(_QWORD *)(v9 - 8);
  v8[13] = swift_task_alloc();
  v10 = sub_23FB2C560();
  v8[14] = v10;
  v8[15] = *(_QWORD *)(v10 - 8);
  v8[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F7AAE84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_23F7AAED8;
  v2 = sub_23F7B0858(*(_QWORD *)(v0 + 64));
  return sub_23F7C00D0(v2, v3, v4);
}

uint64_t sub_23F7AAED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7B08DC();
  if (!v1)
    *(_QWORD *)(v2 + 152) = v0;
  sub_23F6F522C();
  return sub_23F7855E0();
}

uint64_t sub_23F7AAF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v9 = sub_23FB2E7F8();
  v8[11] = v9;
  v8[12] = *(_QWORD *)(v9 - 8);
  v8[13] = swift_task_alloc();
  v10 = sub_23FB2C560();
  v8[14] = v10;
  v8[15] = *(_QWORD *)(v10 - 8);
  v8[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F7AAFB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_23F7AB004;
  v2 = sub_23F7B0858(*(_QWORD *)(v0 + 64));
  return sub_23F7C0A18(v2, v3, v4);
}

uint64_t sub_23F7AB004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7B08DC();
  if (!v1)
    *(_QWORD *)(v2 + 152) = v0;
  sub_23F6F522C();
  return sub_23F7855E0();
}

uint64_t sub_23F7AB048()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release();
  sub_23F7B0C10();
  sub_23F6B6090();
  sub_23F6F5268();
  sub_23F6F5224();
  v0 = sub_23F7B0A98();
  return sub_23F7B073C(v0, v1);
}

uint64_t sub_23F7AB090()
{
  uint64_t v0;
  os_log_type_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)(void);

  sub_23F7B0CC4();
  v2 = *(void **)(v0 + 144);
  *(_QWORD *)(v0 + 16) = v2;
  v3 = v2;
  sub_23F6916B8(&qword_256EA2828);
  if (!sub_23F7B0AC0())
    goto LABEL_6;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 88))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112)) != *MEMORY[0x24BEBFC18])
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
LABEL_6:
    sub_23F7B0D60();
    sub_23F6B5AB0();
    swift_release();
    sub_23F6B6090();
    sub_23F6F52B0();
    sub_23F6F5268();
    return sub_23F7B0864(*(uint64_t (**)(void))(v0 + 8));
  }

  sub_23F7B0B84();
  sub_23F6B91E8();
  v4 = sub_23FB2E7E0();
  v5 = sub_23FB2F608();
  v6 = sub_23F7B0C7C(v5);
  v7 = *(void **)(v0 + 104);
  if (v6)
  {
    v8 = (uint8_t *)sub_23F693DF4();
    sub_23F693DF4();
    v9 = sub_23F7B0B64(4.8149e-34);
    v13 = sub_23F7B0C40(v9, v10, v11, v12);
    sub_23F7B0A80(v13);
    sub_23F7B0D80();
    sub_23F7B0B48(&dword_23F68F000, v4, v1, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v8);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  sub_23F6B6740();

  v15 = sub_23F6B63F4();
  v16(v15);
  sub_23F7B0C20();

  sub_23F77DA7C();
  sub_23F7B0C10();
  sub_23F6B6090();
  sub_23F6F5268();
  sub_23F6F5224();
  v17 = sub_23F7B0A98();
  return sub_23F7B0880(v17, v18);
}

uint64_t sub_23F7AB268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7AB280()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_retain();
  sub_23F6B5508();
  sub_23F6B54F8();
  v1 = (_QWORD *)sub_23F7B0E00();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_23F7AB310;
  sub_23F7B0B78();
  v2 = sub_23F7B0858(MEMORY[0x24BEE4AF8]);
  return sub_23F7AAA78(v2, 0xD000000000000030, v3, v4, v4, v5, v6, v7);
}

uint64_t sub_23F7AB310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7B0800();
  v3 = sub_23F6F5110();
  if (!v1)
    v3 = v0;
  return sub_23F7B073C(v3, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_23F7AB348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7AB35C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_retain();
  sub_23F6B5508();
  sub_23F6B54F8();
  v1 = (_QWORD *)sub_23F7B0E00();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_23F7B0724;
  sub_23F7B0B78();
  v2 = sub_23F7B0858(MEMORY[0x24BEE4AF8]);
  return sub_23F7AADF0(v2, 0xD000000000000018, v3, v4, v4, v5, v6, v7);
}

uint64_t sub_23F7AB3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7AB3F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_retain();
  sub_23F6B5508();
  sub_23F6B54F8();
  v1 = (_QWORD *)sub_23F7B0E00();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_23F7AB480;
  sub_23F7B0B78();
  v2 = sub_23F7B0858(MEMORY[0x24BEE4AF8]);
  return sub_23F7AAF1C(v2, 0xD000000000000016, v3, v4, v4, v5, v6, v7);
}

uint64_t sub_23F7AB480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7B0800();
  v3 = sub_23F6F5110();
  if (!v1)
    v3 = v0;
  return sub_23F7B073C(v3, *(uint64_t (**)(void))(v2 + 8));
}

void sub_23F7AB4B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23F6916B8((uint64_t *)&unk_256EA9B30);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6BD134();
  v9 = v8 - v7;
  v10 = type metadata accessor for ToolboxCustomKeyResult(0);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v9, 1, 1, v10);
  sub_23F7B0BE8();
  swift_bridgeObjectRetain();
  sub_23F7B0B78();
  sub_23F7A9C2C(v9, 0xD000000000000017, v11, a1, a2, a3);
  sub_23F6B4F84(v9, (uint64_t *)&unk_256EA9B30);
}

uint64_t sub_23F7AB594()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_23F7B0730();
}

uint64_t sub_23F7AB5A4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_23F7B0DDC(v1, (uint64_t)sub_23F7AB5EC);
  return sub_23F7BE5A4();
}

uint64_t sub_23F7AB5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7B0800();
  v3 = sub_23F6F5110();
  if (!v1)
    v3 = v0;
  return sub_23F7B073C(v3, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_23F7AB624()
{
  sub_23F7B0BE8();
  return sub_23F7A9F48(0, 0x2928746E756F63, 0xE700000000000000);
}

uint64_t sub_23F7AB65C()
{
  sub_23F7B0BE8();
  return sub_23F7AA210(0, 0xD000000000000016, 0x800000023FB333D0);
}

uint64_t sub_23F7AB698()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_23F7B0BE8();
  sub_23F7B0D9C();
  return sub_23F7AA4D4(v0, v1, v2, v3, v4, v5);
}

void sub_23F7AB6D8()
{
  sub_23F7C7BEC();
  sub_23F694CC8();
}

void sub_23F7AB6F4()
{
  sub_23F7C7D54();
  sub_23F694CC8();
}

void *sub_23F7AB710()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_23F7B0BE8();
  sub_23F7B0B78();
  sub_23F7B0D9C();
  return sub_23F7AA7A0(v0, v1, v2, v3, v4, v5);
}

void QueryableToolbox.deinit()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = sub_23FB2C320();
  sub_23F6B6454(v1);
  sub_23F7AE630(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_toolbox);
  sub_23F694CC8();
}

uint64_t QueryableToolbox.__deallocating_deinit()
{
  QueryableToolbox.deinit();
  sub_23F7B0E08();
  return swift_deallocClassInstance();
}

void ToolDatabase.LaunchServicesDatabaseVersion.encodedLSDBVersion()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = v0;
  v2 = (void *)MEMORY[0x2426749F4]();
  sub_23F7AB818(v1, &v3);
  objc_autoreleasePoolPop(v2);
}

void sub_23F7AB818(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v38 = a1;
  v33 = a2;
  v2 = sub_23FB2E7F8();
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v34 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23FB2C0B0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2C098();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23FB2C0C8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_23FB2C104();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BDCB338], v11);
  sub_23F6916B8(&qword_256EAA288);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23FB47010;
  sub_23FB2C080();
  v40 = v15;
  sub_23F7A78D0((uint64_t)&unk_256EAA290);
  sub_23F6916B8(&qword_256EAA298);
  sub_23F7B06D0((uint64_t)&unk_256EAA2A0);
  sub_23FB2F728();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCB2F0], v4);
  sub_23F6BCA8C((uint64_t)v14, (uint64_t)v10, (uint64_t)v7);
  sub_23FB2E9FC();
  sub_23F7A78D0((uint64_t)&unk_256EAA280);
  v16 = v39;
  v17 = sub_23FB2C0E0();
  if (v16)
  {
    swift_release();
    v19 = v34;
    sub_23FB2E378();
    v20 = v16;
    v21 = v16;
    v22 = sub_23FB2E7E0();
    v23 = sub_23FB2F5F0();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v24 = 138412290;
      v26 = v16;
      v27 = _swift_stdlib_bridgeErrorToNSError();
      v40 = v27;
      sub_23FB2F680();
      *v25 = v27;

      _os_log_impl(&dword_23F68F000, v22, v23, "Could not serialize ToolKit database version toolbox. Error: %@", v24, 0xCu);
      sub_23F6916B8(&qword_256EA2988);
      swift_arrayDestroy();
      MEMORY[0x242674F4C](v25, -1, -1);
      MEMORY[0x242674F4C](v24, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v36);
    sub_23F743D70();
    swift_allocError();
    *v31 = 4;
    swift_willThrow();

  }
  else
  {
    v28 = v17;
    v29 = v18;
    swift_release();
    v30 = v33;
    *v33 = v28;
    v30[1] = v29;
  }
}

void MutableToolbox.__allocating_init(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)()
{
  swift_allocObject();
  MutableToolbox.init(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)();
}

void MutableToolbox.init(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23F6B5220();
  sub_23F7B0AF8();
  sub_23F6916B8(&qword_256EA12B0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B53AC();
  sub_23F7AE5F0(v0, v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate);
  sub_23F7B0E28();
  sub_23F7B0E1C();
  sub_23F7B0CAC(v3, v5);
  sub_23F7B0CAC(v4, (uint64_t)&v14);
  sub_23F7B0D88();
  sub_23F7A9794(v7, v8, v9, v10, v11, v12, v13);
  sub_23F7B0BF0();
  sub_23F6B4F84(v3, &qword_256EA12B0);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_23F6B6834();
  sub_23F6B5100();
}

uint64_t MutableToolbox.replaceStoredTools(toolboxInteractionId:isCancelled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7ABD94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_23F7ABDE8;
  v2 = sub_23F7B0858(*(_QWORD *)(v0 + 16));
  return sub_23F7B8A90(v2, v3, v4);
}

uint64_t sub_23F7ABDE8()
{
  uint64_t v0;

  sub_23F6F5110();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MutableToolbox.replaceClientActions(clientIdentifier:toolDefinitions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7ABE30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_23F7B0708;
  v2 = sub_23F7B0858(*(_QWORD *)(v0 + 32));
  return sub_23F7BA124(v2, 0, v3, v4);
}

uint64_t MutableToolbox.replaceStoredAssistantSchemas(assistantSchemaTools:isCancelled:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7ABE9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_23F7ABEEC;
  v2 = sub_23F7B0858(*(_QWORD *)(v0 + 16));
  return sub_23F7BA8B4(v2, v3);
}

uint64_t sub_23F7ABEEC()
{
  uint64_t v0;

  sub_23F6F5110();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MutableToolbox.loadAllTools(isCancelled:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a1;
  v2[3] = v1;
  v4 = v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_toolbox;
  v5 = (_QWORD *)swift_task_alloc();
  v2[4] = v5;
  sub_23F7B0DDC(v5, (uint64_t)sub_23F7ABF84);
  return MutableToolbox.loadAllToolDefinitions(toolDatabase:isCancelled:)(v4, a1);
}

uint64_t sub_23F7ABF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v3);
  swift_task_dealloc();
  if (v1)
    return sub_23F750B60(*(uint64_t (**)(void))(v2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v5;
  *v5 = v2;
  v5[1] = sub_23F7ABEEC;
  v6 = sub_23F7B0858(*(_QWORD *)(v0 + 16));
  return MutableToolbox.loadAllAssistantSchemas(isCancelled:)(v6);
}

uint64_t MutableToolbox.loadAllToolDefinitions(toolDatabase:isCancelled:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_23FB2F170();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = sub_23F750AE4();
  sub_23F6916B8(&qword_256EA1568);
  v3[12] = sub_23F750AE4();
  v5 = sub_23FB2E9FC();
  v3[13] = v5;
  v3[14] = *(_QWORD *)(v5 - 8);
  v3[15] = sub_23F79514C();
  v3[16] = sub_23F795160();
  v3[17] = type metadata accessor for ToolboxVersion(0);
  v3[18] = sub_23F750AE4();
  v6 = sub_23FB2E7F8();
  v3[19] = v6;
  v3[20] = *(_QWORD *)(v6 - 8);
  v3[21] = sub_23F79514C();
  v3[22] = sub_23F795160();
  v3[23] = sub_23F795160();
  sub_23F6916B8(&qword_256EA2798);
  v3[24] = sub_23F750AE4();
  v7 = sub_23FB2C4B8();
  v3[25] = v7;
  v3[26] = *(_QWORD *)(v7 - 8);
  v3[27] = sub_23F79514C();
  v3[28] = sub_23F795160();
  sub_23F6916B8(&qword_256EA9B88);
  v3[29] = sub_23F79514C();
  v3[30] = sub_23F795160();
  v3[31] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7AC120()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint8_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  NSObject *v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t type;
  uint64_t typea;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  os_log_type_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  unsigned __int8 v164;
  uint64_t v165;
  unint64_t v166;

  *(_QWORD *)(v0 + 256) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16);
  sub_23F7C829C();
  if (!v2)
    goto LABEL_4;
  v3 = v1;
  v4 = v2;
  v6 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  sub_23FB2C47C();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v6, 1, v5) == 1)
  {
    v7 = swift_bridgeObjectRelease();
    sub_23F77DC10(v7, &qword_256EA2798);
LABEL_4:
    v8 = *(_QWORD **)(v0 + 48);
    v9 = v8[3];
    v10 = v8[4];
    sub_23F6ADC98(v8, v9);
    v11 = sub_23FB2E9E4();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 80);
    sub_23F7A78D0((uint64_t)&unk_256EA9B90);
    v12(v11, v11, v13, v9, v10);
    v14 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 104);
    sub_23F7AE8D8(*(_QWORD *)(v0 + 232), v14, &qword_256EA9B88);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v14, 1, v15))
    {
      v16 = 0;
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 104));
      sub_23F7A6964();
      v16 = v121;
      sub_23F7B0C6C();
    }
    goto LABEL_9;
  }
  v162 = v3;
  v18 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 32))(v19, *(_QWORD *)(v0 + 192), v22);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  v16 = v4;
  v24(v20, v19, v22);
  sub_23FB2E9F0();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v18, 0, 1, v23);
  sub_23F7AE8D8(v18, v17, &qword_256EA9B88);
  sub_23FB2E378();
  sub_23F6B91E8();
  sub_23F7B0C8C();
  v25 = sub_23FB2E7E0();
  v26 = sub_23FB2F5D8();
  v27 = sub_23F7B0D58(v25);
  v28 = *(_QWORD *)(v0 + 224);
  v29 = *(_QWORD *)(v0 + 208);
  v30 = *(_QWORD *)(v0 + 184);
  v31 = *(_QWORD *)(v0 + 152);
  v154 = *(_QWORD *)(v0 + 200);
  v156 = *(_QWORD *)(v0 + 160);
  if (v27)
  {
    v32 = *(_QWORD *)(v0 + 64);
    v33 = sub_23F693DF4();
    v165 = sub_23F693DF4();
    *(_DWORD *)v33 = 136315394;
    sub_23F6B5508();
    *(_QWORD *)(v0 + 32) = sub_23F69334C(v162, v4, &v165);
    sub_23FB2F680();
    sub_23F7B0D80();
    *(_WORD *)(v33 + 12) = 2080;
    v35 = *(_QWORD *)(v32 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate + 24);
    v34 = *(_QWORD *)(v32 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate + 32);
    sub_23F6ADC98((_QWORD *)(v32 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate), v35);
    (*(void (**)(uint64_t, uint64_t))(v34 + 16))(v35, v34);
    v36 = sub_23FB2D3C4();
    v38 = v37;
    v39 = sub_23F7B0944();
    sub_23F78F1B0(v39);
    *(_QWORD *)(v0 + 40) = sub_23F69334C(v36, v38, &v165);
    sub_23FB2F680();
    swift_bridgeObjectRelease();
    sub_23F7B0980();
    _os_log_impl(&dword_23F68F000, v25, v26, "MutableToolbox: using %s as toolbox version for %s.", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    sub_23F693DD0();
  }

  sub_23F7B0980();
  sub_23F6B6740();
  (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v30, v31);
  sub_23F7B0E60(v28, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8), v136, v137, v138, v139, v140, v142, v144, v146, type, v150, v151, v152, v154);
LABEL_9:
  *(_QWORD *)(v0 + 264) = v16;
  v40 = *(_QWORD *)(v0 + 248);
  if (sub_23F7B0D30(v40))
  {
    v41 = 0;
    v42 = 0xF000000000000000;
  }
  else
  {
    v60 = v16;
    v61 = *(_QWORD *)(v0 + 120);
    v62 = sub_23F72E0C8(v61, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 16));
    v63 = (void *)MEMORY[0x2426749F4](v62);
    sub_23F7AB818(v61, &v165);
    v94 = *(_QWORD *)(v0 + 112);
    v95 = *(_QWORD *)(v0 + 120);
    v96 = *(_QWORD *)(v0 + 104);
    objc_autoreleasePoolPop(v63);
    v41 = v165;
    v42 = v166;
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v95, v96);
    v16 = v60;
  }
  *(_QWORD *)(v0 + 272) = v41;
  *(_QWORD *)(v0 + 280) = v42;
  sub_23F7C7EB8();
  *(_QWORD *)(v0 + 288) = v43;
  *(_QWORD *)(v0 + 296) = v44;
  v45 = v44 >> 60 == 15 || v42 >> 60 == 15;
  v155 = v44;
  v157 = v42;
  v153 = v43;
  if (v45)
    goto LABEL_20;
  v46 = v43;
  v47 = v44;
  sub_23F6D1E0C(v43, v44);
  sub_23F6D1E0C(v41, v42);
  if ((MEMORY[0x242671028](v46, v47, v41, v42) & 1) == 0)
  {
    sub_23F7B0998(v41, v42);
LABEL_20:
    v158 = 0;
    goto LABEL_21;
  }
  sub_23F7B0B84();
  sub_23F7B0C8C();
  v48 = sub_23FB2E7E0();
  v49 = sub_23FB2F5D8();
  v50 = sub_23F7B0D58(v48);
  v147 = *(_QWORD *)(v0 + 160);
  typea = *(_QWORD *)(v0 + 152);
  if (v50)
  {
    v51 = *(_QWORD *)(v0 + 64);
    v52 = (uint8_t *)sub_23F693DF4();
    v143 = sub_23F693DF4();
    *(_DWORD *)v52 = 136315138;
    v165 = v143;
    v53 = (_QWORD *)(v51 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate);
    v141 = v48;
    v54 = *(_QWORD *)(v51 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate + 24);
    v55 = *(_QWORD *)(v51 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate + 32);
    sub_23F6ADC98(v53, v54);
    (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
    v56 = sub_23FB2D3C4();
    v58 = v57;
    v59 = sub_23F7B0944();
    sub_23F78F1B0(v59);
    *(_QWORD *)(v0 + 24) = sub_23F69334C(v56, v58, &v165);
    sub_23FB2F680();
    sub_23F6B6090();
    sub_23F7B0980();
    sub_23F7B0B48(&dword_23F68F000, v141, v49, "ToolEmbeddingDatabase: %s. Stored toolDefinitionsVersion is equal to the passed in version.", v52);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  sub_23F6D1E64(v46, v47);
  sub_23F7B0980();
  sub_23F6D1E64(v41, v42);

  sub_23F7B0CE0(v97, v98, v99, v100, v101, v102, v103, v104, v136, v137, v138, v139, v140, v142, v144, v147, typea);
  v158 = 1;
LABEL_21:
  sub_23F7C7F58();
  v65 = v64;
  v67 = v66;
  *(_QWORD *)(v0 + 304) = v64;
  *(_QWORD *)(v0 + 312) = v66;
  if (qword_256EA0950 != -1)
    swift_once();
  v68 = *(uint64_t **)(v0 + 96);
  v165 = qword_256EA1550;
  v166 = *(_QWORD *)algn_256EA1558;
  v164 = 1;
  swift_bridgeObjectRetain();
  AssetsManager.info(for:locale:in:)(&v164, 0x53555F6E65, 0xE500000000000000, 0, v68);
  sub_23F6B5AB0();
  v69 = type metadata accessor for AssetInfo();
  v70 = sub_23F7B0D30((uint64_t)v68);
  v71 = *(_QWORD *)(v0 + 96);
  if ((_DWORD)v70 == 1)
  {
    sub_23F77DC10(v70, &qword_256EA1568);
LABEL_29:
    v78 = 0;
    v80 = 0xF000000000000000;
    goto LABEL_30;
  }
  v72 = *(_QWORD *)(v71 + *(int *)(v69 + 24));
  swift_bridgeObjectRetain();
  sub_23F6D3508(v71, (uint64_t (*)(_QWORD))type metadata accessor for AssetInfo);
  if (!v72)
    goto LABEL_29;
  sub_23F6945B4(0x6E6F6973726576, 0xE700000000000000, v72);
  v74 = v73;
  sub_23F6B5AB0();
  if (!v74)
    goto LABEL_29;
  v150 = v41;
  v160 = v16;
  v75 = *(_QWORD *)(v0 + 80);
  v76 = *(_QWORD *)(v0 + 88);
  v77 = *(_QWORD *)(v0 + 72);
  sub_23FB2F164();
  v78 = sub_23FB2F14C();
  v80 = v79;
  sub_23F693DFC();
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v77);
  if (v80 >> 60 != 15)
  {
    v16 = v160;
    if (v67 >> 60 != 15)
    {
      sub_23F7B0DB0();
      sub_23F6D1E0C(v65, v67);
      v122 = MEMORY[0x242671028](v78, v80, v65, v67);
      sub_23F6D1E64(v65, v67);
      sub_23F7B0CF0(v78);
      if ((v158 & v122 & 1) != 0)
        goto LABEL_32;
      goto LABEL_39;
    }
LABEL_38:
    sub_23F6D1E0C(v65, v67);
    sub_23F7B0DB0();
    sub_23F7B0998(v78, v80);
    goto LABEL_39;
  }
  v16 = v160;
LABEL_30:
  if (v67 >> 60 != 15)
    goto LABEL_38;
  if (v158)
  {
LABEL_32:
    sub_23F693E04();
    sub_23F7B0B84();
    sub_23F7B0C8C();
    v81 = sub_23FB2E7E0();
    v163 = v81;
    v159 = sub_23FB2F5D8();
    v82 = os_log_type_enabled(v81, v159);
    v83 = *(_QWORD *)(v0 + 160);
    v161 = *(_QWORD *)(v0 + 168);
    v84 = *(_QWORD *)(v0 + 152);
    if (v82)
    {
      v85 = *(_QWORD *)(v0 + 64);
      v86 = (uint8_t *)sub_23F693DF4();
      v145 = sub_23F693DF4();
      *(_DWORD *)v86 = 136315138;
      v165 = v145;
      v87 = (_QWORD *)(v85 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate);
      v89 = *(_QWORD *)(v85 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate + 24);
      v88 = *(_QWORD *)(v85 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate + 32);
      sub_23F6ADC98(v87, v89);
      (*(void (**)(uint64_t, uint64_t))(v88 + 16))(v89, v88);
      sub_23FB2D3C4();
      v90 = sub_23F7B0944();
      sub_23F78F1B0(v90);
      v91 = sub_23F7B0E48();
      *(_QWORD *)(v0 + 16) = sub_23F69334C(v91, v92, v93);
      sub_23FB2F680();
      sub_23F6B6090();
      sub_23F7B0980();
      sub_23F7B0B48(&dword_23F68F000, v163, v159, "ToolEmbeddingDatabase: %s. Stored toolDenyListVersion and ToolKit are upToDate", v86);
      sub_23F7B0B40();
      sub_23F693DD0();
    }
    v105 = sub_23F6D1E64(v153, v155);
    sub_23F7B0DE8(v105, v106, v107, v108, v109, v110, v111, v112, v136, v137, v138, v139, v140, v142, v144, v146, type, v150, v0 + 24,
      v153,
      v155,
      v157);
    sub_23F7B0998(v78, v80);
    sub_23F7B0980();

    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v161, v84);
    goto LABEL_53;
  }
LABEL_39:
  *(_QWORD *)(v0 + 320) = v78;
  *(_QWORD *)(v0 + 328) = v80;
  if (v16)
  {
    v113 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 336) = v113;
    *v113 = v0;
    v113[1] = sub_23F7ACE40;
    sub_23F7B0C50();
    return MutableToolbox.replaceStoredTools(toolboxInteractionId:isCancelled:)(v114, v115, v116);
  }
  v118 = *(_QWORD *)(v0 + 56);
  if (v118 && (*(_BYTE *)(v118 + 16) & 1) != 0)
  {
    sub_23F7C7F64();
    sub_23F7C8178();
    v130 = sub_23F7B0D44();
    v133 = sub_23F7B09B0(v130, v132);
LABEL_51:
    v123 = sub_23F7B07CC(v133, v134);
    goto LABEL_52;
  }
  if (*(_QWORD *)(v0 + 280) >> 60 != 15)
  {
    sub_23F7B09EC();
    v119 = sub_23F7B0E48();
    sub_23F7C81C4(v119, v120);
    sub_23F6D1E64(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
    v80 = *(_QWORD *)(v0 + 328);
  }
  if (v80 >> 60 != 15)
  {
    v125 = sub_23F6B63F4();
    sub_23F6D1E20(v125, v126);
    v127 = sub_23F6B63F4();
    sub_23F7C8280(v127, v128);
    v129 = sub_23F7B0D6C();
    v133 = sub_23F7B07A8(v129, v131);
    goto LABEL_51;
  }
  v123 = sub_23F7B0A50();
LABEL_52:
  sub_23F6D1E64(v123, v124);
LABEL_53:
  sub_23F7B0A30();
  sub_23F77E660(v135, &qword_256EA9B88);
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F52B0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return sub_23F7B089C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7ACE40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 344) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7ACE94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  swift_bridgeObjectRelease();
  v1 = v0[43];
  v2 = v0[7];
  if (v2 && (*(_BYTE *)(v2 + 16) & 1) != 0)
  {
    sub_23F7C7F64();
    if (v1)
    {
      v5 = sub_23F7B0814();
      goto LABEL_14;
    }
    sub_23F7C8178();
    v14 = sub_23F7B0D44();
    v19 = sub_23F7B09B0(v14, v18);
    goto LABEL_16;
  }
  if (v0[35] >> 60 == 15)
  {
LABEL_9:
    if (v0[41] >> 60 == 15)
    {
      v7 = sub_23F7B0A50();
LABEL_17:
      sub_23F6D1E64(v7, v8);
      sub_23F7B0A30();
      sub_23F77E660(v21, &qword_256EA9B88);
      sub_23F6F5268();
      sub_23F6F5224();
      sub_23F6F5280();
      sub_23F7B08D4();
      sub_23F7B08CC();
      sub_23F7B0988();
      sub_23F7B0A28();
      sub_23F7B0B8C();
      sub_23F6F52B0();
      swift_task_dealloc();
      sub_23F7B0E90();
      sub_23F7B0E34();
      swift_task_dealloc();
      swift_task_dealloc();
      v17 = (uint64_t (*)(void))v0[1];
      return v17();
    }
    sub_23F7B09EC();
    v9 = sub_23F7B0E48();
    sub_23F7C8280(v9, v10);
    v11 = sub_23F7B0D6C();
    if (v1)
    {
      v13 = sub_23F7B07A8(v11, v12);
      v5 = sub_23F7B07CC(v13, v15);
      goto LABEL_14;
    }
    v19 = sub_23F7B07A8(v11, v12);
LABEL_16:
    v7 = sub_23F7B07CC(v19, v20);
    goto LABEL_17;
  }
  sub_23F7B09EC();
  v3 = sub_23F7B0E48();
  sub_23F7C81C4(v3, v4);
  if (!v1)
  {
    sub_23F6D1E64(v0[34], v0[35]);
    goto LABEL_9;
  }
  v5 = sub_23F7B0744();
LABEL_14:
  v16 = sub_23F6D1E64(v5, v6);
  sub_23F77DC10(v16, &qword_256EA9B88);
  sub_23F7B09C8();
  swift_task_dealloc();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F5224();
  sub_23F7B0E90();
  sub_23F7B0E34();
  swift_task_dealloc();
  swift_task_dealloc();
  v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_23F7AD09C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_23F7B0CC4();
  v1 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 248);
  sub_23F6D1E64(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  sub_23F6D1E64(v3, v2);
  v5 = sub_23F6B5994();
  sub_23F6D1E64(v5, v6);
  sub_23F7B0CF0(v1);
  sub_23F6B4F84(v4, &qword_256EA9B88);
  swift_task_dealloc();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F52B0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_23F7B0E90();
  sub_23F7B0E34();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MutableToolbox.loadAllAssistantSchemas(isCancelled:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = type metadata accessor for ToolboxVersion(0);
  v2[7] = sub_23F750AE4();
  v3 = sub_23FB2E7F8();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = sub_23F750AE4();
  v4 = sub_23FB2EEAC();
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = sub_23F750AE4();
  v2[14] = sub_23F6916B8(&qword_256EA9B98);
  v2[15] = sub_23F79514C();
  v2[16] = sub_23F795160();
  v2[17] = sub_23F795160();
  v2[18] = sub_23F795160();
  v2[19] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7AD250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Class isa;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint8_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[3];

  v1 = v0;
  sub_23FB2EF00();
  sub_23FB2EEF4();
  v2 = sub_23FB2EEDC();
  *(_QWORD *)(v1 + 160) = v2;
  sub_23F77DA7C();
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v62 = *(_QWORD *)(v1 + 96);
    v63 = *(_QWORD *)(v1 + 112);
    v83 = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v3, 0);
    v5 = sub_23F7AE668(v2);
    v7 = v6;
    v9 = v8 & 1;
    v64 = v2;
    v65 = v1;
    do
    {
      v82 = v3;
      v11 = *(_QWORD *)(v1 + 144);
      v10 = *(_QWORD *)(v1 + 152);
      v12 = *(_QWORD *)(v1 + 128);
      v68 = *(_QWORD *)(v1 + 136);
      v72 = *(_QWORD *)(v1 + 120);
      v74 = *(_QWORD *)(v1 + 104);
      v77 = *(_QWORD *)(v1 + 88);
      v13 = v10 + *(int *)(v63 + 48);
      v80 = v7;
      v81 = v5;
      v79 = v9 & 1;
      sub_23F7AE808(v10, v13, v5, v7, v9 & 1, v2, (uint64_t (*)(_QWORD))MEMORY[0x24BEBA5E0], (uint64_t (*)(_QWORD))MEMORY[0x24BEB8F30]);
      v69 = *(_QWORD *)(sub_23FB2EF54() - 8);
      sub_23F7B0BDC(v11);
      v14 = v11 + *(int *)(v63 + 48);
      v15 = sub_23FB2E834();
      v75 = *(_QWORD *)(v15 - 8);
      sub_23F7B0DBC(v14, v13);
      sub_23F7AE8D8(v11, v68, &qword_256EA9B98);
      sub_23F6B4F84(v10, &qword_256EA9B98);
      v16 = *(int *)(v63 + 48);
      v17 = v12 + v16;
      v70 = v12 + v16;
      v18 = v68;
      v19 = v68 + v16;
      sub_23F7B0BDC(v12);
      sub_23F7B0DBC(v17, v19);
      v66 = sub_23FB2EF24();
      v21 = v20;
      sub_23F7B0E3C();
      v22 = v72 + *(int *)(v63 + 48);
      sub_23F7B0BDC(v72);
      sub_23F7B0DBC(v22, v19);
      sub_23FB2EF30();
      sub_23F7B0E3C();
      sub_23FB2EE94();
      sub_23F7B0E60(v74, *(uint64_t (**)(uint64_t, uint64_t))(v62 + 8), v61, v62, v63, v64, v65, v66, v68, v69, v70, v72, v74, v75, v77);
      v84[0] = v67;
      v84[1] = v21;
      swift_bridgeObjectRetain();
      sub_23FB2F254();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v78 = v21;
      v23 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
      v23(v22, v15);
      v23(v71, v15);
      sub_23F6B4F84(v18, &qword_256EA9B98);
      v4 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F711194(0, *(_QWORD *)(v83 + 16) + 1, 1);
        v4 = v83;
      }
      v25 = *(_QWORD *)(v4 + 16);
      v24 = *(_QWORD *)(v4 + 24);
      v2 = v64;
      v1 = v65;
      if (v25 >= v24 >> 1)
      {
        sub_23F711194(v24 > 1, v25 + 1, 1);
        v4 = v83;
      }
      *(_QWORD *)(v4 + 16) = v25 + 1;
      v26 = v4 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v67;
      *(_QWORD *)(v26 + 40) = v78;
      v27 = sub_23F7AE6EC(v81, v80, v9 & 1, v64);
      v29 = v28;
      v9 = v30 & 1;
      sub_23F7AE908(v81, v80, v79);
      v5 = v27;
      v7 = v29;
      v3 = v82 - 1;
    }
    while (v82 != 1);
    v31 = sub_23F6B63F4();
    sub_23F7AE908(v31, v32, v9);
  }
  v84[0] = v4;
  swift_bridgeObjectRetain();
  sub_23F7A6AF8(v84);
  v33 = *(_QWORD *)(v1 + 40);
  sub_23F6B6090();
  *(_QWORD *)(v1 + 16) = v84[0];
  sub_23F6916B8(&qword_256EA1918);
  sub_23F7B06D0((uint64_t)&qword_256EA1E38);
  sub_23FB2F110();
  swift_release();
  v34._countAndFlagsBits = sub_23F6B6190();
  isa = ToolBoxUtility.stableHashData(hashableString:)(v34).super.isa;
  sub_23F693E04();
  v36 = sub_23FB2C3B0();
  v38 = v37;

  *(_QWORD *)(v1 + 168) = v36;
  *(_QWORD *)(v1 + 176) = v38;
  *(_QWORD *)(v1 + 184) = *(_QWORD *)(v33 + 16);
  sub_23F7C7EC4();
  v40 = v39;
  v42 = v41;
  sub_23F6D1E20(v36, v38);
  if (v42 >> 60 == 15)
  {
    sub_23F7B0DF4();
    sub_23F7B0CF0(v36);
LABEL_14:
    v55 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 192) = v55;
    *v55 = v1;
    v55[1] = sub_23F7AD8DC;
    sub_23F7B0858(v2);
    sub_23F7B0C50();
    return MutableToolbox.replaceStoredAssistantSchemas(assistantSchemaTools:isCancelled:)(v56, v57);
  }
  v43 = MEMORY[0x242671028](v40, v42, v36, v38);
  sub_23F7B0BD0();
  sub_23F7B0DF4();
  if ((v43 & 1) == 0)
    goto LABEL_14;
  swift_bridgeObjectRelease();
  sub_23F7B0B84();
  sub_23F7B0C8C();
  v44 = sub_23FB2E7E0();
  v45 = sub_23FB2F5D8();
  if (sub_23F7B0D58(v44))
  {
    v46 = *(_QWORD *)(v1 + 40);
    v47 = (uint8_t *)sub_23F693DF4();
    v84[0] = sub_23F693DF4();
    *(_DWORD *)v47 = 136315138;
    v73 = v44;
    v48 = (_QWORD *)(v46 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate);
    v50 = *(_QWORD *)(v46 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate + 24);
    v49 = v48[4];
    sub_23F6ADC98(v48, v50);
    (*(void (**)(uint64_t, uint64_t))(v49 + 16))(v50, v49);
    v51 = sub_23FB2D3C4();
    v53 = v52;
    v54 = sub_23F7B0944();
    sub_23F78F1B0(v54);
    *(_QWORD *)(v1 + 24) = sub_23F69334C(v51, v53, v84);
    sub_23FB2F680();
    swift_bridgeObjectRelease();
    sub_23F7B0980();
    sub_23F7B0B48(&dword_23F68F000, v73, v45, "ToolEmbeddingDatabase: %s replaceTools is a no-op. Stored assistantSchemas version is equal to the passed in version.", v47);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  sub_23F7B0BD0();
  sub_23F7B0980();

  v59 = sub_23F7B0BC4();
  v60(v59);
  swift_task_dealloc();
  sub_23F6F52B0();
  swift_task_dealloc();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  return sub_23F7B089C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_23F7AD8DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 200) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7AD930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 && (*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 200);
    sub_23F7C7FB0();
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 200);
    sub_23F7C81E0(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  }
  sub_23F6BC34C(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  if (v2)
  {
    sub_23F7B0B2C();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
  }
  else
  {
    swift_task_dealloc();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7ADA24()
{
  uint64_t v0;

  sub_23F6BC34C(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  sub_23F693DFC();
  sub_23F7B0B2C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  return sub_23F750B60(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ToolboxCancellationStatus.isCancelled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 16) & 1;
}

uint64_t MutableToolbox.allowList(toolDefinitions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_23F7B0730();
}

uint64_t sub_23F7ADAB8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  static Toolbox.toolboxAllowList()(&v4);
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_23F7ADB44;
  v2 = sub_23F7B0858(*(_QWORD *)(v0 + 16));
  return sub_23F7BE864(v2);
}

uint64_t sub_23F7ADB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7B0800();
  v3 = sub_23F6F5110();
  if (!v1)
    v3 = v0;
  return sub_23F7B073C(v3, *(uint64_t (**)(void))(v2 + 8));
}

void MutableToolbox.toolBoxVersion()()
{
  sub_23F7C7EB8();
  sub_23F694CC8();
}

void MutableToolbox.assistantSchemaVersion()()
{
  sub_23F7C7EC4();
  sub_23F694CC8();
}

void sub_23F7ADBB4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23F7ADBE0()
{
  uint64_t v0;

  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate);
}

uint64_t MutableToolbox.deinit()
{
  uint64_t v0;

  QueryableToolbox.deinit();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate);
  return v0;
}

uint64_t MutableToolbox.__deallocating_deinit()
{
  uint64_t v0;

  QueryableToolbox.deinit();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport14MutableToolbox_delegate);
  sub_23F7B0E08();
  return swift_deallocClassInstance();
}

uint64_t ToolboxCancellationStatus.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t ToolboxCancellationStatus.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

Swift::Void __swiftcall ToolboxCancellationStatus.cancel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 16) = 1;
}

void ToolboxCancellationStatus.deinit()
{
  uint64_t v0;

  v0 = sub_23F6916B8(&qword_256EA9BA8);
  sub_23F6B6454(v0);
  sub_23F694CC8();
}

uint64_t ToolboxCancellationStatus.__deallocating_deinit()
{
  uint64_t v0;

  v0 = sub_23F6916B8(&qword_256EA9BA8);
  sub_23F6B6454(v0);
  return swift_deallocClassInstance();
}

void sub_23F7ADCE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;

  v3 = a1[1];
  v4 = sub_23FB2FB30();
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_23F7AE344(0, v3, 1, a1);
      return;
    }
    goto LABEL_144;
  }
  v5 = v4;
  sub_23F6D87F4(v3 / 2);
  v101 = v6;
  v102 = v3;
  v103 = v7;
  v99 = a1;
  if (v3 <= 0)
  {
    v104 = MEMORY[0x24BEE4AF8];
    v33 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_110:
    if (v33 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v101 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    v90 = *v99;
    while (1)
    {
      v91 = v33 - 2;
      if (v33 < 2)
        break;
      if (!v90)
        goto LABEL_153;
      v92 = v104;
      v93 = *(_QWORD *)(v104 + 32 + 16 * v91);
      v94 = *(_QWORD *)(v104 + 32 + 16 * (v33 - 1) + 8);
      sub_23F7AE408((char *)(v90 + 16 * v93), (char *)(v90 + 16 * *(_QWORD *)(v104 + 32 + 16 * (v33 - 1))), v90 + 16 * v94, v103);
      if (v1)
        goto LABEL_106;
      if (v94 < v93)
        goto LABEL_139;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7DB834();
        v92 = v97;
      }
      if (v91 >= *(_QWORD *)(v92 + 16))
        goto LABEL_140;
      v95 = (_QWORD *)(v92 + 32 + 16 * v91);
      *v95 = v93;
      v95[1] = v94;
      v96 = *(_QWORD *)(v92 + 16);
      if (v33 > v96)
        goto LABEL_141;
      memmove((void *)(v92 + 32 + 16 * (v33 - 1)), (const void *)(v92 + 32 + 16 * v33), 16 * (v96 - v33));
      v104 = v92;
      *(_QWORD *)(v92 + 16) = v96 - 1;
      v33 = v96 - 1;
      v3 = v102;
      if (v96 <= 2)
        goto LABEL_121;
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  v100 = v5;
  v8 = 0;
  v9 = *a1;
  v98 = *a1 + 8;
  v104 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v10 = v8++;
    if (v8 >= v3)
      goto LABEL_32;
    v11 = (uint64_t *)(v9 + 16 * v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = (_QWORD *)(v9 + 16 * v10);
    if (v12 == *v14 && v13 == v14[1])
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v3)
        goto LABEL_31;
      v16 = 0;
LABEL_13:
      v18 = (_QWORD *)(v98 + 16 * v17);
      do
      {
        v19 = (_QWORD *)(v9 + 16 * v8);
        if (*(v18 - 1) == *v19 && *v18 == v19[1])
        {
          if ((v16 & 1) != 0)
            goto LABEL_24;
        }
        else if (((v16 ^ sub_23FB2FB78()) & 1) != 0)
        {
          goto LABEL_23;
        }
        v18 += 2;
        v21 = v17 + 1;
        v8 = v17;
        v17 = v21;
      }
      while (v21 < v3);
      v17 = v21;
      goto LABEL_23;
    }
    v16 = sub_23FB2FB78();
    v17 = v10 + 2;
    if (v10 + 2 < v3)
      goto LABEL_13;
LABEL_23:
    v8 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_32;
LABEL_24:
    if (v17 < v10)
      goto LABEL_148;
    if (v10 < v17)
    {
      v22 = 16 * v17;
      v23 = 16 * v10;
      v24 = v17;
      v25 = v10;
      do
      {
        if (v25 != --v24)
        {
          if (!v9)
            goto LABEL_152;
          v26 = v9 + v22;
          v27 = *(_QWORD *)(v9 + v23);
          v28 = *(_QWORD *)(v9 + v23 + 8);
          *(_OWORD *)(v9 + v23) = *(_OWORD *)(v9 + v22 - 16);
          *(_QWORD *)(v26 - 16) = v27;
          *(_QWORD *)(v26 - 8) = v28;
        }
        ++v25;
        v22 -= 16;
        v23 += 16;
      }
      while (v25 < v24);
    }
LABEL_31:
    v8 = v17;
LABEL_32:
    if (v8 >= v3)
      goto LABEL_41;
    if (__OFSUB__(v8, v10))
      goto LABEL_143;
    if (v8 - v10 >= v100)
      goto LABEL_41;
    if (__OFADD__(v10, v100))
      goto LABEL_146;
    if (v10 + v100 >= v3)
      v29 = v3;
    else
      v29 = v10 + v100;
    if (v29 < v10)
      goto LABEL_147;
    if (v8 == v29)
    {
LABEL_41:
      v30 = v104;
    }
    else
    {
      v81 = (_QWORD *)(v9 + 16 * v8);
      v30 = v104;
      do
      {
        v82 = (uint64_t *)(v9 + 16 * v8);
        v83 = *v82;
        v84 = v82[1];
        v85 = v10;
        v86 = v81;
        do
        {
          v87 = v83 == *(v86 - 2) && v84 == *(v86 - 1);
          if (v87 || (sub_23FB2FB78() & 1) == 0)
            break;
          if (!v9)
            goto LABEL_150;
          v83 = *v86;
          v84 = v86[1];
          *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
          *(v86 - 1) = v84;
          *(v86 - 2) = v83;
          v86 -= 2;
          ++v85;
        }
        while (v8 != v85);
        ++v8;
        v81 += 2;
      }
      while (v8 != v29);
      v8 = v29;
    }
    if (v8 < v10)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F7DB74C(0, *(_QWORD *)(v30 + 16) + 1, 1, (char *)v30);
      v30 = v88;
    }
    v32 = *(_QWORD *)(v30 + 16);
    v31 = *(_QWORD *)(v30 + 24);
    v33 = v32 + 1;
    if (v32 >= v31 >> 1)
    {
      sub_23F7DB74C(v31 > 1, v32 + 1, 1, (char *)v30);
      v30 = v89;
    }
    *(_QWORD *)(v30 + 16) = v33;
    v34 = v30 + 32;
    v35 = (uint64_t *)(v30 + 32 + 16 * v32);
    *v35 = v10;
    v35[1] = v8;
    v104 = v30;
    if (v32)
      break;
    v33 = 1;
LABEL_90:
    v3 = v102;
    if (v8 >= v102)
      goto LABEL_110;
  }
  while (1)
  {
    v36 = v33 - 1;
    if (v33 >= 4)
    {
      v41 = v34 + 16 * v33;
      v42 = *(_QWORD *)(v41 - 64);
      v43 = *(_QWORD *)(v41 - 56);
      v47 = __OFSUB__(v43, v42);
      v44 = v43 - v42;
      if (v47)
        goto LABEL_127;
      v46 = *(_QWORD *)(v41 - 48);
      v45 = *(_QWORD *)(v41 - 40);
      v47 = __OFSUB__(v45, v46);
      v39 = v45 - v46;
      v40 = v47;
      if (v47)
        goto LABEL_128;
      v48 = v33 - 2;
      v49 = (uint64_t *)(v34 + 16 * (v33 - 2));
      v51 = *v49;
      v50 = v49[1];
      v47 = __OFSUB__(v50, v51);
      v52 = v50 - v51;
      if (v47)
        goto LABEL_129;
      v47 = __OFADD__(v39, v52);
      v53 = v39 + v52;
      if (v47)
        goto LABEL_131;
      if (v53 >= v44)
      {
        v71 = (uint64_t *)(v34 + 16 * v36);
        v73 = *v71;
        v72 = v71[1];
        v47 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v47)
          goto LABEL_137;
        v64 = v39 < v74;
        goto LABEL_79;
      }
    }
    else
    {
      if (v33 != 3)
      {
        v65 = *(_QWORD *)(v30 + 32);
        v66 = *(_QWORD *)(v30 + 40);
        v47 = __OFSUB__(v66, v65);
        v58 = v66 - v65;
        v59 = v47;
        goto LABEL_73;
      }
      v38 = *(_QWORD *)(v30 + 32);
      v37 = *(_QWORD *)(v30 + 40);
      v47 = __OFSUB__(v37, v38);
      v39 = v37 - v38;
      v40 = v47;
    }
    if ((v40 & 1) != 0)
      goto LABEL_130;
    v48 = v33 - 2;
    v54 = (uint64_t *)(v34 + 16 * (v33 - 2));
    v56 = *v54;
    v55 = v54[1];
    v57 = __OFSUB__(v55, v56);
    v58 = v55 - v56;
    v59 = v57;
    if (v57)
      goto LABEL_132;
    v60 = (uint64_t *)(v34 + 16 * v36);
    v62 = *v60;
    v61 = v60[1];
    v47 = __OFSUB__(v61, v62);
    v63 = v61 - v62;
    if (v47)
      goto LABEL_134;
    if (__OFADD__(v58, v63))
      goto LABEL_136;
    if (v58 + v63 >= v39)
    {
      v64 = v39 < v63;
LABEL_79:
      if (v64)
        v36 = v48;
      goto LABEL_81;
    }
LABEL_73:
    if ((v59 & 1) != 0)
      goto LABEL_133;
    v67 = (uint64_t *)(v34 + 16 * v36);
    v69 = *v67;
    v68 = v67[1];
    v47 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if (v47)
      goto LABEL_135;
    if (v70 < v58)
      goto LABEL_90;
LABEL_81:
    v75 = v36 - 1;
    if (v36 - 1 >= v33)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v9)
      goto LABEL_151;
    v76 = (uint64_t *)(v34 + 16 * v75);
    v77 = *v76;
    v78 = (_QWORD *)(v34 + 16 * v36);
    v79 = v78[1];
    sub_23F7AE408((char *)(v9 + 16 * *v76), (char *)(v9 + 16 * *v78), v9 + 16 * v79, v103);
    if (v1)
      break;
    if (v79 < v77)
      goto LABEL_124;
    if (v36 > *(_QWORD *)(v104 + 16))
      goto LABEL_125;
    *v76 = v77;
    *(_QWORD *)(v34 + 16 * v75 + 8) = v79;
    v80 = *(_QWORD *)(v104 + 16);
    if (v36 >= v80)
      goto LABEL_126;
    v30 = v104;
    v33 = v80 - 1;
    memmove((void *)(v34 + 16 * v36), v78 + 2, 16 * (v80 - 1 - v36));
    *(_QWORD *)(v104 + 16) = v80 - 1;
    if (v80 <= 2)
      goto LABEL_90;
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v102 < -1)
    goto LABEL_145;
  *(_QWORD *)(v101 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_23F7AE344(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1))
          break;
        result = sub_23FB2FB78();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23F7AE408(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_23F7551C0(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = (char *)(v12 - 16);
      v21 = *(_QWORD *)(v12 - 16) == *((_QWORD *)v6 - 2) && *(_QWORD *)(v12 - 8) == *((_QWORD *)v6 - 1);
      if (v21 || (sub_23FB2FB78() & 1) == 0)
      {
        v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23)
          goto LABEL_43;
      }
      else
      {
        v22 = v19 != v6 || v18 >= v6;
        v20 = v6 - 16;
        v6 -= 16;
        if (!v22)
          goto LABEL_43;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_47;
    }
  }
  sub_23F7551C0(a1, (a2 - a1) / 16, a4);
  v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v14 && (sub_23FB2FB78() & 1) != 0)
        break;
      v15 = v4;
      v14 = v7 == v4;
      v4 += 16;
      if (!v14)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v15 = v6;
    v14 = v7 == v6;
    v6 += 16;
    if (v14)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  sub_23F7551C0(v4, (uint64_t)(v12 - (_QWORD)v4) / 16, v6);
  return 1;
}

uint64_t sub_23F7AE5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolboxCustomKeyResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23F7AE5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_23F694CC8();
}

uint64_t sub_23F7AE630(uint64_t a1)
{
  destroy for Toolbox(a1);
  return a1;
}

uint64_t sub_23F7AE668(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23F7AE6EC(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return sub_23FB2F740();
LABEL_8:
  __break(1u);
  return result;
}

unint64_t *sub_23F7AE768(unint64_t *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2);
    *result = v5;
    sub_23F6B54F8();
    sub_23F6A3728(v5);
    return (unint64_t *)sub_23F6B5994();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_23F7AE7F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_23F7AE808(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9D20], (uint64_t (*)(_QWORD))MEMORY[0x24BEB9B70]);
}

uint64_t sub_23F7AE808(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t (*a8)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    v12 = result;
    v13 = *(_QWORD *)(a6 + 48);
    v14 = a7(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * a3, v14);
    v15 = *(_QWORD *)(a6 + 56);
    v16 = a8(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a2, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a3, v16);
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_23F7AE8D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_23F6B6B88(a1, a2, a3);
  sub_23F7B0990(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  sub_23F694CC8();
}

uint64_t sub_23F7AE908(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_23F7AE918()
{
  unint64_t result;

  result = qword_256EA9BB0;
  if (!qword_256EA9BB0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolBoxError, &type metadata for ToolBoxError);
    atomic_store(result, (unint64_t *)&qword_256EA9BB0);
  }
  return result;
}

unint64_t sub_23F7AE958()
{
  unint64_t result;

  result = qword_256EA9BB8;
  if (!qword_256EA9BB8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for EmbeddingError, &type metadata for EmbeddingError);
    atomic_store(result, (unint64_t *)&qword_256EA9BB8);
  }
  return result;
}

unint64_t sub_23F7AE998()
{
  unint64_t result;

  result = qword_256EA9BC0;
  if (!qword_256EA9BC0)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolboxEmbeddingModel, &type metadata for ToolboxEmbeddingModel);
    atomic_store(result, (unint64_t *)&qword_256EA9BC0);
  }
  return result;
}

void sub_23F7AE9D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23F7A78D0((uint64_t)&unk_256EA9BC8);
  *(_QWORD *)(a1 + 8) = v2;
  sub_23F7A78D0((uint64_t)&unk_256EA9BD0);
  *(_QWORD *)(a1 + 16) = v3;
}

void sub_23F7AEA30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23F7A78D0((uint64_t)&unk_256EA9BD8);
  *(_QWORD *)(a1 + 8) = v2;
  sub_23F7A78D0((uint64_t)&unk_256EA9BE0);
  *(_QWORD *)(a1 + 16) = v3;
}

void sub_23F7AEA8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23F7A78D0((uint64_t)&unk_256EA9BE8);
  *(_QWORD *)(a1 + 8) = v2;
  sub_23F7A78D0((uint64_t)&unk_256EA9BF0);
  *(_QWORD *)(a1 + 16) = v3;
}

void sub_23F7AEAE8()
{
  sub_23F7A78D0((uint64_t)&unk_256EA9BF8);
}

unint64_t sub_23F7AEB18()
{
  unint64_t result;

  result = qword_256EA9C00;
  if (!qword_256EA9C00)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolBoxToolType, &type metadata for ToolBoxToolType);
    atomic_store(result, (unint64_t *)&qword_256EA9C00);
  }
  return result;
}

void sub_23F7AEB54()
{
  sub_23F7B06D0((uint64_t)&unk_256EA9C08);
}

uint64_t storeEnumTagSinglePayload for ToolBoxError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23F7AEBCC + 4 * byte_23FB5FD3A[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23F7AEC00 + 4 * byte_23FB5FD35[v4]))();
}

uint64_t sub_23F7AEC00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AEC08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7AEC10);
  return result;
}

uint64_t sub_23F7AEC1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7AEC24);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23F7AEC28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AEC30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ToolBoxError()
{
  sub_23F694C70();
}

uint64_t storeEnumTagSinglePayload for EmbeddingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23F7AEC94 + 4 * byte_23FB5FD44[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23F7AECC8 + 4 * byte_23FB5FD3F[v4]))();
}

uint64_t sub_23F7AECC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AECD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7AECD8);
  return result;
}

uint64_t sub_23F7AECE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7AECECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23F7AECF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AECF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for EmbeddingError()
{
  sub_23F694C70();
}

uint64_t dispatch thunk of ToolboxDelegate.model.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ToolboxDelegate.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForToolInvocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForAssistantSchema(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForAssistantSchemaUtterances(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ToolboxDelegate.toolFilter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ToolboxPlanGenerationDelegate.toolDefinitionCustomMapping(toolDefinition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ToolboxPlanGenerationDelegate.assistantSchemaCustomMapping(assistantSchemaIdentifier:assistantToolSchemaDefinition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void type metadata accessor for ToolboxEmbeddingModel()
{
  sub_23F694C70();
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolboxVersion(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_23FB2D3D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ToolboxVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_23FB2D3D0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for ToolboxVersion(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23FB2D3D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for ToolboxVersion(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23FB2D3D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for ToolboxVersion(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23FB2D3D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for ToolboxVersion(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23FB2D3D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolboxVersion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7AEFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7B0944();
  v0 = sub_23F70D890();
  return sub_23F70D620(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolboxVersion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7AEFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7B0944();
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F7AF000()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2D3D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for ToolsOverride()
{
  sub_23F694C70();
}

uint64_t destroy for ToolDefinitionOverrride()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ToolDefinitionOverrride(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ToolDefinitionOverrride(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolDefinitionOverrride(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolDefinitionOverrride(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolDefinitionOverrride(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ToolDefinitionOverrride()
{
  sub_23F694C70();
}

uint64_t dispatch thunk of ToolBoxResult.score.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void initializeBufferWithCopyOfBuffer for ToolBoxToolSearchResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  sub_23F7AF3AC(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

uint64_t destroy for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2)
{
  return sub_23F7AF418(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

void initializeWithCopy for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF44C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

void assignWithCopy for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF480(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

void initializeWithTake for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF4B0(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

void assignWithTake for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF4E4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8FE0]);
}

uint64_t getEnumTagSinglePayload for ToolBoxToolSearchResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7AF2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7B0CB4();
  v0 = sub_23F70D890();
  return sub_23F70D620(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolBoxToolSearchResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7AF2D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7B0CB4();
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F7AF2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F7AF52C(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8FE0]);
}

void initializeBufferWithCopyOfBuffer for ToolBoxAssistantSchemaSearchResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  sub_23F7AF3AC(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEBA5E0]);
}

uint64_t destroy for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2)
{
  return sub_23F7AF418(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEBA5E0]);
}

void initializeWithCopy for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF44C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEBA5E0]);
}

void assignWithCopy for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF480(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEBA5E0]);
}

void initializeWithTake for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF4B0(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEBA5E0]);
}

void assignWithTake for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7AF4E4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEBA5E0]);
}

uint64_t getEnumTagSinglePayload for ToolBoxAssistantSchemaSearchResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7AF354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7B0C04();
  v0 = sub_23F70D890();
  return sub_23F70D620(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolBoxAssistantSchemaSearchResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7AF380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7B0C04();
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F7AF3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F7AF52C(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA5E0]);
}

void sub_23F7AF3AC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;

  if ((*(_DWORD *)(*(_QWORD *)(a3 - 8) + 80) & 0x20000) != 0)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    v7 = a4(0);
    sub_23F6F0A3C(v7);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  sub_23F694C84();
}

uint64_t sub_23F7AF418(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void sub_23F7AF44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;

  v5 = sub_23F7B0794(a1, a2, a3, a4);
  sub_23F7B0990(v4, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16));
  sub_23F7B0E68();
  sub_23F694C84();
}

void sub_23F7AF480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;

  sub_23F7B0794(a1, a2, a3, a4);
  sub_23F7B0DC4();
  sub_23F7B0990(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24));
  sub_23F7B0E7C();
  sub_23F694C84();
}

void sub_23F7AF4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;

  v5 = sub_23F7B0794(a1, a2, a3, a4);
  sub_23F7B0990(v4, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32));
  sub_23F7B0E68();
  sub_23F694C84();
}

void sub_23F7AF4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;

  sub_23F7B0794(a1, a2, a3, a4);
  sub_23F7B0DC4();
  sub_23F7B0990(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40));
  sub_23F7B0E7C();
  sub_23F694C84();
}

uint64_t getEnumTagSinglePayload for ToolBoxClientActionSearchResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ToolBoxClientActionSearchResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7AF52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolboxCustomKeyResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      v6 = sub_23FB2EF54();
    else
      v6 = sub_23FB2E8D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ToolboxCustomKeyResult(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() == 1)
    v2 = sub_23FB2EF54();
  else
    v2 = sub_23FB2E8D0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = sub_23FB2EF54();
  else
    v4 = sub_23FB2E8D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_23F6D3508(a1, type metadata accessor for ToolboxCustomKeyResult);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = sub_23FB2EF54();
    else
      v4 = sub_23FB2E8D0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = sub_23FB2EF54();
  else
    v4 = sub_23FB2E8D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_23F6D3508(a1, type metadata accessor for ToolboxCustomKeyResult);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = sub_23FB2EF54();
    else
      v4 = sub_23FB2E8D0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23F7AF91C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23FB2E8D0();
  if (v1 <= 0x3F)
  {
    result = sub_23FB2EF54();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ToolBoxToolType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23F7AF9E8 + 4 * byte_23FB5FD4E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23F7AFA1C + 4 * byte_23FB5FD49[v4]))();
}

uint64_t sub_23F7AFA1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AFA24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7AFA2CLL);
  return result;
}

uint64_t sub_23F7AFA38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7AFA40);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23F7AFA44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AFA4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ToolBoxToolType()
{
  sub_23F694C70();
}

uint64_t sub_23F7AFA64()
{
  return type metadata accessor for QueryableToolbox(0);
}

uint64_t type metadata accessor for QueryableToolbox(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EA9E98);
}

uint64_t sub_23F7AFA80()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2C320();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for QueryableToolbox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of QueryableToolbox.search(query:numOfUniqueTools:clientIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v5 + 16) = v11;
  sub_23F7B0DDC(v11, (uint64_t)sub_23F7B0728);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of QueryableToolbox.search(query:bundleIDs:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_23F7B0D1C();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_23F7B0BA8(v1, (uint64_t)sub_23F7B0728);
  return sub_23F7B09FC(v2, v3, v4, v5);
}

uint64_t dispatch thunk of QueryableToolbox.search(query:toolIDs:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_23F7B0D1C();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_23F7B0BA8(v1, (uint64_t)sub_23F7B0728);
  return sub_23F7B09FC(v2, v3, v4, v5);
}

uint64_t dispatch thunk of QueryableToolbox.toolMapping(customKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of QueryableToolbox.toolboxAllowedTools()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 184) + *(_QWORD *)(*(_QWORD *)v0 + 184));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  sub_23F7B0DDC(v2, (uint64_t)sub_23F7AFC78);
  return sub_23F7440D0(v4);
}

uint64_t sub_23F7AFC78()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7B0800();
  sub_23F6F5110();
  return sub_23F7B073C(v0, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t dispatch thunk of QueryableToolbox.count()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of QueryableToolbox.countToolDefinitions()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of QueryableToolbox.count(toolType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of QueryableToolbox.warmup()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of QueryableToolbox.cooldown()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of QueryableToolbox.listTools(toolType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t sub_23F7AFD34()
{
  return type metadata accessor for MutableToolbox(0);
}

uint64_t type metadata accessor for MutableToolbox(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EA9FF8);
}

uint64_t sub_23F7AFD50()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for MutableToolbox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MutableToolbox.__allocating_init(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t type metadata accessor for ToolboxCancellationStatus()
{
  return objc_opt_self();
}

uint64_t method lookup function for ToolboxCancellationStatus()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ToolboxCancellationStatus.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_23F7AFDE8()
{
  if (MEMORY[0x24BEE4F18])
    return sub_23F6916B8(&qword_256EA9BA8);
  else
    return MEMORY[0x24BEE4AE0] + 8;
}

ValueMetadata *type metadata accessor for ToolboxCustomKeyResult.CodingKeys()
{
  return &type metadata for ToolboxCustomKeyResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxCustomKeyResult.ToolDefinitionCodingKeys()
{
  return &type metadata for ToolboxCustomKeyResult.ToolDefinitionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxCustomKeyResult.AssistantSchemaCodingKeys()
{
  return &type metadata for ToolboxCustomKeyResult.AssistantSchemaCodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxClientActionSearchResult.CodingKeys()
{
  return &type metadata for ToolBoxClientActionSearchResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxAssistantSchemaSearchResult.CodingKeys()
{
  return &type metadata for ToolBoxAssistantSchemaSearchResult.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport21ToolboxEmbeddingModelOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F7AFEB0 + 4 * byte_23FB5FD58[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F7AFEE4 + 4 * byte_23FB5FD53[v4]))();
}

uint64_t sub_23F7AFEE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AFEEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7AFEF4);
  return result;
}

uint64_t sub_23F7AFF00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7AFF08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F7AFF0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AFF14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolBoxToolSearchResult.CodingKeys()
{
  return &type metadata for ToolBoxToolSearchResult.CodingKeys;
}

uint64_t sub_23F7AFF30(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F7AFF7C + 4 * byte_23FB5FD62[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F7AFFB0 + 4 * byte_23FB5FD5D[v4]))();
}

uint64_t sub_23F7AFFB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AFFB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7AFFC0);
  return result;
}

uint64_t sub_23F7AFFCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7AFFD4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23F7AFFD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7AFFE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ToolDefinitionOverrride.CodingKeys()
{
  sub_23F694C70();
}

uint64_t _s30IntelligenceFlowPlannerSupport22ToolboxCustomKeyResultO24ToolDefinitionCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7B0038 + 4 * byte_23FB5FD67[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F7B0058 + 4 * byte_23FB5FD6C[v4]))();
}

_BYTE *sub_23F7B0038(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F7B0058(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7B0060(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7B0068(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7B0070(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7B0078(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ToolsOverride.CodingKeys()
{
  return &type metadata for ToolsOverride.CodingKeys;
}

unint64_t sub_23F7B0098()
{
  unint64_t result;

  result = qword_256EAA1C0;
  if (!qword_256EAA1C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6064C, &type metadata for ToolsOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA1C0);
  }
  return result;
}

unint64_t sub_23F7B00D8()
{
  unint64_t result;

  result = qword_256EAA1C8;
  if (!qword_256EAA1C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6073C, &unk_250FF8050);
    atomic_store(result, (unint64_t *)&qword_256EAA1C8);
  }
  return result;
}

unint64_t sub_23F7B0118()
{
  unint64_t result;

  result = qword_256EAA1D0;
  if (!qword_256EAA1D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB607F4, &type metadata for ToolBoxToolSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA1D0);
  }
  return result;
}

unint64_t sub_23F7B0158()
{
  unint64_t result;

  result = qword_256EAA1D8;
  if (!qword_256EAA1D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB608AC, &type metadata for ToolBoxAssistantSchemaSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA1D8);
  }
  return result;
}

unint64_t sub_23F7B0198()
{
  unint64_t result;

  result = qword_256EAA1E0;
  if (!qword_256EAA1E0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60964, &type metadata for ToolBoxClientActionSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA1E0);
  }
  return result;
}

unint64_t sub_23F7B01D8()
{
  unint64_t result;

  result = qword_256EAA1E8;
  if (!qword_256EAA1E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60A1C, &type metadata for ToolboxCustomKeyResult.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA1E8);
  }
  return result;
}

unint64_t sub_23F7B0218()
{
  unint64_t result;

  result = qword_256EAA1F0;
  if (!qword_256EAA1F0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60AD4, &type metadata for ToolboxCustomKeyResult.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA1F0);
  }
  return result;
}

unint64_t sub_23F7B0258()
{
  unint64_t result;

  result = qword_256EAA1F8;
  if (!qword_256EAA1F8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60B8C, &type metadata for ToolboxCustomKeyResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA1F8);
  }
  return result;
}

unint64_t sub_23F7B0298()
{
  unint64_t result;

  result = qword_256EAA200;
  if (!qword_256EAA200)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60A44, &type metadata for ToolboxCustomKeyResult.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA200);
  }
  return result;
}

unint64_t sub_23F7B02D8()
{
  unint64_t result;

  result = qword_256EAA208;
  if (!qword_256EAA208)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60A6C, &type metadata for ToolboxCustomKeyResult.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA208);
  }
  return result;
}

unint64_t sub_23F7B0318()
{
  unint64_t result;

  result = qword_256EAA210;
  if (!qword_256EAA210)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6098C, &type metadata for ToolboxCustomKeyResult.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA210);
  }
  return result;
}

unint64_t sub_23F7B0358()
{
  unint64_t result;

  result = qword_256EAA218;
  if (!qword_256EAA218)
  {
    result = MEMORY[0x242674E5C](&unk_23FB609B4, &type metadata for ToolboxCustomKeyResult.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA218);
  }
  return result;
}

unint64_t sub_23F7B0398()
{
  unint64_t result;

  result = qword_256EAA220;
  if (!qword_256EAA220)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60AFC, &type metadata for ToolboxCustomKeyResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA220);
  }
  return result;
}

unint64_t sub_23F7B03D8()
{
  unint64_t result;

  result = qword_256EAA228;
  if (!qword_256EAA228)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60B24, &type metadata for ToolboxCustomKeyResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA228);
  }
  return result;
}

unint64_t sub_23F7B0418()
{
  unint64_t result;

  result = qword_256EAA230;
  if (!qword_256EAA230)
  {
    result = MEMORY[0x242674E5C](&unk_23FB608D4, &type metadata for ToolBoxClientActionSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA230);
  }
  return result;
}

unint64_t sub_23F7B0458()
{
  unint64_t result;

  result = qword_256EAA238;
  if (!qword_256EAA238)
  {
    result = MEMORY[0x242674E5C](&unk_23FB608FC, &type metadata for ToolBoxClientActionSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA238);
  }
  return result;
}

unint64_t sub_23F7B0498()
{
  unint64_t result;

  result = qword_256EAA240;
  if (!qword_256EAA240)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6081C, &type metadata for ToolBoxAssistantSchemaSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA240);
  }
  return result;
}

unint64_t sub_23F7B04D8()
{
  unint64_t result;

  result = qword_256EAA248;
  if (!qword_256EAA248)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60844, &type metadata for ToolBoxAssistantSchemaSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA248);
  }
  return result;
}

unint64_t sub_23F7B0518()
{
  unint64_t result;

  result = qword_256EAA250;
  if (!qword_256EAA250)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60764, &type metadata for ToolBoxToolSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA250);
  }
  return result;
}

unint64_t sub_23F7B0558()
{
  unint64_t result;

  result = qword_256EAA258;
  if (!qword_256EAA258)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6078C, &type metadata for ToolBoxToolSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA258);
  }
  return result;
}

unint64_t sub_23F7B0598()
{
  unint64_t result;

  result = qword_256EAA260;
  if (!qword_256EAA260)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60674, &unk_250FF8050);
    atomic_store(result, (unint64_t *)&qword_256EAA260);
  }
  return result;
}

unint64_t sub_23F7B05D8()
{
  unint64_t result;

  result = qword_256EAA268;
  if (!qword_256EAA268)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6069C, &unk_250FF8050);
    atomic_store(result, (unint64_t *)&qword_256EAA268);
  }
  return result;
}

unint64_t sub_23F7B0618()
{
  unint64_t result;

  result = qword_256EAA270;
  if (!qword_256EAA270)
  {
    result = MEMORY[0x242674E5C](&unk_23FB605BC, &type metadata for ToolsOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA270);
  }
  return result;
}

unint64_t sub_23F7B0658()
{
  unint64_t result;

  result = qword_256EAA278;
  if (!qword_256EAA278)
  {
    result = MEMORY[0x242674E5C](&unk_23FB605E4, &type metadata for ToolsOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA278);
  }
  return result;
}

uint64_t sub_23F7B0694(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Toolbox(a2, a1);
  return a2;
}

void sub_23F7B06D0(uint64_t a1)
{
  uint64_t *v1;

  if (!sub_23F6B6A68(a1))
  {
    sub_23F6AE310(v1);
    sub_23F72E3C8();
  }
  sub_23F694CC8();
}

uint64_t sub_23F7B0730()
{
  return swift_task_switch();
}

uint64_t sub_23F7B073C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_23F7B0744()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = v0[40];
  v1 = v0[41];
  v4 = v0[38];
  v3 = v0[39];
  v6 = v0[34];
  v5 = v0[35];
  sub_23F6D1E64(v0[36], v0[37]);
  sub_23F6D1E64(v6, v5);
  sub_23F6D1E64(v2, v1);
  sub_23F6D1E64(v4, v3);
  return v6;
}

uint64_t sub_23F7B0794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

uint64_t sub_23F7B07A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_23F6D1E64(a1, a2);
  sub_23F6D1E64(v4, v3);
  return v2;
}

uint64_t sub_23F7B07CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_23F6D1E64(a1, a2);
  sub_23F6D1E64(v4, v3);
  return v2;
}

uint64_t sub_23F7B07F0()
{
  return sub_23FB2FB78();
}

void sub_23F7B0800()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_23F7B0814()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = v0[40];
  v1 = v0[41];
  v3 = v0[38];
  v5 = v0[34];
  v4 = v0[35];
  sub_23F6D1E64(v0[36], v0[37]);
  sub_23F6D1E64(v5, v4);
  sub_23F6D1E64(v2, v1);
  return v3;
}

uint64_t sub_23F7B0858@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_23F7B0864(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7B0880(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_23F7B089C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7B08B8()
{
  return swift_task_alloc();
}

uint64_t sub_23F7B08CC()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7B08D4()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7B08DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23F7B0900()
{
  return sub_23FB2FA34();
}

uint64_t sub_23F7B0924()
{
  type metadata accessor for ToolboxVersion(0);
  return sub_23FB2D3D0();
}

uint64_t sub_23F7B0944()
{
  return sub_23FB2D3D0();
}

uint64_t sub_23F7B094C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
}

uint64_t sub_23F7B0960()
{
  return sub_23FB2FAD0();
}

uint64_t sub_23F7B0980()
{
  return swift_release_n();
}

uint64_t sub_23F7B0988()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7B0990@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_23F7B0998(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  sub_23F6D1E64(a1, a2);
  return sub_23F6D1E64(v3, v2);
}

uint64_t sub_23F7B09B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_23F6D1E64(a1, a2);
  return v2;
}

uint64_t sub_23F7B09C8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 248);
}

uint64_t sub_23F7B09EC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23F6D1E20(v0, v1);
}

uint64_t sub_23F7B09FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_23F7B0A0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_23F7B0A1C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23F7B0A28()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7B0A50()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = v0[38];
  v3 = v0[34];
  v2 = v0[35];
  sub_23F6D1E64(v0[36], v0[37]);
  sub_23F6D1E64(v3, v2);
  return v1;
}

uint64_t sub_23F7B0A80(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return sub_23FB2F680();
}

uint64_t sub_23F7B0A98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7B0AA8()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F7B0AC0()
{
  return swift_dynamicCast();
}

uint64_t sub_23F7B0AD8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return v0 - 66;
}

void sub_23F7B0AF8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
}

uint64_t sub_23F7B0B18()
{
  return 0x6D6178655F736F70;
}

uint64_t sub_23F7B0B2C()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7B0B40()
{
  return swift_arrayDestroy();
}

void sub_23F7B0B48(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_23F7B0B50()
{
  return sub_23FB2FA7C();
}

uint64_t sub_23F7B0B64(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7B0B84()
{
  return sub_23FB2E378();
}

uint64_t sub_23F7B0B8C()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7B0B94()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7B0BA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_23F7B0BC4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7B0BD0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23F6BC34C(v1, v0);
}

uint64_t sub_23F7B0BDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t sub_23F7B0BE8()
{
  return swift_retain();
}

void sub_23F7B0BF0()
{
  uint64_t v0;
  uint64_t *v1;

  sub_23F6B4F84(v0, v1);
}

uint64_t sub_23F7B0C04()
{
  return sub_23FB2EF54();
}

uint64_t sub_23F7B0C10()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7B0C20()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7B0C30()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F7B0C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  return sub_23F69334C(v5, v4, (uint64_t *)va);
}

uint64_t sub_23F7B0C6C()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[16], v0[13]);
}

BOOL sub_23F7B0C7C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_23F7B0C8C()
{
  return swift_retain_n();
}

uint64_t sub_23F7B0C94()
{
  return swift_getEnumCaseMultiPayload();
}

void sub_23F7B0C9C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_23F7B0CAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_23F6D8AB0(a1, a2, v2);
}

uint64_t sub_23F7B0CB4()
{
  return sub_23FB2E8D0();
}

uint64_t sub_23F7B0CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  return (*(uint64_t (**)(_QWORD, uint64_t))(a16 + 8))(*(_QWORD *)(v17 - 112), a17);
}

uint64_t sub_23F7B0CF0(uint64_t a1)
{
  unint64_t v1;

  return sub_23F6D1E64(a1, v1);
}

uint64_t sub_23F7B0CF8()
{
  return sub_23FB2E8D0();
}

uint64_t sub_23F7B0D00()
{
  return sub_23FB2EF54();
}

unint64_t sub_23F7B0D08()
{
  return 0xED00007070417974;
}

uint64_t sub_23F7B0D30(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v1);
}

uint64_t sub_23F7B0D3C()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F7B0D44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 288);
}

BOOL sub_23F7B0D58(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_23F7B0D60()
{
  uint64_t v0;

}

uint64_t sub_23F7B0D6C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 288);
}

uint64_t sub_23F7B0D80()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23F7B0DB0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23F6D1E0C(v1, v0);
}

uint64_t sub_23F7B0DBC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_23F7B0DD0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_23F7B0DDC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_23F7B0DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  uint64_t v22;

  return sub_23F6D1E64(v22, a22);
}

uint64_t sub_23F7B0DF4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23F6D1E64(v1, v0);
}

uint64_t sub_23F7B0E00()
{
  return swift_task_alloc();
}

uint64_t sub_23F7B0E08()
{
  uint64_t v0;

  return v0;
}

void sub_23F7B0E1C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7AE5F0(v0, v1 - 168);
}

void sub_23F7B0E28()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7AE5F0(v0, v1 - 128);
}

uint64_t sub_23F7B0E34()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7B0E3C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_23F7B0E48()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23F7B0E54()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_23F7A8DD0();
}

uint64_t sub_23F7B0E60@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return a2(a1, a15);
}

uint64_t sub_23F7B0E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(v0 + 20)) = *(_DWORD *)(v1 + *(int *)(v0 + 20));
  return v2;
}

uint64_t sub_23F7B0E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(v0 + 20)) = *(_DWORD *)(v1 + *(int *)(v0 + 20));
  return v2;
}

uint64_t sub_23F7B0E90()
{
  return swift_task_dealloc();
}

uint64_t ToolDefinition.promptDefinition.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = sub_23FB2ED5C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23FB2EE7C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = 543581540;
  v25 = 0xE400000000000000;
  sub_23FB2E8AC();
  sub_23FB2F254();
  sub_23F717D54();
  sub_23F6B5A54();
  v9 = sub_23FB2E84C();
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v18 = v4;
    v19 = v2;
    v20 = v0;
    v21 = v1;
    v11 = v9 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, v11, v5);
      v22 = sub_23FB2EE70();
      v23 = v14;
      sub_23FB2F254();
      sub_23FB2F254();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v11 += v12;
      --v10;
    }
    while (v10);
    sub_23F717D54();
    v1 = v21;
    v4 = v18;
    v2 = v19;
  }
  else
  {
    sub_23F717D54();
  }
  v15 = *(_QWORD *)(sub_23FB2E84C() + 16);
  swift_bridgeObjectRelease();
  if (v15)
    sub_23F6ACA7C(2);
  v16 = sub_23F6B5A54();
  MEMORY[0x2426734C4](v16);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_23FB2F254();
  sub_23F6B5A54();
  return v24;
}

uint64_t TypeIdentifier.pythonType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v26;
  BOOL v27;
  int v29;
  BOOL v30;
  int v32;
  uint64_t v34;

  v1 = v0;
  v2 = sub_23FB2EDD4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (uint64_t)&v34 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v34 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v34 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v34 - v13, v1, v2);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v14, v2);
  if (v15 != *MEMORY[0x24BEB9D18])
  {
    if (v15 == *MEMORY[0x24BEB9D00])
    {
      sub_23F7B1588((uint64_t)v6);
      sub_23F6B56E0((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
      sub_23FB2ED98();
      v18 = sub_23F7B15B8();
      v19 = sub_23F7B1594(v18);
      if ((_DWORD)v19 == *MEMORY[0x24BEB9BF0])
      {
        sub_23F7B1580();
        v9 = 0x7972657551;
        goto LABEL_69;
      }
      v9 = v19;
      if ((_DWORD)v19 == *MEMORY[0x24BEB9BD0]
        || (_DWORD)v19 == *MEMORY[0x24BEB9BB0]
        || (_DWORD)v19 == *MEMORY[0x24BEB9C08]
        || (_DWORD)v19 == *MEMORY[0x24BEB9BE8])
      {
        goto LABEL_22;
      }
      if ((_DWORD)v19 == *MEMORY[0x24BEB9C10])
      {
        sub_23F7B1580();
        v9 = 0x79636E6572727543;
        goto LABEL_69;
      }
      if ((_DWORD)v19 == *MEMORY[0x24BEB9BE0])
      {
        sub_23F7B1580();
        v9 = 1701603654;
        goto LABEL_69;
      }
      v26 = (_DWORD)v19 == *MEMORY[0x24BEB9C18] || (_DWORD)v19 == *MEMORY[0x24BEB9BA8];
      v27 = v26 || (_DWORD)v19 == *MEMORY[0x24BEB9BC0];
      if (v27 || (_DWORD)v19 == *MEMORY[0x24BEB9C00])
        goto LABEL_22;
      if ((_DWORD)v19 == *MEMORY[0x24BEB9BF8])
      {
        sub_23F7B1580();
        v9 = 0x6E6F73726550;
        goto LABEL_69;
      }
      if ((_DWORD)v19 == *MEMORY[0x24BEB9C28])
      {
        sub_23F7B1580();
        v9 = 0x72616D6563616C50;
        goto LABEL_69;
      }
      v30 = (_DWORD)v19 == *MEMORY[0x24BEB9BC8] || (_DWORD)v19 == *MEMORY[0x24BEB9BD8];
      if (v30 || (_DWORD)v19 == *MEMORY[0x24BEB9C20])
      {
LABEL_22:
        sub_23F7B15A4();
        sub_23F7B1580();
        goto LABEL_69;
      }
      v32 = *MEMORY[0x24BEB9BB8];
      sub_23F7B1580();
      if ((_DWORD)v9 == v32)
      {
        v9 = 0x6D6572757361654DLL;
        goto LABEL_69;
      }
    }
    else if (v15 == *MEMORY[0x24BEB9CF8])
    {
      sub_23F7B1588(v9);
      sub_23F6B56E0(v9, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
      v9 = *(_QWORD *)(*(_QWORD *)v9 + 32);
      swift_bridgeObjectRetain();
      swift_release();
      goto LABEL_69;
    }
LABEL_68:
    sub_23F7B15A4();
    goto LABEL_69;
  }
  sub_23F7B1588((uint64_t)v12);
  sub_23F6B56E0((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
  sub_23FB2EDA4();
  v16 = sub_23F7B15B8();
  v17 = sub_23F7B1594(v16);
  if ((_DWORD)v17 != *MEMORY[0x24BEB9CA8])
  {
    v9 = v17;
    if ((_DWORD)v17 == *MEMORY[0x24BEB9C90])
    {
      sub_23F7B1580();
      v9 = 1819242338;
      goto LABEL_69;
    }
    if ((_DWORD)v17 == *MEMORY[0x24BEB9CB0])
    {
      sub_23F7B1580();
      v9 = 0x74616F6C66;
      goto LABEL_69;
    }
    if ((_DWORD)v17 == *MEMORY[0x24BEB9CC0]
      || (_DWORD)v17 == *MEMORY[0x24BEB9C98]
      || (_DWORD)v17 == *MEMORY[0x24BEB9C60]
      || (_DWORD)v17 == *MEMORY[0x24BEB9C88])
    {
      v9 = 7500915;
      sub_23F7B1580();
      goto LABEL_69;
    }
    if ((_DWORD)v17 == *MEMORY[0x24BEB9C38])
    {
      sub_23F7B1580();
      v9 = 1952672100;
      goto LABEL_69;
    }
    v29 = *MEMORY[0x24BEB9C70];
    sub_23F7B1580();
    if ((_DWORD)v9 == v29)
    {
      v9 = 7500915;
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  sub_23F7B1580();
  v9 = 1701736270;
LABEL_69:
  sub_23F6B56E0((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return v9;
}

uint64_t TypeIdentifier.pythonDefinition.getter()
{
  return 0;
}

uint64_t sub_23F7B1580()
{
  return swift_release();
}

uint64_t sub_23F7B1588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_23F7B1594(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 88))(a1, v1);
}

uint64_t sub_23F7B15B8()
{
  return swift_projectBox();
}

void sub_23F7B15C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v18 = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v1, 0);
    v3 = sub_23F7AE664(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(v2 + 32))
      {
        v6 = v4;
        v7 = v2 + 64;
        v15 = v2 + 64;
        while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36))
            goto LABEL_18;
          v8 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v5);
          v9 = v8[1];
          v16 = v1;
          v17 = *v8;
          v10 = v2;
          v12 = *(_QWORD *)(v18 + 16);
          v11 = *(_QWORD *)(v18 + 24);
          swift_bridgeObjectRetain();
          if (v12 >= v11 >> 1)
            sub_23F711194(v11 > 1, v12 + 1, 1);
          *(_QWORD *)(v18 + 16) = v12 + 1;
          v13 = v18 + 16 * v12;
          *(_QWORD *)(v13 + 32) = v17;
          *(_QWORD *)(v13 + 40) = v9;
          if ((uint64_t)v5 >= -(-1 << *(_BYTE *)(v10 + 32)))
            goto LABEL_19;
          v7 = v15;
          if ((*(_QWORD *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36))
            goto LABEL_21;
          v14 = sub_23FB2F740();
          v1 = v16 - 1;
          if (v16 == 1)
            return;
          v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            v6 = *(_DWORD *)(v2 + 36);
            if (v14 < 1 << *(_BYTE *)(v2 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void sub_23F7B1784(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(_QWORD, char *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v41 = a2;
  v42 = a3;
  v40 = sub_23F6916B8(&qword_256EAA798);
  v5 = MEMORY[0x24BDAC7A8](v40);
  v39 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v38 = (_QWORD *)((char *)v33 - v8);
  MEMORY[0x24BDAC7A8](v7);
  v37 = (char *)v33 - v9;
  v10 = type metadata accessor for AssistantSchemaToEmbed(0);
  v36 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v33[1] = v3;
    v46 = MEMORY[0x24BEE4AF8];
    sub_23F7124B0();
    v14 = sub_23F7AE664(a1);
    if ((v14 & 0x8000000000000000) == 0)
    {
      v16 = v14;
      if (v14 < 1 << *(_BYTE *)(a1 + 32))
      {
        v17 = a1 + 64;
        v34 = a1 + 64;
        v35 = a1;
        while ((*(_QWORD *)(v17 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
        {
          if ((_DWORD)v15 != *(_DWORD *)(a1 + 36))
            goto LABEL_20;
          v44 = v15;
          v45 = v16 >> 6;
          v43 = v13;
          v18 = v40;
          v19 = (uint64_t)v12;
          v20 = v37;
          v21 = (uint64_t)&v37[*(int *)(v40 + 48)];
          v22 = *(_QWORD *)(a1 + 48);
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v22 + 8 * v16);
          v25 = type metadata accessor for AssistantSchema(0);
          sub_23F6F5920(v23 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v16, v21, type metadata accessor for AssistantSchema);
          *v20 = v24;
          v26 = v38;
          *v38 = v24;
          sub_23F6F5920(v21, (uint64_t)v26 + *(int *)(v18 + 48), type metadata accessor for AssistantSchema);
          v27 = (uint64_t)v26;
          v28 = v39;
          sub_23F6B4EC0(v27, (uint64_t)v39, &qword_256EAA798);
          v29 = (uint64_t)v20;
          v12 = (char *)v19;
          sub_23F6B4F84(v29, &qword_256EAA798);
          v41(*(_QWORD *)v28, &v28[*(int *)(v18 + 48)]);
          sub_23F6B4F84((uint64_t)v28, &qword_256EAA798);
          v30 = v46;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23F7124B0();
            v30 = v46;
          }
          v31 = *(_QWORD *)(v30 + 16);
          if (v31 >= *(_QWORD *)(v30 + 24) >> 1)
          {
            sub_23F7124B0();
            v30 = v46;
          }
          *(_QWORD *)(v30 + 16) = v31 + 1;
          sub_23F6F594C(v19, v30+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v31, type metadata accessor for AssistantSchemaToEmbed);
          a1 = v35;
          if ((uint64_t)v16 >= -(-1 << *(_BYTE *)(v35 + 32)))
            goto LABEL_21;
          v17 = v34;
          if ((*(_QWORD *)(v34 + 8 * v45) & (1 << v16)) == 0)
            goto LABEL_22;
          if ((_DWORD)v44 != *(_DWORD *)(v35 + 36))
            goto LABEL_23;
          v32 = sub_23FB2F740();
          v13 = v43 - 1;
          if (v43 == 1)
            return;
          v16 = v32;
          if ((v32 & 0x8000000000000000) == 0)
          {
            v15 = *(unsigned int *)(a1 + 36);
            if (v32 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
}

uint64_t sub_23F7B1AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_23FB2D640();
  sub_23F6D3458((unint64_t *)&qword_256EA2820, (uint64_t (*)(uint64_t))MEMORY[0x24BE7A580], MEMORY[0x24BE7A590]);
  v4[6] = v5;
  v4[7] = sub_23FB2F4A0();
  v4[8] = v6;
  return swift_task_switch();
}

uint64_t sub_23F7B1B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = sub_23F7B1C20;
  return sub_23FB2FBC0();
}

uint64_t sub_23F7B1C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v3);
  *(_QWORD *)(v0 + 88) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_23F6B79B4();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23F7B1C7C()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7B1CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = sub_23F6916B8(&qword_256EAA740);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_retain();
  sub_23FB2D628();
  return swift_release();
}

uint64_t sub_23F7B1DA4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 24) = a3;
  v6 = (uint64_t (*)(void))((char *)a1 + *a1);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 32) = v4;
  *v4 = v3;
  v4[1] = sub_23F7B1E00;
  return v6();
}

uint64_t sub_23F7B1E00()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 40) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7B1E4C()
{
  uint64_t v0;

  sub_23F6916B8(&qword_256EAA740);
  sub_23FB2F4B8();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7B1E84()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  sub_23F6916B8(&qword_256EAA740);
  sub_23FB2F4AC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7B1ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[3];
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59[3];

  v5 = sub_23F6916B8(&qword_256EA8140);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v52 = (uint64_t)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v51 = (uint64_t)v46 - v8;
  v9 = sub_23FB2E8D0();
  v50 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v47 = (char *)v46 - v12;
  v49 = type metadata accessor for ToolboxSearchOutput(0);
  MEMORY[0x24BDAC7A8](v49);
  v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v46[2] = v2;
    v17 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v54 = *(_QWORD *)(v13 + 72);
    v46[1] = a1;
    swift_bridgeObjectRetain();
    v18 = MEMORY[0x24BEE4AF8];
    v53 = a2;
    while (1)
    {
      sub_23F6F5920(v17, (uint64_t)v15, type metadata accessor for ToolboxSearchOutput);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v20 = *(_DWORD *)&v15[*(int *)(sub_23F6916B8(&qword_256EAA6E8) + 48)];
          v21 = type metadata accessor for ToolBoxAssistantSchemaSearchResult(0);
          *((_QWORD *)&v57 + 1) = v21;
          sub_23F6D3458(&qword_256EAA708, type metadata accessor for ToolBoxAssistantSchemaSearchResult, (uint64_t)&protocol conformance descriptor for ToolBoxAssistantSchemaSearchResult);
          v58 = v22;
          v23 = sub_23F6F601C((uint64_t *)&v56);
          v24 = sub_23FB2EF54();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, v15, v24);
          goto LABEL_20;
        }
        v20 = *((_DWORD *)v15 + 4);
        v29 = *(_QWORD *)(a2 + 16);
        v55 = v18;
        if (v29 && (v30 = sub_23F78C6DC(), (v31 & 1) != 0))
        {
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v50 + 16))(v52, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v50 + 72) * v30, v9);
          v32 = 0;
        }
        else
        {
          v32 = 1;
        }
        v33 = v52;
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v52, v32, 1, v9);
        swift_bridgeObjectRelease();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v33, 1, v9) == 1)goto LABEL_17;
        v34 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
        v39 = v9;
        v40 = v48;
        v34(v48, v52, v39);
        v21 = type metadata accessor for ToolBoxClientActionSearchResult(0);
        *((_QWORD *)&v57 + 1) = v21;
        sub_23F6D3458(&qword_256EAA700, type metadata accessor for ToolBoxClientActionSearchResult, (uint64_t)&protocol conformance descriptor for ToolBoxClientActionSearchResult);
        v58 = v41;
        v37 = sub_23F6F601C((uint64_t *)&v56);
        v23 = v37;
        v38 = v40;
        v9 = v39;
      }
      else
      {
        v20 = *((_DWORD *)v15 + 4);
        v25 = *(_QWORD *)(a2 + 16);
        v55 = v18;
        if (v25 && (v26 = sub_23F78C6DC(), (v27 & 1) != 0))
        {
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v50 + 16))(v51, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v50 + 72) * v26, v9);
          v28 = 0;
        }
        else
        {
          v28 = 1;
        }
        v33 = v51;
        _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v51, v28, 1, v9);
        swift_bridgeObjectRelease();
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v33, 1, v9) == 1)
        {
LABEL_17:
          sub_23F6B4F84(v33, &qword_256EA8140);
          v56 = 0u;
          v57 = 0u;
          v58 = 0;
          v18 = v55;
          a2 = v53;
          goto LABEL_26;
        }
        v34 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
        v35 = v47;
        v34(v47, v51, v9);
        v21 = type metadata accessor for ToolBoxToolSearchResult(0);
        *((_QWORD *)&v57 + 1) = v21;
        sub_23F6D3458(&qword_256EAA710, type metadata accessor for ToolBoxToolSearchResult, (uint64_t)&protocol conformance descriptor for ToolBoxToolSearchResult);
        v58 = v36;
        v37 = sub_23F6F601C((uint64_t *)&v56);
        v23 = v37;
        v38 = v35;
      }
      v34((char *)v37, (uint64_t)v38, v9);
      v18 = v55;
      a2 = v53;
LABEL_20:
      *(_DWORD *)((char *)v23 + *(int *)(v21 + 20)) = v20;
      if (*((_QWORD *)&v57 + 1))
      {
        sub_23F6F4E24(&v56, (uint64_t)v59);
        sub_23F6F4E24(v59, (uint64_t)&v56);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F7541CC();
          v18 = v43;
        }
        v42 = *(_QWORD *)(v18 + 16);
        if (v42 >= *(_QWORD *)(v18 + 24) >> 1)
        {
          sub_23F7541CC();
          v18 = v44;
        }
        *(_QWORD *)(v18 + 16) = v42 + 1;
        sub_23F6F4E24(&v56, v18 + 40 * v42 + 32);
        goto LABEL_27;
      }
LABEL_26:
      sub_23F6B4F84((uint64_t)&v56, &qword_256EAA6F8);
LABEL_27:
      v17 += v54;
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v18;
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

void sub_23F7B2404(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD);
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[3];
  uint64_t v38;
  int64_t v39;

  v36 = a6;
  v12 = sub_23F6916B8(&qword_256EAA650);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23FB2C6B0();
  v35 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v34 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v32 = (char *)&v29 - v18;
  v39 = a4 >> 1;
  v33 = (a4 >> 1) - a3;
  if (a4 >> 1 != a3)
  {
    v29 = a1;
    swift_unknownObjectRetain();
    v19 = 0;
    v20 = a2 + 56 * a3;
    v21 = MEMORY[0x24BEE4AF8];
    v30 = a3;
    v31 = a5;
    while (a3 + v19 < v39)
    {
      v22 = *(_OWORD *)(v20 + 16);
      v37[0] = *(_OWORD *)v20;
      v37[1] = v22;
      v37[2] = *(_OWORD *)(v20 + 32);
      v38 = *(_QWORD *)(v20 + 48);
      if (__OFADD__(v19, 1))
        goto LABEL_17;
      sub_23F7CE50C((uint64_t)v37);
      a5(v19, v37);
      if (v6)
      {
        sub_23F7CE554((uint64_t)v37);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return;
      }
      sub_23F7CE554((uint64_t)v37);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v14, 1, v15) == 1)
      {
        sub_23F6B4F84((uint64_t)v14, &qword_256EAA650);
      }
      else
      {
        v23 = v15;
        v24 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        v25 = v32;
        v24(v32, v14, v23);
        v24(v34, v25, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F754564();
          v21 = v27;
        }
        v26 = *(_QWORD *)(v21 + 16);
        if (v26 >= *(_QWORD *)(v21 + 24) >> 1)
        {
          sub_23F754564();
          v21 = v28;
        }
        *(_QWORD *)(v21 + 16) = v26 + 1;
        v24((char *)(v21+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v26), v34, v23);
        v15 = v23;
        a3 = v30;
        a5 = v31;
      }
      ++v19;
      v20 += 56;
      if (v33 == v19)
      {
        swift_unknownObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

void sub_23F7B26D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  uint64_t v29;

  v27 = a3;
  v6 = sub_23F6916B8(&qword_256EA9B98);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v25 - v10;
  v29 = a1;
  sub_23F78F084(a2, v28);
  v12 = v28[0];
  v13 = v28[3];
  v14 = v28[4];
  v25 = v28[1];
  v26 = (unint64_t)(v28[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v14)
    goto LABEL_3;
LABEL_2:
  v15 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v16 = v15 | (v13 << 6);
  while (1)
  {
    v20 = *(_QWORD *)(v12 + 48);
    v21 = sub_23FB2EF54();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v11, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v16, v21);
    v22 = *(_QWORD *)(v12 + 56);
    v23 = sub_23FB2E834();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(&v11[*(int *)(v6 + 48)], v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v16, v23);
    sub_23F6B4EC0((uint64_t)v11, (uint64_t)v9, &qword_256EA9B98);
    sub_23F7BC014(&v29, v9, v27);
    if (v3)
    {
      swift_bridgeObjectRelease();
      sub_23F6B4F84((uint64_t)v9, &qword_256EA9B98);
      swift_release();
      swift_release();
      return;
    }
    sub_23F6B4F84((uint64_t)v9, &qword_256EA9B98);
    if (v14)
      goto LABEL_2;
LABEL_3:
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v17 >= v26)
      goto LABEL_24;
    v18 = *(_QWORD *)(v25 + 8 * v17);
    if (!v18)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v26)
        goto LABEL_24;
      v18 = *(_QWORD *)(v25 + 8 * v19);
      if (v18)
        goto LABEL_12;
      v19 = v13 + 3;
      if (v13 + 3 >= v26)
        goto LABEL_24;
      v18 = *(_QWORD *)(v25 + 8 * v19);
      if (v18)
        goto LABEL_12;
      v19 = v13 + 4;
      if (v13 + 4 >= v26)
        goto LABEL_24;
      v18 = *(_QWORD *)(v25 + 8 * v19);
      if (v18)
      {
LABEL_12:
        v17 = v19;
      }
      else
      {
        v17 = v13 + 5;
        if (v13 + 5 >= v26)
          goto LABEL_24;
        v18 = *(_QWORD *)(v25 + 8 * v17);
        if (!v18)
        {
          v24 = v13 + 6;
          while (v24 < v26)
          {
            v18 = *(_QWORD *)(v25 + 8 * v24++);
            if (v18)
            {
              v17 = v24 - 1;
              goto LABEL_13;
            }
          }
LABEL_24:
          swift_release();
          swift_release();
          return;
        }
      }
    }
LABEL_13:
    v14 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v13 = v17;
  }
  __break(1u);
}

uint64_t sub_23F7B297C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_23FB2FC5C();
    sub_23FB2F200();
    v6 = sub_23FB2FC8C();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_23FB2FB78() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_23FB2FB78() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_23F7B2AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_23FB2EF54();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_23F6D3458(&qword_256EA8CB0, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA5E0], MEMORY[0x24BEBA5F8]),
        v6 = sub_23FB2F068(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      sub_23F6D3458((unint64_t *)&qword_256EA8CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA5E0], MEMORY[0x24BEBA600]);
      v12 = sub_23FB2F11C();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_23F7B2C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = sub_23FB2FC50();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

void sub_23F7B2CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  sub_23F6B5220();
  v3 = v2;
  v5 = v4;
  v6 = sub_23F7B0CF8();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F693E0C();
  v28 = v8;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v23 - v10;
  v30 = MEMORY[0x24BEE4AF8];
  v27 = *(_QWORD *)(v5 + 16);
  if (v27)
  {
    v23[1] = v0;
    v24 = v6;
    v12 = 0;
    v25 = v3;
    v26 = v5;
    while (v12 < *(_QWORD *)(v5 + 16))
    {
      v13 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
      v29 = *(_QWORD *)(v1 + 72);
      sub_23F78F5D0((uint64_t)v11, v5 + v13 + v29 * v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      v14 = sub_23FB2E8A0();
      v15 = v3;
      v17 = sub_23F7B297C(v14, v16, v3);
      v18 = v6;
      v19 = v17;
      sub_23F693DFC();
      if ((v19 & 1) != 0)
      {
        v20 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
        v20(v28, v11, v18);
        v21 = v30;
        if ((sub_23F77D9A4() & 1) == 0)
        {
          sub_23F7D2A58();
          sub_23F7122F4();
          v21 = v30;
        }
        v22 = *(_QWORD *)(v21 + 16);
        if (v22 >= *(_QWORD *)(v21 + 24) >> 1)
        {
          sub_23F7122F4();
          v21 = v30;
        }
        *(_QWORD *)(v21 + 16) = v22 + 1;
        v6 = v24;
        v20((char *)(v21 + v13 + v22 * v29), v28, v24);
        v30 = v21;
        v3 = v25;
        v5 = v26;
      }
      else
      {
        sub_23F6B563C((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        v6 = v18;
        v3 = v15;
      }
      if (v27 == ++v12)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    sub_23F6B644C();
    sub_23F6B5908();
    sub_23F77DB18();
    sub_23F6B5100();
  }
}

uint64_t sub_23F7B2EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 1;
  sub_23F6916B8(&qword_256EAA6A0);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 28) = 0;
  sub_23F6B4F58((uint64_t)&v3, v1 + 16, &qword_256EAA690);
  swift_retain();
  sub_23F6B4F84((uint64_t)&v3, &qword_256EAA690);
  *(_QWORD *)(v0 + 16) = v1;
  swift_release();
  return v0;
}

NSObject *sub_23F7B2F44()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  os_unfair_lock_s *v3;
  NSObject *v5;

  v2 = v1;
  v3 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v3 + 7);
  sub_23F7CE6D8((uint64_t)&v3[4], &v5);
  os_unfair_lock_unlock(v3 + 7);
  if (!v1)
    v2 = v5;
  swift_release();
  return v2;
}

NSObject *sub_23F7B2FC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  void (*v19)(char *, uint64_t);
  os_signpost_type_t v20;
  uint8_t *v21;
  os_signpost_id_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[8];
  _BYTE v34[16];
  uint64_t v35;

  v3 = sub_23FB2E774();
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - v7;
  v9 = sub_23FB2E798();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - v14;
  v16 = *(_BYTE *)(a1 + 8);
  v29 = a1;
  if ((v16 & 1) == 0)
  {
    sub_23F6B4F58(a1, (uint64_t)v34, &qword_256EAA688);
    MEMORY[0x242674FF4](v34);
    type metadata accessor for SentencePieceCachableModel();
    v17 = swift_dynamicCastClass();
    if (v17)
    {
      v18 = v17;
      sub_23F6B4F84((uint64_t)v34, &qword_256EAA688);
      return v18;
    }
    swift_unknownObjectRelease();
    sub_23F6B4F84((uint64_t)v34, &qword_256EAA688);
  }
  v30 = v1;
  sub_23FB2DC10();
  sub_23FB2DC10();
  sub_23FB2E78C();
  sub_23FB2E75C();
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  v18 = sub_23FB2E78C();
  v20 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    v22 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v18, v20, v22, "ModelCache.ModelLoad", "", v21, 2u);
    MEMORY[0x242674F4C](v21, -1, -1);
  }

  v24 = v31;
  v23 = v32;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v6, v8, v32);
  sub_23FB2E7C8();
  swift_allocObject();
  sub_23FB2E7BC();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v23);
  v19(v15, v9);
  type metadata accessor for SentencePieceCachableModel();
  swift_allocObject();
  v25 = v30;
  v26 = SentencePieceCachableModel.init()();
  if (!v25)
  {
    v18 = v26;
    v35 = v26;
    swift_unknownObjectWeakInit();
    swift_retain();
    sub_23F6916B8(&qword_256EAA680);
    sub_23FB2F650();
    swift_release();
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    sub_23F6B4EC0((uint64_t)v33, (uint64_t)v34, &qword_256EAA688);
    v34[8] = 0;
    sub_23F7CE700((uint64_t)v34, v29);
  }
  sub_23F7B3300();
  swift_release();
  return v18;
}

uint64_t sub_23F7B3300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  char v22;
  const char *v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  os_signpost_id_t v34;
  void (*v35)(_BYTE *, uint64_t);
  _BYTE *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE v44[12];
  int v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v0 = sub_23FB2E7F8();
  v54 = *(_QWORD *)(v0 - 8);
  v55 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v53 = &v44[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = sub_23FB2E7A4();
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v49 = &v44[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = sub_23FB2E774();
  v4 = *(_QWORD *)(v52 - 8);
  v5 = MEMORY[0x24BDAC7A8](v52);
  v7 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v44[-v8];
  v10 = sub_23FB2E798();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23FB2DC10();
  v14 = sub_23FB2E78C();
  sub_23FB2E7B0();
  v15 = sub_23FB2F614();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v45 = v15;
    v46 = v13;
    v47 = v11;
    v48 = v10;
    v16 = v52;
    swift_retain();
    v17 = v49;
    sub_23FB2E7D4();
    swift_release();
    v19 = v50;
    v18 = v51;
    v20 = v9;
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v50 + 88))(v17, v51) == *MEMORY[0x24BEE7810])
    {
      v21 = 0;
      v22 = 0;
      v23 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v17, v18);
      v23 = "ModelName=%{public, signpost.telemetry:string1,public}s enableTelemetry=YES";
      v22 = 2;
      v21 = 1;
    }
    v24 = v4;
    v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16);
    v26 = v7;
    v27 = v7;
    v28 = v16;
    v29 = v23;
    v25(v27, v9, v16);
    v30 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v57 = v31;
    *(_BYTE *)v30 = v22;
    *(_BYTE *)(v30 + 1) = v21;
    *(_WORD *)(v30 + 2) = 2082;
    v32 = sub_23FB2F7D0();
    v56 = sub_23F69334C(v32, v33, &v57);
    sub_23FB2F680();
    swift_bridgeObjectRelease();
    v34 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v14, (os_signpost_type_t)v45, v34, "ModelCache.ModelLoad", v29, (uint8_t *)v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242674F4C](v31, -1, -1);
    MEMORY[0x242674F4C](v30, -1, -1);

    v35 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
    v35(v20, v28);
    (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v46, v48);
    v35(v26, v28);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v52);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
  v36 = v53;
  sub_23FB2E3C0();
  v37 = sub_23FB2E7E0();
  v38 = sub_23FB2F5E4();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc();
    v40 = swift_slowAlloc();
    v57 = v40;
    *(_DWORD *)v39 = 136315138;
    v41 = sub_23FB2F7D0();
    v56 = sub_23F69334C(v41, v42, &v57);
    sub_23FB2F680();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23F68F000, v37, v38, "Caching - signpost for %s", v39, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242674F4C](v40, -1, -1);
    MEMORY[0x242674F4C](v39, -1, -1);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v54 + 8))(v36, v55);
}

NSObject *sub_23F7B3798(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20[4];
  uint64_t v21;

  v5 = v3;
  v21 = a3;
  v8 = sub_23F6916B8(&qword_256EA47F0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SentencePieceCachableModel();
  v12 = *(os_unfair_lock_s **)(v3 + 16);
  v13 = (uint64_t)&v12[4];
  v14 = &v12[6];
  os_unfair_lock_lock(v12 + 6);
  sub_23F7CE5B0(v13, v11, v20);
  os_unfair_lock_unlock((os_unfair_lock_t)v14);
  if (!v4)
  {
    v19[0] = v11;
    v19[1] = v5;
    v14 = sub_23F7B2F44();
    if ((a1 & 1) != 0)
    {
      sub_23FB2F4D0();
      v16 = sub_23FB2F4E8();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v16);
      v17 = (_QWORD *)swift_allocObject();
      v17[2] = 0;
      v17[3] = 0;
      v17[4] = v14;
      swift_retain();
      sub_23F742C18((uint64_t)v10, (uint64_t)&unk_256EAA670, (uint64_t)v17);
      swift_release();
    }
    v18 = v21;
    if ((sub_23FB2FD04() & 1) != 0)
    {
      v20[3] = v19[0];
      v20[0] = (uint64_t)v14;
      swift_retain();
      sub_23F742D40(0xD00000000000001ALL, 0x800000023FB33710, a2, v18, (uint64_t)v20);
      swift_release();
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v20);
    }
    else
    {
      swift_release();
    }
  }
  return v14;
}

uint64_t sub_23F7B3988(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  uint64_t v18;

  v5 = sub_23FB2E7F8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (sub_23F78C8D8(), (v9 & 1) != 0))
  {
    sub_23F6916B8(&qword_256EAA698);
    v5 = swift_dynamicCastClassUnconditional();
    swift_retain();
  }
  else
  {
    sub_23FB2E3C0();
    v10 = sub_23FB2E7E0();
    v11 = sub_23FB2F5E4();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v17[2] = a1;
      v13 = (uint8_t *)v12;
      v14 = swift_slowAlloc();
      v18 = v14;
      v17[1] = a2;
      *(_DWORD *)v13 = 136315138;
      v17[0] = v13 + 4;
      v17[3] = sub_23F69334C(0xD00000000000001ALL, 0x800000023FB33710, &v18);
      sub_23FB2F680();
      _os_log_impl(&dword_23F68F000, v10, v11, "Model Caching - %s does not exist, creating new model holder", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242674F4C](v14, -1, -1);
      MEMORY[0x242674F4C](v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_23F6916B8(&qword_256EAA698);
    swift_allocObject();
    v15 = sub_23F7B2EAC();
    if (!v2)
    {
      v5 = v15;
      swift_retain();
      sub_23F7DB924();
    }
  }
  return v5;
}

uint64_t sub_23F7B3BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_23F7B3BE8()
{
  uint64_t v0;

  SentencePieceCachableModel.prewarm()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23F7B3C34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD, char *), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD, char *);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v7 = v6;
  v35 = a5;
  v36 = a6;
  v38 = a2;
  v11 = sub_23FB2C6B0();
  v33 = *(_QWORD *)(v11 - 8);
  v34 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v39 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23F6916B8(&qword_256EAA790);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v37 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (_QWORD *)((char *)v29 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v29 - v19;
  v40 = MEMORY[0x24BEE4AF8];
  sub_23F7124EC();
  v21 = v40;
  v22 = a4 >> 1;
  v23 = a3;
  v29[1] = a1;
  swift_unknownObjectRetain();
  if (v22 == a3)
  {
LABEL_13:
    swift_unknownObjectRelease();
  }
  else
  {
    v24 = 0;
    v30 = v23 - v22;
    v31 = v22;
    v32 = v23;
    while (v23 + v24 < v22)
    {
      v25 = type metadata accessor for AssistantSchemaToEmbed(0);
      v26 = (uint64_t)&v37[*(int *)(v13 + 48)];
      sub_23F6F5920(v38 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * (v23 + v24), v26, type metadata accessor for AssistantSchemaToEmbed);
      if (__OFADD__(v24, 1))
        goto LABEL_15;
      v27 = (uint64_t)v18 + *(int *)(v13 + 48);
      *v18 = v24;
      sub_23F6F594C(v26, v27, type metadata accessor for AssistantSchemaToEmbed);
      sub_23F6B4EC0((uint64_t)v18, (uint64_t)v20, &qword_256EAA790);
      v35(*(_QWORD *)v20, &v20[*(int *)(v13 + 48)]);
      if (v7)
      {
        sub_23F6B4F84((uint64_t)v20, &qword_256EAA790);
        swift_release();
        goto LABEL_13;
      }
      sub_23F6B4F84((uint64_t)v20, &qword_256EAA790);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7124EC();
        v21 = v40;
      }
      v28 = *(_QWORD *)(v21 + 16);
      if (v28 >= *(_QWORD *)(v21 + 24) >> 1)
      {
        sub_23F7124EC();
        v21 = v40;
      }
      *(_QWORD *)(v21 + 16) = v28 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v21+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v28, v39, v34);
      v40 = v21;
      ++v24;
      v22 = v31;
      v23 = v32;
      if (!(v30 + v24))
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

uint64_t sub_23F7B3F14(uint64_t a1, __n128 a2)
{
  unsigned __int16 v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    result = sub_23FB2F938();
    __break(1u);
  }
  else if (a1)
  {
    v3 = a2.n128_u16[0];
    result = sub_23FB2F434();
    v5 = 0;
    *(_QWORD *)(result + 16) = a1;
    do
    {
      v6 = result + 2 * v5++;
      *(_WORD *)(v6 + 32) = v3;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t ToolBoxAllowList.init(toolIds:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void ToolboxDelegate.storagePath()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  sub_23F6B50E8();
  sub_23F7D2F74();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_23F7D22D8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B631C();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5F6C();
  sub_23FB2E36C();
  ToolboxDelegate.baseRelativeStoragePath()();
  sub_23FB2C2F0();
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v8, v4);
  sub_23F759774(v0, *MEMORY[0x24BDCD7A0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  sub_23F731C2C();
  sub_23FB2C314();
  sub_23F6B56E0(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F75029C();
  v10(v1, v4);
  sub_23F693DDC();
}

NSData __swiftcall ToolBoxUtility.stableHashData(hashableString:)(Swift::String hashableString)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSData result;

  sub_23F6B50E8();
  sub_23FB2F020();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B90];
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B5864();
  sub_23FB2F014();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B54F8();
  v4 = sub_23F70DC34();
  sub_23F795F30(v4, v5);
  v7 = v6;
  sub_23F6D3458(&qword_256EA9080, v1, MEMORY[0x24BDC6B88]);
  sub_23FB2EFC0();
  __asm { BR              X10 }
  return result;
}

void sub_23F7B41DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  sub_23F7CDD98();
  sub_23F7D26A4();
  sub_23FB2EFB4();
  sub_23F6B56E0(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F7D26A4();
  v4 = sub_23F7963BC(v1);
  v6 = v5;
  v7 = sub_23FB2F434();
  *(_QWORD *)(v7 + 16) = 8;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v3 - 128) = v6;
  v8 = sub_23FB2C3D4();
  if (v8 != v9)
  {
    if (v9 < v8)
    {
      __break(1u);
      JUMPOUT(0x23F7B452CLL);
    }
    v10 = *(_QWORD *)(v3 - 128);
    *(_QWORD *)(v3 - 144) = (uint64_t)v4 >> 32;
    *(_QWORD *)(v3 - 136) = (int)v4;
    *(_QWORD *)(v3 - 160) = v4 >> 8;
    *(_QWORD *)(v3 - 152) = BYTE6(v10);
    *(_QWORD *)(v3 - 176) = v4 >> 24;
    *(_QWORD *)(v3 - 168) = v4 >> 16;
    *(_QWORD *)(v3 - 192) = v4 >> 40;
    *(_QWORD *)(v3 - 184) = HIDWORD(v4);
    *(_QWORD *)(v3 - 208) = HIBYTE(v4);
    *(_QWORD *)(v3 - 200) = HIWORD(v4);
    *(_QWORD *)(v3 - 224) = v10 >> 16;
    *(_QWORD *)(v3 - 216) = v10 >> 8;
    *(_QWORD *)(v3 - 240) = HIDWORD(v10);
    *(_QWORD *)(v3 - 232) = v10 >> 24;
    *(_QWORD *)(v3 - 248) = v10 >> 40;
    if (v8 >= v9)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(v7 + 16))
    {
      ((void (*)(void))((char *)&loc_23F7B437C + *((int *)qword_23F7B4550 + (v10 >> 62))))();
      return;
    }
    __break(1u);
    JUMPOUT(0x23F7B4508);
  }
  objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE50]), sel_initWithBytes_length_, v7 + 32, *(_QWORD *)(v7 + 16));
  sub_23F6BC34C(v4, *(_QWORD *)(v3 - 128));
  swift_bridgeObjectRelease();
  sub_23F693DDC();
}

void ToolboxDelegate.baseRelativeStoragePath()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t);
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;

  sub_23F6B50E8();
  v44 = v4;
  v45 = v0;
  v51 = v6;
  v52 = v5;
  v7 = v4;
  sub_23F7D251C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_23F7D2F74();
  v46 = *(_QWORD *)(v11 - 8);
  v12 = v46;
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B52B0();
  sub_23F6916B8(&qword_256EA12B0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  v14 = sub_23F7D22D8();
  v15 = *(_QWORD *)(v14 - 8);
  v48 = v14;
  v49 = v15;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6D3D14();
  v47 = v18;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6B6580();
  v50 = v20;
  sub_23F6B5A8C(v2, v21, v22, v23);
  v24 = *MEMORY[0x24BDCD7A0];
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104);
  v25(v1, v24, v11);
  sub_23FB2C308();
  v26 = *(void (**)(uint64_t))(v52 + 16);
  v26(v7);
  v27 = sub_23FB2D3C4();
  v29 = v28;
  v30 = sub_23F7B0944();
  sub_23F78F1B0(v30);
  v53 = v27;
  v54 = v29;
  v31 = v24;
  v25(v1, v24, v11);
  v32 = v25;
  v43 = sub_23F731C2C();
  sub_23FB2C314();
  v46 = *(_QWORD *)(v46 + 8);
  v33 = sub_23F78F478();
  v34(v33);
  sub_23F75029C();
  v35 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v35(v3, v48);
  ((void (*)(uint64_t, uint64_t))v26)(v44, v52);
  v36 = *v10;
  sub_23F6B4FAC();
  v53 = v36;
  v53 = sub_23FB2FB48();
  v54 = v37;
  v32(v1, v24, v11);
  sub_23FB2C314();
  v38 = sub_23F78F478();
  v39 = (void (*)(uint64_t))v46;
  ((void (*)(uint64_t))v46)(v38);
  sub_23F75029C();
  v40 = sub_23F6B68A8();
  ((void (*)(uint64_t))v35)(v40);
  v53 = 0x786F426C6F6F74;
  v54 = 0xE700000000000000;
  v32(v1, v31, v11);
  sub_23FB2C314();
  v41 = sub_23F78F478();
  v39(v41);
  sub_23F75029C();
  v42 = sub_23F7D260C();
  ((void (*)(uint64_t))v35)(v42);
  sub_23F693DDC();
}

uint64_t sub_23F7B4854(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, _QWORD *a5)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_signpost_type_t v30;
  uint8_t *v31;
  uint8_t *v32;
  os_signpost_id_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t);
  uint64_t result;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  void *v48;
  NSObject *v49;
  char *v50;
  os_signpost_type_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  NSObject *v60;
  os_signpost_type_t v61;
  char *v62;
  uint64_t v63;
  const char *v64;
  uint8_t *v65;
  char *v66;
  os_signpost_id_t v67;
  const char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  char *v73;
  os_signpost_id_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t (*v90)(_QWORD, _QWORD);
  uint64_t v91;

  v89 = a5;
  v90 = (uint64_t (*)(_QWORD, _QWORD))a1;
  v9 = sub_23FB2E7F8();
  v10 = *(_QWORD *)(v9 - 8);
  v79 = v9;
  v80 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v83 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_23FB2E7A4();
  v85 = *(_QWORD *)(v82 - 8);
  v12 = MEMORY[0x24BDAC7A8](v82);
  v76 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v75 = (char *)&v75 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v78 = (char *)&v75 - v16;
  v88 = sub_23FB2E774();
  v17 = *(_QWORD *)(v88 - 8);
  v18 = MEMORY[0x24BDAC7A8](v88);
  v81 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v77 = (char *)&v75 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v86 = (char *)&v75 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v75 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v75 - v27;
  v87 = *a4;
  sub_23FB2E78C();
  sub_23FB2E75C();
  v29 = sub_23FB2E78C();
  v30 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v84 = a3;
    v32 = v31;
    *(_WORD *)v31 = 0;
    v33 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v29, v30, v33, "ToolboxEmbeddingModel:embed", "", v32, 2u);
    v34 = v32;
    a3 = v84;
    MEMORY[0x242674F4C](v34, -1, -1);
  }

  v35 = v88;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v26, v28, v88);
  sub_23FB2E7C8();
  swift_allocObject();
  sub_23FB2E7BC();
  v36 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  result = v36(v28, v35);
  if ((v87 & 1) != 0)
  {
    if (qword_256EA0A70 != -1)
      swift_once();
    sub_23F7B3798(0, 0, 0);
    if (v5)
    {
      v84 = a3;
      sub_23FB2E3C0();
      v38 = v5;
      v39 = v5;
      v40 = sub_23FB2E7E0();
      v41 = sub_23FB2F5F0();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc();
        v43 = (_QWORD *)swift_slowAlloc();
        v90 = (uint64_t (*)(_QWORD, _QWORD))v36;
        *(_DWORD *)v42 = 138412290;
        v44 = v5;
        v45 = _swift_stdlib_bridgeErrorToNSError();
        v91 = v45;
        v36 = (uint64_t (*)(char *, uint64_t))v90;
        sub_23FB2F680();
        *v43 = v45;
        v35 = v88;

        _os_log_impl(&dword_23F68F000, v40, v41, "Sentence piece model missing. Embedding failed. Error: %@", v42, 0xCu);
        sub_23F6916B8(&qword_256EA2988);
        swift_arrayDestroy();
        MEMORY[0x242674F4C](v43, -1, -1);
        MEMORY[0x242674F4C](v42, -1, -1);
      }
      else
      {

      }
      v56 = v85;
      v57 = v81;
      v58 = v79;

      (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v58);
      sub_23F743D70();
      swift_allocError();
      *v59 = 2;
      swift_willThrow();

      v60 = sub_23FB2E78C();
      sub_23FB2E7B0();
      v61 = sub_23FB2F614();
      if ((sub_23FB2F638() & 1) != 0)
      {
        swift_retain();
        v62 = v76;
        sub_23FB2E7D4();
        swift_release();
        v63 = v82;
        if ((*(unsigned int (**)(char *, uint64_t))(v56 + 88))(v62, v82) == *MEMORY[0x24BEE7810])
        {
          v64 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v56 + 8))(v62, v63);
          v64 = "";
        }
        v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v72 = 0;
        v73 = v81;
        v74 = sub_23FB2E768();
        _os_signpost_emit_with_name_impl(&dword_23F68F000, v60, v61, v74, "ToolboxEmbeddingModel:embed", v64, v72, 2u);
        MEMORY[0x242674F4C](v72, -1, -1);
        v57 = v73;
      }

      v36(v57, v35);
      return swift_release();
    }
    swift_release();
    goto LABEL_20;
  }
  if (a2)
  {
    if (a2 >= 1)
    {
      v46 = *((_QWORD *)v90 + 2);
      if (v46)
      {
        v47 = 0;
        while (1)
        {
          v48 = (void *)MEMORY[0x2426749F4](result);
          sub_23F7B6280((uint64_t)v90, v47, a2, 128, v89);
          if (v5)
            break;
          if (__OFADD__(v47, a2))
            v47 = ((v47 + a2) >> 63) ^ 0x8000000000000000;
          else
            v47 += a2;
          objc_autoreleasePoolPop(v48);
          if (v47 >= v46)
            goto LABEL_20;
        }
        objc_autoreleasePoolPop(v48);
        v49 = sub_23FB2E78C();
        v50 = v77;
        sub_23FB2E7B0();
        v51 = sub_23FB2F614();
        if ((sub_23FB2F638() & 1) == 0)
          goto LABEL_30;
        swift_retain();
        v69 = v75;
        sub_23FB2E7D4();
        swift_release();
        v70 = v85;
        v71 = v82;
        if ((*(unsigned int (**)(char *, uint64_t))(v85 + 88))(v69, v82) == *MEMORY[0x24BEE7810])
        {
          v55 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v71);
          v55 = "";
        }
        v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v65 = 0;
        v66 = v77;
        goto LABEL_29;
      }
    }
LABEL_20:
    v49 = sub_23FB2E78C();
    v50 = v86;
    sub_23FB2E7B0();
    v51 = sub_23FB2F614();
    if ((sub_23FB2F638() & 1) == 0)
    {
LABEL_30:

      v36(v50, v35);
      return swift_release();
    }
    swift_retain();
    v52 = v78;
    sub_23FB2E7D4();
    swift_release();
    v53 = v85;
    v54 = v82;
    if ((*(unsigned int (**)(char *, uint64_t))(v85 + 88))(v52, v82) == *MEMORY[0x24BEE7810])
    {
      v55 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
      v55 = "";
    }
    v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v65 = 0;
    v66 = v86;
LABEL_29:
    v67 = sub_23FB2E768();
    v68 = v55;
    v50 = v66;
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v49, v51, v67, "ToolboxEmbeddingModel:embed", v68, v65, 2u);
    MEMORY[0x242674F4C](v65, -1, -1);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_23F7B5064(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 *a8, uint64_t a9)
{
  void *v9;
  void *v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_signpost_type_t v36;
  uint8_t *v37;
  os_signpost_id_t v38;
  void (**v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (**v41)(char *, char *, uint64_t);
  uint64_t result;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  void *v56;
  _QWORD *v57;
  NSObject *v58;
  char *v59;
  os_signpost_type_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  char *v65;
  _BYTE *v66;
  NSObject *v67;
  os_signpost_type_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint8_t *v73;
  os_signpost_id_t v74;
  NSObject *v75;
  char *v76;
  os_signpost_type_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint8_t *v82;
  os_signpost_id_t v83;
  uint8_t *v84;
  os_signpost_id_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  void (**v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;

  v10 = v9;
  v104 = a6;
  v105 = a1;
  v106 = a4;
  v16 = sub_23FB2E7F8();
  v91 = *(_QWORD *)(v16 - 8);
  v92 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v96 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23FB2E7A4();
  v93 = *(_QWORD *)(v18 - 8);
  v94 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v88 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v86 = (char *)&v86 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v89 = (char *)&v86 - v23;
  v103 = sub_23FB2E774();
  v99 = *(void (***)(char *, char *, uint64_t))(v103 - 8);
  v24 = MEMORY[0x24BDAC7A8](v103);
  v90 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v87 = (char *)&v86 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v95 = (char *)&v86 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v86 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v86 - v33;
  v98 = *v106;
  v101 = a9;
  swift_retain();
  v100 = a5;
  swift_bridgeObjectRetain();
  v102 = a7;
  swift_bridgeObjectRetain();
  v106 = a8;
  swift_retain();
  sub_23FB2E78C();
  sub_23FB2E75C();
  v97 = a3;
  v35 = sub_23FB2E78C();
  v36 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    v38 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v35, v36, v38, "ToolboxEmbeddingModel:embed", "", v37, 2u);
    MEMORY[0x242674F4C](v37, -1, -1);
  }

  v39 = v99;
  v40 = v103;
  v99[2](v32, v34, v103);
  sub_23FB2E7C8();
  swift_allocObject();
  sub_23FB2E7BC();
  v41 = (void (**)(char *, char *, uint64_t))v39[1];
  result = ((uint64_t (*)(char *, uint64_t))v41)(v34, v40);
  v99 = v41;
  if ((v98 & 1) != 0)
  {
    if (qword_256EA0A70 != -1)
      swift_once();
    sub_23F7B3798(0, 0, 0);
    if (v9)
    {
      sub_23FB2E3C0();
      v43 = v9;
      v44 = v9;
      v45 = sub_23FB2E7E0();
      v46 = sub_23FB2F5F0();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc();
        v48 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v47 = 138412290;
        v49 = v9;
        v50 = _swift_stdlib_bridgeErrorToNSError();
        v107 = v50;
        sub_23FB2F680();
        *v48 = v50;

        _os_log_impl(&dword_23F68F000, v45, v46, "Sentence piece model missing. Embedding failed. Error: %@", v47, 0xCu);
        sub_23F6916B8(&qword_256EA2988);
        swift_arrayDestroy();
        MEMORY[0x242674F4C](v48, -1, -1);
        MEMORY[0x242674F4C](v47, -1, -1);
      }
      else
      {

      }
      v65 = v90;

      (*(void (**)(char *, uint64_t))(v91 + 8))(v96, v92);
      sub_23F743D70();
      swift_allocError();
      *v66 = 2;
      swift_willThrow();

      v67 = sub_23FB2E78C();
      sub_23FB2E7B0();
      v68 = sub_23FB2F614();
      if ((sub_23FB2F638() & 1) != 0)
      {
        swift_retain();
        v69 = v88;
        sub_23FB2E7D4();
        swift_release();
        v71 = v93;
        v70 = v94;
        if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v69, v94) == *MEMORY[0x24BEE7810])
        {
          v72 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v70);
          v72 = "";
        }
        v82 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v82 = 0;
        v83 = sub_23FB2E768();
        _os_signpost_emit_with_name_impl(&dword_23F68F000, v67, v68, v83, "ToolboxEmbeddingModel:embed", v72, v82, 2u);
        MEMORY[0x242674F4C](v82, -1, -1);
      }

      ((void (*)(char *, uint64_t))v99)(v65, v103);
LABEL_39:
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return swift_release_n();
    }
    swift_release();
  }
  else
  {
    v52 = v100;
    v51 = v101;
    v53 = v102;
    if (!a2)
    {
      __break(1u);
      return result;
    }
    if (a2 >= 1)
    {
      v54 = *(_QWORD *)(v105 + 16);
      if (v54)
      {
        v55 = 0;
        while (1)
        {
          v56 = (void *)MEMORY[0x2426749F4](result);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v57 = v106;
          swift_retain();
          swift_retain();
          sub_23F7B69C4(v105, v55, a2, 128, v52, v104, v53, v57, v51);
          if (v10)
            break;
          if (__OFADD__(v55, a2))
            v55 = ((v55 + a2) >> 63) ^ 0x8000000000000000;
          else
            v55 += a2;
          objc_autoreleasePoolPop(v56);
          if (v55 >= v54)
            goto LABEL_20;
        }
        objc_autoreleasePoolPop(v56);
        v75 = sub_23FB2E78C();
        v76 = v87;
        sub_23FB2E7B0();
        v77 = sub_23FB2F614();
        if ((sub_23FB2F638() & 1) != 0)
        {
          swift_retain();
          v78 = v86;
          sub_23FB2E7D4();
          swift_release();
          v80 = v93;
          v79 = v94;
          if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v78, v94) == *MEMORY[0x24BEE7810])
          {
            v81 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v80 + 8))(v78, v79);
            v81 = "";
          }
          v84 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v84 = 0;
          v85 = sub_23FB2E768();
          _os_signpost_emit_with_name_impl(&dword_23F68F000, v75, v77, v85, "ToolboxEmbeddingModel:embed", v81, v84, 2u);
          MEMORY[0x242674F4C](v84, -1, -1);
        }

        ((void (*)(char *, uint64_t))v99)(v76, v103);
        goto LABEL_39;
      }
    }
  }
LABEL_20:
  v58 = sub_23FB2E78C();
  v59 = v95;
  sub_23FB2E7B0();
  v60 = sub_23FB2F614();
  if ((sub_23FB2F638() & 1) != 0)
  {
    swift_retain();
    v61 = v89;
    sub_23FB2E7D4();
    swift_release();
    v63 = v93;
    v62 = v94;
    if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v61, v94) == *MEMORY[0x24BEE7810])
    {
      v64 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v62);
      v64 = "";
    }
    v73 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v73 = 0;
    v74 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v58, v60, v74, "ToolboxEmbeddingModel:embed", v64, v73, 2u);
    MEMORY[0x242674F4C](v73, -1, -1);
  }

  ((void (*)(char *, uint64_t))v99)(v59, v103);
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t sub_23F7B5984(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_signpost_type_t v34;
  uint8_t *v35;
  os_signpost_id_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  uint64_t result;
  char *v40;
  id v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  os_signpost_type_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  uint64_t v63;
  _BYTE *v64;
  NSObject *v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint8_t *v71;
  os_signpost_id_t v72;
  NSObject *v73;
  char *v74;
  os_signpost_type_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint8_t *v80;
  os_signpost_id_t v81;
  uint8_t *v82;
  os_signpost_id_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t (*v96)(char *, uint64_t);
  uint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;

  v8 = v7;
  v104 = a4;
  v92 = a1;
  v89 = sub_23FB2E7F8();
  v91 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v95 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23FB2E7A4();
  v93 = *(_QWORD *)(v15 - 8);
  v94 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v87 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v85 = (char *)&v84 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v88 = (char *)&v84 - v20;
  v103 = sub_23FB2E774();
  v21 = *(_QWORD *)(v103 - 8);
  v22 = MEMORY[0x24BDAC7A8](v103);
  v90 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v86 = (char *)&v84 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v99 = (char *)&v84 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v84 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v84 - v31;
  v98 = *v104;
  v100 = a7;
  swift_retain();
  v104 = a5;
  swift_bridgeObjectRetain();
  v101 = a6;
  swift_retain();
  sub_23FB2E78C();
  sub_23FB2E75C();
  v97 = a3;
  v33 = sub_23FB2E78C();
  v34 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    v36 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v33, v34, v36, "ToolboxEmbeddingModel:embed", "", v35, 2u);
    MEMORY[0x242674F4C](v35, -1, -1);
  }

  v37 = v103;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v30, v32, v103);
  sub_23FB2E7C8();
  swift_allocObject();
  v102 = sub_23FB2E7BC();
  v38 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  result = v38(v32, v37);
  v96 = v38;
  if ((v98 & 1) != 0)
  {
    v40 = v99;
    if (qword_256EA0A70 != -1)
      swift_once();
    sub_23F7B3798(0, 0, 0);
    if (v7)
    {
      sub_23FB2E3C0();
      v41 = v7;
      v42 = v7;
      v43 = sub_23FB2E7E0();
      v44 = sub_23FB2F5F0();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        v46 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v45 = 138412290;
        v47 = v7;
        v48 = _swift_stdlib_bridgeErrorToNSError();
        v105 = v48;
        v38 = v96;
        sub_23FB2F680();
        *v46 = v48;

        _os_log_impl(&dword_23F68F000, v43, v44, "Sentence piece model missing. Embedding failed. Error: %@", v45, 0xCu);
        sub_23F6916B8(&qword_256EA2988);
        swift_arrayDestroy();
        MEMORY[0x242674F4C](v46, -1, -1);
        MEMORY[0x242674F4C](v45, -1, -1);
      }
      else
      {

      }
      v63 = v89;
      v62 = v90;

      (*(void (**)(char *, uint64_t))(v91 + 8))(v95, v63);
      sub_23F743D70();
      swift_allocError();
      *v64 = 2;
      swift_willThrow();

      v65 = sub_23FB2E78C();
      sub_23FB2E7B0();
      v66 = sub_23FB2F614();
      if ((sub_23FB2F638() & 1) != 0)
      {
        LODWORD(v101) = v66;
        swift_retain();
        v67 = v87;
        sub_23FB2E7D4();
        swift_release();
        v69 = v93;
        v68 = v94;
        if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v67, v94) == *MEMORY[0x24BEE7810])
        {
          v70 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
          v70 = "";
        }
        v80 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v80 = 0;
        v81 = sub_23FB2E768();
        _os_signpost_emit_with_name_impl(&dword_23F68F000, v65, (os_signpost_type_t)v101, v81, "ToolboxEmbeddingModel:embed", v70, v80, 2u);
        MEMORY[0x242674F4C](v80, -1, -1);
        v38 = v96;
      }

      v38(v62, v103);
LABEL_39:
      swift_release();
      swift_release_n();
      swift_release_n();
      return swift_bridgeObjectRelease_n();
    }
    swift_release();
  }
  else
  {
    v50 = v100;
    v49 = v101;
    v40 = v99;
    if (!a2)
    {
      __break(1u);
      return result;
    }
    if (a2 >= 1)
    {
      v51 = v92;
      v52 = *(_QWORD *)(v92 + 16);
      if (v52)
      {
        v53 = 0;
        while (1)
        {
          v54 = (void *)MEMORY[0x2426749F4](result);
          v55 = (uint64_t)v104;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          sub_23F7B7180(v51, v53, a2, 128, v55, v49, v50);
          if (v8)
            break;
          if (__OFADD__(v53, a2))
            v53 = ((v53 + a2) >> 63) ^ 0x8000000000000000;
          else
            v53 += a2;
          objc_autoreleasePoolPop(v54);
          if (v53 >= v52)
            goto LABEL_20;
        }
        objc_autoreleasePoolPop(v54);
        v73 = sub_23FB2E78C();
        v74 = v86;
        sub_23FB2E7B0();
        v75 = sub_23FB2F614();
        if ((sub_23FB2F638() & 1) != 0)
        {
          swift_retain();
          v76 = v85;
          sub_23FB2E7D4();
          swift_release();
          v78 = v93;
          v77 = v94;
          if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v76, v94) == *MEMORY[0x24BEE7810])
          {
            v79 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v77);
            v79 = "";
          }
          v82 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v82 = 0;
          v83 = sub_23FB2E768();
          _os_signpost_emit_with_name_impl(&dword_23F68F000, v73, v75, v83, "ToolboxEmbeddingModel:embed", v79, v82, 2u);
          MEMORY[0x242674F4C](v82, -1, -1);
        }

        v96(v74, v103);
        goto LABEL_39;
      }
    }
  }
LABEL_20:
  v56 = sub_23FB2E78C();
  sub_23FB2E7B0();
  v57 = sub_23FB2F614();
  if ((sub_23FB2F638() & 1) != 0)
  {
    swift_retain();
    v58 = v88;
    sub_23FB2E7D4();
    swift_release();
    v60 = v93;
    v59 = v94;
    if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v58, v94) == *MEMORY[0x24BEE7810])
    {
      v61 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
      v61 = "";
    }
    v71 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v71 = 0;
    v72 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v56, v57, v72, "ToolboxEmbeddingModel:embed", v61, v71, 2u);
    MEMORY[0x242674F4C](v71, -1, -1);
  }

  v96(v40, v103);
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t sub_23F7B6280(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __n128 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;

  if (__OFADD__(a2, a3))
  {
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  v5 = a2;
  if (a2 + a3 >= *(_QWORD *)(a1 + 16))
    v6 = *(_QWORD **)(a1 + 16);
  else
    v6 = (_QWORD *)(a2 + a3);
  if ((uint64_t)v6 < a2)
    goto LABEL_110;
  if (a2 < 0)
  {
LABEL_111:
    __break(1u);
LABEL_112:
    sub_23FB2F9B0();
    __break(1u);
    JUMPOUT(0x23F7B69A4);
  }
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = MEMORY[0x24BEE4AF8];
  if (v6 == (_QWORD *)a2)
    goto LABEL_8;
  v68 = a5;
  v72 = a1 + 32;
  swift_bridgeObjectRetain();
  v10 = v5;
  v8 = (unint64_t)v7;
  v69 = v6;
  v70 = v5;
  while (1)
  {
    if (v10 >= (uint64_t)v6)
      goto LABEL_106;
    v73 = v10;
    v74 = v8;
    v12 = *(_QWORD *)(v72 + 16 * v10);
    v11 = *(_QWORD *)(v72 + 16 * v10 + 8);
    v13 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v13 = v12 & 0xFFFFFFFFFFFFLL;
    v81 = v12;
    v82 = v11;
    v83 = 0;
    v84 = v13;
    swift_bridgeObjectRetain_n();
    v14 = sub_23FB2F278();
    if (v15)
      break;
    v16 = (uint64_t)v7;
LABEL_88:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v49 = sub_23F72F930(a4, v16);
    v54 = (v52 >> 1) - v51;
    if (__OFSUB__(v52 >> 1, v51))
      goto LABEL_107;
    _VF = __OFSUB__(a4, v54);
    v55 = a4 - v54;
    if (_VF)
    {
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
    v56 = v49;
    v57 = v50;
    v58 = v51;
    v59 = v52;
    v53.n128_u32[0] = 0;
    v60 = sub_23F7B3F14(v55 & ~(v55 >> 63), v53);
    sub_23F7B791C(v56, v57, v58, v59, v60);
    v62 = v61;
    swift_bridgeObjectRelease();
    v63 = v74;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F7542A4();
      v63 = v66;
    }
    v64 = *(_QWORD *)(v63 + 16);
    v65 = v63;
    if (v64 >= *(_QWORD *)(v63 + 24) >> 1)
    {
      sub_23F7542A4();
      v65 = v67;
    }
    *(_QWORD *)(v65 + 16) = v64 + 1;
    v8 = v65;
    *(_QWORD *)(v65 + 8 * v64 + 32) = v62;
    swift_unknownObjectRelease();
    v10 = v73 + 1;
    v6 = v69;
    v5 = v70;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((_QWORD *)(v73 + 1) == v69)
      goto LABEL_100;
  }
  v5 = v14;
  v8 = v15;
  v16 = (uint64_t)v7;
  while (1)
  {
    v75 = v16;
    sub_23F7CE1AC(v5, v8);
    if (v17)
      break;
    swift_bridgeObjectRelease();
    v6 = v7;
LABEL_70:
    v40 = v6[2];
    v16 = v75;
    v41 = *(_QWORD *)(v75 + 16);
    if (__OFADD__(v41, v40))
    {
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v41 + v40 > *(_QWORD *)(v75 + 24) >> 1)
    {
      sub_23F754344();
      v16 = v42;
    }
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v6[2])
    {
      v43 = *(_QWORD *)(v16 + 16);
      if ((*(_QWORD *)(v16 + 24) >> 1) - v43 < v40)
        goto LABEL_104;
      v44 = (char *)(v16 + 2 * v43 + 32);
      if (v6 + 4 < (_QWORD *)&v44[2 * v40] && v44 < (char *)v6 + 2 * v40 + 32)
        goto LABEL_112;
      memcpy(v44, v6 + 4, 2 * v40);
      if (v40)
      {
        v46 = *(_QWORD *)(v16 + 16);
        _VF = __OFADD__(v46, v40);
        v47 = v46 + v40;
        if (_VF)
          goto LABEL_105;
        *(_QWORD *)(v16 + 16) = v47;
      }
    }
    else if (v40)
    {
      goto LABEL_102;
    }
    swift_bridgeObjectRelease();
    v5 = sub_23FB2F278();
    v8 = v48;
    if (!v48)
      goto LABEL_88;
  }
  v18 = v17;
  v85 = v7;
  sub_23F712478(0, v17 & ~(v17 >> 63), 0);
  if (v18 < 0)
    goto LABEL_103;
  v19 = (v5 >> 59) & 1;
  if ((v8 & 0x1000000000000000) == 0)
    LOBYTE(v19) = 1;
  v20 = 4 << v19;
  if ((v8 & 0x2000000000000000) != 0)
    v21 = HIBYTE(v8) & 0xF;
  else
    v21 = v5 & 0xFFFFFFFFFFFFLL;
  v22 = 15;
  v77 = 4 << v19;
  v78 = v5;
  v76 = v21;
  while (1)
  {
    v23 = v22 & 0xC;
    _ZF = (v22 & 1) == 0 || v23 == v20;
    v25 = _ZF;
    if (!_ZF)
    {
      v6 = (_QWORD *)(v22 >> 16);
      if (v22 >> 16 >= v21)
        goto LABEL_97;
      goto LABEL_37;
    }
    v26 = v22;
    if (v23 == v20)
      sub_23F7CB758(v22, v5, v8);
    v6 = (_QWORD *)(v26 >> 16);
    if (v26 >> 16 >= v21)
      break;
    if ((v26 & 1) == 0)
      v6 = (_QWORD *)(sub_23F7CBD6C(v26, v5, v8) >> 16);
LABEL_37:
    if ((v8 & 0x1000000000000000) != 0)
    {
      v28 = sub_23FB2F7A0();
    }
    else if ((v8 & 0x2000000000000000) != 0)
    {
      v79 = v5;
      v80 = v8 & 0xFFFFFFFFFFFFFFLL;
      v28 = *((unsigned __int8 *)&v79 + (_QWORD)v6);
      if (*((char *)&v79 + (_QWORD)v6) < 0)
        __asm { BR              X9 }
    }
    else
    {
      v27 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v5 & 0x1000000000000000) == 0)
        v27 = sub_23FB2F83C();
      v28 = *((unsigned __int8 *)v6 + v27);
      if (*((char *)v6 + v27) < 0)
        __asm { BR              X9 }
    }
    v6 = v85;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F712478(0, v6[2] + 1, 1);
      v6 = v85;
    }
    v30 = v6[2];
    v29 = v6[3];
    if (v30 >= v29 >> 1)
    {
      sub_23F712478((char *)(v29 > 1), v30 + 1, 1);
      v6 = v85;
    }
    _S0 = (float)v28;
    __asm { FCVT            H0, S0 }
    v6[2] = v30 + 1;
    *((_WORD *)v6 + v30 + 16) = LOWORD(_S0);
    if (v25)
    {
      v20 = v77;
      v5 = v78;
      v21 = v76;
      if (v23 == v77)
      {
        sub_23F7CB758(v22, v78, v8);
        v22 = v39;
      }
      if (v76 <= v22 >> 16)
        goto LABEL_98;
      if ((v22 & 1) == 0)
        v22 = v22 & 0xC | sub_23F7CBD6C(v22, v78, v8) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    else
    {
      v21 = v76;
      v20 = v77;
      v5 = v78;
      if (v76 <= v22 >> 16)
        goto LABEL_99;
    }
    if ((v8 & 0x1000000000000000) != 0)
    {
      v22 = sub_23FB2F1C4();
    }
    else
    {
      v34 = v22 >> 16;
      if ((v8 & 0x2000000000000000) != 0)
      {
        v79 = v5;
        v80 = v8 & 0xFFFFFFFFFFFFFFLL;
        v36 = *((unsigned __int8 *)&v79 + v34);
      }
      else
      {
        v35 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v5 & 0x1000000000000000) == 0)
          v35 = sub_23FB2F83C();
        v36 = *(unsigned __int8 *)(v35 + v34);
      }
      v37 = (char)v36;
      v38 = __clz(v36 ^ 0xFF) - 24;
      if (v37 >= 0)
        LOBYTE(v38) = 1;
      v22 = ((v34 + v38) << 16) | 5;
    }
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
  }
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  swift_bridgeObjectRelease();
  a5 = v68;
LABEL_8:
  sub_23F7B7A98(v5, (uint64_t)v6, v8, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7B69C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;

  if (__OFADD__(a2, a3))
  {
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  v9 = a2;
  if (a2 + a3 >= *(_QWORD *)(a1 + 16))
    v10 = *(_QWORD **)(a1 + 16);
  else
    v10 = (_QWORD *)(a2 + a3);
  if ((uint64_t)v10 < a2)
    goto LABEL_109;
  if (a2 < 0)
  {
LABEL_110:
    __break(1u);
LABEL_111:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_23FB2F9B0();
    __break(1u);
    JUMPOUT(0x23F7B7160);
  }
  v11 = a9;
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v13 = MEMORY[0x24BEE4AF8];
  if (v10 == (_QWORD *)a2)
    goto LABEL_8;
  v71 = a6;
  v72 = a8;
  v73 = a5;
  v74 = a7;
  v77 = a1 + 32;
  swift_bridgeObjectRetain();
  v15 = v9;
  v13 = (uint64_t)v12;
  v75 = v10;
  v76 = v9;
  while (1)
  {
    if (v15 >= (uint64_t)v10)
      goto LABEL_105;
    v79 = v15;
    v16 = *(_QWORD *)(v77 + 16 * v15 + 8);
    v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v17 = *(_QWORD *)(v77 + 16 * v15) & 0xFFFFFFFFFFFFLL;
    v87 = *(_QWORD *)(v77 + 16 * v15);
    v88 = v16;
    v89 = 0;
    v90 = v17;
    swift_bridgeObjectRetain_n();
    v18 = sub_23FB2F278();
    v80 = v13;
    if (v19)
      break;
    v22 = (uint64_t)v12;
LABEL_87:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54 = sub_23F72F930(a4, v22);
    v59 = (v57 >> 1) - v56;
    if (__OFSUB__(v57 >> 1, v56))
      goto LABEL_106;
    _VF = __OFSUB__(a4, v59);
    v60 = a4 - v59;
    if (_VF)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    v61 = v54;
    v62 = v55;
    v63 = v56;
    v64 = v57;
    v58.n128_u32[0] = 0;
    v65 = sub_23F7B3F14(v60 & ~(v60 >> 63), v58);
    sub_23F7B791C(v61, v62, v63, v64, v65);
    v67 = v66;
    swift_bridgeObjectRelease();
    v13 = v80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F7542A4();
      v13 = v69;
    }
    v68 = *(_QWORD *)(v13 + 16);
    if (v68 >= *(_QWORD *)(v13 + 24) >> 1)
    {
      sub_23F7542A4();
      v13 = v70;
    }
    v15 = v79 + 1;
    *(_QWORD *)(v13 + 16) = v68 + 1;
    *(_QWORD *)(v13 + 8 * v68 + 32) = v67;
    swift_unknownObjectRelease();
    v10 = v75;
    v9 = v76;
    if ((_QWORD *)(v79 + 1) == v75)
      goto LABEL_99;
  }
  v20 = v18;
  v21 = v19;
  v22 = (uint64_t)v12;
  while (1)
  {
    sub_23F7CE1AC(v20, v21);
    if (v23)
      break;
    swift_bridgeObjectRelease();
    v10 = v12;
LABEL_69:
    v45 = v10[2];
    v46 = *(_QWORD *)(v22 + 16);
    if (__OFADD__(v46, v45))
    {
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v46 + v45 > *(_QWORD *)(v22 + 24) >> 1)
    {
      sub_23F754344();
      v22 = v47;
    }
    if (v10[2])
    {
      v48 = *(_QWORD *)(v22 + 16);
      if ((*(_QWORD *)(v22 + 24) >> 1) - v48 < v45)
        goto LABEL_103;
      v49 = (char *)(v22 + 2 * v48 + 32);
      if (v10 + 4 < (_QWORD *)&v49[2 * v45] && v49 < (char *)v10 + 2 * v45 + 32)
        goto LABEL_111;
      memcpy(v49, v10 + 4, 2 * v45);
      if (v45)
      {
        v51 = *(_QWORD *)(v22 + 16);
        _VF = __OFADD__(v51, v45);
        v52 = v51 + v45;
        if (_VF)
          goto LABEL_104;
        *(_QWORD *)(v22 + 16) = v52;
      }
    }
    else if (v45)
    {
      goto LABEL_101;
    }
    swift_bridgeObjectRelease();
    v20 = sub_23FB2F278();
    v21 = v53;
    if (!v53)
      goto LABEL_87;
  }
  v13 = v23;
  v91 = v12;
  v10 = &v91;
  sub_23F712478(0, v23 & ~(v23 >> 63), 0);
  if (v13 < 0)
    goto LABEL_102;
  v81 = v22;
  v24 = (v20 >> 59) & 1;
  if ((v21 & 0x1000000000000000) == 0)
    LOBYTE(v24) = 1;
  v25 = 4 << v24;
  v26 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v26 = v20 & 0xFFFFFFFFFFFFLL;
  v84 = v26;
  v27 = 15;
  v83 = v20;
  v82 = v25;
  while (1)
  {
    v28 = v27 & 0xC;
    _ZF = (v27 & 1) == 0 || v28 == v25;
    v30 = _ZF;
    if (!_ZF)
    {
      v9 = v27 >> 16;
      if (v27 >> 16 >= v84)
        goto LABEL_96;
      goto LABEL_36;
    }
    v31 = v27;
    if (v28 == v25)
      sub_23F7CB758(v27, v20, v21);
    v9 = v31 >> 16;
    if (v31 >> 16 >= v84)
      break;
    if ((v31 & 1) == 0)
      v9 = sub_23F7CBD6C(v31, v20, v21) >> 16;
LABEL_36:
    if ((v21 & 0x1000000000000000) != 0)
    {
      v33 = sub_23FB2F7A0();
    }
    else if ((v21 & 0x2000000000000000) != 0)
    {
      v85 = v20;
      v86 = v21 & 0xFFFFFFFFFFFFFFLL;
      v33 = *((unsigned __int8 *)&v85 + v9);
      if (*((char *)&v85 + v9) < 0)
        __asm { BR              X9 }
    }
    else
    {
      v32 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v20 & 0x1000000000000000) == 0)
        v32 = sub_23FB2F83C();
      v33 = *(unsigned __int8 *)(v32 + v9);
      if (*(char *)(v32 + v9) < 0)
        __asm { BR              X9 }
    }
    v10 = v91;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F712478(0, v10[2] + 1, 1);
      v10 = v91;
    }
    v35 = v10[2];
    v34 = v10[3];
    v9 = v35 + 1;
    if (v35 >= v34 >> 1)
    {
      sub_23F712478((char *)(v34 > 1), v35 + 1, 1);
      v10 = v91;
    }
    _S0 = (float)v33;
    __asm { FCVT            H0, S0 }
    v10[2] = v9;
    *((_WORD *)v10 + v35 + 16) = LOWORD(_S0);
    if (v30)
    {
      v25 = v82;
      v20 = v83;
      if (v28 == v82)
      {
        sub_23F7CB758(v27, v83, v21);
        v27 = v44;
      }
      if (v84 <= v27 >> 16)
        goto LABEL_97;
      if ((v27 & 1) == 0)
        v27 = v27 & 0xC | sub_23F7CBD6C(v27, v83, v21) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    else
    {
      v20 = v83;
      v25 = v82;
      if (v84 <= v27 >> 16)
        goto LABEL_98;
    }
    if ((v21 & 0x1000000000000000) != 0)
    {
      v27 = sub_23FB2F1C4();
    }
    else
    {
      v39 = v27 >> 16;
      if ((v21 & 0x2000000000000000) != 0)
      {
        v85 = v20;
        v86 = v21 & 0xFFFFFFFFFFFFFFLL;
        v41 = *((unsigned __int8 *)&v85 + v39);
      }
      else
      {
        v40 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v20 & 0x1000000000000000) == 0)
          v40 = sub_23FB2F83C();
        v41 = *(unsigned __int8 *)(v40 + v39);
      }
      v42 = (char)v41;
      v43 = __clz(v41 ^ 0xFF) - 24;
      if (v42 >= 0)
        LOBYTE(v43) = 1;
      v27 = ((v39 + v43) << 16) | 5;
    }
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v22 = v81;
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  swift_bridgeObjectRelease();
  v11 = a9;
  a7 = v74;
  a8 = v72;
  a5 = v73;
  a6 = v71;
LABEL_8:
  sub_23F7C5EC4(v9, (uint64_t)v10, v13, a5, a6, a7, a8, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23F7B7180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __n128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;

  if (__OFADD__(a2, a3))
  {
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v7 = a2;
  if (a2 + a3 >= *(_QWORD *)(a1 + 16))
    v8 = *(_QWORD **)(a1 + 16);
  else
    v8 = (_QWORD *)(a2 + a3);
  if ((uint64_t)v8 < a2)
    goto LABEL_111;
  if (a2 < 0)
  {
LABEL_112:
    __break(1u);
LABEL_113:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_23FB2F9B0();
    __break(1u);
    JUMPOUT(0x23F7B78FCLL);
  }
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v10 = MEMORY[0x24BEE4AF8];
  if (v8 == (_QWORD *)a2)
    goto LABEL_8;
  v70 = a6;
  v71 = a5;
  v72 = a7;
  v76 = a1 + 32;
  swift_bridgeObjectRetain();
  v12 = v7;
  v10 = (unint64_t)v9;
  v73 = v8;
  v74 = v7;
  while (1)
  {
    if (v12 >= (uint64_t)v8)
      goto LABEL_107;
    v77 = v10;
    v78 = v12;
    v14 = *(_QWORD *)(v76 + 16 * v12);
    v13 = *(_QWORD *)(v76 + 16 * v12 + 8);
    v15 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v15 = v14 & 0xFFFFFFFFFFFFLL;
    v85 = v14;
    v86 = v13;
    v87 = 0;
    v88 = v15;
    swift_bridgeObjectRetain_n();
    v16 = sub_23FB2F278();
    if (v17)
      break;
    v19 = (uint64_t)v9;
LABEL_88:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = sub_23F72F930(a4, v19);
    v56 = (v54 >> 1) - v53;
    if (__OFSUB__(v54 >> 1, v53))
      goto LABEL_108;
    _VF = __OFSUB__(a4, v56);
    v57 = a4 - v56;
    if (_VF)
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    v58 = v51;
    v59 = v52;
    v60 = v53;
    v61 = v54;
    v55.n128_u32[0] = 0;
    v62 = sub_23F7B3F14(v57 & ~(v57 >> 63), v55);
    sub_23F7B791C(v58, v59, v60, v61, v62);
    v64 = v63;
    swift_bridgeObjectRelease();
    v10 = v77;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F7542A4();
      v10 = v68;
    }
    v65 = *(_QWORD *)(v10 + 16);
    v66 = v78;
    if (v65 >= *(_QWORD *)(v10 + 24) >> 1)
    {
      sub_23F7542A4();
      v66 = v78;
      v10 = v69;
    }
    *(_QWORD *)(v10 + 16) = v65 + 1;
    *(_QWORD *)(v10 + 8 * v65 + 32) = v64;
    v67 = (_QWORD *)(v66 + 1);
    swift_unknownObjectRelease();
    v12 = (uint64_t)v67;
    v8 = v73;
    _ZF = v67 == v73;
    v7 = v74;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (_ZF)
      goto LABEL_101;
  }
  v18 = v16;
  v10 = v17;
  v19 = (uint64_t)v9;
  while (1)
  {
    sub_23F7CE1AC(v18, v10);
    if (v20)
      break;
    swift_bridgeObjectRelease();
    v8 = v9;
LABEL_70:
    v42 = v8[2];
    v43 = *(_QWORD *)(v19 + 16);
    if (__OFADD__(v43, v42))
    {
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v43 + v42 > *(_QWORD *)(v19 + 24) >> 1)
    {
      sub_23F754344();
      v19 = v44;
    }
    if (v8[2])
    {
      v45 = *(_QWORD *)(v19 + 16);
      if ((*(_QWORD *)(v19 + 24) >> 1) - v45 < v42)
        goto LABEL_105;
      v46 = (char *)(v19 + 2 * v45 + 32);
      if (v8 + 4 < (_QWORD *)&v46[2 * v42] && v46 < (char *)v8 + 2 * v42 + 32)
        goto LABEL_113;
      memcpy(v46, v8 + 4, 2 * v42);
      if (v42)
      {
        v48 = *(_QWORD *)(v19 + 16);
        _VF = __OFADD__(v48, v42);
        v49 = v48 + v42;
        if (_VF)
          goto LABEL_106;
        *(_QWORD *)(v19 + 16) = v49;
      }
    }
    else if (v42)
    {
      goto LABEL_103;
    }
    swift_bridgeObjectRelease();
    v18 = sub_23FB2F278();
    v10 = v50;
    if (!v50)
      goto LABEL_88;
  }
  v21 = v20;
  v89 = v9;
  sub_23F712478(0, v20 & ~(v20 >> 63), 0);
  if (v21 < 0)
    goto LABEL_104;
  v22 = (v18 >> 59) & 1;
  if ((v10 & 0x1000000000000000) == 0)
    LOBYTE(v22) = 1;
  v23 = 4 << v22;
  if ((v10 & 0x2000000000000000) != 0)
    v24 = HIBYTE(v10) & 0xF;
  else
    v24 = v18 & 0xFFFFFFFFFFFFLL;
  v79 = v19;
  v25 = 15;
  v82 = v18;
  v80 = v24;
  v81 = 4 << v22;
  while (1)
  {
    v7 = v25 & 0xC;
    _ZF = (v25 & 1) == 0 || v7 == v23;
    v27 = _ZF;
    if (!_ZF)
    {
      v8 = (_QWORD *)(v25 >> 16);
      if (v25 >> 16 >= v24)
        goto LABEL_98;
      goto LABEL_37;
    }
    v28 = v25;
    if (v7 == v23)
      sub_23F7CB758(v25, v18, v10);
    v8 = (_QWORD *)(v28 >> 16);
    if (v28 >> 16 >= v24)
      break;
    if ((v28 & 1) == 0)
      v8 = (_QWORD *)(sub_23F7CBD6C(v28, v18, v10) >> 16);
LABEL_37:
    if ((v10 & 0x1000000000000000) != 0)
    {
      v30 = sub_23FB2F7A0();
    }
    else if ((v10 & 0x2000000000000000) != 0)
    {
      v83 = v18;
      v84 = v10 & 0xFFFFFFFFFFFFFFLL;
      v30 = *((unsigned __int8 *)&v83 + (_QWORD)v8);
      if (*((char *)&v83 + (_QWORD)v8) < 0)
        __asm { BR              X9 }
    }
    else
    {
      v29 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v18 & 0x1000000000000000) == 0)
        v29 = sub_23FB2F83C();
      v30 = *((unsigned __int8 *)v8 + v29);
      if (*((char *)v8 + v29) < 0)
        __asm { BR              X9 }
    }
    v8 = v89;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F712478(0, v8[2] + 1, 1);
      v8 = v89;
    }
    v32 = v8[2];
    v31 = v8[3];
    if (v32 >= v31 >> 1)
    {
      sub_23F712478((char *)(v31 > 1), v32 + 1, 1);
      v8 = v89;
    }
    _S0 = (float)v30;
    __asm { FCVT            H0, S0 }
    v8[2] = v32 + 1;
    *((_WORD *)v8 + v32 + 16) = LOWORD(_S0);
    if (v27)
    {
      v24 = v80;
      v23 = v81;
      v18 = v82;
      if (v7 == v81)
      {
        sub_23F7CB758(v25, v82, v10);
        v25 = v41;
      }
      if (v80 <= v25 >> 16)
        goto LABEL_99;
      if ((v25 & 1) == 0)
        v25 = v25 & 0xC | sub_23F7CBD6C(v25, v82, v10) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    else
    {
      v24 = v80;
      v23 = v81;
      v18 = v82;
      if (v80 <= v25 >> 16)
        goto LABEL_100;
    }
    if ((v10 & 0x1000000000000000) != 0)
    {
      v25 = sub_23FB2F1C4();
    }
    else
    {
      v36 = v25 >> 16;
      if ((v10 & 0x2000000000000000) != 0)
      {
        v83 = v18;
        v84 = v10 & 0xFFFFFFFFFFFFFFLL;
        v38 = *((unsigned __int8 *)&v83 + v36);
      }
      else
      {
        v37 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v18 & 0x1000000000000000) == 0)
          v37 = sub_23FB2F83C();
        v38 = *(unsigned __int8 *)(v37 + v36);
      }
      v39 = (char)v38;
      v40 = __clz(v38 ^ 0xFF) - 24;
      if (v39 >= 0)
        LOBYTE(v40) = 1;
      v25 = ((v36 + v40) << 16) | 5;
    }
    if (!--v21)
    {
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v19 = v79;
      goto LABEL_70;
    }
  }
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  swift_bridgeObjectRelease();
  a5 = v71;
  a7 = v72;
  a6 = v70;
LABEL_8:
  sub_23F7BD868(v7, (uint64_t)v8, v10, a5, a6, a7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_23F7B791C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else if (!__OFADD__(*(_QWORD *)(a5 + 16), (a4 >> 1) - a3))
  {
    sub_23F754344();
    swift_unknownObjectRetain();
    sub_23F6B9E64();
    swift_bridgeObjectRetain();
    sub_23F6B9DD0();
    return;
  }
  __break(1u);
}

uint64_t sub_23F7B79CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 v8;
  uint64_t inited;
  uint64_t result;
  unsigned __int8 v11;
  uint64_t v12;

  v8 = *v3;
  v12 = 0;
  v11 = v8;
  sub_23F6916B8(&qword_256EA2948);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23FB47010;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  sub_23F6B6548();
  sub_23F7B4854(inited, 1, a3, &v11, &v12);
  if (v4)
  {
    swift_setDeallocating();
    sub_23F83A8F0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_setDeallocating();
    sub_23F83A8F0();
    result = v12;
    if (!v12)
      __break(1u);
  }
  return result;
}

uint64_t sub_23F7B7A98(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (*(_QWORD *)(a3 + 16))
  {
    *a4 = *(_QWORD *)(a3 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23F7B7AE0()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t result;

  sub_23FB2C320();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_23FB2D640();
  sub_23F6D3458(&qword_256EA8C90, v0, MEMORY[0x24BDCDAF0]);
  v1 = sub_23FB2F050();
  sub_23F6916B8(&qword_256EAA778);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v1;
  qword_256EAA2A8 = result;
  return result;
}

uint64_t sub_23F7B7B7C()
{
  return sub_23F7D1F38();
}

uint64_t sub_23F7B7B94()
{
  return sub_23F7D1F38();
}

uint64_t sub_23F7B7BAC()
{
  return sub_23F7D1F38();
}

uint64_t sub_23F7B7BC4()
{
  return sub_23F7D1F38();
}

uint64_t sub_23F7B7BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_23F7D2F74();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B5208();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v0, *MEMORY[0x24BDCD7A0], v1);
  sub_23F731C2C();
  sub_23FB2C314();
  sub_23F6F1CB8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return swift_bridgeObjectRelease();
}

void sub_23F7B7CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  unsigned int v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(uint64_t);
  id v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  id v91[4];

  sub_23F6B5220();
  a19 = v25;
  a20 = v26;
  v27 = v20;
  v80 = v28;
  v85 = v29;
  v72 = v30;
  v32 = v31;
  v81 = v34;
  v82 = v33;
  v90 = v35;
  v91[2] = *(id *)MEMORY[0x24BDAC8D0];
  v36 = sub_23FB2F170();
  sub_23F6B53F8(v36, (uint64_t)&a9);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F6B51A4();
  sub_23F693F0C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6B51A4();
  sub_23F6D398C();
  v78 = sub_23FB2E798();
  v77 = *(_QWORD *)(v78 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B51A4();
  sub_23F70D434(v40);
  v79 = sub_23FB2C320();
  v88 = *(_QWORD *)(v79 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B6580();
  sub_23F70D434(v43);
  sub_23FB2C5F0();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B51A4();
  sub_23F70D434(v45);
  v46 = sub_23FB2C644();
  v86 = *(_QWORD *)(v46 - 8);
  v87 = v46;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v48);
  sub_23F6B6580();
  v83 = v49;
  v50 = sub_23F7D2504();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F6B51D0();
  v52 = sub_23FB2C614();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v53);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v54);
  sub_23F6B6580();
  v89 = v55;
  v20[2] = 0x657079546C6F6F74;
  v20[3] = 0xE800000000000000;
  v20[4] = 0x4449656C646E7562;
  v20[5] = 0xE800000000000000;
  v20[6] = 0x44496C6F6F74;
  v20[7] = 0xE600000000000000;
  v20[8] = 0xD000000000000010;
  v20[9] = 0x800000023FB33920;
  v20[10] = 0xD000000000000017;
  v20[11] = 0x800000023FB33940;
  sub_23FB2C104();
  sub_23F6BD144();
  v20[34] = sub_23FB2C0F8();
  sub_23FB2C074();
  sub_23F6BD144();
  v20[35] = sub_23FB2C068();
  v84 = v52;
  if ((v32 & 1) == 0)
  {
    v56 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v57 = (void *)sub_23FB2C2CC();
    v91[0] = 0;
    v58 = objc_msgSend(v56, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v57, 1, 0, v91);

    if (!v58)
    {
      v69 = v91[0];
      swift_bridgeObjectRelease();
      sub_23FB2C290();

      swift_willThrow();
      sub_23F7AE630(v80);
      v70 = sub_23F6B61D0();
      v71(v70, v79);
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      type metadata accessor for ToolEmbeddingsDatabase(0);
      swift_deallocPartialClassInstance();
      goto LABEL_13;
    }
    v59 = v91[0];
  }
  v60 = v90[3];
  v61 = v90[4];
  sub_23F7D2EFC(v90);
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(v61 + 8))(v91, v60, v61);
  if (LOBYTE(v91[0]))
    v62 = (unsigned int *)MEMORY[0x24BEBFD68];
  else
    v62 = (unsigned int *)MEMORY[0x24BEBFD60];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v89, *v62, v52);
  sub_23F6916B8(qword_256EAA7C8);
  sub_23F7D252C();
  sub_23F6BC570();
  *(_OWORD *)(sub_23F7D267C() + 16) = xmmword_23FB4F190;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v23, *MEMORY[0x24BEBFE30], v50);
  sub_23F6B6548();
  sub_23F7D21D8();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  sub_23F7D1FDC();
  sub_23F6B5F1C();
  sub_23F7D2218();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  sub_23F7D1FDC();
  sub_23F6B6548();
  sub_23F7D21D8();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  sub_23F7D1FDC();
  sub_23F6B6548();
  sub_23F7D21D8();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  sub_23F7D1FDC();
  sub_23F6B6548();
  sub_23F7D21D8();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v86 + 104))(v83, *MEMORY[0x24BEBFDB0], v87);
  v63 = *(void (**)(uint64_t))(v88 + 16);
  v64 = sub_23F77E19C();
  v63(v64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v74, v89, v84);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v75, v83, v87);
  sub_23F6B68A8();
  sub_23FB2C5E4();
  sub_23FB2C5D8();
  sub_23F6BD144();
  v65 = sub_23FB2C584();
  sub_23F7AE5F0((uint64_t)v90, (uint64_t)(v27 + 23));
  sub_23F7AE5F0(v82, (uint64_t)(v27 + 28));
  v27[33] = v65;
  ((void (*)(char *, uint64_t, uint64_t))v63)((char *)v27 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_databaseBaseURL, v81, v79);
  sub_23F7B0694(v80, (uint64_t)(v27 + 12));
  swift_retain();
  sub_23F7B0B84();
  sub_23FB2E780();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))((uint64_t)v27 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter, v76, v78);
  if (v85)
  {
    sub_23F7B7BC4();
    v91[0] = v72;
    v91[1] = v85;
    sub_23FB2F164();
    sub_23F731C2C();
    sub_23FB2F6D4();
    if (v21)
      swift_release();
    swift_release();
    sub_23F7AE630(v80);
    v66 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v66(v81, v79);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v82);
    v67 = sub_23F7D2C3C();
    v68(v67);
    v66(v73, v79);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v83, v87);
    sub_23F7D2898();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    sub_23F7AE630(v80);
    sub_23F6B6420(v81, *(uint64_t (**)(uint64_t, uint64_t))(v88 + 8));
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v82);
    sub_23F6B51EC(v83, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 8));
    sub_23F7D2898();
  }
LABEL_13:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v90);
  sub_23F6B5100();
}

void sub_23F7B8508()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  sub_23F6B50E8();
  sub_23FB2EEAC();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B5208();
  v3 = v0[26];
  v4 = v0[27];
  sub_23F6ADC98(v0 + 23, v3);
  v5 = sub_23F6B69FC();
  v6(v5);
  sub_23FB2EF24();
  sub_23F7D2CE0();
  sub_23FB2EF30();
  sub_23FB2EE94();
  sub_23F6F1CB8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_23F77E600();
  sub_23FB2F254();
  sub_23F756640();
  sub_23F6B6A48();
  sub_23F6B5F1C();
  sub_23F6B69FC();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  sub_23F693E04();
  sub_23F7B860C(v3, v4);
  sub_23F693E04();
  sub_23F693DDC();
}

uint64_t sub_23F7B860C(uint64_t a1, uint64_t a2)
{
  Class isa;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  isa = ToolBoxUtility.stableHashData(hashableString:)(*(Swift::String *)&a1).super.isa;
  v4[0] = 0;
  -[objc_class getBytes:length:](isa, sel_getBytes_length_, v4, 8);

  return v4[0];
}

uint64_t sub_23F7B8680(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *MEMORY[0x24BEBFDD8];
  v7 = sub_23F7D2ABC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(a1, v6, v7);
  *a2 = a3;
  v8 = *MEMORY[0x24BEBFE50];
  v9 = sub_23F7D270C();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a2, v8, v9);
  return sub_23F6F07C4((uint64_t)a2, 0, 1, v9);
}

uint64_t sub_23F7B870C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;

  sub_23F7D2348();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B52B0();
  sub_23F7D2448((_QWORD *)(v0 + 184));
  sub_23F70DC34();
  ToolboxDelegate.storagePath()();
  if (qword_256EA0AD0 != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)(qword_256EAA2A8 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_256EAA2A8 + 24));
  v5 = (uint64_t *)sub_23F6B619C();
  sub_23F7BC8A0(v5, v6);
  os_unfair_lock_unlock(v4);
  sub_23F6B56E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return v8;
}

void sub_23F7B87F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  sub_23F6B50E8();
  v5 = v4;
  sub_23FB2E804();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5864();
  v20 = sub_23FB2E930();
  v7 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B5208();
  v8 = sub_23FB2DBBC();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BE57498], v8);
  v11 = sub_23FB2DBB0();
  v12 = sub_23F6B68A8();
  v13(v12);
  sub_23FB2E90C();
  if ((v11 & 1) != 0)
  {
    v19[2] = swift_getKeyPath();
    sub_23F6916B8(&qword_256EA9928);
    v14 = *(_QWORD *)(sub_23FB2E810() - 8);
    v19[1] = v5;
    v15 = *(_QWORD *)(v14 + 72);
    v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v17 = sub_23F7D267C();
    *(_OWORD *)(v17 + 16) = xmmword_23FB4F1A0;
    v18 = v17 + v16;
    sub_23F7D2DB4(v18, *MEMORY[0x24BEB8E50]);
    sub_23F7D2DB4(v18 + v15, *MEMORY[0x24BEB8E48]);
    sub_23F7D2DB4(v18 + 2 * v15, *MEMORY[0x24BEB8E38]);
    *v0 = sub_23F7CC040(v17);
    sub_23F759774((uint64_t)v0, *MEMORY[0x24BEB8E18], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
    sub_23F6D3458(&qword_256EAA6C8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9200], MEMORY[0x24BEB91F8]);
    sub_23F6D3458(&qword_256EAA758, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8E28], MEMORY[0x24BEB8E20]);
    sub_23F6B6098();
    sub_23FB2EA98();
    sub_23F7D2604();
    sub_23F6B56E0((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v20);
  }
  sub_23F693DDC();
}

uint64_t sub_23F7B8A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_23FB2E804();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_23FB2E900();
}

uint64_t sub_23F7B8A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_23F7D217C(a1, a2, a3);
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = sub_23F79514C();
  v3[11] = sub_23F795160();
  v3[12] = sub_23F7D251C();
  v3[13] = sub_23F750AE4();
  v5 = sub_23F693F0C();
  v3[14] = v5;
  v3[15] = *(_QWORD *)(v5 - 8);
  v3[16] = sub_23F750AE4();
  v6 = sub_23F7A3510();
  v3[17] = v6;
  v3[18] = *(_QWORD *)(v6 - 8);
  v3[19] = sub_23F750AE4();
  v7 = sub_23F7D2524();
  v3[20] = v7;
  v3[21] = *(_QWORD *)(v7 - 8);
  v3[22] = sub_23F79514C();
  v3[23] = sub_23F795160();
  v3[24] = sub_23F795160();
  v3[25] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7B8B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  NSObject *v15;
  os_signpost_type_t v16;
  uint8_t *v17;
  os_signpost_id_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  _QWORD *v27;
  _QWORD *v28;
  uint64_t (*v29)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;

  sub_23F7D23E4();
  v14[26] = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_23F7D2B74();
  sub_23F7D2774();
  v15 = sub_23FB2E78C();
  v16 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v17 = (uint8_t *)sub_23F693DF4();
    v18 = sub_23F7D1D84(v17);
    sub_23F7D1CE4(&dword_23F68F000, v15, v16, v18, "ToolEmbeddingsDatabase:replaceTools", "", v17);
    sub_23F693DD0();
  }
  v19 = v14[21];
  v20 = v14[19];
  v38 = v14[18];
  v39 = v14[17];
  v21 = v14[6];
  v22 = v14[7];
  v23 = v14[5];
  v40 = v14[4];

  sub_23F7D2A80(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16));
  sub_23F7D250C();
  sub_23F6BD144();
  v14[27] = sub_23F7D1CEC();
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
  v14[28] = v24;
  sub_23F7D1F7C(v24);
  sub_23FB2C464();
  sub_23FB2C434();
  v14[29] = v25;
  v26 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v14[30] = v26;
  v26(v20, v39);
  v14[31] = sub_23F7B870C();
  v27 = (_QWORD *)sub_23F6B56B0();
  v14[32] = v27;
  v27[2] = v22;
  v27[3] = v21;
  v27[4] = v40;
  v27[5] = v23;
  v41 = (char *)&dword_256EAA738 + dword_256EAA738;
  sub_23F7D296C();
  sub_23F7D25E0();
  sub_23F6B5508();
  v28 = (_QWORD *)swift_task_alloc();
  v14[33] = v28;
  *v28 = v14;
  v28[1] = sub_23F7B8CEC;
  sub_23F7D209C();
  return v29(v29, v30, v31, v32, v33, v34, v35, v36, v38, v39, v41, a12, a13, a14);
}

uint64_t sub_23F7B8CEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 272) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7B8D40()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  NSObject *v3;
  os_log_type_t v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  const char *v15;
  _WORD *v16;
  os_signpost_type_t v17;
  os_signpost_id_t v18;
  id v19;
  uint64_t (*v20)(void);
  uint64_t v22;

  v3 = *(NSObject **)(v0 + 136);
  sub_23F7D2D30();
  sub_23FB2C434();
  sub_23F7D2B0C();
  sub_23F7D2F88();
  sub_23F7B0C8C();
  sub_23F7D2E6C();
  v4 = sub_23F6F5328();
  v5 = v4;
  if (os_log_type_enabled(v3, v4))
  {
    v6 = *(double *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 56);
    v8 = sub_23F693DF4();
    v22 = sub_23F693DF4();
    *(_DWORD *)v8 = 136315394;
    sub_23F6ADC98((_QWORD *)(v7 + 184), *(_QWORD *)(v7 + 208));
    sub_23F7D21E4();
    sub_23FB2D3C4();
    v9 = sub_23F7B0944();
    v10 = sub_23F78F1B0(v9);
    *(_QWORD *)(v0 + 16) = sub_23F7D2D74(v10, v11, &v22);
    sub_23F7D2F3C();
    sub_23F6B6090();
    sub_23F7B0980();
    *(_WORD *)(v8 + 12) = 2048;
    sub_23F7D2AA0(v2 - v6);
    sub_23F693E48(&dword_23F68F000, v3, (os_log_type_t)v5, "%s toolbox: Replace took %f seconds to run.", (uint8_t *)v8);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  v12 = *(_QWORD *)(v0 + 120);
  sub_23F7B0980();
  sub_23F77DA7C();

  v13 = sub_23F7D2D5C();
  v14(v13);
  sub_23F7D1F98();
  sub_23F7D1D1C();
  sub_23FB2F614();
  if ((sub_23F7D1F20() & 1) != 0)
  {
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1D2C() == *MEMORY[0x24BEE7810])
    {
      v15 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 72));
      v15 = "";
    }
    v16 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v16);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v5, v17, v18, "ToolEmbeddingsDatabase:replaceTools", v15);
    sub_23F693DD0();
  }
  sub_23F7D2274();

  ((void (*)(uint64_t, uint64_t))v3)(v12, v1);
  sub_23F77DA7C();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F7B0E34();
  sub_23F7D1F90();
  sub_23F7D20EC();
  v20 = (uint64_t (*)(void))sub_23F750B9C();
  return v20();
}

uint64_t sub_23F7B9014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v14;
  NSObject *v15;
  void (*v16)(uint64_t);
  const char *v17;
  _WORD *v18;
  os_signpost_type_t v19;
  os_signpost_id_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_23F7D23E4();
  v16 = (void (*)(uint64_t))v14[26];
  swift_release();
  sub_23F77DA7C();
  sub_23FB2E78C();
  sub_23F7D1D1C();
  sub_23FB2F614();
  if ((sub_23F7D1F20() & 1) != 0)
  {
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1D2C() == *MEMORY[0x24BEE7810])
    {
      v17 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(v14[9]);
      v17 = "";
    }
    v18 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v18);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v15, v19, v20, "ToolEmbeddingsDatabase:replaceTools", v17);
    sub_23F693DD0();
  }
  sub_23F7D2274();
  v34 = v22;
  v35 = v21;
  v36 = v14[10];

  v24 = sub_23F6B6224();
  v16(v24);
  sub_23F77DA7C();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F7D20B8();
  sub_23F7D1F88();
  sub_23F7B0E90();
  sub_23F7D209C();
  return v25(v25, v26, v27, v28, v29, v30, v31, v32, v34, v35, v36, a12, a13, a14);
}

uint64_t sub_23F7B9144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[17] = type metadata accessor for ToolboxVersion(0);
  v5[18] = swift_task_alloc();
  v6 = sub_23FB2E7F8();
  v5[19] = v6;
  v5[20] = *(_QWORD *)(v6 - 8);
  v5[21] = swift_task_alloc();
  v7 = sub_23FB2E930();
  v5[22] = v7;
  v5[23] = *(_QWORD *)(v7 - 8);
  v5[24] = swift_task_alloc();
  return swift_task_switch();
}

void sub_23F7B91F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_23F7D29D4(&v49);
  if (!v0)
  {
    v10 = v49;
    sub_23F7BE140(v2, v3, v4, v5, v6, v7, v8, v9, v32, v34, SWORD2(v34), SBYTE6(v34), HIBYTE(v34), v36, v39, v42, v45, v47, v49,
      v50,
      v51,
      v52,
      v53);
    v12 = v11;
    v14 = v13;
    sub_23F7C77B0(v11, v13, v15, v16, v17, v18, v19, v20, v33, v35, v37, v40, v43, v46, v48, v49, v50, v51, v52, v53);
    v1[25] = v21;
    v22 = v21;
    v23 = sub_23F6B56B0();
    v1[26] = v23;
    *(_QWORD *)(v23 + 16) = MEMORY[0x24BEE4B08];
    sub_23F7C671C();
    v1[27] = v24;
    v26 = v24;
    v41 = v1[16];
    v44 = v1[15];
    v27 = v1[13];
    v38 = v1[14];
    v28 = sub_23F6B56B0();
    v1[28] = v28;
    *(_QWORD *)(v28 + 16) = MEMORY[0x24BEE4AF8];
    sub_23F7B87F4();
    sub_23F6ADC98((_QWORD *)(v27 + 96), *(_QWORD *)(v27 + 120));
    v29 = (_QWORD *)sub_23F6B56B0();
    v1[29] = v29;
    v29[2] = v38;
    v29[3] = v27;
    v29[4] = v10;
    v29[5] = v12;
    v29[6] = v14;
    v29[7] = v28;
    v29[8] = v44;
    v29[9] = v41;
    v29[10] = v26;
    v29[11] = v22;
    v29[12] = v23;
    swift_retain();
    sub_23F7D25E0();
    swift_retain();
    sub_23F6B90D8();
    sub_23F6B54F8();
    sub_23F6B6548();
    sub_23F7D1FA4();
    v30 = (_QWORD *)sub_23F7D2FA4();
    v1[30] = v30;
    *v30 = v1;
    v30[1] = sub_23F7B93E0;
    sub_23F7D2258();
    __asm { BR              X5 }
  }
  sub_23F7D2994();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F7D2580();
  sub_23F7D2258();
  __asm { BR              X0 }
}

uint64_t sub_23F7B93E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 248) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

#error "23F7B9544: call analysis failed (funcsize=102)"

#error "23F7B9910: call analysis failed (funcsize=232)"

uint64_t sub_23F7B9998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  char v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;

  v13 = v12;
  if (a2)
  {
    v17 = *(_BYTE *)(a2 + 16);
    swift_retain();
    if ((v17 & 1) != 0)
    {
      sub_23F7CE170();
      swift_allocError();
      *v29 = 5;
      swift_willThrow();
      return swift_release();
    }
    swift_release();
  }
  result = sub_23F7C4F24();
  if ((result & 1) != 0)
  {
    v19 = (uint64_t *)(a7 + 16);
    swift_beginAccess();
    sub_23F83A984();
    v20 = *(_QWORD *)(*v19 + 16);
    sub_23F83A9F0(v20);
    v21 = *v19;
    *(_QWORD *)(*v19 + 16) = v20 + 1;
    v22 = sub_23FB2E8D0();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21+ ((*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, a1, v22);
    swift_endAccess();
    sub_23FB2C554();
    sub_23FB2E8A0();
    sub_23FB2C548();
    swift_bridgeObjectRelease();
    result = swift_beginAccess();
    if (*(_QWORD *)(*v19 + 16) >= 0x32uLL)
    {
      v23 = swift_bridgeObjectRetain();
      v26 = sub_23F7B9D80(v23, a10, a11, 0, 0, a2, v24, v25);
      result = swift_bridgeObjectRelease();
      if (!v13)
      {
        swift_beginAccess();
        v27 = *(_QWORD *)(a12 + 16);
        swift_bridgeObjectRetain();
        v28 = sub_23F7B9C24(v26, v27);
        swift_beginAccess();
        *(_QWORD *)(a12 + 16) = v28;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *v19 = MEMORY[0x24BEE4AF8];
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_23F7B9C24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    result = sub_23F7F18FC(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i));
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23F7B9D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v27 = a4;
  v28 = a5;
  v9 = MEMORY[0x24BEE4AF8];
  v31 = MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v25 = a6;
    sub_23F7B0CF8();
    sub_23F6BC450();
    v15 = a1 + v14;
    v17 = *(_QWORD *)(v16 + 72);
    v26 = a1;
    sub_23F6B54F8();
    v21 = MEMORY[0x24BEE4B08];
    while (1)
    {
      sub_23F7C530C(v15, a2, a3, v27, v28, v18, v19, v20, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
      if (v8)
        break;
      v21 = sub_23F7B9C24(v22, v21);
      sub_23F6B9F34();
      v15 += v17;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        v9 = v31;
        a6 = v25;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_23F6B6090();
  }
  else
  {
    v21 = MEMORY[0x24BEE4B08];
LABEL_7:
    sub_23F7C5C38(v9, v27, v28, a6, a5, a6, a7, a8, v24, v25, SWORD2(v25), BYTE6(v25), HIBYTE(v25), v26, v27, v28, v29, v30, v31,
      v32,
      v33,
      v34,
      v35);
    if (!v8)
    {
      sub_23F756640();
      return v21;
    }
    sub_23F6B6090();
  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_23F7B9ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  sub_23F6F522C();
  return swift_task_switch();
}

uint64_t sub_23F7B9EF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v1 = v0[5];
  v2 = v0[6];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[2];
  v0[7] = sub_23F7B870C();
  v6 = (_QWORD *)sub_23F6B56B0();
  v0[8] = v6;
  v6[2] = v2;
  v6[3] = v4;
  v6[4] = v1;
  v6[5] = v5;
  v6[6] = v3;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256EAA738 + dword_256EAA738);
  sub_23F7B0BE8();
  sub_23F6B5508();
  sub_23F6B6548();
  sub_23F7D25E0();
  v7 = (_QWORD *)swift_task_alloc();
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_23F7B9FC0;
  return v9((uint64_t)v9, (uint64_t)&unk_256EAA730, (uint64_t)v6);
}

uint64_t sub_23F7B9FC0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    sub_23F77DA7C();
  }
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7BA018()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))sub_23F750B9C();
  return v0();
}

uint64_t sub_23F7BA028()
{
  uint64_t v0;

  swift_release();
  sub_23F77DA7C();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7BA058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  return swift_task_switch();
}

#error "23F7BA0A8: call analysis failed (funcsize=43)"

uint64_t sub_23F7BA124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = sub_23F7D2514();
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = sub_23F79514C();
  v5[13] = sub_23F795160();
  v5[14] = sub_23F7D251C();
  v5[15] = sub_23F750AE4();
  v7 = sub_23F7A3510();
  v5[16] = v7;
  v5[17] = *(_QWORD *)(v7 - 8);
  v5[18] = sub_23F750AE4();
  v8 = sub_23F7D2524();
  v5[19] = v8;
  v5[20] = *(_QWORD *)(v8 - 8);
  v5[21] = sub_23F79514C();
  v5[22] = sub_23F795160();
  v5[23] = sub_23F795160();
  v5[24] = sub_23F795160();
  v9 = sub_23F693F0C();
  v5[25] = v9;
  v5[26] = *(_QWORD *)(v9 - 8);
  v5[27] = sub_23F79514C();
  v5[28] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7BA1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_signpost_type_t v35;
  uint8_t *v36;
  os_signpost_id_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  sub_23F7D23E4();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  sub_23F7B0B84();
  sub_23F6B91E8();
  v25 = sub_23FB2E7E0();
  v26 = sub_23FB2F608();
  if (sub_23F7D302C(v25))
  {
    v27 = v22[7];
    v28 = (uint8_t *)sub_23F693DF4();
    a11 = sub_23F693DF4();
    *(_DWORD *)v28 = 136315138;
    sub_23F6B90D8();
    v22[4] = sub_23F7D24B8(v27, v29, &a11);
    sub_23F7D2890();
    swift_bridgeObjectRelease_n();
    sub_23F7B0B48(&dword_23F68F000, v25, v26, "Replacing client actions for %s", v28);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  v30 = v22[26];

  sub_23F6B6740();
  v31 = *(void (**)(uint64_t))(v30 + 8);
  v32 = sub_23F6B63F4();
  v31(v32);
  v33 = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  v22[29] = v31;
  v22[30] = v33;
  sub_23F7D2B74();
  sub_23F7D2774();
  v34 = sub_23FB2E78C();
  v35 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v36 = (uint8_t *)sub_23F693DF4();
    v37 = sub_23F7D1D84(v36);
    sub_23F7D1CE4(&dword_23F68F000, v34, v35, v37, "ToolEmbeddingsDatabase:replaceClientActions", "", v36);
    sub_23F693DD0();
  }
  v38 = v22[23];
  v39 = v22[24];
  v40 = v22[19];
  v41 = v22[20];
  v43 = v22[17];
  v42 = v22[18];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v38, v39, v40);
  sub_23F7D250C();
  sub_23F6BD144();
  v22[31] = sub_23F7D1CEC();
  v44 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8);
  v22[32] = v44;
  sub_23F7D2C18(v44);
  sub_23FB2C464();
  sub_23FB2C434();
  v22[33] = v45;
  v46 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8);
  v22[34] = v46;
  sub_23F6B563C(v42, v46);
  v47 = (_QWORD *)swift_task_alloc();
  v22[35] = v47;
  *v47 = v22;
  v47[1] = sub_23F7BA460;
  sub_23F7D209C();
  return sub_23F7B9ECC(v48, v49, v50, v51);
}

uint64_t sub_23F7BA460()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 288) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7BA4AC()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;
  double v6;
  double v7;
  uint64_t v8;
  os_log_type_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  const char *v20;
  _WORD *v21;
  os_signpost_type_t v22;
  os_signpost_id_t v23;
  id v24;
  uint64_t (*v25)(void);
  uint64_t v27;

  v4 = *(void (**)(uint64_t))(v0 + 272);
  v5 = *(NSObject **)(v0 + 216);
  sub_23F7D2D30();
  sub_23FB2C434();
  v7 = v6;
  v8 = sub_23F6B68CC();
  v4(v8);
  sub_23F7D2168();
  sub_23F7B0C8C();
  sub_23F7D2128();
  v9 = sub_23F6F5328();
  if (sub_23F7D302C(v5))
  {
    v10 = *(double *)(v0 + 264);
    v11 = *(_QWORD *)(v0 + 72);
    v12 = sub_23F693DF4();
    v27 = sub_23F693DF4();
    *(_DWORD *)v12 = 136315394;
    sub_23F7D2448((_QWORD *)(v11 + 184));
    v13 = sub_23F7D2D5C();
    v14(v13);
    sub_23FB2D3C4();
    v15 = sub_23F7B0944();
    v16 = sub_23F78F1B0(v15);
    *(_QWORD *)(v0 + 16) = sub_23F7D2D74(v16, v17, &v27);
    sub_23F7D2F3C();
    sub_23F6B6090();
    sub_23F7B0980();
    *(_WORD *)(v12 + 12) = 2048;
    sub_23F7D2AA0(v7 - v10);
    sub_23F693E48(&dword_23F68F000, v5, v9, "%s toolbox: Client action replace took %f seconds to run.", (uint8_t *)v12);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  v18 = *(void (**)(uint64_t))(v0 + 232);
  sub_23F7B0980();

  v19 = sub_23F6B68CC();
  v18(v19);
  sub_23F7D2F7C();
  sub_23F7D1D1C();
  sub_23FB2F614();
  if ((sub_23F7D1F20() & 1) != 0)
  {
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1D2C() == *MEMORY[0x24BEE7810])
    {
      v20 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 88));
      v20 = "";
    }
    v21 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v21);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v1, v22, v23, "ToolEmbeddingsDatabase:replaceClientActions", v20);
    sub_23F693DD0();
  }
  sub_23F7D2534();

  ((void (*)(uint64_t, uint64_t))v5)(v2, v3);
  sub_23F77DA7C();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7D20B8();
  sub_23F7D1F88();
  sub_23F7B0E90();
  sub_23F7B0E34();
  v25 = (uint64_t (*)(void))sub_23F750B9C();
  return v25();
}

uint64_t sub_23F7BA780()
{
  void (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _WORD *v6;
  os_signpost_type_t v7;
  os_signpost_id_t v8;
  id v9;

  sub_23F7B0CC4();
  sub_23F7D2F7C();
  sub_23F7D1D1C();
  sub_23FB2F614();
  if ((sub_23F7D1F20() & 1) != 0)
  {
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1D2C() == *MEMORY[0x24BEE7810])
    {
      v5 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v1 + 88));
      v5 = "";
    }
    v6 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v6);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v2, v7, v8, "ToolEmbeddingsDatabase:replaceClientActions", v5);
    sub_23F693DD0();
  }
  sub_23F7D2534();

  v0(v3, v4);
  sub_23F77DA7C();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7D1F88();
  sub_23F7B0E90();
  sub_23F7B0E34();
  sub_23F7D1F90();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23F7BA8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v3[7] = sub_23F7D251C();
  v3[8] = sub_23F750AE4();
  v4 = sub_23F693F0C();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = sub_23F750AE4();
  v5 = sub_23F7D2348();
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = sub_23F750AE4();
  v6 = sub_23F7D2514();
  v3[15] = v6;
  v3[16] = *(_QWORD *)(v6 - 8);
  v3[17] = sub_23F79514C();
  v3[18] = sub_23F795160();
  v3[19] = sub_23F795160();
  v3[20] = sub_23F795160();
  v3[21] = sub_23F795160();
  v7 = sub_23F7D2AC4();
  v3[22] = v7;
  v3[23] = *(_QWORD *)(v7 - 8);
  v3[24] = sub_23F750AE4();
  v8 = sub_23F7A3510();
  v3[25] = v8;
  v3[26] = *(_QWORD *)(v8 - 8);
  v3[27] = sub_23F750AE4();
  v9 = sub_23F7D2524();
  v3[28] = v9;
  v3[29] = *(_QWORD *)(v9 - 8);
  v3[30] = sub_23F79514C();
  v3[31] = sub_23F795160();
  v3[32] = sub_23F795160();
  v3[33] = sub_23F795160();
  v3[34] = sub_23F795160();
  v3[35] = sub_23F795160();
  v3[36] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7BA9D8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  _WORD *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t);
  const char *v27;
  uint8_t *v28;
  os_signpost_id_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  uint64_t v52;

  *(_QWORD *)(v1 + 296) = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_23F7D2B74();
  sub_23FB2E75C();
  v50 = v0;
  v2 = sub_23FB2E78C();
  sub_23FB2F620();
  if ((sub_23F7D26CC() & 1) != 0)
  {
    v3 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v3);
    sub_23F7D20C8();
    sub_23F7D1C8C(&dword_23F68F000, v2, v4, v5, "ToolEmbeddingsDatabase:replaceAssistantSchemas", "");
    sub_23F693DD0();
  }
  v6 = *(_QWORD *)(v1 + 232);
  v7 = *(_QWORD *)(v1 + 208);
  v8 = *(_QWORD *)(v1 + 216);

  sub_23F7D2A80(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  sub_23F7D250C();
  sub_23F6BD144();
  v9 = sub_23F7D1CEC();
  *(_QWORD *)(v1 + 304) = v9;
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v1 + 312) = v10;
  sub_23F7D1F7C(v10);
  sub_23FB2C464();
  sub_23FB2C434();
  *(_QWORD *)(v1 + 320) = v11;
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v1 + 328) = v12;
  sub_23F6B563C(v8, v12);
  sub_23F7B87F4();
  v13 = sub_23F6B56B0();
  *(_QWORD *)(v1 + 336) = v13;
  *(_QWORD *)(v13 + 16) = MEMORY[0x24BEE4B08];
  sub_23F7D29D4(&v52);
  if (v2)
  {
    sub_23F7D1C98(*(_QWORD *)(v1 + 184));
    sub_23F77DA7C();
    v22 = sub_23FB2E78C();
    sub_23FB2E7B0();
    v23 = sub_23FB2F614();
    if ((sub_23F7D2DD4() & 1) != 0)
    {
      sub_23F7D1FA4();
      sub_23F7D2D28();
      swift_release();
      v25 = sub_23F6B6190();
      if (v26(v25) == *MEMORY[0x24BEE7810])
      {
        v27 = "[Error] Interval already ended";
      }
      else
      {
        sub_23F7D1C98(*(_QWORD *)(v1 + 128));
        v27 = "";
      }
      v28 = (uint8_t *)sub_23F693DF4();
      *(_WORD *)v28 = 0;
      v29 = sub_23FB2E768();
      sub_23F7D1CE4(&dword_23F68F000, v22, v23, v29, "ToolEmbeddingsDatabase:replaceAssistantSchemas", v27, v28);
      sub_23F693DD0();
    }
    v39 = *(_QWORD *)(v1 + 272);
    v30 = *(void (**)(uint64_t, uint64_t))(v1 + 312);
    v31 = *(_QWORD *)(v1 + 224);

    v30(v39, v31);
    sub_23F7B1580();
    sub_23F6F52B0();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    sub_23F7B0E90();
    sub_23F7B0E34();
    sub_23F7D1F90();
    sub_23F7D20EC();
    sub_23F7D2130();
    sub_23F7D24C0();
    sub_23F7D2668();
    sub_23F7D2660();
    sub_23F7D29AC();
    sub_23F7D29A4();
    swift_task_dealloc();
    return sub_23F7D258C(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v24 = v52;
    sub_23F7BE140(v14, v15, v16, v17, v18, v19, v20, v21, v38, v40, SWORD2(v40), SBYTE6(v40), HIBYTE(v40), v41, v42, v43, v44, v45, v46,
      v47,
      v48,
      v49,
      v50);
    sub_23F7D2CE0();
    v32 = *(_QWORD **)(v1 + 48);
    v33 = v32[15];
    v34 = v32[16];
    sub_23F7D2448(v32 + 12);
    v35 = (_QWORD *)sub_23F6B56B0();
    *(_QWORD *)(v1 + 344) = v35;
    v35[2] = v32;
    v35[3] = v24;
    v35[4] = v8;
    v35[5] = v9;
    v35[6] = v13;
    v51 = (uint64_t (*)(_QWORD, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))sub_23F7D2DDC();
    sub_23F7D2714();
    sub_23F7B0BE8();
    v36 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 352) = v36;
    *v36 = v1;
    v36[1] = sub_23F7BADF4;
    return v51(*(_QWORD *)(v1 + 192), sub_23F7CEA34, v35, v33, v34);
  }
}

uint64_t sub_23F7BADF4()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 360) = v0;
  swift_task_dealloc();
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

void sub_23F7BAE44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v1 = v0[45];
  v2 = v0[6];
  v3 = (uint64_t *)(v0[42] + 16);
  v4 = sub_23F6B5508();
  sub_23F7CC2D8(v4, v3);
  sub_23F693E04();
  type metadata accessor for AssistantSchema(0);
  sub_23FB2F050();
  sub_23F7D296C();
  v5 = sub_23F7D2F98();
  sub_23F7B26D0(v5, v6, v2);
  v8 = v7;
  sub_23F7D24C8();
  sub_23F6ADC98((_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 208));
  ToolboxDelegate.storagePath()();
  if (qword_256EA0AD0 != -1)
    swift_once();
  v9 = v0[14];
  v10 = (os_unfair_lock_s *)qword_256EAA2A8;
  *(_QWORD *)(swift_task_alloc() + 16) = v9;
  v11 = (uint64_t *)&v10[4];
  v10 += 6;
  os_unfair_lock_lock(v10);
  sub_23F7BC8A0(v11, &v17);
  os_unfair_lock_unlock(v10);
  if (!v1)
  {
    v13 = v0[5];
    v12 = v0[6];
    v0[46] = v17;
    sub_23F7B08CC();
    v14 = (_QWORD *)sub_23F6B56B0();
    v0[47] = v14;
    v14[2] = v13;
    v14[3] = v12;
    v14[4] = v8;
    v16 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256EAA738 + dword_256EAA738);
    sub_23F7D25E0();
    sub_23F7D296C();
    v15 = (_QWORD *)sub_23F7D2FA4();
    v0[48] = v15;
    *v15 = v0;
    v15[1] = sub_23F7BB01C;
    v16((uint64_t)v16, (uint64_t)&unk_256EAA788, (uint64_t)v14);
  }
}

uint64_t sub_23F7BB01C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 392) = v0;
  swift_task_dealloc();
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7BB06C()
{
  uint64_t v0;
  double v1;
  NSObject *v2;
  os_log_type_t v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  const char *v18;
  _WORD *v19;
  os_signpost_type_t v20;
  os_signpost_id_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;

  v2 = *(NSObject **)(v0 + 200);
  sub_23F7D2D30();
  sub_23FB2C434();
  sub_23F7D2B0C();
  sub_23F7D2F88();
  sub_23F7B0C8C();
  sub_23F7D2E6C();
  v3 = sub_23F6F5328();
  if (sub_23F7D2BB8(v2))
  {
    v4 = *(double *)(v0 + 320);
    v5 = sub_23F693DF4();
    v27 = sub_23F693DF4();
    *(_DWORD *)v5 = 136315394;
    v6 = (_QWORD *)sub_23F6B68A8();
    sub_23F6ADC98(v6, v7);
    v8 = sub_23F6B6224();
    v9(v8);
    v10 = sub_23FB2D3C4();
    v11 = sub_23F7B0944();
    sub_23F78F1B0(v11);
    *(_QWORD *)(v0 + 16) = sub_23F7D24B8(v10, v12, &v27);
    sub_23FB2F680();
    sub_23F717D54();
    sub_23F7B0980();
    *(_WORD *)(v5 + 12) = 2048;
    *(double *)(v0 + 24) = v1 - v4;
    sub_23FB2F680();
    sub_23F693E48(&dword_23F68F000, v2, v3, "%s toolbox: Replacing protocols took %f seconds to run.", (uint8_t *)v5);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  v14 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v15 = *(NSObject **)(v0 + 48);
  swift_release();

  sub_23F7B0980();
  sub_23F6B563C(v13, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  v16 = sub_23F6B68CC();
  v17(v16);
  sub_23F7D28A8();
  sub_23F713F08();
  sub_23FB2E78C();
  sub_23F7D1D1C();
  sub_23FB2F614();
  if ((sub_23F7D1F20() & 1) != 0)
  {
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1D2C() == *MEMORY[0x24BEE7810])
    {
      v18 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 128));
      v18 = "";
    }
    v19 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v19);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v15, v20, v21, "ToolEmbeddingsDatabase:replaceAssistantSchemas", v18);
    sub_23F693DD0();
  }
  v22 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
  v23 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 224);

  v22(v23, v24);
  swift_release();
  sub_23F6F52B0();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7D1F88();
  sub_23F7B0E90();
  sub_23F7B0E34();
  sub_23F7D1F90();
  sub_23F7D20EC();
  sub_23F7D2130();
  sub_23F7D24C0();
  sub_23F7D2668();
  sub_23F7D2660();
  sub_23F7D29AC();
  sub_23F7D29A4();
  v25 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7D258C(v25);
}

uint64_t sub_23F7BB410()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  _WORD *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  sub_23F7D23C8();
  sub_23F7D28A8();
  sub_23F7B1580();
  v1 = sub_23FB2E78C();
  sub_23F7D21C0();
  sub_23FB2F614();
  if ((sub_23F7D2F24() & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 128);
    sub_23F7B0BE8();
    sub_23F7D3024();
    sub_23F77DA7C();
    if (sub_23F6B563C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88)) == *MEMORY[0x24BEE7810])
    {
      v4 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 128));
      v4 = "";
    }
    v5 = (_WORD *)sub_23F693DF4();
    sub_23F7D28E8(v5);
    sub_23F7D20C8();
    sub_23F7D1C8C(&dword_23F68F000, v1, v6, v7, "ToolEmbeddingsDatabase:replaceAssistantSchemas", v4);
    sub_23F693DD0();
  }
  v8 = *(void (**)(uint64_t))(v0 + 312);
  sub_23F7D1DA0(v1);
  v9 = sub_23F7B0E48();
  v8(v9);
  sub_23F7D24C8();
  sub_23F6F52B0();
  sub_23F6F5224();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0B8C();
  sub_23F7D20B8();
  sub_23F7B0E90();
  sub_23F7B0E34();
  sub_23F7D1F90();
  sub_23F7D20EC();
  sub_23F7D2130();
  sub_23F7D24C0();
  sub_23F7D2668();
  sub_23F7D2660();
  sub_23F7D29AC();
  sub_23F7D29A4();
  swift_task_dealloc();
  return sub_23F7D1D00(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7BB590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _WORD *v8;
  os_signpost_type_t v9;
  os_signpost_id_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;

  sub_23F7D23C8();
  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 104);
  swift_release();
  sub_23F6B563C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F7D2C18(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  swift_release();
  v4 = sub_23FB2E78C();
  sub_23FB2E7B0();
  sub_23FB2F614();
  if ((sub_23F7D2F24() & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    sub_23F7B0BE8();
    sub_23F7D3024();
    sub_23F77DA7C();
    if (sub_23F6B563C(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 88)) == *MEMORY[0x24BEE7810])
    {
      v7 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 128));
      v7 = "";
    }
    v8 = (_WORD *)sub_23F693DF4();
    sub_23F7D28E8(v8);
    sub_23F7D20C8();
    sub_23F7D1C8C(&dword_23F68F000, v4, v9, v10, "ToolEmbeddingsDatabase:replaceAssistantSchemas", v7);
    sub_23F693DD0();
  }
  v11 = *(void (**)(uint64_t))(v0 + 312);
  sub_23F7D1DA0(v4);
  v12 = sub_23F7B0E48();
  v11(v12);
  sub_23F7D24C8();
  sub_23F6F52B0();
  sub_23F6F5224();
  sub_23F7B08CC();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F7B0E90();
  sub_23F7D20B8();
  sub_23F7B0E34();
  sub_23F7D1F90();
  sub_23F7D20EC();
  sub_23F7D2130();
  sub_23F7D24C0();
  sub_23F7D2668();
  sub_23F7D2660();
  sub_23F7D29AC();
  sub_23F7D29A4();
  swift_task_dealloc();
  return sub_23F7D1D00(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7BB748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD v33[2];
  int v34;
  void (*v35)(_QWORD, _QWORD, _QWORD);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v36 = a4;
  v40 = sub_23FB2EF54();
  v43 = *(_QWORD *)(v40 - 8);
  v8 = MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v33 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)v33 - v12;
  v13 = sub_23FB2E81C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_23F7C4F24();
  if ((result & 1) != 0)
  {
    v18 = sub_23FB2E864();
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v33[0] = v18;
      v33[1] = v6;
      v20 = v18 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v36 = a6 + 16;
      swift_beginAccess();
      v21 = *(_QWORD *)(v14 + 72);
      v22 = *(void (**)(_QWORD, _QWORD, _QWORD))(v14 + 16);
      v23 = *MEMORY[0x24BEB8E98];
      v37 = v16;
      v38 = v14;
      v35 = v22;
      v34 = v23;
      do
      {
        v22(v16, v20, v13);
        if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v16, v13) == v23)
        {
          (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
          v24 = v43;
          v26 = v39;
          v25 = v40;
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v39, v16, v40);
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v42, v26, v25);
          v27 = v13;
          v28 = v41;
          sub_23F7F11E8();
          v22 = v35;
          v29 = *(void (**)(char *, uint64_t))(v24 + 8);
          v30 = v28;
          v13 = v27;
          v16 = v37;
          v29(v30, v25);
          v31 = v26;
          v23 = v34;
          v32 = v25;
          v14 = v38;
          v29(v31, v32);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        }
        v20 += v21;
        --v19;
      }
      while (v19);
      swift_endAccess();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_23F7BB9D4(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  int64_t v31;
  unint64_t v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  void (*v72)(char *, uint64_t);
  int v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  int64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);

  v69 = sub_23FB2EEAC();
  v68 = *(_QWORD *)(v69 - 8);
  v5 = MEMORY[0x24BDAC7A8](v69);
  v67 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v66 = (char *)&v65 - v7;
  v8 = sub_23FB2EF54();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v84 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v85 = (char *)&v65 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v78 = (char *)&v65 - v14;
  v15 = sub_23F6916B8(&qword_256EA9B98);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v76 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v79 = (char *)&v65 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v87 = (uint64_t)&v65 - v20;
  v88 = v21;
  v22 = (char *)&v65 + *(int *)(v21 + 48) - v20;
  v77 = v9;
  v93 = *(void (**)(void))(v9 + 16);
  v93();
  v23 = sub_23FB2E834();
  v75 = *(_QWORD *)(v23 - 8);
  v24 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  v86 = v22;
  v74 = v24;
  v24(v22, a2, v23);
  swift_beginAccess();
  v25 = *a3;
  v26 = *(_QWORD *)(*a3 + 56);
  v70 = *a3 + 56;
  v27 = 1 << *(_BYTE *)(v25 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v71 = (unint64_t)(v27 + 63) >> 6;
  v80 = v25;
  result = swift_bridgeObjectRetain();
  v31 = 0;
  while (v29)
  {
    v82 = (v29 - 1) & v29;
    v83 = v31;
    v32 = __clz(__rbit64(v29)) | (v31 << 6);
    v33 = v79;
LABEL_20:
    v39 = v77;
    v38 = v78;
    ((void (*)(char *, unint64_t, uint64_t))v93)(v78, *(_QWORD *)(v80 + 48) + *(_QWORD *)(v77 + 72) * v32, v8);
    v40 = v85;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v85, v38, v8);
    v91 = sub_23FB2EF24();
    v92 = v41;
    v42 = &v33[*(int *)(v88 + 48)];
    ((void (*)(char *, uint64_t, uint64_t))v93)(v33, v87, v8);
    v43 = v74;
    v74(v42, v86, v23);
    v44 = sub_23FB2EF24();
    v46 = v45;
    v47 = *(void (**)(char *, uint64_t))(v39 + 8);
    v47(v33, v8);
    v89 = v44;
    v90 = v46;
    sub_23F731C2C();
    LOBYTE(v44) = sub_23FB2F6E0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81 = *(void (**)(char *, uint64_t))(v75 + 8);
    v81(v42, v23);
    v48 = v40;
    v49 = v43;
    ((void (*)(char *, char *, uint64_t))v93)(v84, v48, v8);
    v50 = (uint64_t)v76;
    v51 = &v76[*(int *)(v88 + 48)];
    ((void (*)(char *, uint64_t, uint64_t))v93)(v76, v87, v8);
    v52 = v23;
    v49(v51, v86, v23);
    if ((v44 & 1) != 0)
    {
      v53 = v66;
      v54 = v84;
      sub_23FB2EF30();
      v55 = *(int *)(v88 + 48);
      v72 = v47;
      v56 = &v33[v55];
      ((void (*)(char *, uint64_t, uint64_t))v93)(v33, v50, v8);
      v49(v56, v51, v52);
      v57 = v54;
      v58 = v67;
      sub_23FB2EF30();
      v59 = v33;
      v60 = v72;
      v72(v59, v8);
      v73 = sub_23FB2EEA0();
      v61 = *(void (**)(char *, uint64_t))(v68 + 8);
      v62 = v58;
      v63 = v69;
      v61(v62, v69);
      v61(v53, v63);
      sub_23F6B4F84(v50, &qword_256EA9B98);
      v60(v57, v8);
      v60(v85, v8);
      result = ((uint64_t (*)(char *, uint64_t))v81)(v56, v52);
      v23 = v52;
      v29 = v82;
      v31 = v83;
      if ((v73 & 1) != 0)
      {
        v64 = 1;
LABEL_25:
        swift_release();
        sub_23F6B4F84(v87, &qword_256EA9B98);
        return v64;
      }
    }
    else
    {
      sub_23F6B4F84(v50, &qword_256EA9B98);
      v47(v84, v8);
      result = ((uint64_t (*)(char *, uint64_t))v47)(v85, v8);
      v29 = v82;
      v31 = v83;
    }
  }
  v34 = v31 + 1;
  v33 = v79;
  if (__OFADD__(v31, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v34 >= v71)
    goto LABEL_24;
  v35 = *(_QWORD *)(v70 + 8 * v34);
  v36 = v31 + 1;
  if (v35)
    goto LABEL_19;
  v36 = v31 + 2;
  if (v31 + 2 >= v71)
    goto LABEL_24;
  v35 = *(_QWORD *)(v70 + 8 * v36);
  if (v35)
    goto LABEL_19;
  v36 = v31 + 3;
  if (v31 + 3 >= v71)
    goto LABEL_24;
  v35 = *(_QWORD *)(v70 + 8 * v36);
  if (v35)
  {
LABEL_19:
    v82 = (v35 - 1) & v35;
    v83 = v36;
    v32 = __clz(__rbit64(v35)) + (v36 << 6);
    goto LABEL_20;
  }
  v37 = v31 + 4;
  if (v31 + 4 >= v71)
  {
LABEL_24:
    v64 = 0;
    goto LABEL_25;
  }
  v35 = *(_QWORD *)(v70 + 8 * v37);
  if (v35)
  {
    v36 = v31 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v36 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v36 >= v71)
      goto LABEL_24;
    v35 = *(_QWORD *)(v70 + 8 * v36);
    ++v37;
    if (v35)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23F7BC014(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t);
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;

  v109 = a3;
  v108 = type metadata accessor for AssistantSchema(0);
  v104 = *(_QWORD *)(v108 - 8);
  v5 = MEMORY[0x24BDAC7A8](v108);
  v102 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v98 = (uint64_t)&v90 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v115 = (uint64_t)&v90 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v100 = (uint64_t)&v90 - v11;
  v107 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v12 = MEMORY[0x24BDAC7A8](v107);
  v99 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v101 = (char *)&v90 - v14;
  v15 = sub_23FB2EF54();
  v16 = *(_QWORD *)(v15 - 8);
  v112 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v111 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23F6916B8(&qword_256EA9B98);
  v110 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23FB2E834();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v113 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(int *)(v18 + 48);
  v25 = &v20[v24];
  v26 = a2;
  v27 = &a2[v24];
  v105 = &a2[v24];
  v106 = (void (*)(char *, char *, uint64_t))a2;
  v28 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v28(v20, v26, v15);
  v114 = v22;
  v29 = *(char **)(v22 + 16);
  ((void (*)(char *, char *, uint64_t))v29)(v25, v27, v21);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v113, v25, v21);
  v30 = v112;
  v92 = *(void (**)(char *, uint64_t))(v16 + 8);
  v92(v20, v112);
  v31 = &v20[*(int *)(v110 + 48)];
  v32 = (char *)v106;
  v106 = v28;
  v28(v20, v32, v30);
  v33 = v105;
  v105 = v29;
  ((void (*)(char *, char *, uint64_t))v29)(v31, v33, v21);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v111, v20, v30);
  v34 = *(uint64_t (**)(char *, uint64_t))(v114 + 8);
  v110 = v21;
  v91 = v34;
  v34(v31, v21);
  v35 = sub_23FB2E828();
  v36 = *(_QWORD *)(v35 + 16);
  v103 = a1;
  v95 = v36;
  if (v36)
  {
    v37 = 0;
    v38 = *(_QWORD *)(sub_23FB2EF90() - 8);
    v39 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    v90 = v35;
    v94 = v35 + v39;
    v93 = *(_QWORD *)(v38 + 72);
    v40 = (uint64_t)v99;
    v41 = (uint64_t)v101;
    while (1)
    {
      v42 = sub_23FB2EF84();
      v43 = *(_QWORD *)(v42 + 16);
      if (v43)
        break;
LABEL_15:
      swift_bridgeObjectRelease();
      if (++v37 == v95)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    v97 = v37;
    swift_bridgeObjectRetain();
    v96 = v42;
    v44 = (uint64_t *)(v42 + 40);
    while (1)
    {
      v114 = v43;
      v45 = *(v44 - 1);
      v46 = *v44;
      swift_bridgeObjectRetain();
      v47 = v111;
      sub_23F7B8508();
      v49 = v48;
      v106((char *)v41, v47, v112);
      v50 = v107;
      ((void (*)(uint64_t, char *, uint64_t))v105)(v41 + *(int *)(v107 + 20), v113, v110);
      *(_BYTE *)(v41 + *(int *)(v50 + 24)) = 0;
      v51 = v100;
      sub_23F6F5920(v41, v100, type metadata accessor for AssistantSchemaToolBoxRepresentation);
      v52 = (_QWORD *)(v51 + *(int *)(v108 + 20));
      *v52 = v45;
      v52[1] = v46;
      sub_23F6F594C(v51, v115, type metadata accessor for AssistantSchema);
      swift_bridgeObjectRetain();
      swift_isUniquelyReferenced_nonNull_native();
      v116 = (_QWORD *)*a1;
      v53 = v116;
      *a1 = 0x8000000000000000;
      v54 = sub_23F78C8D8();
      if (__OFADD__(v53[2], (v55 & 1) == 0))
        break;
      v56 = v54;
      v57 = v55;
      sub_23F6916B8(&qword_256EAA7A8);
      if ((sub_23FB2F914() & 1) != 0)
      {
        v58 = sub_23F78C8D8();
        if ((v57 & 1) != (v59 & 1))
          goto LABEL_38;
        v56 = v58;
      }
      v60 = v116;
      if ((v57 & 1) != 0)
      {
        sub_23F7CEB2C(v115, v116[7] + *(_QWORD *)(v104 + 72) * v56);
      }
      else
      {
        v116[(v56 >> 6) + 8] |= 1 << v56;
        *(_QWORD *)(v60[6] + 8 * v56) = v49;
        sub_23F6F594C(v115, v60[7] + *(_QWORD *)(v104 + 72) * v56, type metadata accessor for AssistantSchema);
        v61 = v60[2];
        v62 = __OFADD__(v61, 1);
        v63 = v61 + 1;
        if (v62)
          goto LABEL_36;
        v60[2] = v63;
      }
      v44 += 2;
      a1 = v103;
      *v103 = v60;
      swift_bridgeObjectRelease();
      v41 = (uint64_t)v101;
      sub_23F6B4FAC();
      swift_bridgeObjectRelease();
      v43 = v114 - 1;
      if (v114 == 1)
      {
        swift_bridgeObjectRelease();
        v40 = (uint64_t)v99;
        v37 = v97;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = (uint64_t)v99;
LABEL_18:
    v64 = sub_23FB2E828();
    v100 = *(_QWORD *)(v64 + 16);
    if (!v100)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      v92(v111, v112);
      return v91(v113, v110);
    }
    v65 = 0;
    v66 = *(_QWORD *)(sub_23FB2EF90() - 8);
    v97 = v64 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
    v67 = *(_QWORD *)(v66 + 72);
    v95 = v64;
    v96 = v67;
    while (1)
    {
      v68 = sub_23FB2EF78();
      v69 = *(_QWORD *)(v68 + 16);
      if (v69)
        break;
LABEL_32:
      swift_bridgeObjectRelease();
      if (++v65 == v100)
        goto LABEL_33;
    }
    v114 = v65;
    swift_bridgeObjectRetain();
    v101 = (char *)v68;
    v70 = (uint64_t *)(v68 + 40);
    while (1)
    {
      v115 = v69;
      v72 = *(v70 - 1);
      v71 = *v70;
      swift_bridgeObjectRetain();
      v73 = v111;
      sub_23F7B8508();
      v75 = v74;
      v106((char *)v40, v73, v112);
      v76 = v107;
      ((void (*)(uint64_t, char *, uint64_t))v105)(v40 + *(int *)(v107 + 20), v113, v110);
      *(_BYTE *)(v40 + *(int *)(v76 + 24)) = 1;
      v77 = v98;
      sub_23F6F5920(v40, v98, type metadata accessor for AssistantSchemaToolBoxRepresentation);
      v78 = (_QWORD *)(v77 + *(int *)(v108 + 20));
      *v78 = v72;
      v78[1] = v71;
      sub_23F6F594C(v77, v102, type metadata accessor for AssistantSchema);
      swift_bridgeObjectRetain();
      swift_isUniquelyReferenced_nonNull_native();
      v116 = (_QWORD *)*a1;
      v79 = v116;
      *a1 = 0x8000000000000000;
      v80 = sub_23F78C8D8();
      if (__OFADD__(v79[2], (v81 & 1) == 0))
        break;
      v82 = v80;
      v83 = v81;
      sub_23F6916B8(&qword_256EAA7A8);
      if ((sub_23FB2F914() & 1) != 0)
      {
        v84 = sub_23F78C8D8();
        if ((v83 & 1) != (v85 & 1))
          goto LABEL_38;
        v82 = v84;
      }
      v86 = v116;
      if ((v83 & 1) != 0)
      {
        sub_23F7CEB2C(v102, v116[7] + *(_QWORD *)(v104 + 72) * v82);
      }
      else
      {
        v116[(v82 >> 6) + 8] |= 1 << v82;
        *(_QWORD *)(v86[6] + 8 * v82) = v75;
        sub_23F6F594C(v102, v86[7] + *(_QWORD *)(v104 + 72) * v82, type metadata accessor for AssistantSchema);
        v87 = v86[2];
        v62 = __OFADD__(v87, 1);
        v88 = v87 + 1;
        if (v62)
          goto LABEL_37;
        v86[2] = v88;
      }
      v70 += 2;
      a1 = v103;
      *v103 = v86;
      swift_bridgeObjectRelease();
      v40 = (uint64_t)v99;
      sub_23F6B4FAC();
      swift_bridgeObjectRelease();
      v69 = v115 - 1;
      if (v115 == 1)
      {
        swift_bridgeObjectRelease();
        v65 = v114;
        goto LABEL_32;
      }
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = sub_23FB2FBD8();
  __break(1u);
  return result;
}

void sub_23F7BC8A0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (!*(_QWORD *)(*a1 + 16) || (sub_23F78C968(), (v4 & 1) == 0))
  {
    sub_23FB2D640();
    sub_23FB2D634();
    sub_23F7DB950();
  }
  v5 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    sub_23F78C968();
    if ((v7 & 1) != 0)
    {
      *a2 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      swift_retain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_23F7BC940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  v5 = type metadata accessor for AssistantSchemaToEmbed(0);
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v6 = sub_23FB2C680();
  v4[16] = v6;
  v4[17] = *(_QWORD *)(v6 - 8);
  v4[18] = swift_task_alloc();
  sub_23FB2C674();
  v4[19] = swift_task_alloc();
  v7 = sub_23FB2C608();
  v4[20] = v7;
  v4[21] = *(_QWORD *)(v7 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = type metadata accessor for ToolboxVersion(0);
  v4[24] = swift_task_alloc();
  v8 = sub_23FB2E7F8();
  v4[25] = v8;
  v4[26] = *(_QWORD *)(v8 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F7BCA94()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _QWORD *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  os_log_type_t v59;
  _QWORD *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t (*v113)(void);
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127[2];

  v1 = v0[10];
  if (!v1)
    goto LABEL_4;
  v2 = *(_BYTE *)(v1 + 16);
  sub_23F7D25E0();
  if ((v2 & 1) == 0)
  {
    sub_23F7B1580();
LABEL_4:
    v4 = v0[21];
    v3 = v0[22];
    v5 = v0[20];
    v6 = v0[17];
    v7 = v0[18];
    v8 = v0[16];
    v9 = *(_QWORD *)(v0[11] + 24);
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 8) = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v7, *MEMORY[0x24BEBFE30], v8);
    sub_23F6B90D8();
    sub_23F7D260C();
    sub_23FB2C65C();
    sub_23F6916B8(&qword_256EA6260);
    v10 = sub_23F6916B8(&qword_256EA28F8);
    sub_23F7D2478();
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_23FB47010;
    sub_23F7D2C8C(v11 + v9, *(int *)(v10 + 48));
    sub_23F6B6190();
    sub_23FB2C5FC();
    sub_23F6916B8(&qword_256EA7900);
    v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23FB47010;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v13 + v12, v3, v5);
    v26 = sub_23FB2C578();
    sub_23F6B6090();
    v27 = sub_23F7A38E8(v26);
    swift_bridgeObjectRetain();
    v28 = sub_23F6B5508();
    v29 = sub_23F7A3974(v28);
    v30 = sub_23F7BD770(v29, v27);
    sub_23F693E04();
    if (*(_QWORD *)(v30 + 16))
    {
      v31 = sub_23F77E600();
      sub_23F6BB660(v31);
      sub_23F6B6A48();
      sub_23FB2C590();
      sub_23F7D2604();
      sub_23F7B0B84();
      sub_23F7B0C8C();
      sub_23F77E600();
      v32 = sub_23FB2E7E0();
      v33 = sub_23FB2F5D8();
      v34 = os_log_type_enabled(v32, v33);
      v13 = v0[25];
      if (v34)
      {
        v35 = (_QWORD *)v0[11];
        v36 = sub_23F693DF4();
        v127[0] = sub_23F693DF4();
        *(_DWORD *)v36 = 136315394;
        v37 = v35[26];
        v38 = v35[27];
        sub_23F6ADC98(v35 + 23, v37);
        (*(void (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);
        sub_23F7D2CC8();
        v39 = sub_23F7B0944();
        sub_23F78F1B0(v39);
        v40 = sub_23F7D2F98();
        v0[7] = sub_23F69334C(v40, v41, v42);
        sub_23FB2F680();
        sub_23F6B644C();
        sub_23F7B0980();
        *(_WORD *)(v36 + 12) = 2048;
        v43 = *(_QWORD *)(v30 + 16);
        sub_23F6B6A48();
        v0[8] = v43;
        sub_23FB2F680();
        sub_23F6B6A48();
        sub_23F693E48(&dword_23F68F000, v32, v33, "%s toolbox: Removed %ld protocols from the toolbox", (uint8_t *)v36);
        sub_23F7B0B40();
        sub_23F693DD0();
      }
      sub_23F6B6740();
      sub_23F7B0980();

      v44 = sub_23F7B0E48();
      v45(v44);
    }
    else
    {
      sub_23F6B6A48();
    }
    v46 = swift_bridgeObjectRetain();
    v47 = sub_23F7A3974(v46);
    v48 = sub_23F7BD770(v27, v47);
    sub_23F717D54();
    v49 = v0[11];
    if (*(_QWORD *)(v48 + 16))
    {
      sub_23F7D2168();
      sub_23F7B0C8C();
      sub_23F7D2128();
      v50 = sub_23F7D297C();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (_QWORD *)v0[11];
        v120 = v49;
        v52 = (uint8_t *)sub_23F693DF4();
        v117 = sub_23F693DF4();
        *(_DWORD *)v52 = 136315138;
        v127[0] = v117;
        v53 = v51[26];
        v54 = v51[27];
        sub_23F7D2448(v51 + 23);
        (*(void (**)(uint64_t, uint64_t))(v54 + 16))(v53, v54);
        sub_23F7D2CC8();
        v55 = sub_23F7B0944();
        sub_23F78F1B0(v55);
        v56 = sub_23F6B63F4();
        v0[5] = sub_23F69334C(v56, v57, v58);
        sub_23FB2F680();
        sub_23F6B5AB0();
        sub_23F7B0980();
        sub_23F7B0B48(&dword_23F68F000, v120, v50, "%s toolbox: Fetching embeddings for new protocols", v52);
        sub_23F7B0B40();
        sub_23F693DD0();
      }
      sub_23F7B0980();

      v67 = sub_23F6B63F4();
      v122 = v68;
      ((void (*)(uint64_t))v68)(v67);
      v70 = v0[11];
      v69 = v0[12];
      sub_23F6B54F8();
      sub_23F77E584();
      v71 = sub_23F7CC440(v69, v48);
      sub_23F693DFC();
      sub_23F756640();
      sub_23F7B1784(v71, (void (*)(_QWORD, char *))sub_23F7CEAF8, v70);
      v73 = v72;
      sub_23F713F08();
      v116 = (_QWORD *)(v70 + 184);
      v118 = v70;
      sub_23F6ADC98((_QWORD *)(v70 + 184), *(_QWORD *)(v70 + 208));
      v74 = sub_23F7B0E48();
      v75(v74);
      v126 = v125;
      v76 = *(_QWORD *)(v73 + 16);
      v77 = MEMORY[0x24BEE4AF8];
      v121 = v76;
      if (v76)
      {
        v78 = v0[14];
        v124 = v0[13];
        v127[0] = MEMORY[0x24BEE4AF8];
        sub_23F7D2F6C(0, v76);
        sub_23F78F3B0();
        v123 = v73;
        v80 = v73 + v79;
        v81 = *(_QWORD *)(v78 + 72);
        v77 = v127[0];
        do
        {
          v82 = v0[15];
          v83 = sub_23F7D2958();
          sub_23F6F5920(v83, v84, type metadata accessor for AssistantSchemaToEmbed);
          v85 = (uint64_t *)(v82 + *(int *)(v124 + 24));
          v86 = *v85;
          v87 = v85[1];
          sub_23F77E584();
          sub_23F6B4FAC();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23F7D24D0(0, *(_QWORD *)(v77 + 16) + 1);
            v77 = v127[0];
          }
          v89 = *(_QWORD *)(v77 + 16);
          v88 = *(_QWORD *)(v77 + 24);
          if (v89 >= v88 >> 1)
          {
            v91 = sub_23F78F598(v88);
            sub_23F7D24D0(v91, v89 + 1);
            v77 = v127[0];
          }
          *(_QWORD *)(v77 + 16) = v89 + 1;
          v90 = v77 + 16 * v89;
          *(_QWORD *)(v90 + 32) = v86;
          *(_QWORD *)(v90 + 40) = v87;
          v80 += v81;
          --v76;
        }
        while (v76);
        v73 = v123;
      }
      v93 = v0[10];
      v92 = v0[11];
      v94 = v92 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
      sub_23F7D296C();
      sub_23F7D2714();
      sub_23F77E600();
      sub_23F7B5984(v77, 50, v94, &v126, (unsigned __int8 *)v73, v92, v93);
      sub_23F693DFC();
      sub_23F7D2168();
      sub_23F7B0C8C();
      sub_23F77E600();
      v95 = sub_23F7D2128();
      v96 = sub_23FB2F5D8();
      v97 = os_log_type_enabled(v95, v96);
      v98 = v0[27];
      v99 = v0[25];
      if (v97)
      {
        v100 = sub_23F693DF4();
        v127[0] = sub_23F693DF4();
        *(_DWORD *)v100 = 136315394;
        v102 = *(_QWORD *)(v118 + 208);
        v101 = *(_QWORD *)(v118 + 216);
        sub_23F6ADC98(v116, v102);
        (*(void (**)(uint64_t, uint64_t))(v101 + 16))(v102, v101);
        sub_23FB2D3C4();
        sub_23F7D2CE0();
        v103 = sub_23F7B0944();
        sub_23F78F1B0(v103);
        v104 = sub_23F6B6224();
        v0[3] = sub_23F69334C(v104, v105, v106);
        sub_23FB2F680();
        sub_23F6B6A48();
        sub_23F7B0980();
        *(_WORD *)(v100 + 12) = 2048;
        sub_23F6B644C();
        v0[4] = v121;
        sub_23FB2F680();
        sub_23F6B644C();
        sub_23F693E48(&dword_23F68F000, v95, v96, "%s toolbox: Inserted protocol embeddings %ld", (uint8_t *)v100);
        sub_23F7B0B40();
        sub_23F693DD0();
      }
      sub_23F6B6740();

      sub_23F7B0980();
      v107 = v98;
      v108 = v99;
      v109 = v122;
    }
    else
    {
      sub_23F756640();
      sub_23F7D2168();
      sub_23F7B0C8C();
      sub_23F7D2128();
      v59 = sub_23F7D28C8();
      if (sub_23F7D302C(v13))
      {
        v60 = (_QWORD *)v0[11];
        v61 = (uint8_t *)sub_23F693DF4();
        v115 = sub_23F693DF4();
        sub_23F7D2BE4(v115, 4.8149e-34);
        v63 = v60[26];
        v62 = v60[27];
        sub_23F6ADC98(v60 + 23, v63);
        (*(void (**)(uint64_t, uint64_t))(v62 + 16))(v63, v62);
        v64 = sub_23F7D2F90();
        v65 = sub_23F7B0944();
        sub_23F78F1B0(v65);
        v0[6] = sub_23F7D24B8(v64, v66, v127);
        sub_23F7D2890();
        sub_23F717D54();
        sub_23F7B0980();
        sub_23F7B0B48(&dword_23F68F000, v13, v59, "%s toolbox: No new protocols to embed", v61);
        sub_23F7B0B40();
        sub_23F693DD0();
      }

      sub_23F7B0980();
      v107 = sub_23F6B6224();
    }
    v109(v107, v108);
    v110 = sub_23F6B6190();
    v112(v110, v111);
    goto LABEL_32;
  }
  v14 = v0[31];
  sub_23FB2E3C0();
  sub_23F7B0C8C();
  sub_23FB2E7E0();
  v15 = sub_23F7D297C();
  v16 = sub_23F7D2BB8(v14);
  v17 = v0[31];
  v18 = v0[25];
  v19 = v0[26];
  if (v16)
  {
    v20 = v0[11];
    v21 = (uint8_t *)sub_23F693DF4();
    v119 = sub_23F693DF4();
    sub_23F7D2BE4(v119, 4.8149e-34);
    sub_23F7D2BC0((_QWORD *)(v20 + 184));
    sub_23F7D21E4();
    v22 = sub_23FB2D3C4();
    v24 = v23;
    v25 = sub_23F7B0944();
    sub_23F78F1B0(v25);
    v0[9] = sub_23F69334C(v22, v24, v127);
    sub_23F7D2890();
    sub_23F6B644C();
    sub_23F7B0980();
    sub_23F7B0B48(&dword_23F68F000, v14, v15, "ToolEmbeddingDatabase: received cancellation request. Cancelling %s toolbox.", v21);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  sub_23F7B0980();
  sub_23F7B1580();

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
LABEL_32:
  swift_task_dealloc();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  v113 = (uint64_t (*)(void))sub_23F750B9C();
  return v113();
}

uint64_t sub_23F7BD770(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_23F7CD464(a1, a2);
  sub_23F7CD300(a1);
  return a2;
}

void sub_23F7BD7C0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v7 = a3[26];
  v8 = a3[27];
  sub_23F6ADC98(a3 + 23, v7);
  v9 = type metadata accessor for AssistantSchema(0);
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v8 + 48))(*(_QWORD *)(a2 + *(int *)(v9 + 20)), *(_QWORD *)(a2 + *(int *)(v9 + 20) + 8), v7, v8);
  v12 = v11;
  v13 = type metadata accessor for AssistantSchemaToEmbed(0);
  sub_23F6F5920(a2, (uint64_t)a4 + *(int *)(v13 + 20), type metadata accessor for AssistantSchemaToolBoxRepresentation);
  *a4 = a1;
  v14 = (_QWORD *)((char *)a4 + *(int *)(v13 + 24));
  *v14 = v10;
  v14[1] = v12;
}

uint64_t sub_23F7BD868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  _DWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  os_log_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v7 = v6;
  v14 = type metadata accessor for ToolboxVersion(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23FB2E7F8();
  result = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < a1)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a1 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v22 = *(_QWORD *)(a4 + 16);
  if (v22 >= a1 && (uint64_t)v22 >= a2)
  {
    v55 = v16;
    v56 = v14;
    v57 = v22;
    v58 = v19;
    v59 = result;
    v60 = v21;
    v61 = a6;
    v24 = type metadata accessor for AssistantSchemaToEmbed(0);
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80);
    v26 = a4 + ((v25 + 32) & ~v25);
    MEMORY[0x24BDAC7A8](v24);
    *(&v49 - 2) = a5;
    *(&v49 - 1) = a3;
    v27 = swift_bridgeObjectRetain();
    sub_23F7B3C34(v27, v26, a1, (2 * a2) | 1, (void (*)(_QWORD, char *))sub_23F7CEB00, (uint64_t)(&v49 - 4));
    swift_bridgeObjectRelease();
    if (!v7)
    {
      sub_23FB2C59C();
      swift_bridgeObjectRelease();
      if (v61)
      {
        v29 = *(_BYTE *)(v61 + 16);
        swift_retain();
        if ((v29 & 1) != 0)
        {
          v30 = v60;
          sub_23FB2E3C0();
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          v31 = sub_23FB2E7E0();
          v32 = sub_23FB2F5D8();
          v33 = v32;
          if (os_log_type_enabled(v31, v32))
          {
            v34 = (_DWORD *)swift_slowAlloc();
            v54 = swift_slowAlloc();
            v63 = v54;
            *v34 = 136315650;
            v50 = v34;
            v51 = v34 + 1;
            v35 = (_QWORD *)(a5 + 184);
            v52 = v31;
            v36 = a5;
            v37 = *(_QWORD *)(a5 + 208);
            v53 = v33;
            v38 = *(_QWORD *)(v36 + 216);
            sub_23F6ADC98(v35, v37);
            v39 = v55;
            (*(void (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);
            v40 = &v39[*(int *)(v56 + 20)];
            v41 = sub_23FB2D3C4();
            v43 = v42;
            v44 = sub_23FB2D3D0();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v40, v44);
            v45 = sub_23F69334C(v41, v43, &v63);
            v46 = v50;
            v62 = v45;
            sub_23FB2F680();
            swift_release_n();
            swift_bridgeObjectRelease();
            *((_WORD *)v46 + 6) = 2048;
            v62 = a2;
            sub_23FB2F680();
            *((_WORD *)v46 + 11) = 2048;
            swift_bridgeObjectRelease();
            v62 = v57;
            sub_23FB2F680();
            swift_bridgeObjectRelease();
            v47 = v52;
            _os_log_impl(&dword_23F68F000, v52, (os_log_type_t)v53, "ToolEmbeddingDatabase: received cancellation request. Cancelling %s toolbox. Completed: %ld/%ld", (uint8_t *)v46, 0x20u);
            v48 = v54;
            swift_arrayDestroy();
            MEMORY[0x242674F4C](v48, -1, -1);
            MEMORY[0x242674F4C](v46, -1, -1);

            swift_release();
            (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v59);
          }
          else
          {

            swift_release();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v59);
          }
          v28 = 0;
          return v28 & 1;
        }
        swift_release();
      }
      v28 = 1;
    }
    return v28 & 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

void sub_23F7BDC90(unint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;

  v54 = a5;
  v55 = a4;
  v66 = a3;
  v60 = a1;
  v6 = sub_23FB2C680();
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v58 = (_QWORD *)((char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_23FB2E834();
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v62 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23FB2EF54();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v61 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ToolboxDatabasePayload(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(sub_23F6916B8(&qword_256EAA6E0) + 48);
  v17 = *(int *)(type metadata accessor for AssistantSchemaToEmbed(0) + 20);
  v59 = a2;
  v18 = a2 + v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19(v15, v18, v10);
  v20 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v15[v16] = *(_BYTE *)(v18 + *(int *)(v20 + 24));
  v21 = swift_storeEnumTagMultiPayload();
  v22 = (void *)MEMORY[0x2426749F4](v21);
  sub_23F6D3458(&qword_256EAA658, type metadata accessor for ToolboxDatabasePayload, (uint64_t)&unk_23FB61488);
  v23 = v65;
  v24 = sub_23FB2C0E0();
  if (v23)
  {
    objc_autoreleasePoolPop(v22);
    sub_23F6B4FAC();
    return;
  }
  v50[1] = v25;
  v50[2] = v24;
  v50[3] = 0;
  v50[4] = v15;
  v51 = v11;
  objc_autoreleasePoolPop(v22);
  v26 = v61;
  v52 = v10;
  v19(v61, v18, v10);
  v27 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v18 + *(int *)(v20 + 20), v64);
  v28 = v66[31];
  v29 = v66[32];
  sub_23F6ADC98(v66 + 28, v28);
  v53 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v29 + 16))(v26, v27, v28, v29);
  v65 = v30;
  sub_23F6916B8(&qword_256EAA628);
  v31 = sub_23F6916B8(&qword_256EAA630);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 72);
  v34 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23FB47020;
  v36 = v35 + v34;
  v37 = (uint64_t *)(v35 + v34 + *(int *)(v31 + 48));
  swift_bridgeObjectRetain();
  sub_23FB2C668();
  *v37 = 0;
  v38 = *MEMORY[0x24BEBFE50];
  v39 = sub_23FB2C68C();
  v40 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104);
  v40(v37, v38, v39);
  v41 = (uint64_t *)(v36 + v33 + *(int *)(v31 + 48));
  v42 = v57;
  v43 = v58;
  *v58 = 0;
  v43[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v56 + 104))(v43, *MEMORY[0x24BEBFE28], v42);
  swift_bridgeObjectRetain();
  sub_23FB2C65C();
  v44 = v65;
  *v41 = v53;
  v41[1] = v44;
  v40(v41, *MEMORY[0x24BEBFE48], v39);
  sub_23FB2C674();
  sub_23F6D3458((unint64_t *)&qword_256EA8C80, (uint64_t (*)(uint64_t))MEMORY[0x24BEBFE00], MEMORY[0x24BEBFE10]);
  sub_23FB2F050();
  sub_23F6916B8(&qword_256EAA660);
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_23FB47010;
  if ((v60 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v55 + 16) <= v60)
  {
LABEL_8:
    __break(1u);
    return;
  }
  v46 = v45;
  swift_bridgeObjectRetain();
  v47 = sub_23FB2F3E0();
  v49 = v48;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v46 + 32) = v47;
  *(_QWORD *)(v46 + 40) = v49;
  sub_23FB2C698();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v61, v52);
  sub_23F6B4FAC();
}

void sub_23F7BE140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;

  sub_23F6B5220();
  a22 = v28;
  a23 = v29;
  v69 = v24;
  v30 = sub_23F693F0C();
  v67 = *(_QWORD *)(v30 - 8);
  v68 = v30;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B5C2C();
  v64 = sub_23FB2C2A8();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F6B5298();
  sub_23F6916B8(&qword_256EA12B0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B631C();
  v36 = v34 - v35;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v62 - v38;
  v65 = sub_23F7D2348();
  v63 = *(_QWORD *)(v65 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6B5810(v41, v62);
  sub_23F6916B8(&qword_256EA1568);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B5864();
  v43 = type metadata accessor for AssetInfo();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B51A4();
  v66 = v45;
  if (qword_256EA0950 != -1)
    swift_once();
  v70 = qword_256EA1550;
  v71 = *(_QWORD *)algn_256EA1558;
  a13 = 1;
  sub_23F77DCD4();
  AssetsManager.info(for:locale:in:)(&a13, 0x53555F6E65, 0xE500000000000000, 0, v25);
  sub_23F6B644C();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v25, 1, v43) == 1)
  {
    v46 = &qword_256EA1568;
    v47 = (uint64_t)v25;
  }
  else
  {
    v48 = (uint64_t)v25;
    v49 = v66;
    sub_23F6F594C(v48, v66, (uint64_t (*)(_QWORD))type metadata accessor for AssetInfo);
    sub_23F6B4F58(v49 + *(int *)(v43 + 20), v36, &qword_256EA12B0);
    v50 = v65;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v36, 1, v65) == 1)
    {
      sub_23F6B4F84(v36, &qword_256EA12B0);
      sub_23F7D2ED8((uint64_t)v39, 1);
    }
    else
    {
      v70 = 0xD000000000000019;
      v71 = 0x800000023FB337F0;
      sub_23F6B5EF0(v23, *MEMORY[0x24BDCD7A0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 104));
      sub_23F731C2C();
      sub_23FB2C314();
      sub_23F70D728(v23, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      swift_bridgeObjectRelease();
      v51 = v63;
      v52 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v52(v36, v50);
      sub_23F7D2ED8((uint64_t)v39, 0);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v39, 1, v50) != 1)
      {
        v58 = v62;
        (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v62, v39, v50);
        v59 = v69;
        sub_23FB2C350();
        if (v59)
        {
          v52(v58, v50);
        }
        else
        {
          sub_23FB2C1F4();
          sub_23F6BD144();
          sub_23FB2C1E8();
          sub_23F7CE7DC();
          sub_23FB2C1DC();
          swift_release();
          v60 = sub_23F77DCD4();
          sub_23F7A3590(v60);
          v61 = sub_23F6B90D8();
          sub_23F7A3818(v61);
          sub_23F7D2E80();
          sub_23F717D54();
          sub_23F6B644C();
          v52(v58, v65);
        }
        sub_23F6B4FAC();
        goto LABEL_12;
      }
    }
    sub_23F6B4FAC();
    v46 = &qword_256EA12B0;
    v47 = (uint64_t)v39;
  }
  sub_23F6B4F84(v47, v46);
  sub_23FB2E378();
  v53 = sub_23FB2E7E0();
  v54 = sub_23FB2F5F0();
  if (sub_23F759600(v54))
  {
    v55 = (uint8_t *)sub_23F693DF4();
    *(_WORD *)v55 = 0;
    sub_23F7D24B0(&dword_23F68F000, v53, v26, "Tool Retrieval Deny List not found", v55);
    sub_23F693DD0();
  }

  v56 = sub_23F6B61D0();
  v57(v56);
LABEL_12:
  sub_23F6B5100();
}

uint64_t sub_23F7BE5A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[5] = v0;
  v2 = sub_23F7D2AC4();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = sub_23F750AE4();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7BE5E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  sub_23F7D29D4(&v11);
  if (v0)
  {
    swift_task_dealloc();
    v2 = (uint64_t (*)(void))sub_23F7D2580();
    return v2();
  }
  else
  {
    if (v11)
      swift_bridgeObjectRelease();
    v4 = (_QWORD *)v1[5];
    v5 = sub_23F6B56B0();
    v1[9] = v5;
    *(_QWORD *)(v5 + 16) = MEMORY[0x24BEE4B08];
    sub_23F7B87F4();
    v6 = v4 + 12;
    v7 = v4[15];
    v8 = v4[16];
    sub_23F7D2448(v6);
    v10 = (uint64_t (*)(_QWORD, uint64_t (*)(), uint64_t, uint64_t, uint64_t))sub_23F7D2DDC();
    sub_23F7D2714();
    v9 = (_QWORD *)swift_task_alloc();
    v1[10] = v9;
    *v9 = v1;
    v9[1] = sub_23F7BE6E4;
    return v10(v1[8], sub_23F7CECBC, v5, v7, v8);
  }
}

uint64_t sub_23F7BE6E4()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 88) = v0;
  swift_task_dealloc();
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7BE734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  sub_23F7D1F2C();
  v2 = *(_QWORD *)(v1 + 16);
  sub_23F6B54F8();
  sub_23F713F08();
  sub_23F6F5224();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_23F7BE7A4()
{
  uint64_t v0;

  sub_23F7D1C98(*(_QWORD *)(v0 + 56));
  sub_23F77DA7C();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7BE7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0 = sub_23FB2E8A0();
  v2 = v1;
  swift_beginAccess();
  sub_23F7F0E60(&v4, v0, v2);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7BE864(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_23FB2E8D0();
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = sub_23F750AE4();
  v4 = sub_23F693F0C();
  v2[14] = v4;
  v2[15] = *(_QWORD *)(v4 - 8);
  v2[16] = sub_23F750AE4();
  v5 = sub_23F7D2AC4();
  v2[17] = v5;
  v2[18] = *(_QWORD *)(v5 - 8);
  v2[19] = sub_23F750AE4();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7BE8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  BOOL v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  uint64_t (*v84)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  os_log_type_t v91;
  uint8_t *v92;
  NSObject *v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;

  sub_23F7D23C8();
  a31 = v34;
  a32 = v35;
  a30 = v33;
  sub_23F7D29D4(&a20);
  if (v32)
  {
    swift_task_dealloc();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F7D2580();
    sub_23F7D282C();
    return v36(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24);
  }
  v45 = a20;
  v46 = sub_23F6B56B0();
  v33[20] = v46;
  *(_QWORD *)(v46 + 16) = MEMORY[0x24BEE4AF8];
  if (!v45)
    goto LABEL_15;
  if (!*(_QWORD *)(v45 + 16))
  {
    sub_23F693E04();
LABEL_15:
    v68 = v33[10];
    v69 = *(_QWORD *)(v68 + 128);
    sub_23F7D2448((_QWORD *)(v68 + 96));
    sub_23F7B87F4();
    v96 = **(int **)(v69 + 72) + *(_QWORD *)(v69 + 72);
    sub_23F7B0BE8();
    v70 = (_QWORD *)sub_23F7D2FA4();
    v33[21] = v70;
    *v70 = v33;
    v70[1] = sub_23F7BECBC;
    sub_23F7D282C();
    return v76(v71, v72, v73, v74, v75, v76, v77, v78, a9, a10, a11, a12, a13, a14, a15, a16, a17, v96, a19,
             a20,
             a21,
             a22,
             a23,
             a24);
  }
  swift_bridgeObjectRetain();
  sub_23F7B2CFC();
  *(_QWORD *)(v46 + 16) = v47;
  sub_23F7D2D98();
  sub_23F7D2168();
  sub_23F7B0C8C();
  v48 = sub_23F7D2128();
  v49 = sub_23FB2F5E4();
  v50 = os_log_type_enabled(v48, v49);
  v51 = v33[20];
  if (v50)
  {
    v91 = v49;
    v93 = v48;
    v52 = (uint8_t *)sub_23F693DF4();
    a19 = sub_23F693DF4();
    v92 = v52;
    *(_DWORD *)v52 = 136315138;
    sub_23F6B69FC();
    sub_23F7D1F2C();
    v53 = *(_QWORD *)(v51 + 16);
    v54 = *(_QWORD *)(v53 + 16);
    v55 = MEMORY[0x24BEE4AF8];
    if (v54)
    {
      v56 = v33[12];
      a20 = MEMORY[0x24BEE4AF8];
      sub_23F6B5508();
      sub_23F7D2F6C(0, v54);
      v57 = v53 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
      v94 = *(void (**)(uint64_t))(v56 + 16);
      v95 = *(_QWORD *)(v56 + 72);
      do
      {
        v58 = sub_23F7D24F0();
        v94(v58);
        v59 = sub_23FB2E8A0();
        v61 = v60;
        v62 = sub_23F6B68CC();
        v63(v62);
        v55 = a20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F7D24D0(0, *(_QWORD *)(v55 + 16) + 1);
          v55 = a20;
        }
        v65 = *(_QWORD *)(v55 + 16);
        v64 = *(_QWORD *)(v55 + 24);
        if (v65 >= v64 >> 1)
        {
          v67 = sub_23F78F598(v64);
          sub_23F7D24D0(v67, v65 + 1);
          v55 = a20;
        }
        *(_QWORD *)(v55 + 16) = v65 + 1;
        v66 = v55 + 16 * v65;
        *(_QWORD *)(v66 + 32) = v59;
        *(_QWORD *)(v66 + 40) = v61;
        v57 += v95;
        --v54;
      }
      while (v54);
      swift_bridgeObjectRelease();
    }
    MEMORY[0x242674058](v55, MEMORY[0x24BEE0D00]);
    v80 = sub_23F717D54();
    v33[8] = sub_23F7D2E98(v80, v81, &a19);
    sub_23FB2F680();
    sub_23F756640();
    sub_23F7B0980();
    sub_23F7B0B48(&dword_23F68F000, v93, v91, "Allowed tools: %s either set through user default or ToolBoxAllowList.plist", v92);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  sub_23F7B0980();

  v79 = sub_23F6B63F4();
  v82(v79);
  sub_23F7D1F2C();
  sub_23F77DCD4();
  sub_23F77DA7C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7D282C();
  return v84(v83, v84, v85, v86, v87, v88, v89, v90, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_23F7BECBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7D3034();
  sub_23F785624();
  v2 = *(_QWORD *)(v1 + 144);
  sub_23F7D271C();
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc();
  sub_23F7D21CC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F7D20F4();
}

uint64_t sub_23F7BED20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  void (*v62)(uint64_t);
  uint64_t v63;

  sub_23F7D2B7C();
  a29 = v31;
  a30 = v32;
  a28 = v30;
  sub_23F7D2168();
  sub_23F7B0C8C();
  v33 = sub_23F7D2128();
  v34 = sub_23FB2F5E4();
  if (os_log_type_enabled(v33, v34))
  {
    v60 = v34;
    v35 = *(_QWORD *)(v30 + 160);
    v36 = (uint8_t *)sub_23F693DF4();
    a18 = sub_23F693DF4();
    v61 = v36;
    *(_DWORD *)v36 = 136315138;
    sub_23F6B5994();
    sub_23F7D1F2C();
    v37 = *(_QWORD *)(v35 + 16);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = MEMORY[0x24BEE4AF8];
    if (v38)
    {
      v59 = v33;
      v40 = *(_QWORD *)(v30 + 96);
      a19 = MEMORY[0x24BEE4AF8];
      sub_23F6B5508();
      sub_23F7D2F6C(0, v38);
      v41 = v37 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
      v42 = v40;
      v62 = *(void (**)(uint64_t))(v40 + 16);
      v63 = *(_QWORD *)(v40 + 72);
      do
      {
        v43 = *(_QWORD *)(v30 + 104);
        v44 = sub_23F77E19C();
        v62(v44);
        v45 = sub_23FB2E8A0();
        v47 = v46;
        sub_23F6B56E0(v43, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
        v39 = a19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F7D24D0(0, *(_QWORD *)(v39 + 16) + 1);
          v39 = a19;
        }
        v49 = *(_QWORD *)(v39 + 16);
        v48 = *(_QWORD *)(v39 + 24);
        if (v49 >= v48 >> 1)
        {
          v51 = sub_23F78F598(v48);
          sub_23F7D24D0(v51, v49 + 1);
          v39 = a19;
        }
        *(_QWORD *)(v39 + 16) = v49 + 1;
        v50 = v39 + 16 * v49;
        *(_QWORD *)(v50 + 32) = v45;
        *(_QWORD *)(v50 + 40) = v47;
        v41 += v63;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease();
      v33 = v59;
    }
    MEMORY[0x242674058](v39, MEMORY[0x24BEE0D00]);
    v53 = sub_23F717D54();
    *(_QWORD *)(v30 + 64) = sub_23F7D2E98(v53, v54, &a18);
    sub_23FB2F680();
    sub_23F756640();
    sub_23F7B0980();
    sub_23F7B0B48(&dword_23F68F000, v33, v60, "Allowed tools: %s either set through user default or ToolBoxAllowList.plist", v61);
    sub_23F7B0B40();
    sub_23F693DD0();
  }
  sub_23F7B0980();

  v52 = sub_23F6B6190();
  v55(v52);
  v56 = *(_QWORD *)(v30 + 160);
  sub_23F7D1F2C();
  v57 = *(_QWORD *)(v56 + 16);
  sub_23F77DCD4();
  sub_23F77DA7C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  return sub_23F7D1FEC(v57, *(uint64_t (**)(void))(v30 + 8));
}

uint64_t sub_23F7BEFE0()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  sub_23F6F5268();
  sub_23F6F5224();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7BF034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  sub_23F83A984();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  sub_23F83A9F0(v4);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 16) = v4 + 1;
  v6 = sub_23FB2E8D0();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v4, a1, v6);
  return swift_endAccess();
}

void sub_23F7BF0E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  void (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  void (*v41)(_QWORD, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  BOOL v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  char v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  uint64_t v95;
  void (*v96)(_QWORD, _QWORD, _QWORD);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  sub_23F6B5220();
  v99 = v2;
  v6 = v5;
  v7 = sub_23F7B0CF8();
  v100 = *(_QWORD *)(v7 - 8);
  v101 = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693E0C();
  v98 = v9;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  v97 = (char *)&v88 - v11;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6D3D14();
  v96 = v13;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B6580();
  v95 = v15;
  sub_23F6916B8(&qword_256EAA6C0);
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B51D0();
  v93 = *(void (**)(_QWORD))(sub_23FB2E930() - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B631C();
  v20 = v18 - v19;
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B5F6C();
  v22 = v1[15];
  v91 = v1[16];
  v92 = v22;
  v89 = v1;
  v90 = sub_23F6ADC98(v1 + 12, v22);
  sub_23FB2E90C();
  swift_getKeyPath();
  v23 = sub_23F7D2670();
  *(_QWORD *)(v23 + 16) = v6;
  *v4 = v23;
  sub_23F7D25B0(*MEMORY[0x24BEB8EF8], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
  sub_23F6D3458(&qword_256EAA6C8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9200], MEMORY[0x24BEB91F8]);
  sub_23F7CE784();
  v94 = v6;
  swift_bridgeObjectRetain();
  sub_23F7D260C();
  sub_23FB2EA98();
  swift_release();
  v24 = sub_23F6B6224();
  v25(v24);
  sub_23F77E234(v20);
  v26 = v99;
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 64))(v3, v92);
  v28 = v26;
  if (v26)
  {
    sub_23F77E234(v3);
LABEL_28:
    sub_23F6B5100();
    return;
  }
  v29 = v27;
  sub_23F77E234(v3);
  v30 = v101;
  v31 = sub_23FB2F050();
  v32 = *(_QWORD *)(v29 + 16);
  if (v32)
  {
    sub_23F78F3B0();
    v34 = v29 + v33;
    v36 = *(_QWORD *)(v35 + 72);
    v37 = *(void (**)(_QWORD))(v35 + 16);
    v92 = 0;
    v93 = v37;
    v91 = v29;
    sub_23F77E600();
    v38 = v95;
    v39 = v96;
    while (1)
    {
      v99 = v32;
      v40 = sub_23F6B68A8();
      v41 = (void (*)(_QWORD, uint64_t, uint64_t))v93;
      v93(v40);
      v42 = sub_23FB2E8A0();
      v44 = v43;
      v41(v39, v38, v30);
      swift_isUniquelyReferenced_nonNull_native();
      sub_23F78C6DC();
      sub_23F7D2DA0();
      if (v47)
        break;
      v48 = v45;
      v49 = v46;
      sub_23F6916B8(&qword_256EAA718);
      if ((sub_23FB2F914() & 1) != 0)
      {
        v50 = sub_23F78C6DC();
        if ((v49 & 1) != (v51 & 1))
          goto LABEL_33;
        v48 = v50;
      }
      if ((v49 & 1) != 0)
      {
        v52 = *(_QWORD *)(v31 + 56) + v48 * v36;
        v53 = v100;
        v30 = v101;
        v39 = v96;
        sub_23F75E710(v52, (uint64_t)v96, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 40));
      }
      else
      {
        sub_23F7D2B98(v31 + 8 * (v48 >> 6));
        v55 = (uint64_t *)(v54 + 16 * v48);
        *v55 = v42;
        v55[1] = v44;
        v56 = *(_QWORD *)(v31 + 56) + v48 * v36;
        v53 = v100;
        v30 = v101;
        v39 = v96;
        sub_23F75E710(v56, (uint64_t)v96, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 32));
        v57 = *(_QWORD *)(v31 + 16);
        v47 = __OFADD__(v57, 1);
        v58 = v57 + 1;
        if (v47)
          goto LABEL_31;
        *(_QWORD *)(v31 + 16) = v58;
        sub_23F77E600();
      }
      sub_23F6B6A48();
      swift_bridgeObjectRelease();
      v38 = v95;
      sub_23F6B51EC(v95, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8));
      v34 += v36;
      v32 = v99 - 1;
      if (v99 == 1)
      {
        sub_23F6B6A48();
        v28 = v92;
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    v53 = v100;
LABEL_16:
    sub_23F6B6A48();
    sub_23F77E1FC();
    sub_23F6B6254();
    sub_23F7B2CFC();
    v61 = (uint64_t)v97;
    v60 = v98;
    if (!*(_QWORD *)(v59 + 16))
    {
LABEL_27:
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    v92 = v28;
    sub_23F78F3B0();
    v65 = v63 + v64;
    v66 = *(_QWORD *)(v53 + 72);
    v67 = *(void (**)(_QWORD, _QWORD, _QWORD))(v53 + 16);
    v95 = v63;
    v96 = v67;
    while (1)
    {
      v99 = v62;
      v68 = v61;
      v69 = v61;
      v70 = v96;
      v96(v68, v65, v30);
      v71 = sub_23FB2E8A0();
      v73 = v72;
      v70(v60, v69, v30);
      swift_isUniquelyReferenced_nonNull_native();
      sub_23F78C6DC();
      sub_23F7D2DA0();
      if (v47)
        break;
      v76 = v74;
      v77 = v75;
      sub_23F6916B8(&qword_256EAA718);
      v78 = sub_23FB2F914();
      v61 = (uint64_t)v97;
      if ((v78 & 1) != 0)
      {
        v79 = sub_23F78C6DC();
        if ((v77 & 1) != (v80 & 1))
          goto LABEL_33;
        v76 = v79;
      }
      if ((v77 & 1) != 0)
      {
        v81 = *(_QWORD *)(v31 + 56) + v76 * v66;
        v82 = v100;
        v30 = v101;
        v60 = v98;
        sub_23F75E710(v81, v98, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 40));
      }
      else
      {
        sub_23F7D2B98(v31 + 8 * (v76 >> 6));
        v84 = (uint64_t *)(v83 + 16 * v76);
        *v84 = v71;
        v84[1] = v73;
        v85 = *(_QWORD *)(v31 + 56) + v76 * v66;
        v82 = v100;
        v30 = v101;
        v60 = v98;
        sub_23F75E710(v85, v98, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 32));
        v86 = *(_QWORD *)(v31 + 16);
        v47 = __OFADD__(v86, 1);
        v87 = v86 + 1;
        if (v47)
          goto LABEL_32;
        *(_QWORD *)(v31 + 16) = v87;
        sub_23F77E1FC();
      }
      sub_23F6B6E44();
      swift_bridgeObjectRelease();
      sub_23F6B51EC(v61, *(uint64_t (**)(uint64_t, uint64_t))(v82 + 8));
      v65 += v66;
      v62 = v99 - 1;
      if (v99 == 1)
        goto LABEL_27;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  sub_23FB2FBD8();
  __break(1u);
}

uint64_t sub_23F7BF68C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_23F6916B8(&qword_256EAA6C0);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_23FB2E924();
}

uint64_t sub_23F7BF70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = sub_23F7D2514();
  v6[8] = v7;
  v6[9] = *(_QWORD *)(v7 - 8);
  v6[10] = sub_23F79514C();
  v6[11] = sub_23F795160();
  v6[12] = sub_23F795160();
  v8 = sub_23F7D2504();
  v6[13] = v8;
  v6[14] = *(_QWORD *)(v8 - 8);
  v6[15] = sub_23F750AE4();
  sub_23F7D252C();
  v6[16] = sub_23F750AE4();
  v9 = sub_23F7D2524();
  v6[17] = v9;
  v6[18] = *(_QWORD *)(v9 - 8);
  v6[19] = sub_23F79514C();
  v6[20] = sub_23F795160();
  v6[21] = sub_23F795160();
  v6[22] = sub_23F795160();
  v6[23] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7BF7C8()
{
  uint64_t *v0;
  NSObject *v1;
  uint8_t *v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;

  sub_23F7D2B7C();
  v1 = v0[23];
  v0[24] = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_23F7D2B74();
  sub_23F7D2774();
  sub_23FB2E78C();
  sub_23F7D2E4C();
  if ((sub_23F7D25C4() & 1) != 0)
  {
    v2 = (uint8_t *)sub_23F693DF4();
    sub_23F7D1D84(v2);
    sub_23F7D20D4();
    sub_23F7D1CE4(&dword_23F68F000, v1, v3, v4, "ToolEmbeddingsDatabase:searchToolsStage1", "", v2);
    sub_23F693DD0();
  }
  v5 = v0[18];
  v6 = v0[6];

  v7 = sub_23F6B68CC();
  v8(v7);
  sub_23F7D250C();
  sub_23F6BD144();
  v0[25] = sub_23F7D1CEC();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v0[26] = (uint64_t)v9;
  sub_23F7D21CC(v9);
  if (v6)
  {
    v10 = v0[6];
    v39 = v0[5];
    sub_23F6916B8(&qword_256EA7900);
    sub_23F6B5AC8();
    sub_23FB2C608();
    sub_23F7D1F40();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_23FB47010;
    sub_23F6B6548();
    sub_23F6B90D8();
    sub_23FB2C668();
    sub_23F6916B8(&qword_256EA6260);
    v11 = sub_23F6916B8(&qword_256EA28F8);
    sub_23F6BC570();
    v14 = v13 & ~v12;
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_23FB47020;
    v16 = v15 + v14;
    v17 = (uint64_t *)(v15 + v14 + *(int *)(v11 + 48));
    v18 = *MEMORY[0x24BEBFDD8];
    v19 = sub_23F7D2ABC();
    v20 = *(void (**)(void))(*(_QWORD *)(v19 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v20)(v16, v18, v19);
    *v17 = v39;
    v17[1] = v10;
    v21 = *MEMORY[0x24BEBFE48];
    v22 = sub_23F7D270C();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v17, v21, v22);
    sub_23F77E598((uint64_t)v17, 0);
    v20();
    v23 = "AssetUtils" + 8;
    v24 = sub_23F77E654();
    sub_23F77E598(v24, v25);
    sub_23FB2C5FC();
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_23FB47010;
    sub_23F7B8680(v26 + v14, (_QWORD *)(v26 + v14 + *(int *)(v11 + 48)), 3);
  }
  else
  {
    v23 = "ls";
  }
  v27 = v0[15];
  v28 = v0[14];
  sub_23F6916B8(&qword_256EA7900);
  sub_23F7D2350();
  sub_23F7D2478();
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = *((_OWORD *)v23 + 1);
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  sub_23F759774(v27, *MEMORY[0x24BEBFE30], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 104));
  sub_23F77E584();
  sub_23FB2C65C();
  sub_23F6916B8(&qword_256EA6260);
  v30 = sub_23F6916B8(&qword_256EA28F8);
  v31 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72);
  sub_23F6BC570();
  v34 = v33 & ~v32;
  v35 = sub_23F7D267C();
  *(_OWORD *)(v35 + 16) = xmmword_23FB47020;
  v36 = v35 + v34;
  sub_23F7B8680(v36, (_QWORD *)(v36 + *(int *)(v30 + 48)), 1);
  sub_23F7D2C8C(v36 + v31, *(int *)(v30 + 48));
  sub_23F6B9D04();
  sub_23FB2C5FC();
  sub_23F6B9CE8();
  v0[27] = v29;
  v37 = (_QWORD *)swift_task_alloc();
  v0[28] = (uint64_t)v37;
  *v37 = v0;
  v37[1] = sub_23F7BFBC8;
  return sub_23F7C1780(v0[2], v0[3], v0[4], v29);
}

uint64_t sub_23F7BFBC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)*v2;
  v4 = v7;
  sub_23F7B0DD0(&v7);
  v4[29] = v5;
  v4[30] = v1;
  swift_task_dealloc();
  sub_23F6B5AB0();
  if (!v1)
    v4[31] = a1;
  sub_23F6F522C();
  return swift_task_switch();
}

uint64_t sub_23F7BFC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  os_signpost_type_t v15;
  os_signpost_id_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint8_t *v20;
  os_signpost_type_t v21;
  os_signpost_id_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23F7D2400();
  v1 = *(_QWORD *)(v0 + 240);
  v2 = sub_23F72F894(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 248));
  v6 = sub_23F6B8C70(v2, v3, v4, v5);
  sub_23F7BF0E8();
  if (v1)
  {
    sub_23F756640();
    sub_23F6B644C();
    v8 = sub_23FB2E78C();
    sub_23FB2E7B0();
    sub_23FB2F614();
    if ((sub_23F7D2F18() & 1) != 0)
    {
      sub_23F7B0BE8();
      sub_23FB2E7D4();
      sub_23F77DA7C();
      if (sub_23F7D2A48() == *MEMORY[0x24BEE7810])
      {
        v9 = "[Error] Interval already ended";
      }
      else
      {
        sub_23F7D1C98(*(_QWORD *)(v0 + 72));
        v9 = "";
      }
      v14 = (uint8_t *)sub_23F693DF4();
      *(_WORD *)v14 = 0;
      sub_23FB2E768();
      sub_23F7D20C8();
      sub_23F7D1CE4(&dword_23F68F000, v8, v15, v16, "ToolEmbeddingsDatabase:searchToolsStage1", v9, v14);
      sub_23F693DD0();
    }
    v17 = *(void (**)(uint64_t))(v0 + 208);

    v18 = sub_23F6B69FC();
    v17(v18);
    sub_23F7D24C8();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    sub_23F6F5280();
    sub_23F7B0B8C();
    sub_23F7D20B8();
    sub_23F7D1F88();
    sub_23F7B0E90();
    sub_23F7B0E34();
    sub_23F7D1F90();
    return sub_23F7D1C70(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v10 = v7;
    swift_bridgeObjectRetain();
    v11 = sub_23F7B1ED4(v6, v10);
    sub_23F717D54();
    sub_23F756640();
    sub_23F6B644C();
    v12 = sub_23FB2E78C();
    sub_23FB2E7B0();
    sub_23FB2F614();
    if ((sub_23F7D2DD4() & 1) != 0)
    {
      sub_23F7B0BE8();
      sub_23FB2E7D4();
      sub_23F77DA7C();
      if (sub_23F7D2A48() == *MEMORY[0x24BEE7810])
      {
        v13 = "[Error] Interval already ended";
      }
      else
      {
        sub_23F7D1C98(*(_QWORD *)(v0 + 72));
        v13 = "";
      }
      v20 = (uint8_t *)sub_23F693DF4();
      sub_23F7D1D84(v20);
      sub_23F7D20C8();
      sub_23F7D1CE4(&dword_23F68F000, v12, v21, v22, "ToolEmbeddingsDatabase:searchToolsStage1", v13, v20);
      sub_23F693DD0();
    }
    v26 = v11;
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 136);

    v23(v24, v25);
    sub_23F77DA7C();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    sub_23F6F5268();
    sub_23F7D1F88();
    sub_23F7B0E90();
    sub_23F7B0E34();
    sub_23F7D1F90();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v26);
  }
}

uint64_t sub_23F7BFF60()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  sub_23F7D2400();
  v1 = sub_23F7D1F98();
  sub_23F7D21C0();
  sub_23FB2F614();
  if ((sub_23F7D2F18() & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)(v0 + 80);
    sub_23F7B0BE8();
    sub_23F7D3024();
    sub_23F77DA7C();
    if (sub_23F6B563C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88)) == *MEMORY[0x24BEE7810])
    {
      v4 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 72));
      v4 = "";
    }
    v5 = (uint8_t *)sub_23F693DF4();
    *(_WORD *)v5 = 0;
    sub_23FB2E768();
    sub_23F7D20C8();
    sub_23F7D1CE4(&dword_23F68F000, v1, v6, v7, "ToolEmbeddingsDatabase:searchToolsStage1", v4, v5);
    sub_23F693DD0();
  }
  v8 = *(void (**)(uint64_t))(v0 + 208);

  v9 = sub_23F7D2958();
  v8(v9);
  sub_23F7D24C8();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F7D1F88();
  sub_23F6F5224();
  sub_23F7B0E34();
  sub_23F7D1F90();
  sub_23F7D20EC();
  sub_23F7D2130();
  return sub_23F7D1C70(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7C00D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23F7D217C(a1, a2, a3);
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = sub_23F79514C();
  v3[11] = sub_23F795160();
  v3[12] = sub_23F795160();
  v5 = sub_23F693F0C();
  v3[13] = v5;
  v3[14] = *(_QWORD *)(v5 - 8);
  v3[15] = sub_23F79514C();
  v3[16] = sub_23F795160();
  v6 = sub_23F7D2504();
  v3[17] = v6;
  v3[18] = *(_QWORD *)(v6 - 8);
  v3[19] = sub_23F750AE4();
  sub_23F7D252C();
  v3[20] = sub_23F750AE4();
  v7 = sub_23F6916B8(&qword_256EA28F8);
  v3[21] = v7;
  v3[22] = *(_QWORD *)(v7 - 8);
  v3[23] = sub_23F750AE4();
  v8 = sub_23F7D2524();
  v3[24] = v8;
  v3[25] = *(_QWORD *)(v8 - 8);
  v3[26] = sub_23F79514C();
  v3[27] = sub_23F795160();
  v3[28] = sub_23F795160();
  v3[29] = sub_23F795160();
  v3[30] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7C01C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _WORD *v4;
  os_signpost_type_t v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  os_signpost_type_t v43;
  os_signpost_id_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_23F7D2B7C();
  v3 = *(NSObject **)(v0 + 240);
  *(_QWORD *)(v0 + 248) = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_23F7D29CC();
  sub_23F7D2774();
  sub_23FB2E78C();
  sub_23F7D2E4C();
  if ((sub_23F7D25C4() & 1) != 0)
  {
    v4 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v4);
    sub_23F7D20C8();
    sub_23F7D1C8C(&dword_23F68F000, v3, v5, v6, "ToolEmbeddingsDatabase:searchToolStage2", "");
    sub_23F693DD0();
  }
  sub_23F7D2A18();
  sub_23F7D2744();
  sub_23F7D250C();
  sub_23F6BD144();
  v7 = sub_23F7D1CEC();
  sub_23F7D2220(v7);
  v8 = *(_QWORD *)(v1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 168);
    v10 = *(uint64_t **)(v0 + 48);
    v57 = MEMORY[0x24BEE4AF8];
    sub_23F7D2A38();
    v54 = *MEMORY[0x24BEBFDD8];
    v52 = *MEMORY[0x24BEBFE48];
    sub_23F7D2ABC();
    sub_23F7D28F8();
    do
    {
      v17 = *(_QWORD *)(v0 + 184);
      v18 = *(v10 - 1);
      v19 = *v10;
      v20 = (_QWORD *)(v17 + *(int *)(v56 + 48));
      sub_23F7D2F48(v17, v54, v11, v12, v13, v14, v15, v16, v45, v46, v49, v50, v51);
      *v20 = v18;
      v20[1] = v19;
      sub_23F7D270C();
      v21 = sub_23F7D2E18();
      v22(v21, v52, v2);
      sub_23F7D26EC();
      v23 = *(_QWORD *)(v57 + 16);
      v24 = *(_QWORD *)(v57 + 24);
      sub_23F77E584();
      if (v23 >= v24 >> 1)
        sub_23F7D2F04();
      v25 = *(_QWORD *)(v0 + 184);
      *(_QWORD *)(v57 + 16) = v23 + 1;
      v26 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v2 = *(_QWORD *)(v9 + 72);
      sub_23F6B4EC0(v25, v57 + v26 + v2 * v23, &qword_256EA28F8);
      v10 += 2;
      --v8;
    }
    while (v8);
    v27 = *(_QWORD **)(v0 + 152);
    v47 = *(_QWORD *)(v0 + 144);
    v55 = *(_QWORD *)(v0 + 136);
    sub_23F6916B8(&qword_256EA7900);
    sub_23F7D2350();
    v53 = sub_23F7D223C();
    *(_QWORD *)(v0 + 272) = v53;
    *(_OWORD *)(v53 + 16) = xmmword_23FB47020;
    *v27 = 0;
    v27[1] = 0;
    v48 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v47 + 104);
    v48(v27, *MEMORY[0x24BEBFE28], v55);
    sub_23F6B5508();
    sub_23F7D25BC();
    sub_23F70DC34();
    sub_23FB2C5FC();
    *v27 = 0;
    *((_BYTE *)v27 + 8) = 1;
    v48(v27, *MEMORY[0x24BEBFE30], v55);
    sub_23F77DCD4();
    sub_23F7D25BC();
    sub_23F6916B8(&qword_256EA6260);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_23FB47020;
    v29 = v28 + v26;
    sub_23F7B8680(v28 + v26, (_QWORD *)(v28 + v26 + *(int *)(v56 + 48)), 2);
    sub_23F7B8680(v29 + v2, (_QWORD *)(v29 + v2 + *(int *)(v56 + 48)), 1);
    sub_23F7D2D5C();
    sub_23FB2C5FC();
    v30 = (_QWORD *)swift_task_alloc();
    v31 = sub_23F7D2728(v30, (uint64_t)sub_23F7C0648);
    return sub_23F7C1354(v31, v32, v53);
  }
  else
  {
    sub_23F7B0B84();
    sub_23FB2E7E0();
    v34 = sub_23F7D297C();
    if (sub_23F75E6C4(v34))
    {
      v35 = (_WORD *)sub_23F693DF4();
      sub_23F7D2D44(v35);
      sub_23F7D25CC(&dword_23F68F000, v36, v37, "ToolBox returning zero tools as it received empty list bundle ids");
      sub_23F693DD0();
    }
    sub_23F7D2A08();
    sub_23F7D27F0();
    v38 = sub_23F7D29CC();
    sub_23F7D21C0();
    sub_23FB2F614();
    if ((sub_23F7D26CC() & 1) != 0)
    {
      v39 = *(_QWORD *)(v0 + 88);
      v40 = *(_QWORD *)(v0 + 72);
      sub_23F7D2714();
      sub_23F7D2D28();
      sub_23F713F08();
      if (sub_23F6B563C(v39, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 88)) == *MEMORY[0x24BEE7810])
      {
        v41 = "[Error] Interval already ended";
      }
      else
      {
        sub_23F7D1C98(*(_QWORD *)(v0 + 72));
        v41 = "";
      }
      v42 = (uint8_t *)sub_23F693DF4();
      sub_23F7D1D84(v42);
      sub_23F7D20C8();
      sub_23F7D1CE4(&dword_23F68F000, v38, v43, v44, "ToolEmbeddingsDatabase:searchToolStage2", v41, v42);
      sub_23F693DD0();
    }
    sub_23F7D2EF0();
    sub_23F7D2F30();
    sub_23F713F08();
    sub_23F7D21F4();
    swift_task_dealloc();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    sub_23F7B0B8C();
    sub_23F7D24C0();
    sub_23F7D2668();
    sub_23F7D2660();
    return sub_23F7D1FEC(MEMORY[0x24BEE4AF8], *(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_23F7C0648(uint64_t a1)
{
  sub_23F7D2058(a1);
  sub_23F693E04();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7C0688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  NSObject *v44;
  uint64_t v45;
  const char *v46;
  _WORD *v47;
  os_signpost_type_t v48;
  os_signpost_id_t v49;

  sub_23F7B0CC4();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  sub_23F7D2168();
  sub_23F6B91E8();
  sub_23F6B91E8();
  v28 = sub_23F7D2128();
  v29 = sub_23FB2F5E4();
  if (sub_23F75E6C4(v29))
  {
    v30 = sub_23F693DF4();
    a13 = sub_23F693DF4();
    v31 = sub_23F7D2D8C(4.8151e-34);
    v32 = sub_23F77E584();
    MEMORY[0x242674058](v32, v31);
    v33 = sub_23F756640();
    v37 = sub_23F7D2B34(v33, v34, v35, v36);
    sub_23F7D2108(v37);
    sub_23F693E04();
    sub_23F6B6740();
    *(_WORD *)(v30 + 12) = 2080;
    v38 = sub_23F77E600();
    v39 = MEMORY[0x242674058](v38, MEMORY[0x24BEE0D00]);
    sub_23F6B6A48();
    v41 = sub_23F7D24B8(v39, v40, &a13);
    sub_23F7D2498(v41);
    sub_23F717D54();
    sub_23F6B6740();
    sub_23F693E48(&dword_23F68F000, v28, v25, "Top tool matches: %s for bundleIDS: %s", (uint8_t *)v30);
    sub_23F7D26D8();
    sub_23F693DD0();
  }
  sub_23F6B6740();
  sub_23F6B6740();

  v42 = sub_23F6B63F4();
  v43(v42);
  v44 = sub_23F7D1F98();
  sub_23F7D1DE4();
  sub_23FB2F614();
  if ((sub_23F7D25C4() & 1) != 0)
  {
    v45 = *(_QWORD *)(v24 + 72);
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1DF0(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 88)) == *MEMORY[0x24BEE7810])
    {
      v46 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v24 + 72));
      v46 = "";
    }
    v47 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v47);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v44, v48, v49, "ToolEmbeddingsDatabase:searchToolStage2", v46);
    sub_23F693DD0();
  }
  sub_23F7D2910();
  sub_23F7D2D68();
  sub_23F77DA7C();
  sub_23F7D1EC8();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F52B0();
  sub_23F7D20B8();
  sub_23F7D1F88();
  sub_23F7B0E90();
  return sub_23F7B0880(a12, *(uint64_t (**)(void))(v24 + 8));
}

uint64_t sub_23F7C090C()
{
  uint64_t v0;
  NSObject *v1;
  const char *v2;
  _WORD *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;

  sub_23F7D2400();
  sub_23F7D1F98();
  sub_23F7D1D1C();
  sub_23FB2F614();
  if ((sub_23F7D1F20() & 1) != 0)
  {
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1D2C() == *MEMORY[0x24BEE7810])
    {
      v2 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 72));
      v2 = "";
    }
    v3 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v3);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v1, v4, v5, "ToolEmbeddingsDatabase:searchToolStage2", v2);
    sub_23F693DD0();
  }
  sub_23F7D1D3C();
  sub_23F7D2BD8();
  sub_23F7D2604();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F5224();
  sub_23F7D20B8();
  sub_23F7D1F88();
  sub_23F7B0E90();
  sub_23F7B0E34();
  sub_23F7D1F90();
  sub_23F7D20EC();
  sub_23F7D2130();
  return sub_23F7D1C70(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7C0A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23F7D217C(a1, a2, a3);
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = sub_23F79514C();
  v3[11] = sub_23F795160();
  v3[12] = sub_23F795160();
  v5 = sub_23F693F0C();
  v3[13] = v5;
  v3[14] = *(_QWORD *)(v5 - 8);
  v3[15] = sub_23F79514C();
  v3[16] = sub_23F795160();
  v6 = sub_23F7D2504();
  v3[17] = v6;
  v3[18] = *(_QWORD *)(v6 - 8);
  v3[19] = sub_23F750AE4();
  sub_23F7D252C();
  v3[20] = sub_23F750AE4();
  v7 = sub_23F6916B8(&qword_256EA28F8);
  v3[21] = v7;
  v3[22] = *(_QWORD *)(v7 - 8);
  v3[23] = sub_23F750AE4();
  v8 = sub_23F7D2524();
  v3[24] = v8;
  v3[25] = *(_QWORD *)(v8 - 8);
  v3[26] = sub_23F79514C();
  v3[27] = sub_23F795160();
  v3[28] = sub_23F795160();
  v3[29] = sub_23F795160();
  v3[30] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7C0B08()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  _WORD *v4;
  os_signpost_type_t v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, unint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  os_signpost_type_t v42;
  os_signpost_id_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v0[30];
  v0[31] = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_23F7D29CC();
  sub_23F7D2774();
  sub_23FB2E78C();
  sub_23F7D2E4C();
  if ((sub_23F7D25C4() & 1) != 0)
  {
    v4 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v4);
    sub_23F7D20C8();
    sub_23F7D1C8C(&dword_23F68F000, v3, v5, v6, "ToolEmbeddingsDatabase:searchToolsStage3", "");
    sub_23F693DD0();
  }
  sub_23F7D2A18();
  sub_23F7D2744();
  sub_23F7D250C();
  sub_23F6BD144();
  v7 = sub_23F7D1CEC();
  sub_23F7D2220(v7);
  v8 = *(_QWORD *)(v1 + 16);
  if (!v8)
  {
    sub_23F7B0B84();
    sub_23FB2E7E0();
    v33 = sub_23F7D297C();
    if (sub_23F75E6C4(v33))
    {
      v34 = (_WORD *)sub_23F693DF4();
      sub_23F7D2D44(v34);
      sub_23F7D25CC(&dword_23F68F000, v35, v36, "ToolBox returning zero tools as it received empty list tool ids");
      sub_23F693DD0();
    }
    sub_23F7D2A08();
    sub_23F7D27F0();
    v37 = sub_23F7D29CC();
    sub_23F7D21C0();
    sub_23FB2F614();
    if ((sub_23F7D26CC() & 1) != 0)
    {
      v38 = v0[11];
      v39 = v0[9];
      sub_23F7D2714();
      sub_23F7D2D28();
      sub_23F713F08();
      if (sub_23F6B563C(v38, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 88)) == *MEMORY[0x24BEE7810])
      {
        v40 = "[Error] Interval already ended";
      }
      else
      {
        sub_23F7D1C98(v0[9]);
        v40 = "";
      }
      v41 = (uint8_t *)sub_23F693DF4();
      sub_23F7D1D84(v41);
      sub_23F7D20C8();
      sub_23F7D1CE4(&dword_23F68F000, v37, v42, v43, "ToolEmbeddingsDatabase:searchToolsStage3", v40, v41);
      sub_23F693DD0();
    }
    sub_23F7D2EF0();
    sub_23F7D2F30();
    sub_23F713F08();
    sub_23F7D21F4();
    swift_task_dealloc();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    sub_23F7B0B8C();
    sub_23F7D20EC();
    sub_23F7D2130();
    sub_23F7D24C0();
    sub_23F7D2258();
    __asm { BR              X1 }
  }
  v9 = v0[22];
  v56 = v0[21];
  v10 = (uint64_t *)v0[6];
  v57 = MEMORY[0x24BEE4AF8];
  sub_23F7D2A38();
  v54 = *MEMORY[0x24BEBFDD8];
  v52 = *MEMORY[0x24BEBFE48];
  sub_23F7D2ABC();
  sub_23F7D28F8();
  do
  {
    v17 = v0[23];
    v18 = *(v10 - 1);
    v19 = *v10;
    v20 = (_QWORD *)(v17 + *(int *)(v56 + 48));
    sub_23F7D2F48(v17, v54, v11, v12, v13, v14, v15, v16, v45, v46, v47, v50, v51);
    *v20 = v18;
    v20[1] = v19;
    sub_23F7D270C();
    v21 = sub_23F7D2E18();
    v22(v21, v52, v2);
    sub_23F7D26EC();
    v23 = *(_QWORD *)(v57 + 16);
    v24 = *(_QWORD *)(v57 + 24);
    sub_23F77E584();
    if (v23 >= v24 >> 1)
      sub_23F7D2F04();
    v25 = v0[23];
    *(_QWORD *)(v57 + 16) = v23 + 1;
    v2 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    sub_23F6B4EC0(v25, v57 + v2 + *(_QWORD *)(v9 + 72) * v23, &qword_256EA28F8);
    v10 += 2;
    --v8;
  }
  while (v8);
  v26 = (_QWORD *)v0[19];
  v48 = v0[18];
  v55 = v0[17];
  sub_23F6916B8(&qword_256EA7900);
  sub_23F7D2350();
  v53 = sub_23F7D223C();
  v0[34] = v53;
  *(_OWORD *)(v53 + 16) = xmmword_23FB47020;
  *v26 = 0;
  v26[1] = 0;
  v49 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104);
  v49(v26, *MEMORY[0x24BEBFE28], v55);
  sub_23F6B6254();
  sub_23F7D25BC();
  sub_23F6B5994();
  sub_23FB2C5FC();
  *v26 = 0;
  *((_BYTE *)v26 + 8) = 1;
  v49(v26, *MEMORY[0x24BEBFE30], v55);
  sub_23F77DCD4();
  sub_23F7D25BC();
  sub_23F6916B8(&qword_256EA6260);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_23FB47010;
  sub_23F7B8680(v27 + v2, (_QWORD *)(v27 + v2 + *(int *)(v56 + 48)), 4);
  sub_23F7B0E48();
  sub_23FB2C5FC();
  v28 = (_QWORD *)swift_task_alloc();
  sub_23F7D2728(v28, (uint64_t)sub_23F7C0F84);
  sub_23F7D2258();
  return sub_23F7C1354(v29, v30, v31);
}

uint64_t sub_23F7C0F84(uint64_t a1)
{
  sub_23F7D2058(a1);
  sub_23F693E04();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7C0FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  NSObject *v44;
  uint64_t v45;
  const char *v46;
  _WORD *v47;
  os_signpost_type_t v48;
  os_signpost_id_t v49;

  sub_23F7B0CC4();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  sub_23F7D2168();
  sub_23F6B91E8();
  sub_23F6B91E8();
  v28 = sub_23F7D2128();
  v29 = sub_23FB2F5E4();
  if (sub_23F75E6C4(v29))
  {
    v30 = sub_23F693DF4();
    a13 = sub_23F693DF4();
    v31 = sub_23F7D2D8C(4.8151e-34);
    v32 = sub_23F77E584();
    MEMORY[0x242674058](v32, v31);
    v33 = sub_23F756640();
    v37 = sub_23F7D2B34(v33, v34, v35, v36);
    sub_23F7D2108(v37);
    sub_23F693E04();
    sub_23F6B6740();
    *(_WORD *)(v30 + 12) = 2080;
    v38 = sub_23F77E600();
    v39 = MEMORY[0x242674058](v38, MEMORY[0x24BEE0D00]);
    sub_23F6B6A48();
    v41 = sub_23F7D24B8(v39, v40, &a13);
    sub_23F7D2498(v41);
    sub_23F717D54();
    sub_23F6B6740();
    sub_23F693E48(&dword_23F68F000, v28, v25, "Top tool matches: %s for toolIds: %s", (uint8_t *)v30);
    sub_23F7D26D8();
    sub_23F693DD0();
  }
  sub_23F6B6740();
  sub_23F6B6740();

  v42 = sub_23F6B63F4();
  v43(v42);
  v44 = sub_23F7D1F98();
  sub_23F7D1DE4();
  sub_23FB2F614();
  if ((sub_23F7D25C4() & 1) != 0)
  {
    v45 = *(_QWORD *)(v24 + 72);
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1DF0(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 88)) == *MEMORY[0x24BEE7810])
    {
      v46 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v24 + 72));
      v46 = "";
    }
    v47 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v47);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v44, v48, v49, "ToolEmbeddingsDatabase:searchToolsStage3", v46);
    sub_23F693DD0();
  }
  sub_23F7D2910();
  sub_23F7D2D68();
  sub_23F77DA7C();
  sub_23F7D1EC8();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F52B0();
  sub_23F7D20B8();
  sub_23F7D1F88();
  sub_23F7B0E90();
  return sub_23F7B0880(a12, *(uint64_t (**)(void))(v24 + 8));
}

uint64_t sub_23F7C1248()
{
  uint64_t v0;
  NSObject *v1;
  const char *v2;
  _WORD *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;

  sub_23F7D2400();
  sub_23F7D1F98();
  sub_23F7D1D1C();
  sub_23FB2F614();
  if ((sub_23F7D1F20() & 1) != 0)
  {
    sub_23F7B0BE8();
    sub_23F7D20C0();
    sub_23F77DA7C();
    if (sub_23F7D1D2C() == *MEMORY[0x24BEE7810])
    {
      v2 = "[Error] Interval already ended";
    }
    else
    {
      sub_23F7D1C98(*(_QWORD *)(v0 + 72));
      v2 = "";
    }
    v3 = (_WORD *)sub_23F693DF4();
    sub_23F7D1CA0(v3);
    sub_23F7D20D4();
    sub_23F7D1C8C(&dword_23F68F000, v1, v4, v5, "ToolEmbeddingsDatabase:searchToolsStage3", v2);
    sub_23F693DD0();
  }
  sub_23F7D1D3C();
  sub_23F7D2BD8();
  sub_23F7D2604();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F5224();
  sub_23F7D20B8();
  sub_23F7D1F88();
  sub_23F7B0E90();
  sub_23F7B0E34();
  sub_23F7D1F90();
  sub_23F7D20EC();
  sub_23F7D2130();
  return sub_23F7D1C70(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7C1354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  sub_23F6916B8(&qword_256EAA6F0);
  v4[16] = sub_23F79514C();
  v4[17] = sub_23F795160();
  v5 = type metadata accessor for ToolBoxToolSearchResult(0);
  v4[18] = v5;
  v4[19] = *(_QWORD *)(v5 - 8);
  v4[20] = sub_23F79514C();
  v4[21] = sub_23F795160();
  v4[22] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7C13D0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7D3034();
  v1 = sub_23FB2C56C();
  v2 = (_QWORD *)swift_task_alloc();
  v0[23] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23F7C1468;
  return sub_23F7C1780(v0[12], v0[13], v1, v0[14]);
}

uint64_t sub_23F7C1468()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23F7D3034();
  v2 = *v1;
  *(_QWORD *)(v2 + 192) = v3;
  *(_QWORD *)(v2 + 200) = v4;
  *(_QWORD *)(v2 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    return sub_23F7440BC(*(uint64_t (**)(void))(v2 + 8));
  }
  else
  {
    sub_23F6F522C();
    return sub_23F7D20F4();
  }
}

uint64_t sub_23F7C14F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  sub_23F7D23E4();
  v15 = v14[26];
  swift_bridgeObjectRetain();
  sub_23F7BF0E8();
  if (v15)
  {
    sub_23F6B6740();
    sub_23F693E04();
    sub_23F7D28B8();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7D2580();
    sub_23F7D209C();
    return v16(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    swift_bridgeObjectRetain();
    v25 = sub_23F7D2F98();
    v27 = sub_23F7B1ED4(v25, v26);
    sub_23F6B644C();
    sub_23F6B6740();
    sub_23F693E04();
    v28 = *(_QWORD *)(v27 + 16);
    if (v28)
    {
      a9 = v27;
      a10 = v14[19];
      v29 = v27 + 32;
      sub_23F6B54F8();
      v30 = MEMORY[0x24BEE4AF8];
      do
      {
        sub_23F7AE5F0(v29, (uint64_t)(v14 + 2));
        v31 = sub_23F7D2D5C();
        sub_23F7AE5F0(v31, v32);
        sub_23F6916B8(&qword_256EA7930);
        if (swift_dynamicCast())
        {
          v35 = v14[21];
          v36 = v14[16];
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v36, 0, 1, v14[18]);
          sub_23F77DC08(v36, v35);
          v37 = sub_23F77E19C();
          sub_23F77DC08(v37, v38);
          v39 = 0;
        }
        else
        {
          v40 = v14[16];
          v39 = 1;
          sub_23F6B5A8C(v40, v33, v34, v14[18]);
          sub_23F6B4F84(v40, &qword_256EAA6F0);
        }
        v42 = v14[17];
        v41 = v14[18];
        sub_23F77DD6C(v42, v39);
        _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)(v14 + 2));
        sub_23F6B5164(v42, 1, v41);
        if (v43)
        {
          sub_23F6B4F84(v14[17], &qword_256EAA6F0);
        }
        else
        {
          v44 = v14[22];
          v45 = v14[20];
          sub_23F77DC08(v14[17], v44);
          sub_23F77DC08(v44, v45);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_23F7D2EE4();
            v30 = v52;
          }
          v48 = *(_QWORD *)(v30 + 16);
          v47 = *(_QWORD *)(v30 + 24);
          if (v48 >= v47 >> 1)
          {
            sub_23F78F598(v47);
            sub_23F7D2EE4();
            v30 = v53;
          }
          *(_QWORD *)(v30 + 16) = v48 + 1;
          sub_23F78F3B0();
          sub_23F77DC08(v51, v30 + v49 + *(_QWORD *)(v50 + 72) * v48);
        }
        v29 += 40;
        --v28;
      }
      while (v28);
      sub_23F6B6740();
    }
    else
    {
      sub_23F693DFC();
    }
    swift_task_dealloc();
    sub_23F6F52B0();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7D209C();
    return v55(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_23F7C1780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_23F7B0D00();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = sub_23F79514C();
  v5[10] = sub_23F795160();
  v5[11] = sub_23F795160();
  v7 = type metadata accessor for ToolboxSearchOutput(0);
  v5[12] = v7;
  v5[13] = *(_QWORD *)(v7 - 8);
  v5[14] = sub_23F79514C();
  v5[15] = sub_23F795160();
  v5[16] = sub_23F795160();
  sub_23F6916B8(&qword_256EAA6B0);
  v5[17] = sub_23F750AE4();
  v5[18] = type metadata accessor for ToolboxDatabasePayload(0);
  v5[19] = sub_23F79514C();
  v5[20] = sub_23F795160();
  sub_23F6916B8(&qword_256EAA650);
  v5[21] = sub_23F750AE4();
  v8 = sub_23FB2C6B0();
  v5[22] = v8;
  v5[23] = *(_QWORD *)(v8 - 8);
  v5[24] = sub_23F750AE4();
  v9 = sub_23F693F0C();
  v5[25] = v9;
  v5[26] = *(_QWORD *)(v9 - 8);
  v5[27] = sub_23F79514C();
  v5[28] = sub_23F795160();
  v5[29] = sub_23F795160();
  v10 = sub_23FB2C638();
  v5[30] = v10;
  v5[31] = *(_QWORD *)(v10 - 8);
  v5[32] = sub_23F79514C();
  v5[33] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7C18C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int EnumCaseMultiPayload;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  void (*v94)(_QWORD);
  void (*v95)(uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208[4];

  sub_23F7D2BC0((_QWORD *)(*(_QWORD *)(v0 + 48) + 184));
  sub_23F7D21E4();
  LOBYTE(v208[0]) = v207;
  v1 = sub_23F6B69FC();
  sub_23F7B79CC(v1, v2, v3);
  v206 = MEMORY[0x24BEE4B08];
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 264);
  sub_23FB2C56C();
  sub_23FB2F3E0();
  sub_23F7D2CE0();
  sub_23F693E04();
  sub_23F6B6224();
  v5 = sub_23FB2C5A8();
  v6 = sub_23F6B6224();
  sub_23F6BC34C(v6, v7);
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
  {
    sub_23F78F3B0();
    v180 = v5;
    v10 = v5 + v9;
    v202 = *(_QWORD *)(v0 + 208);
    v200 = *(_QWORD *)(v0 + 184);
    v165 = *(_QWORD *)(v0 + 112);
    v168 = *(_QWORD *)(v0 + 128);
    v171 = *(_QWORD *)(v0 + 104);
    v174 = *(_QWORD *)(v0 + 152);
    v188 = *(_QWORD *)(v0 + 48);
    v196 = *(_QWORD *)(v11 + 72);
    v203 = v11;
    v204 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *((_QWORD *)&v12 + 1) = 2;
    v198 = xmmword_23FB47010;
    *(_QWORD *)&v12 = 134217984;
    v183 = v12;
    v201 = MEMORY[0x24BEE4AF8];
    v194 = *(_QWORD *)(v0 + 64);
    v195 = v0;
    v197 = v4;
    while (1)
    {
      v13 = *(_QWORD *)(v0 + 32);
      v204(*(_QWORD *)(v0 + 264), v10, *(_QWORD *)(v0 + 240));
      if (*(_QWORD *)(v201 + 16) >= v13)
      {
        (*(void (**)(_QWORD, _QWORD))(v203 + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
        sub_23F7D2E2C();
        swift_bridgeObjectRelease();
        goto LABEL_55;
      }
      v205 = v8;
      sub_23F6916B8(&qword_256EA2900);
      v14 = sub_23F6B56B0();
      *(_OWORD *)(v14 + 16) = v198;
      *(_QWORD *)(v14 + 32) = sub_23FB2C62C();
      v15 = sub_23FB2C5CC();
      sub_23F717D54();
      v16 = *(_QWORD *)(v15 + 16);
      if (v16 >= 2)
      {
        v18 = *(_QWORD *)(v0 + 256);
        v17 = *(_QWORD *)(v0 + 264);
        v19 = *(_QWORD *)(v0 + 240);
        sub_23FB2E378();
        v204(v18, v17, v19);
        v20 = sub_23FB2E7E0();
        v21 = sub_23FB2F5FC();
        v22 = os_log_type_enabled(v20, v21);
        v23 = *(_QWORD *)(v0 + 256);
        if (v22)
        {
          v24 = sub_23F693DF4();
          *(_DWORD *)v24 = v183;
          v25 = sub_23FB2C62C();
          sub_23F6B563C(v23, *(uint64_t (**)(uint64_t, uint64_t))(v203 + 8));
          *(_QWORD *)(v24 + 4) = v25;
          sub_23F7B0B48(&dword_23F68F000, v20, v21, "More than one tool was found for a %lld", (uint8_t *)v24);
          sub_23F693DD0();
        }
        sub_23F6B563C(*(_QWORD *)(v0 + 256), *(uint64_t (**)(uint64_t, uint64_t))(v203 + 8));
        v0 = v195;
        v26 = *(_QWORD *)(v195 + 232);

        sub_23F6B56E0(v26, *(uint64_t (**)(uint64_t, uint64_t))(v202 + 8));
        v16 = *(_QWORD *)(v15 + 16);
      }
      if (v16)
      {
        sub_23F78F3B0();
        (*(void (**)(void))(v200 + 16))();
        v27 = 0;
      }
      else
      {
        v27 = 1;
      }
      v28 = *(_QWORD *)(v0 + 176);
      sub_23F77DD6C(*(_QWORD *)(v0 + 168), v27);
      sub_23F756640();
      v29 = sub_23F77E654();
      sub_23F6B5164(v29, v30, v28);
      if (v31)
      {
        sub_23F6B4F84(*(_QWORD *)(v0 + 168), &qword_256EAA650);
LABEL_16:
        sub_23F7B0B84();
        v35 = sub_23FB2E7E0();
        v36 = sub_23FB2F5F0();
        if (sub_23F7D277C(v36))
        {
          v37 = (_WORD *)sub_23F693DF4();
          sub_23F7D2E40(v37);
          sub_23F7D2BAC(&dword_23F68F000, v35, OS_LOG_TYPE_DEFAULT, "ANN search for for 1P apps or protocols did not return a payload or asset");
          sub_23F693DD0();
        }
        v38 = *(_QWORD *)(v0 + 216);

        sub_23F6B563C(v38, *(uint64_t (**)(uint64_t, uint64_t))(v202 + 8));
        v39 = sub_23F6B63F4();
        v40(v39);
        goto LABEL_50;
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v200 + 32))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
      v32 = sub_23FB2C6A4();
      v34 = v194;
      if (v33 >> 60 == 15)
      {
        (*(void (**)(_QWORD, _QWORD))(v200 + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
        goto LABEL_16;
      }
      v41 = v32;
      v42 = v33;
      sub_23F6D3458(&qword_256EAA6B8, type metadata accessor for ToolboxDatabasePayload, (uint64_t)&unk_23FB61460);
      sub_23FB2C05C();
      v191 = v42;
      v43 = *(_QWORD *)(v0 + 160);
      v44 = *(_QWORD *)(v0 + 136);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v44, 0, 1, *(_QWORD *)(v0 + 144));
      sub_23F6F594C(v44, v43, type metadata accessor for ToolboxDatabasePayload);
      v45 = sub_23F6B6190();
      sub_23F6F5920(v45, v46, type metadata accessor for ToolboxDatabasePayload);
      sub_23F6B63F4();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v177 = v41;
      if (!EnumCaseMultiPayload)
        break;
      if (EnumCaseMultiPayload != 1)
      {
        v0 = v195;
        v90 = **(_QWORD **)(v195 + 152);
        v91 = *(_QWORD *)(v174 + 8);
        v92 = *(_BYTE *)(v174 + 16);
        sub_23F6B54F8();
        v93 = sub_23F7D279C();
        v71 = sub_23F693DFC();
        if ((v93 & 1) == 0)
        {
          sub_23F6B6254();
          sub_23F7D2654(v208);
          v71 = sub_23F7D2F10();
          if ((v92 & 1) == 0)
          {
            v132 = *(_QWORD **)(v195 + 112);
            sub_23F6B6254();
            sub_23FB2C620();
            *v132 = v90;
            *(_QWORD *)(v165 + 8) = v91;
            *(_DWORD *)(v165 + 16) = v133;
            sub_23F7B0E48();
            swift_storeEnumTagMultiPayload();
            if ((sub_23F7D2CB0() & 1) == 0)
            {
              sub_23F7D1FC4();
              v201 = v149;
            }
            sub_23F7D2C54();
            if (v81)
            {
              sub_23F7D1FAC();
              v201 = v150;
            }
            sub_23F7D241C();
            v89 = *(_QWORD *)(v195 + 112);
            goto LABEL_47;
          }
        }
LABEL_35:
        v55 = *(_QWORD *)(v0 + 240);
        v106 = *(_QWORD *)(v0 + 192);
        sub_23F7D20E0(v71, v72, v73, v74, v75, v76, v77, v78, v152, v155, v158, v161, v165, v168, v171, v174, v41, v180, v183,
          *((uint64_t *)&v183 + 1),
          v188,
          v191);
        sub_23F6B5AB0();
        sub_23F6B4FAC();
        sub_23F6B563C(v106, *(uint64_t (**)(uint64_t, uint64_t))(v200 + 8));
        v65 = sub_23F7D243C();
        goto LABEL_36;
      }
      v0 = v195;
      v48 = *(_QWORD *)(v195 + 152);
      v49 = *(_BYTE *)(v48 + *(int *)(sub_23F6916B8(&qword_256EAA6E0) + 48));
      v50 = sub_23F6B5994();
      v51(v50);
      sub_23F6B54F8();
      v52 = sub_23F6B5994();
      v54 = sub_23F7B2AB0(v52, v53);
      sub_23F693DFC();
      if ((v54 & 1) == 0)
      {
        v94 = *(void (**)(_QWORD))(v194 + 16);
        ((void (*)(_QWORD, _QWORD, _QWORD))v94)(*(_QWORD *)(v195 + 72), *(_QWORD *)(v195 + 88), *(_QWORD *)(v195 + 56));
        sub_23F6B63F4();
        sub_23F7F11E8();
        v95 = *(void (**)(uint64_t))(v194 + 8);
        v96 = sub_23F7B0E48();
        v95(v96);
        if ((v49 & 1) == 0)
        {
          v108 = *(_QWORD *)(v195 + 120);
          v109 = *(int *)(sub_23F6916B8(&qword_256EAA6E8) + 48);
          v110 = sub_23F7B0E48();
          v94(v110);
          sub_23FB2C620();
          *(_DWORD *)(v108 + v109) = v111;
          sub_23F6B63F4();
          swift_storeEnumTagMultiPayload();
          if ((sub_23F7D2CB0() & 1) == 0)
          {
            sub_23F7D1FC4();
            v201 = v147;
          }
          v119 = *(_QWORD *)(v201 + 16);
          if (v119 >= *(_QWORD *)(v201 + 24) >> 1)
          {
            sub_23F7D1FAC();
            v201 = v148;
          }
          v0 = v195;
          sub_23F7D2364(*(_QWORD *)(v195 + 120), v112, v113, v114, v115, v116, v117, v118, v152, *(_QWORD *)(v195 + 192), *(_QWORD *)(v195 + 240), *(_QWORD *)(v195 + 264), v165, v168, v171, v174, v177, v180, v183,
            *((uint64_t *)&v183 + 1),
            v188,
            v191,
            v194,
            v195,
            v196,
            v197,
            v198,
            *((uint64_t *)&v198 + 1),
            v199,
            v200,
            v201);
          sub_23F6F594C(v122, v120 + v121 * v119, type metadata accessor for ToolboxSearchOutput);
          sub_23F7D20E0(v123, v124, v125, v126, v127, v128, v129, v130, v153, v156, v159, v163, v166, v169, v172, v175, v178, v181, v184,
            v186,
            v189,
            v192);
          v131 = sub_23F6B63F4();
          v95(v131);
          sub_23F6B4FAC();
          sub_23F6B563C(v155, *(uint64_t (**)(uint64_t, uint64_t))(v200 + 8));
          (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v161, v158);
          goto LABEL_50;
        }
        v162 = *(_QWORD *)(v195 + 240);
        sub_23F7D2FDC();
        v97 = *(_QWORD *)(v195 + 56);
        sub_23F7D20E0(v98, v99, v100, v101, v102, v103, v104, v105, v152, v155, v158, v162, v165, v168, v171, v174, v177, v180, v183,
          *((uint64_t *)&v183 + 1),
          v188,
          v191);
        ((void (*)(void (*)(_QWORD), uint64_t))v95)(v94, v97);
        sub_23F6B4FAC();
        sub_23F7D21CC(*(uint64_t (**)(uint64_t, uint64_t))(v200 + 8));
        v65 = sub_23F7D243C();
        goto LABEL_48;
      }
      v55 = *(_QWORD *)(v195 + 240);
      sub_23F7D2FDC();
      v56 = *(_QWORD *)(v195 + 56);
      sub_23F7D20E0(v57, v58, v59, v60, v61, v62, v63, v64, v152, v155, v158, v161, v165, v168, v171, v174, v41, v180, v183,
        *((uint64_t *)&v183 + 1),
        v188,
        v42);
      (*(void (**)(unint64_t, uint64_t))(v194 + 8))(v42, v56);
      sub_23F6B4FAC();
      sub_23F7D21CC(*(uint64_t (**)(uint64_t, uint64_t))(v200 + 8));
      v65 = sub_23F7D27BC();
LABEL_36:
      v107 = v55;
LABEL_49:
      v66(v65, v107);
LABEL_50:
      v10 += v196;
      v8 = v205 - 1;
      if (v205 == 1)
      {
        sub_23F7D2E2C();
        goto LABEL_54;
      }
    }
    v0 = v195;
    v67 = **(_QWORD **)(v195 + 152);
    v68 = *(_QWORD *)(v174 + 8);
    v69 = *(_BYTE *)(v174 + 16);
    sub_23F6B54F8();
    v70 = sub_23F7D279C();
    v71 = sub_23F693DFC();
    if ((v70 & 1) == 0)
    {
      sub_23F6B6254();
      sub_23F7D2654(v208);
      v71 = sub_23F7D2F10();
      if ((v69 & 1) == 0)
      {
        v79 = *(_QWORD **)(v195 + 128);
        sub_23F6B6254();
        sub_23FB2C620();
        *v79 = v67;
        *(_QWORD *)(v168 + 8) = v68;
        *(_DWORD *)(v168 + 16) = v80;
        sub_23F7B0E48();
        swift_storeEnumTagMultiPayload();
        if ((sub_23F7D2CB0() & 1) == 0)
        {
          sub_23F7D1FC4();
          v201 = v145;
        }
        sub_23F7D2C54();
        if (v81)
        {
          sub_23F7D1FAC();
          v201 = v146;
        }
        sub_23F7D241C();
        v89 = *(_QWORD *)(v195 + 128);
LABEL_47:
        sub_23F7D2364(v89, v82, v83, v84, v85, v86, v87, v88, v152, v155, v158, v161, v165, v168, v171, v174, v41, v180, v183,
          *((uint64_t *)&v183 + 1),
          v188,
          v191,
          v194,
          v195,
          v196,
          v197,
          v198,
          *((uint64_t *)&v198 + 1),
          v199,
          v200,
          v201);
        sub_23F6F594C(v136, v134 + v135 * v34, type metadata accessor for ToolboxSearchOutput);
        sub_23F7D2654(v208);
        sub_23F7D20E0(v137, v138, v139, v140, v141, v142, v143, v144, v154, v157, v160, v164, v167, v170, v173, v176, v179, v182, v185,
          v187,
          v190,
          v193);
        sub_23F7D2F10();
        sub_23F6B4FAC();
        sub_23F6B56E0((uint64_t)type metadata accessor for ToolboxDatabasePayload, *(uint64_t (**)(uint64_t, uint64_t))(v200 + 8));
        v65 = sub_23F7D27BC();
LABEL_48:
        v107 = v161;
        goto LABEL_49;
      }
    }
    goto LABEL_35;
  }
  sub_23F693DFC();
  v201 = MEMORY[0x24BEE4AF8];
LABEL_54:
  swift_bridgeObjectRelease();
LABEL_55:
  sub_23F693DFC();
  sub_23F6F5268();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v201, v206);
}

void sub_23F7C24B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  NSObject *v110;
  os_signpost_type_t v111;
  uint8_t *v112;
  os_signpost_id_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 *v130;
  uint64_t v131;
  __int128 v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  _BOOL4 v138;
  uint8_t *v139;
  uint64_t (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  _BYTE *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __n128 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t);
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint8_t *v159;
  os_log_type_t v160;
  uint8_t *v161;
  uint64_t (*v162)(uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint8_t *v166;
  __n128 *v167;
  NSObject *v168;
  os_log_type_t v169;
  int v170;
  _WORD *v171;
  uint64_t (*v172)(uint64_t, uint64_t);
  uint64_t v173;
  int EnumCaseMultiPayload;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __n128 *inited;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint64_t v202;
  os_log_type_t v203;
  uint8_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t (*v210)(uint64_t, uint64_t, uint64_t);
  unint64_t v211;
  _WORD *v212;
  os_signpost_id_t v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  NSObject *v221;
  os_log_type_t v222;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void (*v228)(uint64_t, uint64_t);
  uint64_t v229;
  _BYTE *v230;
  uint64_t v231;
  _BYTE *v232;
  _QWORD v233[2];
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  __n128 *v251;
  _QWORD *v252;
  _QWORD *v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  __n128 *v258;
  __n128 *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(_QWORD *, uint64_t);
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  NSObject *v272;
  __n128 *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  __n128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint8_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void (*v295)(uint64_t);
  uint64_t v296;
  uint64_t v297;
  __n128 *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303[2];
  uint64_t v304;

  sub_23F6B5220();
  a19 = v25;
  a20 = v26;
  v298 = v22;
  v269 = v27;
  v267 = v28;
  v246 = v29;
  v244 = sub_23F6916B8((uint64_t *)&unk_256EA9B30);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B6580();
  sub_23F70D434(v32);
  v33 = sub_23FB2EF54();
  sub_23F6B53F8(v33, (uint64_t)&v291);
  v263 = v34;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F6B51A4();
  v262 = v36;
  v37 = sub_23F693F0C();
  sub_23F6B53F8(v37, (uint64_t)&a16);
  v290 = v38;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B6580();
  v46 = sub_23F70D434(v45);
  v275 = type metadata accessor for ToolboxCustomKeyResult(v46);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v48);
  sub_23F6B6580();
  v273 = v49;
  sub_23F6916B8(&qword_256EA8140);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v50);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F6B6580();
  sub_23F70D434(v52);
  v53 = sub_23FB2E8D0();
  sub_23F6B53F8(v53, (uint64_t)&v299);
  v281 = v54;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v55);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v56);
  sub_23F6B6580();
  v270 = v57;
  v58 = sub_23F6916B8(&qword_256EAA6C0);
  sub_23F6B53F8(v58, (uint64_t)&v300);
  v277 = v59;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v60);
  sub_23F6B51A4();
  sub_23F70D434(v61);
  v62 = sub_23FB2E930();
  sub_23F6B53F8(v62, (uint64_t)&v301);
  v276 = v63;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v64);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v65);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v66);
  sub_23F6B6580();
  v261 = v67;
  sub_23F6916B8(&qword_256EAA6B0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v68);
  v69 = sub_23F70D7F8();
  v288 = type metadata accessor for ToolboxDatabasePayload(v69);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v70);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v71);
  sub_23F6B6580();
  sub_23F70D434(v72);
  v73 = sub_23FB2C6B0();
  sub_23F6B53F8(v73, (uint64_t)&a12);
  v296 = v74;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v75);
  sub_23F6B51A4();
  v297 = v76;
  sub_23F6D398C();
  v77 = sub_23FB2E7A4();
  sub_23F6B53F8(v77, (uint64_t)&v278);
  v254 = v78;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v79);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v80);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v81);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v82);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v83);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v84);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v85);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v86);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v87);
  sub_23F6B6580();
  sub_23F70D434(v88);
  v89 = sub_23FB2C680();
  v293 = *(_QWORD *)(v89 - 8);
  v294 = v89;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v90);
  sub_23F6B5298();
  sub_23F7D252C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v91);
  v295 = (void (*)(uint64_t))((char *)v233 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6D398C();
  v280 = sub_23FB2E774();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v93);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v94);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v95);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v96);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v97);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v98);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v99);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v100);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v101);
  sub_23F6D3D14();
  v292 = v102;
  sub_23F6B5664();
  v104 = MEMORY[0x24BDAC7A8](v103);
  v106 = (char *)v233 - v105;
  MEMORY[0x24BDAC7A8](v104);
  v108 = (_QWORD *)((char *)v233 - v107);
  v287 = v21;
  v109 = v21 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_23FB2E78C();
  sub_23FB2E75C();
  v265 = v109;
  v110 = sub_23FB2E78C();
  v111 = sub_23FB2F620();
  if ((sub_23FB2F638() & 1) != 0)
  {
    v112 = (uint8_t *)sub_23F693DF4();
    *(_WORD *)v112 = 0;
    v113 = sub_23FB2E768();
    _os_signpost_emit_with_name_impl(&dword_23F68F000, v110, v111, v113, "ToolEmbeddingsDatabase:searchToolCustomKey", "", v112, 2u);
    sub_23F693DD0();
  }

  v114 = v280;
  sub_23F75E710((uint64_t)v106, (uint64_t)v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
  sub_23FB2E7C8();
  sub_23F6BD144();
  v115 = sub_23FB2E7BC();
  v266 = *(void (**)(_QWORD *, uint64_t))(v23 + 8);
  v266(v108, v114);
  v116 = v269;
  v117 = HIBYTE(v269) & 0xF;
  v118 = v267;
  if ((v269 & 0x2000000000000000) == 0)
    v117 = v267 & 0xFFFFFFFFFFFFLL;
  if (!v117)
  {
    v134 = (uint64_t)v291;
    sub_23FB2E378();
    v129 = v134;
    v136 = sub_23FB2E7E0();
    v137 = sub_23FB2F5D8();
    v138 = sub_23F759600(v137);
    v135 = v254;
    v116 = v289;
    if (v138)
    {
      v139 = (uint8_t *)sub_23F693DF4();
      *(_WORD *)v139 = 0;
      sub_23F7D24B0(&dword_23F68F000, v136, (os_log_type_t)v134, "ToolBox returning zero tools as it received empty list custom key", v139);
      sub_23F693DD0();
    }

    sub_23F7D2138();
    sub_23F6B563C(v134, v140);
    sub_23F7CE170();
    v141 = sub_23F6B5AD4();
    sub_23F7D2038(v141, v142, 3);
    v133 = sub_23F7D1E08();
    sub_23F7D2048();
    sub_23FB2F614();
    if ((sub_23F7D1DFC() & 1) == 0)
      goto LABEL_64;
    sub_23F7D1FA4();
    sub_23F7D2EB8();
    sub_23F7D24FC();
LABEL_13:
    if (sub_23F7D2948(v116, *(uint64_t (**)(uint64_t, _QWORD))(v135 + 88)) != *MEMORY[0x24BEE7810])
    {
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v116, v129);
LABEL_62:
      v143 = "";
LABEL_63:
      v212 = (_WORD *)sub_23F693DF4();
      sub_23F7D2D44(v212);
      v213 = sub_23FB2E768();
      _os_signpost_emit_with_name_impl(&dword_23F68F000, v133, (os_signpost_type_t)v108, v213, "ToolEmbeddingsDatabase:searchToolCustomKey", v143, (uint8_t *)v116, 2u);
      sub_23F693DD0();
    }
LABEL_14:
    v143 = "[Error] Interval already ended";
    goto LABEL_63;
  }
  v260 = v115;
  v304 = MEMORY[0x24BEE4B08];
  sub_23F6916B8(&qword_256EA7900);
  v119 = *(unsigned __int8 *)(*(_QWORD *)(sub_23F7D2350() - 8) + 80);
  v120 = (v119 + 32) & ~v119;
  v121 = sub_23F7D267C();
  v279 = (__n128)xmmword_23FB47010;
  *(_OWORD *)(v121 + 16) = xmmword_23FB47010;
  v268 = v121;
  v291 = (uint8_t *)(v121 + v120);
  v122 = v287;
  *v20 = 0;
  v20[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v293 + 104))(v20, *MEMORY[0x24BEBFE28], v294);
  sub_23F6B6548();
  sub_23FB2C65C();
  sub_23F6916B8(&qword_256EA6260);
  v108 = (_QWORD *)sub_23F6916B8(&qword_256EA28F8);
  v123 = (__n128 *)sub_23F7D1EFC();
  sub_23F7D2FC8(v123, v279);
  v124 = *MEMORY[0x24BEBFDD8];
  sub_23F7D2ABC();
  v125 = sub_23F7D2938();
  v126(v125, v124);
  *v108 = v118;
  v108[1] = v116;
  v127 = *MEMORY[0x24BEBFE48];
  v128 = sub_23F7D270C();
  sub_23F6B5EF0((uint64_t)v108, v127, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 104));
  sub_23F7D281C((uint64_t)v108);
  sub_23F77DCD4();
  sub_23F6B6190();
  sub_23FB2C5FC();
  v129 = *(_QWORD *)(v122 + 264);
  v130 = v298;
  v131 = sub_23FB2C56C();
  v298 = v130;
  if (v130)
  {
    sub_23F77DE3C();
    v133 = sub_23F7D1E08();
    v134 = v292;
    sub_23F7D1D8C();
    sub_23FB2F614();
    if ((sub_23F7D1DFC() & 1) != 0)
      goto LABEL_8;
    goto LABEL_64;
  }
  v144 = v131 - 1;
  if (__OFSUB__(v131, 1))
    goto LABEL_88;
  if (v144 < -999)
  {
LABEL_89:
    __break(1u);
    return;
  }
  v236 = v144 / 500;
  v145 = v144 / 500 + 1;
  if (!v145)
  {
    sub_23F77DE3C();
    sub_23F7D2E74();
LABEL_66:
    v116 = v254;
    v108 = v249;
    v134 = v248;
    if (*(_QWORD *)(v304 + 16) > 1uLL)
    {
      sub_23F693E04();
      sub_23F7CE170();
      v214 = sub_23F6B5AD4();
      sub_23F7D2038(v214, v215, 1);
      v133 = sub_23F7D1E08();
      sub_23F7D2048();
      sub_23FB2F614();
      if ((sub_23F7D1DFC() & 1) == 0)
        goto LABEL_64;
      sub_23F7D1FA4();
      v216 = v243;
    }
    else
    {
      sub_23F70E500(v304, v247);
      sub_23F693E04();
      sub_23FB2E378();
      v217 = sub_23F6B68A8();
      sub_23F6B4F58(v217, v218, v219);
      v129 = (uint64_t)v108;
      v220 = v269;
      sub_23F6B91E8();
      v221 = sub_23FB2E7E0();
      v222 = sub_23FB2F5E4();
      LODWORD(v108) = v222;
      if (os_log_type_enabled(v221, v222))
      {
        v224 = sub_23F693DF4();
        LODWORD(v297) = (_DWORD)v108;
        v225 = v224;
        v296 = sub_23F693DF4();
        v303[0] = v296;
        *(_DWORD *)v225 = 136315394;
        v226 = sub_23FB2F644();
        v302 = sub_23F69334C(v226, v227, v303);
        sub_23FB2F680();
        sub_23F693DFC();
        sub_23F6B4F84(v134, (uint64_t *)&unk_256EA9B30);
        *(_WORD *)(v225 + 12) = 2080;
        sub_23F77E584();
        v302 = sub_23F69334C(v267, v220, v303);
        sub_23F7D2E74();
        sub_23FB2F680();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23F68F000, v221, (os_log_type_t)v297, "ToolDatabaseAsset: %s for customKey: %s", (uint8_t *)v225, 0x16u);
        swift_arrayDestroy();
        sub_23F693DD0();
      }
      sub_23F6B4F84(v134, (uint64_t *)&unk_256EA9B30);

      sub_23F6B6740();
      sub_23F7D2138();
      v228(v129, v289);
      v216 = v245;
      sub_23F6B4EC0(v247, v246, (uint64_t *)&unk_256EA9B30);
      v133 = sub_23F7D1E08();
      sub_23F7D2048();
      sub_23FB2F614();
      if ((sub_23F7D1DFC() & 1) == 0)
        goto LABEL_64;
      sub_23F7D1FA4();
    }
    sub_23FB2E7D4();
    sub_23F7D24FC();
    if (sub_23F7D2948(v216, *(uint64_t (**)(uint64_t, _QWORD))(v116 + 88)) != *MEMORY[0x24BEE7810])
    {
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v216, v129);
      goto LABEL_62;
    }
    goto LABEL_14;
  }
  v146 = 0;
  v256 = v122 + 96;
  v255 = *MEMORY[0x24BEB8EF8];
  v237 = v145 & ~(v145 >> 63);
  *(_QWORD *)&v132 = 136315138;
  v234 = v132;
  v233[1] = MEMORY[0x24BEE4AD8] + 8;
  sub_23F7D2574();
  v134 = v285;
  v271 = v24;
  sub_23F7D2D80();
  sub_23F7D2E74();
  LOBYTE(v108) = v268;
  sub_23F7D2AB0();
  v235 = v129;
  while (1)
  {
    if (v146 == v237)
    {
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    if (v146 == 0x4189374BC6A7F0)
      goto LABEL_87;
    v147 = v298;
    v148 = sub_23FB2C5CC();
    v298 = v147;
    if (v147)
    {
      sub_23F6B5908();
      sub_23F693E04();
      v133 = sub_23F7D1E08();
      sub_23F7D2048();
      sub_23FB2F614();
      if ((sub_23F7D1DFC() & 1) != 0)
        goto LABEL_8;
      goto LABEL_64;
    }
    v250 = v146;
    if (!*(_QWORD *)(v148 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
    sub_23F78F3B0();
    v238 = v149;
    v151 = v149 + v150;
    v153 = *(void (**)(uint64_t))(v152 + 16);
    v294 = *(_QWORD *)(v152 + 72);
    v295 = v153;
    v108 = type metadata accessor for ToolboxDatabasePayload;
    v154 = v134;
    v156 = v155;
LABEL_24:
    v157 = sub_23F7D24F0();
    v295(v157);
    v158 = sub_23FB2C6A4();
    if ((unint64_t)v159 >> 60 == 15)
    {
      sub_23FB2E378();
      v123 = (__n128 *)sub_23FB2E7E0();
      v160 = sub_23FB2F5F0();
      if (sub_23F759600(v160))
      {
        v161 = (uint8_t *)sub_23F693DF4();
        *(_WORD *)v161 = 0;
        sub_23F7D24B0(&dword_23F68F000, v123, (os_log_type_t)v116, "ANN search for custom key did not return a payload", v161);
        sub_23F693DD0();
      }

      sub_23F7D2138();
      sub_23F6B6178(v116, v162);
      sub_23F6B51EC(v297, *(uint64_t (**)(uint64_t, uint64_t))(v296 + 8));
      goto LABEL_28;
    }
    v293 = v156;
    v163 = v116;
    v164 = v24;
    v165 = v158;
    v166 = v159;
    sub_23F6D3458(&qword_256EAA6B8, type metadata accessor for ToolboxDatabasePayload, (uint64_t)&unk_23FB61460);
    v292 = v165;
    v291 = v166;
    v167 = v298;
    sub_23FB2C05C();
    v298 = v167;
    if (!v167)
      break;

    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v164, 1, 1, (uint64_t)v123);
    sub_23F6B4F84(v164, &qword_256EAA6B0);
    sub_23F7B0B84();
    v168 = sub_23FB2E7E0();
    v169 = sub_23FB2F5F0();
    sub_23F7D28D0(v169);
    v24 = v164;
    sub_23F7D2AB0();
    if (v170)
    {
      v171 = (_WORD *)sub_23F693DF4();
      sub_23F7D2D44(v171);
      sub_23F7D24B0(&dword_23F68F000, v168, (os_log_type_t)type metadata accessor for ToolboxDatabasePayload, "Payload from ANN search for custom key could not be decoded", v166);
      sub_23F7D2AB0();
      sub_23F693DD0();
    }
    sub_23F7D2008();

    sub_23F7D2138();
    sub_23F6B6178(v286, v172);
    sub_23F6B51EC(v297, *(uint64_t (**)(uint64_t, uint64_t))(v296 + 8));
    v298 = 0;
    v108 = type metadata accessor for ToolboxDatabasePayload;
    v116 = v163;
    v156 = v293;
LABEL_33:
    v151 += v294;
    if (--v156)
      goto LABEL_24;
    v134 = v154;
    sub_23F77DE3C();
    sub_23F7D2E74();
LABEL_59:
    v146 = v250 + 1;
    LOBYTE(v108) = v268;
    v129 = v235;
    if (v250 == v236)
    {
      sub_23F6B5908();
      goto LABEL_66;
    }
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v164, 0, 1, (uint64_t)v123);
  v173 = v283;
  sub_23F6F594C(v164, v283, type metadata accessor for ToolboxDatabasePayload);
  sub_23F6F5920(v173, v284, type metadata accessor for ToolboxDatabasePayload);
  sub_23F6B6190();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23F7D2298();
    v253 = sub_23F7D2AFC(v179, v180);
    v181 = v282;
    sub_23FB2E90C();
    swift_getKeyPath();
    sub_23F7D2670();
    sub_23F6916B8(&qword_256EA2948);
    inited = (__n128 *)swift_initStackObject();
    inited[1] = v279;
    inited[2].n128_u64[0] = v154;
    inited[2].n128_u64[1] = (unint64_t)v123;
    v251 = v123;
    sub_23F6B5508();
    v183 = sub_23F7CBE74((uint64_t)inited);
    sub_23F7D1E24(v183);
    sub_23F6D3458(&qword_256EAA6C8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9200], MEMORY[0x24BEB91F8]);
    sub_23F7CE784();
    sub_23F7D2920();
    v129 = v181;
    sub_23FB2EA98();
    sub_23F7D24C8();
    sub_23F6B530C(v164, *(uint64_t (**)(uint64_t, uint64_t))(v165 + 8));
    v116 = *(_QWORD *)(v276 + 8);
    sub_23F7D2A90(v181);
    v184 = sub_23F7D25E8((uint64_t)v123, (uint64_t (*)(uint64_t, _QWORD))v252[8]);
    v298 = inited;
    v156 = v293;
    if (inited)
    {
      sub_23F77DE3C();
      sub_23F6D1E64(v292, (unint64_t)v291);
      sub_23F77DE3C();
      sub_23F7D2358();
      sub_23F7D21B4();
      sub_23F7D1EB4();
      sub_23F77DE3C();
      sub_23F7D2B44();
      v133 = sub_23F7D1E08();
      v134 = v241;
      sub_23F7D1D8C();
      sub_23FB2F614();
      if ((sub_23F7D1DFC() & 1) != 0)
        goto LABEL_8;
      goto LABEL_64;
    }
    v129 = v184;
    sub_23F7D2358();
    v185 = *(_QWORD *)(v129 + 16);
    if (v185 >= 2)
    {
      sub_23F77DE3C();
      sub_23F77DE3C();
      sub_23F693DFC();
      sub_23F77DE3C();
      sub_23F7D2B44();
      sub_23F7CE170();
      v229 = sub_23F6B5AD4();
      sub_23F7D2038(v229, v230, 2);
      sub_23F7D2008();
      sub_23F7D21B4();
      sub_23F7D1EB4();
      v133 = sub_23F7D1E08();
      v134 = v239;
      sub_23F7D1D8C();
      sub_23FB2F614();
      if ((sub_23F7D1DFC() & 1) != 0)
        goto LABEL_8;
      goto LABEL_64;
    }
    v154 = v285;
    if (v185)
    {
      sub_23F7D2458();
      v123 = v258;
      v186 = v272;
      sub_23F78F5D0((uint64_t)v258, v187, v188);
      sub_23F7D2574();
    }
    else
    {
      sub_23F7D2574();
      v123 = v258;
      v186 = v272;
    }
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v123, v189, 1, (uint64_t)v186);
    sub_23F693DFC();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v123, 1, (uint64_t)v186) != 1)
    {
      sub_23F77DE3C();
      v202 = v281;
      sub_23F78F5D0(v270, (uint64_t)v123, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 32));
      sub_23F78F5D0(v274, v270, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 16));
      sub_23F7D2690();
      sub_23F7D24D8();
      sub_23F7D2018();
      sub_23F6B4FAC();
      sub_23F6B6420(v270, *(uint64_t (**)(uint64_t, uint64_t))(v281 + 8));
      sub_23F7D2800();
      v108 = type metadata accessor for ToolboxDatabasePayload;
      sub_23F6B60A4();
      sub_23F6B51EC(v297, *(uint64_t (**)(uint64_t, uint64_t))(v296 + 8));
      goto LABEL_56;
    }
    v199 = v116;
    sub_23F6B4F84((uint64_t)v123, &qword_256EA8140);
    sub_23F7D2CD4();
    v123 = v251;
    sub_23F6B5508();
    v200 = v186;
    sub_23FB2E7E0();
    v201 = sub_23F7D2974();
    if (sub_23F7B0C7C(v201))
      goto LABEL_54;
LABEL_57:
    sub_23F7D2018();
    sub_23F6B6740();

    sub_23F7D2148();
    sub_23F7D2800();
    v108 = type metadata accessor for ToolboxDatabasePayload;
    sub_23F6B60A4();
    v211 = v285;
    (*(void (**)(uint64_t, uint64_t))(v296 + 8))(v297, v285);
    v24 = v271;
    sub_23F7D2D80();
    v116 = v199;
    v154 = v211;
    goto LABEL_33;
  }
  v156 = v293;
  if (EnumCaseMultiPayload == 1)
  {
    v175 = v263;
    v116 = v262;
    v176 = v264;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v263 + 32))(v262, v284, v264);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v175 + 16))(v274, v116, v176);
    swift_storeEnumTagMultiPayload();
    v123 = v273;
    sub_23F7F12F8();
    sub_23F7D2018();
    sub_23F6B4FAC();
    sub_23F6B530C(v116, *(uint64_t (**)(uint64_t, uint64_t))(v175 + 8));
    sub_23F7D2800();
    v108 = type metadata accessor for ToolboxDatabasePayload;
    sub_23F6B60A4();
    v177 = sub_23F7D2D14();
    sub_23F6B51EC(v177, v178);
    sub_23F7D2574();
    v24 = v271;
    sub_23F7D2D80();
    sub_23F7D2AB0();
    goto LABEL_33;
  }
  sub_23F7D2298();
  v252 = sub_23F7D2AFC(v190, v191);
  sub_23FB2E90C();
  swift_getKeyPath();
  sub_23F7D2670();
  sub_23F6916B8(&qword_256EA2948);
  v192 = (__n128 *)swift_initStackObject();
  v192[1] = v279;
  v192[2].n128_u64[0] = v154;
  v192[2].n128_u64[1] = (unint64_t)v123;
  v251 = v123;
  sub_23F6B5508();
  v193 = sub_23F7CBE74((uint64_t)v192);
  sub_23F7D1E24(v193);
  sub_23F6D3458(&qword_256EAA6C8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9200], MEMORY[0x24BEB91F8]);
  sub_23F7CE784();
  sub_23F7D2920();
  v129 = v282;
  sub_23FB2EA98();
  sub_23F7D24C8();
  sub_23F6B530C(v164, *(uint64_t (**)(uint64_t, uint64_t))(v165 + 8));
  v116 = *(_QWORD *)(v276 + 8);
  sub_23F7D2A90(v129);
  v194 = sub_23F7D25E8((uint64_t)v123, (uint64_t (*)(uint64_t, _QWORD))v253[8]);
  v298 = v192;
  if (v192)
  {
    sub_23F77DE3C();
    sub_23F6D1E64(v292, (unint64_t)v291);
    sub_23F77DE3C();
    sub_23F7D2358();
    sub_23F7D21B4();
    sub_23F7D1EB4();
    sub_23F77DE3C();
    sub_23F7D2B44();
    v133 = sub_23F7D1E08();
    v134 = v242;
    sub_23F7D1D8C();
    sub_23FB2F614();
    if ((sub_23F7D1DFC() & 1) != 0)
      goto LABEL_8;
    goto LABEL_64;
  }
  v129 = v194;
  sub_23F7D2358();
  v195 = *(_QWORD *)(v129 + 16);
  if (v195 < 2)
  {
    v154 = v285;
    if (v195)
    {
      sub_23F7D2458();
      v123 = v259;
      v186 = v272;
      sub_23F78F5D0((uint64_t)v259, v196, v197);
      sub_23F7D2574();
    }
    else
    {
      sub_23F7D2574();
      v123 = v259;
      v186 = v272;
    }
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v123, v198, 1, (uint64_t)v186);
    sub_23F693DFC();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v123, 1, (uint64_t)v186) != 1)
    {
      sub_23F77DE3C();
      v206 = v281;
      v207 = v257;
      v208 = sub_23F6B6190();
      sub_23F78F5D0(v208, v209, v210);
      sub_23F78F5D0(v274, v207, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 16));
      sub_23F7D2690();
      sub_23F7D24D8();
      sub_23F7D2018();
      sub_23F6B4FAC();
      sub_23F6B6420(v257, *(uint64_t (**)(uint64_t, uint64_t))(v206 + 8));
      sub_23F7D2800();
      v108 = type metadata accessor for ToolboxDatabasePayload;
      sub_23F6B60A4();
      sub_23F6B51EC(v297, *(uint64_t (**)(uint64_t, uint64_t))(v296 + 8));
      sub_23F7D2AB0();
LABEL_56:
      v24 = v271;
LABEL_28:
      sub_23F7D2D80();
      goto LABEL_33;
    }
    v199 = v116;
    sub_23F6B4F84((uint64_t)v123, &qword_256EA8140);
    sub_23F7D2CD4();
    v123 = v251;
    sub_23F6B5508();
    v200 = v186;
    sub_23FB2E7E0();
    v203 = sub_23F7D2974();
    if (sub_23F7B0C7C(v203))
    {
LABEL_54:
      v204 = (uint8_t *)sub_23F693DF4();
      v303[0] = sub_23F693DF4();
      *(_DWORD *)v204 = v234;
      sub_23F6B5508();
      v205 = sub_23F7D2880();
      sub_23F7D2870(v205);
      sub_23F7B0B48(&dword_23F68F000, v186, (os_log_type_t)v116, "ToolDefinition not found for %s", v204);
      swift_arrayDestroy();
      sub_23F7D2574();
      sub_23F693DD0();
    }
    goto LABEL_57;
  }
  sub_23F77DE3C();
  sub_23F77DE3C();
  sub_23F693DFC();
  sub_23F77DE3C();
  sub_23F7D2B44();
  sub_23F7CE170();
  v231 = sub_23F6B5AD4();
  sub_23F7D2038(v231, v232, 2);
  sub_23F7D2008();
  sub_23F7D21B4();
  sub_23F7D1EB4();
  v133 = sub_23F7D1E08();
  v134 = v240;
  sub_23F7D1D8C();
  sub_23FB2F614();
  if ((sub_23F7D1DFC() & 1) != 0)
  {
LABEL_8:
    sub_23F7D1FA4();
    sub_23F7D2EB8();
    sub_23F7D24FC();
    v135 = v254;
    goto LABEL_13;
  }
LABEL_64:

  v266((_QWORD *)v134, v280);
  sub_23F7D24FC();
  sub_23F6B5100();
}

void sub_23F7C3E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23F6B5220();
  sub_23F7D2504();
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F7D22F4();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B52B0();
  sub_23F6916B8(&qword_256EA7900);
  sub_23F7D2350();
  v4 = (_OWORD *)swift_allocObject();
  v4[1] = xmmword_23FB47010;
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
  sub_23F7D25B0(*MEMORY[0x24BEBFE30], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
  sub_23F77E1FC();
  sub_23F7D2218();
  sub_23F6916B8(&qword_256EA6260);
  v5 = sub_23F6916B8(&qword_256EA28F8);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72);
  sub_23F6BC570();
  v9 = v8 & ~v7;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23FB4F1A0;
  v11 = v10 + v9;
  sub_23F7B8680(v11, (_QWORD *)(v11 + *(int *)(v5 + 48)), 1);
  sub_23F7D2C74(v11 + v6, *(int *)(v5 + 48));
  sub_23F7D2C98(v11 + 2 * v6, *(int *)(v5 + 48));
  sub_23FB2C5FC();
  sub_23F7C459C(v4);
  sub_23F6B6090();
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F7C4008()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23F6B5220();
  v3 = v2;
  sub_23F7D2504();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F7D22F4();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B5208();
  v6 = *v3;
  sub_23F6916B8(&qword_256EA7900);
  sub_23F7D2350();
  sub_23F7D1F40();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_23FB47010;
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 1;
  sub_23F7D25B0(*MEMORY[0x24BEBFE30], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  sub_23F6B5508();
  sub_23F7D2218();
  sub_23F6916B8(&qword_256EA6260);
  v7 = sub_23F6916B8(&qword_256EA28F8);
  sub_23F7D1F40();
  v10 = v9 & ~v8;
  v11 = sub_23F7D1EFC();
  *(_OWORD *)(v11 + 16) = xmmword_23FB47010;
  sub_23F7D2C80(v11 + v10, *(int *)(v7 + 48));
  sub_23F7D29DC();
  sub_23FB2C5FC();
  __asm { BR              X9 }
}

void sub_23F7C4150()
{
  sub_23F7D2E8C();
  sub_23F6B5908();
  sub_23F6B5100();
}

void sub_23F7C4184()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24[11];
  __int128 v25;
  uint64_t v26;

  sub_23F6B5220();
  v3 = v2;
  v4 = sub_23FB2EEAC();
  v24[6] = *(_QWORD *)(v4 - 8);
  v24[7] = v4;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B57F4(v6, v24[0]);
  v7 = sub_23F7B0D00();
  v24[9] = *(_QWORD *)(v7 - 8);
  v24[10] = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693E0C();
  v24[5] = v9;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B6580();
  v24[8] = v11;
  v12 = sub_23F7D2504();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F7D252C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B59E0();
  v26 = *v3;
  sub_23F6916B8(&qword_256EA7900);
  sub_23F7D2350();
  sub_23F7D1F54();
  v17 = (_OWORD *)swift_allocObject();
  v25 = xmmword_23FB47010;
  v17[1] = xmmword_23FB47010;
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v15, *MEMORY[0x24BEBFE30], v12);
  sub_23F6B90D8();
  sub_23F7D260C();
  sub_23FB2C65C();
  sub_23F6916B8(&qword_256EA6260);
  v18 = sub_23F6916B8(&qword_256EA28F8);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = sub_23F7D1EFC();
  *(_OWORD *)(v21 + 16) = v25;
  v22 = *(int *)(v18 + 48);
  v23 = v26;
  sub_23F7D2C80(v21 + v20, v22);
  sub_23F7D2F60();
  sub_23F7C45E8(v17);
  sub_23F756640();
  if (!v0)
    __asm { BR              X10 }
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F7C438C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    *(_QWORD *)(v6 - 216) = v1;
    *(_QWORD *)(v6 - 208) = v0;
    *(_QWORD *)(v6 - 72) = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v7, 0);
    v9 = sub_23FB29498(v5);
    v11 = v10 & 1;
    *(_QWORD *)(v6 - 200) = v5;
    *(_QWORD *)(v6 - 192) = v5 + 56;
    do
    {
      if (v9 < 0 || v9 >= 1 << *(_BYTE *)(v5 + 32))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        JUMPOUT(0x23F7C4588);
      }
      if (((*(_QWORD *)(*(_QWORD *)(v6 - 192) + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_16;
      if (*(_DWORD *)(v5 + 36) != (_DWORD)v8)
        goto LABEL_17;
      *(_DWORD *)(v6 - 128) = v11;
      *(_QWORD *)(v6 - 112) = v8;
      *(_QWORD *)(v6 - 104) = v7;
      sub_23F75E710(v2, *(_QWORD *)(v5 + 48) + *(_QWORD *)(v4 + 72) * v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
      v12 = *(_QWORD *)(v6 - 184);
      sub_23F75E710(v12, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
      v13 = sub_23FB2EF24();
      v15 = v14;
      sub_23FB2EF30();
      sub_23FB2EE94();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 176) + 8))(v3, *(_QWORD *)(v6 - 168));
      *(_QWORD *)(v6 - 96) = v13;
      *(_QWORD *)(v6 - 88) = v15;
      sub_23F6B6548();
      sub_23FB2F254();
      sub_23F6B6E44();
      sub_23F6B6090();
      v16 = *(_QWORD *)(v6 - 96);
      v17 = *(_QWORD *)(v6 - 88);
      sub_23F6B5900(v12, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      v18 = *(_QWORD *)(v6 - 72);
      if ((sub_23F77D9A4() & 1) == 0)
      {
        v19 = sub_23F7D2A58();
        sub_23F711194(v19, v20, v21);
        v18 = *(_QWORD *)(v6 - 72);
      }
      v22 = *(_QWORD *)(v6 - 104);
      v24 = *(_QWORD *)(v18 + 16);
      v23 = *(_QWORD *)(v18 + 24);
      v4 = *(_QWORD *)(v6 - 152);
      v5 = *(_QWORD *)(v6 - 200);
      if (v24 >= v23 >> 1)
      {
        v28 = sub_23F78F598(v23);
        sub_23F711194(v28, v24 + 1, 1);
        v18 = *(_QWORD *)(v6 - 72);
      }
      *(_QWORD *)(v18 + 16) = v24 + 1;
      v25 = v18 + 16 * v24;
      *(_QWORD *)(v25 + 32) = v16;
      *(_QWORD *)(v25 + 40) = v17;
      v26 = sub_23FB247B0(v9, *(_QWORD *)(v6 - 112), *(_DWORD *)(v6 - 128) & 1, v5);
      v9 = v26;
      v11 = v27 & 1;
      v7 = v22 - 1;
      v3 = *(_QWORD *)(v6 - 136);
      v2 = *(_QWORD *)(v6 - 160);
    }
    while (v7);
    sub_23F7AE908(v26, v8, v11);
    sub_23F6B6A48();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23F6B6A48();
    sub_23F693DFC();
    v18 = MEMORY[0x24BEE4AF8];
  }
  sub_23F7A3590(v18);
  JUMPOUT(0x23F7C437CLL);
}

uint64_t sub_23F7C459C(void *a1)
{
  uint64_t v1;

  sub_23F7C45E8(a1);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    sub_23F6B6090();
  }
  return sub_23F6B619C();
}

void sub_23F7C45E8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v12 = MEMORY[0x24BEE4B08];
  v11 = MEMORY[0x24BEE4B08];
  v5 = sub_23FB2C56C();
  if (!v2)
  {
    v6 = v5 - 1;
    if (__OFSUB__(v5, 1))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    if (v6 < -999)
    {
LABEL_12:
      __break(1u);
      return;
    }
    v7 = v6 / 500;
    v8 = v7 + 1;
    if (v7 != -1)
    {
      v9 = 0;
      while ((v8 & ~(v8 >> 63)) != v9)
      {
        v10 = (void *)MEMORY[0x2426749F4]();
        sub_23F7C4704(v3, a1, 500, v9++, (uint64_t)&v12, (uint64_t)&v11);
        objc_autoreleasePoolPop(v10);
        if (v8 == v9)
          return;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
}

void sub_23F7C4704(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v13 = sub_23FB2E7F8();
  v37 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v43 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_23FB2C6B0();
  v47 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23F6916B8(&qword_256EAA6B0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unsigned __int128)(a4 * (__int128)a3) >> 64 == (a4 * a3) >> 63)
  {
    v19 = sub_23FB2C5CC();
    if (!v6)
    {
      v42 = a1;
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v21 = *(unsigned __int8 *)(v47 + 80);
        v35 = v19;
        v22 = v19 + ((v21 + 32) & ~v21);
        v41 = *(_QWORD *)(v47 + 72);
        v40 = type metadata accessor for ToolboxDatabasePayload(0);
        v39 = xmmword_23FB50350;
        v36 = a5;
        do
        {
          v46 = v39;
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v18, 1, 1, v40);
          v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 16))(v44, v22, v45);
          v24 = (void *)MEMORY[0x2426749F4](v23);
          v25 = sub_23FB2C6A4();
          if (v26 >> 60 == 15)
          {
            sub_23FB2E378();
            v27 = sub_23FB2E7E0();
            v28 = sub_23FB2F5F0();
            if (os_log_type_enabled(v27, v28))
            {
              v29 = a6;
              v30 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v30 = 0;
              _os_log_impl(&dword_23F68F000, v27, v28, "ANN search for for 1P apps or protocols did not return a payload", v30, 2u);
              v31 = v30;
              a6 = v29;
              a5 = v36;
              MEMORY[0x242674F4C](v31, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v38);
          }
          else
          {
            *(_QWORD *)&v46 = v25;
            *((_QWORD *)&v46 + 1) = v26;
          }
          objc_autoreleasePoolPop(v24);
          v32 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v44, v45);
          v33 = (void *)MEMORY[0x2426749F4](v32);
          sub_23F7C4A2C((uint64_t *)&v46, v42, (uint64_t)v18);
          objc_autoreleasePoolPop(v33);
          v34 = (void *)MEMORY[0x2426749F4]();
          sub_23F7C4CC8((uint64_t)v18, a5, a6);
          objc_autoreleasePoolPop(v34);
          sub_23F6B4F84((uint64_t)v18, &qword_256EAA6B0);
          sub_23F6D1E64(v46, *((unint64_t *)&v46 + 1));
          v22 += v41;
          --v20;
        }
        while (v20);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
    objc_autoreleasePoolPop(a2);
    __break(1u);
  }
}

uint64_t sub_23F7C4A2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a3;
  v23 = sub_23FB2E7F8();
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23F6916B8(&qword_256EAA6B0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ToolboxDatabasePayload(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[1];
  if (v14 >> 60 != 15)
  {
    v15 = *a1;
    sub_23F6D1E20(v15, v14);
    sub_23F6D3458(&qword_256EAA6B8, type metadata accessor for ToolboxDatabasePayload, (uint64_t)&unk_23FB61460);
    sub_23FB2C05C();
    if (!v3)
    {
      sub_23F6D1E64(v15, v14);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 0, 1, v11);
      sub_23F6F594C((uint64_t)v10, (uint64_t)v13, type metadata accessor for ToolboxDatabasePayload);
      v20 = v22;
      sub_23F6B4F84(v22, &qword_256EAA6B0);
      sub_23F6F594C((uint64_t)v13, v20, type metadata accessor for ToolboxDatabasePayload);
      return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v20, 0, 1, v11);
    }

    sub_23F6D1E64(v15, v14);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v10, 1, 1, v11);
    sub_23F6B4F84((uint64_t)v10, &qword_256EAA6B0);
  }
  sub_23FB2E378();
  v16 = sub_23FB2E7E0();
  v17 = sub_23FB2F5F0();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_23F68F000, v16, v17, "Payload from ANN search for 1P apps or protocols could not be decoded", v18, 2u);
    MEMORY[0x242674F4C](v18, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v23);
}

void sub_23F7C4CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a3;
  v26 = a2;
  v4 = sub_23FB2EF54();
  v24 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v23 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_23F6916B8(&qword_256EAA6B0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ToolboxDatabasePayload(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v23 - v19;
  sub_23F6B4F58(a1, (uint64_t)v14, &qword_256EAA6B0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v14, 1, v15) == 1)
  {
    sub_23F6B4F84((uint64_t)v14, &qword_256EAA6B0);
  }
  else
  {
    sub_23F6F594C((uint64_t)v14, (uint64_t)v20, type metadata accessor for ToolboxDatabasePayload);
    sub_23F6F5920((uint64_t)v20, (uint64_t)v18, type metadata accessor for ToolboxDatabasePayload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v21 = v24;
      (*(void (**)(char *, uint64_t *, uint64_t))(v24 + 32))(v11, v18, v4);
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v23, v11, v4);
      sub_23F7F11E8();
      v22 = *(void (**)(char *, uint64_t))(v21 + 8);
      v22(v9, v4);
      v22(v11, v4);
    }
    else
    {
      sub_23F7F0E60(&v27, *v18, v18[1]);
      swift_bridgeObjectRelease();
    }
    sub_23F6B4FAC();
  }
}

uint64_t sub_23F7C4F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_23F6B50E8();
  v70 = v3;
  v71 = v4;
  v5 = v0;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_23F6916B8(&qword_256EAA618);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23FB2EE64();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B59E0();
  v67 = v9;
  if (v9)
  {
    v65 = v7;
    sub_23F6916B8(&qword_256EAA6A8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23FB47020;
    sub_23FB2E858();
    v20 = sub_23FB2EE1C();
    v22 = v21;
    v23 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v23(v2, v17);
    *(_QWORD *)(inited + 32) = v20;
    v64 = inited + 32;
    v66 = inited;
    *(_QWORD *)(inited + 40) = v22;
    sub_23FB2E87C();
    sub_23F6B5164((uint64_t)v16, 1, v17);
    v61 = v5;
    v60 = v11;
    if (v52)
    {
      sub_23F6B4F84((uint64_t)v16, &qword_256EAA618);
      v24 = 0;
      v26 = 0;
    }
    else
    {
      v24 = sub_23FB2EE1C();
      v26 = v25;
      v23((uint64_t)v16, v17);
    }
    v27 = v66;
    v28 = v67;
    *(_QWORD *)(v66 + 48) = v24;
    *(_QWORD *)(v27 + 56) = v26;
    v62 = v13;
    result = sub_23FB2E8A0();
    v30 = result;
    v32 = v31;
    v33 = 0;
    v34 = 0;
    v35 = *(_QWORD *)(v27 + 16);
    v36 = v65;
    v69 = v65 + 56;
    v37 = v64;
    v63 = v35;
    while (v34 < v35)
    {
      v38 = v33;
      v39 = (uint64_t *)(v37 + 16 * v34);
      v40 = v39[1];
      if (v40)
      {
        v41 = *v39;
        sub_23F77E1FC();
        v42 = sub_23F7B297C(v41, v40, v28);
        v43 = v42;
        if (*(_QWORD *)(v36 + 16))
        {
          v68 = v42;
          sub_23FB2FC5C();
          sub_23F6B91E8();
          sub_23FB2F200();
          sub_23F6B6A48();
          sub_23F77E1FC();
          sub_23FB2F200();
          sub_23F6B6E44();
          v44 = sub_23FB2FC8C();
          v45 = -1 << *(_BYTE *)(v36 + 32);
          v46 = v44 & ~v45;
          if (((*(_QWORD *)(v69 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
          {
            v47 = ~v45;
            v48 = *(_QWORD *)(v36 + 48);
            while (1)
            {
              v49 = (_QWORD *)(v48 + 32 * v46);
              v51 = v49[2];
              v50 = v49[3];
              v52 = *v49 == v30 && v49[1] == v32;
              if (v52 || (sub_23F6B5280() & 1) != 0)
              {
                if (v51 == v41 && v40 == v50)
                  break;
                sub_23F6B6190();
                if ((sub_23F6B5280() & 1) != 0)
                  break;
              }
              v46 = (v46 + 1) & v47;
              if (((*(_QWORD *)(v69 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) == 0)
              {
                sub_23F6B6E44();
                result = sub_23F6B6A48();
                v36 = v65;
                v28 = v67;
                v37 = v64;
                goto LABEL_26;
              }
            }
            swift_bridgeObjectRelease();
            sub_23F6B6E44();
LABEL_32:
            swift_bridgeObjectRelease();
            sub_23F6B6A48();
            v57 = 0;
            return v57 & 1;
          }
          sub_23F6B6E44();
          result = sub_23F6B6A48();
LABEL_26:
          v35 = v63;
          if ((v68 & 1) != 0)
            goto LABEL_32;
        }
        else
        {
          result = sub_23F6B6E44();
          if ((v43 & 1) != 0)
            goto LABEL_32;
        }
      }
      v33 = 1;
      v34 = 1;
      if ((v38 & 1) != 0)
      {
        swift_setDeallocating();
        sub_23F83A920();
        sub_23F6B6A48();
        v5 = v61;
        v11 = v60;
        goto LABEL_29;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_29:
    if (v11)
    {
      v54 = sub_23FB2E8A0();
      v56 = sub_23F7B297C(v54, v55, v11);
      sub_23F693E04();
    }
    else
    {
      v56 = 1;
    }
    sub_23F6ADC98((_QWORD *)(v5 + 184), *(_QWORD *)(v5 + 208));
    v58 = sub_23F7D29DC();
    v57 = v59(v58) & v56;
    return v57 & 1;
  }
  return result;
}

void sub_23F7C530C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;

  sub_23F6B5220();
  a19 = v22;
  a20 = v23;
  v133 = v24;
  v134 = v21;
  v128 = v20;
  v132 = v25;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = sub_23FB2EE64();
  v130 = *(_QWORD *)(v32 - 8);
  v131 = v32;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v33);
  v129 = (uint64_t)&v126 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = MEMORY[0x24BEE4B08];
  sub_23F7D28E0();
  v35 = *(_QWORD *)(v27 + 16);
  v143 = v31;
  if (!v35 || (v36 = sub_23F78C6DC(), (v37 & 1) == 0))
  {
    sub_23F6B6090();
    sub_23FB2E870();
    if (v47)
    {
      v27 = v47;
      v48 = sub_23F7D28E0();
      v45 = v49;
      sub_23F7D1F14(v48, v49);
      sub_23F7D2860();
      sub_23F6B6090();
      sub_23F7D1F08();
      sub_23F693DFC();
      sub_23F7D2B64();
      if (!sub_23F7D2C24())
      {
        sub_23F7D2A28();
        sub_23F7D2CEC();
        if (v50)
        {
          sub_23F7D1C58();
          v45 = v124;
        }
        sub_23F7D26B0();
LABEL_13:
        v51 = v134;
        v52 = sub_23FB2E888();
        v134 = v51;
        if (v51)
        {
          sub_23F6B6090();
          sub_23F693E04();
          goto LABEL_103;
        }
        v137 = *(_QWORD *)(v52 + 16);
        if (!v137)
          goto LABEL_92;
        sub_23F6B5AC8();
        sub_23FB2EF90();
        sub_23F6BC450();
        v135 = *(_QWORD *)(v53 + 72);
        v136 = v27 + v54;
        v127 = v27;
        sub_23F6B5508();
        v55 = 0;
        while (1)
        {
          v140 = v55;
          v56 = v136 + v135 * v55;
          v57 = sub_23FB2EF84();
          v142 = *(_QWORD *)(v57 + 16);
          if (v142)
          {
            v138 = v57;
            v139 = v56;
            v141 = v57 + 32;
            swift_bridgeObjectRetain();
            v58 = 0;
            while (1)
            {
              v59 = (uint64_t *)(v141 + 16 * v58);
              v61 = *v59;
              v60 = v59[1];
              sub_23F77DCD4();
              v62 = sub_23F7D2AF4();
              sub_23F7D1F14(v62, v63);
              sub_23FB2F254();
              sub_23F693E04();
              v64 = sub_23F7D1F08();
              sub_23F693DFC();
              v65 = sub_23F7D2A70() & ~(-1 << v146);
              if (((*(unint64_t *)((char *)&a13 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
                goto LABEL_24;
              if (*(_QWORD *)(a12 + 8 * v65) != v64)
                break;
LABEL_25:
              if (!*(_QWORD *)(v29 + 16))
                goto LABEL_32;
              sub_23F7D2DF0();
              sub_23F7D23A4();
              if ((v68 & 1) == 0)
                goto LABEL_32;
              sub_23F7D2DC8();
              if (!v69)
              {
                while (1)
                {
                  sub_23F7D2620();
                  if ((v70 & 1) == 0)
                    break;
                  sub_23F7D2DC8();
                  if (v69)
                    goto LABEL_37;
                }
LABEL_32:
                sub_23F77DCD4();
                if ((sub_23F7D2618() & 1) == 0)
                {
                  sub_23F7D1CD8();
                  v45 = v73;
                }
                v71 = *(_QWORD *)(v45 + 16);
                if (v71 >= *(_QWORD *)(v45 + 24) >> 1)
                {
                  sub_23F7D1C58();
                  v45 = v74;
                }
                *(_QWORD *)(v45 + 16) = v71 + 1;
                v72 = v45 + 32 * v71;
                *(_QWORD *)(v72 + 32) = v64;
                *(_QWORD *)(v72 + 40) = v61;
                *(_QWORD *)(v72 + 48) = v60;
                *(_BYTE *)(v72 + 56) = 0;
              }
LABEL_37:
              sub_23F6B644C();
              if (++v58 == v142)
              {
                sub_23F6B6740();
                goto LABEL_40;
              }
            }
            while (1)
            {
              v65 = (v65 + 1) & ~(-1 << v146);
              if (((*(unint64_t *)((char *)&a13 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
                break;
              if (*(_QWORD *)(a12 + 8 * v65) == v64)
                goto LABEL_25;
            }
LABEL_24:
            sub_23F77D9A4();
            v66 = sub_23F7D2E04();
            sub_23F7F3D44(v66, v65, v67);
            sub_23F7D29E8();
            goto LABEL_25;
          }
          swift_bridgeObjectRelease();
LABEL_40:
          v75 = sub_23FB2EF78();
          v142 = *(_QWORD *)(v75 + 16);
          if (v142)
            break;
          swift_bridgeObjectRelease();
LABEL_63:
          v55 = v140 + 1;
          if (v140 + 1 == v137)
            goto LABEL_89;
        }
        v141 = v75 + 32;
        v139 = v75;
        swift_bridgeObjectRetain();
        v76 = 0;
        while (1)
        {
          v77 = (uint64_t *)(v141 + 16 * v76);
          v79 = *v77;
          v78 = v77[1];
          sub_23F77DCD4();
          v80 = sub_23F7D2AF4();
          sub_23F7D1F14(v80, v81);
          sub_23FB2F254();
          sub_23F693E04();
          v82 = sub_23F7D1F08();
          sub_23F693DFC();
          v83 = sub_23F7D2A70() & ~(-1 << v146);
          if (((*(unint64_t *)((char *)&a13 + ((v83 >> 3) & 0xFFFFFFFFFFFFF8)) >> v83) & 1) == 0)
            goto LABEL_47;
          if (*(_QWORD *)(a12 + 8 * v83) != v82)
            break;
LABEL_48:
          if (!*(_QWORD *)(v29 + 16))
            goto LABEL_55;
          sub_23F7D2DF0();
          sub_23F7D23A4();
          if ((v86 & 1) == 0)
            goto LABEL_55;
          sub_23F7D2DC8();
          if (!v69)
          {
            while (1)
            {
              sub_23F7D2620();
              if ((v87 & 1) == 0)
                break;
              sub_23F7D2DC8();
              if (v69)
                goto LABEL_60;
            }
LABEL_55:
            sub_23F77DCD4();
            if ((sub_23F7D2618() & 1) == 0)
            {
              sub_23F7D1CD8();
              v45 = v90;
            }
            v88 = *(_QWORD *)(v45 + 16);
            if (v88 >= *(_QWORD *)(v45 + 24) >> 1)
            {
              sub_23F7D1C58();
              v45 = v91;
            }
            *(_QWORD *)(v45 + 16) = v88 + 1;
            v89 = v45 + 32 * v88;
            *(_QWORD *)(v89 + 32) = v82;
            *(_QWORD *)(v89 + 40) = v79;
            *(_QWORD *)(v89 + 48) = v78;
            *(_BYTE *)(v89 + 56) = 1;
          }
LABEL_60:
          sub_23F6B644C();
          if (++v76 == v142)
          {
            sub_23F6B6740();
            goto LABEL_63;
          }
        }
        while (1)
        {
          v83 = (v83 + 1) & ~(-1 << v146);
          if (((*(unint64_t *)((char *)&a13 + ((v83 >> 3) & 0xFFFFFFFFFFFFF8)) >> v83) & 1) == 0)
            break;
          if (*(_QWORD *)(a12 + 8 * v83) == v82)
            goto LABEL_48;
        }
LABEL_47:
        sub_23F77D9A4();
        v84 = sub_23F7D2E04();
        sub_23F7F3D44(v84, v83, v85);
        sub_23F7D29E8();
        goto LABEL_48;
      }
      sub_23F693E04();
    }
    v45 = MEMORY[0x24BEE4AF8];
    goto LABEL_13;
  }
  v38 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 32 * v36);
  v39 = *v38;
  v40 = v38[1];
  v41 = v38[2];
  v42 = v38[3];
  sub_23F6B90D8();
  sub_23F77E1FC();
  sub_23F77DCD4();
  sub_23F6B6090();
  v43 = sub_23F7D28E0();
  v45 = v44;
  sub_23F7D1F14(v43, v44);
  sub_23FB2F254();
  sub_23F6B6090();
  v46 = sub_23F7D1F08();
  sub_23F693DFC();
  sub_23F7D2394();
  if (sub_23F7D2648())
  {
    v45 = MEMORY[0x24BEE4AF8];
    if (!v39)
      goto LABEL_78;
  }
  else
  {
    sub_23F77E1FC();
    sub_23F7D2A28();
    sub_23F7D2CEC();
    if (v50)
    {
      sub_23F7D1C58();
      v45 = v125;
    }
    *(_QWORD *)(v45 + 16) = &v144;
    v92 = v45 + 32 * v31;
    *(_QWORD *)(v92 + 32) = v46;
    *(_QWORD *)(v92 + 40) = v41;
    *(_QWORD *)(v92 + 48) = v42;
    *(_BYTE *)(v92 + 56) = 0;
    v31 = v143;
    if (!v39)
    {
LABEL_78:
      if (v40)
      {
LABEL_79:
        v100 = *(_QWORD *)(v40 + 16);
        if (v100)
        {
          v140 = v42;
          v142 = v39;
          sub_23F6B91E8();
          v141 = v40;
          v101 = v40 + 40;
          do
          {
            sub_23F6B5508();
            v102 = sub_23F7D2AF4();
            sub_23F7D1F14(v102, v103);
            sub_23F7D2850();
            sub_23F756640();
            sub_23F7D1F08();
            sub_23F693DFC();
            sub_23F7D2394();
            if (!sub_23F7D2648())
            {
              sub_23F6B5508();
              if ((sub_23F7D2618() & 1) == 0)
              {
                sub_23F7D1CD8();
                v45 = v105;
              }
              if (*(_QWORD *)(v45 + 16) >= *(_QWORD *)(v45 + 24) >> 1)
              {
                sub_23F7D1C58();
                v45 = v106;
              }
              sub_23F7D2EC4();
              *(_BYTE *)(v104 + 56) = 1;
            }
            v101 += 16;
            sub_23F693E04();
            --v100;
          }
          while (v100);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_89:
          swift_bridgeObjectRelease_n();
        }
        else
        {
          sub_23F717D54();
          sub_23F6B6E44();
          sub_23F6B644C();
        }
        v31 = v143;
        goto LABEL_95;
      }
      goto LABEL_91;
    }
  }
  v93 = *(_QWORD *)(v39 + 16);
  if (v93)
  {
    v140 = v42;
    v141 = v40;
    sub_23F6B91E8();
    v142 = v39;
    v94 = v39 + 40;
    do
    {
      sub_23F6B5508();
      v95 = sub_23F7D2AF4();
      sub_23F7D1F14(v95, v96);
      sub_23F7D2850();
      sub_23F756640();
      sub_23F7D1F08();
      sub_23F693DFC();
      sub_23F7D2394();
      if (!sub_23F7D2648())
      {
        sub_23F6B5508();
        if ((sub_23F7D2618() & 1) == 0)
        {
          sub_23F7D1CD8();
          v45 = v98;
        }
        if (*(_QWORD *)(v45 + 16) >= *(_QWORD *)(v45 + 24) >> 1)
        {
          sub_23F7D1C58();
          v45 = v99;
        }
        sub_23F7D2EC4();
        *(_BYTE *)(v97 + 56) = 0;
      }
      v94 += 16;
      sub_23F693E04();
      --v93;
    }
    while (v93);
    v39 = v142;
    sub_23F6B6740();
    v31 = v143;
    v42 = v140;
    v40 = v141;
    goto LABEL_78;
  }
  v31 = v143;
  if (v40)
    goto LABEL_79;
LABEL_91:
  sub_23F6B6E44();
  sub_23F717D54();
LABEL_92:
  swift_bridgeObjectRelease();
LABEL_95:
  sub_23FB2E858();
  v107 = sub_23FB2EE34();
  v109 = v108;
  v110 = sub_23F7D2C30();
  v111(v110);
  sub_23FB2E8AC();
  v144 = v107;
  v145 = v109;
  sub_23F77DCD4();
  sub_23FB2F254();
  sub_23F6B644C();
  sub_23F717D54();
  sub_23F7A0550(0, v144, v145);
  sub_23F693DFC();
  v112 = sub_23F7D28E0();
  sub_23F7D1F14(v112, v113);
  sub_23F7D2860();
  sub_23F717D54();
  sub_23F7D1F08();
  sub_23F693DFC();
  sub_23F7D2B64();
  if (sub_23F7D2C24())
  {
    sub_23F693E04();
  }
  else
  {
    if ((sub_23F7D2618() & 1) == 0)
    {
      sub_23F7D1CD8();
      v45 = v122;
    }
    v31 = *(_QWORD *)(v45 + 16);
    if (v31 >= *(_QWORD *)(v45 + 24) >> 1)
    {
      sub_23F7D1C58();
      v45 = v123;
    }
    sub_23F7D26B0();
  }
  sub_23F7C6B30(v31, v132, v133, v114, v115, v116, v117, v118, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136,
    v137);
  v120 = MEMORY[0x24BDAC7A8](v119);
  *(&v126 - 2) = v121;
  *(&v126 - 1) = v120;
  sub_23F6B6548();
  sub_23F70E094((void (*)(__int128 *__return_ptr, __int128 *))sub_23F7CE748, (uint64_t)(&v126 - 4), v45);
  sub_23F693DFC();
  sub_23F6B6090();
  sub_23F6B6090();
LABEL_103:
  sub_23F6B5994();
  sub_23F6B5100();
}

uint64_t sub_23F7C5BC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = *((_BYTE *)a1 + 24);
  v9 = sub_23FB2E8A0();
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = v7;
  *(_BYTE *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_23F7C5C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, unsigned __int8 a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  sub_23F6B5220();
  a22 = v27;
  a23 = v28;
  v29 = v24;
  v30 = v23;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  sub_23F693F0C();
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B573C();
  if (v32)
  {
    v40 = *(_BYTE *)(v32 + 16);
    sub_23F7D2EB0();
    if ((v40 & 1) != 0)
    {
      sub_23F7CE170();
      sub_23F6B5AD4();
      *v53 = 5;
      swift_willThrow();
      sub_23F7D24C8();
      goto LABEL_16;
    }
    sub_23F7D24C8();
  }
  v59 = v36;
  v60 = v34;
  v61 = v29;
  v41 = *(_QWORD *)(v30 + 208);
  v42 = *(_QWORD *)(v30 + 216);
  sub_23F6ADC98((_QWORD *)(v30 + 184), v41);
  (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(v42 + 8))(&a13, v41, v42);
  a12 = a13;
  v43 = *(_QWORD *)(v38 + 16);
  v44 = MEMORY[0x24BEE4AF8];
  if (v43)
  {
    v57 = v26;
    v58 = v25;
    sub_23F711194(0, v43, 0);
    v56 = v38;
    v45 = (uint64_t *)(v38 + 64);
    v46 = v43;
    do
    {
      v48 = *(v45 - 1);
      v47 = *v45;
      v50 = *(_QWORD *)(v44 + 16);
      v49 = *(_QWORD *)(v44 + 24);
      sub_23F6B90D8();
      if (v50 >= v49 >> 1)
        sub_23F711194(v49 > 1, v50 + 1, 1);
      *(_QWORD *)(v44 + 16) = v50 + 1;
      v51 = v44 + 16 * v50;
      *(_QWORD *)(v51 + 32) = v48;
      *(_QWORD *)(v51 + 40) = v47;
      v45 += 7;
      --v46;
    }
    while (v46);
    v25 = v58;
    v38 = v56;
    v26 = v57;
  }
  v52 = v30 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_23F6B5508();
  swift_retain();
  sub_23F7D2EB0();
  sub_23F6B5F1C();
  sub_23F7B5064(v44, 200, v52, &a12, v38, v59, v60, (unsigned __int8 *)v30, v32);
  if (v61)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_23FB2E3C0();
    sub_23F6B5F1C();
    sub_23FB2E7E0();
    v54 = sub_23F7D2974();
    if (sub_23F7B0C7C(v54))
    {
      v55 = (uint8_t *)sub_23F693DF4();
      *(_DWORD *)v55 = 134217984;
      sub_23FB2F680();
      sub_23F756640();
      sub_23F7B0B48(&dword_23F68F000, v26, (os_log_type_t)v32, "ToolEmbeddingToolDatabase inserted %ld embeddings", v55);
      sub_23F693DD0();
    }

    sub_23F6B5908();
    sub_23F6B51EC((uint64_t)v26, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  }
LABEL_16:
  sub_23F77DB18();
  sub_23F6B5100();
}

uint64_t sub_23F7C5EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v16 = type metadata accessor for ToolboxVersion(0);
  MEMORY[0x24BDAC7A8](v16);
  v49 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23FB2E7F8();
  result = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < a1)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a1 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v23 = *(_QWORD *)(a4 + 16);
  if (v23 >= a1 && (uint64_t)v23 >= a2)
  {
    v48 = v16;
    v51 = result;
    v52 = v22;
    v50 = v20;
    v53 = a8;
    MEMORY[0x24BDAC7A8](result);
    v45[-4] = a5;
    v45[-3] = a6;
    v45[-2] = a7;
    v45[-1] = a3;
    v25 = swift_bridgeObjectRetain();
    v26 = v54;
    sub_23F7B2404(v25, a4 + 32, a1, (2 * a2) | 1, (void (*)(_QWORD, _QWORD))sub_23F7CE4F0, (uint64_t)&v45[-6]);
    swift_bridgeObjectRelease();
    if (!v26)
    {
      sub_23FB2C59C();
      swift_bridgeObjectRelease();
      if (v53)
      {
        v28 = *(_BYTE *)(v53 + 16);
        swift_retain();
        if ((v28 & 1) != 0)
        {
          v29 = v52;
          sub_23FB2E3C0();
          swift_retain_n();
          v30 = sub_23FB2E7E0();
          v31 = sub_23FB2F5D8();
          v32 = v31;
          if (os_log_type_enabled(v30, v31))
          {
            LODWORD(v54) = v32;
            v33 = (uint8_t *)swift_slowAlloc();
            v34 = swift_slowAlloc();
            v47 = v34;
            *(_DWORD *)v33 = 136315138;
            v56 = v34;
            v45[1] = v33 + 4;
            v46 = v33;
            v35 = a7[26];
            v36 = a7[27];
            sub_23F6ADC98(a7 + 23, v35);
            v37 = v49;
            (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
            v38 = &v37[*(int *)(v48 + 20)];
            v39 = sub_23FB2D3C4();
            v41 = v40;
            v42 = sub_23FB2D3D0();
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v38, v42);
            v55 = sub_23F69334C(v39, v41, &v56);
            sub_23FB2F680();
            swift_release_n();
            swift_bridgeObjectRelease();
            v43 = v46;
            _os_log_impl(&dword_23F68F000, v30, (os_log_type_t)v54, "ToolEmbeddingToolDatabase: received cancellation request. Cancelling %s toolbox.", v46, 0xCu);
            v44 = v47;
            swift_arrayDestroy();
            MEMORY[0x242674F4C](v44, -1, -1);
            MEMORY[0x242674F4C](v43, -1, -1);

            swift_release();
            (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v51);
          }
          else
          {

            swift_release();
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v51);
          }
          v27 = 0;
          return v27 & 1;
        }
        swift_release();
      }
      v27 = 1;
    }
    return v27 & 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

void sub_23F7C6274(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v26 = a4;
  v7 = type metadata accessor for ToolboxDatabasePayload(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v9 + 1) = v10;
  v9[16] = v11;
  swift_storeEnumTagMultiPayload();
  v12 = swift_bridgeObjectRetain();
  v13 = (void *)MEMORY[0x2426749F4](v12);
  sub_23F6D3458(&qword_256EAA658, type metadata accessor for ToolboxDatabasePayload, (uint64_t)&unk_23FB61488);
  sub_23FB2C0E0();
  if (v4)
  {
    objc_autoreleasePoolPop(v13);
    sub_23F6B4FAC();
    return;
  }
  v15 = v14;
  v16 = v27;
  objc_autoreleasePoolPop(v13);
  sub_23F6916B8(&qword_256EAA660);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23FB47010;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v16 + 16) > a1)
  {
    v18 = v17;
    swift_bridgeObjectRetain();
    v19 = sub_23FB2F3E0();
    v27 = v15;
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    swift_bridgeObjectRetain();
    v23 = v26;
    sub_23FB2C698();
    sub_23F6B4FAC();
    v24 = sub_23FB2C6B0();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v23, 0, 1, v24);
    return;
  }
  __break(1u);
}

void sub_23F7C647C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  void (*v42)(uint64_t);
  os_log_type_t v43;
  uint64_t v44;

  sub_23F6B5220();
  a19 = v22;
  a20 = v23;
  v24 = v20;
  v26 = v25;
  v28 = v27;
  type metadata accessor for ToolboxVersion(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F7D232C();
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B54F8();
  if (*(_QWORD *)(sub_23F7BD770(v28, v26) + 16))
  {
    v31 = sub_23F6B90D8();
    sub_23F6BB660(v31);
    sub_23F717D54();
    sub_23FB2C590();
    if (v21)
    {
      sub_23F717D54();
      sub_23F7D24FC();
    }
    else
    {
      sub_23F7D24FC();
      sub_23FB2E378();
      sub_23F7B0C8C();
      sub_23F6B90D8();
      v32 = sub_23FB2E7E0();
      v33 = sub_23FB2F5D8();
      if (os_log_type_enabled(v32, v33))
      {
        v44 = sub_23F693DF4();
        a10 = sub_23F693DF4();
        *(_DWORD *)v44 = 136315394;
        v43 = v33;
        v35 = v24[26];
        v34 = v24[27];
        sub_23F7D2EFC(v24 + 23);
        (*(void (**)(uint64_t, uint64_t))(v34 + 16))(v35, v34);
        v36 = sub_23FB2D3C4();
        v38 = v37;
        sub_23FB2D3D0();
        v39 = sub_23F7D243C();
        v40(v39);
        sub_23F69334C(v36, v38, &a10);
        sub_23FB2F680();
        sub_23F717D5C();
        sub_23F6B6A48();
        *(_WORD *)(v44 + 12) = 2048;
        sub_23F717D54();
        sub_23FB2F680();
        sub_23F717D54();
        _os_log_impl(&dword_23F68F000, v32, v43, "%s toolbox: Removed %ld tools from the toolbox", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        sub_23F693DD0();
      }

      sub_23F717D5C();
      sub_23F6B6740();
      v41 = sub_23F6B6098();
      v42(v41);
    }
  }
  else
  {
    sub_23F717D54();
  }
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F7C671C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23F6B5220();
  v2 = v1;
  v4 = v3;
  v39 = sub_23F7D2504();
  v37 = *(_QWORD *)(v39 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v38 = v6;
  sub_23F6D398C();
  sub_23FB2C674();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B59E0();
  v8 = "ls";
  sub_23F6916B8(&qword_256EA7900);
  sub_23F7D2350();
  *(_OWORD *)(sub_23F7D1EFC() + 16) = xmmword_23FB47010;
  if (v2)
  {
    sub_23F77DCD4();
    sub_23F6B54F8();
    sub_23F7D27AC();
    sub_23F6916B8(&qword_256EA6260);
    v9 = sub_23F6916B8(&qword_256EA28F8);
    sub_23F7D1F40();
    v12 = v11 & ~v10;
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23FB47010;
    v14 = v13 + v12;
    v15 = (_QWORD *)(v13 + v12 + *(int *)(v9 + 48));
    v16 = *MEMORY[0x24BEBFDD8];
    v17 = sub_23F7D2ABC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v14, v16, v17);
    *v15 = v4;
    v15[1] = v2;
    v18 = *MEMORY[0x24BEBFE48];
    sub_23F7D270C();
    v19 = sub_23F7D2938();
    sub_23F6B5EF0(v19, v18, v20);
    sub_23F7D281C((uint64_t)v15);
    sub_23F7D2F60();
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_23FB47010;
    v22 = v21 + v12;
    v8 = "AssetUtils" + 8;
    sub_23F7B8680(v22, (_QWORD *)(v22 + *(int *)(v9 + 48)), 3);
  }
  else
  {
    sub_23F6B54F8();
    sub_23F7D27AC();
    sub_23F6916B8(&qword_256EA6260);
    v23 = sub_23F6916B8(&qword_256EA28F8);
    sub_23F7D1F54();
    v24 = (__n128 *)swift_allocObject();
    sub_23F7D2FC8(v24, (__n128)xmmword_23FB47010);
    v25 = *MEMORY[0x24BEBFDD0];
    sub_23F7D2ABC();
    v26 = sub_23F7D2938();
    v27(v26, v25);
    v28 = sub_23F7D270C();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v23, 1, 1, v28);
    sub_23FB2C5FC();
  }
  sub_23F6916B8(&qword_256EA7900);
  sub_23F7D2350();
  *(_OWORD *)(sub_23F7D1EFC() + 16) = *((_OWORD *)v8 + 1);
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v38, *MEMORY[0x24BEBFE30], v39);
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23FB2C65C();
  sub_23F6916B8(&qword_256EA6260);
  v29 = sub_23F6916B8(&qword_256EA28F8);
  v30 = *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72);
  sub_23F6BC570();
  v33 = v32 & ~v31;
  v34 = sub_23F7D1EFC();
  *(_OWORD *)(v34 + 16) = xmmword_23FB4F1A0;
  v35 = v34 + v33;
  sub_23F7B8680(v35, (_QWORD *)(v35 + *(int *)(v29 + 48)), 1);
  sub_23F7D2C74(v35 + v30, *(int *)(v29 + 48));
  sub_23F7D2C98(v35 + 2 * v30, *(int *)(v29 + 48));
  sub_23F6B9D04();
  sub_23FB2C5FC();
  sub_23F6B9CE8();
  v36 = sub_23FB2C578();
  sub_23F6B5908();
  if (!v0)
    sub_23F7A38E8(v36);
  sub_23F77DB18();
  sub_23F6B5100();
}

void sub_23F7C6B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, _QWORD, uint64_t);
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  void (*v107)(uint64_t);
  char v108;
  void (*v109)(uint64_t);
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  void (*v123)(uint64_t);
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165[6];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t *v185;
  void (*v186)(_QWORD, _QWORD, _QWORD);
  char *v187;
  void (*v188)(uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t);
  uint64_t v194;

  sub_23F6B50E8();
  a19 = v24;
  a20 = v25;
  v26 = v20;
  v184 = v27;
  v181 = v28;
  v30 = v29;
  v189 = v29;
  sub_23F6916B8(&qword_256EAA618);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B6580();
  sub_23F70D434(v34);
  v35 = sub_23FB2E8D0();
  sub_23F6B53F8(v35, (uint64_t)&a17);
  v171 = v36;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v37);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v38);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6D3D14();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v40);
  sub_23F6B6580();
  sub_23F70D434(v41);
  v42 = sub_23FB2EE4C();
  sub_23F6B53F8(v42, (uint64_t)&a15);
  v169 = v43;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6B6580();
  sub_23F70D434(v46);
  v177 = sub_23FB2EE10();
  v175 = *(_QWORD *)(v177 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F693E0C();
  v176 = v48;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v49);
  sub_23F6B6580();
  sub_23F70D434(v50);
  v179 = sub_23FB2EE64();
  v174 = *(_QWORD *)(v179 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F6B51A4();
  v178 = v52;
  sub_23F6916B8(&qword_256EAA620);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v53);
  sub_23F6B51A4();
  v185 = v54;
  sub_23F6D398C();
  v193 = (void (*)(uint64_t, uint64_t))sub_23FB2C674();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v55);
  v187 = (char *)v165 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6D398C();
  v57 = sub_23FB2E81C();
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v58);
  sub_23F70D7F8();
  v59 = sub_23FB2C680();
  v191 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 - 8);
  v192 = v59;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v60);
  sub_23F693EB0();
  v62 = v20[31];
  v61 = v20[32];
  sub_23F6ADC98(v20 + 28, v62);
  v190 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 8))(v30, v62, v61);
  v188 = v63;
  sub_23F6916B8(&qword_256EAA628);
  v64 = sub_23F6916B8(&qword_256EAA630);
  sub_23F7D1F40();
  v67 = v66 & ~v65;
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_23FB47010;
  v69 = (uint64_t *)(v68 + v67 + *(int *)(v64 + 48));
  v183 = v26;
  *v21 = 0;
  v21[1] = 0;
  (*((void (**)(_QWORD *, _QWORD, uint64_t))v191 + 13))(v21, *MEMORY[0x24BEBFE28], v192);
  sub_23F6B54F8();
  v70 = v189;
  sub_23F7D25BC();
  v71 = v188;
  *v69 = v190;
  v69[1] = (uint64_t)v71;
  v72 = *MEMORY[0x24BEBFE48];
  v73 = sub_23F7D270C();
  v74 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v73 - 8) + 104);
  v182 = v72;
  v186 = v74;
  v74(v69, v72, v73);
  sub_23F6D3458((unint64_t *)&qword_256EA8C80, (uint64_t (*)(uint64_t))MEMORY[0x24BEBFE00], MEMORY[0x24BEBFE10]);
  v194 = sub_23FB2F050();
  v75 = sub_23FB2E864();
  if (*(_QWORD *)(v75 + 16))
  {
    v180 = v73;
    LODWORD(v191) = 0;
    LODWORD(v190) = 0;
    v70 = 0;
    sub_23F78F3B0();
    v77 = v75 + v76;
    v73 = *MEMORY[0x24BEB8E98];
    v78 = *MEMORY[0x24BEB8E90];
    LODWORD(v193) = *MEMORY[0x24BEB8EA0];
    v192 = v79;
    v188 = (void (*)(uint64_t))(v79 - 1);
    while (1)
    {
      while (1)
      {
        if (v70 >= *(_QWORD *)(v75 + 16))
        {
          __break(1u);
          goto LABEL_58;
        }
        (*(void (**)(uint64_t *, unint64_t, uint64_t))(v22 + 16))(v23, v77 + *(_QWORD *)(v22 + 72) * v70, v57);
        v80 = (*(uint64_t (**)(uint64_t *, uint64_t))(v22 + 88))(v23, v57);
        v81 = v80;
        v82 = v80 != v73;
        if (v80 == (_DWORD)v73)
        {
          sub_23F7D1F7C(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
          v83 = sub_23F7B0D00();
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v23, v83);
          if ((v190 & 1) != 0)
            goto LABEL_18;
          if (v188 == (void (*)(uint64_t))v70)
          {
            sub_23F693DFC();
            LODWORD(v190) = 0;
            goto LABEL_20;
          }
          goto LABEL_16;
        }
        if (v80 != v78)
          break;
        sub_23F7D1F7C(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
LABEL_14:
        swift_bridgeObjectRelease();
        if ((v191 & 1) != 0)
        {
LABEL_18:
          sub_23F693DFC();
          LODWORD(v190) = 1;
LABEL_20:
          v85 = 1;
LABEL_21:
          sub_23F7D2FFC();
          goto LABEL_22;
        }
        if (v188 == (void (*)(uint64_t))v70)
        {
          sub_23F693DFC();
          v85 = 0;
          LODWORD(v190) = 1;
          goto LABEL_21;
        }
LABEL_16:
        LODWORD(v191) = v81 == v73;
        ++v70;
        LODWORD(v190) = v82;
      }
      if (v80 == (_DWORD)v193)
      {
        sub_23F7D1F7C(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
        v190 = v23[1];
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      ++v70;
      sub_23F7D1F7C(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
      if (v192 == v70)
      {
        sub_23F693DFC();
        sub_23F7D2FFC();
        v84 = v184;
        v85 = (char)v191;
        goto LABEL_23;
      }
    }
  }
  sub_23F693DFC();
  LODWORD(v190) = 0;
  v85 = 0;
  v23 = v185;
  v22 = (uint64_t)v186;
LABEL_22:
  v84 = v184;
LABEL_23:
  v86 = sub_23FB2E8A0();
  v88 = v87;
  if (v84)
  {
    sub_23F6B6E44();
    v88 = v84;
    sub_23F6B54F8();
    v89 = sub_23F7D1E14();
    *v23 = 3;
    sub_23F7D263C(v89, *MEMORY[0x24BEBFE50]);
    sub_23F7D1CAC();
    sub_23F77E1FC();
    sub_23F6B54F8();
    v90 = sub_23F7D1E14();
    *v23 = v181;
LABEL_55:
    v159 = v182;
    v23[1] = v88;
    sub_23F7D263C(v90, v159);
    sub_23F7D1CAC();
    goto LABEL_56;
  }
  if ((v190 & 1) != 0)
  {
    v91 = v86;
    sub_23F6B54F8();
    v92 = sub_23F7D1E14();
    *v23 = 4;
    sub_23F7D263C(v92, *MEMORY[0x24BEBFE50]);
    sub_23F7D1CAC();
LABEL_54:
    sub_23F6B54F8();
    v90 = sub_23F7D1E14();
    *v23 = v91;
    goto LABEL_55;
  }
  sub_23F6B6E44();
  v180 = v73;
  if ((v85 & 1) != 0)
  {
    v93 = *MEMORY[0x24BEBA278];
    v94 = v173;
    goto LABEL_42;
  }
  v95 = v178;
  sub_23F7D2688();
  v94 = v173;
  sub_23F7D2C68();
  v22 = v95;
  v193 = *(void (**)(uint64_t, uint64_t))(v174 + 8);
  v193(v95, v179);
  v96 = v175;
  v97 = v176;
  v98 = *(void (**)(uint64_t))(v175 + 104);
  LODWORD(v192) = *MEMORY[0x24BEBA278];
  v99 = v177;
  v98(v176);
  LOBYTE(v95) = sub_23F7D2C00();
  v100 = *(_QWORD *)(v96 + 8);
  sub_23F7D25FC(v97);
  sub_23F7D25FC(v94);
  if ((v95 & 1) != 0)
  {
    v188 = v98;
    v190 = v100;
    sub_23F7D2688();
    v101 = v167;
    sub_23F7D2C48();
    sub_23F7D2388(v22);
    v102 = *(void (**)(uint64_t, _QWORD, uint64_t))(v169 + 104);
    v103 = v168;
    v104 = v170;
    v102(v168, *MEMORY[0x24BEBA2C0], v170);
    v105 = sub_23F7D2BCC();
    sub_23F7D29F8(v103);
    sub_23F7D29F8(v101);
    v106 = v171;
    v191 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v171 + 16);
    v191(v165[4], v70, v172);
    if ((v105 & 1) != 0)
    {
      v107 = *(void (**)(uint64_t))(v106 + 8);
      sub_23F7D2DBC();
      v23 = v185;
LABEL_33:
      v109 = v107;
      v110 = v193;
      v111 = v165[3];
      sub_23FB2E87C();
      v112 = sub_23F77E654();
      v113 = v179;
      sub_23F6B5164(v112, v114, v179);
      if (v115)
      {
        sub_23F6B4F84(v111, &qword_256EAA618);
        v91 = 0;
        v88 = 0;
        sub_23F7D2B4C();
        v153 = v110;
      }
      else
      {
        v91 = sub_23FB2EE1C();
        v88 = v151;
        v152 = sub_23F7B0E48();
        v153 = v110;
        ((void (*)(uint64_t))v110)(v152);
        sub_23F7D2B4C();
      }
      sub_23F759774(v113, v189, v191);
      if (!v88)
      {
        v154 = v178;
        sub_23FB2E858();
        v91 = sub_23FB2EE1C();
        v88 = v155;
        v153(v154, v179);
      }
      v156 = sub_23F7D2958();
      v109(v156);
      v144 = v180;
      goto LABEL_52;
    }
    sub_23FB2E858();
    sub_23F7D2C48();
    sub_23F7D2388(v22);
    v102(v103, *MEMORY[0x24BEBA2D8], v104);
    v108 = sub_23F7D2BCC();
    sub_23F7D29F8(v103);
    sub_23F7D29F8(v101);
    v107 = *(void (**)(uint64_t))(v171 + 8);
    sub_23F7D2DBC();
    v23 = v185;
    v70 = v189;
    v97 = v176;
    v99 = v177;
    v94 = v173;
    v98 = v188;
    if ((v108 & 1) != 0)
      goto LABEL_33;
  }
  sub_23F7D2688();
  sub_23FB2EE28();
  v116 = v193;
  v193(v22, v179);
  v117 = v192;
  ((void (*)(uint64_t, _QWORD, uint64_t))v98)(v97, v192, v99);
  LODWORD(v191) = sub_23F7D2C00();
  sub_23F7D25FC(v97);
  sub_23F7D25FC(v94);
  if ((v191 & 1) != 0)
  {
    v93 = v117;
    v118 = v179;
    sub_23F7D2688();
    v119 = v167;
    sub_23FB2EE58();
    v116(v22, v118);
    v120 = v169;
    v121 = v170;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v169 + 104))(v168, *MEMORY[0x24BEBA2C8], v170);
    v122 = sub_23FB2EE04();
    v123 = *(void (**)(uint64_t))(v120 + 8);
    v124 = sub_23F6B6098();
    v123(v124);
    ((void (*)(uint64_t, uint64_t))v123)(v119, v121);
    v22 = (uint64_t)v186;
    if ((v122 & 1) != 0)
    {
      v73 = v165[1];
      v125 = v70;
      sub_23FB2E87C();
      sub_23F6B5164(v73, 1, v179);
      if (v115)
      {
        sub_23F6B4F84(v73, &qword_256EAA618);
        v91 = 0;
        v88 = 0;
      }
      else
      {
LABEL_58:
        v125 = v73;
        v91 = sub_23FB2EE1C();
        v88 = v160;
        v161 = sub_23F7D29DC();
        ((void (*)(uint64_t))v193)(v161);
      }
      sub_23F7D2FAC();
      v162 = v165[0];
      sub_23F759774(v165[0], v70, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 16));
      if (!v88)
      {
        v163 = v178;
        sub_23FB2E858();
        v91 = sub_23FB2EE1C();
        v88 = v164;
        sub_23F7D2388(v163);
      }
      sub_23F6B56E0(v162, *(uint64_t (**)(uint64_t, uint64_t))(v125 + 8));
      sub_23F6B54F8();
      sub_23F7D1E14();
      *v23 = 2;
      v157 = *MEMORY[0x24BEBFE50];
      v158 = v23;
      v144 = v180;
      goto LABEL_53;
    }
  }
  else
  {
    v22 = (uint64_t)v186;
    v93 = v117;
  }
LABEL_42:
  sub_23F7D2688();
  sub_23F7D2C68();
  v126 = sub_23F6B61DC();
  v127 = v94;
  v128 = v179;
  v193 = v129;
  v129(v126, v179);
  v130 = v93;
  v132 = v175;
  v131 = v176;
  v133 = v177;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v175 + 104))(v176, v130, v177);
  sub_23F6D3458(&qword_256EAA638, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA288], MEMORY[0x24BEBA298]);
  sub_23F78F478();
  v134 = sub_23FB2F11C();
  v135 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
  v135(v131, v133);
  v135(v127, v133);
  if ((v134 & 1) == 0)
  {
    v136 = v165[5];
    v137 = v189;
    v138 = v189;
    sub_23FB2E87C();
    v139 = sub_23F77E654();
    sub_23F6B5164(v139, v140, v128);
    if (v115)
    {
      sub_23F6B4F84(v136, &qword_256EAA618);
      v141 = 0;
      v88 = 0;
    }
    else
    {
      v137 = v136;
      v141 = sub_23FB2EE1C();
      v88 = v142;
      v143 = sub_23F7D2F98();
      ((void (*)(uint64_t))v193)(v143);
    }
    v144 = v180;
    sub_23F7D2FAC();
    v145 = v166;
    sub_23F759774(v166, v138, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 16));
    if (v88)
    {
      sub_23F6B56E0(v145, *(uint64_t (**)(uint64_t, uint64_t))(v137 + 8));
      v91 = v141;
    }
    else
    {
      v146 = v178;
      v147 = v137;
      sub_23FB2E858();
      v148 = sub_23FB2EE1C();
      v88 = v149;
      sub_23F7D2388(v146);
      v150 = v145;
      v91 = v148;
      sub_23F6B56E0(v150, *(uint64_t (**)(uint64_t, uint64_t))(v147 + 8));
    }
LABEL_52:
    sub_23F6B54F8();
    sub_23F7D1E14();
    *v23 = 1;
    v157 = *MEMORY[0x24BEBFE50];
    v158 = v23;
LABEL_53:
    ((void (*)(uint64_t *, uint64_t, uint64_t))v22)(v158, v157, v144);
    sub_23F7D1CAC();
    goto LABEL_54;
  }
LABEL_56:
  sub_23F693DDC();
}

void sub_23F7C77B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  _WORD *v38;
  void (*v39)(NSObject *, uint64_t);
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  _WORD *v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8_t *v54;
  int v55;
  uint8_t *v56;
  uint8_t *v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;

  sub_23F6B5220();
  a19 = v24;
  a20 = v25;
  v60 = v20;
  v26 = sub_23F7D2348();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v61 = sub_23F7D232C();
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v29);
  v59 = ((char *)&v54 - v30);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v31);
  v33 = ((char *)&v54 - v32);
  sub_23F693D90();
  v34 = (uint8_t *)sub_23F7A3534();
  if (v34
    && (v35 = sub_23F743CBC(0xD000000000000016, 0x800000023FB336D0, 1852797802, 0xE400000000000000, v34), v36))
  {
    v57 = v34;
    v58 = v35;
    sub_23FB2E378();
    sub_23FB2E7E0();
    v37 = sub_23F7D2974();
    if (os_log_type_enabled(v33, v37))
    {
      v38 = (_WORD *)sub_23F693DF4();
      sub_23F7D2E40(v38);
      sub_23F7D24B0(&dword_23F68F000, v33, v37, "Example utterances override file accessed", v34);
      sub_23F693DD0();
    }

    v39 = *(void (**)(NSObject *, uint64_t))(v21 + 8);
    v39(v33, v61);
    sub_23FB2C2C0();
    sub_23F6B644C();
    v40 = v60;
    sub_23FB2C350();
    if (v40)
    {
      sub_23F6B6420(v23, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      sub_23F7D2848();
    }
    else
    {
      sub_23F6B6420(v23, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      sub_23FB2C074();
      sub_23F6BD144();
      sub_23FB2C068();
      sub_23F7CE134();
      sub_23F6B6FA8();
      sub_23FB2C05C();
      swift_release();
      v44 = a10;
      v45 = v59;
      sub_23F7B0B84();
      sub_23F6B91E8();
      v46 = sub_23FB2E7E0();
      v47 = sub_23FB2F5E4();
      v48 = v47;
      if (os_log_type_enabled(v46, v47))
      {
        v60 = v46;
        v49 = (uint8_t *)sub_23F693DF4();
        v58 = sub_23F693DF4();
        a10 = v58;
        v56 = v49;
        *(_DWORD *)v49 = 136315138;
        v54 = v49 + 4;
        sub_23F7B15C4(v44);
        v50 = MEMORY[0x242674058]();
        v55 = v48;
        v51 = v50;
        v53 = v52;
        sub_23F6B5908();
        v62 = sub_23F69334C(v51, v53, &a10);
        sub_23FB2F680();
        sub_23F6B6740();
        sub_23F6B6E44();
        sub_23F7B0B48(&dword_23F68F000, v60, (os_log_type_t)v55, "Override for toolsIDs: %s found", v56);
        swift_arrayDestroy();
        sub_23F693DD0();
      }
      sub_23F6B6740();
      sub_23F7D2848();
      sub_23F7D2700();

      v39(v45, v61);
    }
  }
  else
  {
    sub_23FB2E378();
    v41 = sub_23FB2E7E0();
    v42 = sub_23FB2F5F0();
    if (sub_23F7D28D0(v42))
    {
      v43 = (_WORD *)sub_23F693DF4();
      sub_23F7D2E40(v43);
      sub_23F7D24B0(&dword_23F68F000, v41, (os_log_type_t)v27, "Unable to open example utterances override file", v34);
      sub_23F693DD0();
    }

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v61);
    sub_23FB2F050();

  }
  sub_23F6B5100();
}

void sub_23F7C7BEC()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint8_t *v9;
  uint64_t v10;

  sub_23F6B50E8();
  sub_23F7D251C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F693F0C();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F7D2310();
  sub_23F7B0C8C();
  sub_23FB2E7E0();
  v4 = sub_23F7D28C8();
  if (sub_23F7D2AE4(v4))
  {
    sub_23F693DF4();
    v10 = sub_23F693DF4();
    sub_23F7D1E5C(v10, 4.8149e-34);
    sub_23F7D2F90();
    v5 = sub_23F7B0944();
    sub_23F78F1B0(v5);
    v6 = sub_23F7D278C();
    sub_23F7D2198(v6);
    sub_23F7B0980();
    sub_23F6B6A48();
    sub_23F7B0B48(&dword_23F68F000, v0, v1, "%s toolbox: Warming up database", v9);
    sub_23F7B0B40();
    sub_23F693DD0();
  }

  sub_23F7B0980();
  v7 = sub_23F78F478();
  v8(v7);
  sub_23FB2C5B4();
  sub_23F693DDC();
}

void sub_23F7C7D54()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint8_t *v9;
  uint64_t v10;

  sub_23F6B50E8();
  sub_23F7D251C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F693F0C();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F7D2310();
  sub_23F7B0C8C();
  sub_23FB2E7E0();
  v4 = sub_23F7D28C8();
  if (sub_23F7D2AE4(v4))
  {
    sub_23F693DF4();
    v10 = sub_23F693DF4();
    sub_23F7D1E5C(v10, 4.8149e-34);
    sub_23F7D2F90();
    v5 = sub_23F7B0944();
    sub_23F78F1B0(v5);
    v6 = sub_23F7D278C();
    sub_23F7D2198(v6);
    sub_23F7B0980();
    sub_23F6B6A48();
    sub_23F7B0B48(&dword_23F68F000, v0, v1, "%s toolbox: Cooling down database", v9);
    sub_23F7B0B40();
    sub_23F693DD0();
  }

  sub_23F7B0980();
  v7 = sub_23F78F478();
  v8(v7);
  sub_23FB2C5C0();
  sub_23F693DDC();
}

void sub_23F7C7EB8()
{
  sub_23F7C7ED0((void (*)(void))sub_23F7B7B7C);
}

void sub_23F7C7EC4()
{
  sub_23F7C7ED0((void (*)(void))sub_23F7B7B94);
}

void sub_23F7C7ED0(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_23F7D2348();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F7D2080();
  a1();
  sub_23FB2C350();
  sub_23F6B56E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F6B5F7C();
}

void sub_23F7C7F58()
{
  sub_23F7C7ED0((void (*)(void))sub_23F7B7BAC);
}

void sub_23F7C7F64()
{
  sub_23F7C7FFC((void (*)(void))sub_23F7B7B7C);
  sub_23F7D2FC0();
}

void sub_23F7C7FB0()
{
  sub_23F7C7FFC((void (*)(void))sub_23F7B7B94);
  sub_23F7D2FC0();
}

void sub_23F7C7FFC(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  id v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  sub_23F7D2348();
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F693EB0();
  a1();
  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_23FB2C2F0();
  v6 = (void *)sub_23FB2F134();
  sub_23F693DFC();
  v7 = objc_msgSend(v5, sel_fileExistsAtPath_, v6);

  if (!v7)
  {
    v10 = *(void (**)(uint64_t))(v2 + 8);
    goto LABEL_5;
  }
  v8 = (void *)sub_23FB2C2CC();
  v14[0] = 0;
  v9 = objc_msgSend(v5, sel_removeItemAtURL_error_, v8, v14);

  if (v9)
  {
    v10 = *(void (**)(uint64_t))(v2 + 8);
    v11 = v14[0];
LABEL_5:
    v12 = sub_23F6B6098();
    v10(v12);

    return;
  }
  v13 = v14[0];
  sub_23FB2C290();

  swift_willThrow();
  sub_23F6B530C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
}

void sub_23F7C8178()
{
  sub_23F7C7FFC((void (*)(void))sub_23F7B7BAC);
  sub_23F7D2FC0();
}

void sub_23F7C81C4(uint64_t a1, uint64_t a2)
{
  sub_23F7C81FC(a1, a2, (void (*)(void))sub_23F7B7B7C);
}

void sub_23F7C81E0(uint64_t a1, uint64_t a2)
{
  sub_23F7C81FC(a1, a2, (void (*)(void))sub_23F7B7B94);
}

void sub_23F7C81FC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23F7D2348();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F7D2080();
  a3();
  sub_23FB2C3C8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  sub_23F6D3710();
}

void sub_23F7C8280(uint64_t a1, uint64_t a2)
{
  sub_23F7C81FC(a1, a2, (void (*)(void))sub_23F7B7BAC);
}

void sub_23F7C829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23FB2F170();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F7D2348();
  sub_23F6B60BC();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F7D2080();
  sub_23F7B7BC4();
  sub_23FB2F164();
  sub_23F78F478();
  sub_23FB2F128();
  sub_23F6B56E0(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_23F6B5F7C();
}

void sub_23F7C8354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_23F7D29C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23F7AE630(v0 + 96);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 184);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 224);
  swift_release();
  swift_release();
  swift_release();
  v1 = sub_23F7D2348();
  sub_23F6B6454(v1);
  v2 = sub_23FB2E798();
  sub_23F6B6454(v2);
  sub_23F694CC8();
}

uint64_t sub_23F7C83EC()
{
  sub_23F7C8354();
  return swift_deallocClassInstance();
}

uint64_t sub_23F7C8410(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023FB33960 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x75626972746E6F63 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7C8510(char a1)
{
  if ((a1 & 1) != 0)
    return 0x75626972746E6F63;
  else
    return 0xD000000000000011;
}

uint64_t sub_23F7C8554(char a1)
{
  if ((a1 & 1) != 0)
    return 0x75626972746E6F63;
  else
    return 0x64496C6F6F74;
}

void sub_23F7C8590()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  sub_23F7D3010();
  v2 = v2 && v1 == 0xE600000000000000;
  if (v2 || (v3 = v1, v4 = v0, (sub_23F73DBA0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
  }
  else if (v4 == 0x75626972746E6F63 && v3 == 0xEC0000006E6F6974)
  {
    sub_23F7D29B4();
  }
  else
  {
    sub_23F73DBA0();
    sub_23F693E04();
  }
  sub_23F694CC8();
}

void sub_23F7C8654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;

  sub_23F6B5220();
  v46 = v2;
  v49 = v1;
  v43 = sub_23F6916B8(&qword_256EAAAF0);
  v40 = *(_QWORD *)(v43 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B5544(v6, v35);
  v41 = sub_23F6916B8(&qword_256EAAAF8);
  v38 = *(_QWORD *)(v41 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v36 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_23F7D218C();
  v39 = *(_QWORD *)(v42 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B57F4(v10, v35);
  sub_23F6916B8(&qword_256EAAB00);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v11);
  type metadata accessor for ToolboxDatabasePayload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B53AC();
  v13 = sub_23F6916B8(&qword_256EAAB08);
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B5298();
  v15 = (_QWORD *)sub_23F6B619C();
  sub_23F6ADC98(v15, v16);
  sub_23F7D0BF4();
  v45 = v0;
  sub_23F7D2DFC();
  sub_23F6F5920(v49, v4, type metadata accessor for ToolboxDatabasePayload);
  v17 = sub_23F7D2C0C();
  if (v17)
  {
    if (v17 == 1)
    {
      LODWORD(v49) = *(unsigned __int8 *)(v4 + *(int *)(sub_23F6916B8(&qword_256EAA6E0) + 48));
      v18 = v39;
      v19 = v44;
      sub_23F7D2984(v44, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v39 + 32));
      sub_23F7D2E60();
      v20 = (uint64_t)v36;
      v21 = v48;
      sub_23F6B6FA8();
      sub_23FB2FAA0();
      sub_23F6D3458(&qword_256EA9A70, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA5E0], MEMORY[0x24BEBA5F0]);
      v22 = v46;
      sub_23FB2FB18();
      if (v22)
      {
        sub_23F6B6420(v20, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
        v23 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
        v24 = v19;
      }
      else
      {
        sub_23F7D0C6C();
        sub_23F7D2CC0();
        sub_23F6B6420(v20, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
        v23 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
        v24 = v44;
      }
      sub_23F6B5900(v24, v23);
      v30 = sub_23F6B61DC();
    }
    else
    {
      sub_23F7D2CA4();
      v33 = v37;
      v21 = v48;
      sub_23F6B6FA8();
      sub_23FB2FAA0();
      v34 = v46;
      sub_23FB2FADC();
      swift_bridgeObjectRelease();
      if (!v34)
      {
        sub_23F7D0C6C();
        sub_23F7D2CC0();
      }
      sub_23F6B530C(v33, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
      v30 = sub_23F7D2C3C();
    }
    v32 = v21;
  }
  else
  {
    v49 = v3;
    v25 = *(_BYTE *)(v4 + 16);
    v53 = 0;
    sub_23F7D0CE4();
    v26 = v48;
    sub_23FB2FAA0();
    v52 = 0;
    v27 = v46;
    sub_23FB2FADC();
    sub_23F6B5908();
    if (!v27)
    {
      v51 = v25;
      v50 = 1;
      sub_23F7D0C6C();
      sub_23F7D2CC0();
    }
    v28 = sub_23F7D2C3C();
    sub_23F6B563C(v28, v29);
    v30 = sub_23F7D27BC();
    v32 = v26;
  }
  v31(v30, v32);
  sub_23F6B5100();
}

void sub_23F7C8A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;

  sub_23F6B5220();
  v95 = v13;
  v17 = v16;
  v82 = v18;
  v87 = sub_23F6916B8(&qword_256EAAB38);
  v85 = *(_QWORD *)(v87 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6B57BC(v20, v76);
  v88 = sub_23F6916B8(&qword_256EAAB40);
  v86 = *(_QWORD *)(v88 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B57F4(v22, v76);
  v23 = sub_23F6916B8(&qword_256EAAB48);
  v83 = *(_QWORD *)(v23 - 8);
  v84 = v23;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B5598(v25, v76);
  v26 = sub_23F6916B8(&qword_256EAAB50);
  v92 = *(_QWORD *)(v26 - 8);
  v93 = v26;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v27);
  v28 = sub_23F6B5C2C();
  v29 = type metadata accessor for ToolboxDatabasePayload(v28);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B5C80();
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v76 - v33;
  MEMORY[0x24BDAC7A8](v32);
  sub_23F6D3F74();
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v76 - v36;
  v38 = v17[3];
  v94 = v17;
  sub_23F6ADC98(v17, v38);
  sub_23F7D0BF4();
  v39 = v95;
  sub_23FB2FCB0();
  if (v39)
    goto LABEL_9;
  v77 = v12;
  v78 = v14;
  v79 = v37;
  v80 = v34;
  v95 = v29;
  v40 = v93;
  if (!*(_QWORD *)(sub_23FB2FA94() + 16))
  {
LABEL_8:
    sub_23F6B6334();
    sub_23F6B5AD4();
    v56 = v55;
    sub_23F6916B8(&qword_256EA1870);
    *v56 = v95;
    sub_23FB2FA04();
    v57 = sub_23F6B56B8();
    sub_23F6B5DAC(v57, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    sub_23F72DFBC();
    v58 = sub_23F7D243C();
    v59(v58, v40);
    goto LABEL_9;
  }
  v81 = v15;
  v41 = v40;
  v76 = 0;
  v42 = sub_23F7D2554();
  sub_23F6B4E44(v42, v43, v44, v45, v46, v47);
  v49 = v48;
  v51 = v50;
  sub_23F6B644C();
  if (v49 != v51 >> 1)
  {
    v40 = v41;
    goto LABEL_8;
  }
  if ((_DWORD)v34)
  {
    if ((_DWORD)v34 == 1)
    {
      sub_23F7D2E60();
      v52 = v91;
      v53 = v81;
      sub_23F7D2450();
      sub_23F7B0D00();
      sub_23F6D3458(&qword_256EA9A80, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA5E0], MEMORY[0x24BEBA608]);
      v54 = (uint64_t)v80;
      sub_23F7717EC();
      sub_23F6916B8(&qword_256EAA6E0);
      sub_23F7D0D20();
      sub_23F6B6FA8();
      sub_23F7717EC();
      sub_23F70D728(v52, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 8));
      sub_23F72DFBC();
      sub_23F6B530C(v53, *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
      swift_storeEnumTagMultiPayload();
      v71 = v54;
    }
    else
    {
      sub_23F7D2CA4();
      v61 = v90;
      v62 = v81;
      sub_23F7D2450();
      v64 = sub_23FB2FA40();
      v66 = v65;
      sub_23F7D0D20();
      sub_23F7717EC();
      sub_23F6B5900(v61, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
      sub_23F72DFBC();
      sub_23F6B51EC(v62, *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
      v72 = v78;
      *v78 = v64;
      v72[1] = v66;
      *((_BYTE *)v72 + 16) = a12;
      swift_storeEnumTagMultiPayload();
      v71 = (uint64_t)v72;
    }
  }
  else
  {
    sub_23F7D0CE4();
    v60 = v89;
    sub_23F7D2450();
    v98 = 0;
    v63 = v60;
    v67 = sub_23FB2FA40();
    v69 = v68;
    v96 = 1;
    sub_23F7D0D20();
    sub_23F6B6FA8();
    sub_23F7717EC();
    v70 = v92;
    sub_23F70D728(v63, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
    sub_23F7D2964();
    sub_23F6B6178(v81, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 8));
    v73 = v97;
    v74 = v77;
    *v77 = v67;
    v74[1] = v69;
    *((_BYTE *)v74 + 16) = v73;
    swift_storeEnumTagMultiPayload();
    v71 = (uint64_t)v74;
  }
  v75 = (uint64_t)v79;
  sub_23F6F594C(v71, (uint64_t)v79, type metadata accessor for ToolboxDatabasePayload);
  sub_23F6F594C(v75, v82, type metadata accessor for ToolboxDatabasePayload);
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v94);
  sub_23F6B5100();
}

uint64_t sub_23F7C9118(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023FB33960 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7C91F8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65726F6373;
  else
    return 0xD000000000000011;
}

uint64_t sub_23F7C9230(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65726F6373;
  else
    return 0x64496C6F6F74;
}

void sub_23F7C9260(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v5;

  v2 = a1 == 0x696665446C6F6F74 && a2 == 0xEE006E6F6974696ELL;
  if (v2
    || (sub_23F73DBA0() & 1) != 0
    || (a1 == 0x6E61747369737361 ? (v5 = a2 == 0xEF616D6568635374) : (v5 = 0), v5 || (sub_23F73DBA0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
  }
  else if (a1 == 0x6341746E65696C63 && a2 == 0xEC0000006E6F6974)
  {
    sub_23F7D29B4();
  }
  else
  {
    sub_23F73DBA0();
    sub_23F693E04();
  }
  sub_23F694CC8();
}

void sub_23F7C93D4()
{
  sub_23F7D280C();
  sub_23FB2FC68();
  sub_23F6B5608();
  sub_23F6B5398();
}

uint64_t sub_23F7C9400(char a1)
{
  if (!a1)
    return 0x696665446C6F6F74;
  if (a1 == 1)
    return 0x6E61747369737361;
  return 0x6341746E65696C63;
}

void sub_23F7C9478()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  sub_23F7D3010();
  v2 = v2 && v1 == 0xE600000000000000;
  if (v2
    || (v3 = v1, v4 = v0, (sub_23F73DBA0() & 1) != 0)
    || (v4 == 0x65726F6373 ? (v5 = v3 == 0xE500000000000000) : (v5 = 0), v5))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23F73DBA0();
    sub_23F693E04();
  }
  sub_23F694CC8();
}

void sub_23F7C9528(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v38 = sub_23F6916B8(&qword_256EAAC40);
  v35 = *(_QWORD *)(v38 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5544(v7, v31);
  v36 = sub_23F6916B8(&qword_256EAAC48);
  v33 = *(_QWORD *)(v36 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v31 = v9;
  v37 = sub_23F7D218C();
  v34 = *(_QWORD *)(v37 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  v32 = (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23F6916B8(&qword_256EAAC50);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  sub_23F7D22BC();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B53AC();
  v15 = sub_23F6916B8(&qword_256EAAC58);
  v41 = *(_QWORD *)(v15 - 8);
  v42 = v15;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B5298();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7D0FA8();
  v39 = v1;
  sub_23F7D2DFC();
  sub_23F6F5920(v43, v3, type metadata accessor for ToolboxSearchOutput);
  v17 = sub_23F7D2C0C();
  if (!v17)
  {
    v46 = 0;
    sub_23F7D105C();
    v25 = v42;
    sub_23F6B6FA8();
    sub_23FB2FAA0();
    v45 = 0;
    sub_23F7D2F54();
    sub_23F756640();
    if (!v2)
    {
      v44 = 1;
      sub_23F7D2CB8();
    }
    sub_23F6B563C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    v26 = sub_23F7D27BC();
    goto LABEL_12;
  }
  if (v17 != 1)
  {
    v52 = 2;
    sub_23F7D0FE4();
    v25 = v42;
    sub_23F6B6FA8();
    v28 = v39;
    sub_23FB2FAA0();
    v51 = 0;
    sub_23F7D2958();
    sub_23F7D2F54();
    swift_bridgeObjectRelease();
    if (!v2)
    {
      v50 = 1;
      sub_23F7D2CB8();
    }
    v29 = sub_23F7D2C3C();
    sub_23F6B530C(v29, v30);
    v27 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v26 = v28;
LABEL_12:
    v27(v26, v25);
    goto LABEL_13;
  }
  sub_23F6916B8(&qword_256EAA6E8);
  v18 = v34;
  v19 = v32;
  sub_23F7D2984(v32, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v34 + 32));
  v49 = 1;
  sub_23F7D1020();
  v20 = v42;
  v21 = v39;
  sub_23FB2FAA0();
  v48 = 0;
  sub_23F6D3458(&qword_256EA9A70, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA5E0], MEMORY[0x24BEBA5F0]);
  v22 = v40;
  sub_23FB2FB18();
  if (!v22)
  {
    v47 = 1;
    sub_23F7D2CB8();
  }
  v23 = sub_23F6B61DC();
  sub_23F6B530C(v23, v24);
  sub_23F6B5900(v19, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v21, v20);
LABEL_13:
  sub_23F70D684();
}

void sub_23F7C9908(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;

  v59 = a2;
  v64 = sub_23F6916B8(&qword_256EAAC00);
  v62 = *(_QWORD *)(v64 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5598(v8, v54);
  v65 = sub_23F6916B8(&qword_256EAAC08);
  v63 = *(_QWORD *)(v65 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B57BC(v10, v54);
  v11 = sub_23F6916B8(&qword_256EAAC10);
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5810(v13, v54);
  v14 = sub_23F6916B8(&qword_256EAAC18);
  v66 = *(_QWORD *)(v14 - 8);
  v67 = v14;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_23F7D22BC();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B5C80();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v54 - v20;
  MEMORY[0x24BDAC7A8](v19);
  sub_23F6D3F74();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B5F6C();
  v68 = a1;
  v23 = (_QWORD *)sub_23F77E19C();
  sub_23F6ADC98(v23, v24);
  sub_23F7D0FA8();
  v25 = v69;
  sub_23FB2FCB0();
  if (!v25)
  {
    v55 = v2;
    v56 = v3;
    v57 = v4;
    v58 = v21;
    if (*(_QWORD *)(sub_23FB2FA94() + 16))
    {
      v69 = v5;
      v54 = 0;
      v26 = sub_23F7D2554();
      sub_23F6B4E44(v26, v27, v28, v29, v30, v31);
      v33 = v32;
      v35 = v34;
      sub_23F6B644C();
      v36 = v16;
      if (v33 == v35 >> 1)
      {
        v72 = 0;
        sub_23F7D105C();
        sub_23F7D2D00();
        sub_23F7D2450();
        v71 = 0;
        v41 = sub_23FB2FA40();
        v43 = v42;
        v70 = 1;
        sub_23F7D2BF8();
        v44 = v66;
        v48 = v47;
        sub_23F7D1EA4(v60);
        sub_23F6F756C();
        sub_23F6B563C(v69, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
        v49 = v55;
        *v55 = v41;
        v49[1] = v43;
        *((_DWORD *)v49 + 4) = v48;
        sub_23F7D24F0();
        swift_storeEnumTagMultiPayload();
        v50 = v57;
        sub_23F7D2D50();
        sub_23F6F594C(v51, v52, v53);
        sub_23F6F594C(v50, v59, type metadata accessor for ToolboxSearchOutput);
        goto LABEL_7;
      }
    }
    else
    {
      v36 = v16;
    }
    sub_23F6B6334();
    sub_23F6B5AD4();
    v38 = v37;
    sub_23F6916B8(&qword_256EA1870);
    *v38 = v36;
    sub_23FB2FA04();
    v39 = sub_23F6B56B8();
    sub_23F6B5DAC(v39, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    sub_23F72DFBC();
    v40 = sub_23F6B68A8();
    v46(v40, v45);
  }
LABEL_7:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v68);
  sub_23F70D684();
}

uint64_t sub_23F7C9EF8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6576697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7C9FEC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x657669746167656ELL;
  else
    return 0x6576697469736F70;
}

void sub_23F7CA01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  char v14;

  sub_23F6B5220();
  v14 = v4;
  sub_23F6916B8(&qword_256EAABE8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B53AC();
  v13 = sub_23F6916B8(&qword_256EAABF0);
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B573C();
  sub_23F6916B8(&qword_256EAABF8);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5208();
  v8 = (_QWORD *)sub_23F6B6190();
  sub_23F6ADC98(v8, v9);
  sub_23F7D0EF4();
  sub_23F7D2DFC();
  if ((v14 & 1) != 0)
  {
    sub_23F7D2E54();
    sub_23F7D27E0();
    v10 = sub_23F7D2C30();
    v12(v10, v11);
  }
  else
  {
    sub_23F7D0F6C();
    sub_23F7D27E0();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v13);
  }
  sub_23F6B530C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_23F6B5100();
}

uint64_t sub_23F7CA15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_23F6B5220();
  v4 = v3;
  v5 = sub_23F6916B8(&qword_256EAABB8);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v29 = v7;
  v28 = sub_23F6916B8(&qword_256EAABC0);
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B52B0();
  v9 = sub_23F6916B8(&qword_256EAABC8);
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F693EB0();
  sub_23F6ADC98(v4, v4[3]);
  sub_23F7D0EF4();
  sub_23FB2FCB0();
  if (v0)
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  v27 = v2;
  v11 = sub_23FB2FA94();
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12
    || (v13 = *(unsigned __int8 *)(v11 + 32),
        sub_23F6B4E44(1, v12, v11, v11 + 32, 0, (2 * v12) | 1),
        v15 = v14,
        v17 = v16,
        sub_23F6B6E44(),
        v15 != v17 >> 1))
  {
    v19 = sub_23F6B6334();
    sub_23F6B5AD4();
    v21 = v20;
    sub_23F6916B8(&qword_256EA1870);
    *v21 = &unk_250FF8648;
    sub_23FB2FA04();
    sub_23F6B56B8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    sub_23F6B5770();
    v22 = sub_23F6B61D0();
    v23(v22, v9);
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  }
  if ((v13 & 1) != 0)
  {
    sub_23F7D2E54();
    sub_23F7D2598();
    v18 = v27;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  }
  else
  {
    sub_23F7D0F6C();
    sub_23F7D2598();
    v18 = v27;
    v25 = sub_23F6B61DC();
    v26(v25, v28);
  }
  sub_23F6B5770();
  sub_23F70D728(v1, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  return v13;
}

uint64_t sub_23F7CA428()
{
  char *v0;

  return sub_23F7C8510(*v0);
}

uint64_t sub_23F7CA430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7C8410(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7CA454()
{
  sub_23F7D0CA8();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA47C()
{
  sub_23F7D0CA8();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA4A4()
{
  char *v0;

  return sub_23F7C8554(*v0);
}

void sub_23F7CA4AC(_BYTE *a1@<X8>)
{
  char v2;

  sub_23F7C8590();
  *a1 = v2;
}

uint64_t sub_23F7CA4D0()
{
  sub_23F7D0C30();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA4F8()
{
  sub_23F7D0C30();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA520()
{
  sub_23F7D0BF4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA548()
{
  sub_23F7D0BF4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA570()
{
  sub_23F7D0CE4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA598()
{
  sub_23F7D0CE4();
  return sub_23FB2FD1C();
}

void sub_23F7CA5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  _BYTE vars8[6];

  sub_23F7C8A94(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

void sub_23F7CA5D4()
{
  sub_23F7C8654();
}

uint64_t sub_23F7CA5E8()
{
  char *v0;

  return sub_23F7C91F8(*v0);
}

uint64_t sub_23F7CA5F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7C9118(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7CA614()
{
  sub_23F7D1020();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA63C()
{
  sub_23F7D1020();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA664()
{
  char *v0;

  return sub_23F7C9230(*v0);
}

void sub_23F7CA66C(_BYTE *a1@<X8>)
{
  char v2;

  sub_23F7C9478();
  *a1 = v2;
}

uint64_t sub_23F7CA690()
{
  sub_23F7D0FE4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA6B8()
{
  sub_23F7D0FE4();
  return sub_23FB2FD1C();
}

void sub_23F7CA6E0()
{
  sub_23F7C93D4();
}

uint64_t sub_23F7CA6F8()
{
  char *v0;

  return sub_23F7C9400(*v0);
}

void sub_23F7CA700(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_23F7C9260(a1, a2);
  *a3 = v4;
}

uint64_t sub_23F7CA724()
{
  sub_23F7D0FA8();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA74C()
{
  sub_23F7D0FA8();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA774()
{
  sub_23F7D105C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA79C()
{
  sub_23F7D105C();
  return sub_23FB2FD1C();
}

void sub_23F7CA7C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23F7C9908(a1, a2);
}

void sub_23F7CA7D8(_QWORD *a1)
{
  sub_23F7C9528(a1);
}

uint64_t sub_23F7CA7EC()
{
  char *v0;

  return sub_23F7C9FEC(*v0);
}

uint64_t sub_23F7CA7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7C9EF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7CA818()
{
  sub_23F7D0EF4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA840()
{
  sub_23F7D0EF4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA868()
{
  sub_23F7D0F30();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA890()
{
  sub_23F7D0F30();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA8B8()
{
  sub_23F7D0F6C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA8E0()
{
  sub_23F7D0F6C();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CA908@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23F7CA15C();
  if (!v1)
    *a1 = result & 1;
  return result;
}

void sub_23F7CA934()
{
  sub_23F7CA01C();
}

uint64_t ToolBoxAllowList.toolIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7CA954()
{
  sub_23F7CDEA4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CA97C()
{
  sub_23F7CDEA4();
  return sub_23FB2FD1C();
}

void ToolBoxAllowList.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  sub_23F6B5220();
  v14 = v13;
  v16 = v15;
  sub_23F6916B8(&qword_256EAA2B0);
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B5208();
  sub_23F7D2EFC(v14);
  sub_23F7CDEA4();
  sub_23FB2FCB0();
  if (!v10)
  {
    sub_23F6916B8(&qword_256EA98B8);
    sub_23F7D0E10(&qword_256EAA2C0, &qword_256EA98B8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1720]);
    sub_23FB2FA7C();
    sub_23F6B51EC(v11, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    *v16 = a10;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v14);
  sub_23F6B5100();
}

uint64_t sub_23F7CAAB0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6449656C646E7562 && a2 == 0xE900000000000073;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7364496C6F6F74 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7CABA8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7364496C6F6F74;
  else
    return 0x6449656C646E7562;
}

uint64_t sub_23F7CABE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v7 = sub_23F6916B8(&qword_256EAABA0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7D0D5C();
  sub_23FB2FCC8();
  v14 = a2;
  v13 = 0;
  sub_23F6916B8(&qword_256EA1918);
  sub_23F7D0E10(&qword_256EA1920, &qword_256EA1918, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_23FB2FB18();
  if (!v3)
  {
    v14 = a3;
    v13 = 1;
    sub_23F6916B8(&qword_256EAAB70);
    sub_23F7D0E60(&qword_256EAABA8, (void (*)(void))sub_23F7D0EB8);
    sub_23FB2FB18();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23F7CAD7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_23F6916B8(&qword_256EAAB60);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  sub_23F6ADC98(a1, v7);
  sub_23F7D0D5C();
  sub_23FB2FCB0();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_23F6916B8(&qword_256EA1918);
    HIBYTE(v9) = 0;
    sub_23F7D0E10(&qword_256EA1930, &qword_256EA1918, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_23FB2FA7C();
    v7 = v10;
    sub_23F6916B8(&qword_256EAAB70);
    HIBYTE(v9) = 1;
    sub_23F7D0E60(&qword_256EAAB78, (void (*)(void))sub_23F7D0D98);
    swift_bridgeObjectRetain();
    sub_23FB2FA7C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_23F7CAF88()
{
  swift_bridgeObjectRetain();
  sub_23F6B6098();
  sub_23FB2F200();
  sub_23F6B5AB0();
  sub_23F6B5508();
  sub_23F7D2D50();
  sub_23FB2F200();
  return swift_bridgeObjectRelease();
}

void sub_23F7CAFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  BOOL v13;

  v12 = a1 == a5 && a2 == a6;
  if ((v12 || (sub_23F6B5280() & 1) != 0) && (a3 == a7 ? (v13 = a4 == a8) : (v13 = 0), !v13))
  {
    sub_23F78F478();
    sub_23FB2FB78();
  }
  else
  {
    sub_23F694C84();
  }
}

uint64_t sub_23F7CB06C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x64496C6F6F74 && a2 == 0xE600000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_23F7CB150()
{
  sub_23F7D280C();
  sub_23FB2FC68();
  sub_23F6B5608();
  sub_23F6B5398();
}

uint64_t sub_23F7CB17C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6449656C646E7562;
  else
    return 0x64496C6F6F74;
}

uint64_t sub_23F7CB1B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v12[0] = a4;
  v12[1] = a5;
  v7 = sub_23F6916B8(&qword_256EAAB98);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7D0DD4();
  sub_23FB2FCC8();
  v14 = 0;
  sub_23FB2FADC();
  if (!v5)
  {
    v13 = 1;
    sub_23FB2FADC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23F7CB2D8()
{
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  return sub_23FB2FC8C();
}

uint64_t sub_23F7CB364(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = sub_23F6916B8(&qword_256EAAB88);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7D0DD4();
  sub_23FB2FCB0();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    v7 = sub_23FB2FA40();
    v10 = 1;
    swift_bridgeObjectRetain();
    sub_23FB2FA40();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

void sub_23F7CB510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  ToolBoxAllowList.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_23F7CB524()
{
  sub_23F7CB150();
}

uint64_t sub_23F7CB53C()
{
  char *v0;

  return sub_23F7CABA8(*v0);
}

uint64_t sub_23F7CB544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7CAAB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7CB568()
{
  sub_23F7D0D5C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CB590()
{
  sub_23F7D0D5C();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CB5B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_23F7CAD7C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_23F7CB5E0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23F7CABE4(a1, *v1, v1[1]);
}

uint64_t sub_23F7CB5F8()
{
  char *v0;

  return sub_23F7CB17C(*v0);
}

uint64_t sub_23F7CB600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7CB06C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7CB624()
{
  sub_23F7D0DD4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7CB64C()
{
  sub_23F7D0DD4();
  return sub_23FB2FD1C();
}

uint64_t sub_23F7CB674@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_23F7CB364(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_23F7CB6A0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23F7CB1B0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_23F7CB6BC()
{
  return sub_23F7CB2D8();
}

uint64_t sub_23F7CB6C8()
{
  return sub_23F7CAF88();
}

uint64_t sub_23F7CB6D4()
{
  sub_23F6B63E0();
  sub_23F6B6254();
  sub_23FB2F200();
  sub_23F6B5AB0();
  sub_23F6B54F8();
  sub_23FB2F200();
  sub_23F693DFC();
  return sub_23F6B5608();
}

void sub_23F7CB73C(uint64_t *a1, uint64_t *a2)
{
  sub_23F7CAFF0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void sub_23F7CB758(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v4 = sub_23FB2F2C0();
    sub_23F7D2ACC(v4);
  }
  else
  {
    v3 = MEMORY[0x242673F20](15, a1 >> 16);
    sub_23F7D2ACC(v3);
  }
  sub_23F694CC8();
}

uint64_t sub_23F7CB7AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_35:
    sub_23F713F08();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_23F6916B8(&qword_256EAA6D8);
  result = sub_23FB2F77C();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_23FB2FC5C();
    sub_23F77E600();
    sub_23FB2F200();
    result = sub_23FB2FC8C();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_23F7CBA30(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_35:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_23F6916B8(&qword_256EAA640);
  result = sub_23FB2F77C();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_35;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_35;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_35;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = sub_23FB2FC50();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_35;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_35;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_23F7CBC6C(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v3) = 1;
  if ((a1 & 1) == 0 || (a1 & 0xC) == 4 << v3)
    goto LABEL_9;
  v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  if (v4 <= a1 >> 16)
  {
    __break(1u);
LABEL_9:
    sub_23F7D2D50();
    sub_23F7CBD00(v5, v6, v7);
    if ((v8 & 1) == 0)
    {
      sub_23F7D2D50();
      sub_23F7CBD6C(v9, v10, v11);
    }
  }
}

void sub_23F7CBD00(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((a1 & 0xC) == 4 << v5)
    sub_23F7CB758(a1, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= a1 >> 16)
    __break(1u);
}

unint64_t sub_23F7CBD6C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v8 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v8 << 16;
        }
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v7 = a2 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v12 = result >> 16;
          v6 = sub_23FB2F83C();
          v5 = v12;
        }
        if (v5 != v7 && (*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v8 = v5 - 1;
            v9 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
          }
          while (v9 == 128);
          return v8 << 16;
        }
      }
      v8 = v5;
      return v8 << 16;
    }
    v10 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v10 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v10)
      return sub_23FB2F794();
  }
  return result;
}

uint64_t sub_23F7CBE74(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = MEMORY[0x24BEE4B08];
    goto LABEL_25;
  }
  sub_23F6916B8(&qword_256EAA6D8);
  result = sub_23FB2F77C();
  v3 = result;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return v3;
  }
  v4 = 0;
  v5 = result + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    sub_23FB2FC5C();
    swift_bridgeObjectRetain();
    sub_23FB2F200();
    result = sub_23FB2FC8C();
    v9 = -1 << *(_BYTE *)(v3 + 32);
    v10 = result & ~v9;
    v11 = v10 >> 6;
    v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
    v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      v14 = *(_QWORD *)(v3 + 48);
      v15 = (_QWORD *)(v14 + 16 * v10);
      v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (result = sub_23FB2FB78(), (result & 1) != 0))
      {
LABEL_11:
        result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v17 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v17;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
        v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          result = sub_23FB2FB78();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    *v20 = v8;
    v20[1] = v7;
    v21 = *(_QWORD *)(v3 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v23;
LABEL_22:
    if (++v4 == v24)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23F7CC040(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = sub_23FB2E810();
  v31 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v26 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = MEMORY[0x24BEE4B08];
    goto LABEL_16;
  }
  sub_23F6916B8(&qword_256EAA760);
  result = sub_23FB2F77C();
  v9 = result;
  v28 = *(_QWORD *)(a1 + 16);
  if (!v28)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  v10 = 0;
  v30 = result + 56;
  v11 = *(unsigned __int8 *)(v31 + 80);
  v26 = a1;
  v27 = a1 + ((v11 + 32) & ~v11);
  while (v10 < *(_QWORD *)(a1 + 16))
  {
    v12 = *(_QWORD *)(v31 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
    v13(v7, v27 + v12 * v10, v2);
    sub_23F6D3458(&qword_256EAA768, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8E58], MEMORY[0x24BEB8E68]);
    v14 = sub_23FB2F068();
    v15 = -1 << *(_BYTE *)(v9 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = *(_QWORD *)(v30 + 8 * (v16 >> 6));
    v19 = 1 << v16;
    if (((1 << v16) & v18) != 0)
    {
      v29 = v10;
      v20 = ~v15;
      while (1)
      {
        v13(v5, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
        sub_23F6D3458(&qword_256EAA770, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8E58], MEMORY[0x24BEB8E70]);
        v21 = sub_23FB2F11C();
        v22 = *(void (**)(char *, uint64_t))(v31 + 8);
        v22(v5, v2);
        if ((v21 & 1) != 0)
          break;
        v16 = (v16 + 1) & v20;
        v17 = v16 >> 6;
        v18 = *(_QWORD *)(v30 + 8 * (v16 >> 6));
        v19 = 1 << v16;
        if ((v18 & (1 << v16)) == 0)
        {
          a1 = v26;
          v10 = v29;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v22)(v7, v2);
      a1 = v26;
      v10 = v29;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v30 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v31 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v7, v2);
      v23 = *(_QWORD *)(v9 + 16);
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_18;
      *(_QWORD *)(v9 + 16) = v25;
    }
    if (++v10 == v28)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t *sub_23F7CC2D8(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  char v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  _QWORD v11[2];

  v4 = (_QWORD *)isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v7 = (_QWORD *)((char *)v11 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_23F7F0E44(0, v6, v7);
    v8 = sub_23F7CC5FC(v7, v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      return (uint64_t *)v8;
  }
  else
  {
    v9 = (unint64_t *)swift_slowAlloc();
    sub_23F7F0E44(0, v6, v9);
    a2 = (uint64_t *)sub_23F7CC5FC(v9, v6, v4, a2);
    MEMORY[0x242674F4C](v9, -1, -1);
  }
  return a2;
}

uint64_t sub_23F7CC440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t isStackAllocationSafe;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  _QWORD v14[2];

  v4 = a1;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v9 = (_QWORD *)((char *)v14 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_23F7F0E44(0, v7, v9);
    swift_bridgeObjectRetain();
    sub_23F7CC8E4(v9, v7, v4, a2);
    if (v2)
      swift_willThrow();
    else
      v4 = v10;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = (unint64_t *)swift_slowAlloc();
    sub_23F7F0E44(0, v7, v11);
    swift_bridgeObjectRetain();
    sub_23F7CC8E4(v11, v7, v4, a2);
    v4 = v12;
    MEMORY[0x242674F4C](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23F7CC5FC(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  v42 = a4;
  v36 = a2;
  v37 = a1;
  v41 = sub_23FB2E834();
  v44 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23FB2EF54();
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0;
  v43 = a3;
  v16 = a3[8];
  v15 = a3 + 8;
  v14 = v16;
  v17 = 1 << *((_BYTE *)v15 - 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v39 = v15;
  v40 = (unint64_t)(v17 + 63) >> 6;
LABEL_4:
  v38 = v12;
  while (v19)
  {
    v20 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    v45 = v13;
    v21 = v20 | (v13 << 6);
    v22 = v44;
LABEL_18:
    v27 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v11, v43[6] + *(_QWORD *)(v8 + 72) * v21, v7);
    v28 = v27[7] + *(_QWORD *)(v22 + 72) * v21;
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
    v30 = v22;
    v31 = v41;
    v29(v6, v28, v41);
    v32 = v46;
    v33 = sub_23F7BB9D4((uint64_t)v11, v6, v42);
    v46 = v32;
    if (v32)
      goto LABEL_28;
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v13 = v45;
    if ((v34 & 1) != 0)
    {
      v35 = v38;
      *(unint64_t *)((char *)v37 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      v23 = __OFADD__(v35, 1);
      v12 = v35 + 1;
      if (!v23)
        goto LABEL_4;
      __break(1u);
LABEL_28:
      (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  v23 = __OFADD__(v13, 1);
  v24 = v13 + 1;
  v22 = v44;
  if (v23)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v24 >= v40)
    return sub_23F7CCC20(v37, v36, v38, v43);
  v25 = v39[v24];
  if (v25)
  {
LABEL_17:
    v19 = (v25 - 1) & v25;
    v45 = v24;
    v21 = __clz(__rbit64(v25)) + (v24 << 6);
    goto LABEL_18;
  }
  v26 = v24 + 1;
  if (v24 + 1 >= v40)
    return sub_23F7CCC20(v37, v36, v38, v43);
  v25 = v39[v26];
  if (v25)
    goto LABEL_16;
  v26 = v24 + 2;
  if (v24 + 2 >= v40)
    return sub_23F7CCC20(v37, v36, v38, v43);
  v25 = v39[v26];
  if (v25)
    goto LABEL_16;
  v26 = v24 + 3;
  if (v24 + 3 >= v40)
    return sub_23F7CCC20(v37, v36, v38, v43);
  v25 = v39[v26];
  if (v25)
  {
LABEL_16:
    v24 = v26;
    goto LABEL_17;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v40)
      return sub_23F7CCC20(v37, v36, v38, v43);
    v25 = v39[v24];
    ++v26;
    if (v25)
      goto LABEL_17;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_23F7CC8E4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v29 = a2;
  v30 = a1;
  v35 = sub_23F6916B8(&qword_256EAA798);
  MEMORY[0x24BDAC7A8](v35);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for AssistantSchema(0);
  v34 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v36 = (_QWORD *)a3;
  v12 = *(_QWORD *)(a3 + 64);
  v31 = 0;
  v32 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & v12;
  v33 = (unint64_t)(v13 + 63) >> 6;
  v16 = a4 + 56;
  while (v15)
  {
    v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v18 = v17 | (v11 << 6);
LABEL_21:
    v22 = *(_QWORD *)(v36[6] + 8 * v18);
    sub_23F6F5920(v36[7] + *(_QWORD *)(v34 + 72) * v18, (uint64_t)v10, type metadata accessor for AssistantSchema);
    *v7 = v22;
    sub_23F6F5920((uint64_t)v10, (uint64_t)v7 + *(int *)(v35 + 48), type metadata accessor for AssistantSchema);
    if (!*(_QWORD *)(a4 + 16))
      goto LABEL_30;
    v23 = sub_23FB2FC50();
    v24 = -1 << *(_BYTE *)(a4 + 32);
    v25 = v23 & ~v24;
    if (((*(_QWORD *)(v16 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      goto LABEL_30;
    v26 = *(_QWORD *)(a4 + 48);
    if (*(_QWORD *)(v26 + 8 * v25) == v22)
    {
LABEL_27:
      sub_23F6B4F84((uint64_t)v7, &qword_256EAA798);
      sub_23F6B4FAC();
      *(unint64_t *)((char *)v30 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      if (__OFADD__(v31++, 1))
        goto LABEL_33;
    }
    else
    {
      v27 = ~v24;
      while (1)
      {
        v25 = (v25 + 1) & v27;
        if (((*(_QWORD *)(v16 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
          break;
        if (*(_QWORD *)(v26 + 8 * v25) == v22)
          goto LABEL_27;
      }
LABEL_30:
      sub_23F6B4F84((uint64_t)v7, &qword_256EAA798);
      sub_23F6B4FAC();
    }
  }
  v19 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v19 >= v33)
    goto LABEL_31;
  v20 = *(_QWORD *)(v32 + 8 * v19);
  ++v11;
  if (v20)
    goto LABEL_20;
  v11 = v19 + 1;
  if (v19 + 1 >= v33)
    goto LABEL_31;
  v20 = *(_QWORD *)(v32 + 8 * v11);
  if (v20)
    goto LABEL_20;
  v11 = v19 + 2;
  if (v19 + 2 >= v33)
    goto LABEL_31;
  v20 = *(_QWORD *)(v32 + 8 * v11);
  if (v20)
  {
LABEL_20:
    v15 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v11 << 6);
    goto LABEL_21;
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_31:
    sub_23F7CD004(v30, v29, v31, v36);
    swift_bridgeObjectRelease();
    return;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v33)
      goto LABEL_31;
    v20 = *(_QWORD *)(v32 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_23F7CCC20(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v57 = sub_23FB2E834();
  v51 = *(_QWORD *)(v57 - 8);
  v8 = MEMORY[0x24BDAC7A8](v57);
  v56 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v44 - v10;
  v11 = sub_23FB2EF54();
  v49 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v55 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v44 - v14;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_23F6916B8(&qword_256EAA7B0);
  result = sub_23FB2F9A4();
  v16 = result;
  v44 = a1;
  v45 = a2;
  if (a2 < 1)
    v17 = 0;
  else
    v17 = *a1;
  v18 = 0;
  v19 = result + 64;
  v46 = a4;
  v47 = result;
  v20 = v50;
  while (1)
  {
    v54 = a3;
    if (v17)
    {
      v52 = (v17 - 1) & v17;
      v53 = v18;
      v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      v22 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_40;
      if (v22 >= v45)
        return v16;
      v23 = v44[v22];
      v24 = v18 + 1;
      if (!v23)
      {
        v24 = v18 + 2;
        if (v18 + 2 >= v45)
          return v16;
        v23 = v44[v24];
        if (!v23)
        {
          v24 = v18 + 3;
          if (v18 + 3 >= v45)
            return v16;
          v23 = v44[v24];
          if (!v23)
          {
            v25 = v18 + 4;
            if (v18 + 4 >= v45)
              return v16;
            v23 = v44[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v24 >= v45)
                  return v16;
                v23 = v44[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      v52 = (v23 - 1) & v23;
      v53 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = v48;
    v27 = v49;
    v28 = *(_QWORD *)(v49 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v48, a4[6] + v28 * v21, v11);
    v29 = a4[7];
    v30 = v51;
    v31 = *(_QWORD *)(v51 + 72);
    v32 = v29 + v31 * v21;
    v33 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v20, v32, v57);
    v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v34(v55, v26, v11);
    v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v35(v56, v20, v33);
    v16 = v47;
    sub_23F6D3458(&qword_256EA8CB0, (uint64_t (*)(uint64_t))MEMORY[0x24BEBA5E0], MEMORY[0x24BEBA5F8]);
    result = sub_23FB2F068();
    v36 = -1 << *(_BYTE *)(v16 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6))) == 0)
      break;
    v39 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v19 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    v34((char *)(*(_QWORD *)(v16 + 48) + v39 * v28), v55, v11);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)(*(_QWORD *)(v16 + 56) + v39 * v31, v56, v57);
    ++*(_QWORD *)(v16 + 16);
    a3 = v54 - 1;
    if (__OFSUB__(v54, 1))
      goto LABEL_39;
    a4 = v46;
    v17 = v52;
    v18 = v53;
    if (v54 == 1)
      return v16;
  }
  v40 = 0;
  v41 = (unint64_t)(63 - v36) >> 6;
  while (++v38 != v41 || (v40 & 1) == 0)
  {
    v42 = v38 == v41;
    if (v38 == v41)
      v38 = 0;
    v40 |= v42;
    v43 = *(_QWORD *)(v19 + 8 * v38);
    if (v43 != -1)
    {
      v39 = __clz(__rbit64(~v43)) + (v38 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_23F7CD004(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = type metadata accessor for AssistantSchema(0);
  v37 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v38 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v35 - v11;
  if (!a3)
    return;
  if (a4[2] == a3)
  {
    swift_retain();
    return;
  }
  sub_23F6916B8(&qword_256EAA7A0);
  v13 = sub_23FB2F9A4();
  v14 = v13;
  v35 = a1;
  v36 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = v13 + 64;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_25;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_39;
    if (v20 >= v36)
      return;
    v21 = v35[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        return;
      v21 = v35[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          return;
        v21 = v35[v16];
        if (!v21)
          break;
      }
    }
LABEL_24:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_25:
    v23 = *(_QWORD *)(a4[6] + 8 * v19);
    v24 = *(_QWORD *)(v37 + 72);
    sub_23F6F5920(a4[7] + v24 * v19, (uint64_t)v12, type metadata accessor for AssistantSchema);
    sub_23F6F594C((uint64_t)v12, v38, type metadata accessor for AssistantSchema);
    v25 = sub_23FB2FC50();
    v26 = -1 << *(_BYTE *)(v14 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v17 + 8 * (v27 >> 6))) == 0)
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v17 + 8 * v28);
        if (v33 != -1)
        {
          v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v17 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v29) = v23;
    sub_23F6F594C(v38, *(_QWORD *)(v14 + 56) + v29 * v24, type metadata accessor for AssistantSchema);
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      goto LABEL_38;
    if (!a3)
      return;
  }
  v22 = v20 + 3;
  if (v22 >= v36)
    return;
  v21 = v35[v22];
  if (v21)
  {
    v16 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v36)
      return;
    v21 = v35[v16];
    ++v22;
    if (v21)
      goto LABEL_24;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_23F7CD300(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    result = sub_23F7CD800(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i));
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23F7CD464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v32[2];
  _QWORD v33[6];

  v2 = a2;
  v33[5] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v32[0] = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10)
            goto LABEL_33;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_33;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_33;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_33;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    sub_23F6BC278();
                    return v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_33;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_36:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        v19 = sub_23FB2FC50();
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v33[0] = a1;
    v33[1] = v6;
    v33[2] = v32[0];
    v33[3] = v4;
    v33[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      v27 = (char *)v32 - v26;
      memcpy((char *)v32 - v26, (const void *)(v2 + 56), v24);
      v28 = sub_23F7CD908((uint64_t)v27, v23, v2, v21, v33);
      swift_release();
      sub_23F6BC278();
      return v28;
    }
    else
    {
      v29 = (void *)swift_slowAlloc();
      memcpy(v29, (const void *)(v2 + 56), v24);
      v30 = sub_23F7CD908((uint64_t)v29, v23, v2, v21, v33);
      swift_release();
      sub_23F6BC278();
      MEMORY[0x242674F4C](v29, -1, -1);
      return v30;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t sub_23F7CD800(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = sub_23FB2FC50();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_23F7F47EC();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_23F7CDB5C(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_23F7CD908(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  unint64_t v30;
  int64_t v32;

  v8 = (unint64_t *)result;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v11 = a3 + 56;
  while (1)
  {
    v12 = a5[3];
    v13 = a5[4];
    if (!v13)
      break;
    v14 = (v13 - 1) & v13;
    v15 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_14:
    v22 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v15);
    a5[3] = v12;
    a5[4] = v14;
    result = sub_23FB2FC50();
    v23 = -1 << *(_BYTE *)(a3 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    v26 = 1 << v24;
    if (((1 << v24) & *(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v27 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v27 + 8 * v24) == v22)
      {
LABEL_21:
        v30 = v8[v25];
        v8[v25] = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v10--, 1))
            goto LABEL_36;
          if (!v10)
            return MEMORY[0x24BEE4B08];
        }
      }
      else
      {
        for (i = v24 + 1; ; i = v29 + 1)
        {
          v29 = i & ~v23;
          if (((*(_QWORD *)(v11 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
            break;
          if (*(_QWORD *)(v27 + 8 * v29) == v22)
          {
            v25 = v29 >> 6;
            v26 = 1 << v29;
            goto LABEL_21;
          }
        }
      }
    }
  }
  v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    v17 = (unint64_t)(a5[2] + 64) >> 6;
    v18 = a5[3];
    if (v16 >= v17)
      goto LABEL_34;
    v19 = a5[1];
    v20 = *(_QWORD *)(v19 + 8 * v16);
    if (v20)
      goto LABEL_13;
    v21 = v12 + 2;
    v18 = v12 + 1;
    if (v12 + 2 >= v17)
      goto LABEL_34;
    v20 = *(_QWORD *)(v19 + 8 * v21);
    if (!v20)
    {
      v18 = v12 + 2;
      if (v12 + 3 >= v17)
        goto LABEL_34;
      v20 = *(_QWORD *)(v19 + 8 * (v12 + 3));
      if (v20)
      {
        v16 = v12 + 3;
        goto LABEL_13;
      }
      v21 = v12 + 4;
      v18 = v12 + 3;
      if (v12 + 4 >= v17)
        goto LABEL_34;
      v20 = *(_QWORD *)(v19 + 8 * v21);
      if (!v20)
      {
        v16 = v12 + 5;
        v18 = v12 + 4;
        if (v12 + 5 >= v17)
          goto LABEL_34;
        v20 = *(_QWORD *)(v19 + 8 * v16);
        if (!v20)
        {
          v32 = v12 + 6;
          while (v32 < v17)
          {
            v20 = *(_QWORD *)(v19 + 8 * v32++);
            if (v20)
            {
              v16 = v32 - 1;
              goto LABEL_13;
            }
          }
          v18 = v17 - 1;
LABEL_34:
          a5[3] = v18;
          a5[4] = 0;
          swift_retain();
          return sub_23F7CBA30(v8, a2, v10, a3);
        }
        goto LABEL_13;
      }
    }
    v16 = v21;
LABEL_13:
    v14 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v16 << 6);
    v12 = v16;
    goto LABEL_14;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_23F7CDB5C(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_23FB2F734();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = sub_23FB2FC50() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            v15 = (_QWORD *)(v10 + 8 * v2);
            v16 = v2 != v6 || v15 >= v11 + 1;
            v2 = v6;
            if (v16)
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_23F7CDCD4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23FB2C188();
  if (!result || (result = sub_23FB2C1A0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23FB2C194();
      sub_23FB2F020();
      sub_23F6D3458(&qword_256EA9080, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B90], MEMORY[0x24BDC6B88]);
      return sub_23FB2EFA8();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23F7CDD98()
{
  sub_23FB2F020();
  sub_23F6D3458(&qword_256EA9080, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B90], MEMORY[0x24BDC6B88]);
  return sub_23FB2EFA8();
}

unint64_t sub_23F7CDEA4()
{
  unint64_t result;

  result = qword_256EAA2B8;
  if (!qword_256EAA2B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61044, &type metadata for ToolBoxAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA2B8);
  }
  return result;
}

void type metadata accessor for ToolBoxUtility()
{
  sub_23F694C70();
}

uint64_t sub_23F7CDEEC()
{
  return type metadata accessor for ToolEmbeddingsDatabase(0);
}

uint64_t type metadata accessor for ToolEmbeddingsDatabase(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EAA300);
}

uint64_t sub_23F7CDF08()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23FB2C320();
  if (v1 <= 0x3F)
  {
    result = sub_23FB2E798();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

void type metadata accessor for ToolBoxAllowList()
{
  sub_23F694C70();
}

uint64_t storeEnumTagSinglePayload for ToolBoxAllowList.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7CE018 + 4 * byte_23FB60E45[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F7CE038 + 4 * byte_23FB60E4A[v4]))();
}

_BYTE *sub_23F7CE018(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F7CE038(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7CE040(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7CE048(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7CE050(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7CE058(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ToolBoxAllowList.CodingKeys()
{
  return &type metadata for ToolBoxAllowList.CodingKeys;
}

unint64_t sub_23F7CE078()
{
  unint64_t result;

  result = qword_256EAA5F8;
  if (!qword_256EAA5F8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6101C, &type metadata for ToolBoxAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA5F8);
  }
  return result;
}

unint64_t sub_23F7CE0B8()
{
  unint64_t result;

  result = qword_256EAA600;
  if (!qword_256EAA600)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60F8C, &type metadata for ToolBoxAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA600);
  }
  return result;
}

unint64_t sub_23F7CE0F8()
{
  unint64_t result;

  result = qword_256EAA608;
  if (!qword_256EAA608)
  {
    result = MEMORY[0x242674E5C](&unk_23FB60FB4, &type metadata for ToolBoxAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAA608);
  }
  return result;
}

unint64_t sub_23F7CE134()
{
  unint64_t result;

  result = qword_256EAA610;
  if (!qword_256EAA610)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolsOverride, &type metadata for ToolsOverride);
    atomic_store(result, (unint64_t *)&qword_256EAA610);
  }
  return result;
}

unint64_t sub_23F7CE170()
{
  unint64_t result;

  result = qword_256EAA648;
  if (!qword_256EAA648)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolBoxError, &type metadata for ToolBoxError);
    atomic_store(result, (unint64_t *)&qword_256EAA648);
  }
  return result;
}

void sub_23F7CE1AC(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = v5 | (v4 << 16);
  sub_23F7CE3E8(0xFuLL, a1, a2);
  v8 = v7;
  sub_23F7CE3E8(v6, a1, a2);
  v10 = v9 >> 14;
  if (v8 >> 14 < v9 >> 14)
  {
    for (i = 0; !__OFADD__(i, 1); ++i)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v8 = sub_23FB2F1C4();
      }
      else
      {
        v12 = v8 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          v25 = a1;
          v26 = a2 & 0xFFFFFFFFFFFFFFLL;
          v14 = *((unsigned __int8 *)&v25 + v12);
        }
        else
        {
          v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            v13 = sub_23FB2F83C();
          v14 = *(unsigned __int8 *)(v13 + v12);
        }
        v15 = (char)v14;
        v16 = __clz(v14 ^ 0xFF) - 24;
        if (v15 >= 0)
          LOBYTE(v16) = 1;
        v8 = ((v12 + v16) << 16) | 5;
      }
      if (v10 <= v8 >> 14)
        return;
    }
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  if (v10 < v8 >> 14)
  {
    v17 = 0;
    while (!__OFSUB__(v17--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v8 = sub_23FB2F1D0();
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v25 = a1;
          v26 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v25 + (v8 >> 16) - 1) & 0xC0) == 0x80)
          {
            v23 = 0;
            do
              v24 = *((_BYTE *)&v25 + (v8 >> 16) + v23-- - 2) & 0xC0;
            while (v24 == 128);
            v22 = 1 - v23;
          }
          else
          {
            v22 = 1;
          }
        }
        else
        {
          v19 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            v19 = sub_23FB2F83C();
          v20 = 0;
          do
            v21 = *(_BYTE *)(v19 + (v8 >> 16) - 1 + v20--) & 0xC0;
          while (v21 == 128);
          v22 = -v20;
        }
        v8 = (v8 - (v22 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v10 >= v8 >> 14)
        return;
    }
    goto LABEL_41;
  }
}

void sub_23F7CE3E8(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((a1 & 1) == 0 || (a1 & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < a1 >> 16)
  {
    __break(1u);
LABEL_9:
    sub_23F7CE484(a1, a2, a3);
    if ((v7 & 1) == 0)
      sub_23F7CBD6C(v7, a2, a3);
  }
}

void sub_23F7CE484(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((a1 & 0xC) == 4 << v5)
    sub_23F7CB758(a1, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < a1 >> 16)
    __break(1u);
}

void sub_23F7CE4F0(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23F7C6274(a1, a2, *(_QWORD *)(v3 + 40), a3);
}

uint64_t sub_23F7CE50C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23F7CE554(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ToolboxDatabasePayload(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAAAA8);
}

uint64_t sub_23F7CE5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_23F7B3988(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_23F7CE5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *a4;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23F7A5F08;
  return sub_23F7B3BD0(a1, a2, a3, v8);
}

uint64_t sub_23F7CE648()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23F7CE674()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  sub_23F7D3034();
  sub_23F7D2E34();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_23F7D2FF0(v1);
  *v2 = v0;
  v2[1] = sub_23F7A5F08;
  v3 = sub_23F7D2B1C();
  return v4(v3);
}

NSObject *sub_23F7CE6D8@<X0>(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2;
  NSObject *result;

  result = sub_23F7B2FC8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23F7CE700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EAA690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F7CE748@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23F7C5BC0(a1, *(_QWORD *)(v2 + 24), a2);
}

void sub_23F7CE764()
{
  sub_23FB2E918();
  sub_23F694CC8();
}

unint64_t sub_23F7CE784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EAA6D0;
  if (!qword_256EAA6D0)
  {
    v1 = sub_23F6AE310(&qword_256EAA6C0);
    result = MEMORY[0x242674E5C](MEMORY[0x24BEB8F10], v1);
    atomic_store(result, (unint64_t *)&qword_256EAA6D0);
  }
  return result;
}

uint64_t type metadata accessor for ToolboxSearchOutput(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAAA00);
}

unint64_t sub_23F7CE7DC()
{
  unint64_t result;

  result = qword_256EAA720;
  if (!qword_256EAA720)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61438, &type metadata for ToolDenyList);
    atomic_store(result, &qword_256EAA720);
  }
  return result;
}

uint64_t sub_23F7CE818()
{
  sub_23F742568();
  sub_23F756638();
  sub_23F7D29C4();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23F7CE848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_23F7D2E34();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)sub_23F7D2FF0(v3);
  v5 = sub_23F7D2758(v4);
  return sub_23F7BA058(v5, v6, v7, v8, v1, v2);
}

uint64_t sub_23F7CE8AC(uint64_t a1)
{
  uint64_t *v1;

  return sub_23F7B1CA8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23F7CE8B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_23F6916B8(&qword_256EAA740) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_23F7D2A00();
  sub_23F6B56E0(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_23F6B68CC();
  return swift_deallocObject();
}

uint64_t sub_23F7CE924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  uint64_t v6;

  sub_23F6916B8(&qword_256EAA740);
  sub_23F78F3B0();
  v3 = v0 + v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23F7A5F08;
  v5 = (int *)sub_23F6B63F4();
  return sub_23F7B1DA4(v5, v6, v3);
}

void sub_23F7CE998()
{
  sub_23FB2E8F4();
  sub_23F694CC8();
}

uint64_t sub_23F7CE9B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23F7CE9DC(uint64_t a1)
{
  uint64_t v1;

  return sub_23F7BF034(a1, v1);
}

uint64_t sub_23F7CE9F4()
{
  uint64_t v0;

  sub_23F742568();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    sub_23F7D29C4();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23F7CEA34(uint64_t a1)
{
  uint64_t *v1;

  return sub_23F7BB748(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t type metadata accessor for AssistantSchema(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAA958);
}

uint64_t sub_23F7CEA68()
{
  sub_23F742568();
  sub_23F7D2A00();
  sub_23F756638();
  return swift_deallocObject();
}

uint64_t sub_23F7CEA90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23F7D2E34();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_23F7D2FF0(v1);
  *v2 = v0;
  v2[1] = sub_23F7D1C28;
  v3 = sub_23F7D2B1C();
  return sub_23F7BC940(v3, v4, v5, v6);
}

uint64_t type metadata accessor for AssistantSchemaToEmbed(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAA8C0);
}

void sub_23F7CEAF8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;

  sub_23F7BD7C0(a1, a2, v3, a3);
}

void sub_23F7CEB00(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23F7BDC90(a1, a2, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t type metadata accessor for AssistantSchemaToolBoxRepresentation(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAA828);
}

uint64_t sub_23F7CEB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssistantSchema(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F7CEB70()
{
  sub_23F742568();
  sub_23F7D2A00();
  sub_23F7D29C4();
  return swift_deallocObject();
}

uint64_t sub_23F7CEB98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_23F7D3034();
  sub_23F7D2E34();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  v3 = (_QWORD *)sub_23F7D2FF0(v2);
  v4 = sub_23F7D2758(v3);
  return sub_23F7B9144(v4, v5, v6, v7, v1);
}

uint64_t sub_23F7CEBF0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23F7CEC1C()
{
  uint64_t v0;

  sub_23F742568();
  sub_23F7D2A00();
  sub_23F756638();
  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23F7CEC80(uint64_t a1)
{
  uint64_t *v1;

  return sub_23F7B9998(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t sub_23F7CECBC()
{
  return sub_23F7BE7E8();
}

_QWORD *sub_23F7CECD4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23FB2EF54();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23FB2E834();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_23F7CED90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_23FB2E834();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_23F7CEDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_23F7CEE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_23F7CEF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_23F7CEF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_23F7CF02C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F7CF038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  sub_23F7B0D00();
  sub_23F6F07DC();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_23FB2E834();
    sub_23F6F07DC();
    if (!v9)
    {
      sub_23F694C84();
      return;
    }
    v7 = v10;
    v8 = a1 + *(int *)(a3 + 20);
  }
  sub_23F6F07D0(v8, a2, v7);
}

uint64_t sub_23F7CF0B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F7CF0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_23F7B0D00();
  sub_23F6F07EC();
  if (v10)
  {
    v8 = v7;
    v9 = a1;
  }
  else
  {
    sub_23FB2E834();
    sub_23F6F07EC();
    if (!v10)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
      sub_23F694C84();
      return;
    }
    v8 = v11;
    v9 = a1 + *(int *)(a4 + 20);
  }
  sub_23F6F07C4(v9, a2, a2, v8);
}

uint64_t sub_23F7CF134()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23FB2EF54();
  if (v1 <= 0x3F)
  {
    result = sub_23FB2E834();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23F7CF1C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23FB2EF54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
    v12 = *(int *)(v11 + 20);
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = sub_23FB2E834();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v8[*(int *)(v11 + 24)] = v9[*(int *)(v11 + 24)];
    v16 = *(int *)(a3 + 24);
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_23F7CF2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = v2 + *(int *)(type metadata accessor for AssistantSchemaToolBoxRepresentation(0) + 20);
  v5 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23F7CF340(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2EF54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_23FB2E834();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_23F7CF410(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2EF54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_23FB2E834();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_23F7CF4F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2EF54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_23FB2E834();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_23F7CF5B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23FB2EF54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_23FB2E834();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23F7CF68C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F7CF698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;

  type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  sub_23F6F07DC();
  if (v7)
  {
    sub_23F6F07D0(a1 + *(int *)(a3 + 20), a2, v6);
  }
  else
  {
    sub_23F7D27C8(a1 + *(int *)(a3 + 24));
    sub_23F694C84();
  }
}

uint64_t sub_23F7CF6F0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F7CF6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  sub_23F6F07EC();
  if (v8)
  {
    sub_23F6F07C4(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
    sub_23F694C84();
  }
}

uint64_t sub_23F7CF760()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AssistantSchemaToolBoxRepresentation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_23F7CF7E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23FB2EF54();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
    v9 = *(int *)(v8 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23FB2E834();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v13 = *(int *)(a3 + 20);
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23F7CF8C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = a1 + *(int *)(type metadata accessor for AssistantSchemaToolBoxRepresentation(0) + 20);
  v4 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7CF93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v8 = *(int *)(v7 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23F7CF9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v8 = *(int *)(v7 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23F7CFAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v8 = *(int *)(v7 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23F7CFB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23FB2EF54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v8 = *(int *)(v7 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23FB2E834();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23F7CFC18()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_23F7CFC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23F6B5AC8();
  v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(v6);
  if (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 84) == (_DWORD)a2)
  {
    sub_23F6F07D0(v3, a2, v7);
  }
  else
  {
    sub_23F7D27C8(v3 + *(int *)(a3 + 20));
    sub_23F694C84();
  }
}

uint64_t sub_23F7CFC7C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23F7CFC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  sub_23F6F07EC();
  if (v8)
  {
    sub_23F6F07C4(a1, a2, a2, v7);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
    sub_23F694C84();
  }
}

uint64_t sub_23F7CFCE8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AssistantSchemaToolBoxRepresentation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DenyTool()
{
  return &type metadata for DenyTool;
}

void sub_23F7CFD6C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  sub_23F6B54F8();
  sub_23F694CC8();
}

ValueMetadata *type metadata accessor for ToolDenyList()
{
  return &type metadata for ToolDenyList;
}

void type metadata accessor for ToolBoxIndexedEmeddingContribution()
{
  sub_23F694C70();
}

uint64_t sub_23F7CFDB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2EF54();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = sub_23F6916B8(&qword_256EAA6E8);
      *(_DWORD *)(a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v9;
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23F7CFEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_23FB2EF54();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = sub_23F6916B8(&qword_256EAA6E8);
    *(_DWORD *)(a1 + *(int *)(v5 + 48)) = *(_DWORD *)(a2 + *(int *)(v5 + 48));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23F7CFFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_23F6B4FAC();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_23FB2EF54();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = sub_23F6916B8(&qword_256EAA6E8);
      *(_DWORD *)(a1 + *(int *)(v5 + 48)) = *(_DWORD *)(a2 + *(int *)(v5 + 48));
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_23F7D00A4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23FB2EF54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_23F6916B8(&qword_256EAA6E8);
    *(_DWORD *)&a1[*(int *)(v7 + 48)] = *(_DWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_23F7D0148(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23F6B4FAC();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2EF54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_23F6916B8(&qword_256EAA6E8);
      *(_DWORD *)&a1[*(int *)(v7 + 48)] = *(_DWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23F7D0204()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  char *v4;
  void *v5;

  v3 = &unk_23FB611C8;
  result = sub_23FB2EF54();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v4 = &v2;
    v5 = &unk_23FB611C8;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_23F7D0294(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23F7D02D0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_23F7D032C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_23F7D0370(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23F7D03B0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for IntermediateToolToEmbedRepresentation()
{
  sub_23F694C70();
}

uint64_t sub_23F7D0400()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7D0430(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23F7D0494(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ToolRetrievalResponse(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_23F7D0544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23F7D05A8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23F7D05E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ToolToEmbed()
{
  sub_23F694C70();
}

uint64_t sub_23F7D0640(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2EF54();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = sub_23F6916B8(&qword_256EAA6E0);
      *(_BYTE *)(a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v9;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_23F7D0748(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      v3 = sub_23F7B0D00();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 0:
LABEL_4:
      swift_bridgeObjectRelease();
      return;
    default:
      sub_23F694CC8();
      break;
  }
}

uint64_t sub_23F7D07A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_23FB2EF54();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = sub_23F6916B8(&qword_256EAA6E0);
    *(_BYTE *)(a1 + *(int *)(v5 + 48)) = *(_BYTE *)(a2 + *(int *)(v5 + 48));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23F7D0884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_23F6B4FAC();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_23FB2EF54();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = sub_23F6916B8(&qword_256EAA6E0);
      *(_BYTE *)(a1 + *(int *)(v5 + 48)) = *(_BYTE *)(a2 + *(int *)(v5 + 48));
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_BYTE *sub_23F7D0988(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23FB2EF54();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_23F6916B8(&qword_256EAA6E0);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_23F7D0A2C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23F6B4FAC();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23FB2EF54();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_23F6916B8(&qword_256EAA6E0);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23F7D0AE8()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  char *v4;
  void *v5;

  v3 = &unk_23FB61238;
  result = sub_23FB2EF54();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v4 = &v2;
    v5 = &unk_23FB61238;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_23F7D0B78()
{
  unint64_t result;

  result = qword_256EAAAE0;
  if (!qword_256EAAAE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61330, &unk_250FF8648);
    atomic_store(result, (unint64_t *)&qword_256EAAAE0);
  }
  return result;
}

unint64_t sub_23F7D0BB8()
{
  unint64_t result;

  result = qword_256EAAAE8;
  if (!qword_256EAAAE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61380, &type metadata for DenyTool);
    atomic_store(result, (unint64_t *)&qword_256EAAAE8);
  }
  return result;
}

unint64_t sub_23F7D0BF4()
{
  unint64_t result;

  result = qword_256EAAB10;
  if (!qword_256EAAB10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6218C, &type metadata for ToolboxDatabasePayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAB10);
  }
  return result;
}

unint64_t sub_23F7D0C30()
{
  unint64_t result;

  result = qword_256EAAB18;
  if (!qword_256EAAB18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6213C, &type metadata for ToolboxDatabasePayload.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAB18);
  }
  return result;
}

unint64_t sub_23F7D0C6C()
{
  unint64_t result;

  result = qword_256EAAB20;
  if (!qword_256EAAB20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB612A0, &unk_250FF8648);
    atomic_store(result, (unint64_t *)&qword_256EAAB20);
  }
  return result;
}

unint64_t sub_23F7D0CA8()
{
  unint64_t result;

  result = qword_256EAAB28;
  if (!qword_256EAAB28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB620EC, &type metadata for ToolboxDatabasePayload.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAB28);
  }
  return result;
}

unint64_t sub_23F7D0CE4()
{
  unint64_t result;

  result = qword_256EAAB30;
  if (!qword_256EAAB30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6209C, &type metadata for ToolboxDatabasePayload.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAB30);
  }
  return result;
}

unint64_t sub_23F7D0D20()
{
  unint64_t result;

  result = qword_256EAAB58;
  if (!qword_256EAAB58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB612C8, &unk_250FF8648);
    atomic_store(result, (unint64_t *)&qword_256EAAB58);
  }
  return result;
}

unint64_t sub_23F7D0D5C()
{
  unint64_t result;

  result = qword_256EAAB68;
  if (!qword_256EAAB68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6204C, &type metadata for ToolDenyList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAB68);
  }
  return result;
}

unint64_t sub_23F7D0D98()
{
  unint64_t result;

  result = qword_256EAAB80;
  if (!qword_256EAAB80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB613D0, &type metadata for DenyTool);
    atomic_store(result, (unint64_t *)&qword_256EAAB80);
  }
  return result;
}

unint64_t sub_23F7D0DD4()
{
  unint64_t result;

  result = qword_256EAAB90;
  if (!qword_256EAAB90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61FFC, &type metadata for DenyTool.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAB90);
  }
  return result;
}

void sub_23F7D0E10(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!*a1)
  {
    v7 = sub_23F6AE310(a2);
    v8 = a3;
    atomic_store(MEMORY[0x242674E5C](a4, v7, &v8), a1);
  }
  sub_23F6B6664();
}

void sub_23F7D0E60(unint64_t *a1, void (*a2)(void))
{
  uint64_t v4;

  if (!*a1)
  {
    sub_23F6AE310(&qword_256EAAB70);
    a2();
    v4 = sub_23F6B619C();
    atomic_store(MEMORY[0x242674E5C](v4), a1);
  }
  sub_23F6B6664();
}

unint64_t sub_23F7D0EB8()
{
  unint64_t result;

  result = qword_256EAABB0;
  if (!qword_256EAABB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB613A8, &type metadata for DenyTool);
    atomic_store(result, (unint64_t *)&qword_256EAABB0);
  }
  return result;
}

unint64_t sub_23F7D0EF4()
{
  unint64_t result;

  result = qword_256EAABD0;
  if (!qword_256EAABD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61FAC, &type metadata for ToolBoxIndexedEmeddingContribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAABD0);
  }
  return result;
}

unint64_t sub_23F7D0F30()
{
  unint64_t result;

  result = qword_256EAABD8;
  if (!qword_256EAABD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61F5C, &type metadata for ToolBoxIndexedEmeddingContribution.NegativeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAABD8);
  }
  return result;
}

unint64_t sub_23F7D0F6C()
{
  unint64_t result;

  result = qword_256EAABE0;
  if (!qword_256EAABE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61F0C, &type metadata for ToolBoxIndexedEmeddingContribution.PositiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAABE0);
  }
  return result;
}

unint64_t sub_23F7D0FA8()
{
  unint64_t result;

  result = qword_256EAAC20;
  if (!qword_256EAAC20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61EBC, &type metadata for ToolboxSearchOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC20);
  }
  return result;
}

unint64_t sub_23F7D0FE4()
{
  unint64_t result;

  result = qword_256EAAC28;
  if (!qword_256EAAC28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61E6C, &type metadata for ToolboxSearchOutput.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC28);
  }
  return result;
}

unint64_t sub_23F7D1020()
{
  unint64_t result;

  result = qword_256EAAC30;
  if (!qword_256EAAC30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61E1C, &type metadata for ToolboxSearchOutput.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC30);
  }
  return result;
}

unint64_t sub_23F7D105C()
{
  unint64_t result;

  result = qword_256EAAC38;
  if (!qword_256EAAC38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61DCC, &type metadata for ToolboxSearchOutput.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC38);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.CodingKeys()
{
  return &type metadata for ToolboxSearchOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.ToolDefinitionCodingKeys()
{
  return &type metadata for ToolboxSearchOutput.ToolDefinitionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.AssistantSchemaCodingKeys()
{
  return &type metadata for ToolboxSearchOutput.AssistantSchemaCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.ClientActionCodingKeys()
{
  return &type metadata for ToolboxSearchOutput.ClientActionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxIndexedEmeddingContribution.CodingKeys()
{
  return &type metadata for ToolBoxIndexedEmeddingContribution.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxIndexedEmeddingContribution.PositiveCodingKeys()
{
  return &type metadata for ToolBoxIndexedEmeddingContribution.PositiveCodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxIndexedEmeddingContribution.NegativeCodingKeys()
{
  return &type metadata for ToolBoxIndexedEmeddingContribution.NegativeCodingKeys;
}

ValueMetadata *type metadata accessor for DenyTool.CodingKeys()
{
  return &type metadata for DenyTool.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolDenyList.CodingKeys()
{
  return &type metadata for ToolDenyList.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport19ToolboxSearchOutputO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23F7D1178 + 4 * byte_23FB60E54[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23F7D11AC + 4 * byte_23FB60E4F[v4]))();
}

uint64_t sub_23F7D11AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7D11B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7D11BCLL);
  return result;
}

uint64_t sub_23F7D11C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7D11D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23F7D11D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7D11DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.CodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.ToolDefinitionCodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.ToolDefinitionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.AssistantSchemaCodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.AssistantSchemaCodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport19ToolboxSearchOutputO24ToolDefinitionCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F7D1264 + 4 * byte_23FB60E5E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F7D1298 + 4 * byte_23FB60E59[v4]))();
}

uint64_t sub_23F7D1298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7D12A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7D12A8);
  return result;
}

uint64_t sub_23F7D12B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7D12BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F7D12C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7D12C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.ClientActionCodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.ClientActionCodingKeys;
}

unint64_t sub_23F7D12E8()
{
  unint64_t result;

  result = qword_256EAAC60;
  if (!qword_256EAAC60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB615D4, &type metadata for ToolboxDatabasePayload.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC60);
  }
  return result;
}

unint64_t sub_23F7D1328()
{
  unint64_t result;

  result = qword_256EAAC68;
  if (!qword_256EAAC68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6168C, &type metadata for ToolboxDatabasePayload.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC68);
  }
  return result;
}

unint64_t sub_23F7D1368()
{
  unint64_t result;

  result = qword_256EAAC70;
  if (!qword_256EAAC70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61744, &type metadata for ToolboxDatabasePayload.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC70);
  }
  return result;
}

unint64_t sub_23F7D13A8()
{
  unint64_t result;

  result = qword_256EAAC78;
  if (!qword_256EAAC78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB617FC, &type metadata for ToolboxDatabasePayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC78);
  }
  return result;
}

unint64_t sub_23F7D13E8()
{
  unint64_t result;

  result = qword_256EAAC80;
  if (!qword_256EAAC80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB618B4, &type metadata for ToolDenyList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC80);
  }
  return result;
}

unint64_t sub_23F7D1428()
{
  unint64_t result;

  result = qword_256EAAC88;
  if (!qword_256EAAC88)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6196C, &type metadata for DenyTool.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC88);
  }
  return result;
}

unint64_t sub_23F7D1468()
{
  unint64_t result;

  result = qword_256EAAC90;
  if (!qword_256EAAC90)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61AC4, &type metadata for ToolBoxIndexedEmeddingContribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC90);
  }
  return result;
}

unint64_t sub_23F7D14A8()
{
  unint64_t result;

  result = qword_256EAAC98;
  if (!qword_256EAAC98)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61B7C, &type metadata for ToolboxSearchOutput.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAC98);
  }
  return result;
}

unint64_t sub_23F7D14E8()
{
  unint64_t result;

  result = qword_256EAACA0;
  if (!qword_256EAACA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61C34, &type metadata for ToolboxSearchOutput.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACA0);
  }
  return result;
}

unint64_t sub_23F7D1528()
{
  unint64_t result;

  result = qword_256EAACA8;
  if (!qword_256EAACA8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61CEC, &type metadata for ToolboxSearchOutput.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACA8);
  }
  return result;
}

unint64_t sub_23F7D1568()
{
  unint64_t result;

  result = qword_256EAACB0;
  if (!qword_256EAACB0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61DA4, &type metadata for ToolboxSearchOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACB0);
  }
  return result;
}

unint64_t sub_23F7D15A8()
{
  unint64_t result;

  result = qword_256EAACB8;
  if (!qword_256EAACB8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61C5C, &type metadata for ToolboxSearchOutput.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACB8);
  }
  return result;
}

unint64_t sub_23F7D15E8()
{
  unint64_t result;

  result = qword_256EAACC0;
  if (!qword_256EAACC0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61C84, &type metadata for ToolboxSearchOutput.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACC0);
  }
  return result;
}

unint64_t sub_23F7D1628()
{
  unint64_t result;

  result = qword_256EAACC8;
  if (!qword_256EAACC8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61BA4, &type metadata for ToolboxSearchOutput.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACC8);
  }
  return result;
}

unint64_t sub_23F7D1668()
{
  unint64_t result;

  result = qword_256EAACD0;
  if (!qword_256EAACD0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61BCC, &type metadata for ToolboxSearchOutput.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACD0);
  }
  return result;
}

unint64_t sub_23F7D16A8()
{
  unint64_t result;

  result = qword_256EAACD8;
  if (!qword_256EAACD8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61AEC, &type metadata for ToolboxSearchOutput.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACD8);
  }
  return result;
}

unint64_t sub_23F7D16E8()
{
  unint64_t result;

  result = qword_256EAACE0;
  if (!qword_256EAACE0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61B14, &type metadata for ToolboxSearchOutput.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACE0);
  }
  return result;
}

unint64_t sub_23F7D1728()
{
  unint64_t result;

  result = qword_256EAACE8;
  if (!qword_256EAACE8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61D14, &type metadata for ToolboxSearchOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACE8);
  }
  return result;
}

unint64_t sub_23F7D1768()
{
  unint64_t result;

  result = qword_256EAACF0;
  if (!qword_256EAACF0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61D3C, &type metadata for ToolboxSearchOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACF0);
  }
  return result;
}

unint64_t sub_23F7D17A8()
{
  unint64_t result;

  result = qword_256EAACF8;
  if (!qword_256EAACF8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB619E4, &type metadata for ToolBoxIndexedEmeddingContribution.PositiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAACF8);
  }
  return result;
}

unint64_t sub_23F7D17E8()
{
  unint64_t result;

  result = qword_256EAAD00;
  if (!qword_256EAAD00)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61A0C, &type metadata for ToolBoxIndexedEmeddingContribution.PositiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD00);
  }
  return result;
}

unint64_t sub_23F7D1828()
{
  unint64_t result;

  result = qword_256EAAD08;
  if (!qword_256EAAD08)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61994, &type metadata for ToolBoxIndexedEmeddingContribution.NegativeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD08);
  }
  return result;
}

unint64_t sub_23F7D1868()
{
  unint64_t result;

  result = qword_256EAAD10;
  if (!qword_256EAAD10)
  {
    result = MEMORY[0x242674E5C](&unk_23FB619BC, &type metadata for ToolBoxIndexedEmeddingContribution.NegativeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD10);
  }
  return result;
}

unint64_t sub_23F7D18A8()
{
  unint64_t result;

  result = qword_256EAAD18;
  if (!qword_256EAAD18)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61A34, &type metadata for ToolBoxIndexedEmeddingContribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD18);
  }
  return result;
}

unint64_t sub_23F7D18E8()
{
  unint64_t result;

  result = qword_256EAAD20;
  if (!qword_256EAAD20)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61A5C, &type metadata for ToolBoxIndexedEmeddingContribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD20);
  }
  return result;
}

unint64_t sub_23F7D1928()
{
  unint64_t result;

  result = qword_256EAAD28;
  if (!qword_256EAAD28)
  {
    result = MEMORY[0x242674E5C](&unk_23FB618DC, &type metadata for DenyTool.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD28);
  }
  return result;
}

unint64_t sub_23F7D1968()
{
  unint64_t result;

  result = qword_256EAAD30;
  if (!qword_256EAAD30)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61904, &type metadata for DenyTool.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD30);
  }
  return result;
}

unint64_t sub_23F7D19A8()
{
  unint64_t result;

  result = qword_256EAAD38;
  if (!qword_256EAAD38)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61824, &type metadata for ToolDenyList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD38);
  }
  return result;
}

unint64_t sub_23F7D19E8()
{
  unint64_t result;

  result = qword_256EAAD40;
  if (!qword_256EAAD40)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6184C, &type metadata for ToolDenyList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD40);
  }
  return result;
}

unint64_t sub_23F7D1A28()
{
  unint64_t result;

  result = qword_256EAAD48;
  if (!qword_256EAAD48)
  {
    result = MEMORY[0x242674E5C](&unk_23FB616B4, &type metadata for ToolboxDatabasePayload.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD48);
  }
  return result;
}

unint64_t sub_23F7D1A68()
{
  unint64_t result;

  result = qword_256EAAD50;
  if (!qword_256EAAD50)
  {
    result = MEMORY[0x242674E5C](&unk_23FB616DC, &type metadata for ToolboxDatabasePayload.ToolDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD50);
  }
  return result;
}

unint64_t sub_23F7D1AA8()
{
  unint64_t result;

  result = qword_256EAAD58;
  if (!qword_256EAAD58)
  {
    result = MEMORY[0x242674E5C](&unk_23FB615FC, &type metadata for ToolboxDatabasePayload.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD58);
  }
  return result;
}

unint64_t sub_23F7D1AE8()
{
  unint64_t result;

  result = qword_256EAAD60;
  if (!qword_256EAAD60)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61624, &type metadata for ToolboxDatabasePayload.AssistantSchemaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD60);
  }
  return result;
}

unint64_t sub_23F7D1B28()
{
  unint64_t result;

  result = qword_256EAAD68;
  if (!qword_256EAAD68)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61544, &type metadata for ToolboxDatabasePayload.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD68);
  }
  return result;
}

unint64_t sub_23F7D1B68()
{
  unint64_t result;

  result = qword_256EAAD70;
  if (!qword_256EAAD70)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6156C, &type metadata for ToolboxDatabasePayload.ClientActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD70);
  }
  return result;
}

unint64_t sub_23F7D1BA8()
{
  unint64_t result;

  result = qword_256EAAD78;
  if (!qword_256EAAD78)
  {
    result = MEMORY[0x242674E5C](&unk_23FB6176C, &type metadata for ToolboxDatabasePayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD78);
  }
  return result;
}

unint64_t sub_23F7D1BE8()
{
  unint64_t result;

  result = qword_256EAAD80;
  if (!qword_256EAAD80)
  {
    result = MEMORY[0x242674E5C](&unk_23FB61794, &type metadata for ToolboxDatabasePayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAAD80);
  }
  return result;
}

void sub_23F7D1C58()
{
  sub_23F7544A0();
}

uint64_t sub_23F7D1C70(uint64_t (*a1)(void))
{
  return a1();
}

void sub_23F7D1C8C(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
  uint8_t *v6;

  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, v6, 2u);
}

uint64_t sub_23F7D1C98@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_23F7D1CA0(_WORD *a1)
{
  *a1 = 0;
  return sub_23FB2E768();
}

void sub_23F7D1CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v2, 0, 1, v1);
  sub_23F7D33F0(v2, v0);
}

void sub_23F7D1CD8()
{
  sub_23F7544A0();
}

void sub_23F7D1CE4(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, a7, 2u);
}

uint64_t sub_23F7D1CEC()
{
  return sub_23FB2E7BC();
}

uint64_t sub_23F7D1D00(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7D1D1C()
{
  return sub_23FB2E7B0();
}

uint64_t sub_23F7D1D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 88))(v1, v2);
}

void sub_23F7D1D3C()
{
  void *v0;

}

uint64_t sub_23F7D1D84(_WORD *a1)
{
  *a1 = 0;
  return sub_23FB2E768();
}

uint64_t sub_23F7D1D8C()
{
  return sub_23FB2E7B0();
}

void sub_23F7D1DA0(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 80) = *(_QWORD *)(v1 + 64);

}

uint64_t sub_23F7D1DE4()
{
  return sub_23FB2E7B0();
}

uint64_t sub_23F7D1DF0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23F7D1DFC()
{
  return sub_23FB2F638();
}

uint64_t sub_23F7D1E08()
{
  return sub_23FB2E78C();
}

uint64_t sub_23F7D1E14()
{
  return sub_23FB2C668();
}

uint64_t sub_23F7D1E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v1 + 16) = a1;
  v3 = *(_QWORD **)(v2 - 416);
  *v3 = v1;
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*(_QWORD *)(v2 - 408) + 104))(v3, *(unsigned int *)(v2 - 596), *(_QWORD *)(v2 - 400));
}

uint64_t sub_23F7D1E5C(uint64_t a1, float a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v4;
  *v5 = a2;
  *(_QWORD *)(v6 - 88) = a1;
  *(_QWORD *)(v6 - 136) = v5 + 1;
  *(_QWORD *)(v6 - 128) = v5;
  v8 = v2[26];
  v7 = v2[27];
  sub_23F6ADC98(v2 + 23, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v8, v7);
}

uint64_t sub_23F7D1EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_23F7D1EB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 224) + 8))(*(_QWORD *)(v0 - 216), *(_QWORD *)(v0 - 312));
}

uint64_t sub_23F7D1EC8()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D1EFC()
{
  return swift_allocObject();
}

uint64_t sub_23F7D1F08()
{
  uint64_t v0;

  return sub_23F7B860C(*(_QWORD *)(v0 - 104), *(_QWORD *)(v0 - 96));
}

uint64_t sub_23F7D1F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  *(_QWORD *)(v2 - 96) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7D1F20()
{
  return sub_23FB2F638();
}

uint64_t sub_23F7D1F2C()
{
  return swift_beginAccess();
}

uint64_t sub_23F7D1F38()
{
  return sub_23F7B7BDC();
}

uint64_t sub_23F7D1F74()
{
  return swift_beginAccess();
}

uint64_t sub_23F7D1F7C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23F7D1F88()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D1F90()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D1F98()
{
  return sub_23FB2E78C();
}

uint64_t sub_23F7D1FA4()
{
  return swift_retain();
}

void sub_23F7D1FAC()
{
  sub_23F7541B8();
}

void sub_23F7D1FC4()
{
  sub_23F7541B8();
}

uint64_t sub_23F7D1FDC()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v2, v3, v1);
}

uint64_t sub_23F7D1FEC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_23F7D2008()
{
  uint64_t v0;

  return sub_23F6D1E64(*(_QWORD *)(v0 - 256), *(_QWORD *)(v0 - 264));
}

uint64_t sub_23F7D2018()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6D1E64(*(_QWORD *)(v1 - 256), *(_QWORD *)(v1 - 264));
  return v0;
}

uint64_t sub_23F7D2038@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, char a3@<W8>)
{
  uint64_t v3;

  *a2 = a3;
  *(_QWORD *)(v3 - 208) = a1;
  return swift_willThrow();
}

uint64_t sub_23F7D2048()
{
  return sub_23FB2E7B0();
}

uint64_t sub_23F7D2058(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v3 - 8) = *v2;
  *(_QWORD *)(v3 - 8) = *v2;
  *(_QWORD *)(v4 + 288) = a1;
  *(_QWORD *)(v4 + 296) = v1;
  return swift_task_dealloc();
}

uint64_t sub_23F7D20B8()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D20C0()
{
  return sub_23FB2E7D4();
}

uint64_t sub_23F7D20E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  return sub_23F6D1E64(a17, a22);
}

uint64_t sub_23F7D20EC()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D20F4()
{
  return swift_task_switch();
}

uint64_t sub_23F7D2108(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return sub_23FB2F680();
}

uint64_t sub_23F7D2128()
{
  return sub_23FB2E7E0();
}

uint64_t sub_23F7D2130()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D2148()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 272) + 8))(v0, *(_QWORD *)(v1 - 280));
}

uint64_t sub_23F7D2168()
{
  return sub_23FB2E378();
}

uint64_t sub_23F7D2170@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_23F7D217C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return sub_23FB2E7A4();
}

uint64_t sub_23F7D218C()
{
  return sub_23FB2EF54();
}

uint64_t sub_23F7D2198(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return sub_23FB2F680();
}

void sub_23F7D21B4()
{
  sub_23F6B4FAC();
}

uint64_t sub_23F7D21C0()
{
  return sub_23FB2E7B0();
}

uint64_t sub_23F7D21CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23F7D21D8()
{
  return sub_23FB2C65C();
}

uint64_t sub_23F7D21E4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_23F7D21F4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t sub_23F7D2218()
{
  return sub_23FB2C65C();
}

uint64_t sub_23F7D2220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  *(_QWORD *)(v1 + 256) = a1;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v1 + 264) = v5;
  return v5(v2, v3);
}

uint64_t sub_23F7D223C()
{
  return swift_allocObject();
}

void sub_23F7D2298()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 616) = *(_QWORD *)(*(_QWORD *)(v0 - 296) + 120);
}

uint64_t sub_23F7D22BC()
{
  return type metadata accessor for ToolboxSearchOutput(0);
}

uint64_t sub_23F7D22D8()
{
  return sub_23FB2C320();
}

uint64_t sub_23F7D22F4()
{
  return sub_23FB2C674();
}

uint64_t sub_23F7D2310()
{
  return sub_23FB2E378();
}

uint64_t sub_23F7D232C()
{
  return sub_23FB2E7F8();
}

uint64_t sub_23F7D2348()
{
  return sub_23FB2C320();
}

uint64_t sub_23F7D2350()
{
  return sub_23FB2C608();
}

uint64_t sub_23F7D2358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void sub_23F7D2364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  *(_QWORD *)(a31 + 16) = v31;
}

uint64_t sub_23F7D2388(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 104))(a1, *(_QWORD *)(v1 - 216));
}

uint64_t sub_23F7D2394()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F7F18FC((uint64_t *)(v1 - 104), v0);
}

uint64_t sub_23F7D243C()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23F7D2448(_QWORD *a1)
{
  uint64_t v1;

  return sub_23F6ADC98(a1, v1);
}

uint64_t sub_23F7D2450()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F7D2498(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
  return sub_23FB2F680();
}

void sub_23F7D24B0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t sub_23F7D24B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_23F69334C(a1, v3, a3);
}

uint64_t sub_23F7D24C0()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D24C8()
{
  return swift_release();
}

void sub_23F7D24D0(char a1, uint64_t a2)
{
  sub_23F711194(a1, a2, 1);
}

void sub_23F7D24D8()
{
  sub_23F7F12F8();
}

uint64_t sub_23F7D24F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D24FC()
{
  return swift_release();
}

uint64_t sub_23F7D2504()
{
  return sub_23FB2C680();
}

uint64_t sub_23F7D250C()
{
  return sub_23FB2E7C8();
}

uint64_t sub_23F7D2514()
{
  return sub_23FB2E7A4();
}

uint64_t sub_23F7D251C()
{
  return type metadata accessor for ToolboxVersion(0);
}

uint64_t sub_23F7D2524()
{
  return sub_23FB2E774();
}

uint64_t sub_23F7D252C()
{
  return sub_23FB2C674();
}

uint64_t sub_23F7D2554()
{
  return 1;
}

uint64_t sub_23F7D2580()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_23F7D258C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7D2598()
{
  return sub_23FB2F9F8();
}

uint64_t sub_23F7D25B0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_23F7D25BC()
{
  return sub_23FB2C65C();
}

uint64_t sub_23F7D25C4()
{
  return sub_23FB2F638();
}

void sub_23F7D25CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_23F7D25E0()
{
  return swift_retain();
}

uint64_t sub_23F7D25E8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 616));
}

uint64_t sub_23F7D25FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_23F7D2604()
{
  return swift_release();
}

uint64_t sub_23F7D260C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2618()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23F7D263C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v4, a2, v2);
}

BOOL sub_23F7D2648()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F7B2C34(v1, v0);
}

void sub_23F7D2654(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_23F7F0E60(a1, v2, v1);
}

uint64_t sub_23F7D2660()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D2668()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D2670()
{
  return swift_allocObject();
}

uint64_t sub_23F7D267C()
{
  return swift_allocObject();
}

uint64_t sub_23F7D2688()
{
  return sub_23FB2E858();
}

uint64_t sub_23F7D2690()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23F7D26A4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23F6BC34C(v0, v1);
}

void sub_23F7D26B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 16) = v1;
  v6 = v3 + 32 * v2;
  *(_QWORD *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 40) = v4;
  *(_QWORD *)(v6 + 48) = v0;
  *(_BYTE *)(v6 + 56) = 0;
}

uint64_t sub_23F7D26CC()
{
  return sub_23FB2F638();
}

uint64_t sub_23F7D26D8()
{
  return swift_arrayDestroy();
}

uint64_t sub_23F7D26EC()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, 0, 1, v1);
}

uint64_t sub_23F7D2700()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23F6BC34C(v1, v0);
}

uint64_t sub_23F7D270C()
{
  return sub_23FB2C68C();
}

uint64_t sub_23F7D2714()
{
  return swift_retain();
}

void sub_23F7D271C()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
}

uint64_t sub_23F7D2728@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 280) = a1;
  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 32);
}

uint64_t sub_23F7D2744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v1, v2);
}

uint64_t sub_23F7D2758(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_23F7D2774()
{
  return sub_23FB2E75C();
}

BOOL sub_23F7D277C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_23F7D278C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_23F69334C(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_23F7D279C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23F7B297C(v2, v1, v0);
}

uint64_t sub_23F7D27AC()
{
  return sub_23FB2C668();
}

uint64_t sub_23F7D27BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D27C8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_23F7D27E0()
{
  return sub_23FB2FAA0();
}

uint64_t sub_23F7D27F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_23F7D2800()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 328);
}

uint64_t sub_23F7D280C()
{
  return sub_23FB2FC5C();
}

uint64_t sub_23F7D281C(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, 0, 1, v1);
}

void sub_23F7D2848()
{
  uint64_t v0;

}

uint64_t sub_23F7D2850()
{
  return sub_23FB2F254();
}

uint64_t sub_23F7D2860()
{
  return sub_23FB2F254();
}

uint64_t sub_23F7D2870(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23F7D2880()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23F69334C(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t sub_23F7D2890()
{
  return sub_23FB2F680();
}

uint64_t sub_23F7D2898()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 176) + 8))(*(_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 168));
}

uint64_t sub_23F7D28A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7D28B8()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D28C8()
{
  return sub_23FB2F5D8();
}

BOOL sub_23F7D28D0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_23F7D28E0()
{
  return sub_23FB2E8A0();
}

uint64_t sub_23F7D28E8(_WORD *a1)
{
  *a1 = 0;
  return sub_23FB2E768();
}

void sub_23F7D2910()
{
  void *v0;

}

uint64_t sub_23F7D2920()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2938()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2948@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 648));
}

uint64_t sub_23F7D2958()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2964()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23F7D296C()
{
  return swift_retain();
}

uint64_t sub_23F7D2974()
{
  return sub_23FB2F608();
}

uint64_t sub_23F7D297C()
{
  return sub_23FB2F5D8();
}

uint64_t sub_23F7D2984@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, *(_QWORD *)(v3 - 152));
}

uint64_t sub_23F7D2994()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D29A4()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D29AC()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7D29B4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7D29C4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7D29CC()
{
  return sub_23FB2E78C();
}

void sub_23F7D29D4(uint64_t *a1@<X8>)
{
  static Toolbox.toolboxAllowList()(a1);
}

uint64_t sub_23F7D29DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D29E8()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 72) = *(_QWORD *)(v0 - 104);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7D29F8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_23F7D2A00()
{
  return swift_release();
}

void sub_23F7D2A08()
{
  void *v0;

}

void sub_23F7D2A18()
{
  void *v0;

}

void sub_23F7D2A28()
{
  sub_23F7544A0();
}

void sub_23F7D2A38()
{
  sub_23F71243C();
}

uint64_t sub_23F7D2A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 88))(v1, v2);
}

uint64_t sub_23F7D2A58()
{
  return 0;
}

uint64_t sub_23F7D2A70()
{
  return sub_23FB2FC50();
}

uint64_t sub_23F7D2A80@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_23F7D2A90(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(a1, *(_QWORD *)(v2 - 392));
}

uint64_t sub_23F7D2AA0(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
  return sub_23FB2F680();
}

uint64_t sub_23F7D2ABC()
{
  return sub_23FB2C650();
}

uint64_t sub_23F7D2AC4()
{
  return sub_23FB2E930();
}

unint64_t sub_23F7D2ACC(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

BOOL sub_23F7D2AE4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_23F7D2AF4()
{
  return sub_23FB2E8A0();
}

_QWORD *sub_23F7D2AFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 - 256) = a2;
  return sub_23F6ADC98(*(_QWORD **)(v3 - 592), a1);
}

uint64_t sub_23F7D2B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_23F7D2B1C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  return sub_23F69334C(v5, v4, (uint64_t *)va);
}

uint64_t sub_23F7D2B44()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7D2B64()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F7F18FC((uint64_t *)(v1 - 104), v0);
}

uint64_t sub_23F7D2B74()
{
  return sub_23FB2E78C();
}

void sub_23F7D2B98(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

void sub_23F7D2BAC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

BOOL sub_23F7D2BB8(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

_QWORD *sub_23F7D2BC0(_QWORD *a1)
{
  uint64_t v1;

  return sub_23F6ADC98(a1, *(_QWORD *)(v1 + 208));
}

uint64_t sub_23F7D2BCC()
{
  return sub_23FB2EE04();
}

uint64_t sub_23F7D2BD8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_23F7D2BE4(uint64_t result, float a2)
{
  float *v2;
  uint64_t v3;

  *v2 = a2;
  *(_QWORD *)(v3 - 88) = result;
  return result;
}

uint64_t sub_23F7D2BF8()
{
  return sub_23FB2FA64();
}

uint64_t sub_23F7D2C00()
{
  return sub_23FB2EE04();
}

uint64_t sub_23F7D2C0C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F7D2C18@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

BOOL sub_23F7D2C24()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F7B2C34(v0, v1);
}

uint64_t sub_23F7D2C30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2C3C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2C48()
{
  return sub_23FB2EE58();
}

uint64_t sub_23F7D2C68()
{
  return sub_23FB2EE28();
}

uint64_t sub_23F7D2C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7B8680(a1, (_QWORD *)(a1 + a2), 2);
}

uint64_t sub_23F7D2C80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23F7B8680(a1, (_QWORD *)(a1 + a2), v2);
}

uint64_t sub_23F7D2C8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7B8680(a1, (_QWORD *)(a1 + a2), 0);
}

uint64_t sub_23F7D2C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7B8680(a1, (_QWORD *)(a1 + a2), 4);
}

unint64_t sub_23F7D2CA4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_23F7D0C30();
}

uint64_t sub_23F7D2CB0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23F7D2CB8()
{
  return sub_23FB2FB00();
}

uint64_t sub_23F7D2CC0()
{
  return sub_23FB2FB18();
}

uint64_t sub_23F7D2CC8()
{
  return sub_23FB2D3C4();
}

uint64_t sub_23F7D2CD4()
{
  return sub_23FB2E378();
}

uint64_t sub_23F7D2D14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 216);
}

uint64_t sub_23F7D2D28()
{
  return sub_23FB2E7D4();
}

uint64_t sub_23F7D2D30()
{
  return sub_23FB2C464();
}

uint64_t sub_23F7D2D38(uint64_t a1, uint64_t a2)
{
  return sub_23F7CDCD4(a1, a2);
}

_WORD *sub_23F7D2D44(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23F7D2D5C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_23F7D2D74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_23F69334C(v3, v4, a3);
}

uint64_t sub_23F7D2D8C(float a1)
{
  float *v1;

  *v1 = a1;
  return type metadata accessor for ToolBoxToolSearchResult(0);
}

uint64_t sub_23F7D2D98()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7D2DB4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_23F7D2DBC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_23F7D2DD4()
{
  return sub_23FB2F638();
}

uint64_t sub_23F7D2DDC()
{
  uint64_t v0;

  return **(int **)(v0 + 72) + *(_QWORD *)(v0 + 72);
}

uint64_t sub_23F7D2DF0()
{
  return sub_23FB2FC50();
}

uint64_t sub_23F7D2DFC()
{
  return sub_23FB2FCC8();
}

uint64_t sub_23F7D2E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  return v0;
}

uint64_t sub_23F7D2E18()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2E2C()
{
  return swift_bridgeObjectRelease();
}

_WORD *sub_23F7D2E40(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23F7D2E4C()
{
  return sub_23FB2F620();
}

unint64_t sub_23F7D2E54()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_23F7D0F30();
}

unint64_t sub_23F7D2E60()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 1;
  return sub_23F7D0CA8();
}

uint64_t sub_23F7D2E6C()
{
  return sub_23FB2E7E0();
}

uint64_t sub_23F7D2E80()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23F6BC34C(v1, v0);
}

uint64_t sub_23F7D2E8C()
{
  void *v0;

  return sub_23F7C459C(v0);
}

uint64_t sub_23F7D2E98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_23F69334C(v3, v4, a3);
}

uint64_t sub_23F7D2EA4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23F6D1E20(v0, v1);
}

uint64_t sub_23F7D2EB0()
{
  return swift_retain();
}

uint64_t sub_23F7D2EB8()
{
  return sub_23FB2E7D4();
}

void sub_23F7D2EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v2 + 16) = v1;
  v6 = (_QWORD *)(v2 + 32 * v3);
  v6[4] = v4;
  v6[5] = v5;
  v6[6] = v0;
}

uint64_t sub_23F7D2ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, 1, v2);
}

void sub_23F7D2EE4()
{
  sub_23F754290();
}

void sub_23F7D2EF0()
{
  void *v0;

}

_QWORD *sub_23F7D2EFC(_QWORD *a1)
{
  uint64_t v1;

  return sub_23F6ADC98(a1, v1);
}

void sub_23F7D2F04()
{
  sub_23F71243C();
}

uint64_t sub_23F7D2F10()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7D2F18()
{
  return sub_23FB2F638();
}

uint64_t sub_23F7D2F24()
{
  return sub_23FB2F638();
}

uint64_t sub_23F7D2F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_23F7D2F3C()
{
  return sub_23FB2F680();
}

uint64_t sub_23F7D2F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;

  return a13(a1, a2, v13);
}

uint64_t sub_23F7D2F54()
{
  return sub_23FB2FADC();
}

uint64_t sub_23F7D2F60()
{
  return sub_23FB2C5FC();
}

void sub_23F7D2F6C(char a1, uint64_t a2)
{
  sub_23F711194(a1, a2, 0);
}

uint64_t sub_23F7D2F74()
{
  return sub_23FB2C2A8();
}

uint64_t sub_23F7D2F7C()
{
  return sub_23FB2E78C();
}

uint64_t sub_23F7D2F88()
{
  return sub_23FB2E378();
}

uint64_t sub_23F7D2F90()
{
  return sub_23FB2D3C4();
}

uint64_t sub_23F7D2F98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7D2FA4()
{
  return swift_task_alloc();
}

__n128 *sub_23F7D2FC8(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_23F7D2FF0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_23F7D3024()
{
  return sub_23FB2E7D4();
}

BOOL sub_23F7D302C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_23F7D3048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  unint64_t v28;
  _QWORD v30[2];
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = sub_23F6916B8(&qword_256EA44D8);
  v3 = *(_QWORD *)(v37 - 8);
  v4 = MEMORY[0x24BDAC7A8](v37);
  v35 = (_QWORD *)((char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v36 = (char *)v30 - v6;
  v7 = sub_23FB2ED38();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v30[1] = v1;
    v39 = MEMORY[0x24BEE4AF8];
    sub_23F711D04();
    v13 = (char *)(a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    v14 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v32 = v14;
    v33 = v7;
    v34 = v10;
    v15 = v31;
    do
    {
      v38 = v11;
      v16 = v36;
      v17 = v37;
      v18 = *(int *)(v37 + 48);
      v19 = &v36[v18];
      v20 = *(_QWORD *)v13;
      *(_QWORD *)v36 = *(_QWORD *)v13;
      v15(&v16[v18], &v13[v18], v7);
      v21 = *(int *)(v17 + 48);
      v22 = v8;
      v23 = (uint64_t)v35;
      v24 = (char *)v35 + v21;
      *v35 = v20;
      v25 = v7;
      v26 = v22;
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
      v27(v23 + v21, v19, v25);
      v15(v10, v24, v25);
      sub_23F6B4F84(v23, &qword_256EA44D8);
      v12 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F711D04();
        v12 = v39;
      }
      v28 = *(_QWORD *)(v12 + 16);
      v8 = v26;
      if (v28 >= *(_QWORD *)(v12 + 24) >> 1)
      {
        sub_23F711D04();
        v12 = v39;
      }
      v7 = v33;
      v13 += v32;
      *(_QWORD *)(v12 + 16) = v28 + 1;
      v10 = v34;
      v27(v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v28, v34, v7);
      v39 = v12;
      v11 = v38 - 1;
    }
    while (v38 != 1);
  }
  return v12;
}

void sub_23F7D32A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7D32DC(a1, a2, a3, &qword_256EA49D8, (void (*)(_QWORD))MEMORY[0x24BE52140], &qword_256EAB2C8);
}

void sub_23F7D32C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7D32DC(a1, a2, a3, &qword_256EA2950, (void (*)(_QWORD))MEMORY[0x24BEB9A18], &qword_256EAAF58);
}

void sub_23F7D32DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(_QWORD), uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;

  v19 = a6;
  sub_23F6916B8(a4);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6BD134();
  v13 = v12 - v11;
  v14 = ((uint64_t (*)(_QWORD))a5)(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v18 - v16;
  if (sub_23F7DD824(a1) == 1)
  {
    sub_23F6B62DC(a1);
    sub_23F7DA528(v19, (uint64_t (*)(_QWORD))a5, v13);
    sub_23F693E04();
    sub_23F6B62DC(v13);
  }
  else
  {
    sub_23F78F5D0((uint64_t)v17, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
    sub_23F7DB8A4((uint64_t)v17, a2, a3, v19, a5);
    sub_23F693E04();
  }
  sub_23F693DDC();
}

void sub_23F7D33F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23F6916B8(&qword_256EAA620);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6BD134();
  v7 = v6 - v5;
  v8 = sub_23FB2C68C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6BD134();
  v12 = v11 - v10;
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v8) == 1)
  {
    sub_23F6B62DC(a1);
    sub_23F7DA67C(v7);
    v13 = sub_23FB2C674();
    sub_23F6B6454(v13);
    sub_23F6B62DC(v7);
  }
  else
  {
    sub_23F75E710(v12, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    sub_23F7DB97C(v12, a2);
    v14 = sub_23FB2C674();
    sub_23F6B6454(v14);
  }
  sub_23F6B69E0();
}

void sub_23F7D34E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_23F6916B8(&qword_256EA44D8) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7DCA04();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_23F7DA7D8((int64_t)v6);
  *a1 = v3;
}

uint64_t sub_23F7D356C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23F7DCE78;
  return ConcurrencySafeToolExecutionInterface.hydrate(value:)(a1, a2, a3, a4);
}

uint64_t sub_23F7D35E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = sub_23FB2E7F8();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v5 = sub_23FB2ED08();
  v3[11] = v5;
  v3[12] = *(_QWORD *)(v5 - 8);
  v3[13] = swift_task_alloc();
  v6 = sub_23FB2EC78();
  v3[14] = v6;
  v3[15] = *(_QWORD *)(v6 - 8);
  v3[16] = swift_task_alloc();
  v7 = sub_23FB2EC6C();
  v3[17] = v7;
  v3[18] = *(_QWORD *)(v7 - 8);
  v3[19] = swift_task_alloc();
  v8 = sub_23FB2EDD4();
  v3[20] = v8;
  v3[21] = *(_QWORD *)(v8 - 8);
  v3[22] = swift_task_alloc();
  v9 = sub_23FB2EBF4();
  v3[23] = v9;
  v3[24] = *(_QWORD *)(v9 - 8);
  v3[25] = swift_task_alloc();
  v10 = sub_23FB2ED38();
  v3[26] = v10;
  v3[27] = *(_QWORD *)(v10 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F7D3754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t (*v5)(void);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *(_QWORD *)(v0 + 216);
  sub_23F7DD628(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 48));
  v3 = sub_23F7DD8E0();
  *(_DWORD *)(v0 + 408) = v3;
  if (v3 == *MEMORY[0x24BEB9A00] || v3 == *MEMORY[0x24BEB9990])
    goto LABEL_6;
  if (v3 == *MEMORY[0x24BEB99E0])
  {
    v7 = *(_QWORD **)(v0 + 240);
    sub_23F7DD2B8(*(_QWORD *)(v0 + 216));
    *(_QWORD *)(v0 + 304) = *v7;
    v8 = swift_projectBox();
    sub_23F7DD234(v8);
    *(_QWORD *)(v0 + 312) = sub_23F7DD938();
    v9 = (_QWORD *)sub_23F7DD130();
    *(_QWORD *)(v0 + 320) = v9;
    *v9 = v0;
    v9[1] = sub_23F7D3CC0;
    sub_23F7DD15C();
    __asm { BR              X2 }
  }
  if (v3 == *MEMORY[0x24BEB9988])
  {
    v11 = *(_QWORD **)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 200);
    sub_23F7DDA0C(*(_QWORD *)(v0 + 216));
    *(_QWORD *)(v0 + 248) = *v11;
    v14 = swift_projectBox();
    sub_23F72E0C8(v12, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
    v15 = sub_23F7DD938();
    *(_QWORD *)(v0 + 16) = v15;
    *(_QWORD *)(v0 + 24) = v16;
    *(_QWORD *)(v0 + 256) = v15;
    MEMORY[0x242673860]();
    *(_QWORD *)(v0 + 264) = sub_23FB2EBE8();
    v17 = (_QWORD *)sub_23F7DD130();
    *(_QWORD *)(v0 + 272) = v17;
    *v17 = v0;
    v17[1] = sub_23F7D3B64;
    sub_23F7DD15C();
    __asm { BR              X1 }
  }
  if (v3 == *MEMORY[0x24BEB99D8])
    goto LABEL_6;
  if (v3 == *MEMORY[0x24BEB99E8])
  {
    v19 = *(_QWORD **)(v0 + 240);
    sub_23F7DD2B8(*(_QWORD *)(v0 + 216));
    *(_QWORD *)(v0 + 336) = *v19;
    v20 = swift_projectBox();
    sub_23F7DD234(v20);
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 344) = v21;
    *v21 = v0;
    v21[1] = sub_23F7D3D0C;
    sub_23F7DD15C();
    return ConcurrencySafeToolKitExecutionSession.resolve(reference:)(v22, v23);
  }
  if (v3 == *MEMORY[0x24BEB99B0])
  {
    sub_23F7DD2B8(*(_QWORD *)(v0 + 216));
    sub_23F7DD8D8();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 360) = v24;
    *v24 = v0;
    v24[1] = sub_23F7D3E14;
    sub_23F7DD15C();
    return ConcurrencySafeToolKitExecutionSession.inject(value:)(v25, v26);
  }
  if (v3 == *MEMORY[0x24BEB9A08])
  {
LABEL_6:
    sub_23F7DD774(*(_QWORD *)(v0 + 216));
    sub_23F7DD8D8();
    sub_23F7DD628(v1, v2);
    sub_23F7DD040();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    v5 = (uint64_t (*)(void))sub_23F750B9C();
    return sub_23F7D1C70(v5);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 224);
    sub_23F7DD9BC();
    sub_23F7DD628(v27, v1);
    v28 = (void *)sub_23FB2E7E0();
    v29 = sub_23FB2F5F0();
    v30 = sub_23F6F5194(v29);
    v32 = *(_QWORD *)(v0 + 72);
    v31 = *(_QWORD *)(v0 + 80);
    v33 = *(_QWORD *)(v0 + 64);
    if (v30)
    {
      sub_23F7DD47C();
      sub_23F7DD874();
      v34 = sub_23F7DD9AC(4.8149e-34);
      v41 = sub_23F7DDB20(v34, v35, v36, v37, v38, v39, v40);
      sub_23F7DD688(v41);
      v42 = swift_bridgeObjectRelease();
      sub_23F7DD99C(v42, v43, v44, v45, v46, v47, v48, v49, v52, v53);
      sub_23F7DD810(&dword_23F68F000, v50, v51, "ConcurrencySafeToolExecutionInterface: Unexpected TypedValue case during hydration: %s");
      sub_23F7A6928();
      sub_23F693DD0();
    }
    sub_23F7DDB14();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    sub_23F7D4CB0();
    sub_23F6B5AD4();
    sub_23F7DDAEC();
    sub_23F7DDAA0();
    sub_23F7DCF2C();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    sub_23F7B0B8C();
    return sub_23F7D1C70(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_23F7D3B64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_23F7DDB2C();
  sub_23F7B0DD0(v3);
  v2[35] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_23F7D1C98(v2[21]);
    sub_23F693E04();
  }
  else
  {
    v4 = v2[3];
    sub_23F693E04();
    v2[36] = v1;
    v2[37] = v4;
  }
  sub_23F6F522C();
  return sub_23F6F5164();
}

uint64_t sub_23F7D3BDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);

  sub_23F7DCFC0();
  v1 = v0[32];
  v2 = v0[27];
  v3 = (_QWORD *)v0[5];
  sub_23FB2EBD0();
  sub_23F7DD968();
  *v3 = v1;
  sub_23F7DD544((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  sub_23F77DA7C();
  sub_23F7DD040();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v4 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEA4(v4);
}

uint64_t sub_23F7D3C5C()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 192));
  sub_23F7DD8F0();
  sub_23F713F08();
  sub_23F7DCF2C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D3CC0()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 328) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D3D0C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 352) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D3D58()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_23F7DD1B8();
  sub_23F7D1C98(*(_QWORD *)(v0 + 120));
  sub_23F77DA7C();
  sub_23F7DD040();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v1 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEE4(v1);
}

uint64_t sub_23F7D3DB4()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 120));
  sub_23F77DA7C();
  sub_23F7DCF2C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D3E14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v3);
  v0[46] = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_23F6F522C();
    return sub_23F6B79B4();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc();
    v0[47] = (uint64_t)v5;
    *v5 = v2;
    v5[1] = sub_23F7D3E94;
    return ConcurrencySafeToolKitExecutionSession.resolve(reference:)(v0[29], v0[13]);
  }
}

uint64_t sub_23F7D3E94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v5)(void);

  sub_23F7DD3B0();
  if (v1)
  {
    sub_23F6F522C();
    return sub_23F7DD144();
  }
  else
  {
    v4 = (_QWORD *)sub_23F7B08B8();
    v0[49] = (uint64_t)v4;
    *v4 = v2;
    v4[1] = sub_23F7D4030;
    return sub_23F7DD5A0(v0[5], v0[29], v5);
  }
}

uint64_t sub_23F7D3F08()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7DCF2C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D3F54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);

  sub_23F7DD1B8();
  v1 = v0[39];
  v2 = v0[27];
  v3 = (_QWORD *)v0[5];
  sub_23F7D1C98(v0[18]);
  *v3 = v1;
  sub_23F7DD544((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  sub_23F77DA7C();
  sub_23F7DD040();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v4 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEE4(v4);
}

uint64_t sub_23F7D3FCC()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 144));
  sub_23F7DD8F0();
  sub_23F713F08();
  sub_23F7DCF2C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4030()
{
  uint64_t v0;

  sub_23F7DD3D0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 216));
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D4078()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 96));
  sub_23F7DCF2C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D40D0()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_23F7DD1B8();
  sub_23F7D1C98(*(_QWORD *)(v0 + 96));
  sub_23F7DD040();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v1 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEE4(v1);
}

uint64_t sub_23F7D4124()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 96));
  sub_23F7DCF2C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ConcurrencySafeToolExecutionInterface.hydrate(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = sub_23FB2E7F8();
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = sub_23F750AE4();
  v7 = sub_23FB2ED08();
  v5[13] = v7;
  v5[14] = *(_QWORD *)(v7 - 8);
  v5[15] = sub_23F750AE4();
  v8 = sub_23FB2EC78();
  v5[16] = v8;
  v5[17] = *(_QWORD *)(v8 - 8);
  v5[18] = sub_23F750AE4();
  v9 = sub_23FB2EC6C();
  v5[19] = v9;
  v5[20] = *(_QWORD *)(v9 - 8);
  v5[21] = sub_23F750AE4();
  v10 = sub_23FB2EDD4();
  v5[22] = v10;
  v5[23] = *(_QWORD *)(v10 - 8);
  v5[24] = sub_23F750AE4();
  v11 = sub_23FB2EBF4();
  v5[25] = v11;
  v5[26] = *(_QWORD *)(v11 - 8);
  v5[27] = sub_23F750AE4();
  v12 = sub_23F6B6634();
  v5[28] = v12;
  v5[29] = *(_QWORD *)(v12 - 8);
  v5[30] = sub_23F79514C();
  v5[31] = sub_23F795160();
  v5[32] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D4280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t (*v5)(void);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  void *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *(_QWORD *)(v0 + 232);
  sub_23F7DD628(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 48));
  v3 = sub_23F7DD8E0();
  *(_DWORD *)(v0 + 424) = v3;
  if (v3 == *MEMORY[0x24BEB9A00] || v3 == *MEMORY[0x24BEB9990])
    goto LABEL_6;
  if (v3 == *MEMORY[0x24BEB99E0])
  {
    v7 = *(_QWORD **)(v0 + 256);
    sub_23F7DD2B8(*(_QWORD *)(v0 + 232));
    *(_QWORD *)(v0 + 320) = *v7;
    v8 = swift_projectBox();
    sub_23F7DD234(v8);
    *(_QWORD *)(v0 + 328) = sub_23F7DD938();
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 336) = v9;
    *v9 = v0;
    v9[1] = sub_23F7D4784;
    sub_23F7DD15C();
    return ConcurrencySafeToolExecutionInterface.hydrate(entity:)(v10, v11, v12, v13);
  }
  if (v3 == *MEMORY[0x24BEB9988])
  {
    v14 = *(_QWORD **)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 216);
    sub_23F7DDA0C(*(_QWORD *)(v0 + 232));
    *(_QWORD *)(v0 + 264) = *v14;
    v17 = swift_projectBox();
    sub_23F72E0C8(v15, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16));
    v18 = sub_23F7DD938();
    *(_QWORD *)(v0 + 16) = v18;
    *(_QWORD *)(v0 + 24) = v19;
    *(_QWORD *)(v0 + 272) = v18;
    MEMORY[0x242673860]();
    *(_QWORD *)(v0 + 280) = sub_23FB2EBE8();
    v20 = (_QWORD *)sub_23F7DD130();
    *(_QWORD *)(v0 + 288) = v20;
    *v20 = v0;
    v20[1] = sub_23F7D468C;
    sub_23F7DD15C();
    __asm { BR              X3 }
  }
  if (v3 == *MEMORY[0x24BEB99D8])
    goto LABEL_6;
  if (v3 == *MEMORY[0x24BEB99E8])
  {
    v22 = *(_QWORD **)(v0 + 256);
    sub_23F7DD2B8(*(_QWORD *)(v0 + 232));
    *(_QWORD *)(v0 + 352) = *v22;
    v23 = swift_projectBox();
    sub_23F7DD234(v23);
    v24 = (_QWORD *)sub_23F7DD130();
    *(_QWORD *)(v0 + 360) = v24;
    *v24 = v0;
    v24[1] = sub_23F7D4848;
    goto LABEL_17;
  }
  if (v3 == *MEMORY[0x24BEB99B0])
  {
    sub_23F7DD2B8(*(_QWORD *)(v0 + 232));
    sub_23F7DD8D8();
    v25 = (_QWORD *)sub_23F7DD130();
    *(_QWORD *)(v0 + 376) = v25;
    *v25 = v0;
    v25[1] = sub_23F7D48F0;
LABEL_17:
    sub_23F7DD15C();
    __asm { BR              X4 }
  }
  if (v3 == *MEMORY[0x24BEB9A08])
  {
LABEL_6:
    sub_23F7DD774(*(_QWORD *)(v0 + 232));
    sub_23F7DD8D8();
    sub_23F7DD628(v1, v2);
    sub_23F7DD01C();
    sub_23F6F52B0();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    v5 = (uint64_t (*)(void))sub_23F750B9C();
    return sub_23F7D1C70(v5);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 240);
    sub_23F7DD9BC();
    sub_23F7DD628(v27, v1);
    v28 = (void *)sub_23FB2E7E0();
    v29 = sub_23FB2F5F0();
    v30 = sub_23F6F5194(v29);
    v32 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 96);
    v33 = *(_QWORD *)(v0 + 80);
    if (v30)
    {
      sub_23F7DD47C();
      sub_23F7DD874();
      v34 = sub_23F7DD9AC(4.8149e-34);
      v41 = sub_23F7DDB20(v34, v35, v36, v37, v38, v39, v40);
      sub_23F7DD688(v41);
      v42 = swift_bridgeObjectRelease();
      sub_23F7DD99C(v42, v43, v44, v45, v46, v47, v48, v49, v52, v53);
      sub_23F7DD810(&dword_23F68F000, v50, v51, "ConcurrencySafeToolExecutionInterface: Unexpected TypedValue case during hydration: %s");
      sub_23F7A6928();
      sub_23F693DD0();
    }
    sub_23F7DDB14();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    sub_23F7D4CB0();
    sub_23F6B5AD4();
    sub_23F7DDAEC();
    sub_23F7DDAA0();
    sub_23F7DCF50();
    sub_23F6F5268();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7B08CC();
    sub_23F7B0988();
    sub_23F7B0A28();
    sub_23F7B0B8C();
    return sub_23F7D1C70(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_23F7D468C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_23F7DDB2C();
  sub_23F7B0DD0(v3);
  v2[37] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_23F7D1C98(v2[23]);
    sub_23F693E04();
  }
  else
  {
    v4 = v2[3];
    sub_23F693E04();
    v2[38] = v1;
    v2[39] = v4;
  }
  sub_23F6F522C();
  return sub_23F6F5164();
}

uint64_t sub_23F7D4704()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);

  sub_23F7DCFC0();
  v1 = v0[34];
  v2 = v0[29];
  v3 = (_QWORD *)v0[5];
  sub_23FB2EBD0();
  sub_23F7DD968();
  *v3 = v1;
  sub_23F7DD544((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  sub_23F77DA7C();
  sub_23F7DD01C();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v4 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEA4(v4);
}

uint64_t sub_23F7D4784()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 344) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D47D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);

  sub_23F7DD1B8();
  v1 = v0[41];
  v2 = v0[29];
  v3 = (_QWORD *)v0[5];
  sub_23F7D1C98(v0[20]);
  *v3 = v1;
  sub_23F7DD544((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  sub_23F77DA7C();
  sub_23F7DD01C();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v4 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEE4(v4);
}

uint64_t sub_23F7D4848()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 368) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D4894()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_23F7DD1B8();
  sub_23F7D1C98(*(_QWORD *)(v0 + 136));
  sub_23F77DA7C();
  sub_23F7DD01C();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v1 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEE4(v1);
}

uint64_t sub_23F7D48F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v5)(void);

  sub_23F7DD3B0();
  if (v1)
  {
    sub_23F6F522C();
    return sub_23F7DD144();
  }
  else
  {
    v4 = (_QWORD *)sub_23F7B08B8();
    v0[49] = (uint64_t)v4;
    *v4 = v2;
    v4[1] = sub_23F7D4968;
    return sub_23F7DD150(v0[31], v0[15], v0[7], v0[8], v5);
  }
}

uint64_t sub_23F7D4968()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v5)(void);

  sub_23F7DD3D0();
  if (v1)
  {
    sub_23F6F522C();
    return sub_23F7DD144();
  }
  else
  {
    v4 = (_QWORD *)sub_23F7B08B8();
    v0[51] = (uint64_t)v4;
    *v4 = v2;
    v4[1] = sub_23F7D49E0;
    return sub_23F7DD150(v0[5], v0[31], v0[7], v0[8], v5);
  }
}

uint64_t sub_23F7D49E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 416) = v1;
  swift_task_dealloc();
  sub_23F7D1C98(*(_QWORD *)(v0 + 232));
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D4A38()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_23F7DD1B8();
  sub_23F7D1C98(*(_QWORD *)(v0 + 112));
  sub_23F7DD01C();
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  v1 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DCEE4(v1);
}

uint64_t sub_23F7D4A8C()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 208));
  sub_23F7DD8F0();
  sub_23F713F08();
  sub_23F7DCF50();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4AF0()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 160));
  sub_23F7DD8F0();
  sub_23F713F08();
  sub_23F7DCF50();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4B54()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 136));
  sub_23F77DA7C();
  sub_23F7DCF50();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4BB4()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7DCF50();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4C00()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 112));
  sub_23F7DCF50();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4C58()
{
  uint64_t v0;

  sub_23F7DCFC0();
  sub_23F7D1C98(*(_QWORD *)(v0 + 112));
  sub_23F7DCF50();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  return sub_23F7DCEA4(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_23F7D4CB0()
{
  unint64_t result;

  result = qword_256EAADA0;
  if (!qword_256EAADA0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62390, &type metadata for ExecutionSessionError);
    atomic_store(result, (unint64_t *)&qword_256EAADA0);
  }
  return result;
}

uint64_t sub_23F7D4CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE8C;
  return ConcurrencySafeToolExecutionInterface.hydrate(values:)(a1, a2, a3);
}

uint64_t sub_23F7D4D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_23F7D4D6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[4];
  sub_23F6916B8(&qword_256EA44D8);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 2;
  sub_23F6916B8(&qword_256EA9260);
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  *v3 = v0;
  v3[1] = sub_23F7D4E04;
  sub_23F7DD504();
  return sub_23F7DD408();
}

uint64_t sub_23F7D4E04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D4E58()
{
  uint64_t v0;

  return sub_23F7DD764(*(_QWORD *)(v0 + 24), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4E64()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ConcurrencySafeToolExecutionInterface.hydrate(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7D4EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  sub_23F6916B8(&qword_256EA44D8);
  v3 = sub_23F7DD318();
  v4 = sub_23F7DD550(v3);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v1;
  sub_23F6916B8(&qword_256EA9260);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_23F7D4F3C;
  sub_23F7DD504();
  return sub_23F7DD408();
}

uint64_t sub_23F7D4F3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 72) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D4F90()
{
  uint64_t v0;

  return sub_23F7DD764(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D4F98()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

void ToolKitExecutionSession.__allocating_init(sessionTask:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_23F7D2670();
  type metadata accessor for ConcurrencySafeToolKitExecutionSession();
  v3 = sub_23F7D2670();
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v2 + 16) = v3;
  sub_23F694CC8();
}

void ToolKitExecutionSession.init(sessionTask:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for ConcurrencySafeToolKitExecutionSession();
  v3 = sub_23F7D2670();
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v1 + 16) = v3;
  sub_23F694CC8();
}

void ConcurrencySafeToolKitExecutionSession.__allocating_init(sessionTask:)(uint64_t a1)
{
  *(_QWORD *)(sub_23F7D2670() + 16) = a1;
  sub_23F694CC8();
}

uint64_t ToolKitExecutionSession.executorEventStream.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D505C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7DD3F0();
  v1 = (_QWORD *)*(unsigned int *)(MEMORY[0x24BEE6AC8] + 4);
  sub_23F7D2714();
  v2 = sub_23F7B0E00();
  sub_23F7DD550(v2);
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D50D0;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D50D0()
{
  uint64_t *v0;

  sub_23F7DD0C8(*v0);
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D5120()
{
  uint64_t (*v0)(void);

  swift_getObjectType();
  sub_23FB2E954();
  swift_unknownObjectRelease();
  v0 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7DD248(v0);
}

uint64_t sub_23F7D516C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ToolKitExecutionSession.execute(toolInvocation:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  sub_23F6916B8(&qword_256EAADE0);
  v4[8] = sub_23F750AE4();
  v5 = sub_23FB2DC04();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = sub_23F750AE4();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D51DC()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[12] = *(_QWORD *)(*(_QWORD *)(v0[7] + 16) + 16);
  sub_23F7D2714();
  v1 = (_QWORD *)sub_23F7B0E00();
  v0[13] = v1;
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D5264;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D5264()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 112) = v0;
  swift_task_dealloc();
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D52B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[8];
  v0[15] = v0[2];
  v2 = sub_23FB2E7F8();
  sub_23F6B5A8C(v1, v3, v4, v2);
  sub_23FB2DBEC();
  sub_23F6B4F84(v1, &qword_256EAADE0);
  swift_getObjectType();
  v5 = (_QWORD *)swift_task_alloc();
  v0[16] = v5;
  *v5 = v0;
  v5[1] = sub_23F7D5374;
  return sub_23FB2E984();
}

uint64_t sub_23F7D5374()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 136) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D53C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_23F7D3034();
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  sub_23F7DD9F4();
  sub_23F7DDA8C();
  sub_23F78F1E4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F6F5268();
  sub_23F6F5280();
  v3 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7440BC(v3);
}

uint64_t sub_23F7D540C()
{
  uint64_t v0;

  sub_23F7DD9E8();
  sub_23F6F5268();
  return sub_23F750B60(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D543C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  sub_23F7DD9F4();
  sub_23F7DDA8C();
  sub_23F78F1E4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23F7DD9E8();
  sub_23F6F5268();
  return sub_23F750B60(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D5494(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  NSObject *v20;
  uint64_t result;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*isa)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  os_signpost_id_t v37;
  os_log_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  os_log_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v3 = sub_23FB2E8D0();
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v52 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23FB2E7A4();
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_23FB2E774();
  v59 = *(_QWORD *)(v57 - 8);
  v7 = MEMORY[0x24BDAC7A8](v57);
  v55 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v40 - v9;
  v11 = sub_23FB2E8E8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23FB2E798();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23FB2DBC8();
  v58 = sub_23FB2DBE0();
  LODWORD(v56) = v19;
  sub_23FB2DBF8();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v20 = sub_23FB2E78C();
  sub_23FB2E7B0();
  v51 = sub_23FB2F614();
  result = sub_23FB2F638();
  if ((result & 1) == 0)
    goto LABEL_5;
  v45 = v14;
  v46 = v12;
  v47 = v11;
  v43 = v20;
  v44 = v15;
  v20 = v59;
  v15 = v57;
  v42 = v18;
  v41 = v16;
  if ((v56 & 1) == 0)
  {
    if (!v58)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
      __break(1u);
LABEL_5:
      swift_release();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v57);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    }
    goto LABEL_10;
  }
  if (HIDWORD(v58))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v58 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (WORD1(v58) > 0x10u)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v58 = (unint64_t)&v62;
LABEL_10:
  swift_retain();
  v22 = v48;
  sub_23FB2E7D4();
  swift_release();
  v24 = v49;
  v23 = v50;
  if ((*(unsigned int (**)(char *, uint64_t))(v49 + 88))(v22, v50) == *MEMORY[0x24BEE7810])
  {
    v25 = 0;
    v56 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
    v56 = "tool=%{signpost.telemetry:string1,public}s %s";
    v25 = 2;
  }
  isa = (void (*)(char *, char *, uint64_t))v20[2].isa;
  v27 = v55;
  v40 = v10;
  isa(v55, v10, v15);
  v28 = swift_slowAlloc();
  v29 = swift_slowAlloc();
  v61 = v29;
  *(_BYTE *)v28 = v25;
  *(_BYTE *)(v28 + 1) = v25;
  *(_WORD *)(v28 + 2) = 2082;
  v30 = v52;
  v31 = v45;
  sub_23FB2E8DC();
  v32 = sub_23FB2E8A0();
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v54);
  v60 = sub_23F69334C(v32, v34, &v61);
  sub_23FB2F680();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v47);
  *(_WORD *)(v28 + 12) = 2080;
  sub_23FB2DBD4();
  v35 = sub_23FB2F7D0();
  v60 = sub_23F69334C(v35, v36, &v61);
  sub_23FB2F680();
  swift_bridgeObjectRelease();
  v37 = sub_23FB2E768();
  v38 = v43;
  _os_signpost_emit_with_name_impl(&dword_23F68F000, v43, (os_signpost_type_t)v51, v37, (const char *)v58, v56, (uint8_t *)v28, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x242674F4C](v29, -1, -1);
  MEMORY[0x242674F4C](v28, -1, -1);
  swift_release();

  v39 = *(void (**)(char *, uint64_t))(v59 + 8);
  v39(v40, v15);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v44);
  return ((uint64_t (*)(char *, uint64_t))v39)(v27, v15);
}

uint64_t ToolKitExecutionSession.undo(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D5998()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7DD3F0();
  v1 = (_QWORD *)*(unsigned int *)(MEMORY[0x24BEE6AC8] + 4);
  sub_23F7D2714();
  v2 = sub_23F7B0E00();
  sub_23F7DD550(v2);
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D5A0C;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D5A0C()
{
  uint64_t *v0;

  sub_23F7DD0C8(*v0);
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D5A5C()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;

  v1 = (__n128 *)sub_23F7DD0F0();
  sub_23F7DD118(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v10;
  *v10 = v0;
  v10[1] = sub_23F7D5AD0;
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t sub_23F7D5AD0()
{
  uint64_t v0;

  sub_23F7DCFDC();
  if (!v0)
    sub_23F7DD578();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D5B10()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E96C();
}

uint64_t ToolKitExecutionSession.redo(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D5B98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F7DD3F0();
  v1 = (_QWORD *)*(unsigned int *)(MEMORY[0x24BEE6AC8] + 4);
  sub_23F7D2714();
  v2 = sub_23F7B0E00();
  sub_23F7DD550(v2);
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D5C0C;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D5C0C()
{
  uint64_t *v0;

  sub_23F7DD0C8(*v0);
  sub_23F713F08();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D5C5C()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;

  v1 = (__n128 *)sub_23F7DD0F0();
  sub_23F7DD118(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v10;
  *v10 = v0;
  v10[1] = sub_23F7D5CD0;
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t sub_23F7D5CD0()
{
  uint64_t v0;

  sub_23F7DCFDC();
  if (!v0)
    sub_23F7DD578();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D5D10()
{
  uint64_t (*v0)(void);

  swift_unknownObjectRelease();
  v0 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7440D0(v0);
}

uint64_t sub_23F7D5D38()
{
  return sub_23F7DD76C();
}

uint64_t sub_23F7D5D40()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_23F6F52B0();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D5D70()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7D5DE8;
  return sub_23FB2E960();
}

uint64_t sub_23F7D5DE8()
{
  uint64_t v0;

  sub_23F6F5110();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ToolKitExecutionSession.resolve(reference:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D5E30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DD990();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7DD728(v0);
  v2 = sub_23F7DD374(v1);
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:)(v2, v3);
}

uint64_t ConcurrencySafeToolKitExecutionSession.resolve(reference:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return sub_23F7B0730();
}

{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D5E88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7DD5D8();
  v2 = swift_task_alloc();
  sub_23F7DD550(v2);
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v0 = v1;
  v0[1] = sub_23F7D5EF8;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D5EF8()
{
  sub_23F7DCFFC();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D5F34()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v1 = (__n128 *)sub_23F7DD0F0();
  sub_23F7DD118(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)(v0 + 88) = swift_task_alloc();
  sub_23F6B6634();
  sub_23F7DD55C((uint64_t)sub_23F7D5AD0);
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t ToolKitExecutionSession.resolve(reference:coercedTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7D5FBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DDA74();
  v0 = (_QWORD *)swift_task_alloc();
  v1 = sub_23F7DD41C(v0);
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:coercedTo:)(v1, v2, v3);
}

uint64_t ConcurrencySafeToolKitExecutionSession.resolve(reference:coercedTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return sub_23F7B0730();
}

{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7D6014()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD940();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D6088;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D6088()
{
  sub_23F7DD198();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D60C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 80) = v10;
  v1 = sub_23F7DD318();
  sub_23F7DD454(v1, v2, v3, v4, v5, v6, v7, v8, v10);
  *(_QWORD *)(v0 + 96) = swift_task_alloc();
  sub_23F6B6634();
  sub_23F7DD55C((uint64_t)sub_23F7D6140);
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t sub_23F7D6140()
{
  uint64_t v0;

  sub_23F7DD178();
  if (!v0)
    sub_23F7DD9E0();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D6194()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DD990();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7DD728(v0);
  v2 = sub_23F7DD374(v1);
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:)(v2, v3);
}

uint64_t sub_23F7D61EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7DD5D8();
  v2 = swift_task_alloc();
  sub_23F7DD550(v2);
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v0 = v1;
  v0[1] = sub_23F7D625C;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D625C()
{
  sub_23F7DCFFC();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D6298()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v1 = (__n128 *)sub_23F7DD0F0();
  sub_23F7DD118(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)(v0 + 88) = swift_task_alloc();
  sub_23F6B6634();
  sub_23F7DD55C((uint64_t)sub_23F7D5AD0);
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t sub_23F7D6320()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DDA74();
  v0 = (_QWORD *)swift_task_alloc();
  v1 = sub_23F7DD41C(v0);
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:coercedTo:)(v1, v2, v3);
}

uint64_t sub_23F7D6378()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD940();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D63EC;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D63EC()
{
  sub_23F7DD198();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D6428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 80) = v10;
  v1 = sub_23F7DD318();
  sub_23F7DD454(v1, v2, v3, v4, v5, v6, v7, v8, v10);
  *(_QWORD *)(v0 + 96) = swift_task_alloc();
  sub_23F6B6634();
  sub_23F7DD55C((uint64_t)sub_23F7D6140);
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t ToolKitExecutionSession.inject(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D64B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DD990();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7DD728(v0);
  v2 = sub_23F7DD374(v1);
  return ConcurrencySafeToolKitExecutionSession.inject(value:)(v2, v3);
}

uint64_t ConcurrencySafeToolKitExecutionSession.inject(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D6510()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7DD5D8();
  v2 = swift_task_alloc();
  sub_23F7DD550(v2);
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v0 = v1;
  v0[1] = sub_23F7D6580;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D6580()
{
  sub_23F7DCFFC();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D65BC()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v1 = (__n128 *)sub_23F7DD0F0();
  sub_23F7DD118(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)(v0 + 88) = swift_task_alloc();
  sub_23FB2ED08();
  sub_23F7DD55C((uint64_t)sub_23F7D5AD0);
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t ToolKitExecutionSession.enumerate(valueSet:in:query:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7D6648()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_23F7DDA74();
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23F7D669C;
  return ConcurrencySafeToolKitExecutionSession.enumerate(valueSet:in:query:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_23F7D669C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_23F6F5110();
  if (!v1)
    v4 = a1;
  return sub_23F6F51E8(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t ConcurrencySafeToolKitExecutionSession.enumerate(valueSet:in:query:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7D66F0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D676C;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D676C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 80) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D67B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 56);
  v6 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 88) = v6;
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v2;
  v3 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 48) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v4;
  sub_23F6916B8(&qword_256EA9260);
  *v4 = v0;
  v4[1] = sub_23F7D6870;
  return sub_23FB2E300();
}

uint64_t sub_23F7D6870()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D68C4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_23F7D68FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7D6908()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_23F6F52B0();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ToolKitExecutionSession.fetchToolInvocationSummary(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D694C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DD990();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7DD728(v0);
  v2 = sub_23F7DD374(v1);
  return ConcurrencySafeToolKitExecutionSession.fetchToolInvocationSummary(for:)(v2, v3);
}

uint64_t sub_23F7D6990()
{
  uint64_t v0;

  sub_23F785624();
  sub_23F6F5110();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ConcurrencySafeToolKitExecutionSession.fetchToolInvocationSummary(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D69D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7DD5D8();
  v2 = swift_task_alloc();
  sub_23F7DD550(v2);
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v0 = v1;
  v0[1] = sub_23F7D6A40;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D6A40()
{
  sub_23F7DCFFC();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D6A7C()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v1 = (__n128 *)sub_23F7DD0F0();
  sub_23F7DD118(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)(v0 + 88) = swift_task_alloc();
  sub_23FB2E9D8();
  sub_23F7DD55C((uint64_t)sub_23F7D5AD0);
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t ToolKitExecutionSession.coerce(value:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7D6B08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DDA74();
  v0 = (_QWORD *)swift_task_alloc();
  v1 = sub_23F7DD41C(v0);
  return ConcurrencySafeToolKitExecutionSession.coerce(value:to:)(v1, v2, v3);
}

uint64_t ConcurrencySafeToolKitExecutionSession.coerce(value:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return sub_23F7B0730();
}

uint64_t sub_23F7D6B60()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD940();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D6BD4;
  sub_23F7DD064();
  return sub_23F7DCEC0();
}

uint64_t sub_23F7D6BD4()
{
  sub_23F7DD198();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D6C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 80) = v10;
  v1 = sub_23F7DD318();
  sub_23F7DD454(v1, v2, v3, v4, v5, v6, v7, v8, v10);
  *(_QWORD *)(v0 + 96) = swift_task_alloc();
  sub_23F6B6634();
  sub_23F7DD55C((uint64_t)sub_23F7D6C8C);
  sub_23F7DD384();
  return sub_23F7DCF1C();
}

uint64_t sub_23F7D6C8C()
{
  uint64_t v0;

  sub_23F7DD178();
  if (!v0)
    sub_23F7DD9E0();
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D6CCC()
{
  uint64_t (*v0)(void);

  swift_unknownObjectRelease();
  v0 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7440D0(v0);
}

uint64_t sub_23F7D6CF4()
{
  return sub_23F7DD76C();
}

uint64_t sub_23F7D6CFC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_23F6F52B0();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ToolKitExecutionSession.hydrate(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D6D40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  sub_23F7DD990();
  *(_QWORD *)(v1 + 40) = v0;
  sub_23F7DD650();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v2;
  v3 = sub_23F7DD374(v2);
  return sub_23F7DD5A0(v3, v4, v6);
}

uint64_t sub_23F7D6D94()
{
  uint64_t v0;

  sub_23F785624();
  sub_23F6F5110();
  sub_23F713F08();
  return sub_23F750B60(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ToolKitExecutionSession.hydrate(values:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D6DD8()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v0[4] = *(_QWORD *)(v0[3] + 16);
  sub_23F7DD650();
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23F7D6E38;
  return sub_23F7DD5AC(v0[2], v3);
}

uint64_t sub_23F7D6E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_23F785624();
  sub_23F6F5110();
  v4 = swift_release();
  if (!v1)
    v4 = a1;
  return sub_23F7DD5AC(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t ToolKitExecutionSession.deinit()
{
  uint64_t v0;

  sub_23F742568();
  return v0;
}

uint64_t ToolKitExecutionSession.__deallocating_deinit()
{
  sub_23F742568();
  return swift_deallocClassInstance();
}

uint64_t sub_23F7D6EB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.executorEventStream.getter(a1);
}

uint64_t sub_23F7D6F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.resolve(reference:)(a1, a2);
}

uint64_t sub_23F7D6F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.resolve(reference:coercedTo:)(a1, a2, a3);
}

uint64_t sub_23F7D6FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.coerce(value:to:)(a1, a2, a3);
}

uint64_t sub_23F7D7048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.resolve(reference:)(a1, a2);
}

uint64_t sub_23F7D70AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.resolve(reference:coercedTo:)(a1, a2, a3);
}

uint64_t sub_23F7D7118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.inject(value:)(a1, a2);
}

uint64_t sub_23F7D717C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE8C;
  return ToolKitExecutionSession.enumerate(valueSet:in:query:)(a1, a2, a3);
}

uint64_t sub_23F7D71E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.fetchToolInvocationSummary(for:)(a1, a2);
}

uint64_t sub_23F7D7248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.hydrate(value:)(a1, a2);
}

uint64_t sub_23F7D72AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23F7D72FC;
  return ToolKitExecutionSession.hydrate(values:)(a1);
}

uint64_t sub_23F7D72FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_23F6F5110();
  if (!v1)
    v4 = a1;
  return sub_23F6F51E8(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_23F7D733C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.execute(toolInvocation:dialogHandler:)(a1, a2, a3);
}

uint64_t sub_23F7D73A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.undo(_:)(a1);
}

uint64_t sub_23F7D73F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23F7DCE78;
  return ToolKitExecutionSession.redo(_:)(a1);
}

uint64_t ConcurrencySafeToolKitExecutionSession.init(sessionTask:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_23F7D7454()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E9B4();
}

uint64_t sub_23F7D74E0()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E99C();
}

uint64_t sub_23F7D7574()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E9A8();
}

uint64_t sub_23F7D7600()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E990();
}

uint64_t sub_23F7D7694()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E978();
}

uint64_t sub_23F7D7720(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  swift_getObjectType();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_23F7D77B4;
  return sub_23FB2E9C0();
}

uint64_t sub_23F7D77B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  sub_23F785584(&v7);
  if (v1)
    return sub_23F7DD248(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 32) = a1;
  sub_23F6F522C();
  return sub_23F7DD144();
}

uint64_t sub_23F7D7814()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  v1 = (uint64_t (*)(void))sub_23F750B9C();
  return v1();
}

uint64_t sub_23F7D7830()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E948();
}

uint64_t sub_23F7D78BC()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCE78;
  return sub_23FB2E9CC();
}

void ConcurrencySafeToolKitExecutionSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_23F6916B8(&qword_256EA47F0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6BD134();
  v4 = v3 - v2;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = sub_23F7DDAF8();
  sub_23F6B5A8C(v4, v7, v8, v6);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v5;
  swift_retain();
  sub_23F742C18(v4, (uint64_t)&unk_256EAAF40, (uint64_t)v9);
  swift_release();
  sub_23F742568();
  sub_23F694C84();
}

uint64_t sub_23F7D79F0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  sub_23F6916B8(&qword_256EAADD0);
  sub_23F6916B8(&qword_256EA2828);
  *v1 = v0;
  v1[1] = sub_23F7D7A80;
  return sub_23FB2F4F4();
}

uint64_t sub_23F7D7A80()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F785624();
  sub_23F7D271C();
  *(_QWORD *)(v1 + 40) = v0;
  swift_task_dealloc();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D7ACC()
{
  uint64_t (*v0)(void);

  swift_getObjectType();
  sub_23FB2E93C();
  sub_23F7DDA8C();
  v0 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F750B60(v0);
}

uint64_t sub_23F7D7B08()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConcurrencySafeToolKitExecutionSession.__deallocating_deinit()
{
  ConcurrencySafeToolKitExecutionSession.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23F7D7B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:)(a1, a2);
}

uint64_t sub_23F7D7B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE78;
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:coercedTo:)(a1, a2, a3);
}

uint64_t sub_23F7D7C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE78;
  return ConcurrencySafeToolKitExecutionSession.coerce(value:to:)(a1, a2, a3);
}

uint64_t sub_23F7D7C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:)(a1, a2);
}

uint64_t sub_23F7D7CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE78;
  return ConcurrencySafeToolKitExecutionSession.resolve(reference:coercedTo:)(a1, a2, a3);
}

uint64_t sub_23F7D7D40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ConcurrencySafeToolKitExecutionSession.inject(value:)(a1, a2);
}

uint64_t sub_23F7D7DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23F7DCE8C;
  return ConcurrencySafeToolKitExecutionSession.enumerate(valueSet:in:query:)(a1, a2, a3);
}

uint64_t sub_23F7D7E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return ConcurrencySafeToolKitExecutionSession.fetchToolInvocationSummary(for:)(a1, a2);
}

uint64_t sub_23F7D7E70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_256EAAF20 + dword_256EAAF20);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return v7(a1, a2);
}

uint64_t sub_23F7D7EE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_256EAAF30 + dword_256EAAF30);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23F7DCE8C;
  return v5(a1);
}

uint64_t TypedValue.ID.resolveAsync(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_23F7B0730();
}

uint64_t sub_23F7D7F64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F6ADC98(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v1 = sub_23F7DCF74();
  v2 = (_QWORD *)sub_23F7DD728(v1);
  v3 = sub_23F7DD580(v2);
  return sub_23F7DD150(v3, v4, v5, v6, v7);
}

uint64_t sub_23F7D7FC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F6ADC98(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v1 = sub_23F7DCF74();
  v2 = (_QWORD *)sub_23F7DD728(v1);
  v3 = sub_23F7DD580(v2);
  return sub_23F7DD150(v3, v4, v5, v6, v7);
}

uint64_t sub_23F7D8018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_23F6916B8(&qword_256EA2850);
  v3[6] = swift_task_alloc();
  sub_23FB2EDD4();
  v3[7] = swift_task_alloc();
  v4 = sub_23FB2ED38();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  sub_23F6916B8((uint64_t *)&unk_256EA27B0);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23F7D8110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  unint64_t v21;
  uint64_t v22;

  sub_23F7D23E4();
  v3 = sub_23FB2EC3C();
  *(_QWORD *)(v0 + 120) = v3;
  *(_BYTE *)(v0 + 192) = *(_BYTE *)(v3 + 32);
  sub_23F7DD5E8();
  *(_QWORD *)(v0 + 128) = MEMORY[0x24BEE4B00];
  if ((v6 & v7) != 0)
  {
    sub_23F7DD950();
LABEL_3:
    sub_23F7DD5B8(v8, v9);
    v10 = sub_23F6916B8(&qword_256EA27B8);
    sub_23F7DD528(v10);
    sub_23F7DD7CC();
    goto LABEL_10;
  }
  v11 = 63 - v5;
  if ((unint64_t)(63 - v5) <= 0x7F)
  {
    v1 = 0;
  }
  else
  {
    if (v4[9])
    {
      v1 = 1;
LABEL_7:
      sub_23F7DD8F8();
      goto LABEL_3;
    }
    if (v11 < 0xC0)
    {
      v1 = 1;
    }
    else
    {
      if (v4[10])
      {
        v1 = 2;
        goto LABEL_7;
      }
      if (v11 < 0x100)
      {
        v1 = 2;
      }
      else
      {
        if (v4[11])
        {
          v1 = 3;
          goto LABEL_7;
        }
        if (v11 < 0x140)
        {
          v1 = 3;
        }
        else
        {
          if (v4[12])
          {
            v1 = 4;
            goto LABEL_7;
          }
          v21 = v11 >> 6;
          v22 = 13;
          while (v22 - 8 < v21)
          {
            if (v4[v22++])
            {
              v1 = v22 - 9;
              goto LABEL_7;
            }
          }
          v1 = v21 - 1;
        }
      }
    }
  }
  v12 = sub_23F6916B8(&qword_256EA27B8);
  sub_23F7DDA18(v12);
LABEL_10:
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  sub_23F7AE8D8(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), (uint64_t *)&unk_256EA27B0);
  v13 = sub_23F6916B8(&qword_256EA27B8);
  if (sub_23F7DD84C(v13) == 1)
  {
    v14 = swift_release();
    MEMORY[0x2426738E4](v14);
    sub_23FB2EC30();
    sub_23F7DD8A8();
    sub_23F7DD4E8();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7D1F88();
    sub_23F7B0E90();
    sub_23F7B0A28();
    sub_23F6F5268();
    v15 = (uint64_t (*)(void))sub_23F750B9C();
    return sub_23F7DD0AC(v15);
  }
  else
  {
    sub_23F7DD288();
    v17 = (_QWORD *)sub_23F7DD220();
    v18 = sub_23F7DD6F0(v17);
    return sub_23F7DD2E0(v18, v19, v20);
  }
}

uint64_t sub_23F7D8304()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_23F693DFC();
  }
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D8360()
{
  uint64_t v0;

  sub_23F7DD1B8();
  sub_23F7DD7F0(*(_QWORD *)(v0 + 72));
  sub_23F77DA7C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  return sub_23F7DCEE4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_23F7D83C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  BOOL v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);

  sub_23F7D23E4();
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 168))(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 64));
  swift_isUniquelyReferenced_nonNull_native();
  sub_23F7DD498();
  sub_23F7DD568();
  if (v5)
  {
    __break(1u);
    goto LABEL_35;
  }
  v6 = v4;
  sub_23F6916B8(&qword_256EAAF58);
  if ((sub_23F7DD6C8() & 1) != 0)
  {
    sub_23F78C6DC();
    if ((v6 & 1) != (v7 & 1))
    {
      sub_23F7DD2C4();
      return;
    }
  }
  v8 = *v0;
  if ((v6 & 1) != 0)
  {
    sub_23F7DD6A0(*(_QWORD *)(v1 + 72));
    goto LABEL_9;
  }
  sub_23F7DD1E8(*(uint64_t (**)(unint64_t))(v1 + 168));
  v9 = *(_QWORD *)(v8 + 16);
  v5 = __OFADD__(v9, 1);
  v10 = v9 + 1;
  if (v5)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(_QWORD *)(v8 + 16) = v10;
  swift_bridgeObjectRetain();
LABEL_9:
  v11 = *(_QWORD *)(v1 + 96);
  v12 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23F78F1E4(v11, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  v14 = *(_QWORD *)(v1 + 136);
  v13 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 128) = v8;
  if (v13)
  {
    sub_23F7DD910();
    v15 = *(_QWORD *)(v1 + 120);
LABEL_11:
    v16 = *(_QWORD *)(v1 + 104);
    v17 = *(_QWORD *)(v1 + 72);
    sub_23F7DD668(v15);
    v18 = sub_23F6916B8(&qword_256EA27B8);
    sub_23F72E0C8(v16 + *(int *)(v18 + 48), v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
    sub_23F7DD7A8();
    goto LABEL_31;
  }
  if (__OFADD__(v14, 1))
    goto LABEL_36;
  sub_23F7DDB00();
  if (v20 == v5)
    goto LABEL_30;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 120) + 64 + 8 * v19))
    goto LABEL_16;
  sub_23F7DDAAC();
  if (v20 == v5)
    goto LABEL_30;
  if (*(_QWORD *)(v22 + 8 * v24))
  {
LABEL_16:
    sub_23F7DD830();
    goto LABEL_11;
  }
  v14 = v24;
  if (v21 + 2 < v23)
  {
    if (*(_QWORD *)(v22 + 8 * (v21 + 2)))
      goto LABEL_16;
    v25 = v21 + 3;
    v14 = v21 + 2;
    if (v21 + 3 < v23)
    {
      if (*(_QWORD *)(v22 + 8 * v25))
        goto LABEL_16;
      while (1)
      {
        v26 = v25 + 1;
        if (__OFADD__(v25, 1))
          break;
        if (v26 >= v23)
        {
          v14 = v23 - 1;
          goto LABEL_30;
        }
        ++v25;
        if (*(_QWORD *)(v22 + 8 * v26))
          goto LABEL_16;
      }
LABEL_37:
      __break(1u);
      return;
    }
  }
LABEL_30:
  v27 = sub_23F6916B8(&qword_256EA27B8);
  sub_23F7DDA3C(v27);
LABEL_31:
  *(_QWORD *)(v1 + 136) = v14;
  *(_QWORD *)(v1 + 144) = v3;
  sub_23F7AE8D8(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), (uint64_t *)&unk_256EA27B0);
  v28 = sub_23F6916B8(&qword_256EA27B8);
  sub_23F7DDAC8(v28);
  if (v29)
  {
    v30 = swift_release();
    MEMORY[0x2426738E4](v30);
    sub_23FB2EC30();
    sub_23F7DD8B8();
    sub_23F7DD390();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7D20B8();
    sub_23F7D1F88();
    sub_23F7B0E90();
    sub_23F7B0B8C();
    sub_23F6F5224();
    v31 = (uint64_t (*)(void))sub_23F750B9C();
    sub_23F7DD0AC(v31);
  }
  else
  {
    sub_23F7DD288();
    v32 = (_QWORD *)sub_23F7DD220();
    v33 = sub_23F7DD6F0(v32);
    sub_23F7DD2E0(v33, v34, v35);
  }
}

uint64_t ConcurrencySafeToolExecutionInterface.hydrate(entity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  sub_23F6916B8(&qword_256EA2850);
  v5[8] = sub_23F750AE4();
  sub_23FB2EDD4();
  v5[9] = sub_23F750AE4();
  v6 = sub_23F6B6634();
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = sub_23F79514C();
  v5[13] = sub_23F795160();
  v5[14] = sub_23F795160();
  sub_23F6916B8((uint64_t *)&unk_256EA27B0);
  v5[15] = sub_23F79514C();
  v5[16] = sub_23F795160();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D8728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(uint64_t, char *, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  unint64_t v31;
  uint64_t v32;

  sub_23F7D23E4();
  v3 = sub_23FB2EC3C();
  *(_QWORD *)(v0 + 136) = v3;
  *(_BYTE *)(v0 + 208) = *(_BYTE *)(v3 + 32);
  sub_23F7DD5E8();
  *(_QWORD *)(v0 + 144) = MEMORY[0x24BEE4B00];
  if ((v6 & v7) != 0)
  {
    sub_23F7DD950();
LABEL_3:
    v10 = *(_QWORD *)(v0 + 120);
    sub_23F7DD5B8(v8, v9);
    v11 = sub_23F6916B8(&qword_256EA27B8);
    sub_23F7DD528(v11);
    sub_23F7DD7CC();
    goto LABEL_10;
  }
  v12 = 63 - v5;
  if ((unint64_t)(63 - v5) <= 0x7F)
  {
    v1 = 0;
  }
  else
  {
    if (v4[9])
    {
      v1 = 1;
LABEL_7:
      sub_23F7DD8F8();
      goto LABEL_3;
    }
    if (v12 < 0xC0)
    {
      v1 = 1;
    }
    else
    {
      if (v4[10])
      {
        v1 = 2;
        goto LABEL_7;
      }
      if (v12 < 0x100)
      {
        v1 = 2;
      }
      else
      {
        if (v4[11])
        {
          v1 = 3;
          goto LABEL_7;
        }
        if (v12 < 0x140)
        {
          v1 = 3;
        }
        else
        {
          if (v4[12])
          {
            v1 = 4;
            goto LABEL_7;
          }
          v31 = v12 >> 6;
          v32 = 13;
          while (v32 - 8 < v31)
          {
            if (v4[v32++])
            {
              v1 = v32 - 9;
              goto LABEL_7;
            }
          }
          v1 = v31 - 1;
        }
      }
    }
  }
  v10 = *(_QWORD *)(v0 + 120);
  v13 = sub_23F6916B8(&qword_256EA27B8);
  sub_23F7DDA18(v13);
LABEL_10:
  *(_QWORD *)(v0 + 152) = v1;
  *(_QWORD *)(v0 + 160) = v2;
  sub_23F7AE8D8(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), (uint64_t *)&unk_256EA27B0);
  v14 = sub_23F6916B8(&qword_256EA27B8);
  v15 = sub_23F7DD84C(v14);
  v16 = *(_QWORD **)(v0 + 128);
  if (v15 == 1)
  {
    v17 = swift_release();
    MEMORY[0x2426738E4](v17);
    sub_23FB2EC30();
    sub_23F7DD8A8();
    sub_23F7DD4E8();
    sub_23F6F5224();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7D1F88();
    sub_23F7B0E90();
    sub_23F7B0A28();
    sub_23F6F5268();
    v18 = (uint64_t (*)(void))sub_23F750B9C();
    return sub_23F7DD0AC(v18);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 168) = *v16;
    *(_QWORD *)(v0 + 176) = v16[1];
    v23 = (char *)v16 + *(int *)(v10 + 48);
    v24 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    *(_QWORD *)(v0 + 184) = v24;
    v24(v20, v23, v21);
    v25 = (_QWORD *)sub_23F7DD220();
    *(_QWORD *)(v0 + 192) = v25;
    v26 = sub_23F7DD70C(v25);
    return sub_23F7DD2FC(v26, v27, v28, v29, v30);
  }
}

uint64_t sub_23F7D894C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23F7B0C9C();
  sub_23F7B0DD0(v2);
  *(_QWORD *)(v0 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_23F693DFC();
  }
  sub_23F6F522C();
  return sub_23F6B79B4();
}

void sub_23F7D89A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  BOOL v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);

  sub_23F7D23E4();
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 184))(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 80));
  swift_isUniquelyReferenced_nonNull_native();
  sub_23F7DD498();
  sub_23F7DD568();
  if (v4)
  {
    __break(1u);
    goto LABEL_35;
  }
  v5 = v3;
  sub_23F6916B8(&qword_256EAAF58);
  if ((sub_23F7DD6C8() & 1) != 0)
  {
    sub_23F78C6DC();
    if ((v5 & 1) != (v6 & 1))
    {
      sub_23F7DD2C4();
      return;
    }
  }
  v7 = *v0;
  if ((v5 & 1) != 0)
  {
    sub_23F7DD6A0(*(_QWORD *)(v1 + 88));
    goto LABEL_9;
  }
  sub_23F7DD1E8(*(uint64_t (**)(unint64_t))(v1 + 184));
  v8 = *(_QWORD *)(v7 + 16);
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  if (v4)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(_QWORD *)(v7 + 16) = v9;
  swift_bridgeObjectRetain();
LABEL_9:
  v10 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_QWORD *)(v1 + 88);
  swift_bridgeObjectRelease();
  sub_23F693DFC();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v14 = *(_QWORD *)(v1 + 152);
  v13 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 144) = v7;
  if (v13)
  {
    sub_23F7DD910();
    v15 = *(_QWORD *)(v1 + 136);
LABEL_11:
    v16 = *(_QWORD *)(v1 + 120);
    v17 = *(_QWORD *)(v1 + 88);
    sub_23F7DD668(v15);
    v18 = sub_23F6916B8(&qword_256EA27B8);
    sub_23F72E0C8(v16 + *(int *)(v18 + 48), v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
    sub_23F7DD7A8();
    goto LABEL_31;
  }
  if (__OFADD__(v14, 1))
    goto LABEL_36;
  sub_23F7DDB00();
  if (v20 == v4)
    goto LABEL_30;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 136) + 64 + 8 * v19))
    goto LABEL_16;
  sub_23F7DDAAC();
  if (v20 == v4)
    goto LABEL_30;
  if (*(_QWORD *)(v22 + 8 * v24))
  {
LABEL_16:
    sub_23F7DD830();
    goto LABEL_11;
  }
  v14 = v24;
  if (v21 + 2 < v23)
  {
    if (*(_QWORD *)(v22 + 8 * (v21 + 2)))
      goto LABEL_16;
    v25 = v21 + 3;
    v14 = v21 + 2;
    if (v21 + 3 < v23)
    {
      if (*(_QWORD *)(v22 + 8 * v25))
        goto LABEL_16;
      while (1)
      {
        v26 = v25 + 1;
        if (__OFADD__(v25, 1))
          break;
        if (v26 >= v23)
        {
          v14 = v23 - 1;
          goto LABEL_30;
        }
        ++v25;
        if (*(_QWORD *)(v22 + 8 * v26))
          goto LABEL_16;
      }
LABEL_37:
      __break(1u);
      return;
    }
  }
LABEL_30:
  v16 = *(_QWORD *)(v1 + 120);
  v27 = sub_23F6916B8(&qword_256EA27B8);
  sub_23F7DDA3C(v27);
LABEL_31:
  *(_QWORD *)(v1 + 152) = v14;
  *(_QWORD *)(v1 + 160) = v2;
  sub_23F7AE8D8(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), (uint64_t *)&unk_256EA27B0);
  v28 = sub_23F6916B8(&qword_256EA27B8);
  sub_23F7DDAC8(v28);
  if (v29)
  {
    v30 = swift_release();
    MEMORY[0x2426738E4](v30);
    sub_23FB2EC30();
    sub_23F7DD8B8();
    sub_23F7DD390();
    sub_23F6F5280();
    sub_23F7B08D4();
    sub_23F7D20B8();
    sub_23F7D1F88();
    sub_23F7B0E90();
    sub_23F7B0B8C();
    sub_23F6F5224();
    v31 = (uint64_t (*)(void))sub_23F750B9C();
    sub_23F7DD0AC(v31);
  }
  else
  {
    v32 = *(_QWORD **)(v1 + 128);
    v33 = *(_QWORD *)(v1 + 112);
    v34 = *(_QWORD *)(v1 + 80);
    v35 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 168) = *v32;
    *(_QWORD *)(v1 + 176) = v32[1];
    v36 = (char *)v32 + *(int *)(v16 + 48);
    v37 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
    *(_QWORD *)(v1 + 184) = v37;
    v37(v33, v36, v34);
    v38 = (_QWORD *)sub_23F7DD220();
    *(_QWORD *)(v1 + 192) = v38;
    v39 = sub_23F7DD70C(v38);
    sub_23F7DD2FC(v39, v40, v41, v42, v43);
  }
}

uint64_t sub_23F7D8C9C()
{
  uint64_t v0;

  sub_23F7DD1B8();
  sub_23F7DD7F0(*(_QWORD *)(v0 + 88));
  sub_23F77DA7C();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  return sub_23F7DCEE4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D8CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  v4 = sub_23F6916B8(&qword_256EA44D8);
  v3[14] = v4;
  v3[15] = *(_QWORD *)(v4 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  sub_23F6916B8(&qword_256EAB270);
  v3[19] = swift_task_alloc();
  v5 = sub_23F6916B8(&qword_256EAB278);
  v3[20] = v5;
  v3[21] = *(_QWORD *)(v5 - 8);
  v3[22] = swift_task_alloc();
  v6 = sub_23FB2ED38();
  v3[23] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[24] = v7;
  v3[25] = *(_QWORD *)(v7 + 64);
  v3[26] = swift_task_alloc();
  sub_23F6916B8(&qword_256EA47F0);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = sub_23F6916B8(&qword_256EAB280);
  v3[30] = swift_task_alloc();
  sub_23F6916B8(&qword_256EAB288);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  return swift_task_switch();
}

void sub_23F7D8E8C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 16);
  sub_23F7DDA00();
  v4 = 0;
  v27 = v1;
  while (1)
  {
    if (v4 == v1)
    {
      sub_23F6B5A8C(*(_QWORD *)(v0 + 248), v2, v3, *(_QWORD *)(v0 + 232));
      v5 = v1;
      goto LABEL_6;
    }
    if (v4 >= v1)
      break;
    v6 = *(unint64_t **)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 232);
    v5 = v4 + 1;
    v8 = *(_QWORD *)(v0 + 240) + *(int *)(v30 + 48);
    sub_23F78F5D0(v8, *(_QWORD *)(v0 + 96)+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16));
    v9 = (uint64_t)v6 + *(int *)(v30 + 48);
    *v6 = v4;
    sub_23F78F5D0(v9, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32));
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v6, 0, 1, v7);
LABEL_6:
    v10 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 232);
    sub_23F7AE8D8(*(_QWORD *)(v0 + 248), v10, &qword_256EAB288);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v10, 1, v11) == 1)
    {
      swift_bridgeObjectRelease();
      sub_23F6916B8(&qword_256EA2828);
      sub_23F7DD8C8();
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 264) = v26;
      *v26 = v0;
      v26[1] = sub_23F7D91B8;
      sub_23F7DD33C();
      sub_23F7DD320();
      return;
    }
    v12 = *(uint64_t **)(v0 + 256);
    v33 = *(_QWORD *)(v0 + 216);
    v13 = *(char **)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 104);
    v31 = *(_QWORD *)(v0 + 224);
    v32 = *v12;
    v16 = (char *)v12 + *(int *)(v30 + 48);
    sub_23F7DDAF8();
    sub_23F7DD788();
    v17 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v17(v13, v16, v14);
    v18 = (*(unsigned __int8 *)(v29 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    v19 = (char *)swift_allocObject();
    *((_QWORD *)v19 + 2) = 0;
    *((_QWORD *)v19 + 3) = 0;
    *((_QWORD *)v19 + 4) = v15;
    v17(&v19[v18], v13, v14);
    *(_QWORD *)&v19[(v28 + v18) & 0xFFFFFFFFFFFFFFF8] = v32;
    sub_23F7DD9D4(v31);
    LODWORD(v14) = sub_23F7DD824(v33);
    swift_retain();
    if ((_DWORD)v14 == 1)
    {
      sub_23F7DD79C();
    }
    else
    {
      sub_23FB2F4DC();
      sub_23F7DD6B4();
    }
    v1 = v27;
    if (*((_QWORD *)v19 + 2))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v20 = sub_23FB2F4A0();
      v22 = v21;
      swift_unknownObjectRelease();
    }
    else
    {
      v20 = 0;
      v22 = 0;
    }
    v23 = **(_QWORD **)(v0 + 88);
    v24 = v22 | v20;
    if (v22 | v20)
    {
      v24 = v0 + 16;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = v20;
      *(_QWORD *)(v0 + 40) = v22;
    }
    v25 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)(v0 + 48) = 1;
    *(_QWORD *)(v0 + 56) = v24;
    *(_QWORD *)(v0 + 64) = v23;
    swift_task_create();
    swift_release();
    sub_23F6B4F84(v25, &qword_256EA47F0);
    v4 = v5;
  }
  __break(1u);
}

uint64_t sub_23F7D91B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_23F7B0C9C();
  sub_23F785584(v2);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 272) = 0;
    *(_QWORD *)(v0 + 280) = v3;
  }
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D9218()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = sub_23F7DD928();
  v3 = *(_QWORD *)(v0 + 280);
  if (v2 == 1)
  {
    v4 = *(_QWORD *)(v0 + 272);
    sub_23F7D1C98(*(_QWORD *)(v0 + 168));
    v16 = v3;
    sub_23F7DDA80();
    sub_23F7D34E8(&v16);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      sub_23F7D3048(v16);
      sub_23F713F08();
      swift_bridgeObjectRelease();
      sub_23F7B08CC();
      sub_23F7B0988();
      sub_23F7B0A28();
      sub_23F7B0B8C();
      sub_23F6F52B0();
      sub_23F7D1F88();
      sub_23F7B0E90();
      swift_task_dealloc();
      sub_23F7D1F90();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_23F7D2258();
      __asm { BR              X1 }
    }
    sub_23F7D2258();
    return swift_release();
  }
  else
  {
    sub_23F7DD350(*(char **)(v0 + 144));
    sub_23F7DD434();
    sub_23F7DD860(*(int *)(v1 + 48));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v0 + 280);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23F7DD7FC();
      v9 = v14;
    }
    if (*(_QWORD *)(v9 + 16) >= *(_QWORD *)(v9 + 24) >> 1)
    {
      sub_23F7DD9C8();
      v9 = v15;
    }
    *(_QWORD *)(v0 + 288) = v9;
    sub_23F7DD608(*(_QWORD *)(v0 + 128), v7, v8, v9);
    sub_23F7AE8D8(v10, v11, &qword_256EA44D8);
    sub_23F7DDA94();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v12;
    *v12 = v0;
    v12[1] = sub_23F7D94C0;
    sub_23F7DD33C();
    sub_23F7D2258();
    return sub_23FB2F50C();
  }
}

uint64_t sub_23F7D9418()
{
  uint64_t v0;

  sub_23F7D23E4();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F7D20B8();
  sub_23F7B0E90();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7D94C0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_23F7B0C9C();
  sub_23F785584(v2);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = v0[36];
    v0[34] = 0;
    v0[35] = v3;
  }
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D9518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[15] = a5;
  v6[16] = a6;
  v6[13] = a3;
  v6[14] = a4;
  v6[11] = a1;
  v6[12] = a2;
  v8 = sub_23F6916B8(&qword_256EA44D8);
  v6[17] = v8;
  v6[18] = *(_QWORD *)(v8 - 8);
  v6[19] = swift_task_alloc();
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  v9 = sub_23FB2ED38();
  v6[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[23] = v10;
  v6[24] = *(_QWORD *)(v10 + 64);
  v6[25] = swift_task_alloc();
  v11 = *(_QWORD *)(a5 - 8);
  v6[26] = v11;
  v6[27] = *(_QWORD *)(v11 + 64);
  v6[28] = swift_task_alloc();
  sub_23F6916B8(&qword_256EA47F0);
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  sub_23F6916B8(&qword_256EAB270);
  v6[31] = swift_task_alloc();
  v12 = sub_23F6916B8(&qword_256EAB278);
  v6[32] = v12;
  v6[33] = *(_QWORD *)(v12 - 8);
  v6[34] = swift_task_alloc();
  v6[35] = sub_23F6916B8(&qword_256EAB280);
  v6[36] = swift_task_alloc();
  sub_23F6916B8(&qword_256EAB288);
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  return swift_task_switch();
}

void sub_23F7D96D0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, char *, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v30 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 280);
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 16);
  sub_23F7DDA00();
  v4 = 0;
  v28 = v1;
  while (1)
  {
    if (v4 == v1)
    {
      sub_23F6B5A8C(*(_QWORD *)(v0 + 296), v2, v3, *(_QWORD *)(v0 + 280));
      v5 = v1;
      goto LABEL_6;
    }
    if (v4 >= v1)
      break;
    v6 = *(unint64_t **)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 280);
    v5 = v4 + 1;
    v8 = *(_QWORD *)(v0 + 288) + *(int *)(v32 + 48);
    sub_23F75E710(v8, *(_QWORD *)(v0 + 104)+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
    v9 = (uint64_t)v6 + *(int *)(v32 + 48);
    *v6 = v4;
    sub_23F75E710(v9, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32));
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v6, 0, 1, v7);
LABEL_6:
    v10 = *(_QWORD *)(v0 + 304);
    v11 = *(_QWORD *)(v0 + 280);
    sub_23F7AE8D8(*(_QWORD *)(v0 + 296), v10, &qword_256EAB288);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v10, 1, v11) == 1)
    {
      swift_bridgeObjectRelease();
      sub_23F6916B8(&qword_256EA2828);
      sub_23F7DD8C8();
      v27 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 312) = v27;
      *v27 = v0;
      v27[1] = sub_23F7D9A74;
      sub_23F7DD33C();
      sub_23FB2F50C();
      return;
    }
    v33 = v5;
    v12 = *(uint64_t **)(v0 + 304);
    v36 = *(_QWORD *)(v0 + 240);
    v38 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 216);
    v14 = *(char **)(v0 + 200);
    v34 = v13;
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 112);
    v37 = *v12;
    v17 = (char *)v12 + *(int *)(v32 + 48);
    sub_23F7DDAF8();
    v39 = *(_OWORD *)(v0 + 120);
    sub_23F7DD788();
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v30 + 16))(v13, v16, v39);
    v18 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 32);
    v18((uint64_t)v14, v17, v15);
    v19 = (*(unsigned __int8 *)(v30 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    v20 = (v35 + *(unsigned __int8 *)(v31 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_OWORD *)(v21 + 32) = v39;
    (*(void (**)(unint64_t, uint64_t, _QWORD))(v30 + 32))(v21 + v19, v34, v39);
    v18(v21 + v20, v14, v15);
    *(_QWORD *)(v21 + ((v29 + v20) & 0xFFFFFFFFFFFFFFF8)) = v37;
    sub_23F7DD9D4(v36);
    if (sub_23F7DD824(v38) == 1)
    {
      sub_23F7DD79C();
    }
    else
    {
      sub_23FB2F4DC();
      sub_23F7DD6B4();
    }
    v1 = v28;
    if (*(_QWORD *)(v21 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v22 = sub_23FB2F4A0();
      v24 = v23;
      swift_unknownObjectRelease();
    }
    else
    {
      v22 = 0;
      v24 = 0;
    }
    v4 = v33;
    v25 = **(_QWORD **)(v0 + 96);
    v26 = v24 | v22;
    if (v24 | v22)
    {
      v26 = v0 + 16;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = v22;
      *(_QWORD *)(v0 + 40) = v24;
    }
    *(_QWORD *)(v0 + 48) = 1;
    *(_QWORD *)(v0 + 56) = v26;
    *(_QWORD *)(v0 + 64) = v25;
    swift_task_create();
    swift_release();
    sub_23F7DD79C();
  }
  __break(1u);
}

uint64_t sub_23F7D9A74()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_23F7B0C9C();
  sub_23F785584(v2);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 320) = 0;
    *(_QWORD *)(v0 + 328) = v3;
  }
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D9AD4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = sub_23F7DD928();
  v3 = *(_QWORD *)(v0 + 328);
  if (v2 == 1)
  {
    v4 = *(_QWORD *)(v0 + 320);
    sub_23F7D1C98(*(_QWORD *)(v0 + 264));
    v18 = v3;
    sub_23F7DDA80();
    sub_23F7D34E8(&v18);
    if (v4)
    {
      return swift_release();
    }
    else
    {
      v13 = *(uint64_t **)(v0 + 88);
      swift_bridgeObjectRelease();
      v14 = sub_23F7D3048(v18);
      swift_release();
      swift_bridgeObjectRelease();
      *v13 = v14;
      sub_23F7B0A28();
      sub_23F7B0B8C();
      sub_23F6F52B0();
      sub_23F6F5268();
      sub_23F7D1F88();
      sub_23F7B0E90();
      swift_task_dealloc();
      sub_23F7D1F90();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v15 = (uint64_t (*)(void))sub_23F750B9C();
      return v15();
    }
  }
  else
  {
    sub_23F7DD350(*(char **)(v0 + 168));
    sub_23F7DD434();
    sub_23F7DD860(*(int *)(v1 + 48));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v0 + 328);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23F7DD7FC();
      v9 = v16;
    }
    if (*(_QWORD *)(v9 + 16) >= *(_QWORD *)(v9 + 24) >> 1)
    {
      sub_23F7DD9C8();
      v9 = v17;
    }
    *(_QWORD *)(v0 + 336) = v9;
    sub_23F7DD608(*(_QWORD *)(v0 + 152), v7, v8, v9);
    sub_23F7AE8D8(v10, v11, &qword_256EA44D8);
    sub_23F7DDA94();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 344) = v12;
    *v12 = v0;
    v12[1] = sub_23F7D9CFC;
    sub_23F7DD33C();
    return sub_23F7DD320();
  }
}

uint64_t sub_23F7D9CFC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_23F7B0C9C();
  sub_23F785584(v2);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = v0[42];
    v0[40] = 0;
    v0[41] = v3;
  }
  sub_23F6F522C();
  return sub_23F6B79B4();
}

uint64_t sub_23F7D9D54()
{
  uint64_t v0;

  sub_23F7DD7F0(*(_QWORD *)(v0 + 264));
  sub_23F6F52B0();
  sub_23F6F5268();
  sub_23F6F5224();
  sub_23F6F5280();
  sub_23F7B08D4();
  sub_23F7B08CC();
  sub_23F7B0988();
  sub_23F7B0A28();
  sub_23F7B0B8C();
  sub_23F7D1F88();
  sub_23F7B0E90();
  sub_23F7D1F90();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7D9E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t);

  v6[2] = a1;
  v6[3] = a6;
  v8 = sub_23FB2ED38();
  v6[4] = v8;
  v6[5] = *(_QWORD *)(v8 - 8);
  v9 = swift_task_alloc();
  v6[6] = v9;
  v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_256EAAF20 + dword_256EAAF20);
  v10 = (_QWORD *)swift_task_alloc();
  v6[7] = v10;
  *v10 = v6;
  v10[1] = sub_23F7D9EB4;
  return v12(v9, a5);
}

uint64_t sub_23F7D9EB4()
{
  sub_23F7DCFFC();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7D9EF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t (*v7)(void);

  sub_23F7D3034();
  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)v0[2];
  v6 = (char *)v5 + *(int *)(sub_23F6916B8(&qword_256EA44D8) + 48);
  *v5 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v6, v1, v3);
  sub_23F6F52B0();
  v7 = (uint64_t (*)(void))sub_23F750B9C();
  return sub_23F7440BC(v7);
}

uint64_t sub_23F7D9F4C()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_23F7440D0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F7D9F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8[2] = a1;
  v8[3] = a6;
  v12 = sub_23FB2ED38();
  v8[4] = v12;
  v8[5] = *(_QWORD *)(v12 - 8);
  v13 = swift_task_alloc();
  v8[6] = v13;
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 72) + *(_QWORD *)(a8 + 72));
  v14 = (_QWORD *)swift_task_alloc();
  v8[7] = v14;
  *v14 = v8;
  v14[1] = sub_23F7DA034;
  return v16(v13, a5, a7, a8);
}

uint64_t sub_23F7DA034()
{
  sub_23F7DCFFC();
  sub_23F6F522C();
  return sub_23F6F50C0();
}

uint64_t sub_23F7DA070()
{
  sub_23F7DC7B4();
  return sub_23FB2FC08();
}

uint64_t sub_23F7DA098()
{
  sub_23F7DC7B4();
  return sub_23FB2FBFC();
}

uint64_t sub_23F7DA0C0()
{
  uint64_t v0;

  v0 = qword_256EAAD88;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_23F7DA0F4()
{
  return 0;
}

uint64_t sub_23F7DA0FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = swift_task_alloc();
  v11 = (_QWORD *)sub_23F7D2FF0(v10);
  *v11 = v3;
  v11[1] = sub_23F7DCE78;
  return sub_23F7D9518(a1, a2, v9, v8, v6, v7);
}

uint64_t type metadata accessor for ConcurrencySafeToolKitExecutionSession()
{
  return objc_opt_self();
}

uint64_t sub_23F7DA198()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD258();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD090(v1);
  return sub_23F7D5B10();
}

uint64_t sub_23F7DA1E4()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD258();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD090(v1);
  return sub_23F7D5D70();
}

uint64_t sub_23F7DA230()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD258();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD090(v1);
  return sub_23F7D7454();
}

uint64_t sub_23F7DA27C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7D3034();
  sub_23F7DD888();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD268(v1);
  return sub_23F7D74E0();
}

uint64_t sub_23F7DA2CC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD258();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD090(v1);
  return sub_23F7D7574();
}

uint64_t sub_23F7DA318()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7D3034();
  sub_23F7DD888();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD268(v1);
  return sub_23F7D7600();
}

uint64_t sub_23F7DA368()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD258();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD090(v1);
  return sub_23F7D7694();
}

uint64_t sub_23F7DA3B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_23F7D2FF0(v1);
  *v2 = v0;
  v2[1] = sub_23F7DCE78;
  v3 = sub_23F7DD630();
  return sub_23F7D7720(v3);
}

uint64_t sub_23F7DA418()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD258();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD090(v1);
  return sub_23F7D7830();
}

uint64_t sub_23F7DA464()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7D3034();
  sub_23F7DD888();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD268(v1);
  return sub_23F7D78BC();
}

uint64_t sub_23F7DA4B4()
{
  sub_23F7DDAC0();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23F7DA4DC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23F7DD258();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  sub_23F7DD090(v1);
  return sub_23F7D79F0();
}

uint64_t sub_23F7DA528@<X0>(uint64_t *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v6;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v6 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_23F78C6DC();
  v10 = v9;
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native();
    v15 = *v6;
    *v6 = 0x8000000000000000;
    sub_23F6916B8(a1);
    sub_23FB2F914();
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v15 + 56);
    v12 = a2(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a3, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v8, v12);
    sub_23FB2F92C();
    *v6 = v15;
    swift_bridgeObjectRelease();
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a3, 0, 1, v12);
  }
  else
  {
    v14 = a2(0);
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a3, 1, 1, v14);
  }
}

uint64_t sub_23F7DA67C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  swift_bridgeObjectRetain();
  sub_23F78C9CC();
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native();
    v14 = *v2;
    *v2 = 0x8000000000000000;
    sub_23F6916B8(&qword_256EAB240);
    sub_23FB2F914();
    v8 = *(_QWORD *)(v14 + 48);
    v9 = sub_23FB2C674();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v5, v9);
    v10 = *(_QWORD *)(v14 + 56);
    v11 = sub_23FB2C68C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v5, v11);
    sub_23F7DC984();
    sub_23FB2F92C();
    *v2 = v14;
    swift_bridgeObjectRelease();
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, 0, 1, v11);
  }
  else
  {
    v13 = sub_23FB2C68C();
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, 1, 1, v13);
  }
}

void sub_23F7DA7D8(int64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  char v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t **v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v2 = v1;
  v131 = sub_23F6916B8(&qword_256EA44D8);
  v4 = *(_QWORD *)(v131 - 8);
  v5 = MEMORY[0x24BDAC7A8](v131);
  v127 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v137 = (uint64_t)&v121 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v134 = (uint64_t *)((char *)&v121 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v133 = (uint64_t *)((char *)&v121 - v11);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = sub_23FB2FB30();
  if (v13 >= v12)
  {
    if (v12 < 0)
      goto LABEL_142;
    if (v12)
      sub_23F7DB15C(0, v12, 1, (uint64_t *)a1);
    return;
  }
  v124 = v13;
  v122 = sub_23F6F0644(v12 / 2);
  v123 = v12;
  v129 = v14;
  v130 = v4;
  if (v12 <= 0)
    goto LABEL_105;
  v15 = 0;
  v16 = (char *)MEMORY[0x24BEE4AF8];
  v136 = (uint64_t *)a1;
  while (1)
  {
    v17 = v15;
    v18 = v15 + 1;
    v126 = v16;
    v128 = v15;
    if (v15 + 1 >= v12)
    {
      v23 = v15 + 1;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)(v4 + 72);
      v21 = v133;
      sub_23F7DCCDC(v19 + v20 * v18, (uint64_t)v133, &qword_256EA44D8);
      v22 = v134;
      sub_23F7DCCDC(v19 + v20 * v17, (uint64_t)v134, &qword_256EA44D8);
      v138 = *v21;
      v135 = *v22;
      sub_23F6B4F84((uint64_t)v22, &qword_256EA44D8);
      sub_23F6B4F84((uint64_t)v21, &qword_256EA44D8);
      v23 = v17 + 2;
      v125 = v19;
      v139 = v20;
      if (v17 + 2 < v12)
      {
        v121 = v2;
        v132 = v20 * v18;
        v24 = v19;
        v25 = v17 + 2;
        v26 = v20 * (v17 + 2);
        while (1)
        {
          v27 = v138 < v135;
          v28 = v133;
          sub_23F7DCCDC(v24 + v26, (uint64_t)v133, &qword_256EA44D8);
          v29 = v134;
          sub_23F7DCCDC(v24 + v132, (uint64_t)v134, &qword_256EA44D8);
          v30 = *v28 >= *v29;
          sub_23F6B4F84((uint64_t)v29, &qword_256EA44D8);
          sub_23F6B4F84((uint64_t)v28, &qword_256EA44D8);
          if (v27 == v30)
            break;
          v24 += v139;
          if (++v25 >= v12)
          {
            v23 = v12;
            v4 = v130;
            goto LABEL_12;
          }
        }
        v4 = v130;
        v23 = v25;
LABEL_12:
        v2 = v121;
        v17 = v128;
      }
      if (v138 >= v135)
        goto LABEL_30;
      if (v23 < v17)
        goto LABEL_143;
      if (v17 >= v23)
      {
LABEL_30:
        a1 = (int64_t)v136;
      }
      else
      {
        v135 = v12;
        v31 = 0;
        v32 = v139;
        v33 = v139 * (v23 - 1);
        v34 = v17;
        v35 = v23 * v139;
        v36 = v34;
        v37 = v34 * v139;
        do
        {
          if (v36 != v23 + v31 - 1)
          {
            v38 = v2;
            v39 = v125;
            if (!v125)
              goto LABEL_149;
            v40 = v125 + v37;
            v138 = v125 + v33;
            sub_23F7AE8D8(v125 + v37, v127, &qword_256EA44D8);
            if (v37 < v33 || v40 >= v39 + v35)
            {
              v42 = v138;
              swift_arrayInitWithTakeFrontToBack();
              v2 = v38;
              v43 = v42;
            }
            else
            {
              v2 = v38;
              v43 = v138;
              if (v37 != v33)
                swift_arrayInitWithTakeBackToFront();
            }
            sub_23F7AE8D8(v127, v43, &qword_256EA44D8);
            v32 = v139;
          }
          ++v36;
          --v31;
          v33 -= v32;
          v35 -= v32;
          v37 += v32;
        }
        while (v36 < v23 + v31);
        v4 = v130;
        v12 = v135;
        a1 = (int64_t)v136;
        v17 = v128;
      }
    }
    if (v23 < v12)
    {
      if (__OFSUB__(v23, v17))
        goto LABEL_141;
      if (v23 - v17 < v124)
      {
        if (__OFADD__(v17, v124))
          goto LABEL_144;
        if (v17 + v124 >= v12)
          v44 = v12;
        else
          v44 = v17 + v124;
        if (v44 < v17)
        {
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        if (v23 != v44)
        {
          v121 = v2;
          v45 = *(_QWORD *)(v4 + 72);
          v139 = v45 * (v23 - 1);
          v132 = v45;
          v46 = v23 * v45;
          v125 = v44;
          do
          {
            v47 = 0;
            v48 = v128;
            v135 = v23;
            while (1)
            {
              v49 = v136;
              v50 = *v136;
              v51 = v46;
              v52 = v46 + v47 + *v136;
              v53 = v133;
              sub_23F7DCCDC(v52, (uint64_t)v133, &qword_256EA44D8);
              v54 = v134;
              sub_23F7DCCDC(v139 + v47 + v50, (uint64_t)v134, &qword_256EA44D8);
              v138 = *v53;
              v55 = *v54;
              sub_23F6B4F84((uint64_t)v54, &qword_256EA44D8);
              sub_23F6B4F84((uint64_t)v53, &qword_256EA44D8);
              if (v138 >= v55)
                break;
              v56 = *v49;
              if (!*v49)
                goto LABEL_147;
              v46 = v51;
              v57 = v56 + v139 + v47;
              sub_23F7AE8D8(v56 + v51 + v47, v137, &qword_256EA44D8);
              swift_arrayInitWithTakeFrontToBack();
              sub_23F7AE8D8(v137, v57, &qword_256EA44D8);
              v47 -= v132;
              ++v48;
              v58 = v135;
              if (v135 == v48)
                goto LABEL_47;
            }
            v58 = v135;
            v46 = v51;
LABEL_47:
            v23 = v58 + 1;
            v139 += v132;
            v46 += v132;
          }
          while (v23 != v125);
          v23 = v125;
          v2 = v121;
          a1 = (int64_t)v136;
          v17 = v128;
        }
      }
    }
    if (v23 < v17)
      goto LABEL_140;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v135 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v126;
    }
    else
    {
      sub_23F7DB74C(0, *((_QWORD *)v126 + 2) + 1, 1, v126);
      v16 = v112;
    }
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v62 = v61 + 1;
    if (v61 >= v60 >> 1)
    {
      sub_23F7DB74C(v60 > 1, v61 + 1, 1, v16);
      v16 = v113;
    }
    *((_QWORD *)v16 + 2) = v62;
    v63 = v16 + 32;
    v64 = &v16[16 * v61 + 32];
    v65 = v135;
    *(_QWORD *)v64 = v128;
    *((_QWORD *)v64 + 1) = v65;
    if (v61)
      break;
    v62 = 1;
LABEL_97:
    v12 = *(_QWORD *)(a1 + 8);
    v15 = v135;
    v4 = v130;
    if (v135 >= v12)
      goto LABEL_106;
  }
  while (1)
  {
    v66 = v62 - 1;
    if (v62 >= 4)
    {
      v71 = &v63[16 * v62];
      v72 = *((_QWORD *)v71 - 8);
      v73 = *((_QWORD *)v71 - 7);
      v77 = __OFSUB__(v73, v72);
      v74 = v73 - v72;
      if (v77)
        goto LABEL_125;
      v76 = *((_QWORD *)v71 - 6);
      v75 = *((_QWORD *)v71 - 5);
      v77 = __OFSUB__(v75, v76);
      v69 = v75 - v76;
      v70 = v77;
      if (v77)
        goto LABEL_126;
      v78 = v62 - 2;
      v79 = &v63[16 * v62 - 32];
      v81 = *(_QWORD *)v79;
      v80 = *((_QWORD *)v79 + 1);
      v77 = __OFSUB__(v80, v81);
      v82 = v80 - v81;
      if (v77)
        goto LABEL_127;
      v77 = __OFADD__(v69, v82);
      v83 = v69 + v82;
      if (v77)
        goto LABEL_129;
      if (v83 >= v74)
      {
        v101 = &v63[16 * v66];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v77 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v77)
          goto LABEL_135;
        v94 = v69 < v104;
        goto LABEL_86;
      }
    }
    else
    {
      if (v62 != 3)
      {
        v95 = *((_QWORD *)v16 + 4);
        v96 = *((_QWORD *)v16 + 5);
        v77 = __OFSUB__(v96, v95);
        v88 = v96 - v95;
        v89 = v77;
        goto LABEL_80;
      }
      v68 = *((_QWORD *)v16 + 4);
      v67 = *((_QWORD *)v16 + 5);
      v77 = __OFSUB__(v67, v68);
      v69 = v67 - v68;
      v70 = v77;
    }
    if ((v70 & 1) != 0)
      goto LABEL_128;
    v78 = v62 - 2;
    v84 = &v63[16 * v62 - 32];
    v86 = *(_QWORD *)v84;
    v85 = *((_QWORD *)v84 + 1);
    v87 = __OFSUB__(v85, v86);
    v88 = v85 - v86;
    v89 = v87;
    if (v87)
      goto LABEL_130;
    v90 = &v63[16 * v66];
    v92 = *(_QWORD *)v90;
    v91 = *((_QWORD *)v90 + 1);
    v77 = __OFSUB__(v91, v92);
    v93 = v91 - v92;
    if (v77)
      goto LABEL_132;
    if (__OFADD__(v88, v93))
      goto LABEL_134;
    if (v88 + v93 >= v69)
    {
      v94 = v69 < v93;
LABEL_86:
      if (v94)
        v66 = v78;
      goto LABEL_88;
    }
LABEL_80:
    if ((v89 & 1) != 0)
      goto LABEL_131;
    v97 = &v63[16 * v66];
    v99 = *(_QWORD *)v97;
    v98 = *((_QWORD *)v97 + 1);
    v77 = __OFSUB__(v98, v99);
    v100 = v98 - v99;
    if (v77)
      goto LABEL_133;
    if (v100 < v88)
      goto LABEL_97;
LABEL_88:
    v105 = v66 - 1;
    if (v66 - 1 >= v62)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    v106 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_148;
    v107 = v16;
    v108 = (uint64_t **)&v63[16 * v105];
    a1 = (int64_t)*v108;
    v109 = &v63[16 * v66];
    v110 = *((_QWORD *)v109 + 1);
    sub_23F7DB390(v106 + *(_QWORD *)(v130 + 72) * (_QWORD)*v108, v106 + *(_QWORD *)(v130 + 72) * *(_QWORD *)v109, v106 + *(_QWORD *)(v130 + 72) * v110, v129);
    if (v2)
      break;
    if (v110 < a1)
      goto LABEL_122;
    if (v66 > *((_QWORD *)v107 + 2))
      goto LABEL_123;
    *v108 = (uint64_t *)a1;
    *(_QWORD *)&v63[16 * v105 + 8] = v110;
    v111 = *((_QWORD *)v107 + 2);
    if (v66 >= v111)
      goto LABEL_124;
    v62 = v111 - 1;
    memmove(&v63[16 * v66], v109 + 16, 16 * (v111 - 1 - v66));
    v16 = v107;
    *((_QWORD *)v107 + 2) = v111 - 1;
    a1 = (int64_t)v136;
    if (v111 <= 2)
      goto LABEL_97;
  }
LABEL_103:
  swift_bridgeObjectRelease();
  if (v123 >= -1)
    goto LABEL_118;
  __break(1u);
LABEL_105:
  v16 = (char *)MEMORY[0x24BEE4AF8];
  v62 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_106:
  if (v62 >= 2)
  {
    v114 = *(_QWORD *)a1;
    while (1)
    {
      a1 = v62 - 2;
      if (v62 < 2)
        break;
      if (!v114)
        goto LABEL_150;
      v115 = v16;
      v116 = *(_QWORD *)&v16[16 * a1 + 32];
      v117 = *(_QWORD *)&v16[16 * v62 + 24];
      sub_23F7DB390(v114 + *(_QWORD *)(v130 + 72) * v116, v114 + *(_QWORD *)(v130 + 72) * *(_QWORD *)&v16[16 * v62 + 16], v114 + *(_QWORD *)(v130 + 72) * v117, v129);
      if (v2)
        goto LABEL_103;
      if (v117 < v116)
        goto LABEL_137;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F7DB834();
        v115 = v120;
      }
      if ((unint64_t)a1 >= *((_QWORD *)v115 + 2))
        goto LABEL_138;
      v118 = &v115[16 * a1 + 32];
      *(_QWORD *)v118 = v116;
      *((_QWORD *)v118 + 1) = v117;
      v119 = *((_QWORD *)v115 + 2);
      if (v62 > v119)
        goto LABEL_139;
      memmove(&v115[16 * v62 + 16], &v115[16 * v62 + 32], 16 * (v119 - v62));
      v16 = v115;
      *((_QWORD *)v115 + 2) = v119 - 1;
      v62 = v119 - 1;
      if (v119 <= 2)
        goto LABEL_117;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_117:
  swift_bridgeObjectRelease();
  if (v123 >= -1)
  {
LABEL_118:
    *(_QWORD *)(v122 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
}

void sub_23F7DB15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;

  v35 = a1;
  v36 = sub_23F6916B8(&qword_256EA44D8);
  v7 = MEMORY[0x24BDAC7A8](v36);
  v42 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v38 = (uint64_t *)((char *)&v33 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v37 = (uint64_t *)((char *)&v33 - v12);
  v41 = a3;
  v34 = a2;
  if (a3 != a2)
  {
    v13 = *(_QWORD *)(v11 + 72);
    v14 = v13 * (v41 - 1);
    v39 = v13;
    v15 = v13 * v41;
    v16 = &qword_256EA44D8;
    v44 = a4;
    while (2)
    {
      v17 = 0;
      v18 = v35;
      v40 = v15;
      do
      {
        v19 = *v44;
        v20 = v15 + v17 + *v44;
        v21 = v37;
        sub_23F7DCCDC(v20, (uint64_t)v37, v16);
        v22 = v14 + v17 + v19;
        v23 = v14;
        v24 = v38;
        sub_23F7DCCDC(v22, (uint64_t)v38, v16);
        v43 = *v21;
        v25 = v16;
        v26 = *v24;
        v27 = (uint64_t)v24;
        v14 = v23;
        sub_23F6B4F84(v27, v25);
        v28 = (uint64_t)v21;
        v15 = v40;
        sub_23F6B4F84(v28, v25);
        v29 = v43 < v26;
        v16 = v25;
        if (!v29)
          break;
        v30 = *v44;
        if (!*v44)
        {
          __break(1u);
          return;
        }
        v31 = v30 + v23 + v17;
        sub_23F7AE8D8(v30 + v15 + v17, v42, v25);
        swift_arrayInitWithTakeFrontToBack();
        v32 = v31;
        v16 = v25;
        sub_23F7AE8D8(v42, v32, v25);
        v17 -= v39;
        ++v18;
      }
      while (v41 != v18);
      v14 = v23 + v39;
      v15 += v39;
      if (++v41 != v34)
        continue;
      break;
    }
  }
}

void sub_23F7DB390(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v32;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v41;
  int64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;

  v52 = sub_23F6916B8(&qword_256EA44D8);
  v9 = MEMORY[0x24BDAC7A8](v52);
  v54 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v53 = (uint64_t *)((char *)&v44 - v11);
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_77;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_78;
  v18 = v14 / v13;
  v19 = v16 / v13;
  if (v14 / v13 >= v16 / v13)
  {
    sub_23F7559B8(a2, v16 / v13);
    v21 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2)
      goto LABEL_71;
    v45 = v4;
    v46 = v13;
    v48 = a4;
    v49 = -v13;
    v47 = a1;
    while (1)
    {
      v24 = a3;
      v25 = v49;
      a3 += v49;
      v51 = v21 + v49;
      v26 = v53;
      sub_23F7DCCDC(v21 + v49, (uint64_t)v53, &qword_256EA44D8);
      v50 = a2 + v25;
      v27 = v54;
      sub_23F7DCCDC(a2 + v25, (uint64_t)v54, &qword_256EA44D8);
      v28 = *v26;
      v29 = *v27;
      sub_23F6B4F84((uint64_t)v27, &qword_256EA44D8);
      sub_23F6B4F84((uint64_t)v26, &qword_256EA44D8);
      if (v28 >= v29)
      {
        if (v24 >= v21 && a3 < v21)
        {
          v32 = v47;
          a4 = v48;
          if (v24 == v21)
          {
            v21 = v51;
            goto LABEL_43;
          }
          v21 = v51;
LABEL_40:
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_43;
        }
        v21 = v51;
      }
      else
      {
        if (v24 >= a2 && a3 < a2)
        {
          v32 = v47;
          a4 = v48;
          if (v24 == a2)
          {
            a2 = v50;
            goto LABEL_43;
          }
          a2 = v50;
          goto LABEL_40;
        }
        a2 = v50;
      }
      swift_arrayInitWithTakeFrontToBack();
      v32 = v47;
      a4 = v48;
LABEL_43:
      v13 = v46;
      if (v21 <= a4 || a2 <= v32)
        goto LABEL_71;
    }
  }
  sub_23F7559B8(a1, v14 / v13);
  v20 = v18 * v13;
  v21 = a4 + v18 * v13;
  v51 = a3;
  if (v20 >= 1 && a2 < a3)
  {
    v45 = v4;
    v50 = v21;
    v34 = v53;
    v35 = v54;
    do
    {
      sub_23F7DCCDC(a2, (uint64_t)v34, &qword_256EA44D8);
      sub_23F7DCCDC(a4, (uint64_t)v35, &qword_256EA44D8);
      v36 = *v34;
      v37 = *v35;
      sub_23F6B4F84((uint64_t)v35, &qword_256EA44D8);
      sub_23F6B4F84((uint64_t)v34, &qword_256EA44D8);
      if (v36 >= v37)
      {
        if (a1 < a4 || a1 >= a4 + v13)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v38 = a2;
        a4 += v13;
      }
      else
      {
        v38 = a2 + v13;
        if (a1 < a2 || a1 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      v21 = v50;
      a1 += v13;
      v41 = a4 >= v50 || v38 >= v51;
      a2 = v38;
    }
    while (!v41);
  }
LABEL_71:
  v42 = v21 - a4;
  if (v13 != -1 || v42 != 0x8000000000000000)
  {
    sub_23F7559B8(a4, v42 / v13);
    return;
  }
LABEL_79:
  __break(1u);
}

void sub_23F7DB74C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23F6916B8(&qword_256EAB2A8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  sub_23F693E04();
  sub_23F694C84();
}

void sub_23F7DB834()
{
  char v0;
  int64_t v1;
  char v2;
  char *v3;

  v0 = sub_23F7DDA60();
  sub_23F7DB74C(v0, v1, v2, v3);
}

uint64_t sub_23F7DB844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  swift_isUniquelyReferenced_nonNull_native();
  sub_23F7DD734();
  sub_23F7DB9E8(a1, a2, a3);
  sub_23F7DD898(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7DB8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(_QWORD))
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v13;

  swift_isUniquelyReferenced_nonNull_native();
  sub_23F7DD734();
  sub_23F7DBAD4(a1, a2, a3, v11, a4, a5);
  *v5 = v13;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7DB924()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_23F7DD750();
  v0 = sub_23F7DD4C4();
  v2 = sub_23F7DBBE8(v0, v1);
  sub_23F7DD898(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return sub_23F7DD4B4();
}

uint64_t sub_23F7DB950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_23F7DD750();
  v0 = sub_23F7DD4C4();
  v2 = sub_23F7DBCE4(v0, v1);
  sub_23F7DD898(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return sub_23F7DD4B4();
}

uint64_t sub_23F7DB97C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  *v2 = 0x8000000000000000;
  sub_23F7DBE28(a1, a2);
  *v2 = v6;
  return swift_bridgeObjectRelease();
}

void sub_23F7DB9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD **v4;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;

  sub_23F7DD6DC();
  sub_23F7DD568();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  sub_23F6916B8(&qword_256EA2810);
  if ((sub_23FB2F914() & 1) == 0)
    goto LABEL_5;
  v12 = sub_23F78C6DC();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    sub_23FB2FBD8();
    __break(1u);
    return;
  }
  v10 = v12;
LABEL_5:
  v14 = *v4;
  if ((v11 & 1) != 0)
  {
    v15 = v14[7];
    sub_23F6A3764(*(_QWORD *)(v15 + 8 * v10));
    *(_QWORD *)(v15 + 8 * v10) = v3;
    sub_23F6B69E0();
  }
  else
  {
    sub_23F7DBF9C(v10, a2, a3, v3, v14);
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_23F7DBAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  uint64_t v6;
  _QWORD **v7;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  sub_23F7DD6DC();
  sub_23F7DD568();
  if (v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v12;
  v16 = v13;
  sub_23F6916B8(a5);
  if ((sub_23FB2F914() & 1) != 0)
  {
    v17 = sub_23F78C6DC();
    if ((v16 & 1) == (v18 & 1))
    {
      v15 = v17;
      goto LABEL_5;
    }
LABEL_9:
    result = sub_23FB2FBD8();
    __break(1u);
    return result;
  }
LABEL_5:
  if ((v16 & 1) != 0)
  {
    a6(0);
    sub_23F693DDC();
    __asm { BR              X3 }
  }
  sub_23F7DBFE4(v15, a2, a3, v6, *v7, (uint64_t (*)(_QWORD))a6);
  sub_23F693DDC();
  return swift_bridgeObjectRetain();
}

unint64_t sub_23F7DBBE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD **v3;
  _QWORD *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t result;

  v3 = (_QWORD **)v2;
  v6 = (_QWORD *)*v2;
  v7 = sub_23F78C8D8();
  if (__OFADD__(v6[2], (v8 & 1) == 0))
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = v7;
  v10 = v8;
  sub_23F6916B8(&qword_256EAB248);
  if ((sub_23FB2F914() & 1) == 0)
    goto LABEL_5;
  v11 = sub_23F78C8D8();
  if ((v10 & 1) != (v12 & 1))
  {
LABEL_9:
    result = sub_23FB2FBD8();
    __break(1u);
    return result;
  }
  v9 = v11;
LABEL_5:
  v13 = *v3;
  if ((v10 & 1) == 0)
    return sub_23F7DC7F0(v9, a2, a1, v13);
  v14 = v13[7];
  result = swift_release();
  *(_QWORD *)(v14 + 8 * v9) = a1;
  return result;
}

uint64_t sub_23F7DBCE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v3 = (_QWORD **)v2;
  v6 = sub_23FB2C320();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)*v2;
  sub_23F78C968();
  if (__OFADD__(v10[2], (v12 & 1) == 0))
  {
    __break(1u);
    goto LABEL_10;
  }
  v13 = v11;
  v14 = v12;
  sub_23F6916B8(&qword_256EAB250);
  if ((sub_23FB2F914() & 1) == 0)
    goto LABEL_5;
  sub_23F78C968();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_10:
    result = sub_23FB2FBD8();
    __break(1u);
    return result;
  }
  v13 = v15;
LABEL_5:
  v17 = *v3;
  if ((v14 & 1) != 0)
  {
    v18 = v17[7];
    result = swift_release();
    *(_QWORD *)(v18 + 8 * v13) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    return sub_23F7DC834(v13, (uint64_t)v9, a1, v17);
  }
  return result;
}

uint64_t sub_23F7DBE28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v3 = (_QWORD **)v2;
  v6 = sub_23FB2C674();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)*v2;
  sub_23F78C9CC();
  if (__OFADD__(v10[2], (v12 & 1) == 0))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v11;
  v14 = v12;
  sub_23F6916B8(&qword_256EAB240);
  if ((sub_23FB2F914() & 1) == 0)
    goto LABEL_5;
  sub_23F78C9CC();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    result = sub_23FB2FBD8();
    __break(1u);
    return result;
  }
  v13 = v15;
LABEL_5:
  v17 = *v3;
  if ((v14 & 1) != 0)
  {
    v18 = v17[7];
    v19 = sub_23FB2C68C();
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v13, a1, v19);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    return sub_23F7DC8CC(v13, (uint64_t)v9, a1, v17);
  }
}

unint64_t sub_23F7DBF9C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_23F7DBFE4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = a6(0);
  result = sub_23F7B0990(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32));
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.resolve(reference:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.resolve(reference:coercedTo:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  sub_23F7DD0D8();
  v0 = sub_23F7B08B8();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCF9C(v1);
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  sub_23F7DD0D8();
  v0 = sub_23F7B08B8();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCF9C(v1);
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.coerce(value:to:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  v0 = sub_23F7B08B8();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCF9C(v1);
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.inject(value:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.enumerate(valueSet:in:query:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  sub_23F7DD0D8();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCEA0;
  sub_23F7DD078();
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.fetchToolInvocationSummary(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.hydrate(value:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ConcurrencySafeToolExecutionInterface.hydrate(values:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_23F7DD46C();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_23F7B0BA8(v1, (uint64_t)sub_23F7DCEA0);
  return sub_23F7B09FC(v2, v3, v4, v5);
}

uint64_t dispatch thunk of ToolExecutionInterface.executorEventStream.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  sub_23F7DD46C();
  v4 = sub_23F7B08B8();
  v5 = (_QWORD *)sub_23F7D2FF0(v4);
  *v5 = v2;
  v5[1] = sub_23F7DCE78;
  return v7(v3, v1, v0);
}

uint64_t dispatch thunk of ToolExecutionInterface.resolve(reference:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ToolExecutionInterface.resolve(reference:coercedTo:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  v0 = sub_23F7B08B8();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCF9C(v1);
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  sub_23F7DD0D8();
  v0 = sub_23F7B08B8();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCF9C(v1);
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of ToolExecutionInterface.coerce(value:to:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  sub_23F7DD0D8();
  v0 = sub_23F7B08B8();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCF9C(v1);
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of ToolExecutionInterface.inject(value:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ToolExecutionInterface.enumerate(valueSet:in:query:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  sub_23F7DD0D8();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23F7DCEA0;
  sub_23F7DD078();
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of ToolExecutionInterface.fetchToolInvocationSummary(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ToolExecutionInterface.hydrate(value:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_23F7D3034();
  sub_23F7DD104();
  v0 = sub_23F7DCF74();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCEFC(v1);
  return sub_23F7DCED0(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of ToolExecutionInterface.hydrate(values:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_23F7DD46C();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_23F7B0BA8(v1, (uint64_t)sub_23F6F4DA8);
  return sub_23F7B09FC(v2, v3, v4, v5);
}

uint64_t dispatch thunk of ToolExecutionInterface.execute(toolInvocation:dialogHandler:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_23F7DD1D0();
  sub_23F7DD0D8();
  v0 = sub_23F7B08B8();
  v1 = (_QWORD *)sub_23F7D2FF0(v0);
  v2 = sub_23F7DCF9C(v1);
  return sub_23F7DCF88(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of ToolExecutionInterface.undo(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_23F7DD46C();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_23F7B0BA8(v1, (uint64_t)sub_23F7DCE78);
  return sub_23F7B09FC(v2, v3, v4, v5);
}

uint64_t dispatch thunk of ToolExecutionInterface.redo(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_23F7DD46C();
  v1 = (_QWORD *)sub_23F7B08B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_23F7B0BA8(v1, (uint64_t)sub_23F7DCE78);
  return sub_23F7B09FC(v2, v3, v4, v5);
}

uint64_t type metadata accessor for ToolKitExecutionSession()
{
  return objc_opt_self();
}

uint64_t method lookup function for ToolKitExecutionSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ToolKitExecutionSession.__allocating_init(sessionTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for ConcurrencySafeToolKitExecutionSession()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for ExecutionSessionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7DC714 + 4 * byte_23FB621E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F7DC734 + 4 * byte_23FB621E5[v4]))();
}

_BYTE *sub_23F7DC714(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F7DC734(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7DC73C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7DC744(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7DC74C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7DC754(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ExecutionSessionError()
{
  return &type metadata for ExecutionSessionError;
}

unint64_t sub_23F7DC778()
{
  unint64_t result;

  result = qword_256EAB230;
  if (!qword_256EAB230)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62368, &type metadata for ExecutionSessionError);
    atomic_store(result, (unint64_t *)&qword_256EAB230);
  }
  return result;
}

unint64_t sub_23F7DC7B4()
{
  unint64_t result;

  result = qword_256EAB238;
  if (!qword_256EAB238)
  {
    result = MEMORY[0x242674E5C](&unk_23FB622E8, &type metadata for ExecutionSessionError);
    atomic_store(result, (unint64_t *)&qword_256EAB238);
  }
  return result;
}

unint64_t sub_23F7DC7F0(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_23F7DC834(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_23FB2C320();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_23F7DC8CC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_23FB2C674();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_23FB2C68C();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t sub_23F7DC984()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EA8C80;
  if (!qword_256EA8C80)
  {
    v1 = sub_23FB2C674();
    result = MEMORY[0x242674E5C](MEMORY[0x24BEBFE10], v1);
    atomic_store(result, (unint64_t *)&qword_256EA8C80);
  }
  return result;
}

void sub_23F7DC9C4()
{
  sub_23F7DDA60();
  sub_23F712658();
}

void sub_23F7DC9D4()
{
  sub_23F7DDA60();
  sub_23F712764();
}

void sub_23F7DC9E4()
{
  sub_23F7DDA60();
  sub_23F712910();
}

void sub_23F7DC9F4()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v0 = sub_23F7DDA60();
  sub_23F7125A0(v0, v1, v2, v3);
}

void sub_23F7DCA04()
{
  sub_23F712BDC();
}

uint64_t sub_23F7DCA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = *a4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = sub_23F7DCA80;
  return sub_23F7D8CFC(a2, a3, v7);
}

uint64_t sub_23F7DCA80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  sub_23F785584(&v7);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return sub_23F7DD248(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_23F7DCACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_23F7D3034();
  v3 = v2;
  v5 = v4;
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(uint64_t **)(v0 + 24);
  v8 = swift_task_alloc();
  v9 = (_QWORD *)sub_23F7D2FF0(v8);
  *v9 = v1;
  v9[1] = sub_23F7DCE78;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&dword_256EAB258 + dword_256EAB258))(v5, v3, v7, v6);
}

uint64_t sub_23F7DCB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;

  v12 = *a4;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23F7DCE78;
  return sub_23F7D9E0C(a1, a2, a3, v12, a5, a6);
}

uint64_t sub_23F7DCBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23F6B6634();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_23F7DDAC0();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23F7DCC4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  sub_23F6B6634();
  sub_23F7DD978();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_23F7D2FF0(v1);
  *v2 = v0;
  v2[1] = sub_23F7DCE78;
  v3 = sub_23F7DD630();
  return v4(v3);
}

void sub_23F7DCCDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_23F6B6B88(a1, a2, a3);
  sub_23F7B0990(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  sub_23F694CC8();
}

uint64_t sub_23F7DCD0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_23F6B6634() - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_23F7DDAC0();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_23F78F1E4(v0 + v6, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_23F693DDC();
  return swift_deallocObject();
}

uint64_t sub_23F7DCDB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  sub_23F7DD1B8();
  v3 = v2;
  v4 = v0[4];
  v5 = v0[5];
  v6 = (*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  sub_23F6B6634();
  sub_23F7DD978();
  v7 = v0[2];
  v8 = v0[3];
  v9 = (uint64_t)v0 + v6;
  v11 = (uint64_t)v0 + v10;
  v13 = *(_QWORD *)((char *)v0 + v12);
  v14 = swift_task_alloc();
  v15 = (_QWORD *)sub_23F7D2FF0(v14);
  *v15 = v1;
  v15[1] = sub_23F7DCE78;
  return sub_23F7D9F78(v3, v7, v8, v9, v11, v13, v4, v5);
}

uint64_t sub_23F7DCEA4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7DCEC0()
{
  return sub_23FB2F4F4();
}

uint64_t sub_23F7DCED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_23F7DCEE4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7DCEFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = v1;
  return v3;
}

uint64_t sub_23F7DCF1C()
{
  return sub_23FB2E300();
}

uint64_t sub_23F7DCF2C()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7DCF50()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7DCF74()
{
  return swift_task_alloc();
}

uint64_t sub_23F7DCF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_23F7DCF9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = v1;
  return v3;
}

uint64_t sub_23F7DCFDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23F7DCFFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23F7DD01C()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7DD040()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7DD064()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7DD090(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_23F7DD0AC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7DD0C8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = *v3;
  *(_QWORD *)(a1 + 64) = v2;
  return swift_task_dealloc();
}

uint64_t sub_23F7DD0F0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 16);
  return swift_task_alloc();
}

__n128 sub_23F7DD118(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v10;
  __n128 result;

  *(_QWORD *)(v10 + 80) = a1;
  result = a9;
  a1[1] = a9;
  a1[2].n128_u64[0] = v9;
  return result;
}

uint64_t sub_23F7DD130()
{
  return swift_task_alloc();
}

uint64_t sub_23F7DD144()
{
  return swift_task_switch();
}

uint64_t sub_23F7DD150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_23F7DD178()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23F7DD198()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23F7DD1E8@<X0>(uint64_t (*a1)(unint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v4 + 8 * (v5 >> 6) + 64) |= 1 << v5;
  v6 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v5);
  *v6 = v2;
  v6[1] = v1;
  return a1(*(_QWORD *)(v4 + 56) + *(_QWORD *)(v3 + 72) * v5);
}

uint64_t sub_23F7DD220()
{
  return swift_task_alloc();
}

uint64_t sub_23F7DD234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, a1, v2);
}

uint64_t sub_23F7DD248(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23F7DD268(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_23F7DD288()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t, char *, uint64_t);

  v2 = (_QWORD *)v1[14];
  v3 = v1[12];
  v4 = v1[8];
  v5 = v1[9];
  v1[19] = *v2;
  v1[20] = v2[1];
  v6 = (char *)v2 + *(int *)(v0 + 48);
  v7 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v1[21] = v7;
  return v7(v3, v6, v4);
}

uint64_t sub_23F7DD2B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t sub_23F7DD2C4()
{
  return sub_23FB2FBD8();
}

uint64_t sub_23F7DD2E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_23F7DD2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_23F7DD318()
{
  return swift_task_alloc();
}

uint64_t sub_23F7DD320()
{
  return sub_23FB2F50C();
}

uint64_t sub_23F7DD350@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(int *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  return (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(&a1[v5], &v2[v5], v3);
}

uint64_t sub_23F7DD374(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_23F7DD390()
{
  return sub_23FB2EC54();
}

uint64_t sub_23F7DD3B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 384) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23F7DD3D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 400) = v0;
  return swift_task_dealloc();
}

void sub_23F7DD3F0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 16);
}

uint64_t sub_23F7DD408()
{
  return sub_23FB2F9EC();
}

uint64_t sub_23F7DD41C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_23F7DD434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;

  v6 = (char *)v4 + *(int *)(v0 + 48);
  *v4 = v5;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v2, v1);
}

__n128 sub_23F7DD454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;
  __n128 result;

  *(_QWORD *)(v9 + 88) = a1;
  result = *(__n128 *)(v9 + 40);
  *(_OWORD *)(a1 + 16) = a9;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_23F7DD47C()
{
  return swift_slowAlloc();
}

unint64_t sub_23F7DD498()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v1;
  return sub_23F78C6DC();
}

uint64_t sub_23F7DD4B4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7DD4C4()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_23F7DD4E8()
{
  return sub_23FB2EC54();
}

uint64_t sub_23F7DD504()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7DD528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2 + *(int *)(a1 + 48), v3, v1);
}

uint64_t sub_23F7DD544@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_23F7DD550(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t sub_23F7DD55C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  v1[1] = a1;
  return *(_QWORD *)(v2 + 32);
}

uint64_t sub_23F7DD578()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7DD580(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_23F7DD5A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_23F7DD5AC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_23F7DD5B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*(_QWORD *)(result + 48) + 16 * a2);
  v4 = v3[1];
  *v2 = *v3;
  v2[1] = v4;
  return result;
}

void sub_23F7DD608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(a4 + 16) = v4;
}

uint64_t sub_23F7DD628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_23F7DD630()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7DD650()
{
  return swift_retain();
}

void sub_23F7DD668(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v1);
  v4 = v3[1];
  *v2 = *v3;
  v2[1] = v4;
}

uint64_t sub_23F7DD688(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return sub_23FB2F680();
}

uint64_t sub_23F7DD6A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(a1 + 40))(*(_QWORD *)(v1 + 56) + *(_QWORD *)(a1 + 72) * v2);
}

uint64_t sub_23F7DD6B4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_23F7DD6C8()
{
  return sub_23FB2F914();
}

unint64_t sub_23F7DD6DC()
{
  return sub_23F78C6DC();
}

uint64_t sub_23F7DD6F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 88);
}

uint64_t sub_23F7DD70C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 104);
}

uint64_t sub_23F7DD728(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

void sub_23F7DD734()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_23F7DD750()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23F7DD764(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_23F7DD76C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F7DD774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(v2, v1);
}

uint64_t sub_23F7DD788()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, 1, 1, v1);
}

void sub_23F7DD79C()
{
  uint64_t v0;
  uint64_t *v1;

  sub_23F6B4F84(v0, v1);
}

uint64_t sub_23F7DD7A8()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, 0, 1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7DD7CC()
{
  uint64_t v0;
  uint64_t v1;

  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, 0, 1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7DD7F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_23F7DD7FC()
{
  sub_23F754578();
}

void sub_23F7DD810(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_23F7DD824(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v1);
}

uint64_t sub_23F7DD84C(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, a1);
}

uint64_t sub_23F7DD860@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(char *, uint64_t, uint64_t);
  uint64_t v5;

  *(_QWORD *)v1 = v5;
  return v4(&v1[a1], v2, v3);
}

uint64_t sub_23F7DD874()
{
  return swift_slowAlloc();
}

uint64_t sub_23F7DD898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_23F7DD8A8()
{
  return sub_23FB2EC48();
}

uint64_t sub_23F7DD8B8()
{
  return sub_23FB2EC48();
}

uint64_t sub_23F7DD8C8()
{
  return sub_23FB2F500();
}

uint64_t sub_23F7DD8D8()
{
  return swift_release();
}

uint64_t sub_23F7DD8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t sub_23F7DD8F0()
{
  return swift_deallocBox();
}

uint64_t sub_23F7DD928()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, v0);
}

uint64_t sub_23F7DD938()
{
  return swift_allocBox();
}

uint64_t sub_23F7DD968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_23F7DD99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, a10);
}

uint64_t sub_23F7DD9AC(float a1)
{
  float *v1;

  *v1 = a1;
  return sub_23FB2ECFC();
}

uint64_t sub_23F7DD9BC()
{
  return sub_23FB2E378();
}

void sub_23F7DD9C8()
{
  sub_23F754578();
}

void sub_23F7DD9D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_23F7DCCDC(a1, v1, v2);
}

uint64_t sub_23F7DD9E0()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7DD9E8()
{
  return swift_task_dealloc();
}

uint64_t sub_23F7DD9F4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23F7D5494(v0, *(_QWORD *)(v1 + 40));
}

uint64_t sub_23F7DDA00()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7DDA0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t sub_23F7DDA18(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 1, 1, a1);
}

uint64_t sub_23F7DDA3C(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v1, 1, 1, a1);
}

uint64_t sub_23F7DDA60()
{
  return 0;
}

uint64_t sub_23F7DDA80()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_23F7DDA8C()
{
  return swift_unknownObjectRelease();
}

void sub_23F7DDA94()
{
  uint64_t *v0;
  uint64_t v1;

  sub_23F6B4F84(v1, v0);
}

uint64_t sub_23F7DDAA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_23F7DDAC0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23F7DDAC8(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, a1);
}

uint64_t sub_23F7DDAEC()
{
  return swift_willThrow();
}

uint64_t sub_23F7DDAF8()
{
  return sub_23FB2F4E8();
}

uint64_t sub_23F7DDB14()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v0);
}

uint64_t sub_23F7DDB20(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_23F69334C(a1, a2, (uint64_t *)va);
}

void sub_23F7DDB2C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t ToolExecutionSessionResolveInput.deferredValue.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23F7DE274((void (*)(_QWORD))MEMORY[0x24BEB97F0], a1);
}

uint64_t ToolExecutionSessionResolveInput.init(deferredValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7DE2B4(a1, (void (*)(_QWORD))MEMORY[0x24BEB97F0], a2);
}

uint64_t sub_23F7DDB58(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6465727265666564 && a2 == 0xED000065756C6156)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F7DDC00()
{
  return 0x6465727265666564;
}

uint64_t sub_23F7DDC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7DDB58(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F7DDC50()
{
  sub_23F7DDDA8();
  return sub_23FB2FD10();
}

uint64_t sub_23F7DDC78()
{
  sub_23F7DDDA8();
  return sub_23FB2FD1C();
}

uint64_t ToolExecutionSessionResolveInput.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_23F6916B8(&qword_256EAB2D0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6BD134();
  v6 = v5 - v4;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7DDDA8();
  sub_23FB2FCC8();
  sub_23FB2EC78();
  sub_23F6D3458(&qword_256EAB2E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB97F0], MEMORY[0x24BEB9800]);
  sub_23FB2FB18();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
}

unint64_t sub_23F7DDDA8()
{
  unint64_t result;

  result = qword_256EAB2D8;
  if (!qword_256EAB2D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB629D0, &type metadata for ToolExecutionSessionResolveInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB2D8);
  }
  return result;
}

void ToolExecutionSessionResolveInput.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23F6B5220();
  v5 = v4;
  v13 = v6;
  v15 = sub_23FB2EC78();
  v12 = *(_QWORD *)(v15 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B51A4();
  v14 = v8;
  v9 = sub_23F6916B8(&qword_256EAB2E8);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5268();
  type metadata accessor for ToolExecutionSessionResolveInput(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B59E0();
  sub_23F6ADC98(v5, v5[3]);
  sub_23F7DDDA8();
  sub_23FB2FCB0();
  if (!v0)
  {
    sub_23F6D3458(&qword_256EAB2F0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB97F0], MEMORY[0x24BEB9818]);
    sub_23FB2FA7C();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v2, v14, v15);
    sub_23F740A28(v2, v13, type metadata accessor for ToolExecutionSessionResolveInput);
  }
  sub_23F6B6E68();
  sub_23F6B5100();
}

uint64_t type metadata accessor for ToolExecutionSessionResolveInput(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAB398);
}

void sub_23F7DDF68()
{
  ToolExecutionSessionResolveInput.init(from:)();
}

uint64_t sub_23F7DDF7C(_QWORD *a1)
{
  return ToolExecutionSessionResolveInput.encode(to:)(a1);
}

uint64_t ToolExecutionSessionResolveOutput.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23F7DE274((void (*)(_QWORD))MEMORY[0x24BEB9A18], a1);
}

uint64_t ToolExecutionSessionResolveOutput.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7DE2B4(a1, (void (*)(_QWORD))MEMORY[0x24BEB9A18], a2);
}

uint64_t sub_23F7DDFAC()
{
  sub_23F7DE030();
  return sub_23FB2FD10();
}

uint64_t sub_23F7DDFD4()
{
  sub_23F7DE030();
  return sub_23FB2FD1C();
}

void ToolExecutionSessionResolveOutput.encode(to:)()
{
  sub_23F7DE3A8();
}

unint64_t sub_23F7DE030()
{
  unint64_t result;

  result = qword_256EAB300;
  if (!qword_256EAB300)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62980, &type metadata for ToolExecutionSessionResolveOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB300);
  }
  return result;
}

void ToolExecutionSessionResolveOutput.init(from:)()
{
  sub_23F7DE0A0();
}

void sub_23F7DE0A0()
{
  uint64_t v0;
  void (*v1)(void);
  void (*v2)(void);
  uint64_t (*v3)(_QWORD);
  uint64_t (*v4)(_QWORD);
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_23F6B5220();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v21 = v9;
  v25 = sub_23F6B6634();
  v20 = *(_QWORD *)(v25 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v24 = v11;
  v12 = sub_23F6916B8(v6);
  v23 = *(_QWORD *)(v12 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6BD134();
  v16 = v15 - v14;
  v22 = v4;
  v17 = v4(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v20 - v18;
  sub_23F6ADC98(v8, v8[3]);
  v2();
  sub_23FB2FCB0();
  if (!v0)
  {
    sub_23F6D3458(&qword_256EA7188, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9A18], MEMORY[0x24BEB9A40]);
    sub_23FB2FA7C();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v19, v24, v25);
    sub_23F740A28((uint64_t)v19, v21, v22);
  }
  sub_23F6B6E68();
  sub_23F6B5100();
}

uint64_t type metadata accessor for ToolExecutionSessionResolveOutput(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAB428);
}

void sub_23F7DE240()
{
  ToolExecutionSessionResolveOutput.init(from:)();
}

void sub_23F7DE254()
{
  ToolExecutionSessionResolveOutput.encode(to:)();
}

uint64_t ToolExecutionSessionHydrateInput.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23F7DE274((void (*)(_QWORD))MEMORY[0x24BEB9A18], a1);
}

uint64_t sub_23F7DE274@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  a1(0);
  sub_23F7B0DC4();
  return sub_23F6B64B0(a2, v2, v5, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t ToolExecutionSessionHydrateInput.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7DE2B4(a1, (void (*)(_QWORD))MEMORY[0x24BEB9A18], a2);
}

uint64_t sub_23F7DE2B4@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  a2(0);
  sub_23F7B0DC4();
  return sub_23F6B64B0(a3, a1, v6, *(uint64_t (**)(void))(v5 + 32));
}

uint64_t sub_23F7DE2E8()
{
  return 0x65756C6176;
}

uint64_t sub_23F7DE2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7DE5E4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F7DE324()
{
  sub_23F7DE494();
  return sub_23FB2FD10();
}

uint64_t sub_23F7DE34C()
{
  sub_23F7DE494();
  return sub_23FB2FD1C();
}

void ToolExecutionSessionHydrateInput.encode(to:)()
{
  sub_23F7DE3A8();
}

void sub_23F7DE3A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(void);
  void (*v5)(void);
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);

  sub_23F6B5220();
  v12 = v3;
  v5 = v4;
  v6 = v0;
  v8 = v7;
  v10 = sub_23F6916B8(v9);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B5268();
  sub_23F6ADC98(v8, v8[3]);
  v5();
  sub_23FB2FCC8();
  sub_23F6B6634();
  sub_23F6D3458(&qword_256EA7170, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9A18], MEMORY[0x24BEB9A28]);
  v12(v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v10);
  sub_23F6B5100();
}

unint64_t sub_23F7DE494()
{
  unint64_t result;

  result = qword_256EAB318;
  if (!qword_256EAB318)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62930, &type metadata for ToolExecutionSessionHydrateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB318);
  }
  return result;
}

void ToolExecutionSessionHydrateInput.init(from:)()
{
  sub_23F7DE0A0();
}

uint64_t type metadata accessor for ToolExecutionSessionHydrateInput(uint64_t a1)
{
  return sub_23F6D89A0(a1, qword_256EAB4B8);
}

void sub_23F7DE518()
{
  ToolExecutionSessionHydrateInput.init(from:)();
}

void sub_23F7DE52C()
{
  ToolExecutionSessionHydrateInput.encode(to:)();
}

uint64_t ToolExecutionSessionHydrateOutput.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23F7DE54C(v1, a1);
}

uint64_t sub_23F7DE54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA2950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ToolExecutionSessionHydrateOutput.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7DE59C(a1, a2);
}

uint64_t sub_23F7DE59C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA2950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F7DE5E4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F7DE660()
{
  sub_23F7DE6E4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7DE688()
{
  sub_23F7DE6E4();
  return sub_23FB2FD1C();
}

void ToolExecutionSessionHydrateOutput.encode(to:)()
{
  sub_23F7DE3A8();
}

unint64_t sub_23F7DE6E4()
{
  unint64_t result;

  result = qword_256EAB330;
  if (!qword_256EAB330)
  {
    result = MEMORY[0x242674E5C](&unk_23FB628E0, &type metadata for ToolExecutionSessionHydrateOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB330);
  }
  return result;
}

void ToolExecutionSessionHydrateOutput.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23F6B5220();
  v4 = v3;
  v14 = v5;
  sub_23F6916B8(&qword_256EA2950);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v15 = v7;
  v8 = sub_23F6916B8(&qword_256EAB338);
  sub_23F6B58B8();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6BD134();
  v12 = v11 - v10;
  type metadata accessor for ToolExecutionSessionHydrateOutput(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B59E0();
  sub_23F6ADC98(v4, v4[3]);
  sub_23F7DE6E4();
  sub_23FB2FCB0();
  if (!v0)
  {
    sub_23F6B6634();
    sub_23F6D3458(&qword_256EA7188, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9A18], MEMORY[0x24BEB9A40]);
    sub_23FB2FA34();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v8);
    sub_23F7DE59C(v15, v2);
    sub_23F740A28(v2, v14, type metadata accessor for ToolExecutionSessionHydrateOutput);
  }
  sub_23F6B6E68();
  sub_23F6B5100();
}

uint64_t type metadata accessor for ToolExecutionSessionHydrateOutput(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EAB548);
}

void sub_23F7DE8A4()
{
  ToolExecutionSessionHydrateOutput.init(from:)();
}

void sub_23F7DE8B8()
{
  ToolExecutionSessionHydrateOutput.encode(to:)();
}

uint64_t initializeBufferWithCopyOfBuffer for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F7DEA14(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB97F0]);
}

uint64_t destroy for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2)
{
  return sub_23F7AF418(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEB97F0]);
}

void initializeWithCopy for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEA3C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB97F0]);
}

void assignWithCopy for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEA64(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB97F0]);
}

void initializeWithTake for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEA8C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB97F0]);
}

void assignWithTake for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEAB8(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB97F0]);
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionResolveInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7DE920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7DF3D0();
  v0 = sub_23F70D890();
  return sub_23F70D620(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionResolveInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7DE948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DF3D0();
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F7DE964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F741620(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BEB97F0]);
}

uint64_t initializeBufferWithCopyOfBuffer for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F7DEA14(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9A18]);
}

uint64_t destroy for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2)
{
  return sub_23F7AF418(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9A18]);
}

void initializeWithCopy for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEA3C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9A18]);
}

void assignWithCopy for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEA64(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9A18]);
}

void initializeWithTake for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEA8C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9A18]);
}

void assignWithTake for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23F7DEAB8(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB9A18]);
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionResolveOutput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7DE9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7DF3E0();
  v0 = sub_23F70D890();
  return sub_23F70D620(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionResolveOutput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7DE9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F7DF3E0();
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F7DEA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F741620(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BEB9A18]);
}

uint64_t sub_23F7DEA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(void);
  uint64_t v7;

  sub_23F7DF3C0(a1, a2, a3, a4);
  sub_23F7B0DC4();
  return sub_23F6B64B0(v5, v4, v7, *v6);
}

void sub_23F7DEA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  sub_23F7DF3C0(a1, a2, a3, a4);
  sub_23F7B0DC4();
  sub_23F70D66C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16));
  sub_23F694CC8();
}

void sub_23F7DEA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  sub_23F7DF3C0(a1, a2, a3, a4);
  sub_23F7B0DC4();
  sub_23F70D66C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24));
  sub_23F694CC8();
}

void sub_23F7DEA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  v4 = sub_23F7DF3C0(a1, a2, a3, a4);
  sub_23F70D66C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  sub_23F694CC8();
}

void sub_23F7DEAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  sub_23F7DF3C0(a1, a2, a3, a4);
  sub_23F7B0DC4();
  sub_23F70D66C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40));
  sub_23F694CC8();
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionHydrateInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionHydrateInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolExecutionSessionHydrateOutput(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(sub_23F6916B8(&qword_256EA2950) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = sub_23FB2ED38();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t destroy for ToolExecutionSessionHydrateOutput(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23FB2ED38();
  result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23FB2ED38();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v4))
  {
    v5 = sub_23F6916B8(&qword_256EA2950);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23FB2ED38();
  v5 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, v4);
  v6 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    v7 = *(_QWORD *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    v8 = sub_23F6916B8(&qword_256EA2950);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23FB2ED38();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v4))
  {
    v5 = sub_23F6916B8(&qword_256EA2950);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23FB2ED38();
  v5 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a1, 1, v4);
  v6 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    v7 = *(_QWORD *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    v8 = sub_23F6916B8(&qword_256EA2950);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionHydrateOutput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7DEF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F6916B8(&qword_256EA2950);
  v0 = sub_23F70D890();
  return sub_23F70D620(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionHydrateOutput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7DEF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F6916B8(&qword_256EA2950);
  v0 = sub_23F70D578();
  return sub_23F70D618(v0, v1, v2, v3);
}

uint64_t sub_23F7DEF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23F741620(a1, a2, a3, (uint64_t (*)(uint64_t))sub_23F7DEF90);
}

void sub_23F7DEF90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256EAB558[0])
  {
    sub_23FB2ED38();
    v0 = sub_23FB2F65C();
    if (!v1)
      atomic_store(v0, qword_256EAB558);
  }
}

ValueMetadata *type metadata accessor for ToolExecutionSessionHydrateOutput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionHydrateOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolExecutionSessionHydrateInput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionHydrateInput.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolExecutionSessionResolveOutput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionResolveOutput.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport33ToolExecutionSessionHydrateOutputV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7DF058 + 4 * byte_23FB623D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F7DF078 + 4 * byte_23FB623D5[v4]))();
}

_BYTE *sub_23F7DF058(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F7DF078(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7DF080(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7DF088(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7DF090(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7DF098(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ToolExecutionSessionResolveInput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionResolveInput.CodingKeys;
}

unint64_t sub_23F7DF0B8()
{
  unint64_t result;

  result = qword_256EAB588;
  if (!qword_256EAB588)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62690, &type metadata for ToolExecutionSessionResolveInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB588);
  }
  return result;
}

unint64_t sub_23F7DF0F8()
{
  unint64_t result;

  result = qword_256EAB590;
  if (!qword_256EAB590)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62748, &type metadata for ToolExecutionSessionResolveOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB590);
  }
  return result;
}

unint64_t sub_23F7DF138()
{
  unint64_t result;

  result = qword_256EAB598;
  if (!qword_256EAB598)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62800, &type metadata for ToolExecutionSessionHydrateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB598);
  }
  return result;
}

unint64_t sub_23F7DF178()
{
  unint64_t result;

  result = qword_256EAB5A0;
  if (!qword_256EAB5A0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB628B8, &type metadata for ToolExecutionSessionHydrateOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5A0);
  }
  return result;
}

unint64_t sub_23F7DF1B8()
{
  unint64_t result;

  result = qword_256EAB5A8;
  if (!qword_256EAB5A8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62828, &type metadata for ToolExecutionSessionHydrateOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5A8);
  }
  return result;
}

unint64_t sub_23F7DF1F8()
{
  unint64_t result;

  result = qword_256EAB5B0;
  if (!qword_256EAB5B0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62850, &type metadata for ToolExecutionSessionHydrateOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5B0);
  }
  return result;
}

unint64_t sub_23F7DF238()
{
  unint64_t result;

  result = qword_256EAB5B8;
  if (!qword_256EAB5B8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62770, &type metadata for ToolExecutionSessionHydrateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5B8);
  }
  return result;
}

unint64_t sub_23F7DF278()
{
  unint64_t result;

  result = qword_256EAB5C0;
  if (!qword_256EAB5C0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62798, &type metadata for ToolExecutionSessionHydrateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5C0);
  }
  return result;
}

unint64_t sub_23F7DF2B8()
{
  unint64_t result;

  result = qword_256EAB5C8;
  if (!qword_256EAB5C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB626B8, &type metadata for ToolExecutionSessionResolveOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5C8);
  }
  return result;
}

unint64_t sub_23F7DF2F8()
{
  unint64_t result;

  result = qword_256EAB5D0;
  if (!qword_256EAB5D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB626E0, &type metadata for ToolExecutionSessionResolveOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5D0);
  }
  return result;
}

unint64_t sub_23F7DF338()
{
  unint64_t result;

  result = qword_256EAB5D8;
  if (!qword_256EAB5D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62600, &type metadata for ToolExecutionSessionResolveInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5D8);
  }
  return result;
}

unint64_t sub_23F7DF378()
{
  unint64_t result;

  result = qword_256EAB5E0;
  if (!qword_256EAB5E0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62628, &type metadata for ToolExecutionSessionResolveInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5E0);
  }
  return result;
}

uint64_t sub_23F7DF3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

uint64_t sub_23F7DF3D0()
{
  return sub_23FB2EC78();
}

uint64_t sub_23F7DF3E0()
{
  return sub_23FB2ED38();
}

uint64_t ToolQuery.query.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23F6B54F8();
  return v1;
}

uint64_t ToolQuery.appBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToolQuery.init(query:appBundleIds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t ToolQuery.Output.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23F7E0DC0();
  return sub_23F6B64B0(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t ToolQuery.Output.init(definition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23F7E0DC0();
  return sub_23F6B64B0(a2, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 32));
}

uint64_t sub_23F7DF494(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6974696E69666564 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23F7DF524()
{
  return 0x6974696E69666564;
}

uint64_t sub_23F7DF544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7DF494(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23F7DF56C()
{
  sub_23F7DF6BC();
  return sub_23FB2FD10();
}

uint64_t sub_23F7DF594()
{
  sub_23F7DF6BC();
  return sub_23FB2FD1C();
}

uint64_t ToolQuery.Output.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_23F6916B8(&qword_256EAB5E8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6BD134();
  v6 = v5 - v4;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7DF6BC();
  sub_23FB2FCC8();
  sub_23FB2DC28();
  sub_23F7DF8BC(&qword_256EAB5F8, MEMORY[0x24BE57580]);
  sub_23FB2FB18();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
}

unint64_t sub_23F7DF6BC()
{
  unint64_t result;

  result = qword_256EAB5F0;
  if (!qword_256EAB5F0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62D6C, &type metadata for ToolQuery.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB5F0);
  }
  return result;
}

void ToolQuery.Output.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = sub_23FB2DC28();
  v15 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6BD134();
  v17 = v5 - v4;
  v6 = sub_23F6916B8(&qword_256EAB600);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6BD134();
  v10 = v9 - v8;
  v11 = type metadata accessor for ToolQuery.Output();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6BD134();
  v14 = v13 - v12;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7DF6BC();
  sub_23FB2FCB0();
  if (!v2)
  {
    sub_23F7DF8BC(&qword_256EAB608, MEMORY[0x24BE57598]);
    sub_23FB2FA7C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v14, v17, v18);
    sub_23F7DF8FC(v14, a2);
  }
  sub_23F6B6E68();
  sub_23F6B5100();
}

uint64_t type metadata accessor for ToolQuery.Output()
{
  uint64_t result;

  result = qword_256EAB690;
  if (!qword_256EAB690)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23F7DF8BC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23FB2DC28();
    result = MEMORY[0x242674E5C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23F7DF8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolQuery.Output();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23F7DF940(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ToolQuery.Output.init(from:)(a1, a2);
}

uint64_t sub_23F7DF954(_QWORD *a1)
{
  return ToolQuery.Output.encode(to:)(a1);
}

uint64_t static ToolQuery.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_23FB2FB78(), result = 0, (v5 & 1) != 0))
  {
    if (v2)
    {
      if (v3)
      {
        sub_23F6B5508();
        v7 = sub_23F6B54F8();
        v8 = sub_23F7E0090(v7, v3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t ToolQuery.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  if (!v3)
    return sub_23FB2FC74();
  sub_23FB2FC74();
  sub_23F6B5508();
  sub_23F7E0540(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7DFA9C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C646E7542707061 && a2 == 0xEC00000073644965)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_23FB2FB78();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23F7DFB98(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C646E7542707061;
  else
    return 0x7972657571;
}

uint64_t sub_23F7DFBD4()
{
  char *v0;

  return sub_23F7DFB98(*v0);
}

uint64_t sub_23F7DFBDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7DFA9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7DFC00()
{
  sub_23F7E06D8();
  return sub_23FB2FD10();
}

uint64_t sub_23F7DFC28()
{
  sub_23F7E06D8();
  return sub_23FB2FD1C();
}

void ToolQuery.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_23F6916B8(&qword_256EAB610);
  v7 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6BD134();
  v6 = v5 - v4;
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7E06D8();
  sub_23FB2FCC8();
  sub_23FB2FADC();
  if (!v1)
  {
    sub_23F6916B8(&qword_256EA98B8);
    sub_23F7E0714(&qword_256EAB620, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1700]);
    sub_23FB2FAD0();
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  sub_23F6B5100();
}

uint64_t ToolQuery.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 16);
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  sub_23F6B5908();
  sub_23FB2FC74();
  if (v1)
  {
    sub_23F6B5508();
    sub_23F7E0540((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_23FB2FC8C();
}

void ToolQuery.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_23F6916B8(&qword_256EAB628);
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6BD134();
  sub_23F6ADC98(a1, a1[3]);
  sub_23F7E06D8();
  sub_23FB2FCB0();
  if (v2)
  {
    sub_23F6B6E68();
  }
  else
  {
    v6 = sub_23FB2FA40();
    v8 = v7;
    sub_23F6916B8(&qword_256EA98B8);
    sub_23F7E0714(&qword_256EAA2C0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1720]);
    swift_bridgeObjectRetain();
    sub_23FB2FA34();
    sub_23F7E0DB0();
    *a2 = v6;
    a2[1] = v8;
    a2[2] = v9;
    sub_23F6B54F8();
    sub_23F6B6E68();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23F6B5100();
}

void sub_23F7DFFC8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ToolQuery.init(from:)(a1, a2);
}

void sub_23F7DFFDC(_QWORD *a1)
{
  ToolQuery.encode(to:)(a1);
}

uint64_t sub_23F7DFFF8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 16);
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  sub_23FB2FC74();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_23F7E0540((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_23FB2FC8C();
}

uint64_t sub_23F7E0090(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t j;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 56);
  v30 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v4;
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  if ((v6 & v4) == 0)
    goto LABEL_8;
LABEL_7:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v32 = v3;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = result;
    v16 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    sub_23FB2FC5C();
    swift_bridgeObjectRetain();
    sub_23FB2F200();
    v19 = sub_23FB2FC8C();
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_39;
    v22 = *(_QWORD *)(a2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (!v24 && (sub_23FB2FB78() & 1) == 0)
    {
      v25 = ~v20;
      for (j = v21 + 1; ; j = v27 + 1)
      {
        v27 = j & v25;
        if (((*(_QWORD *)(v8 + (((j & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v22 + 16 * v27);
        v29 = *v28 == v18 && v28[1] == v17;
        if (v29 || (sub_23FB2FB78() & 1) != 0)
          goto LABEL_28;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    result = v15;
    v3 = v32;
    if (v7)
      goto LABEL_7;
LABEL_8:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v31)
      return 1;
    v12 = *(_QWORD *)(v30 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      v13 = v3 + 2;
      if (v3 + 2 >= v31)
        return 1;
      v12 = *(_QWORD *)(v30 + 8 * v13);
      if (!v12)
      {
        v13 = v3 + 3;
        if (v3 + 3 >= v31)
          return 1;
        v12 = *(_QWORD *)(v30 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_21:
    v7 = (v12 - 1) & v12;
    v32 = v13;
  }
  v14 = v3 + 4;
  if (v3 + 4 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v14);
  if (v12)
  {
    v13 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v31)
      return 1;
    v12 = *(_QWORD *)(v30 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_21;
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_23F7E0318(uint64_t a1, uint64_t a2)
{
  char v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 56);
  v24 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v25 = (unint64_t)(v6 + 63) >> 6;
  if ((v7 & v5) == 0)
    goto LABEL_8;
LABEL_7:
  for (v8 &= v8 - 1; ; v8 = (v10 - 1) & v10)
  {
    sub_23FB2FC5C();
    swift_bridgeObjectRetain();
    sub_23F6AD3EC();
    v18 = sub_23FB2FC8C();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    sub_23F7E0DEC();
    if ((v21 & 1) == 0)
      goto LABEL_36;
    sub_23F6B54F8();
    sub_23F69DB94();
    sub_23F7E0DC8();
    if ((v2 & 1) == 0)
    {
      v22 = ~v19;
      while (1)
      {
        v20 = (v20 + 1) & v22;
        sub_23F7E0DEC();
        if ((v23 & 1) == 0)
          break;
        sub_23F6B54F8();
        sub_23F69DB94();
        sub_23F7E0DC8();
        if ((v2 & 1) != 0)
          goto LABEL_33;
      }
LABEL_36:
      sub_23F6B5908();
      return;
    }
LABEL_33:
    sub_23F6B5908();
    if (v8)
      goto LABEL_7;
LABEL_8:
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v9 >= v25)
      return;
    v10 = *(_QWORD *)(v24 + 8 * v9);
    ++v4;
    if (!v10)
    {
      v4 = v9 + 1;
      sub_23F7E0DE0();
      if (v11 == v12)
        return;
      sub_23F7E0DD4();
      if (!v10)
      {
        v4 = v13 + 2;
        sub_23F7E0DE0();
        if (v11 == v12)
          return;
        sub_23F7E0DD4();
        if (!v10)
        {
          v4 = v14 + 3;
          sub_23F7E0DE0();
          if (v11 == v12)
            return;
          sub_23F7E0DD4();
          if (!v10)
            break;
        }
      }
    }
LABEL_27:
    ;
  }
  v16 = v15 + 4;
  if (v16 >= v25)
    return;
  v10 = *(_QWORD *)(v24 + 8 * v16);
  if (v10)
  {
    v4 = v16;
    goto LABEL_27;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    sub_23F7E0DE0();
    if (v11 == v12)
      return;
    sub_23F7E0DD4();
    v16 = v17 + 1;
    if (v10)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_23F7E0540(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;

  sub_23FB2FC8C();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  for (v6 &= v6 - 1; ; v6 = (v12 - 1) & v12)
  {
    sub_23FB2FC5C();
    swift_bridgeObjectRetain();
    sub_23FB2F200();
    v14 = sub_23FB2FC8C();
    result = swift_bridgeObjectRelease();
    v9 ^= v14;
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_23FB2FC68();
    }
    v12 = *(_QWORD *)(v3 + 8 * v10);
    if (!v12)
      break;
LABEL_14:
    ;
  }
  v13 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    ++v10;
    goto LABEL_14;
  }
  while (1)
  {
    v10 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v12 = *(_QWORD *)(v3 + 8 * v10);
    ++v13;
    if (v12)
      goto LABEL_14;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

unint64_t sub_23F7E06D8()
{
  unint64_t result;

  result = qword_256EAB618;
  if (!qword_256EAB618)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62D1C, &type metadata for ToolQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB618);
  }
  return result;
}

uint64_t sub_23F7E0714(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_23F6AE310(&qword_256EA98B8);
    v8 = a2;
    result = MEMORY[0x242674E5C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23F7E0778()
{
  unint64_t result;

  result = qword_256EAB630;
  if (!qword_256EAB630)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for ToolQuery, &type metadata for ToolQuery);
    atomic_store(result, (unint64_t *)&qword_256EAB630);
  }
  return result;
}

_QWORD *sub_23F7E07B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_23F6B54F8();
  return a1;
}

_QWORD *assignWithCopy for ToolQuery(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ToolQuery()
{
  return &type metadata for ToolQuery;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2DC28();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for ToolQuery.Output(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23FB2DC28();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2DC28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2DC28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2DC28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23FB2DC28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolQuery.Output()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7E09F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F7E0DC0();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ToolQuery.Output()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23F7E0A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F7E0DC0();
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a1, a2, a2, v4);
}

uint64_t sub_23F7E0A60()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23FB2DC28();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ToolQuery.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23F7E0B14 + 4 * byte_23FB62A25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23F7E0B48 + 4 * byte_23FB62A20[v4]))();
}

uint64_t sub_23F7E0B48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7E0B50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23F7E0B58);
  return result;
}

uint64_t sub_23F7E0B64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23F7E0B6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23F7E0B70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23F7E0B78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolQuery.CodingKeys()
{
  return &type metadata for ToolQuery.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ToolQuery.Output.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7E0BD4 + 4 * byte_23FB62A2A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F7E0BF4 + 4 * byte_23FB62A2F[v4]))();
}

_BYTE *sub_23F7E0BD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F7E0BF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7E0BFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7E0C04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7E0C0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7E0C14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ToolQuery.Output.CodingKeys()
{
  return &type metadata for ToolQuery.Output.CodingKeys;
}

unint64_t sub_23F7E0C34()
{
  unint64_t result;

  result = qword_256EAB6C8;
  if (!qword_256EAB6C8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62C3C, &type metadata for ToolQuery.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB6C8);
  }
  return result;
}

unint64_t sub_23F7E0C74()
{
  unint64_t result;

  result = qword_256EAB6D0;
  if (!qword_256EAB6D0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62CF4, &type metadata for ToolQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB6D0);
  }
  return result;
}

unint64_t sub_23F7E0CB4()
{
  unint64_t result;

  result = qword_256EAB6D8;
  if (!qword_256EAB6D8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62C64, &type metadata for ToolQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB6D8);
  }
  return result;
}

unint64_t sub_23F7E0CF4()
{
  unint64_t result;

  result = qword_256EAB6E0;
  if (!qword_256EAB6E0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62C8C, &type metadata for ToolQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB6E0);
  }
  return result;
}

unint64_t sub_23F7E0D34()
{
  unint64_t result;

  result = qword_256EAB6E8;
  if (!qword_256EAB6E8)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62BAC, &type metadata for ToolQuery.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB6E8);
  }
  return result;
}

unint64_t sub_23F7E0D74()
{
  unint64_t result;

  result = qword_256EAB6F0;
  if (!qword_256EAB6F0)
  {
    result = MEMORY[0x242674E5C](&unk_23FB62BD4, &type metadata for ToolQuery.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256EAB6F0);
  }
  return result;
}

uint64_t sub_23F7E0DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23F7E0DC0()
{
  return sub_23FB2DC28();
}

uint64_t sub_23F7E0DC8()
{
  return swift_bridgeObjectRelease();
}

void sub_23F7E0E00()
{
  sub_23F7E0E0C();
}

void sub_23F7E0E0C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  sub_23F6B50E8();
  v28 = v1;
  sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B59F8();
  sub_23F6916B8(&qword_256EAB738);
  sub_23F6D3588();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (uint64_t *)((char *)&v27 - v7);
  swift_bridgeObjectRetain();
  sub_23F7E3AF8();
  v10 = v9;
  v11 = 0;
  v12 = *(_QWORD *)(v9 + 16);
  while (1)
  {
    if (v11 == v12)
    {
      v13 = sub_23F6B5D98();
      sub_23F78F2E4((uint64_t)v6, 1, v14, v13);
      v11 = v12;
      goto LABEL_6;
    }
    if (v11 >= *(_QWORD *)(v10 + 16))
      break;
    v15 = sub_23F6B5D98();
    sub_23F6BC450();
    sub_23F6B6474(v10 + v16 + *(_QWORD *)(v17 + 72) * v11++, (uint64_t)v6);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v6, 0, 1, v15);
LABEL_6:
    sub_23F6B4EC0((uint64_t)v6, (uint64_t)v8, &qword_256EAB738);
    v18 = sub_23F6B5D98();
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v8, 1, v18) == 1)
    {
      swift_bridgeObjectRelease();
      v21 = sub_23F6916B8(&qword_256EA6538);
      v22 = (uint64_t)v28;
      v23 = 1;
LABEL_11:
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v22, v23, 1, v21);
      sub_23F693DDC();
      return;
    }
    v19 = (uint64_t)v8 + *(int *)(v18 + 48);
    v20 = *v8;
    sub_23F6F594C(v19, v0, type metadata accessor for Session.Event);
    sub_23F6B68CC();
    if ((sub_23FB2C4A0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v24 = sub_23F6916B8(&qword_256EA6538);
      v25 = v28;
      v26 = (uint64_t)v28 + *(int *)(v24 + 48);
      *v28 = v20;
      sub_23F6F594C(v0, v26, type metadata accessor for Session.Event);
      v22 = (uint64_t)v25;
      v23 = 0;
      v21 = v24;
      goto LABEL_11;
    }
    sub_23F7E5310(v0);
  }
  __break(1u);
}

void sub_23F7E1024(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t (*v40)(char *);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v2 = sub_23F6916B8(&qword_256EA64A0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v39 = (uint64_t *)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = sub_23F6916B8(&qword_256EA6530);
  MEMORY[0x24BDAC7A8](v42);
  v41 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_23F6916B8(&qword_256EA7958);
  v5 = MEMORY[0x24BDAC7A8](v43);
  v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v32 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v35 = (uint64_t)&v32 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v38 = (uint64_t)&v32 - v13;
  v49 = MEMORY[0x24BEE4AF8];
  sub_23F712528();
  v47 = *a1;
  v14 = *((_QWORD *)a1 + 2);
  v40 = (uint64_t (*)(char *))*((_QWORD *)a1 + 3);
  v48 = v14;
  v15 = v47;
  v16 = *((_QWORD *)a1 + 4);
  v46 = 0;
  sub_23F7E522C((uint64_t)&v47);
  v44 = v16;
  swift_retain();
  v17 = 0;
  v45 = v15;
  do
  {
    v18 = v45;
    if (v45 == *((_QWORD *)&v15 + 1))
      break;
    while (1)
    {
      if (*((uint64_t *)&v15 + 1) < (uint64_t)v15)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return;
      }
      if (v45 < (uint64_t)v15)
        goto LABEL_18;
      if (v18 >= *((uint64_t *)&v15 + 1))
        goto LABEL_19;
      v19 = *(_QWORD *)(v14 + 16);
      if (v17 == v19)
        goto LABEL_16;
      if (v17 >= v19)
        goto LABEL_20;
      v20 = type metadata accessor for Session.Event(0);
      v21 = (uint64_t)&v41[*(int *)(v42 + 48)];
      sub_23F6F5920(v14+ ((*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v17, v21, type metadata accessor for Session.Event);
      v22 = (uint64_t)v7 + *(int *)(v43 + 48);
      *v7 = v18;
      sub_23F6F594C(v21, v22, type metadata accessor for Session.Event);
      sub_23F6B4EC0((uint64_t)v7, (uint64_t)v10, &qword_256EA7958);
      if ((v40(v10) & 1) != 0)
        break;
      ++v18;
      sub_23F6B4F84((uint64_t)v10, &qword_256EA7958);
      ++v17;
      if (*((_QWORD *)&v15 + 1) == v18)
        goto LABEL_16;
    }
    v23 = v35;
    sub_23F6B4EC0((uint64_t)v10, v35, &qword_256EA7958);
    v24 = v23;
    v25 = v38;
    sub_23F6B4EC0(v24, v38, &qword_256EA7958);
    v26 = (uint64_t *)v25;
    v27 = v25 + *(int *)(v43 + 48);
    v33 = (char *)v39 + *(int *)(v37 + 48);
    v34 = (uint64_t)v39 + *(int *)(v37 + 64);
    v45 = *v26;
    v28 = sub_23FB2C4B8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v33, v27, v28);
    sub_23F6F5920(v27, v34, type metadata accessor for Session.Event);
    *v39 = v45;
    sub_23F6B4F84(v38, &qword_256EA7958);
    v29 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23F712528();
      v29 = v49;
    }
    v30 = *(_QWORD *)(v29 + 16);
    v31 = v30 + 1;
    if (v30 >= *(_QWORD *)(v29 + 24) >> 1)
    {
      v45 = v30 + 1;
      sub_23F712528();
      v31 = v45;
      v29 = v49;
    }
    v45 = v18 + 1;
    ++v17;
    *(_QWORD *)(v29 + 16) = v31;
    sub_23F6B4EC0((uint64_t)v39, v29+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v30, &qword_256EA64A0);
  }
  while ((v46 & 1) == 0);
LABEL_16:
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_23F7E1454()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    sub_23F7E4C48();
    if (!v1)
      sub_23F7E3F7C(*(_QWORD *)(*(_QWORD *)v0 + 16) - 1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23F7E148C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_5:
      sub_23FB2F224();
      return sub_23FB2F26C();
    }
    __break(1u);
  }
  if ((v1 & 0xF00000000000000) != 0)
    goto LABEL_5;
  __break(1u);
  return result;
}

void Session.Transcript.latestQueryEvent()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *);
  uint64_t v20;

  sub_23F6916B8(&qword_256EAB6F8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  v5 = *(_QWORD *)(v1 + *(int *)(sub_23F7E527C() + 32));
  v6 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = v6;
  v18 = v5;
  v19 = sub_23F7E3380;
  v20 = 0;
  sub_23F6B54F8();
  sub_23F7E1024(&v17);
  v8 = v7;
  sub_23F7A13BC(v7, v2);
  sub_23F693DFC();
  swift_bridgeObjectRelease();
  v9 = sub_23F6916B8(&qword_256EA64A0);
  sub_23F7E5330(v9);
  if (v10)
  {
    sub_23F6B4F84(v2, &qword_256EAB6F8);
    v11 = sub_23F7E52BC();
    sub_23F78F2E4(a1, 1, v12, v11);
  }
  else
  {
    v13 = v2 + *(int *)(v8 + 48);
    sub_23F6F594C(v2 + *(int *)(v8 + 64), a1, type metadata accessor for Session.Event);
    v14 = sub_23F7E52BC();
    sub_23F78F2E4(a1, 0, v15, v14);
    v16 = sub_23FB2C4B8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v13, v16);
  }
  sub_23F694C84();
}

Swift::String_optional __swiftcall Session.Transcript.latestQuery()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String_optional result;
  __int128 v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;

  sub_23F6916B8(&qword_256EAB6F8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  v3 = *(_QWORD *)(v0 + *(int *)(sub_23F7E527C() + 32));
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = v4;
  v14 = v3;
  v15 = sub_23F7E3380;
  v16 = 0;
  sub_23F6B54F8();
  sub_23F7E1024(&v13);
  sub_23F7A13BC(v5, v1);
  swift_bridgeObjectRelease();
  sub_23F7E39BC(v1);
  v7 = v6;
  v9 = v8;
  sub_23F6B4F84(v1, &qword_256EAB6F8);
  sub_23F693DFC();
  if (v9)
    v10 = v7;
  else
    v10 = 0;
  v11 = v9;
  result.value._object = v11;
  result.value._countAndFlagsBits = v10;
  return result;
}

void Session.Transcript.event(forId:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23F6916B8(&qword_256EA6528);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F7E527C();
  sub_23F7E52C4();
  sub_23F7E0E0C();
  sub_23F693DFC();
  v6 = sub_23F6916B8(&qword_256EA6538);
  sub_23F7E5330(v6);
  if (v7)
  {
    sub_23F6B4F84(v2, &qword_256EA6528);
    v8 = 1;
  }
  else
  {
    sub_23F6F594C(v2 + *(int *)(a1 + 48), a2, type metadata accessor for Session.Event);
    v8 = 0;
  }
  v9 = sub_23F7E52BC();
  sub_23F78F2E4(a2, v8, v10, v9);
  sub_23F694C84();
}

Swift::OpaquePointer_optional __swiftcall Session.Transcript.latestSpeechQuery()()
{
  void *v0;
  Swift::Bool v1;
  Swift::OpaquePointer_optional result;

  sub_23F7E1A74((void (*)(uint64_t))sub_23F7E1794);
  result.value._rawValue = v0;
  result.is_nil = v1;
  return result;
}

uint64_t sub_23F7E1794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD *);
  uint64_t v35;

  v2 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_23F6916B8(&qword_256EA64A0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t *)((char *)&v31 - v9);
  v11 = sub_23F6916B8(&qword_256EAB6F8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v32 = 0;
  *((_QWORD *)&v32 + 1) = v17;
  v33 = a1;
  v34 = sub_23F7E3380;
  v35 = 0;
  swift_bridgeObjectRetain();
  sub_23F7E1024(&v32);
  v19 = v18;
  swift_bridgeObjectRelease();
  sub_23F7A13BC(v19, (uint64_t)v16);
  swift_bridgeObjectRelease();
  sub_23F6B4F58((uint64_t)v16, (uint64_t)v14, &qword_256EAB6F8);
  v20 = 0;
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v14, 1, v5) != 1)
  {
    sub_23F6B4EC0((uint64_t)v14, (uint64_t)v10, &qword_256EA64A0);
    v21 = *(int *)(v5 + 48);
    v22 = (char *)v8 + v21;
    v23 = *(int *)(v5 + 64);
    v24 = (uint64_t)v8 + v23;
    v25 = (char *)v10 + v21;
    v26 = (uint64_t)v10 + v23;
    *v8 = *v10;
    v27 = sub_23FB2C4B8();
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v22, v25, v27);
    sub_23F6F5920(v26, v24, type metadata accessor for Session.Event);
    v29 = type metadata accessor for Session.Event(0);
    sub_23F6F5920(v24 + *(int *)(v29 + 28), (uint64_t)v4, type metadata accessor for Session.Event.Payload);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v20 = *v4;
      sub_23F6D3508(v24, type metadata accessor for Session.Event);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v27);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23F6D3508((uint64_t)v4, type metadata accessor for Session.Event.Payload);
      sub_23F6D3508(v24, type metadata accessor for Session.Event);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v27);
      v20 = 0;
    }
    sub_23F6B4F84((uint64_t)v10, &qword_256EA64A0);
  }
  sub_23F6B4F84((uint64_t)v16, &qword_256EAB6F8);
  return v20;
}

Swift::Int __swiftcall Session.Transcript.countClientSentEvents()()
{
  Swift::Int result;

  sub_23F7E1A74(sub_23F7E1AA4);
  return result;
}

void sub_23F7E1A74(void (*a1)(uint64_t))
{
  uint64_t v2;

  sub_23F75E73C();
  v2 = sub_23F7E52C4();
  a1(v2);
  sub_23F693DFC();
  sub_23F694CC8();
}

void sub_23F7E1AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v2 = type metadata accessor for Session.Event(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v28 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return;
  v31 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = a1 + v31;
  v11 = *(_QWORD *)(v6 + 72);
  v28 = a1;
  swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    sub_23F6F5920(v10, (uint64_t)v8, type metadata accessor for Session.Event);
    v13 = &v8[*(int *)(v2 + 52)];
    v14 = *((_QWORD *)v13 + 1);
    if (v14)
      break;
    sub_23F6D3508((uint64_t)v8, type metadata accessor for Session.Event);
LABEL_11:
    ++v12;
    v10 += v11;
    if (v9 == v12)
      goto LABEL_40;
  }
  if (*(_QWORD *)v13 != 0x746E65696C63 || v14 != 0xE600000000000000)
  {
    v16 = sub_23FB2FB78();
    sub_23F6D3508((uint64_t)v8, type metadata accessor for Session.Event);
    if ((v16 & 1) != 0)
      goto LABEL_15;
    goto LABEL_11;
  }
  sub_23F6D3508((uint64_t)v8, type metadata accessor for Session.Event);
LABEL_15:
  if (v9 >= v12)
  {
    if (v9 == v12)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      return;
    }
    v17 = 1;
    v18 = v9;
  }
  else
  {
    v17 = -1;
    v18 = v12;
    v12 = v9;
  }
  v19 = 0;
  v31 += v28;
  v29 = v18;
  v30 = v17;
  while (1)
  {
    v20 = __OFADD__(v19, v17);
    v19 += v17;
    if (v20)
      break;
    if (v12 == v9)
      goto LABEL_44;
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_45;
    v12 = v9;
    if (v21 != v9)
    {
      v22 = v31 + v11 * v21;
      v12 = v21;
      while (v12 < v9)
      {
        sub_23F6F5920(v22, (uint64_t)v5, type metadata accessor for Session.Event);
        v23 = &v5[*(int *)(v2 + 52)];
        v24 = *((_QWORD *)v23 + 1);
        if (v24)
        {
          if (*(_QWORD *)v23 == 0x746E65696C63 && v24 == 0xE600000000000000)
          {
            sub_23F6D3508((uint64_t)v5, type metadata accessor for Session.Event);
            goto LABEL_38;
          }
          v26 = sub_23FB2FB78();
          sub_23F6D3508((uint64_t)v5, type metadata accessor for Session.Event);
          if ((v26 & 1) != 0)
            goto LABEL_38;
        }
        else
        {
          sub_23F6D3508((uint64_t)v5, type metadata accessor for Session.Event);
        }
        v27 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_42;
        ++v12;
        v22 += v11;
        if (v27 == v9)
        {
          v12 = v9;
LABEL_38:
          v18 = v29;
          v17 = v30;
          goto LABEL_39;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      break;
    }
LABEL_39:
    if (v12 == v18)
      goto LABEL_40;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

Swift::String_optional __swiftcall Session.Transcript.latestClientIdentifier()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String_optional result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  sub_23F6B50E8();
  type metadata accessor for Session.Event.Payload(0);
  sub_23F6D3588();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v25 - v8;
  sub_23F7E52BC();
  sub_23F7E52FC();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(v0 + *(int *)(sub_23F75E73C() + 32));
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v26 = v13;
    v27 = v9;
    v16 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v17 = *(_QWORD *)(v1 + 72);
    sub_23F7E5324();
    v18 = v14 + v16 + v17 * (v15 - 1);
    v19 = -v17;
    v20 = v15;
    v28 = v15;
    while (1)
    {
      sub_23F6F5920(v18, v3, type metadata accessor for Session.Event);
      sub_23F6F5920(v3 + *(int *)(v2 + 28), (uint64_t)v7, type metadata accessor for Session.Event.Payload);
      if (swift_getEnumCaseMultiPayload() == 11)
        break;
      --v20;
      swift_bridgeObjectRetain();
      sub_23F6D3508((uint64_t)v7, type metadata accessor for Session.Event.Payload);
      sub_23F7E5310(v3);
      sub_23F693E04();
      v18 += v19;
      if (!v20)
        goto LABEL_10;
    }
    v21 = *((_QWORD *)v7 + 1);
    sub_23F6D3508(v3, type metadata accessor for Session.Event);
    swift_bridgeObjectRelease();
    if (v20 > v28)
    {
      __break(1u);
    }
    else
    {
      v21 = (uint64_t)v26;
      sub_23F6F5920(v18, (uint64_t)v26, type metadata accessor for Session.Event);
      v20 = (uint64_t)v27;
      sub_23F6F5920(v21 + *(int *)(v2 + 28), (uint64_t)v27, type metadata accessor for Session.Event.Payload);
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_23F6D3508(v21, type metadata accessor for Session.Event);
        goto LABEL_10;
      }
    }
    sub_23F6D3508(v20, type metadata accessor for Session.Event.Payload);
    sub_23F6D3508(v21, type metadata accessor for Session.Event);
    __break(1u);
    goto _$s30IntelligenceFlowPlannerSupport7SessionO10TranscriptV22latestClientIdentifierSSSgyF;
  }
  sub_23F7E5324();
LABEL_10:
  swift_bridgeObjectRelease_n();
  sub_23F6B68CC();
  sub_23F693DDC();
_$s30IntelligenceFlowPlannerSupport7SessionO10TranscriptV22latestClientIdentifierSSSgyF:
  result.value._object = v23;
  result.value._countAndFlagsBits = v22;
  return result;
}

void __swiftcall Session.Transcript.latestPlan()(IntelligenceFlowPlannerSupport::Session::Plan_optional *__return_ptr retstr)
{
  sub_23F75E73C();
  sub_23F7E52C4();
  sub_23F7E1FDC((uint64_t)retstr);
  swift_bridgeObjectRelease();
}

double sub_23F7E1FDC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  double result;
  __int128 v6;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;

  sub_23F7E3C90((uint64_t)v7);
  v2 = v9;
  if (v9)
  {
    v3 = v10;
    v4 = v13;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v2;
    *(_QWORD *)(a1 + 16) = v3;
    result = *(double *)&v11;
    v6 = v12;
    *(_OWORD *)(a1 + 24) = v11;
    *(_OWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 56) = v4;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a1 + 41) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t Session.Transcript.clientActionStepExists(id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  _QWORD v16[12];
  uint64_t v17;
  uint64_t v18;

  sub_23F6B50E8();
  v17 = v2;
  v18 = v3;
  v16[1] = type metadata accessor for Session.Event.Payload(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B6B5C();
  v5 = sub_23F7E52BC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + *(int *)(sub_23F75E73C() + 32)) + 16);
  if (!v9)
    return 0;
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = *(_QWORD *)(v6 + 72);
  v16[0] = swift_bridgeObjectRetain();
  v12 = v16[0] + v10 + v11 * (v9 - 1);
  do
  {
    sub_23F6F5920(v12, (uint64_t)v8, type metadata accessor for Session.Event);
    sub_23F7D29DC();
    if ((sub_23FB2C4A0() & 1) != 0)
    {
      sub_23F6F5920((uint64_t)&v8[*(int *)(v5 + 28)], v1, type metadata accessor for Session.Event.Payload);
      sub_23F7E5354();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_23F7E5310(v1);
      if (EnumCaseMultiPayload == 7)
      {
        v14 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      sub_23F7E5354();
    }
    v12 -= v11;
    --v9;
  }
  while (v9);
  v14 = 0;
LABEL_9:
  swift_bridgeObjectRelease();
  return v14;
}

void TypedValue.programTraceValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  int v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;

  sub_23F6B50E8();
  v111 = v0;
  v4 = sub_23FB2E7F8();
  v97 = *(_QWORD *)(v4 - 8);
  v98 = v4;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B51A4();
  v96 = v6;
  sub_23F6D398C();
  v7 = sub_23FB2EBF4();
  v106 = *(_QWORD *)(v7 - 8);
  v107 = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  v105 = v9;
  sub_23F6D398C();
  v92 = sub_23FB2C1C4();
  v91 = *(_QWORD *)(v92 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v90 = v11;
  sub_23F6D398C();
  v103 = sub_23FB2C428();
  v101 = *(_QWORD *)(v103 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B51A4();
  v99 = v13;
  sub_23F6D398C();
  v104 = sub_23FB2C470();
  v102 = *(_QWORD *)(v104 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B51A4();
  v100 = v15;
  sub_23F6D398C();
  v16 = sub_23FB2C320();
  v94 = *(_QWORD *)(v16 - 8);
  v95 = v16;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B51A4();
  v93 = v18;
  sub_23F6D398C();
  sub_23FB2ECE4();
  sub_23F7E52FC();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F693E0C();
  v108 = v20;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v90 - v22;
  v24 = sub_23F7E5318();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  sub_23F6B52C8();
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (uint64_t *)((char *)&v90 - v28);
  v30 = MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v90 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v90 - v33;
  v35 = *(_QWORD *)(v25 + 16);
  sub_23F7E52A8((uint64_t)&v90 - v33, v111);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v34, v24);
  v37 = *MEMORY[0x24BEB9A00];
  v110 = v25;
  v111 = v24;
  v109 = v34;
  if (v36 == v37)
  {
    sub_23F7E52A8((uint64_t)v32, (uint64_t)v34);
    sub_23F6B6420((uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 96));
    v38 = swift_projectBox();
    v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v38, v2);
    if (v39 == *MEMORY[0x24BEB9928])
    {
      sub_23F75E710((uint64_t)v23, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      sub_23F6F1CB8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96));
      sub_23F7E52D4();
      goto LABEL_26;
    }
    v42 = v39;
    if (v39 == *MEMORY[0x24BEB9948])
    {
      sub_23F7E5254();
      sub_23F7E526C();
      sub_23FB2F518();
LABEL_25:
      sub_23F7E52D4();
LABEL_26:
      v41 = v110;
LABEL_27:
      v40 = (uint64_t)v109;
      goto LABEL_28;
    }
    if (v39 == *MEMORY[0x24BEB9958])
    {
      sub_23F7E5254();
      sub_23F7E526C();
      String.quoted.getter();
      sub_23F7E52D4();
      sub_23F693E04();
      goto LABEL_26;
    }
    if (v39 == *MEMORY[0x24BEB9930])
    {
      sub_23F7E5254();
      sub_23F7E526C();
      v59 = v102;
      v60 = v100;
      v61 = v104;
      sub_23F75E710(v100, v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32));
      v62 = v99;
      sub_23F7E2B8C(v99);
      sub_23FB2C3E0();
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v62, v103);
      String.quoted.getter();
      sub_23F6B5908();
      v63 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v64 = v60;
      v65 = v61;
LABEL_24:
      v63(v64, v65);
      goto LABEL_25;
    }
    if (v39 == *MEMORY[0x24BEB9900])
      goto LABEL_25;
    if (v39 == *MEMORY[0x24BEB9920])
    {
      sub_23F7E5254();
      sub_23F7E526C();
      v68 = sub_23F7D29DC();
      v69(v68);
      sub_23FB2C2B4();
      String.quoted.getter();
      sub_23F6B5908();
      v64 = sub_23F7D29DC();
      goto LABEL_24;
    }
    if (v39 == *MEMORY[0x24BEB9908])
    {
      sub_23F7E5254();
      sub_23F7E526C();
      v80 = v91;
      v81 = v90;
      v82 = sub_23F7D29DC();
      v83 = v92;
      v84(v82);
      sub_23F7E4064();
      sub_23FB2C29C();
      String.quoted.getter();
      sub_23F693E04();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v83);
      goto LABEL_25;
    }
    v85 = *MEMORY[0x24BEB9940];
    sub_23F7E52D4();
    v41 = v110;
    v40 = (uint64_t)v109;
    if (v42 != v85)
      goto LABEL_63;
LABEL_28:
    sub_23F6B6420(v40, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
    sub_23F693DDC();
    return;
  }
  if (v36 == *MEMORY[0x24BEB9990])
  {
    v40 = (uint64_t)v109;
    sub_23F7E52A8(v3, (uint64_t)v109);
    v41 = v110;
    sub_23F7E5298();
    sub_23F7E52F4();
    goto LABEL_28;
  }
  v41 = v110;
  v40 = (uint64_t)v109;
  if (v36 == *MEMORY[0x24BEB99E0])
  {
LABEL_34:
    sub_23F7E52A8(v3, (uint64_t)v109);
    sub_23F7E5298();
    sub_23F7E52F4();
    goto LABEL_28;
  }
  if (v36 != *MEMORY[0x24BEB9988])
  {
    if (v36 != *MEMORY[0x24BEB99D8] && v36 != *MEMORY[0x24BEB9A08])
    {
LABEL_63:
      v86 = v96;
      sub_23FB2E3CC();
      v87 = sub_23FB2E7E0();
      v88 = sub_23FB2F5F0();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)sub_23F7595E8();
        *(_WORD *)v89 = 0;
        _os_log_impl(&dword_23F68F000, v87, v88, "Unknown default - returning null", v89, 2u);
        sub_23F693DD0();
      }

      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v86, v98);
      goto LABEL_28;
    }
    goto LABEL_34;
  }
  sub_23F7E52A8((uint64_t)v29, (uint64_t)v109);
  sub_23F6B6420((uint64_t)v29, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 96));
  v43 = *v29;
  v44 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16))(v105, v44, v107);
  v45 = *(_QWORD *)(sub_23FB2EBE8() + 16);
  swift_bridgeObjectRelease();
  if (!v45)
  {
    v66 = sub_23F6B68CC();
    v67(v66);
    swift_release();
    goto LABEL_28;
  }
  v108 = v43;
  v113 = 0x5B7473694C22;
  v114 = 0xE600000000000000;
  v46 = sub_23FB2EBE8();
  v47 = *(_QWORD *)(v46 + 16);
  if (v47)
  {
    v112 = MEMORY[0x24BEE4AF8];
    sub_23F711194(0, v47, 0);
    v48 = *(unsigned __int8 *)(v41 + 80);
    v104 = v46;
    v49 = v46 + ((v48 + 32) & ~v48);
    v50 = *(_QWORD *)(v41 + 72);
    do
    {
      v51 = sub_23F7E52A8(v3, v49);
      v52 = TypedValue.programTraceValue.getter(v51);
      v54 = v53;
      sub_23F6B6420(v3, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
      v55 = v112;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23F711194(0, *(_QWORD *)(v55 + 16) + 1, 1);
        v55 = v112;
      }
      v57 = *(_QWORD *)(v55 + 16);
      v56 = *(_QWORD *)(v55 + 24);
      if (v57 >= v56 >> 1)
      {
        sub_23F711194(v56 > 1, v57 + 1, 1);
        v55 = v112;
      }
      *(_QWORD *)(v55 + 16) = v57 + 1;
      v58 = v55 + 16 * v57;
      *(_QWORD *)(v58 + 32) = v52;
      *(_QWORD *)(v58 + 40) = v54;
      v49 += v50;
      --v47;
      v41 = v110;
    }
    while (v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23F6B5908();
    v55 = MEMORY[0x24BEE4AF8];
  }
  v70 = sub_23F7A3590(v55);
  v71 = 0;
  v72 = v70 + 56;
  v73 = 1 << *(_BYTE *)(v70 + 32);
  v74 = -1;
  if (v73 < 64)
    v74 = ~(-1 << v73);
  v75 = v74 & *(_QWORD *)(v70 + 56);
  v76 = (unint64_t)(v73 + 63) >> 6;
  if (!v75)
    goto LABEL_43;
LABEL_42:
  for (v75 &= v75 - 1; ; v75 = (v78 - 1) & v78)
  {
    swift_bridgeObjectRetain();
    sub_23FB2F254();
    sub_23F6B5908();
    sub_23FB2F254();
    if (v75)
      goto LABEL_42;
LABEL_43:
    v77 = v71 + 1;
    if (__OFADD__(v71, 1))
    {
      __break(1u);
      goto LABEL_68;
    }
    if (v77 >= v76)
      goto LABEL_59;
    v78 = *(_QWORD *)(v72 + 8 * v77);
    ++v71;
    if (!v78)
    {
      v71 = v77 + 1;
      if (v77 + 1 >= v76)
        goto LABEL_59;
      v78 = *(_QWORD *)(v72 + 8 * v71);
      if (!v78)
      {
        v71 = v77 + 2;
        if (v77 + 2 >= v76)
          goto LABEL_59;
        v78 = *(_QWORD *)(v72 + 8 * v71);
        if (!v78)
          break;
      }
    }
LABEL_56:
    ;
  }
  v79 = v77 + 3;
  if (v79 >= v76)
  {
LABEL_59:
    swift_release();
    sub_23F7E148C();
    swift_bridgeObjectRelease();
    sub_23FB2F254();
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v105, v107);
    swift_release();
    goto LABEL_27;
  }
  v78 = *(_QWORD *)(v72 + 8 * v79);
  if (v78)
  {
    v71 = v79;
    goto LABEL_56;
  }
  while (1)
  {
    v71 = v79 + 1;
    if (__OFADD__(v79, 1))
      break;
    if (v71 >= v76)
      goto LABEL_59;
    v78 = *(_QWORD *)(v72 + 8 * v71);
    ++v79;
    if (v78)
      goto LABEL_56;
  }
LABEL_68:
  __break(1u);
}

uint64_t sub_23F7E2B8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a1;
  v1 = sub_23F6916B8(&qword_256EA2978);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_23FB2C524();
  v23 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v24 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_23FB2C41C();
  v5 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23FB2C404();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23FB2C3EC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23FB2C3F8();
  MEMORY[0x24BDAC7A8](v16);
  (*(void (**)(char *, _QWORD))(v18 + 104))((char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCE368]);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDCE348], v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDCE388], v8);
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v20 = v27;
  v19(v7, *MEMORY[0x24BDCE3D0], v26);
  sub_23FB2C518();
  result = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v3, 1, v20);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v24, v3, v20);
    return sub_23FB2C410();
  }
  return result;
}

void TypedValue.length.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;

  sub_23F6B50E8();
  a19 = v21;
  a20 = v22;
  v23 = sub_23FB2E7F8();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B59F8();
  v25 = sub_23FB2EBF4();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_23F7E5318();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6BD134();
  v33 = v32 - v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32 - v31, v20, v29);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 88))(v33, v29);
  if (v34 == *MEMORY[0x24BEB9A00])
  {
    sub_23F7E52B0(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 96));
    v35 = sub_23FB2ECE4();
    v36 = swift_projectBox();
    (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 88))(v36, v35);
LABEL_3:
    swift_release();
    goto LABEL_11;
  }
  if (v34 == *MEMORY[0x24BEB9990] || v34 == *MEMORY[0x24BEB99E0])
    goto LABEL_10;
  if (v34 == *MEMORY[0x24BEB9988])
  {
    sub_23F7E52B0(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 96));
    v37 = swift_projectBox();
    sub_23F75E710((uint64_t)v28, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16));
    sub_23FB2EBE8();
    swift_bridgeObjectRelease();
    sub_23F6F1CB8(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    goto LABEL_3;
  }
  if (v34 == *MEMORY[0x24BEB99D8] || v34 == *MEMORY[0x24BEB9A08])
  {
LABEL_10:
    sub_23F7E52B0(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 96));
    swift_release();
    goto LABEL_11;
  }
  sub_23FB2E3CC();
  v38 = sub_23FB2E7E0();
  v39 = sub_23FB2F5F0();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)sub_23F7595E8();
    *(_WORD *)v40 = 0;
    _os_log_impl(&dword_23F68F000, v38, v39, "Unknown default - returning null", v40, 2u);
    sub_23F693DD0();
  }

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v20, v23);
  sub_23F7E52B0(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
LABEL_11:
  sub_23F693DDC();
}

uint64_t Array<A>.programTraceValue.getter(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 16))
    return 1819047246;
  sub_23FB2ED38();
  TypedValue.programTraceValue.getter();
  sub_23FB2F254();
  sub_23F693E04();
  sub_23FB2F254();
  return 0x5B7473694CLL;
}

uint64_t StatementID.asExprId.getter()
{
  sub_23FB2C758();
  sub_23FB2FB48();
  sub_23FB2F254();
  sub_23F693E04();
  return 101;
}

void StatementID.init(fromExprId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  sub_23F6B50E8();
  sub_23F6916B8(&qword_256EAB708);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B6B5C();
  v2 = sub_23F6916B8(&qword_256EAB710);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6BD134();
  v6 = v5 - v4;
  v7 = sub_23F6916B8(&qword_256EAB718);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6BD134();
  v11 = v10 - v9;
  sub_23F6916B8(&qword_256EAB720);
  sub_23FB2D64C();
  sub_23F723348();
  sub_23F7E40A4();
  sub_23FB2F0E0();
  swift_bridgeObjectRelease();
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v0, 1, v2) == 1)
  {
    sub_23F6B4F84(v0, &qword_256EAB708);
LABEL_11:
    sub_23F77DD90();
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v0, v2);
  sub_23FB2D664();
  swift_bridgeObjectRelease();
  if (!((v25 ^ v24) >> 14))
  {
    sub_23F693DFC();
LABEL_10:
    sub_23F7A01DC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    goto LABEL_11;
  }
  v12 = sub_23F7E52DC();
  sub_23F7E4CA0(v12, v13, v14, v15, v16);
  if ((v17 & 0x10000000000) != 0)
  {
    v18 = sub_23F7E52DC();
    v17 = sub_23F7E45DC(v18, v19, v20, v21, v22);
  }
  v23 = v17;
  sub_23F693DFC();
  if ((v23 & 0x100000000) != 0)
    goto LABEL_10;
  if ((_DWORD)v23 != -1)
  {
    sub_23F77DD90();
    sub_23F7A01DC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
LABEL_12:
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    sub_23F693DDC();
    return;
  }
  __break(1u);
}

uint64_t sub_23F7E3380(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = type metadata accessor for Session.Event.Payload(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v19 - v6;
  v8 = sub_23F6916B8(&qword_256EA7958);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(int *)(v9 + 48);
  v13 = (uint64_t)v11 + v12;
  *v11 = *a1;
  sub_23F6F5920((uint64_t)a1 + v12, (uint64_t)v11 + v12, type metadata accessor for Session.Event);
  v14 = type metadata accessor for Session.Event(0);
  sub_23F6F5920(v13 + *(int *)(v14 + 28), (uint64_t)v7, type metadata accessor for Session.Event.Payload);
  sub_23F6D3508(v13, type metadata accessor for Session.Event);
  sub_23F6F5920((uint64_t)v7, (uint64_t)v5, type metadata accessor for Session.Event.Payload);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 3)
  {
    v16 = 1;
LABEL_4:
    sub_23F6D3508((uint64_t)v5, type metadata accessor for Session.Event.Payload);
    v17 = v16;
    goto LABEL_5;
  }
  v16 = 0;
  v17 = 0;
  if (EnumCaseMultiPayload != 48)
    goto LABEL_4;
LABEL_5:
  sub_23F6D3508((uint64_t)v7, type metadata accessor for Session.Event.Payload);
  return v17;
}

uint64_t sub_23F7E34FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a1;
  v4 = type metadata accessor for RequestContent.TextContent(0);
  MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RequestContent(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Request(0);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23F6916B8(&qword_256EAB740);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v40 - v14;
  v16 = type metadata accessor for Session.Event.Payload(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v40 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v40 - v23;
  v25 = type metadata accessor for TextQuery(0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a3 + *(int *)(type metadata accessor for Session.Event(0) + 28);
  sub_23F6F5920(v28, (uint64_t)v24, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29 = type metadata accessor for TextQuery;
    v30 = (uint64_t)v24;
LABEL_3:
    sub_23F6F594C(v30, (uint64_t)v27, v29);
    swift_bridgeObjectRetain();
    v31 = (uint64_t)v27;
    v32 = v29;
LABEL_4:
    sub_23F6D3508(v31, v32);
    return v43;
  }
  sub_23F6D3508((uint64_t)v24, type metadata accessor for Session.Event.Payload);
  sub_23F6F5920(v28, (uint64_t)v22, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    sub_23F70E3B0();
    v33 = type metadata accessor for SpeechRequestCandidate(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v33) == 1)
    {
      sub_23F6B4F84((uint64_t)v15, &qword_256EAB740);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_23F6D3508((uint64_t)v15, type metadata accessor for SpeechRequestCandidate);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v43;
  }
  sub_23F6D3508((uint64_t)v22, type metadata accessor for Session.Event.Payload);
  sub_23F6F5920(v28, (uint64_t)v19, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v34 = v42;
    sub_23F6F594C((uint64_t)v19, v42, type metadata accessor for Request);
    sub_23F6F5920(v34, (uint64_t)v8, type metadata accessor for RequestContent);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        sub_23F6D3508(v34, type metadata accessor for Request);
        v35 = type metadata accessor for RequestContent;
        v36 = (uint64_t)v8;
        goto LABEL_15;
      case 1u:
        sub_23F6D3508(v34, type metadata accessor for Request);
        v29 = type metadata accessor for RequestContent.TextContent;
        v30 = (uint64_t)v8;
        v27 = v41;
        goto LABEL_3;
      case 2u:
        v38 = (uint64_t)v40;
        sub_23F70E3B0();
        v39 = type metadata accessor for SpeechRequestCandidate(0);
        if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v38, 1, v39) == 1)
        {
          sub_23F6B4F84(v38, &qword_256EAB740);
          swift_bridgeObjectRelease();
          sub_23F6D3508(v34, type metadata accessor for Request);
          return v43;
        }
        swift_bridgeObjectRetain();
        sub_23F6D3508(v38, type metadata accessor for SpeechRequestCandidate);
        swift_bridgeObjectRelease();
        v32 = type metadata accessor for Request;
        v31 = v34;
        break;
      default:
        result = sub_23FB2FB6C();
        __break(1u);
        return result;
    }
    goto LABEL_4;
  }
  v35 = type metadata accessor for Session.Event.Payload;
  v36 = (uint64_t)v19;
LABEL_15:
  sub_23F6D3508(v36, v35);
  return 0;
}

uint64_t sub_23F7E39BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_23F6916B8(&qword_256EA64A0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_23F6916B8(&qword_256EAB6F8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B4F58(a1, (uint64_t)v7, &qword_256EAB6F8);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v7, 1, v2) == 1)return 0;
  sub_23F6B4EC0((uint64_t)v7, (uint64_t)v4, &qword_256EA64A0);
  v8 = sub_23F7E34FC(*v4, (uint64_t)v4 + *(int *)(v2 + 48), (uint64_t)v4 + *(int *)(v2 + 64));
  sub_23F6B4F84((uint64_t)v4, &qword_256EA64A0);
  return v8;
}

void sub_23F7E3AF8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23F6B50E8();
  v2 = v1;
  v17 = *(_QWORD *)(sub_23F6916B8(&qword_256EA7958) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v4);
  v18 = (uint64_t)&v15 - v5;
  sub_23F7E494C();
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease();
  if (v8 < 2)
  {
LABEL_2:
    sub_23F693DDC();
    return;
  }
  v9 = 0;
  v10 = v8 >> 1;
  v11 = v8 - 1;
  v15 = v2;
  v16 = v8 >> 1;
  while (1)
  {
    if (v9 == v11)
      goto LABEL_12;
    v12 = *(_QWORD *)(v7 + 16);
    if (v9 >= v12)
      break;
    v13 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v14 = *(_QWORD *)(v17 + 72);
    sub_23F6B6474(v7 + v13 + v14 * v9, v18);
    if (v11 >= v12)
      goto LABEL_15;
    sub_23F6B6474(v7 + v13 + v14 * v11, v0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = v15(v7);
    if (v9 >= *(_QWORD *)(v7 + 16))
      goto LABEL_16;
    sub_23F7E51E4(v0, v7 + v13 + v14 * v9);
    if (v11 >= *(_QWORD *)(v7 + 16))
      goto LABEL_17;
    sub_23F7E51E4(v18, v7 + v13 + v14 * v11);
    v10 = v16;
LABEL_12:
    ++v9;
    --v11;
    if (v10 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

void sub_23F7E3C90(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a1;
  v35 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v35);
  v33 = (uint64_t)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Session.Event(0);
  MEMORY[0x24BDAC7A8](v34);
  v32 = (uint64_t)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23F6916B8(&qword_256EAB738);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (uint64_t *)((char *)&v30 - v7);
  swift_bridgeObjectRetain();
  sub_23F7E3AF8();
  v10 = v9;
  v11 = 0;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = &qword_256EA7958;
  while (1)
  {
    if (v11 == v12)
    {
      v14 = sub_23F6916B8(v13);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v6, 1, 1, v14);
      v11 = v12;
      goto LABEL_6;
    }
    if (v11 >= *(_QWORD *)(v10 + 16))
      break;
    v15 = sub_23F6916B8(v13);
    sub_23F6B4F58(v10+ ((*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v11++, (uint64_t)v6, v13);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v6, 0, 1, v15);
LABEL_6:
    sub_23F6B4EC0((uint64_t)v6, (uint64_t)v8, &qword_256EAB738);
    v16 = sub_23F6916B8(v13);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v8, 1, v16) == 1)
    {
      swift_bridgeObjectRelease();
      v24 = (_OWORD *)v31;
      *(_BYTE *)(v31 + 64) = 0;
      v24[2] = 0u;
      v24[3] = 0u;
      *v24 = 0u;
      v24[1] = 0u;
      return;
    }
    v17 = v12;
    v18 = v13;
    v19 = (uint64_t)v8 + *(int *)(v16 + 48);
    v20 = v8;
    v21 = *v8;
    v22 = v32;
    sub_23F6F594C(v19, v32, type metadata accessor for Session.Event);
    v23 = v33;
    sub_23F6F5920(v22 + *(int *)(v34 + 28), v33, type metadata accessor for Session.Event.Payload);
    sub_23F6D3508(v22, type metadata accessor for Session.Event);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      swift_bridgeObjectRelease();
      v25 = *(_OWORD *)v23;
      v26 = *(_QWORD *)(v23 + 16);
      v27 = *(_BYTE *)(v23 + 56);
      v28 = v31;
      *(_QWORD *)v31 = v21;
      *(_OWORD *)(v28 + 8) = v25;
      *(_QWORD *)(v28 + 24) = v26;
      v29 = *(_OWORD *)(v23 + 40);
      *(_OWORD *)(v28 + 32) = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v28 + 48) = v29;
      *(_BYTE *)(v28 + 64) = v27;
      return;
    }
    sub_23F6D3508(v23, type metadata accessor for Session.Event.Payload);
    v13 = v18;
    v12 = v17;
    v8 = v20;
  }
  __break(1u);
}

void sub_23F7E3F7C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7E4110();
    v3 = v6;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    sub_23F7551C0((char *)(v3 + 16 * a1 + 48), v4 - 1 - a1, (char *)(v3 + 16 * a1 + 32));
    *(_QWORD *)(v3 + 16) = v5;
    *v1 = v3;
  }
}

void sub_23F7E4004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    sub_23F6916B8(&qword_256EA1570);
    v4 = (_QWORD *)swift_allocObject();
    v5 = j__malloc_size(v4);
    v4[2] = a1;
    v4[3] = 2 * v5 - 64;
  }
  sub_23F694CC8();
}

unint64_t sub_23F7E4064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EAB700;
  if (!qword_256EAB700)
  {
    v1 = sub_23FB2C1C4();
    result = MEMORY[0x242674E5C](MEMORY[0x24BDCC588], v1);
    atomic_store(result, (unint64_t *)&qword_256EAB700);
  }
  return result;
}

unint64_t sub_23F7E40A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256EAB728;
  if (!qword_256EAB728)
  {
    v1 = sub_23F6AE310(&qword_256EAB718);
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE7460], v1);
    atomic_store(result, (unint64_t *)&qword_256EAB728);
  }
  return result;
}

void sub_23F7E40E8()
{
  sub_23F753C44();
}

void sub_23F7E40FC()
{
  sub_23F753C60();
}

void sub_23F7E4110()
{
  sub_23F7540F4();
}

uint64_t sub_23F7E4124()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = sub_23F7E4178();
  sub_23F7E41AC(v0, v1, v2, v3);
  sub_23F693E04();
  return sub_23F6B68CC();
}

uint64_t sub_23F7E4178()
{
  return sub_23FB2F2F0();
}

uint64_t sub_23F7E41AC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    sub_23F7E42F0(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      sub_23F7E4004(v9, 0);
      v12 = v11;
      sub_23F7E43DC(v16, v11 + 32, v10, a1, a2, a3, a4);
      v14 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v12 = MEMORY[0x24BEE4AF8];
    }
    v15 = MEMORY[0x242673E6C](v12 + 32, *(_QWORD *)(v12 + 16));
    swift_release();
    return v15;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x242673E6CLL);
LABEL_9:
      sub_23FB2F83C();
      goto LABEL_12;
    }
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x242673E6C]((char *)v16 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

void sub_23F7E42F0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = a1;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    sub_23F7CB758(a1, a3, a4);
    v7 = v10;
  }
  if ((a2 & 0xC) == v9)
  {
    sub_23F7CB758(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000) == 0)
      return;
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return;
  }
  v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v12 >= a2 >> 16)
  {
    sub_23FB2F2A8();
    return;
  }
  __break(1u);
}

void sub_23F7E43DC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v11 = a4;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }
  v13 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v25 = v16;
  v28 = a3 - 1;
  v11 = a4;
  while (1)
  {
    v17 = v11;
    if ((v11 & 0xC) == v15)
      sub_23F7CB758(v11, a6, a7);
    if (v17 >> 14 < v29 || v17 >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      v21 = sub_23FB2F2B4();
    }
    else
    {
      v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        v21 = *((_BYTE *)v30 + v19);
      }
      else
      {
        v20 = v23;
        if ((a6 & 0x1000000000000000) == 0)
          v20 = sub_23FB2F83C();
        v21 = *(_BYTE *)(v20 + v19);
      }
    }
    if ((v11 & 0xC) == v15)
    {
      sub_23F7CB758(v11, a6, a7);
      v11 = v22;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v25 <= v11 >> 16)
      goto LABEL_35;
    v11 = sub_23FB2F290();
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_23F7E45DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_23F7E4D78();
  swift_bridgeObjectRetain();
  v7 = sub_23FB2F2E4();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_23F7E4124();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_23FB2F83C();
  }
LABEL_7:
  v13 = sub_23F7E46CC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

unsigned __int8 *sub_23F7E46CC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23F7E494C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  int64_t v34;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_23F6B50E8();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v48 = sub_23F6916B8(&qword_256EA6530);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v50 = v7;
  v51 = sub_23F6916B8(&qword_256EA7958);
  MEMORY[0x24BDAC7A8](v51);
  sub_23F693E0C();
  v49 = v8;
  MEMORY[0x24BDAC7A8](v9);
  v52 = v11;
  v53 = (uint64_t)v45 - v10;
  v12 = *(unsigned __int8 *)(v11 + 80);
  sub_23F6B54F8();
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = v5 - v3;
  if (v5 == v3)
  {
    v15 = 0;
LABEL_32:
    sub_23F693DFC();
    v18 = v13;
LABEL_34:
    v42 = v18[3];
    if (v42 < 2)
      goto LABEL_37;
    v43 = v42 >> 1;
    v41 = __OFSUB__(v43, v15);
    v44 = v43 - v15;
    if (!v41)
    {
      v18[2] = v44;
LABEL_37:
      sub_23F693DDC();
      return;
    }
  }
  else
  {
    if (v3 >= v5)
    {
      v16 = 0;
      v15 = 0;
      v45[1] = v12 | 7;
      v46 = (v12 + 32) & ~v12;
      v17 = MEMORY[0x24BEE4AF8] + v46;
      v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v47 = v14;
      while (v14 + v16)
      {
        v19 = *(_QWORD *)(v1 + 16);
        if (v16 == v19)
        {
          sub_23F693DFC();
          goto LABEL_34;
        }
        if (v16 >= v19)
          goto LABEL_39;
        v20 = v5;
        v21 = v5 + v16;
        sub_23F7E52BC();
        sub_23F6BC450();
        v24 = v50 + *(int *)(v48 + 48);
        sub_23F6F5920(v1 + v22 + *(_QWORD *)(v23 + 72) * v16, v24, type metadata accessor for Session.Event);
        v25 = (uint64_t)v49;
        v26 = (uint64_t)v49 + *(int *)(v51 + 48);
        *v49 = v21;
        sub_23F6F594C(v24, v26, type metadata accessor for Session.Event);
        sub_23F6B4EC0(v25, v53, &qword_256EA7958);
        if (v15)
        {
          v13 = v18;
        }
        else
        {
          v27 = v18[3];
          if ((uint64_t)((v27 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_41;
          v28 = v1;
          v29 = v27 & 0xFFFFFFFFFFFFFFFELL;
          if (v29 <= 1)
            v30 = 1;
          else
            v30 = v29;
          sub_23F6916B8(&qword_256EA7950);
          v31 = *(_QWORD *)(v52 + 72);
          v32 = v46;
          v13 = (_QWORD *)swift_allocObject();
          v33 = j__malloc_size(v13);
          if (!v31)
            goto LABEL_42;
          v34 = v33 - v32;
          if (v33 - v32 == 0x8000000000000000 && v31 == -1)
            goto LABEL_43;
          v36 = v34 / v31;
          v13[2] = v30;
          v13[3] = 2 * (v34 / v31);
          v37 = (char *)v13 + v32;
          v38 = v18[3];
          v39 = (v38 >> 1) * v31;
          if (v18[2])
          {
            if (v13 < v18 || v37 >= (char *)v18 + v46 + v39)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v13 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v18[2] = 0;
          }
          v17 = (uint64_t)&v37[v39];
          v15 = (v36 & 0x7FFFFFFFFFFFFFFFLL) - (v38 >> 1);
          swift_release();
          v1 = v28;
        }
        v5 = v20;
        v41 = __OFSUB__(v15--, 1);
        if (v41)
          goto LABEL_40;
        ++v16;
        sub_23F6B4EC0(v53, v17, &qword_256EA7958);
        v17 += *(_QWORD *)(v52 + 72);
        v18 = v13;
        v14 = v47;
        if (!(v47 + v16))
          goto LABEL_32;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
}

void sub_23F7E4C48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23F7E4110();
    v1 = v3;
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    *(_QWORD *)(v1 + 16) = v2 - 1;
    *v0 = v1;
  }
  else
  {
    __break(1u);
  }
}

void sub_23F7E4CA0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    v15 = 0;
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a4) & 0xF;
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      v11 = v14;
    }
    else if ((a3 & 0x1000000000000000) != 0)
    {
      v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v12 = a3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v11 = (_QWORD *)sub_23FB2F83C();
    }
    sub_23F7E4DB4((uint64_t)v11, v12, a1, a2, a3, a4, a5);
    if (!v5)
      v15 = v13 & 1;
  }
}

unint64_t sub_23F7E4D78()
{
  unint64_t result;

  result = qword_256EAB730;
  if (!qword_256EAB730)
  {
    result = MEMORY[0x242674E5C](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_256EAB730);
  }
  return result;
}

void sub_23F7E4DB4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  unint64_t v57;
  unsigned __int8 v58;

  v11 = a3;
  v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v15 = a3 & 0xC;
  v16 = a3;
  if (v15 == 4 << v13)
  {
    sub_23F7CB758(a3, a5, a6);
    v16 = v20;
  }
  v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v21 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0)
      v21 = HIBYTE(a6) & 0xF;
    if (v21 < v16 >> 16)
      goto LABEL_104;
    v18 = sub_23FB2F2A8();
    v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    v22 = v17;
    sub_23F7CB758(v11, a5, a6);
    v17 = v22;
    v11 = v23;
  }
  if ((a4 & 0xC) == v14)
  {
    v24 = a4;
    v25 = v17;
    sub_23F7CB758(v24, a5, a6);
    v17 = v25;
    a4 = v26;
    if ((a6 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    v19 = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  v27 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0)
    v27 = v17;
  if (v27 < v11 >> 16)
    goto LABEL_100;
  if (v27 < a4 >> 16)
  {
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  v19 = sub_23FB2F2A8();
LABEL_22:
  v28 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v28 < v18)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v29 = (unsigned __int8 *)(a1 + v18);
  if (!a1)
    v29 = 0;
  v30 = *v29;
  if (v30 == 43)
  {
    if (v19 < 1)
    {
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      return;
    }
    if (v19 != 1)
    {
      v41 = a7 + 87;
      if (a7 > 10)
      {
        v42 = a7 + 55;
      }
      else
      {
        v41 = 97;
        v42 = 65;
      }
      v43 = a7 <= 10 ? a7 + 48 : 58;
      if (v29)
      {
        v44 = 0;
        v45 = v29 + 1;
        v46 = v19 - 1;
        while (1)
        {
          v47 = *v45;
          if (v47 < 0x30 || v47 >= v43)
          {
            if (v47 < 0x41 || v47 >= v42)
            {
              if (v47 < 0x61 || v47 >= v41)
                return;
              v48 = -87;
            }
            else
            {
              v48 = -55;
            }
          }
          else
          {
            v48 = -48;
          }
          v49 = v44 * (unint64_t)a7;
          if ((v49 & 0xFFFFFFFF00000000) == 0)
          {
            v50 = v47 + v48;
            v44 = v49 + v50;
            if (!__CFADD__((_DWORD)v49, v50))
            {
              ++v45;
              if (--v46)
                continue;
            }
          }
          return;
        }
      }
    }
  }
  else
  {
    if (v30 == 45)
    {
      if (v19 >= 1)
      {
        if (v19 != 1)
        {
          v31 = a7 + 87;
          if (a7 > 10)
          {
            v32 = a7 + 55;
          }
          else
          {
            v31 = 97;
            v32 = 65;
          }
          v33 = a7 <= 10 ? a7 + 48 : 58;
          if (v29)
          {
            v34 = 0;
            v35 = v29 + 1;
            v36 = v19 - 1;
            while (1)
            {
              v37 = *v35;
              if (v37 < 0x30 || v37 >= v33)
              {
                if (v37 < 0x41 || v37 >= v32)
                {
                  if (v37 < 0x61 || v37 >= v31)
                    return;
                  v38 = -87;
                }
                else
                {
                  v38 = -55;
                }
              }
              else
              {
                v38 = -48;
              }
              v39 = v34 * (unint64_t)a7;
              if ((v39 & 0xFFFFFFFF00000000) == 0)
              {
                v40 = v37 + v38;
                v34 = v39 - v40;
                if (v39 >= v40)
                {
                  ++v35;
                  if (--v36)
                    continue;
                }
              }
              return;
            }
          }
        }
        return;
      }
      goto LABEL_102;
    }
    if (v28 != v18)
    {
      v51 = a7 + 87;
      if (a7 > 10)
      {
        v52 = a7 + 55;
      }
      else
      {
        v51 = 97;
        v52 = 65;
      }
      v53 = a7 <= 10 ? a7 + 48 : 58;
      if (v29)
      {
        v54 = 0;
        while (1)
        {
          v55 = *v29;
          if (v55 < 0x30 || v55 >= v53)
          {
            if (v55 < 0x41 || v55 >= v52)
            {
              if (v55 < 0x61 || v55 >= v51)
                return;
              v56 = -87;
            }
            else
            {
              v56 = -55;
            }
          }
          else
          {
            v56 = -48;
          }
          v57 = v54 * (unint64_t)a7;
          if ((v57 & 0xFFFFFFFF00000000) == 0)
          {
            v58 = v55 + v56;
            v54 = v57 + v58;
            if (!__CFADD__((_DWORD)v57, v58))
            {
              ++v29;
              if (--v19)
                continue;
            }
          }
          return;
        }
      }
    }
  }
}

uint64_t sub_23F7E51E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23F6916B8(&qword_256EA7958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23F7E522C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23F7E5254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 16))(*(_QWORD *)(v3 - 144), v0, v2);
}

uint64_t sub_23F7E526C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

uint64_t sub_23F7E527C()
{
  return type metadata accessor for Session.Transcript(0);
}

uint64_t sub_23F7E5298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v0, v1);
}

uint64_t sub_23F7E52A8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_23F7E52B0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23F7E52BC()
{
  return type metadata accessor for Session.Event(0);
}

uint64_t sub_23F7E52C4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23F7E52D4()
{
  return swift_release();
}

uint64_t sub_23F7E52DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7E52F4()
{
  return swift_release();
}

void sub_23F7E5310(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F6D3508(a1, v1);
}

uint64_t sub_23F7E5318()
{
  return sub_23FB2ED38();
}

uint64_t sub_23F7E5324()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_23F7E5330(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, a1);
}

void sub_23F7E5354()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_23F6D3508(v0, v1);
}

Swift::Void __swiftcall TranscriptProtoEvent.prepareForLogging()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int EnumCaseMultiPayload;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  void (*v152)(uint64_t, unint64_t, uint64_t);
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;

  sub_23F6B50E8();
  v288 = v2;
  v289 = v3;
  v4 = v0;
  v5 = sub_23FB2EB1C();
  v6 = *(_QWORD *)(v5 - 8);
  v282 = v5;
  v283 = v6;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F693E0C();
  v280 = v8;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B6580();
  v281 = v10;
  sub_23F6916B8(&qword_256EAB748);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B51A4();
  v260 = v12;
  v13 = sub_23F6D398C();
  v259 = type metadata accessor for TranscriptProtoParameterQuery(v13);
  v251 = *(_QWORD *)(v259 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F693E0C();
  v258 = v15;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6D3D14();
  v262 = v17;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6D3D14();
  v257 = v19;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B6580();
  v261 = v21;
  v22 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoQueryStep(v22);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v23);
  sub_23F6B51A4();
  v252 = v24;
  v25 = sub_23F6D398C();
  v275 = type metadata accessor for TranscriptProtoVariableSetter(v25);
  v250 = *(_QWORD *)(v275 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F693E0C();
  v274 = v27;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B6580();
  v277 = v29;
  v30 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoVariableStep(v30);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B51A4();
  v255 = v32;
  v33 = sub_23F6D398C();
  v273 = type metadata accessor for TranscriptProtoStatementResult(v33);
  v249 = *(_QWORD *)(v273 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F693E0C();
  v272 = v35;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6B6580();
  v276 = v37;
  v38 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoResponseGenerationRequest(v38);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B51A4();
  v254 = v40;
  v41 = sub_23F6D398C();
  v279 = type metadata accessor for TranscriptProtoCandidate(v41);
  v267 = *(_QWORD *)(v279 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F6B631C();
  v45 = v43 - v44;
  MEMORY[0x24BDAC7A8](v46);
  v48 = (char *)&v240 - v47;
  v248 = *(_QWORD *)(type metadata accessor for TranscriptProtoQueryResults(0) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v49);
  sub_23F693E0C();
  v269 = v50;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F6D3D14();
  v268 = v52;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v53);
  sub_23F6B6580();
  v278 = v54;
  v55 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoQueryStepResults(v55);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v56);
  sub_23F6B51A4();
  v256 = v57;
  v58 = sub_23F6D398C();
  v265 = type metadata accessor for TranscriptProtoParameter(v58);
  v247 = *(_QWORD *)(v265 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v59);
  sub_23F693E0C();
  v264 = v60;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v61);
  sub_23F6D3D14();
  v263 = v62;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v63);
  sub_23F6B6580();
  v271 = v64;
  sub_23F6916B8(&qword_256EAB750);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v65);
  sub_23F6B51A4();
  v270 = v66;
  v67 = sub_23F6D398C();
  v253 = type metadata accessor for TranscriptProtoParameterSet(v67);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v68);
  sub_23F6BD134();
  v71 = (uint64_t *)(v70 - v69);
  v72 = type metadata accessor for TranscriptProtoActionResolverRequest(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v73);
  sub_23F6BD134();
  v76 = v75 - v74;
  type metadata accessor for TranscriptProtoAction(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v77);
  sub_23F6B5268();
  sub_23F6916B8(&qword_256EAB758);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v78);
  sub_23F6B631C();
  v81 = v79 - v80;
  MEMORY[0x24BDAC7A8](v82);
  v84 = (char *)&v240 - v83;
  v85 = v4 + *(int *)(type metadata accessor for TranscriptProtoEvent(0) + 44);
  v86 = type metadata accessor for TranscriptProtoPayload(0);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v85, 1, v86))
  {
    v87 = type metadata accessor for TranscriptProtoPayloadEnum(0);
    v90 = sub_23F6B5A8C((uint64_t)v84, v88, v89, v87);
LABEL_129:
    sub_23F77E660(v90, &qword_256EAB758);
    sub_23F693DDC();
    return;
  }
  v246 = v81;
  v242 = v1;
  v91 = v270;
  v243 = v76;
  v241 = v71;
  v245 = v86;
  v244 = v85;
  sub_23F7A1EDC(v85, (uint64_t)v84, &qword_256EAB758);
  v92 = type metadata accessor for TranscriptProtoPayloadEnum(0);
  v90 = sub_23F7B0D30((uint64_t)v84);
  if ((_DWORD)v90 == 1)
    goto LABEL_129;
  v93 = v246;
  sub_23F7A1EDC((uint64_t)v84, v246, &qword_256EAB758);
  v240 = v92;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v266 = v84;
  if (EnumCaseMultiPayload == 23)
  {
    sub_23F7E7760(v93, type metadata accessor for TranscriptProtoResponseGenerationRequest, (uint64_t)&v286);
    v102 = *v71;
    v103 = *(_QWORD *)(*v71 + 16);
    v104 = MEMORY[0x24BEE4AF8];
    if (v103)
    {
      v286 = MEMORY[0x24BEE4AF8];
      sub_23F6B5508();
      sub_23F7E78C8();
      sub_23F71194C();
      sub_23F7E7844();
      v107 = v106 & ~v105;
      v108 = v102 + v107;
      v110 = *(_QWORD *)(v109 + 72);
      sub_23F7E78A4();
      v111 = v276;
      do
      {
        v112 = v272;
        sub_23F7E7704(v108, v272, type metadata accessor for TranscriptProtoStatementResult);
        sub_23F7E7704(v112, v111, type metadata accessor for TranscriptProtoStatementResult);
        v104 = v111 + *(int *)(v273 + 24);
        v113 = type metadata accessor for TranscriptProtoStatementResultPayload(0);
        if (!sub_23F7E7724(v113))
        {
          v114 = type metadata accessor for TranscriptProtoStatementOutcome(0);
          if (!sub_23F7E7724(v114))
          {
            v115 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
            if (!sub_23F7E7724(v115))
              sub_23F7E6C6C();
          }
        }
        sub_23F6D3508(v112, type metadata accessor for TranscriptProtoStatementResult);
        if ((sub_23F7E7780() & 1) == 0)
        {
          sub_23F7E7748();
          sub_23F71194C();
          v104 = v286;
        }
        v117 = *(_QWORD *)(v104 + 16);
        v116 = *(_QWORD *)(v104 + 24);
        if (v117 >= v116 >> 1)
        {
          sub_23F7E779C(v116);
          sub_23F71194C();
          v104 = v286;
        }
        *(_QWORD *)(v104 + 16) = v117 + 1;
        v118 = v104 + v107 + v117 * v110;
        v111 = v276;
        sub_23F7E76D0(v276, v118, type metadata accessor for TranscriptProtoStatementResult);
        v108 += v110;
        --v103;
      }
      while (v103);
      sub_23F693E04();
      v71 = v254;
    }
    else
    {
      sub_23F7E78A4();
    }
    sub_23F693E04();
    *v71 = v104;
    v228 = sub_23F7E77DC();
    if (!(_DWORD)v228)
    {
      sub_23F77E660(v228, &qword_256EAB758);
      sub_23F7E785C(v229, v230, type metadata accessor for TranscriptProtoResponseGenerationRequest);
      swift_storeEnumTagMultiPayload();
      sub_23F7E7734();
    }
    v101 = type metadata accessor for TranscriptProtoResponseGenerationRequest;
    goto LABEL_114;
  }
  if (EnumCaseMultiPayload != 7)
  {
    if (EnumCaseMultiPayload == 8)
    {
      v171 = v255;
      sub_23F7E76D0(v93, (uint64_t)v255, type metadata accessor for TranscriptProtoVariableStep);
      v172 = *v171;
      v173 = *(_QWORD *)(*v171 + 16);
      v174 = MEMORY[0x24BEE4AF8];
      if (v173)
      {
        v286 = MEMORY[0x24BEE4AF8];
        sub_23F6B5508();
        sub_23F7E78C8();
        sub_23F71176C();
        sub_23F7E7844();
        v177 = v176 & ~v175;
        v178 = v172 + v177;
        v180 = *(_QWORD *)(v179 + 72);
        sub_23F7E78A4();
        v181 = v277;
        do
        {
          v182 = v274;
          sub_23F7E7704(v178, v274, type metadata accessor for TranscriptProtoVariableSetter);
          sub_23F7E7704(v182, v181, type metadata accessor for TranscriptProtoVariableSetter);
          v174 = v181 + *(int *)(v275 + 20);
          if (!sub_23F7E7824())
            sub_23F7E6640();
          sub_23F6D3508(v182, type metadata accessor for TranscriptProtoVariableSetter);
          if ((sub_23F7E7780() & 1) == 0)
          {
            sub_23F7E7748();
            sub_23F71176C();
            v174 = v286;
          }
          v184 = *(_QWORD *)(v174 + 16);
          v183 = *(_QWORD *)(v174 + 24);
          if (v184 >= v183 >> 1)
          {
            sub_23F7E779C(v183);
            sub_23F71176C();
            v174 = v286;
          }
          *(_QWORD *)(v174 + 16) = v184 + 1;
          v181 = v277;
          sub_23F7E76D0(v277, v174 + v177 + v184 * v180, type metadata accessor for TranscriptProtoVariableSetter);
          v178 += v180;
          --v173;
        }
        while (v173);
        sub_23F693E04();
        v171 = v255;
        v172 = *v255;
      }
      else
      {
        sub_23F7E78A4();
      }
      sub_23F693E04();
      *v171 = v174;
      v231 = sub_23F7E77DC();
      if (!(_DWORD)v231)
      {
        sub_23F77E660(v231, &qword_256EAB758);
        sub_23F7E7704((uint64_t)v171, v172, type metadata accessor for TranscriptProtoVariableStep);
        swift_storeEnumTagMultiPayload();
        sub_23F7E7734();
      }
      v101 = type metadata accessor for TranscriptProtoVariableStep;
      v210 = (uint64_t)v171;
      goto LABEL_128;
    }
    if (EnumCaseMultiPayload != 15)
    {
      if (EnumCaseMultiPayload == 17)
      {
        v206 = v243;
        sub_23F7E76D0(v93, v243, type metadata accessor for TranscriptProtoActionResolverRequest);
        v207 = v206 + *(int *)(v72 + 36);
        sub_23F7A1EDC(v207, v91, &qword_256EAB750);
        v208 = v253;
        v209 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v91, 1, v253);
        if ((_DWORD)v209 == 1)
        {
          sub_23F77DC10(v209, &qword_256EAB750);
        }
        else
        {
          sub_23F7E7760(v91, type metadata accessor for TranscriptProtoParameterSet, (uint64_t)&v273);
          v214 = *v71;
          v215 = *(_QWORD *)(*v71 + 16);
          v216 = MEMORY[0x24BEE4AF8];
          if (v215)
          {
            v286 = MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            sub_23F7E78C8();
            sub_23F7116F4();
            sub_23F7E7844();
            v219 = v218 & ~v217;
            v283 = v214;
            v220 = v214 + v219;
            v222 = *(_QWORD *)(v221 + 72);
            v223 = v279;
            do
            {
              v224 = v263;
              sub_23F7E781C(v220, v263);
              v225 = v264;
              sub_23F7E781C(v224, v264);
              v216 = v225 + *(int *)(v265 + 24);
              if (!sub_23F7B0D30(v216))
              {
                v216 += *(int *)(v223 + 20);
                if (!_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v216, 1, v282))sub_23F7E6640();
              }
              sub_23F7E7814(v225, v271);
              sub_23F7E7874();
              if ((sub_23F7E7780() & 1) == 0)
              {
                sub_23F7E7748();
                sub_23F7116F4();
                v216 = v286;
              }
              v227 = *(_QWORD *)(v216 + 16);
              v226 = *(_QWORD *)(v216 + 24);
              if (v227 >= v226 >> 1)
              {
                sub_23F7E779C(v226);
                sub_23F7116F4();
                v216 = v286;
              }
              *(_QWORD *)(v216 + 16) = v227 + 1;
              sub_23F7E7814(v271, v216 + v219 + v227 * v222);
              v220 += v222;
              --v215;
            }
            while (v215);
            swift_bridgeObjectRelease();
            v71 = v241;
            v206 = v243;
            v208 = v253;
          }
          swift_bridgeObjectRelease();
          *v71 = v216;
          sub_23F6B4F84(v207, &qword_256EAB750);
          sub_23F7E7704((uint64_t)v71, v207, type metadata accessor for TranscriptProtoParameterSet);
          sub_23F73200C();
          _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v232, v233, v234, v208);
          v235 = v244;
          v236 = sub_23F7B0D30(v244);
          if (!(_DWORD)v236)
          {
            sub_23F77DC10(v236, &qword_256EAB758);
            sub_23F7E7704(v206, v235, type metadata accessor for TranscriptProtoActionResolverRequest);
            swift_storeEnumTagMultiPayload();
            sub_23F7E776C();
          }
          sub_23F6D3508((uint64_t)v71, type metadata accessor for TranscriptProtoParameterSet);
        }
        v101 = type metadata accessor for TranscriptProtoActionResolverRequest;
        v210 = v206;
        goto LABEL_128;
      }
      if (EnumCaseMultiPayload != 5)
      {
        v101 = type metadata accessor for TranscriptProtoPayloadEnum;
        v210 = v93;
LABEL_128:
        sub_23F6D3508(v210, v101);
        goto LABEL_129;
      }
      sub_23F7E7760(v93, type metadata accessor for TranscriptProtoAction, (uint64_t)&v274);
      v95 = sub_23F6B5508();
      sub_23F7E7244(v95);
      v97 = v96;
      sub_23F6B6740();
      v71[3] = v97;
      v98 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v244, 1, v245);
      if (!(_DWORD)v98)
      {
        sub_23F77E660(v98, &qword_256EAB758);
        sub_23F7E785C(v99, v100, type metadata accessor for TranscriptProtoAction);
        swift_storeEnumTagMultiPayload();
        sub_23F7E7734();
      }
      v101 = type metadata accessor for TranscriptProtoAction;
LABEL_114:
      v210 = (uint64_t)v71;
      goto LABEL_128;
    }
    sub_23F7E7760(v93, type metadata accessor for TranscriptProtoQueryStepResults, (uint64_t)&v287);
    v185 = *v71;
    v186 = *(_QWORD *)(*v71 + 16);
    v187 = MEMORY[0x24BEE4AF8];
    if (v186)
    {
      v286 = MEMORY[0x24BEE4AF8];
      sub_23F6B6254();
      sub_23F7E78C8();
      v277 = v186;
      sub_23F71185C();
      v188 = 0;
      sub_23F78F3B0();
      v276 = v189;
      v274 = v185;
      v275 = v185 + v189;
      v191 = *(_QWORD *)(v190 + 72);
      v193 = v268;
      v192 = v269;
      v283 = v191;
      do
      {
        v281 = v188;
        sub_23F7E781C(v275 + v191 * v188, v193);
        sub_23F7E781C(v193, v192);
        v194 = *(_QWORD *)v192;
        v195 = *(_QWORD *)(*(_QWORD *)v192 + 16);
        if (v195)
        {
          v285 = MEMORY[0x24BEE4AF8];
          sub_23F6B5508();
          sub_23F711730();
          v196 = v194;
          v197 = (*(unsigned __int8 *)(v267 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v267 + 80);
          v280 = v196;
          v198 = v196 + v197;
          v199 = *(_QWORD *)(v267 + 72);
          do
          {
            sub_23F7E7704(v198, v45, type metadata accessor for TranscriptProtoCandidate);
            sub_23F7E7704(v45, (uint64_t)v48, type metadata accessor for TranscriptProtoCandidate);
            if (!sub_23F7E7824())
              sub_23F7E6640();
            sub_23F6D3508(v45, type metadata accessor for TranscriptProtoCandidate);
            v187 = v285;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23F711730();
              v187 = v285;
            }
            v201 = *(_QWORD *)(v187 + 16);
            v200 = *(_QWORD *)(v187 + 24);
            if (v201 >= v200 >> 1)
            {
              sub_23F78F598(v200);
              sub_23F711730();
              v187 = v285;
            }
            *(_QWORD *)(v187 + 16) = v201 + 1;
            sub_23F7E76D0((uint64_t)v48, v187 + v197 + v201 * v199, type metadata accessor for TranscriptProtoCandidate);
            v198 += v199;
            --v195;
          }
          while (v195);
          swift_bridgeObjectRelease();
          v193 = v268;
          v192 = v269;
        }
        else
        {
          v187 = MEMORY[0x24BEE4AF8];
        }
        sub_23F693E04();
        *(_QWORD *)v192 = v187;
        sub_23F7E7814(v192, v278);
        sub_23F7E7874();
        if ((sub_23F7E7780() & 1) == 0)
        {
          sub_23F7E7748();
          sub_23F71185C();
          v187 = v286;
        }
        v202 = v283;
        v204 = *(_QWORD *)(v187 + 16);
        v203 = *(_QWORD *)(v187 + 24);
        if (v204 >= v203 >> 1)
        {
          sub_23F7E779C(v203);
          sub_23F71185C();
          v202 = v283;
          v187 = v286;
        }
        v205 = v281 + 1;
        *(_QWORD *)(v187 + 16) = v204 + 1;
        v188 = v205;
        sub_23F7E7814(v278, v187 + v276 + v204 * v202);
        v191 = v283;
      }
      while (v188 != v277);
      swift_bridgeObjectRelease();
      v71 = v256;
    }
    swift_bridgeObjectRelease();
    *v71 = v187;
    v211 = sub_23F7E77AC();
    if (!(_DWORD)v211)
    {
      sub_23F77DC10(v211, &qword_256EAB758);
      sub_23F7E7868(v212, v213, type metadata accessor for TranscriptProtoQueryStepResults);
      swift_storeEnumTagMultiPayload();
      sub_23F7E776C();
    }
    v101 = type metadata accessor for TranscriptProtoQueryStepResults;
LABEL_127:
    v210 = (uint64_t)v71;
    goto LABEL_128;
  }
  sub_23F7E7760(v93, type metadata accessor for TranscriptProtoQueryStep, (uint64_t)&v284);
  v119 = *v71;
  v272 = *(_QWORD *)(*v71 + 16);
  if (!v272)
  {
    v123 = MEMORY[0x24BEE4AF8];
LABEL_124:
    swift_bridgeObjectRelease();
    *v71 = v123;
    v237 = sub_23F7E77AC();
    if (!(_DWORD)v237)
    {
      sub_23F77DC10(v237, &qword_256EAB758);
      sub_23F7E7868(v238, v239, type metadata accessor for TranscriptProtoQueryStep);
      swift_storeEnumTagMultiPayload();
      sub_23F7E776C();
    }
    v101 = type metadata accessor for TranscriptProtoQueryStep;
    goto LABEL_127;
  }
  v271 = sub_23F6916B8(&qword_256EAB760);
  sub_23F78F3B0();
  v268 = v119;
  v269 = v120;
  v270 = v119 + v120;
  v273 = *(_QWORD *)(v121 + 72);
  swift_bridgeObjectRetain_n();
  v122 = 0;
  v123 = MEMORY[0x24BEE4AF8];
  v124 = v283;
  v126 = v280;
  v125 = v281;
  v127 = v262;
  v128 = v261;
  while (2)
  {
    v274 = v122 + 1;
    v275 = v123;
    sub_23F7E7704(v270 + v273 * v122, v128, type metadata accessor for TranscriptProtoParameterQuery);
    sub_23F7E7704(v128, (uint64_t)v127, type metadata accessor for TranscriptProtoParameterQuery);
    v129 = *v127;
    v130 = sub_23FB2F98C();
    v131 = (_QWORD *)v130;
    v132 = 0;
    v133 = 1 << *(_BYTE *)(v129 + 32);
    v279 = v129;
    v136 = *(_QWORD *)(v129 + 64);
    v135 = v129 + 64;
    v134 = v136;
    if (v133 < 64)
      v137 = ~(-1 << v133);
    else
      v137 = -1;
    v138 = v137 & v134;
    v276 = v135;
    v277 = (unint64_t)(v133 + 63) >> 6;
    v278 = v130 + 64;
    if ((v137 & v134) != 0)
    {
LABEL_31:
      v139 = __clz(__rbit64(v138));
      v138 &= v138 - 1;
      v140 = v139 | (v132 << 6);
      goto LABEL_52;
    }
    while (1)
    {
      v141 = v132 + 1;
      if (__OFADD__(v132, 1))
        goto LABEL_131;
      if (v141 >= v277)
        goto LABEL_55;
      v142 = *(_QWORD *)(v276 + 8 * v141);
      ++v132;
      if (!v142)
      {
        v132 = v141 + 1;
        sub_23F7E788C();
        if (v143 == v144)
          goto LABEL_55;
        sub_23F7E7880();
        if (!v142)
        {
          v132 = v145 + 2;
          sub_23F7E788C();
          if (v143 == v144)
            goto LABEL_55;
          sub_23F7E7880();
          if (!v142)
          {
            v132 = v146 + 3;
            sub_23F7E788C();
            if (v143 == v144)
              goto LABEL_55;
            sub_23F7E7880();
            if (!v142)
              break;
          }
        }
      }
LABEL_51:
      v138 = (v142 - 1) & v142;
      v140 = __clz(__rbit64(v142)) + (v132 << 6);
LABEL_52:
      v150 = *(_DWORD *)(*(_QWORD *)(v279 + 48) + 4 * v140);
      v151 = *(_QWORD *)(v124 + 72) * v140;
      v152 = *(void (**)(uint64_t, unint64_t, uint64_t))(v283 + 16);
      v153 = v125;
      v154 = v125;
      v155 = v282;
      v152(v153, *(_QWORD *)(v279 + 56) + v151, v282);
      v152(v126, v154, v155);
      sub_23F7E6640();
      sub_23F7E78BC(*(uint64_t (**)(uint64_t, uint64_t))(v283 + 8));
      *(_QWORD *)(v278 + ((v140 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v140;
      *(_DWORD *)(v131[6] + 4 * v140) = v150;
      v156 = v131[7] + v151;
      v124 = v283;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v283 + 32))(v156, v126, v155);
      v157 = v131[2];
      v144 = __OFADD__(v157, 1);
      v158 = v157 + 1;
      if (v144)
      {
        __break(1u);
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      v131[2] = v158;
      v125 = v281;
      if (v138)
        goto LABEL_31;
    }
    v148 = v147 + 4;
    if (v148 >= v277)
    {
LABEL_55:
      v127 = v262;
      swift_bridgeObjectRelease();
      *v127 = (uint64_t)v131;
      v159 = v260;
      sub_23F7E783C((uint64_t)v127, v260);
      sub_23F73200C();
      v160 = v259;
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v161, v162, v163, v259);
      v128 = v261;
      sub_23F6D3508(v261, type metadata accessor for TranscriptProtoParameterQuery);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v159, 1, v160) == 1)
      {
        sub_23F6B4F84(v159, &qword_256EAB748);
        v123 = v275;
      }
      else
      {
        v164 = v159;
        v165 = v257;
        sub_23F7E783C(v164, v257);
        v166 = v258;
        sub_23F7E783C(v165, v258);
        v123 = v275;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23F7E78B0();
          v123 = v169;
        }
        v168 = *(_QWORD *)(v123 + 16);
        v167 = *(_QWORD *)(v123 + 24);
        if (v168 >= v167 >> 1)
        {
          sub_23F78F598(v167);
          sub_23F7E78B0();
          v123 = v170;
        }
        *(_QWORD *)(v123 + 16) = v168 + 1;
        sub_23F7E783C(v166, v123 + v269 + v168 * v273);
      }
      v122 = v274;
      if (v274 == v272)
      {
        sub_23F6B6740();
        v71 = v252;
        goto LABEL_124;
      }
      continue;
    }
    break;
  }
  v142 = *(_QWORD *)(v276 + 8 * v148);
  if (v142)
  {
    v132 = v148;
    goto LABEL_51;
  }
  while (1)
  {
    v132 = v148 + 1;
    if (__OFADD__(v148, 1))
      break;
    sub_23F7E788C();
    if (v143 == v144)
      goto LABEL_55;
    sub_23F7E7880();
    v148 = v149 + 1;
    if (v142)
      goto LABEL_51;
  }
LABEL_132:
  __break(1u);
}

void sub_23F7E6640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  void (*v35)(_QWORD *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  void (*v54)(_QWORD *, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[4];

  sub_23F6B50E8();
  v2 = sub_23FB2EAD4();
  v98 = *(_QWORD *)(v2 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5298();
  sub_23F6916B8(&qword_256EAB778);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  v94 = v5;
  sub_23F6D398C();
  v91 = sub_23FB2EB04();
  v95 = *(_QWORD *)(v91 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B51A4();
  v96 = v7;
  sub_23F6D398C();
  v8 = sub_23FB2EB1C();
  v99 = *(_QWORD *)(v8 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B631C();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v86 - v14;
  v16 = sub_23FB2EABC();
  v93 = *(_QWORD *)(v16 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B51A4();
  v92 = v18;
  sub_23F6916B8(&qword_256EAB780);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F693E0C();
  v97 = v20;
  sub_23F6B5664();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v86 - v23);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v86 - v25;
  v27 = v1;
  sub_23FB2EAE0();
  v28 = (uint64_t)v26;
  v29 = sub_23FB2EB4C();
  v30 = _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v28, 1, v29);
  if ((_DWORD)v30 != 1)
  {
    v89 = v16;
    sub_23F7A1EDC(v28, (uint64_t)v24, &qword_256EAB780);
    v31 = *(_QWORD *)(v29 - 8);
    v32 = (*(uint64_t (**)(uint64_t *, uint64_t))(v31 + 88))(v24, v29);
    if ((_DWORD)v32 == *MEMORY[0x24BEB9638])
    {
      LODWORD(v96) = v32;
      v90 = v28;
      v95 = v27;
      (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v24, v29);
      v33 = swift_projectBox();
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16);
      v34(v0, v33, v2);
      v35 = (void (*)(_QWORD *, _QWORD))sub_23FB2EAC8();
      v36 = sub_23F7E78D4();
      v37 = v31;
      if (!sub_23F7E7724(v36))
      {
        v38 = sub_23FB2EB64();
        sub_23F6B5A8C(v94, v39, v40, v38);
        sub_23FB2EB70();
      }
      v35(v100, 0);
      v41 = swift_allocBox();
      v34(v42, v0, v2);
      v43 = v97;
      *v97 = v41;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v37 + 104))(v43, v96, v29);
      sub_23F73200C();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v44, v45, v46, v29);
      sub_23FB2EAEC();
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v0, v2);
LABEL_22:
      v30 = swift_release();
      goto LABEL_23;
    }
    v87 = v31;
    v88 = v29;
    if ((_DWORD)v32 == *MEMORY[0x24BEB9640])
    {
      v47 = v32;
      v90 = v28;
      v49 = v87;
      v48 = v88;
      (*(void (**)(uint64_t *, uint64_t))(v87 + 96))(v24, v88);
      v50 = swift_projectBox();
      v51 = v95;
      v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
      v53 = v91;
      v52(v96, v50, v91);
      v54 = (void (*)(_QWORD *, _QWORD))sub_23FB2EAF8();
      v55 = sub_23F7E78D4();
      if (!sub_23F7E7724(v55))
      {
        v56 = sub_23FB2EB64();
        sub_23F6B5A8C(v94, v57, v58, v56);
        v51 = v95;
        sub_23FB2EB70();
      }
      v54(v100, 0);
      v59 = swift_allocBox();
      v60 = v96;
      v52(v61, v96, v53);
      v62 = v97;
      *v97 = v59;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v49 + 104))(v62, v47, v48);
      sub_23F73200C();
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v63, v64, v65, v48);
      sub_23FB2EAEC();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v60, v53);
      goto LABEL_22;
    }
    if ((_DWORD)v32 == *MEMORY[0x24BEB9630])
    {
      LODWORD(v96) = v32;
      v90 = v28;
      (*(void (**)(uint64_t *, uint64_t))(v87 + 96))(v24, v88);
      v66 = *v24;
      v67 = swift_projectBox();
      v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
      v69 = v89;
      v68(v92, v67, v89);
      v70 = sub_23FB2EAA4();
      v71 = *(_QWORD *)(v70 + 16);
      if (v71)
      {
        v91 = (uint64_t)v68;
        v94 = v66;
        v95 = v27;
        v100[0] = MEMORY[0x24BEE4AF8];
        sub_23F711334();
        v72 = v99;
        sub_23F78F3B0();
        v86 = v70;
        v98 = v73;
        v74 = v70 + v73;
        v75 = *(_QWORD *)(v72 + 72);
        v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
        do
        {
          v76(v12, v74, v8);
          v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v76)(v15, v12, v8);
          sub_23F7E6640(v77);
          (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v12, v8);
          v78 = v100[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23F7E7854();
            v78 = v100[0];
          }
          v80 = *(_QWORD *)(v78 + 16);
          v79 = *(_QWORD *)(v78 + 24);
          if (v80 >= v79 >> 1)
          {
            sub_23F78F598(v79);
            sub_23F7E7854();
            v78 = v100[0];
          }
          *(_QWORD *)(v78 + 16) = v80 + 1;
          v81 = v78 + v98 + v80 * v75;
          v72 = v99;
          (*(void (**)(unint64_t, char *, uint64_t))(v99 + 32))(v81, v15, v8);
          v100[0] = v78;
          v74 += v75;
          --v71;
        }
        while (v71);
        swift_bridgeObjectRelease();
        v69 = v89;
        v68 = (void (*)(uint64_t, uint64_t, uint64_t))v91;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v82 = v92;
      sub_23FB2EAB0();
      v83 = swift_allocBox();
      v68(v84, v82, v69);
      v85 = v97;
      *v97 = v83;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v87 + 104))(v85, v96, v88);
      sub_23F7E7734();
      sub_23FB2EAEC();
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v82, v69);
      goto LABEL_22;
    }
    v30 = (*(uint64_t (**)(uint64_t *, uint64_t))(v87 + 8))(v24, v88);
  }
LABEL_23:
  sub_23F77DC10(v30, &qword_256EAB780);
  sub_23F693DDC();
}

void sub_23F7E6C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_23F6B50E8();
  type metadata accessor for TranscriptProtoParameterCandidatesNotFound(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B51A4();
  v44 = v4;
  v5 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoParameterNotAllowed(v5);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5268();
  v7 = sub_23FB2EB1C();
  v46 = *(_QWORD *)(v7 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693E0C();
  v45 = v9;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v42 - v11;
  type metadata accessor for TranscriptProtoParameterDisambiguation(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F6B51A4();
  v43 = v14;
  v15 = sub_23F6D398C();
  type metadata accessor for TranscriptProtoParameterConfirmation(v15);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B5298();
  v17 = type metadata accessor for TranscriptProtoStatementOutcomeEnum(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6BD134();
  v21 = v20 - v19;
  sub_23F7E7704(v1, v20 - v19, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch((int)EnumCaseMultiPayload)
  {
    case 3:
      sub_23F7E7834(EnumCaseMultiPayload, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
      sub_23F7E76D0(v21, v0, type metadata accessor for TranscriptProtoParameterConfirmation);
      if (!sub_23F7E778C())
        sub_23F7E6640();
      sub_23F7E7704(v0, v1, type metadata accessor for TranscriptProtoParameterConfirmation);
      sub_23F7E7898();
      swift_storeEnumTagMultiPayload();
      v24 = v0;
      v25 = type metadata accessor for TranscriptProtoParameterConfirmation;
      break;
    case 4:
      v26 = v43;
      sub_23F7E76D0(v21, v43, type metadata accessor for TranscriptProtoParameterDisambiguation);
      v27 = *(_QWORD *)(v26 + 16);
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v42[1] = v17;
        v42[2] = v1;
        v47 = MEMORY[0x24BEE4AF8];
        sub_23F6B6548();
        sub_23F711334();
        v29 = v46;
        sub_23F78F3B0();
        v42[0] = v27;
        v44 = v30;
        v31 = v27 + v30;
        v32 = *(_QWORD *)(v29 + 72);
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
        do
        {
          v34 = v45;
          v33(v45, v31, v7);
          v33((uint64_t)v12, v34, v7);
          sub_23F7E6640();
          sub_23F7E78BC(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
          v35 = v47;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23F7E7854();
            v35 = v47;
          }
          v37 = *(_QWORD *)(v35 + 16);
          v36 = *(_QWORD *)(v35 + 24);
          if (v37 >= v36 >> 1)
          {
            sub_23F78F598(v36);
            sub_23F7E7854();
            v35 = v47;
          }
          *(_QWORD *)(v35 + 16) = v37 + 1;
          v29 = v46;
          v38 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v46 + 32))(v35 + v44 + v37 * v32, v12, v7);
          v47 = v35;
          v31 += v32;
          --v28;
        }
        while (v28);
      }
      else
      {
        v38 = sub_23F6B6548();
        v35 = MEMORY[0x24BEE4AF8];
      }
      sub_23F7E7834(v38, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
      swift_bridgeObjectRelease();
      v41 = v43;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v41 + 16) = v35;
      v39 = type metadata accessor for TranscriptProtoParameterDisambiguation;
      sub_23F7E7808(v41);
      sub_23F7E7898();
      swift_storeEnumTagMultiPayload();
      v24 = v41;
      goto LABEL_22;
    case 5:
      sub_23F7E7834(EnumCaseMultiPayload, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
      sub_23F7E76D0(v21, v2, type metadata accessor for TranscriptProtoParameterNotAllowed);
      if (!sub_23F7E778C())
        sub_23F7E6640();
      v39 = type metadata accessor for TranscriptProtoParameterNotAllowed;
      sub_23F7E7808(v2);
      sub_23F7E7898();
      swift_storeEnumTagMultiPayload();
      v24 = v2;
      goto LABEL_22;
    case 6:
      sub_23F7E7834(EnumCaseMultiPayload, type metadata accessor for TranscriptProtoStatementOutcomeEnum);
      v40 = v44;
      sub_23F7E76D0(v21, v44, type metadata accessor for TranscriptProtoParameterCandidatesNotFound);
      if (!sub_23F7E778C())
        sub_23F7E6640();
      v39 = type metadata accessor for TranscriptProtoParameterCandidatesNotFound;
      sub_23F7E7808(v40);
      sub_23F7E7898();
      swift_storeEnumTagMultiPayload();
      v24 = v40;
LABEL_22:
      v25 = v39;
      break;
    default:
      v25 = type metadata accessor for TranscriptProtoStatementOutcomeEnum;
      v24 = v21;
      break;
  }
  sub_23F6D3508(v24, v25);
  sub_23F693DDC();
}

Swift::Void __swiftcall Session.RecoverableError.logFailure()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  sub_23F6B50E8();
  v2 = sub_23FB2E7F8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B5298();
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  sub_23F6B6254();
  swift_bridgeObjectRetain();
  sub_23F6B6548();
  sub_23FB2E3CC();
  sub_23F6B6254();
  swift_bridgeObjectRetain();
  sub_23F6B6548();
  v6 = sub_23FB2E7E0();
  v7 = sub_23FB2F5F0();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315138;
    sub_23F6B6548();
    sub_23F69334C(v4, v5, &v9);
    sub_23FB2F680();
    sub_23F6B6740();
    sub_23F6B6740();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23F68F000, v6, v7, "ModelOutputError: %s", v8, 0xCu);
    swift_arrayDestroy();
    sub_23F693DD0();
  }

  sub_23F6B6740();
  sub_23F6B6740();
  sub_23F6B6740();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
  sub_23F693DDC();
}

void sub_23F7E7244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t i;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = sub_23FB2EB1C();
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v50 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23F6916B8(&qword_256EAB768);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v55 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v56 = (uint64_t)&v49 - v7;
  v8 = type metadata accessor for TranscriptProtoActionParameterValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v63 = (uint64_t)&v49 - v13;
  sub_23F6916B8(&qword_256EAB770);
  v14 = sub_23FB2F98C();
  v15 = (uint64_t)v12;
  v16 = (_QWORD *)v14;
  v17 = 0;
  v60 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v57 = v19;
  v58 = (unint64_t)(v21 + 63) >> 6;
  v59 = v14 + 64;
  v53 = v15;
  v54 = v9;
  if ((v22 & v18) == 0)
    goto LABEL_5;
LABEL_4:
  v24 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v61 = v17;
  for (i = v24 | (v17 << 6); ; i = __clz(__rbit64(v27)) + (v28 << 6))
  {
    v30 = *(_QWORD *)(v60 + 56);
    v31 = (uint64_t *)(*(_QWORD *)(v60 + 48) + 16 * i);
    v32 = v31[1];
    v62 = *v31;
    v33 = *(_QWORD *)(v9 + 72) * i;
    v34 = v63;
    sub_23F7E7704(v30 + v33, v63, type metadata accessor for TranscriptProtoActionParameterValue);
    sub_23F7E7704(v34, v15, type metadata accessor for TranscriptProtoActionParameterValue);
    v35 = type metadata accessor for TranscriptProtoToolParameterValue(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v15, 1, v35))
    {
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    v36 = v15;
    v38 = (uint64_t)v55;
    v37 = v56;
    sub_23F7A1EDC(v36, v56, &qword_256EAB768);
    v39 = type metadata accessor for TranscriptProtoToolParameterValueEnum(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v37, 1, v39) == 1)
    {
      swift_bridgeObjectRetain();
      v40 = v37;
LABEL_26:
      v15 = v53;
      v9 = v54;
      goto LABEL_27;
    }
    v41 = v37;
    v42 = v38;
    sub_23F7A1EDC(v41, v38, &qword_256EAB768);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      swift_bridgeObjectRetain();
      sub_23F6D3508(v38, type metadata accessor for TranscriptProtoToolParameterValueEnum);
      v40 = v56;
      goto LABEL_26;
    }
    v43 = v50;
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
    v44(v50, v42, v52);
    swift_bridgeObjectRetain();
    sub_23F7E6640();
    v15 = v53;
    sub_23F6B4F84(v53, &qword_256EAB768);
    v44((char *)v15, (uint64_t)v43, v52);
    swift_storeEnumTagMultiPayload();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v15, 0, 1, v39);
    v40 = v56;
    v9 = v54;
LABEL_27:
    sub_23F6B4F84(v40, &qword_256EAB768);
LABEL_28:
    sub_23F6D3508(v63, type metadata accessor for TranscriptProtoActionParameterValue);
    *(_QWORD *)(v59 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v45 = (_QWORD *)(v16[6] + 16 * i);
    *v45 = v62;
    v45[1] = v32;
    sub_23F7E76D0(v15, v16[7] + v33, type metadata accessor for TranscriptProtoActionParameterValue);
    v46 = v16[2];
    v47 = __OFADD__(v46, 1);
    v48 = v46 + 1;
    if (v47)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v16[2] = v48;
    v17 = v61;
    if (v23)
      goto LABEL_4;
LABEL_5:
    v26 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_33;
    if (v26 >= v58)
      return;
    v27 = *(_QWORD *)(v57 + 8 * v26);
    v28 = v17 + 1;
    if (!v27)
    {
      v28 = v17 + 2;
      if (v17 + 2 >= v58)
        return;
      v27 = *(_QWORD *)(v57 + 8 * v28);
      if (!v27)
      {
        v28 = v17 + 3;
        if (v17 + 3 >= v58)
          return;
        v27 = *(_QWORD *)(v57 + 8 * v28);
        if (!v27)
          break;
      }
    }
LABEL_18:
    v23 = (v27 - 1) & v27;
    v61 = v28;
  }
  v29 = v17 + 4;
  if (v17 + 4 >= v58)
    return;
  v27 = *(_QWORD *)(v57 + 8 * v29);
  if (v27)
  {
    v28 = v17 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v58)
      return;
    v27 = *(_QWORD *)(v57 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
}

void sub_23F7E76D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_23F6F59F8(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_23F694CC8();
}

void sub_23F7E7704(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_23F6F59F8(a1, a2, a3);
  sub_23F6F0A3C(v3);
  sub_23F694CC8();
}

uint64_t sub_23F7E7724(uint64_t a1)
{
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v1, 1, a1);
}

uint64_t sub_23F7E7734()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, 0, 1, v1);
}

uint64_t sub_23F7E7748()
{
  return 0;
}

void sub_23F7E7760(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_23F7E76D0(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_23F7E776C()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, 0, 1, v1);
}

uint64_t sub_23F7E7780()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23F7E778C()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v0, 1, v1);
}

BOOL sub_23F7E779C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_23F7E77AC()
{
  uint64_t v0;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(*(_QWORD *)(v0 - 432), 1, *(_QWORD *)(v0 - 424));
}

uint64_t sub_23F7E77DC()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(*(_QWORD *)(v1 - 432), 1, v0);
}

void sub_23F7E7808(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_23F7E7704(a1, v2, v1);
}

void sub_23F7E7814(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F7E76D0(a1, a2, v2);
}

void sub_23F7E781C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F7E7704(a1, a2, v2);
}

uint64_t sub_23F7E7824()
{
  uint64_t v0;
  uint64_t v1;

  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v0, 1, *(_QWORD *)(v1 - 128));
}

void sub_23F7E7834(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F6D3508(v2, a2);
}

void sub_23F7E783C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F7E76D0(a1, a2, v2);
}

void sub_23F7E7854()
{
  sub_23F711334();
}

void sub_23F7E785C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_23F7E7704(v4, v3, a3);
}

void sub_23F7E7868(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_23F7E7704(v4, v3, a3);
}

void sub_23F7E7874()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_23F6D3508(v1, v0);
}

uint64_t sub_23F7E7898()
{
  uint64_t v0;

  return v0;
}

void sub_23F7E78B0()
{
  sub_23F75458C();
}

uint64_t sub_23F7E78BC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23F7E78C8()
{
  return 0;
}

uint64_t sub_23F7E78D4()
{
  return sub_23FB2EB7C();
}

uint64_t sub_23F7E78E0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23F7123E4(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(sub_23FB2C764() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = sub_23FB2C758();
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_23F7123E4((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_DWORD *)(v11 + 4 * v9 + 32) = v7;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23F7E79D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  void (*v25)(uint64_t *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_23F6B5220();
  v49 = v4;
  v50 = v5;
  v34 = v6;
  v35 = v7;
  v46 = v1;
  v9 = v8;
  v42 = v10;
  v43 = v11;
  v33 = *(_QWORD *)(v6 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B51A4();
  v44 = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F7F6318();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B5268();
  v17 = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(v17 - 8);
  v37 = v17;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v18);
  v32 = (uint64_t)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F7F6400();
  v21 = sub_23FB2F554();
  if (!v21)
    return sub_23FB2F428();
  v22 = v21;
  v48 = sub_23FB2F8A8();
  sub_23F7F69D0();
  v38 = sub_23FB2F8B4();
  sub_23FB2F86C();
  v40 = v9;
  result = sub_23FB2F53C();
  if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = v22;
    v39 = v2;
    while (v24)
    {
      v45 = v24;
      v25 = (void (*)(uint64_t *, _QWORD))sub_23FB2F5C0();
      (*(void (**)(uint64_t))(v14 + 16))(v3);
      v25(&v47, 0);
      v26 = v0;
      v27 = v46;
      v42(v3, v44);
      if (v27)
      {
        sub_23F7F677C();
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v0, v37);
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v35, v44, v34);
      }
      v46 = 0;
      sub_23F7F677C();
      sub_23FB2F89C();
      result = sub_23FB2F578();
      v24 = v45 - 1;
      if (v45 == 1)
      {
        v29 = v36;
        v28 = v37;
        v30 = v32;
        sub_23F6D3ECC(v32, v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32));
        sub_23FB2F758();
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
        return v48;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void TailTranscriptProtocol.event(forId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23F6B50E8();
  sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B52B0();
  sub_23F7F69D0();
  swift_getAssociatedTypeWitness();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7F6240();
  sub_23F7F62D0();
  sub_23FB2F65C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F7F6400();
  sub_23FB2D034();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F7F65B0();
  sub_23FB2F548();
  sub_23F7F66E4();
}

void TailTranscriptProtocol.firstUnusedStatementIdIndex.getter()
{
  uint64_t v0;

  sub_23F6B50E8();
  sub_23F7F69D0();
  sub_23FB2F7C4();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F7F6240();
  sub_23F7F61B8();
}

void sub_23F7E8068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F7F696C();
  sub_23FB2F968();
  sub_23F7F6808();
  *(_QWORD *)(v0 - 120) = v1;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F7F62C0();
  sub_23F6AE310(&qword_256EAB788);
  sub_23F7F6238();
}

void sub_23F7E80B0()
{
  sub_23F7F6700();
  sub_23FB2F8F0();
  sub_23F7F63C0();
}

void sub_23F7E80D0()
{
  sub_23F7F67F0();
  sub_23F7F63C0();
}

void sub_23F7E80E4()
{
  uint64_t v0;

  sub_23FB2F8F0();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F7F65B0();
  sub_23FB2F32C();
  sub_23F77E668();
  sub_23FB2F104();
  sub_23F7F61B8();
}

void sub_23F7E814C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  sub_23F7F6238();
}

void sub_23F7E8160()
{
  uint64_t v0;

  sub_23FB2F9BC();
  sub_23F7F6308(*(_QWORD *)(v0 - 120));
  sub_23F7F62F0();
}

void sub_23F7E819C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  sub_23FB2F350();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  v4 = *(_DWORD *)(v3 - 96);
  if (*(_BYTE *)(v3 - 92))
    v4 = 0;
  if (v4 == -1)
    __break(1u);
  else
    sub_23F693DDC();
}

void TailTranscriptProtocol.latestQueryEvent()()
{
  sub_23F6B50E8();
  sub_23F7F6700();
  sub_23FB2D034();
  sub_23F7F62F0();
}

void sub_23F7E8240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_23FB2F7C4();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F7F65B0();
  v6 = *(_QWORD *)(v2 - 8);
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F7F62C0();
  *(_QWORD *)(v3 - 200) = *(_QWORD *)(sub_23FB2F950() - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F693E0C();
  *(_QWORD *)(v3 - 224) = v9;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F7F6400();
  sub_23FB2F548();
  sub_23FB2F32C();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v2);
  v11 = swift_allocObject();
  v12 = *(_QWORD *)(v3 - 192);
  *(_QWORD *)(v11 + 16) = v0;
  *(_QWORD *)(v11 + 24) = v12;
  MEMORY[0x242674E5C](MEMORY[0x24BEE25B0], v4);
  sub_23F7F66D8();
  sub_23FB2F9C8();
  swift_release();
  sub_23F7F63F0();
}

void sub_23F7E836C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  sub_23FB2F9D4();
  v3 = *(void (**)(uint64_t))(*(_QWORD *)(v2 - 200) + 8);
  v4 = sub_23F6B5FE0();
  v3(v4);
  *(_QWORD *)(v2 - 112) = v0;
  *(_QWORD *)(v2 - 104) = v1;
  *(_QWORD *)(v2 - 160) = v0;
  *(_QWORD *)(v2 - 152) = v1;
  *(_QWORD *)(v2 - 144) = sub_23F7F5DEC;
  *(_QWORD *)(v2 - 136) = v2 - 128;
  sub_23F6BDE50();
  sub_23F7F670C();
  sub_23F7F6714();
  sub_23F7F6630();
  sub_23F7F63F0();
}

void sub_23F7E8408()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23F772110();
  v5 = v4;
  v1(v2, v0);
  *(_QWORD *)(v3 - 96) = v5;
  sub_23FB2F488();
  sub_23F7F61B8();
}

void sub_23F7E846C()
{
  sub_23FB2F0F8();
  swift_bridgeObjectRelease();
  sub_23F693DDC();
}

void TailTranscriptProtocol.latestQuery()()
{
  uint64_t v0;

  sub_23F7F6824();
  sub_23F7F6964();
  sub_23F7F670C();
  sub_23F7F6714();
  sub_23F7F66EC();
  sub_23F7F6630();
  sub_23F7F698C();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F7F6240();
  sub_23F78F478();
  TailTranscriptProtocol.latestQueryEvent()();
}

uint64_t sub_23F7E8530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v1;
  *(_QWORD *)(v5 - 144) = v2;
  *(_QWORD *)(v5 - 136) = v1;
  *(_QWORD *)(v5 - 128) = sub_23F7F5E14;
  *(_QWORD *)(v5 - 120) = v5 - 112;
  v6 = sub_23F7F62D0();
  sub_23F7E9964((void (*)(char *, char *))sub_23F7F5E1C, v5 - 160, MEMORY[0x24BEE4078], v6, v7, v0);
  return sub_23F6B563C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
}

Swift::OpaquePointer_optional __swiftcall TailTranscriptProtocol.latestSpeechQuery()()
{
  uint64_t v0;

  sub_23F7F6824();
  sub_23F6BDE50();
  sub_23F7F670C();
  sub_23F7F6714();
  sub_23F7F6630();
  sub_23F7F698C();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F7F6814();
  TailTranscriptProtocol.latestQueryEvent()();
}

uint64_t sub_23F7E865C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 - 80) = v1;
  *(_QWORD *)(v4 - 72) = v0;
  v5 = sub_23F6916B8(&qword_256EAB790);
  sub_23F7E9964((void (*)(char *, char *))sub_23F7F5E3C, v4 - 96, MEMORY[0x24BEE4078], v5, v6, v4 - 56);
  sub_23F6B530C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return *(_QWORD *)(v4 - 56);
}

Swift::Int __swiftcall TailTranscriptProtocol.countClientSentEvents()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6B50E8();
  sub_23FB2F7C4();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F7F69E8();
  sub_23FB2F950();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7F6240();
  sub_23FB2F32C();
  sub_23F7F63F0();
}

void sub_23F7E8768()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7F6574();
  sub_23FB2F9C8();
  *(_QWORD *)(v1 - 88) = v0;
  sub_23F7F6608();
}

void sub_23F7E8794()
{
  uint64_t v0;
  uint64_t v1;

  sub_23FB2F590();
  sub_23F6B563C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_23F7F678C();
  sub_23F693DDC();
}

Swift::String_optional __swiftcall TailTranscriptProtocol.latestClientIdentifier()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6B50E8();
  sub_23F7F69FC(v0, v1);
  sub_23FB2F968();
  sub_23F7F61B8();
}

void sub_23F7E87F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_23F7F6980();
  *(_QWORD *)(v3 - 176) = a1;
  sub_23FB2F7C4();
  sub_23F7F6808();
  *(_QWORD *)(v3 - 128) = v5;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v3 - 168) = *(_QWORD *)(v2 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B59F8();
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v1 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F7F6814();
  sub_23F6AE310(&qword_256EAB798);
  sub_23FB2F8F0();
  sub_23F7F63C0();
}

void sub_23F7E8898()
{
  sub_23F7F67F0();
  sub_23F7F62F0();
}

void sub_23F7E88AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 152) = *(_QWORD *)(sub_23FB2F8F0() - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F7F62C0();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 168) + 16))(v0, *(_QWORD *)(v3 - 136), v2);
  sub_23FB2F104();
  sub_23FB2F32C();
  sub_23F6B56E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8));
  sub_23F7F6238();
}

void sub_23F7E893C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23FB2F9BC();
  sub_23F78F1E4(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 128) + 8));
  sub_23F7F61B8();
}

void sub_23F7E8980(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  sub_23F7F63C0();
}

void sub_23F7E8998(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  sub_23F7F62F0();
}

void sub_23F7E89AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 120) = a1;
  v4 = sub_23F77E668();
  MEMORY[0x242674E5C](v4);
  sub_23FB2F59C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 152) + 8))(v1, v2);
  sub_23F693DDC();
}

void __swiftcall TailTranscriptProtocol.latestPlan()(IntelligenceFlowPlannerSupport::Session::Plan_optional *__return_ptr retstr)
{
  uint64_t v1;

  sub_23F6B50E8();
  sub_23F7F6824();
  swift_getAssociatedTypeWitness();
  sub_23F7F6700();
  sub_23F7F62D0();
  sub_23F7F69C4();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v1);
  TailTranscriptProtocol.latestPlanAndIndex()();
}

void TailTranscriptProtocol.clientActionStepExists(id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  sub_23F6B50E8();
  v55 = v0;
  v3 = v2;
  v5 = v4;
  v57 = v6;
  v54 = sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  v53 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B6580();
  v56 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
  v49 = *(_QWORD *)(v12 + 8);
  v61 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  v59 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B6580();
  v60 = v16;
  v58 = *(_QWORD *)(v5 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F77E1CC();
  sub_23FB2F968();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v48 - v19;
  v21 = sub_23FB2F95C();
  v51 = *(_QWORD *)(v21 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B631C();
  v25 = v23 - v24;
  MEMORY[0x24BDAC7A8](v26);
  sub_23F77E490();
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
  v27(v0, v55, v5);
  v55 = v12;
  v28 = v49;
  sub_23FB2F104();
  v29 = sub_23F7F6694();
  ((void (*)(uint64_t))v27)(v29);
  v30 = v60;
  sub_23FB2F56C();
  sub_23F6B56E0((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
  v31 = v61;
  sub_23F77DD54(v25 + *(int *)(v21 + 36), v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32));
  v32 = sub_23F7F67BC();
  v33(v32);
  v50 = v21;
  v58 = *(_QWORD *)(v31 + 16);
  while (1)
  {
    v34 = v60;
    sub_23F7F66EC();
    ((void (*)(void))v58)();
    v35 = (uint64_t)v59;
    sub_23FB2F53C();
    sub_23F7F6980();
    swift_getAssociatedConformanceWitness();
    sub_23F6B5EE4();
    v36 = sub_23F6B5D84();
    sub_23F77DC80(v35);
    sub_23F77DC80(v34);
    if ((v36 & 1) != 0)
      break;
    sub_23FB2F0EC();
    v37 = v28;
    v38 = sub_23FB2F5C0();
    v40 = sub_23F7F6640(v38, v39);
    v41 = v56;
    sub_23F7F6328(v40, v56);
    sub_23F7F6638((uint64_t)&v62);
    sub_23F7E76D0(v41, v1, type metadata accessor for Session.Event);
    if ((sub_23FB2C4A0() & 1) != 0)
    {
      v42 = v53;
      sub_23F7E7704(v1 + *(int *)(v52 + 28), v53, type metadata accessor for Session.Event.Payload);
      v43 = sub_23F7F6770();
      sub_23F7F6140(v43, v44);
      if (sub_23F7F69A0() == 7)
      {
        v47 = sub_23F7F67E0();
        sub_23F7F6998(v47, type metadata accessor for Session.Event.Payload);
        goto LABEL_9;
      }
      v45 = v42;
      v46 = type metadata accessor for Session.Event.Payload;
    }
    else
    {
      v45 = sub_23F7F6770();
    }
    sub_23F7F6140(v45, v46);
    v28 = v37;
  }
  sub_23F7F67E0();
LABEL_9:
  sub_23F693DDC();
}

uint64_t sub_23F7E8EB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = type metadata accessor for Session.Event.Payload(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v22 - v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Session.Event(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v22 - v12;
  v14 = *(int *)(v11 + 48);
  v15 = (uint64_t)&v13[v14];
  v16 = a1 + v14;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, a1, AssociatedTypeWitness);
  sub_23F7E7704(v16, v15, type metadata accessor for Session.Event);
  sub_23F7E7704(v15 + *(int *)(v9 + 28), (uint64_t)v7, type metadata accessor for Session.Event.Payload);
  sub_23F7F6140(v15, type metadata accessor for Session.Event);
  sub_23F7E7704((uint64_t)v7, (uint64_t)v5, type metadata accessor for Session.Event.Payload);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 3)
  {
    v19 = 1;
LABEL_4:
    sub_23F7F6140((uint64_t)v5, type metadata accessor for Session.Event.Payload);
    v20 = v19;
    goto LABEL_5;
  }
  v19 = 0;
  v20 = 0;
  if (EnumCaseMultiPayload != 48)
    goto LABEL_4;
LABEL_5:
  sub_23F7F6140((uint64_t)v7, type metadata accessor for Session.Event.Payload);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v13, AssociatedTypeWitness);
  return v20;
}

void sub_23F7E90AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a4, AssociatedTypeWitness);
  v11 = sub_23FB2C4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a2, a5, v11);
  sub_23F7E7704(a5, a3, type metadata accessor for Session.Event);
}

uint64_t sub_23F7E915C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t TupleTypeMetadata3;

  swift_getAssociatedTypeWitness();
  type metadata accessor for Session.Event(255);
  v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  sub_23FB2C4B8();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a3, a3 + *(int *)(TupleTypeMetadata3 + 48), a3 + *(int *)(TupleTypeMetadata3 + 64), a1, v6);
}

uint64_t sub_23F7E924C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a1;
  v67 = a3;
  v4 = type metadata accessor for RequestContent.TextContent(0);
  MEMORY[0x24BDAC7A8](v4);
  v59 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = type metadata accessor for RequestContent(0);
  MEMORY[0x24BDAC7A8](v61);
  v62 = (uint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = sub_23FB2F65C();
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)&v58 - v10;
  v11 = sub_23F6916B8(&qword_256EAB740);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v58 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v58 - v14);
  v16 = type metadata accessor for Request(0);
  MEMORY[0x24BDAC7A8](v16);
  v60 = (uint64_t)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Session.Event.Payload(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v58 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v58 - v25;
  v27 = type metadata accessor for TextQuery(0);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (uint64_t *)((char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = a2 + *(int *)(type metadata accessor for Session.Event(0) + 28);
  sub_23F7E7704(v30, (uint64_t)v26, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23F7E76D0((uint64_t)v26, (uint64_t)v29, type metadata accessor for TextQuery);
    v31 = v67;
    v32 = (_QWORD *)(v67 + *(int *)(TupleTypeMetadata2 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v67, v66, AssociatedTypeWitness);
    v34 = *v29;
    v33 = v29[1];
    swift_bridgeObjectRetain();
    sub_23F7F6140((uint64_t)v29, type metadata accessor for TextQuery);
    *v32 = v34;
    v32[1] = v33;
    v35 = v31;
LABEL_11:
    v47 = 0;
    v48 = TupleTypeMetadata2;
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v35, v47, 1, v48);
  }
  v36 = v67;
  sub_23F7F6140((uint64_t)v26, type metadata accessor for Session.Event.Payload);
  sub_23F7E7704(v30, (uint64_t)v24, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v37 = (_QWORD *)(v36 + *(int *)(TupleTypeMetadata2 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v36, v66, AssociatedTypeWitness);
    sub_23F70E3B0();
    v38 = type metadata accessor for SpeechRequestCandidate(0);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v15, 1, v38) == 1)
    {
      sub_23F7F6110((uint64_t)v15, &qword_256EAB740);
      v39 = 0;
      v40 = 0xE000000000000000;
    }
    else
    {
      v39 = *v15;
      v40 = v15[1];
      swift_bridgeObjectRetain();
      sub_23F7F6140((uint64_t)v15, type metadata accessor for SpeechRequestCandidate);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v37 = v39;
    v37[1] = v40;
    v35 = v36;
    goto LABEL_11;
  }
  sub_23F7F6140((uint64_t)v24, type metadata accessor for Session.Event.Payload);
  sub_23F7E7704(v30, (uint64_t)v21, type metadata accessor for Session.Event.Payload);
  v41 = TupleTypeMetadata2;
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_23F7F6140((uint64_t)v21, type metadata accessor for Session.Event.Payload);
    v35 = v36;
    v47 = 1;
    v48 = TupleTypeMetadata2;
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v35, v47, 1, v48);
  }
  v42 = v60;
  sub_23F7E76D0((uint64_t)v21, v60, type metadata accessor for Request);
  v43 = v62;
  sub_23F7E7704(v42, v62, type metadata accessor for RequestContent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v45 = (uint64_t)v63;
  v46 = v66;
  switch(EnumCaseMultiPayload)
  {
    case 0:
    case 3:
      sub_23F7F6140(v42, type metadata accessor for Request);
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v45, 1, 1, TupleTypeMetadata2);
      sub_23F7F6140(v43, type metadata accessor for RequestContent);
      goto LABEL_21;
    case 1:
      sub_23F7F6140(v42, type metadata accessor for Request);
      v50 = v59;
      sub_23F7E76D0(v43, (uint64_t)v59, type metadata accessor for RequestContent.TextContent);
      v51 = (char *)(v45 + *(int *)(TupleTypeMetadata2 + 48));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v45, v46, AssociatedTypeWitness);
      v53 = *v50;
      v52 = v50[1];
      swift_bridgeObjectRetain();
      v54 = (uint64_t)v50;
      v55 = type metadata accessor for RequestContent.TextContent;
      goto LABEL_20;
    case 2:
      v51 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v63, v66, AssociatedTypeWitness);
      v56 = (uint64_t *)v58;
      sub_23F70E3B0();
      v57 = type metadata accessor for SpeechRequestCandidate(0);
      if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v56, 1, v57) == 1)
      {
        sub_23F7F6110((uint64_t)v56, &qword_256EAB740);
        v53 = 0;
        v52 = 0xE000000000000000;
      }
      else
      {
        v53 = *v56;
        v52 = v56[1];
        swift_bridgeObjectRetain();
        sub_23F7F6140((uint64_t)v56, type metadata accessor for SpeechRequestCandidate);
      }
      swift_bridgeObjectRelease();
      v55 = type metadata accessor for Request;
      v54 = v42;
LABEL_20:
      sub_23F7F6140(v54, v55);
      *(_QWORD *)v51 = v53;
      *((_QWORD *)v51 + 1) = v52;
      _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v45, 0, 1, v41);
LABEL_21:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v36, v45, v65);
      break;
    default:
      result = sub_23FB2FB6C();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_23F7E989C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata3;

  swift_getAssociatedTypeWitness();
  sub_23FB2C4B8();
  type metadata accessor for Session.Event(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata3 + 48), a1 + *(int *)(TupleTypeMetadata3 + 64));
}

uint64_t sub_23F7E9964@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);

  v25 = a5;
  v26 = a4;
  v27 = a2;
  v28 = a1;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v20, 1, v14) == 1)return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a6, 1, 1, v26);
  v26 = a3;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v26);
  return result;
}

uint64_t sub_23F7E9AEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata3;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v29 = a2;
  v28 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v28);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_23FB2C4B8();
  v7 = type metadata accessor for Session.Event(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v11 = (char *)&v24 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = &v11[v12];
  v14 = *(int *)(v9 + 64);
  v15 = (uint64_t)&v11[v14];
  v16 = a1;
  v17 = a1 + v12;
  v18 = v16 + v14;
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = *(void (**)(char *))(v27 + 16);
  v25 = AssociatedTypeWitness;
  v19(v11);
  v20 = *(_QWORD *)(v6 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v26 = v13;
  v21(v13, v17, v6);
  sub_23F7E7704(v18, v15, type metadata accessor for Session.Event);
  sub_23F7E7704(v15 + *(int *)(v7 + 28), (uint64_t)v4, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v22 = *v4;
    sub_23F7F6140(v15, type metadata accessor for Session.Event);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v25);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    sub_23F7F6140((uint64_t)v4, type metadata accessor for Session.Event.Payload);
    sub_23F7F6140(v15, type metadata accessor for Session.Event);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v6);
    result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v11, v25);
    v22 = 0;
  }
  *v29 = v22;
  return result;
}

uint64_t sub_23F7E9D34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(a1 + *(int *)(sub_23F7E52BC() + 52));
  v2 = v1[1];
  if (!v2)
    return 0;
  if (*v1 == 0x746E65696C63 && v2 == 0xE600000000000000)
    return 1;
  else
    return sub_23FB2FB78();
}

void sub_23F7E9DB0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;

  sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23F77E1CC();
  v7 = type metadata accessor for Session.Event(v6);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v2, type metadata accessor for Session.Event.Payload);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 11)
  {
    v9 = *v2;
    v10 = v2[1];
  }
  else
  {
    sub_23F7F6998(EnumCaseMultiPayload, type metadata accessor for Session.Event.Payload);
    v9 = 0;
    v10 = 0;
  }
  *a2 = v9;
  a2[1] = v10;
}

void TailTranscriptProtocol.latestPlanAndIndex()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[10];
  uint64_t v12;

  sub_23F6B50E8();
  v11[0] = v0;
  v11[6] = sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  v11[3] = (uint64_t)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F7F62A0(v5, v11[0]);
  sub_23F7F69D0();
  v11[7] = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F7F64E0();
  v11[4] = v7;
  v11[5] = v3;
  sub_23F7F62D0();
  v12 = sub_23FB2F65C();
  v11[8] = *(_QWORD *)(v12 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F7F69AC();
  sub_23FB2D034();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F7F6318();
  sub_23FB2F548();
  sub_23F7F6608();
}

Swift::Bool __swiftcall TailTranscriptProtocol.isSafetyModeEnabled()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int EnumCaseMultiPayload;
  uint64_t v47;
  uint64_t v48;
  Swift::Bool result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_23F6B50E8();
  v54 = v0;
  v3 = v2;
  v53 = type metadata accessor for Request(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  v52 = v5;
  v6 = sub_23F6D398C();
  type metadata accessor for TextQuery(v6);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v7);
  v51 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B5598(v10, v50);
  v57 = sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F7F62A0(v12, v50);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v14 + 8);
  v16 = sub_23F7F6964();
  v63 = *(_QWORD *)(v16 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  v60 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v50 - v20;
  v61 = *(_QWORD *)(v3 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F7F6584();
  v62 = v14;
  sub_23FB2F968();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v25);
  sub_23F7F6318();
  sub_23F7F6584();
  sub_23FB2F95C();
  sub_23F7F68B0();
  v55 = v26;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v27);
  sub_23F6B631C();
  v30 = v28 - v29;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v50 - v32;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v34(v24, v54, v3);
  sub_23F7F6844();
  v34((char *)v30, v1, v3);
  sub_23FB2F56C();
  sub_23F6B530C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
  v35 = v63;
  sub_23F77DD54(v30 + *(int *)(v14 + 36), (uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
  sub_23F75E710((uint64_t)v33, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32));
  v54 = v14;
  v61 = *(_QWORD *)(v35 + 16);
  while (1)
  {
    v36 = sub_23F7F6770();
    ((void (*)(uint64_t))v61)(v36);
    v37 = v60;
    sub_23FB2F53C();
    sub_23F6B5FE0();
    swift_getAssociatedConformanceWitness();
    v38 = sub_23F6B5D84();
    v39 = *(void (**)(char *, uint64_t))(v63 + 8);
    v39(v37, v16);
    v39(v21, v16);
    if ((v38 & 1) != 0)
      break;
    sub_23F7F694C();
    v40 = v15;
    v41 = sub_23FB2F5C0();
    v43 = sub_23F7F6640(v41, v42);
    v44 = v56;
    sub_23F7E7704(v43, v56, type metadata accessor for Session.Event);
    sub_23F7F6638((uint64_t)&v64);
    v45 = v59;
    sub_23F7E7704(v44 + *(int *)(v57 + 28), v59, type metadata accessor for Session.Event.Payload);
    sub_23F7F6444(v44);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 1:
        sub_23F7F6280();
        v47 = v51;
        sub_23F7F6534(v45, v51);
LABEL_11:
        sub_23F7F63F8(v47);
        goto LABEL_13;
      case 25:
        v48 = sub_23F7F6280();
        sub_23F7F67B4(v48, type metadata accessor for Session.Event.Payload);
        goto LABEL_13;
      case 3:
        sub_23F7F6280();
        v47 = v52;
        sub_23F7F6534(v45, v52);
        goto LABEL_11;
      case 2:
        sub_23F7F6280();
        swift_bridgeObjectRelease();
        sub_23F693DFC();
        goto LABEL_13;
    }
    sub_23F7F6140(v45, type metadata accessor for Session.Event.Payload);
    v15 = v40;
  }
  sub_23F7F6280();
LABEL_13:
  sub_23F693DDC();
  return result;
}

void TailTranscriptProtocol.latestToolRetrievalResponse()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6B50E8();
  sub_23F7F6210(v0, v1);
  sub_23F7F6238();
}

void sub_23F7EA6CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 - 120) = *(_QWORD *)(sub_23F7F62D8(a1) - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v2 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v3 - 152) = *(_QWORD *)(v1 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F7F62C0();
  sub_23F6AE310(&qword_256EAB7A0);
  sub_23F7F63AC();
  sub_23F7F62F0();
}

void sub_23F7EA760()
{
  sub_23F7F64C4();
  sub_23F7F61B8();
}

void sub_23F7EA774()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 - 144) = *(_QWORD *)(sub_23F7F6674() - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7F61D4();
  sub_23F7F64B4();
  sub_23F7F635C();
  sub_23F7F6308(*(_QWORD *)(v0 - 152));
  sub_23F7F63F0();
}

void sub_23F7EA7C0()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7F6574();
  sub_23F7F6930();
  sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 120) + 8));
  sub_23F7F6238();
}

void sub_23F7EA7F8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  sub_23F7F62F0();
}

void sub_23F7EA810(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  sub_23F7F61B8();
}

void sub_23F7EA828()
{
  uint64_t v0;

  sub_23F7F6384();
  sub_23F7F62F8(*(_QWORD *)(v0 - 144));
  sub_23F693DDC();
}

void sub_23F7EA840(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t DecorationResult;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;

  v4 = sub_23F6916B8(&qword_256EA71F8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_23FB2E354();
  v7 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  DecorationResult = type metadata accessor for QueryDecorationResult(0);
  MEMORY[0x24BDAC7A8](DecorationResult);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v16 + 28), (uint64_t)v15, type metadata accessor for Session.Event.Payload);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 42)
  {
    sub_23F7E76D0((uint64_t)v15, (uint64_t)v12, type metadata accessor for QueryDecorationResult);
    sub_23F7A1EDC((uint64_t)&v12[*(int *)(DecorationResult + 28)], (uint64_t)v6, &qword_256EA71F8);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v6, 1, v32) != 1)
    {
      v31 = v7;
      v25 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v26 = v32;
      v25(v9, v6, v32);
      v18 = sub_23FB2E318();
      v19 = v27;
      v20 = sub_23FB2E324();
      v21 = v28;
      sub_23FB2E330();
      v30 = v29;
      v23 = sub_23FB2E33C();
      v24 = sub_23FB2E348();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v26);
      sub_23F7F6140((uint64_t)v12, type metadata accessor for QueryDecorationResult);
      v22 = v30;
      goto LABEL_9;
    }
    sub_23F7F6140((uint64_t)v12, type metadata accessor for QueryDecorationResult);
    sub_23F7F6110((uint64_t)v6, &qword_256EA71F8);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 28)
  {
    sub_23F7F6140((uint64_t)v15, type metadata accessor for Session.Event.Payload);
LABEL_7:
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_9;
  }
  v18 = *(_QWORD *)v15;
  v19 = *((_QWORD *)v15 + 1);
  v20 = *((_QWORD *)v15 + 2);
  v21 = *((_QWORD *)v15 + 3);
  v22 = *((_DWORD *)v15 + 8);
  v23 = *((_QWORD *)v15 + 5);
  v24 = *((_QWORD *)v15 + 6);
LABEL_9:
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  a2[4] = v22;
  a2[5] = v23;
  a2[6] = v24;
}

void TailTranscriptProtocol.latestToolResolution.getter()
{
  sub_23F7EB470();
}

void sub_23F7EAB00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v6, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 37)
  {
    sub_23F7E76D0((uint64_t)v6, a2, type metadata accessor for ToolResolution);
    v8 = type metadata accessor for ToolResolution(0);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 0, 1, v8);
  }
  else
  {
    v9 = type metadata accessor for ToolResolution(0);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 1, 1, v9);
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
  }
}

void TailTranscriptProtocol.latestToolEvent.getter()
{
  sub_23F7EB470();
}

void sub_23F7EAC20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v10;

  v4 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v6, type metadata accessor for Session.Event.Payload);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload > 0x2A || ((1 << EnumCaseMultiPayload) & 0x42010000000) == 0)
  {
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 1, 1, v7);
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
  }
  else
  {
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
    sub_23F7E7704(a1, a2, type metadata accessor for Session.Event);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 0, 1, v7);
  }
}

void TailTranscriptProtocol.latestEntitySpanMatchResult()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6B50E8();
  sub_23F7F6210(v0, v1);
  sub_23F7F6238();
}

void sub_23F7EAD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 - 120) = *(_QWORD *)(sub_23F7F62D8(a1) - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v2 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v3 - 152) = *(_QWORD *)(v1 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F7F62C0();
  sub_23F6AE310(&qword_256EAB7B0);
  sub_23F7F63AC();
  sub_23F7F62F0();
}

void sub_23F7EAE04()
{
  sub_23F7F64C4();
  sub_23F7F61B8();
}

void sub_23F7EAE18()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 - 144) = *(_QWORD *)(sub_23F7F6674() - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7F61D4();
  sub_23F7F64B4();
  sub_23F7F635C();
  sub_23F7F6308(*(_QWORD *)(v0 - 152));
  sub_23F7F63F0();
}

void sub_23F7EAE64()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7F6574();
  sub_23F7F6930();
  sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 120) + 8));
  sub_23F7F6238();
}

void sub_23F7EAE9C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  sub_23F7F62F0();
}

void sub_23F7EAEB4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  sub_23F7F61B8();
}

void sub_23F7EAECC()
{
  uint64_t v0;

  sub_23F7F6384();
  sub_23F7F62F8(*(_QWORD *)(v0 - 144));
  sub_23F693DDC();
}

void sub_23F7EAEE4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v6, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 29)
  {
    v8 = *v6;
  }
  else
  {
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
    v8 = 0;
  }
  *a2 = v8;
}

void TailTranscriptProtocol.latestEntitySpanMatchedEvent()()
{
  sub_23F7EB470();
}

void sub_23F7EAFC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v6, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 29)
  {
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
    sub_23F7E7704(a1, a2, type metadata accessor for Session.Event);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 0, 1, v7);
  }
  else
  {
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 1, 1, v7);
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
  }
}

IntelligenceFlowPlannerSupport::ContextRetrieved_optional __swiftcall TailTranscriptProtocol.latestContextRetrieved()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6B50E8();
  sub_23F7F6210(v0, v1);
  sub_23F7F6238();
}

void sub_23F7EB0F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 - 120) = *(_QWORD *)(sub_23F7F62D8(a1) - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v2 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v3 - 152) = *(_QWORD *)(v1 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F7F62C0();
  sub_23F6AE310(&qword_256EAB7B8);
  sub_23F7F63AC();
  sub_23F7F62F0();
}

void sub_23F7EB18C()
{
  sub_23F7F64C4();
  sub_23F7F61B8();
}

void sub_23F7EB1A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 - 144) = *(_QWORD *)(sub_23F7F6674() - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7F61D4();
  sub_23F7F64B4();
  sub_23F7F635C();
  sub_23F7F6308(*(_QWORD *)(v0 - 152));
  sub_23F7F63F0();
}

void sub_23F7EB1EC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7F6574();
  sub_23F7F6930();
  sub_23F6B530C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 120) + 8));
  sub_23F7F6238();
}

void sub_23F7EB224(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  sub_23F7F62F0();
}

void sub_23F7EB23C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  sub_23F7F61B8();
}

void sub_23F7EB254()
{
  uint64_t v0;

  sub_23F7F6384();
  sub_23F7F62F8(*(_QWORD *)(v0 - 144));
  sub_23F693DDC();
}

void sub_23F7EB26C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (__int128 *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v6, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 27)
  {
    v8 = *v6;
  }
  else
  {
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
    v8 = 0uLL;
  }
  *a2 = v8;
}

void TailTranscriptProtocol.latestContextRetrievedEvent()()
{
  sub_23F7EB470();
}

void sub_23F7EB34C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v6, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 27)
  {
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
    sub_23F7E7704(a1, a2, type metadata accessor for Session.Event);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 0, 1, v7);
  }
  else
  {
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 1, 1, v7);
    sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
  }
}

void TailTranscriptProtocol.latestQueryDecorationResultEvent()()
{
  sub_23F7EB470();
}

void sub_23F7EB470()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F6B50E8();
  sub_23F7F69FC(v0, v1);
  sub_23FB2F968();
  sub_23F7F63F0();
}

void sub_23F7EB4B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23F7F6584();
  *(_QWORD *)(v4 - 184) = a1;
  sub_23FB2F7C4();
  sub_23F7F68B0();
  *(_QWORD *)(v4 - 128) = v6;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F7F62C0();
  *(_QWORD *)(v4 - 176) = *(_QWORD *)(v3 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B59F8();
  *(_QWORD *)(v4 - 168) = *(_QWORD *)(v2 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F7F6240();
  sub_23F6AE310(v1);
  *(_QWORD *)(v4 - 160) = sub_23FB2F8F0();
  sub_23F7F6238();
}

void sub_23F7EB54C()
{
  void (*v0)(uint64_t);

  sub_23F7F6700();
  sub_23FB2F950();
  v0(255);
  sub_23F7F6238();
}

void sub_23F7EB574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 152) = *(_QWORD *)(sub_23FB2F8F0() - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 176) + 16))(v0, *(_QWORD *)(v3 - 136), v2);
  sub_23FB2F104();
  sub_23FB2F32C();
  sub_23F6B530C(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 168) + 8));
  sub_23F7F66E4();
}

void sub_23F7EB608()
{
  uint64_t v0;
  uint64_t v1;

  sub_23FB2F9BC();
  sub_23F6B51EC(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 128) + 8));
  sub_23F7F63F0();
}

void sub_23F7EB644(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  *(_QWORD *)(v1 - 96) = MEMORY[0x242674E5C](MEMORY[0x24BEE2B50], *(_QWORD *)(v1 - 160), v1 - 88);
  sub_23F7F6238();
}

void sub_23F7EB674(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  sub_23F7F61B8();
}

void sub_23F7EB684()
{
  uint64_t v0;
  uint64_t v1;

  sub_23FB2F59C();
  sub_23F6B56E0(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 152) + 8));
  sub_23F693DDC();
}

void sub_23F7EB6B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v7 + 28), (uint64_t)v6, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() == 42)
  {
    sub_23F7E7704(a1, a2, type metadata accessor for Session.Event);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, v8, 1, v7);
  sub_23F7F6140((uint64_t)v6, type metadata accessor for Session.Event.Payload);
}

void TailTranscriptProtocol.getQueryDecorationLookback()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[9];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_23F6B50E8();
  v31 = v0;
  v21[5] = v1;
  v2 = sub_23FB2E7F8();
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6D398C();
  v22 = sub_23FB2E1D4();
  v28 = *(_QWORD *)(v22 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  v21[7] = (uint64_t)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B6580();
  v21[8] = v8;
  sub_23F6D398C();
  v30 = sub_23FB2ED38();
  v21[6] = *(_QWORD *)(v30 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  sub_23F6B57BC(v10, v21[0]);
  sub_23F6916B8(&qword_256EA2950);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F693E0C();
  v26 = v12;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v13);
  v25 = (char *)v21 - v14;
  v29 = sub_23F7F64D4();
  v33 = *(_QWORD *)(v29 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B6B5C();
  v32 = sub_23F7F6800();
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F7F6680();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F6B52B0();
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v19);
  sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F6B573C();
  v34 = MEMORY[0x24BEE4B08];
  TailTranscriptProtocol.latestQueryDecorationResultEvent()();
}

void TailTranscriptProtocol.latestQueryDecorationResult()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F6B50E8();
  sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B6B5C();
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B5208();
  TailTranscriptProtocol.latestQueryDecorationResultEvent()();
}

void sub_23F7EBDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23F6B5164(v2, 1, v4);
  if (v5)
  {
    sub_23F7F6110(v2, &qword_256EA7A90);
LABEL_7:
    v8 = 1;
    goto LABEL_8;
  }
  sub_23F7F6534(v2, v3);
  sub_23F7E7704(v3 + *(int *)(v4 + 28), v1, type metadata accessor for Session.Event.Payload);
  sub_23F7F63F8(v3);
  sub_23F6B5EE4();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 42)
  {
    sub_23F7F6140(v1, type metadata accessor for Session.Event.Payload);
    goto LABEL_7;
  }
  sub_23F7F6978(v1, v7, type metadata accessor for QueryDecorationResult);
  v8 = 0;
LABEL_8:
  v9 = sub_23F7F6680();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v0, v8, 1, v9);
  sub_23F693DDC();
}

uint64_t sub_23F7EBEA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;

  sub_23F7E52BC();
  Session.Event.Payload.statementIds.getter();
  v3 = sub_23F7E78E0(v2);
  sub_23F693DFC();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (int *)(v3 + 32);
    v6 = MEMORY[0x24BEE4AF8];
    do
    {
      v8 = *v5++;
      v7 = v8;
      if (v8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_23F7123E4(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v10 = *(_QWORD *)(v6 + 16);
        v9 = *(_QWORD *)(v6 + 24);
        if (v10 >= v9 >> 1)
          sub_23F7123E4((char *)(v9 > 1), v10 + 1, 1);
        *(_QWORD *)(v6 + 16) = v10 + 1;
        *(_DWORD *)(v6 + 4 * v10 + 32) = v7;
      }
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v11 = sub_23F7EBFD0(v6);
  result = swift_release();
  *(_DWORD *)a1 = v11;
  *(_BYTE *)(a1 + 4) = BYTE4(v11) & 1;
  return result;
}

unint64_t sub_23F7EBFD0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_DWORD *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (unsigned int *)(a1 + 36);
      do
      {
        v6 = *v4++;
        v5 = v6;
        if (v2 <= v6)
          v2 = v5;
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    v2 = 0;
  }
  return v2 | ((unint64_t)(v1 == 0) << 32);
}

void TailTranscriptProtocol.toolForLatestIncompleteAction.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t AssociatedTypeWitness;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t (*v147)(uint64_t);
  uint64_t v148;
  uint64_t (*v149)(_QWORD);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t (*v170)(uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  int v173;
  NSObject *v174;
  os_log_type_t v175;
  uint8_t *v176;
  uint64_t (*v177)(uint64_t, _QWORD);
  uint64_t v178[8];
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t, uint64_t);
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;

  sub_23F6B50E8();
  a19 = v23;
  a20 = v24;
  v205 = v20;
  v26 = v25;
  v28 = v27;
  v29 = sub_23FB2E7F8();
  sub_23F6B53F8(v29, (uint64_t)&v204);
  v178[0] = v30;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B51A4();
  sub_23F6B5314(v32);
  sub_23F6916B8(&qword_256EAB7C8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B51A4();
  v35 = sub_23F70D434(v34);
  v178[3] = type metadata accessor for ActionResolverRequest(v35);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6B51A4();
  v38 = sub_23F70D434(v37);
  v178[5] = type metadata accessor for Action(v38);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B51A4();
  sub_23F70D434(v40);
  v41 = sub_23FB2D0DC();
  sub_23F6B53F8(v41, (uint64_t)&a17);
  v189 = v42;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F693E0C();
  v180 = v44;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v45);
  v179 = (uint64_t)v178 - v46;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F6B6580();
  sub_23F6B5314(v48);
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v49);
  sub_23F6B51A4();
  sub_23F70D434(v50);
  v196 = sub_23FB2C4B8();
  v193 = *(_QWORD *)(v196 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F693E0C();
  v194 = v52;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v53);
  sub_23F6B6580();
  v55 = sub_23F70D434(v54);
  v209 = type metadata accessor for Session.Event.Payload(v55);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v56);
  sub_23F693E0C();
  v199 = v57;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v58);
  v198 = (uint64_t)v178 - v59;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v60);
  sub_23F6B6580();
  v203 = v61;
  v184 = sub_23F7F6688();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v62);
  v195 = (uint64_t)v178 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v64);
  sub_23F693E0C();
  v186 = v65;
  sub_23F6B5664();
  v67 = MEMORY[0x24BDAC7A8](v66);
  sub_23F7F67C8(v67, v68, v69, v70, v71, v72, v73, v74, v178[0]);
  v76 = *(_QWORD *)(v75 + 8);
  v190 = *(_QWORD *)(v76 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v78 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v207 = AssociatedTypeWitness;
  v208 = v78;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v79);
  v206 = (char *)v178 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  v82 = MEMORY[0x24BDAC7A8](v81);
  v84 = (char *)v178 - v83;
  v85 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v82);
  sub_23F7A00C8();
  sub_23F7F69AC();
  sub_23FB2F968();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v86);
  v88 = (char *)v178 - v87;
  sub_23F7F69AC();
  v89 = sub_23FB2F95C();
  v182 = *(_QWORD *)(v89 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v90);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v91);
  sub_23F77E490();
  v92 = *(void (**)(uint64_t, char *, uint64_t))(v85 + 16);
  v92(v26, v205, v28);
  v200 = v76;
  sub_23FB2F104();
  v93 = sub_23F78F478();
  ((void (*)(uint64_t))v92)(v93);
  v94 = v28;
  sub_23FB2F56C();
  v95 = *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8);
  v96 = v186;
  v97 = v208;
  sub_23F6B56E0((uint64_t)v88, v95);
  v98 = v21 + *(int *)(v89 + 36);
  v99 = *(void (**)(uint64_t, char *, uint64_t))(v97 + 32);
  v205 = v84;
  v99(v98, v84, v207);
  v100 = v21;
  v101 = v22;
  sub_23F75E68C(v22, v100, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v182 + 32));
  v181 = v89;
  v102 = v22 + *(int *)(v89 + 36);
  v192 = MEMORY[0x24BEE4B00];
  v204 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
  v183 = v94;
  v197 = v22;
  while (1)
  {
    v103 = v205;
    v104 = v207;
    v204(v205, v102, v207);
    v105 = v206;
    sub_23FB2F53C();
    swift_getAssociatedConformanceWitness();
    sub_23F78F5B0();
    v106 = sub_23FB2F11C();
    v107 = v101;
    v108 = *(void (**)(char *, uint64_t))(v208 + 8);
    v108(v105, v104);
    v108(v103, v104);
    if ((v106 & 1) != 0)
    {
      sub_23F72E1C4();
      sub_23F6B6344(v107, v177);
      goto LABEL_51;
    }
    sub_23FB2F0EC();
    v109 = sub_23FB2F5C0();
    v111 = sub_23F7F6640(v109, v110);
    v112 = v201;
    sub_23F7E7704(v111, v201, type metadata accessor for Session.Event);
    sub_23F7F6638((uint64_t)&v210);
    v113 = v96;
    sub_23F7E76D0(v112, v96, type metadata accessor for Session.Event);
    v114 = v203;
    v115 = v96 + *(int *)(v202 + 28);
    v116 = sub_23F7F64A8();
    sub_23F7F6328(v116, v117);
    if (sub_23F7B0C94() != 31)
    {
      sub_23F7F6230(v114);
      v101 = v197;
      v123 = v199;
      goto LABEL_17;
    }
    v118 = v195;
    sub_23F7F66F8(v114, v195);
    v119 = v188;
    sub_23F7A1EDC(v118, v188, &qword_256EA2798);
    v120 = v196;
    sub_23F6B5164(v119, 1, v196);
    if (v164)
    {
      sub_23F7F6230(v118);
      v121 = sub_23F6B6AB8();
      sub_23F7F6110(v121, v122);
      v123 = v199;
      v101 = v197;
      goto LABEL_17;
    }
    v124 = v193;
    v125 = v187;
    sub_23F77DD54(v187, v119, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 32));
    v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16);
    v126(v194, v125, v120);
    v127 = v185;
    sub_23F7F65F4(v185, v118 + *(int *)(v184 + 24), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v189 + 16));
    v128 = v192;
    swift_isUniquelyReferenced_nonNull_native();
    v210 = v128;
    sub_23F78CA30();
    if (__OFADD__(*(_QWORD *)(v128 + 16), (v130 & 1) == 0))
      break;
    v131 = v129;
    v132 = v130;
    sub_23F6916B8(&qword_256EAB7D0);
    v133 = sub_23FB2F914();
    v134 = v196;
    if ((v133 & 1) != 0)
    {
      sub_23F78CA30();
      if ((v132 & 1) != (v136 & 1))
        goto LABEL_59;
      v131 = v135;
    }
    v137 = v210;
    if ((v132 & 1) != 0)
    {
      v138 = sub_23F7F66A0();
      sub_23F7F65F4(v138, v127, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v139 + 40));
    }
    else
    {
      *(_QWORD *)(v210 + 8 * (v131 >> 6) + 64) |= 1 << v131;
      v126(*(_QWORD *)(v137 + 48) + *(_QWORD *)(v193 + 72) * v131, v194, v134);
      v140 = sub_23F7F66A0();
      sub_23F7F65F4(v140, v127, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v141 + 32));
      v142 = *(_QWORD *)(v137 + 16);
      v143 = __OFADD__(v142, 1);
      v144 = v142 + 1;
      if (v143)
        goto LABEL_58;
      *(_QWORD *)(v137 + 16) = v144;
    }
    v192 = v210;
    swift_bridgeObjectRelease();
    v145 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
    v145(v194, v134);
    v145(v187, v134);
    sub_23F7F6444(v195);
    v113 = v186;
    v123 = v199;
    v101 = v197;
LABEL_17:
    v146 = v198;
    sub_23F7F6328(v115, v198);
    if (sub_23F7B0C94() == 5)
    {
      v147 = type metadata accessor for Action;
      sub_23F7F6610(v146);
      goto LABEL_22;
    }
    sub_23F7F6230(v146);
    sub_23F7F6328(v115, v123);
    if (sub_23F7B0C94() == 20)
    {
      v147 = type metadata accessor for ActionResolverRequest;
      sub_23F7F6610(v123);
LABEL_22:
      sub_23F6B5508();
      v148 = sub_23F78F478();
      sub_23F7F6140(v148, v149);
      sub_23F7F6A10();
      sub_23F694BC0(v113, v192);
      v150 = sub_23F6B5164((uint64_t)v147, 1, v191);
      if (v164)
      {
        sub_23F7F67B4(v150, type metadata accessor for Session.Event);
        v151 = sub_23F7F6264();
        sub_23F7F6A1C(v151, &qword_256EAB7C8);
LABEL_51:
        sub_23F7F6850();
        sub_23F693DDC();
        return;
      }
      v152 = v189;
      v153 = sub_23F78F478();
      v154 = v191;
      sub_23F77DD54(v153, v155, v156);
      v157 = v180;
      v158 = sub_23F6B5EE4();
      sub_23F77DD54(v158, v159, v160);
      v161 = (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 88))(v157, v154);
      if ((_DWORD)v161 == *MEMORY[0x24BE53328])
        goto LABEL_26;
      v163 = v161;
      v164 = (_DWORD)v161 == *MEMORY[0x24BE532D8] || (_DWORD)v161 == *MEMORY[0x24BE532E0];
      if (!v164
        && (_DWORD)v161 != *MEMORY[0x24BE532E8]
        && (_DWORD)v161 != *MEMORY[0x24BE53300]
        && (_DWORD)v161 != *MEMORY[0x24BE53308])
      {
        if ((_DWORD)v161 == *MEMORY[0x24BE532F0] || (_DWORD)v161 == *MEMORY[0x24BE53310])
        {
LABEL_26:
          swift_bridgeObjectRelease();
LABEL_27:
          v162 = sub_23F6D39FC(v179);
          sub_23F7F67B4(v162, type metadata accessor for Session.Event);
          sub_23F7F6264();
          sub_23F6D39FC(v180);
          goto LABEL_51;
        }
        if ((_DWORD)v161 != *MEMORY[0x24BE532D0] && (_DWORD)v161 != *MEMORY[0x24BE532F8])
        {
          v173 = *MEMORY[0x24BE53320];
          swift_bridgeObjectRelease();
          if ((_DWORD)v163 != v173)
          {
            sub_23F7F6A10();
            sub_23FB2E3C0();
            v174 = sub_23FB2E7E0();
            v175 = sub_23FB2F5F0();
            if (os_log_type_enabled(v174, v175))
            {
              v176 = (uint8_t *)sub_23F7595E8();
              *(_WORD *)v176 = 0;
              _os_log_impl(&dword_23F68F000, v174, v175, "Unknown outcome ignored when finding latest incomplete action", v176, 2u);
              sub_23F693DD0();
            }

            sub_23F6B6344(v163, *(uint64_t (**)(uint64_t, _QWORD))(v178[0] + 8));
          }
          goto LABEL_27;
        }
      }
      v170 = *(uint64_t (**)(uint64_t, uint64_t))(v189 + 8);
      v171 = v191;
      v172 = v170(v179, v191);
      sub_23F7F67B4(v172, type metadata accessor for Session.Event);
      sub_23F7F6264();
      v170(v180, v171);
      goto LABEL_51;
    }
    sub_23F7F6230(v123);
    v96 = v113;
    sub_23F7F6140(v113, type metadata accessor for Session.Event);
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  sub_23FB2FBD8();
  __break(1u);
}

void TailTranscriptProtocol.latestStatementEvaluatedEvent(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  sub_23F6B50E8();
  v55 = v0;
  v56 = v5;
  v7 = v6;
  v60 = v8;
  v63 = sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  v62 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_23F7F6688();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v11);
  v58 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F693E0C();
  v69 = v14;
  sub_23F6B5664();
  v16 = MEMORY[0x24BDAC7A8](v15);
  sub_23F7F67C8(v16, v17, v18, v19, v20, v21, v22, v23, v55);
  v66 = *(_QWORD *)(v24 + 8);
  sub_23F6BDE50();
  sub_23F7F68B0();
  v68 = v25;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F693E0C();
  v64 = v27;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v55 - v29;
  v65 = *(_QWORD *)(v7 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F77E1CC();
  sub_23FB2F968();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F7F6240();
  v33 = sub_23FB2F95C();
  v57 = *(_QWORD *)(v33 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v34);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F77E490();
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
  v36(v0, v55, v7);
  sub_23FB2F104();
  v37 = sub_23F7B0BC4();
  ((void (*)(uint64_t))v36)(v37);
  sub_23F7F6694();
  sub_23FB2F56C();
  sub_23F78F1E4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
  v38 = v68;
  sub_23F75E710(v2 + *(int *)(v33 + 36), (uint64_t)v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 32));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v4, v2, v33);
  v55 = v33;
  v39 = v4 + *(int *)(v33 + 36);
  v65 = *(_QWORD *)(v38 + 16);
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v65)(v30, v39, v1);
    sub_23F7F6694();
    sub_23FB2F53C();
    swift_getAssociatedConformanceWitness();
    v40 = sub_23F6B5D44();
    v41 = *(void (**)(uint64_t))(v68 + 8);
    v42 = sub_23F72E3F8();
    v41(v42);
    ((void (*)(char *, uint64_t))v41)(v30, v1);
    if ((v40 & 1) != 0)
      break;
    sub_23FB2F0EC();
    v43 = sub_23FB2F5C0();
    v45 = sub_23F7F6640(v43, v44);
    v46 = v61;
    sub_23F7F6328(v45, v61);
    sub_23F7F6638((uint64_t)&v70);
    v47 = v46;
    v48 = v69;
    sub_23F7F66F8(v47, v69);
    v49 = v62;
    sub_23F7F6328(v48 + *(int *)(v67 + 28), v62);
    if (sub_23F7F69A0() == 31)
    {
      v50 = v58;
      sub_23F7F66F8(v49, v58);
      v51 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
      sub_23F7F6230(v50);
      if ((v51 & 1) != 0)
      {
        sub_23F7F6660();
        v52 = v56;
        sub_23F7F6978(v69, v53, type metadata accessor for Session.Event);
        v54 = 0;
        goto LABEL_8;
      }
      sub_23F7F6290(v69);
    }
    else
    {
      sub_23F7F6290(v48);
      sub_23F7F6230(v49);
    }
  }
  sub_23F7F6660();
  v54 = 1;
  v52 = v56;
LABEL_8:
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v52, v54, 1, v67);
  sub_23F693DDC();
}

void TailTranscriptProtocol.latestActionCreated(for:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_23F6B50E8();
  v5 = v4;
  v54 = v6;
  v51 = v7;
  v58 = sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5810(v9, v0);
  v50 = type metadata accessor for Action(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B51A4();
  v53 = v11;
  v56 = sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F7F62A0(v13, v49);
  v15 = *(_QWORD *)(v14 + 8);
  v16 = *(_QWORD *)(v15 + 8);
  sub_23F7F6964();
  sub_23F7F68B0();
  v62 = v17;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v18);
  v59 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F77E490();
  v60 = *(_QWORD *)(v5 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F7F6584();
  v61 = v15;
  sub_23FB2F968();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v49 - v25;
  sub_23F7F6584();
  v27 = sub_23FB2F95C();
  v52 = *(_QWORD *)(v27 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B52C8();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F7F6400();
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  v30(v23, v49, v5);
  sub_23F7F6844();
  v30(v2, (uint64_t)v26, v5);
  sub_23F78F478();
  sub_23FB2F56C();
  sub_23F6B530C((uint64_t)v26, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
  v31 = v62;
  sub_23F75E710((uint64_t)&v2[*(int *)(v27 + 36)], v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 32));
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v15, v2, v27);
  v49 = v27;
  v32 = v15 + *(int *)(v27 + 36);
  v60 = *(_QWORD *)(v31 + 16);
  while (1)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))v60)(v3, v32, v1);
    sub_23F78F478();
    sub_23FB2F53C();
    sub_23F6B5EE4();
    swift_getAssociatedConformanceWitness();
    v33 = sub_23F6B5D44();
    v34 = *(void (**)(uint64_t))(v62 + 8);
    v35 = sub_23F72E3F8();
    v34(v35);
    ((void (*)(uint64_t, uint64_t))v34)(v3, v1);
    if ((v33 & 1) != 0)
      break;
    sub_23F7F694C();
    v36 = v16;
    v37 = sub_23FB2F5C0();
    v39 = sub_23F7F6640(v37, v38);
    v40 = v55;
    sub_23F7F6328(v39, v55);
    sub_23F7F6638((uint64_t)&v63);
    v41 = v57;
    sub_23F7E7704(v40 + *(int *)(v56 + 28), v57, type metadata accessor for Session.Event.Payload);
    sub_23F7F6230(v40);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      v42 = v41;
      v43 = v53;
      sub_23F7E76D0(v42, v53, type metadata accessor for Action);
      if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0)
      {
        sub_23F7F664C();
        v46 = v51;
        sub_23F7F6978(v43, v47, type metadata accessor for Action);
        v48 = 0;
        goto LABEL_9;
      }
      v44 = v43;
      v45 = type metadata accessor for Action;
    }
    else
    {
      v44 = v41;
      v45 = type metadata accessor for Session.Event.Payload;
    }
    sub_23F7F6140(v44, v45);
    v16 = v36;
  }
  sub_23F7F664C();
  v48 = 1;
  v46 = v51;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v46, v48, 1, v50);
  sub_23F693DDC();
}

void TailTranscriptProtocol.inFocusAppBundleIDs(queryEventId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[21];
  uint64_t v53;
  uint64_t v54;

  sub_23F6B50E8();
  a19 = v20;
  a20 = v21;
  v52[19] = v22;
  v52[17] = v23;
  v24 = sub_23FB2EC9C();
  sub_23F6B53F8(v24, (uint64_t)&a18);
  v52[9] = v25;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F6B51A4();
  sub_23F6B5314(v27);
  sub_23F6916B8(&qword_256EA2950);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v28);
  sub_23F6B51A4();
  v52[5] = v29;
  sub_23F6D398C();
  v30 = sub_23FB2ECE4();
  v52[12] = *(_QWORD *)(v30 - 8);
  v52[13] = v30;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F693E0C();
  v52[11] = v32;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B6580();
  v52[10] = v34;
  v35 = sub_23F7F64D4();
  v52[15] = *(_QWORD *)(v35 - 8);
  v52[16] = v35;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v36);
  sub_23F6B57BC(v37, v52[0]);
  v53 = sub_23F7F6800();
  v52[1] = *(_QWORD *)(v53 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v38);
  v52[7] = sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B51A4();
  v52[8] = v40;
  v41 = sub_23F6D398C();
  type metadata accessor for QueryDecorationResult(v41);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v42);
  v52[6] = (uint64_t)v52 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23FB2C4B8();
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F6B51A4();
  v52[4] = v45;
  sub_23F6916B8(&qword_256EA27A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v46);
  sub_23F6B573C();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v47);
  sub_23F693E0C();
  v52[14] = v48;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v49);
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v50);
  sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F6B5268();
  v54 = MEMORY[0x24BEE4B08];
  TailTranscriptProtocol.latestQueryDecorationResultEvent()();
}

CLPlacemark_optional __swiftcall TailTranscriptProtocol.currentUserLocation()()
{
  uint64_t v0;

  sub_23F6916B8(&qword_256EAB7D8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F78F478();
  TailTranscriptProtocol.latestQueryDecorationResult()();
}

uint64_t sub_23F7EDAD0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_23F7F6680();
  sub_23F6B5164(v0, 1, v1);
  if (v2)
  {
    sub_23F7F6110(v0, &qword_256EAB7D8);
    return 0;
  }
  else
  {
    QueryDecorationResult.currentLocation.getter();
    v4 = v3;
    sub_23F7F6140(v0, type metadata accessor for QueryDecorationResult);
  }
  return v4;
}

void QueryDecorationResult.currentLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t (**v29)(uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t (**v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_23F6B50E8();
  v4 = sub_23FB2ECD8();
  sub_23F7F671C();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EA2950);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23FB2ECE4();
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F6B6580();
  v53 = v15;
  v16 = sub_23F7F64D4();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = sub_23F77DB24();
  v56 = type metadata accessor for RetrievedContextStatement(v18);
  MEMORY[0x24BDAC7A8](v56);
  sub_23F6B59E0();
  v19 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
  if (v19)
  {
    v55 = v16;
    v41 = v7;
    v42 = v1;
    v43 = v4;
    sub_23F78F3B0();
    v22 = v20 + v21;
    v23 = *MEMORY[0x24BE57270];
    v52 = *MEMORY[0x24BEB9A00];
    v47 = *MEMORY[0x24BEB9968];
    v54 = *(_QWORD *)(v24 + 72);
    v44 = v20;
    swift_bridgeObjectRetain();
    v45 = v17;
    v46 = v10;
    v51 = v23;
    while (1)
    {
      v25 = sub_23F7F6694();
      sub_23F7E7704(v25, v26, type metadata accessor for RetrievedContextStatement);
      sub_23FB2DDD8();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v3, v55) == v23)
      {
        sub_23F6B51EC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
        sub_23FB2DDCC();
        v27 = sub_23FB2ED38();
        sub_23F6B5164((uint64_t)v10, 1, v27);
        if (v28)
        {
          sub_23F7F6444(v2);
          sub_23F7F6110((uint64_t)v10, &qword_256EA2950);
        }
        else
        {
          v29 = *(uint64_t (***)(uint64_t, uint64_t))(v27 - 8);
          v30 = sub_23F7B0990((uint64_t)v10, v29[11]);
          if (v30 == v52)
          {
            sub_23F7B0990((uint64_t)v10, v29[12]);
            v31 = swift_projectBox();
            v32 = (uint64_t (**)(uint64_t, uint64_t))v49;
            v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
            v33(v53, v31, v50);
            v34 = v53;
            swift_release();
            v35 = (uint64_t)v48;
            v36 = sub_23F72E3F8();
            ((void (*)(uint64_t))v33)(v36);
            v37 = sub_23F7B0990(v35, v32[11]);
            if (v37 == v47)
            {
              swift_bridgeObjectRelease();
              sub_23F7B0990(v35, v32[12]);
              v38 = v42;
              v39 = (uint64_t)v41;
              sub_23F72E0C8((uint64_t)v41, v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32));
              sub_23FB2ECCC();
              sub_23F78F1E4(v39, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
              sub_23F6B51EC(v34, v32[1]);
              sub_23F7F6140(v2, type metadata accessor for RetrievedContextStatement);
              break;
            }
            sub_23F6D39FC(v34);
            sub_23F7F6444(v2);
            sub_23F6D39FC(v35);
            v17 = v45;
            v10 = v46;
          }
          else
          {
            sub_23F7F6444(v2);
            sub_23F7B0990((uint64_t)v10, v29[1]);
          }
          v23 = v51;
        }
      }
      else
      {
        sub_23F7F6444(v2);
        sub_23F6B51EC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
      }
      v22 += v54;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_23F7F678C();
  sub_23F693DDC();
}

void TailTranscriptProtocol.actionCreatedEvents(queryEventId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  sub_23F6B50E8();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B52B0();
  sub_23FB2F968();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7F6240();
  v2 = sub_23F6B6AB8();
  v3(v2);
  sub_23FB2F104();
  type metadata accessor for Action(0);
  sub_23F7F6608();
}

void sub_23F7EDF58()
{
  uint64_t v0;
  uint64_t v1;

  sub_23FB2F320();
  sub_23F6B563C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_23F7F678C();
  sub_23F693DDC();
}

uint64_t sub_23F7EDF98@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a2;
  v42 = a3;
  v4 = sub_23FB2C4B8();
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_23F6916B8(&qword_256EA27A0);
  MEMORY[0x24BDAC7A8](v36);
  v37 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23F6916B8(&qword_256EA2798);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v35 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Action(0);
  MEMORY[0x24BDAC7A8](v41);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v21 + 28), (uint64_t)v18, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    v26 = type metadata accessor for Session.Event.Payload;
    v27 = (uint64_t)v18;
LABEL_12:
    sub_23F7F6140(v27, v26);
    v33 = 1;
    v32 = v42;
    return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v32, v33, 1, v41);
  }
  sub_23F7E76D0((uint64_t)v18, (uint64_t)v20, type metadata accessor for Action);
  sub_23F7A1EDC(a1 + *(int *)(v21 + 24), (uint64_t)v15, &qword_256EA2798);
  v22 = v39;
  v23 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v13, v38, v40);
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)v13, 0, 1, v23);
  v24 = v37;
  v25 = v37 + *(int *)(v36 + 48);
  sub_23F7A1EDC((uint64_t)v15, v37, &qword_256EA2798);
  sub_23F7A1EDC((uint64_t)v13, v25, &qword_256EA2798);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v24, 1, v23) != 1)
  {
    v38 = v20;
    sub_23F7A1EDC(v24, (uint64_t)v10, &qword_256EA2798);
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v25, 1, v23) != 1)
    {
      v28 = v23;
      v29 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v35, v25, v28);
      sub_23F72156C(&qword_256EA27A8, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v30 = sub_23FB2F11C();
      v31 = *(void (**)(char *, uint64_t))(v22 + 8);
      v31(v29, v28);
      sub_23F7F6110((uint64_t)v13, &qword_256EA2798);
      sub_23F7F6110((uint64_t)v15, &qword_256EA2798);
      v31(v10, v28);
      sub_23F7F6110(v24, &qword_256EA2798);
      v20 = v38;
      if ((v30 & 1) != 0)
        goto LABEL_10;
      goto LABEL_11;
    }
    sub_23F7F6110((uint64_t)v13, &qword_256EA2798);
    sub_23F7F6110((uint64_t)v15, &qword_256EA2798);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
    v20 = v38;
LABEL_8:
    sub_23F7F6110(v24, &qword_256EA27A0);
LABEL_11:
    v26 = type metadata accessor for Action;
    v27 = (uint64_t)v20;
    goto LABEL_12;
  }
  sub_23F7F6110((uint64_t)v13, &qword_256EA2798);
  sub_23F7F6110((uint64_t)v15, &qword_256EA2798);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v25, 1, v23) != 1)goto LABEL_8;
  sub_23F7F6110(v24, &qword_256EA2798);
LABEL_10:
  v32 = v42;
  sub_23F7E76D0((uint64_t)v20, v42, type metadata accessor for Action);
  v33 = 0;
  return _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v32, v33, 1, v41);
}

void TailTranscriptProtocol.latestSiriRequestContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F6B50E8();
  sub_23F6916B8(&qword_256EAB7E0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B51A4();
  sub_23F6916B8(&qword_256EAB7E8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B51A4();
  sub_23F7F64D4();
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B51A4();
  sub_23F7F6800();
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B59E0();
  sub_23F7F67BC();
  TailTranscriptProtocol.latestRequiredContext.getter();
}

void TailTranscriptProtocol.latestRequiredContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23F6B50E8();
  sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23F7A00C8();
  type metadata accessor for QueryDecorationResult(v1);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F6B52B0();
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F7E52BC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B59E0();
  sub_23F72E3F8();
  TailTranscriptProtocol.latestQueryDecorationResultEvent()();
}

void sub_23F7EE7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_23F6B5164(v2, 1, v4);
  if (v6)
  {
    sub_23F7F6944(v5, &qword_256EA7A90);
  }
  else
  {
    sub_23F7F6534(v2, v3);
    sub_23F7E7704(v3 + *(int *)(v4 + 28), v0, type metadata accessor for Session.Event.Payload);
    sub_23F7F63F8(v3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 42)
    {
      v8 = sub_23F6B5FE0();
      sub_23F7F6534(v8, v9);
      sub_23F6B5508();
      sub_23F7F63F8(v1);
    }
    else
    {
      sub_23F7F6140(v0, type metadata accessor for Session.Event.Payload);
    }
  }
  sub_23F7F678C();
  sub_23F693DDC();
}

void FullTranscriptProtocol.nextValidUnexecutedActionsOrQueries()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedConformanceWitness;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[25];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD v94[8];
  uint64_t v95;

  sub_23F6B50E8();
  a19 = v20;
  a20 = v21;
  v23 = v22;
  v25 = v24;
  type metadata accessor for TypeConversionResult(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v26);
  v28 = sub_23F70D434((uint64_t)v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for QueryStepResults(v28);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v29);
  sub_23F6B51A4();
  v31 = sub_23F70D434(v30);
  type metadata accessor for StatementResult(v31);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F6B51A4();
  v34 = sub_23F70D434(v33);
  type metadata accessor for ActionStepResult(v34);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F6B51A4();
  sub_23F6B5314(v36);
  v84 = v23;
  v83 = *(_QWORD *)(v23 + 8);
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 8) + 8) + 8);
  v38 = sub_23F7F6498();
  v39 = sub_23F7F670C();
  v40 = sub_23F7F6714();
  sub_23F7F66D8();
  v91 = sub_23F7F6630();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F7F64E0();
  v85 = v42;
  v90 = sub_23F7F6298();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6B51A4();
  v92 = v44;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6B57BC(v46, v82[0]);
  v94[1] = sub_23F7F62D0();
  v94[0] = sub_23FB2F65C();
  v82[11] = *(_QWORD *)(v94[0] - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v47);
  v93 = (char *)v82 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v49);
  v50 = sub_23F7F6498();
  v82[9] = *(_QWORD *)(v50 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v51);
  sub_23F7F64E0();
  sub_23F6B5314(v52);
  sub_23F6B6AB8();
  v82[16] = swift_getAssociatedConformanceWitness();
  v53 = sub_23FB2F908();
  sub_23F6B53F8(v53, (uint64_t)v94);
  v82[5] = v54;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v55);
  sub_23F7F64E0();
  sub_23F6B5314(v56);
  sub_23F6B6AB8();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v58 = sub_23FB2D034();
  sub_23F6B53F8(v58, (uint64_t)&v93);
  v82[4] = v59;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v60);
  sub_23F7F64E0();
  sub_23F70D434(v61);
  v82[10] = v50;
  v82[1] = AssociatedConformanceWitness;
  v62 = sub_23FB2D028();
  sub_23F6B53F8(v62, (uint64_t)&a17);
  v82[12] = v63;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v64);
  sub_23F7F64E0();
  v94[2] = v65;
  v94[4] = *(_QWORD *)(v38 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v66);
  v94[6] = (char *)v82 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v68);
  sub_23F6B6580();
  sub_23F6B5314(v69);
  v82[20] = v37;
  v70 = sub_23F7F6498();
  sub_23F6B53F8(v70, (uint64_t)&v95);
  v82[14] = v71;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v72);
  sub_23F7F64E0();
  sub_23F6B5314(v73);
  v89 = *(_QWORD *)(v25 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v74);
  sub_23F6B51A4();
  v87 = v39;
  v88 = v75;
  sub_23F7F66D8();
  v94[3] = v40;
  sub_23F7F6630();
  sub_23FB2F65C();
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v76);
  v82[24] = sub_23F7F69C4();
  sub_23F7F671C();
  MEMORY[0x24BDAC7A8](v77);
  sub_23F693E0C();
  v82[22] = v78;
  sub_23F6B5664();
  v80 = MEMORY[0x24BDAC7A8](v79);
  MEMORY[0x24BDAC7A8](v80);
  sub_23F6B5314((uint64_t)v82 - v81);
  v86 = v25;
  TailTranscriptProtocol.latestQueryEvent()();
}

void sub_23F7EF660()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);

  sub_23F7E79D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23F6B51EC(*(_QWORD *)(v0 - 328), *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 152) + 8));
  sub_23F72E1C4();
  sub_23F6B6344(*(_QWORD *)(v0 - 312), v1);
  JUMPOUT(0x23F7EF6D4);
}

uint64_t sub_23F7EF6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_23F6B5220();
  v57 = v2;
  v58 = v3;
  v51 = v4;
  v6 = v5;
  v7 = sub_23FB2C4B8();
  v49 = *(_QWORD *)(v7 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5810(v9, v48[0]);
  v50 = sub_23F6916B8(&qword_256EA27A0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v10);
  sub_23F6B5598(v11, v48[0]);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Session.Event(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v14);
  sub_23F7F6318();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F693E0C();
  v53 = v16;
  sub_23F6B5664();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v48 - v19;
  MEMORY[0x24BDAC7A8](v18);
  sub_23F77E490();
  v21 = *(int *)(TupleTypeMetadata3 + 48);
  v22 = v1 + v21;
  v23 = *(int *)(TupleTypeMetadata3 + 64);
  v24 = v6 + v21;
  v25 = v6 + v23;
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v55 = v1;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
  v27 = v1;
  v28 = v1 + v23;
  v56 = AssociatedTypeWitness;
  v29 = AssociatedTypeWitness;
  v30 = v49;
  v26(v27, v6, v29);
  v31 = v24;
  v32 = v48[1];
  sub_23F6D3ECC(v22, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
  v52 = v28;
  sub_23F7E7704(v25, v28, type metadata accessor for Session.Event);
  sub_23F7F69B8(v0);
  sub_23F77DD6C(v0, 0);
  sub_23F7F696C();
  sub_23F7A1EDC(v33, v34, v35);
  v36 = v32 + *(int *)(v50 + 48);
  sub_23F7F66D8();
  sub_23F7A1EDC(v37, v38, v39);
  sub_23F7A1EDC((uint64_t)v20, v36, &qword_256EA2798);
  sub_23F70D8B8(v32);
  if (v41)
  {
    sub_23F7F6600((uint64_t)v20);
    sub_23F7F6600(v0);
    sub_23F70D8B8(v36);
    if (v41)
      v40 = -1;
    else
      v40 = 0;
  }
  else
  {
    sub_23F7A1EDC(v32, v53, &qword_256EA2798);
    sub_23F70D8B8(v36);
    if (v41)
    {
      v42 = sub_23F6B5FE0();
      sub_23F7F6110(v42, v43);
      sub_23F7F6110(v0, &qword_256EA2798);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v53, v7);
      v40 = 0;
    }
    else
    {
      sub_23F7F69B8(v48[0]);
      sub_23F72156C(&qword_256EA27A8, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      sub_23F78F5B0();
      v40 = sub_23FB2F11C();
      v44 = *(void (**)(uint64_t))(v30 + 8);
      v45 = sub_23F6B6F9C();
      v44(v45);
      sub_23F7F6600((uint64_t)v20);
      sub_23F7F6600(v0);
      v46 = sub_23F7F64A8();
      v44(v46);
    }
  }
  sub_23F7F6600(v32);
  sub_23F7F6140(v52, type metadata accessor for Session.Event);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
  return v40 & 1;
}

uint64_t sub_23F7EFA34()
{
  type metadata accessor for QueryStepResults(0);
  swift_getAssociatedTypeWitness();
  sub_23FB2C4B8();
  type metadata accessor for Session.Event(255);
  swift_getTupleTypeMetadata3();
  return sub_23FB2C4A0() & 1;
}

uint64_t sub_23F7EFAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t TupleTypeMetadata3;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v25 = a2;
  v29 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v29);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_23FB2C4B8();
  v26 = type metadata accessor for Session.Event(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v9 = (char *)&v23 - v8;
  v23 = type metadata accessor for TypeConversionRequest(0);
  MEMORY[0x24BDAC7A8](v23);
  v24 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(TupleTypeMetadata3 + 48);
  v12 = &v9[v11];
  v13 = *(int *)(TupleTypeMetadata3 + 64);
  v14 = (uint64_t)&v9[v13];
  v15 = a1 + v11;
  v16 = a1 + v13;
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v30 = AssociatedTypeWitness;
  v17(v9, a1, AssociatedTypeWitness);
  v18 = *(_QWORD *)(v6 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v27 = v12;
  v19(v12, v15, v6);
  sub_23F7E7704(v16, v14, type metadata accessor for Session.Event);
  sub_23F7E7704(v14 + *(int *)(v26 + 28), (uint64_t)v4, type metadata accessor for Session.Event.Payload);
  sub_23F7F6140(v14, type metadata accessor for Session.Event);
  if (swift_getEnumCaseMultiPayload() == 40)
  {
    v20 = v24;
    sub_23F7E76D0((uint64_t)v4, v24, type metadata accessor for TypeConversionRequest);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v6);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v30);
    type metadata accessor for TypeConversionResult(0);
    v21 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
    sub_23F7F6140(v20, type metadata accessor for TypeConversionRequest);
  }
  else
  {
    sub_23F7F6140((uint64_t)v4, type metadata accessor for Session.Event.Payload);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v6);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v30);
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_23F7EFDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  v31 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = sub_23FB2C4B8();
  type metadata accessor for Session.Event(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v35 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - v8;
  v38 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v10 = *(int *)(TupleTypeMetadata3 + 48);
  v11 = &v9[v10];
  v39 = &v9[v10];
  v12 = *(int *)(TupleTypeMetadata3 + 64);
  v13 = (uint64_t)&v9[v12];
  v14 = a1;
  v32 = a1;
  v15 = a1 + v10;
  v16 = a1 + v12;
  v29 = AssociatedTypeWitness;
  v30 = v16;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v33 = v17;
  v34 = &v9[v12];
  v18(v9, v14, AssociatedTypeWitness);
  v37 = *(_QWORD *)(v36 - 8);
  v19 = *(void (**)(char *, uint64_t))(v37 + 16);
  v20 = v11;
  v21 = v36;
  v19(v20, v15);
  sub_23F7E7704(v16, v13, type metadata accessor for Session.Event);
  v22 = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v31, v9, v29);
  v23 = v35;
  v24 = &v35[*(int *)(TupleTypeMetadata3 + 48)];
  v25 = (uint64_t)&v35[*(int *)(TupleTypeMetadata3 + 64)];
  v18(v35, v32, v22);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v24, v15, v21);
  sub_23F7E7704(v30, v25, type metadata accessor for Session.Event);
  sub_23F7E76D0(v25, v38, type metadata accessor for Session.Event);
  v26 = *(void (**)(char *, uint64_t))(v37 + 8);
  v26(v24, v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v22);
  sub_23F7F6140((uint64_t)v34, type metadata accessor for Session.Event);
  return ((uint64_t (*)(char *, uint64_t))v26)(v39, v21);
}

void FullTranscriptProtocol.latestLocaleSettings()()
{
  uint64_t v0;

  sub_23F6B50E8();
  sub_23FB2F7C4();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F7F6318();
  sub_23F7F66E4();
}

void sub_23F7F009C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 - 176) = a1;
  sub_23FB2F968();
  sub_23F7F6808();
  *(_QWORD *)(v1 - 144) = v2;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6B5C80();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6AE310(&qword_256EAB7F0);
  sub_23F7F6238();
}

void sub_23F7F0100()
{
  uint64_t v0;

  sub_23F7F6700();
  *(_QWORD *)(v0 - 168) = sub_23FB2F8F0();
  sub_23F7F61B8();
}

void sub_23F7F0124()
{
  sub_23FB2F950();
  sub_23FB2C998();
  sub_23F7F61B8();
}

void sub_23F7F0150()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F7F696C();
  *(_QWORD *)(v0 - 160) = *(_QWORD *)(sub_23FB2F8F0() - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F7F6240();
  sub_23FB2F32C();
  sub_23FB2F104();
  sub_23F7F66E4();
}

void sub_23F7F01B4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  sub_23F7F6238();
}

void sub_23F7F01C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  sub_23FB2F9D4();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8);
  v3(v1, v0);
  sub_23FB2F9BC();
  v4 = sub_23F78F478();
  ((void (*)(uint64_t))v3)(v4);
  sub_23F7F6238();
}

void sub_23F7F0230(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  *(_QWORD *)(v1 - 112) = MEMORY[0x242674E5C](MEMORY[0x24BEE2B50], *(_QWORD *)(v1 - 168), v1 - 104);
  sub_23F7F61B8();
}

void sub_23F7F0260(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  sub_23F7F63C0();
}

void sub_23F7F0270()
{
  uint64_t v0;

  sub_23FB2F59C();
  sub_23F7F62F8(*(_QWORD *)(v0 - 160));
  sub_23F693DDC();
}

void sub_23F7F0298(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for SessionStart(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Session.Event(0);
  sub_23F7E7704(a1 + *(int *)(v10 + 28), (uint64_t)v9, type metadata accessor for Session.Event.Payload);
  if (swift_getEnumCaseMultiPayload())
  {
    v11 = sub_23FB2C998();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 1, 1, v11);
    sub_23F7F6140((uint64_t)v9, type metadata accessor for Session.Event.Payload);
  }
  else
  {
    sub_23F7E76D0((uint64_t)v9, (uint64_t)v6, type metadata accessor for SessionStart);
    v12 = sub_23FB2C998();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, v6, v12);
    sub_23F7F6140((uint64_t)v6, type metadata accessor for SessionStart);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(a2, 0, 1, v12);
  }
}

void FullTranscriptProtocol.lastMap<A>(_:)()
{
  void (*v0)(uint64_t, char *, uint64_t);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  uint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  char *v69;
  uint64_t AssociatedTypeWitness;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  sub_23F6B5220();
  v74 = v1;
  v67 = v4;
  v68 = v0;
  v6 = v5;
  v8 = v7;
  v66 = v9;
  v55 = v10;
  v61 = v11;
  v12 = sub_23FB2F65C();
  v59 = *(_QWORD *)(v12 - 8);
  v60 = v12;
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v13);
  sub_23F7F64E0();
  v65 = v14;
  sub_23F7F69DC();
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v15);
  v64 = (uint64_t)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B6580();
  v63 = v18;
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8) + 8);
  v56 = *(_QWORD *)(v19 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v20);
  v69 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v22);
  sub_23F6B6580();
  v71 = v23;
  v58 = *(_QWORD *)(v8 - 8);
  v24 = v58;
  MEMORY[0x24BDAC7A8](v25);
  sub_23F77E1CC();
  sub_23FB2F968();
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F7F69E8();
  v27 = sub_23FB2F95C();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  sub_23F6B631C();
  v31 = v29 - v30;
  MEMORY[0x24BDAC7A8](v32);
  sub_23F77E490();
  v33 = *(void (**)(void))(v24 + 16);
  ((void (*)(uint64_t, _QWORD, uint64_t))v33)(v6, v68, v8);
  v62 = v19;
  v34 = v56;
  sub_23FB2F104();
  sub_23F7F66EC();
  v33();
  v35 = v71;
  sub_23F7B0BC4();
  sub_23FB2F56C();
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v2, v8);
  v36 = v72;
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v31 + *(int *)(v27 + 36), v35, AssociatedTypeWitness);
  v57 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v3, v31, v27);
  v58 = v27;
  v37 = &v3[*(int *)(v27 + 36)];
  v68 = *(void (**)(uint64_t, char *, uint64_t))(v36 + 16);
  while (1)
  {
    v39 = AssociatedTypeWitness;
    v38 = v71;
    v68((uint64_t)v71, v37, AssociatedTypeWitness);
    v40 = v69;
    sub_23F7B0BC4();
    sub_23FB2F53C();
    swift_getAssociatedConformanceWitness();
    sub_23F6B5FE0();
    v41 = sub_23FB2F11C();
    v42 = *(void (**)(char *, uint64_t))(v72 + 8);
    v42(v40, v39);
    v42(v38, v39);
    if ((v41 & 1) != 0)
      break;
    sub_23FB2F0EC();
    v43 = v34;
    v44 = sub_23FB2F5C0();
    v46 = sub_23F7F6640(v44, v45);
    v47 = v63;
    sub_23F7E7704(v46, v63, type metadata accessor for Session.Event);
    ((void (*)(uint64_t *, _QWORD))v3)(&v73, 0);
    v48 = v47;
    v49 = v64;
    sub_23F7E76D0(v48, v64, type metadata accessor for Session.Event);
    v50 = v65;
    v66(v49);
    if (v74)
    {
      sub_23F7F6140(v49, type metadata accessor for Session.Event);
      sub_23F7F6834();
      goto LABEL_9;
    }
    sub_23F7F6140(v49, type metadata accessor for Session.Event);
    v51 = v61;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v50, 1, v61) != 1)
    {
      sub_23F7F6834();
      v52 = v55;
      sub_23F6D3ECC(v55, v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 32));
      v53 = 0;
      goto LABEL_8;
    }
    v74 = 0;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v50, v60);
    v34 = v43;
  }
  (*(void (**)(char *, uint64_t))(v57 + 8))(v3, v58);
  v53 = 1;
  v52 = v55;
LABEL_8:
  sub_23F77DD6C(v52, v53);
LABEL_9:
  sub_23F6B5100();
}

void Session.SessionState.retrieveSessionStart()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;

  sub_23F6B5220();
  v20 = v6;
  v21 = sub_23FB2E7F8();
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B59E0();
  type metadata accessor for Session.Event.Payload(0);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5208();
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23F70D7F8();
  v11 = type metadata accessor for Session.Event(v10);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23F77DB24();
  v14 = type metadata accessor for Session.Transcript(v13);
  sub_23F7A12D0(*(_QWORD *)(v1 + *(int *)(v14 + 32)), v4);
  if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0(v4, 1, v11) == 1)
  {
    sub_23F7F6110(v4, &qword_256EA7A90);
  }
  else
  {
    sub_23F7E76D0(v4, v5, type metadata accessor for Session.Event);
    sub_23F7E7704(v5 + *(int *)(v11 + 28), v2, type metadata accessor for Session.Event.Payload);
    v15 = sub_23F7F64A8();
    sub_23F7F6140(v15, v16);
    sub_23F7B0BC4();
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_23F7E76D0(v2, v20, type metadata accessor for SessionStart);
      goto LABEL_9;
    }
    sub_23F7F6140(v2, type metadata accessor for Session.Event.Payload);
  }
  sub_23FB2E3CC();
  v17 = sub_23FB2E7E0();
  v18 = sub_23FB2F5F0();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)sub_23F7595E8();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_23F68F000, v17, v18, "Error! setup(sessionState:) called on non-SessionStart event", v19, 2u);
    sub_23F693DD0();
  }

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v21);
  sub_23F7F5EEC();
  sub_23F6B5AD4();
  swift_willThrow();
LABEL_9:
  sub_23F6B5100();
}

void Session.SessionState.latestSessionStart()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  int EnumCaseMultiPayload;
  char v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD);
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(_QWORD);
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_23F6B5220();
  a19 = v25;
  a20 = v26;
  v72 = v21;
  v65 = v27;
  v28 = sub_23FB2E7F8();
  sub_23F6B59A0();
  MEMORY[0x24BDAC7A8](v29);
  v30 = sub_23F70D7F8();
  v74 = type metadata accessor for Session.Event.Payload(v30);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v31);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F7F6400();
  sub_23F6916B8(&qword_256EA7A90);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B51A4();
  v71 = v34;
  v75 = sub_23F7F69DC();
  v35 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  sub_23F6B631C();
  v38 = v36 - v37;
  MEMORY[0x24BDAC7A8](v39);
  sub_23F6B6580();
  v69 = v40;
  v41 = sub_23F6D398C();
  a10 = *(_QWORD *)(v20 + *(int *)(type metadata accessor for Session.Transcript(v41) + 32));
  v42 = *(_QWORD *)(a10 + 16);
  v70 = v28;
  if (!v42)
  {
    v45 = swift_bridgeObjectRetain();
    v52 = 1;
    v55 = v22;
LABEL_9:
    MEMORY[0x24BDAC7A8](v45);
    *(&v65 - 2) = (uint64_t)&a10;
    v56 = v71;
    sub_23F7F5D30((_QWORD *(*)(_QWORD *__return_ptr, uint64_t *))sub_23F7F5F64, v42, v52, (void (*)(_QWORD))type metadata accessor for Session.Event, v71);
    swift_bridgeObjectRelease();
    v57 = v75;
    if (_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwet_0((uint64_t)v56, 1, v75) == 1)
    {
      sub_23F7F6110((uint64_t)v56, &qword_256EA7A90);
    }
    else
    {
      v58 = v69;
      sub_23F7E76D0((uint64_t)v56, v69, type metadata accessor for Session.Event);
      sub_23F7E7704(v58 + *(int *)(v57 + 28), v24, type metadata accessor for Session.Event.Payload);
      v59 = sub_23F6B6AB8();
      sub_23F7F6140(v59, v60);
      if (!swift_getEnumCaseMultiPayload())
      {
        sub_23F7E76D0(v24, v65, type metadata accessor for SessionStart);
LABEL_16:
        sub_23F6B5100();
        return;
      }
      sub_23F7F6140(v24, type metadata accessor for Session.Event.Payload);
    }
    v61 = v70;
    sub_23FB2E3CC();
    v62 = sub_23FB2E7E0();
    v63 = sub_23FB2F5F0();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)sub_23F7595E8();
      *(_WORD *)v64 = 0;
      _os_log_impl(&dword_23F68F000, v62, v63, "Error! lastSessionStart() called on non-SessionStart event", v64, 2u);
      sub_23F693DD0();
    }

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v23, v61);
    sub_23F7F5EEC();
    sub_23F6B5AD4();
    swift_willThrow();
    goto LABEL_16;
  }
  v66 = v24;
  v67 = v23;
  v68 = v22;
  sub_23F78F3B0();
  v73 = v43 + v44;
  v45 = swift_bridgeObjectRetain();
  while (v42 <= *(_QWORD *)(v45 + 16))
  {
    v46 = v45;
    --v42;
    v47 = v35;
    sub_23F7E7704(v73 + *(_QWORD *)(v35 + 72) * v42, v38, type metadata accessor for Session.Event);
    sub_23F7F696C();
    sub_23F7E7704(v48, v49, v50);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v52 = EnumCaseMultiPayload != 0;
    v53 = sub_23F77E668();
    sub_23F7F6140(v53, v54);
    sub_23F7F6140(v38, type metadata accessor for Session.Event);
    if (!EnumCaseMultiPayload)
    {
      v55 = v68;
      v24 = v66;
      v23 = v67;
      goto LABEL_9;
    }
    v35 = v47;
    v45 = v46;
    if (!v42)
    {
      v23 = v67;
      v55 = v68;
      v24 = v66;
      goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t static Session.SessionState.SessionStateError.== infix(_:_:)()
{
  return 1;
}

uint64_t Session.SessionState.SessionStateError.hash(into:)()
{
  return sub_23FB2FC68();
}

uint64_t Session.SessionState.SessionStateError.hashValue.getter()
{
  sub_23FB2FC5C();
  sub_23FB2FC68();
  return sub_23F6B5608();
}

uint64_t sub_23F7F0E1C()
{
  return Session.SessionState.SessionStateError.hashValue.getter();
}

uint64_t sub_23F7F0E30()
{
  return Session.SessionState.SessionStateError.hash(into:)();
}

uint64_t sub_23F7F0E44(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_23F7F0E60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *v3;
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  v8 = sub_23F6B5608() & ~(-1 << *(_BYTE *)(v7 + 32));
  if (((*(_QWORD *)(v7 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23F7F6544();
    v18 = sub_23F7F2EE4(a2, a3, v8, isUniquelyReferenced_nonNull_native);
    sub_23F7F6754(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
    *a1 = a2;
    a1[1] = a3;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(v7 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a2 && v10[1] == a3;
  if (!v11 && (sub_23F73FFD8() & 1) == 0)
  {
    do
    {
      sub_23F7F6908();
      if (((*(_QWORD *)(v7 + 56 + v14) >> v8) & 1) == 0)
        goto LABEL_15;
      v15 = (_QWORD *)(v9 + 16 * v8);
      v16 = *v15 == a2 && v15[1] == a3;
    }
    while (!v16 && (sub_23F73FFD8() & 1) == 0);
  }
  sub_23F6B5908();
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v8);
  v13 = v12[1];
  *a1 = *v12;
  a1[1] = v13;
  swift_bridgeObjectRetain();
LABEL_16:
  sub_23F7F6470();
}

void sub_23F7F0FB0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  sub_23F6B50E8();
  sub_23F7F68DC();
  v2 = sub_23FB2EDD4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F7F6590();
  sub_23F72156C(&qword_256EA8CA0, v4);
  sub_23F7F68A4();
  sub_23F7F661C();
  sub_23F7F6330();
  if ((v6 & 1) != 0)
  {
    sub_23F7F672C(v5);
    while (1)
    {
      sub_23F7F6410(v7);
      sub_23F72156C(&qword_256EA8CA8, (void (*)(uint64_t))MEMORY[0x24BEB9D20]);
      sub_23F7F65D0();
      sub_23F7F651C();
      if ((v0 & 1) != 0)
        break;
      v7 = sub_23F7F63C8();
      if ((v8 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v1 = v13;
        v9 = v14;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_23F7F6870();
    sub_23F7F64EC();
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = v3;
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    sub_23F7F6504();
    v10 = sub_23F7F644C();
    sub_23F7F307C(v10, v11, v12);
    sub_23F7F66C8();
    sub_23F72E0C8(v1, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  }
  sub_23F693DDC();
}

void sub_23F7F10C0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *v2;
  sub_23FB2FC5C();
  sub_23F6B6548();
  sub_23F6AD3EC();
  v6 = sub_23F6B5608() & ~(-1 << *(_BYTE *)(v5 + 32));
  if (((*(_QWORD *)(v5 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_6:
    sub_23F6B6090();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = sub_23F7F6544();
    v14 = sub_23F7F32D0(v13, v6, isUniquelyReferenced_nonNull_native);
    sub_23F7F6754(v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
    *a1 = a2;
    goto LABEL_7;
  }
  sub_23F6B54F8();
  sub_23F69DB94();
  v8 = v7;
  sub_23F693DFC();
  if ((v8 & 1) == 0)
  {
    do
    {
      sub_23F7F6908();
      if (((*(_QWORD *)(v5 + 56 + v9) >> v6) & 1) == 0)
        goto LABEL_6;
      sub_23F6B54F8();
      sub_23F69DB94();
      v11 = v10;
      sub_23F693DFC();
    }
    while ((v11 & 1) == 0);
  }
  sub_23F6B5908();
  sub_23F6B6090();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v6);
  swift_bridgeObjectRetain();
LABEL_7:
  sub_23F7F6470();
}

void sub_23F7F11E8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  sub_23F6B50E8();
  sub_23F7F68DC();
  v2 = sub_23FB2EF54();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23F7F6590();
  sub_23F72156C(&qword_256EA8CB0, v4);
  sub_23F7F68A4();
  sub_23F7F661C();
  sub_23F7F6330();
  if ((v6 & 1) != 0)
  {
    sub_23F7F672C(v5);
    while (1)
    {
      sub_23F7F6410(v7);
      sub_23F72156C(&qword_256EA8CB8, (void (*)(uint64_t))MEMORY[0x24BEBA5E0]);
      sub_23F7F65D0();
      sub_23F7F651C();
      if ((v0 & 1) != 0)
        break;
      v7 = sub_23F7F63C8();
      if ((v8 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v1 = v13;
        v9 = v14;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_23F7F6870();
    sub_23F7F64EC();
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = v3;
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    sub_23F7F6504();
    v10 = sub_23F7F644C();
    sub_23F7F345C(v10, v11, v12);
    sub_23F7F66C8();
    sub_23F72E0C8(v1, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  }
  sub_23F693DDC();
}

void sub_23F7F12F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t *v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v51[2];
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  sub_23F6B50E8();
  v5 = v4;
  v53 = v6;
  v7 = sub_23FB2EF54();
  v63 = *(_QWORD *)(v7 - 8);
  v64 = v7;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B51A4();
  sub_23F70D434(v9);
  v10 = sub_23FB2E8D0();
  v11 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  v62 = v11;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5314((uint64_t)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = sub_23F6916B8(&qword_256EA9AA8);
  sub_23F6D3588();
  MEMORY[0x24BDAC7A8](v14);
  v15 = sub_23F77DB24();
  v16 = type metadata accessor for ToolboxCustomKeyResult(v15);
  sub_23F7F671C();
  MEMORY[0x24BDAC7A8](v17);
  sub_23F6B5C9C();
  MEMORY[0x24BDAC7A8](v18);
  v60 = (uint64_t)v51 - v19;
  sub_23F6B5664();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v51 - v22;
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B5314((uint64_t)v51 - v24);
  v52 = v0;
  v25 = *v0;
  sub_23FB2FC5C();
  sub_23F6B5F1C();
  ToolboxCustomKeyResult.hash(into:)();
  v26 = sub_23FB2FC8C();
  v27 = -1 << *(_BYTE *)(v25 + 32);
  v28 = v26 & ~v27;
  v29 = v25 + 56;
  if (((*(_QWORD *)(v25 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
  {
    v65 = ~v27;
    v66 = *(_QWORD *)(v1 + 72);
    v58 = v16;
    v59 = v5;
    v57 = v2;
    v56 = v25 + 56;
    v67 = v25;
    v68 = v23;
    do
    {
      v30 = *(_QWORD *)(v25 + 48);
      v31 = v66 * v28;
      sub_23F7F653C(v30 + v66 * v28, (uint64_t)v23);
      v32 = (uint64_t)v23;
      v33 = v3 + *(int *)(v69 + 48);
      sub_23F7F653C(v32, v3);
      sub_23F7F653C(v5, v33);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_23F7F653C(v3, v2);
        if (sub_23F7F6938() != 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v2, v64);
          goto LABEL_9;
        }
        v35 = v63;
        v34 = v64;
        v36 = v55;
        sub_23F72E0C8(v55, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
        v37 = sub_23FB2EF0C();
        v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v38(v36, v34);
        v39 = v2;
        v40 = v34;
      }
      else
      {
        v41 = v60;
        sub_23F7F653C(v3, v60);
        if (sub_23F7F6938() == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v41, v61);
LABEL_9:
          sub_23F7F6110(v3, &qword_256EA9AA8);
          v23 = v68;
          goto LABEL_13;
        }
        v43 = v61;
        v42 = v62;
        v44 = v54;
        v45 = sub_23F7B0BC4();
        sub_23F75E68C(v45, v46, v47);
        v37 = sub_23FB2E894();
        v38 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v38(v44, v43);
        v39 = sub_23F7F6694();
      }
      v38(v39, v40);
      if ((v37 & 1) != 0)
      {
        sub_23F7F656C(v3);
        sub_23F7F656C((uint64_t)v68);
        swift_bridgeObjectRelease();
        sub_23F7F656C(v59);
        sub_23F7E7704(*(_QWORD *)(*v52 + 48) + v31, v53, type metadata accessor for ToolboxCustomKeyResult);
        goto LABEL_16;
      }
      sub_23F7F63F8(v3);
      v5 = v59;
      v2 = v57;
      v23 = v68;
      v29 = v56;
LABEL_13:
      sub_23F7F63F8((uint64_t)v23);
      v28 = (v28 + 1) & v65;
      v25 = v67;
    }
    while (((*(_QWORD *)(v29 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0);
  }
  sub_23F6B5908();
  v48 = v52;
  v49 = v51[1];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_23F7E7704(v5, v49, type metadata accessor for ToolboxCustomKeyResult);
  v70 = *v48;
  *v48 = 0x8000000000000000;
  sub_23F7F36B0(v49, v28, isUniquelyReferenced_nonNull_native);
  *v48 = v70;
  swift_bridgeObjectRelease();
  sub_23F7F6610(v5);
LABEL_16:
  sub_23F693DDC();
}

uint64_t sub_23F7F170C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v33;

  v10 = *v5;
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23F6B6548();
  sub_23FB2F200();
  sub_23F6B6090();
  sub_23F6B5F1C();
  sub_23FB2F200();
  sub_23F6B5908();
  v11 = sub_23FB2FC8C();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v15 = ~v12;
    v16 = *(_QWORD *)(v10 + 48);
    while (1)
    {
      v17 = (_QWORD *)(v16 + 32 * v13);
      v18 = v17[2];
      v19 = v17[3];
      v20 = *v17 == a2 && v17[1] == a3;
      if (v20 || (sub_23FB2FB78() & 1) != 0)
      {
        v21 = v18 == a4 && v19 == a5;
        if (v21 || (sub_23F73FFD8() & 1) != 0)
          break;
      }
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_14;
    }
    sub_23F6B5908();
    sub_23F6B6090();
    swift_bridgeObjectRelease();
    v27 = (_QWORD *)(*(_QWORD *)(*v31 + 48) + 32 * v13);
    v28 = v27[1];
    v29 = v27[2];
    v30 = v27[3];
    *a1 = *v27;
    a1[1] = v28;
    a1[2] = v29;
    a1[3] = v30;
    swift_bridgeObjectRetain();
    sub_23F6B54F8();
    return 0;
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = *v31;
    *v31 = 0x8000000000000000;
    sub_23F6B6548();
    sub_23F6B5F1C();
    sub_23F7F66EC();
    sub_23F7F3B64(v23, v24, v25, a5, v13, isUniquelyReferenced_nonNull_native);
    *v31 = v33;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    result = 1;
    a1[2] = a4;
    a1[3] = a5;
  }
  return result;
}

uint64_t sub_23F7F18FC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_23FB2FC50();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_23F7F3D44(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_23F7F19F4(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_23FB2E1D4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_23F72156C(&qword_256EAB858, v11);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_23FB2F068();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_23F72156C(&qword_256EAB860, (void (*)(uint64_t))MEMORY[0x24BE57C08]);
      v21 = sub_23FB2F11C();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_23F7F3E5C((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_23F7F1C50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAA6D8);
  v3 = sub_23FB2F770();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      sub_23FB2FC5C();
      sub_23FB2F200();
      result = sub_23FB2FC8C();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                sub_23F7F0E44(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_23F7F1F28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAB850);
  v3 = sub_23FB2F770();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    if (!v8)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      sub_23FB2FC5C();
      sub_23F6AD3EC();
      sub_23FB2FC8C();
      result = sub_23FB2F74C();
      *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * result) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v8)
        goto LABEL_6;
LABEL_7:
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
      if (v15 >= v9)
        goto LABEL_23;
      v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        v12 = v15 + 1;
        if (v15 + 1 >= v9)
          goto LABEL_23;
        v16 = v6[v12];
        if (!v16)
        {
          v12 = v15 + 2;
          if (v15 + 2 >= v9)
            goto LABEL_23;
          v16 = v6[v12];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_23:
              swift_release();
              v19 = 1 << *(_BYTE *)(v2 + 32);
              if (v19 > 63)
                sub_23F7F0E44(0, (unint64_t)(v19 + 63) >> 6, (_QWORD *)(v2 + 56));
              else
                *v6 = -1 << v19;
              v1 = v0;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_29;
                if (v12 >= v9)
                  goto LABEL_23;
                v16 = v6[v12];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v12 = v17;
          }
        }
      }
LABEL_20:
      v8 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

void sub_23F7F2170()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, unint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  sub_23F6B50E8();
  v3 = v2;
  v4 = v0;
  v7 = sub_23F7F67A4(v5, v6);
  v41 = *(_QWORD *)(v7 - 8);
  sub_23F77DC44();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F7F6318();
  v9 = (_QWORD *)*v0;
  sub_23F6916B8(v3);
  sub_23F6B6F9C();
  v10 = sub_23FB2F770();
  if (v9[2])
  {
    sub_23F7F65E8();
    v40 = v9 + 7;
    sub_23F7F691C();
    v13 = v12 & v11;
    sub_23F7F6764();
    v39 = v14;
    v15 = v10 + 56;
    swift_retain();
    v16 = 0;
    if (!v13)
      goto LABEL_4;
LABEL_3:
    v17 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    for (i = v17 | (v16 << 6); ; i = v25 + (v16 << 6))
    {
      v26 = v9;
      v27 = v9[6];
      v28 = *(_QWORD *)(v41 + 72);
      v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 32);
      v29(v1, v27 + v28 * i, v7);
      sub_23F7F68D0();
      sub_23FB2F068();
      sub_23F7F68BC();
      if (((v32 << v31) & ~*(_QWORD *)(v15 + 8 * v30)) == 0)
      {
        sub_23F7F687C();
        while (++v35 != v36 || (v34 & 1) == 0)
        {
          v37 = v35 == v36;
          if (v35 == v36)
            v35 = 0;
          v34 |= v37;
          if (*(_QWORD *)(v15 + 8 * v35) != -1)
          {
            sub_23F7F685C();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }
      sub_23F7F6890();
LABEL_27:
      *(_QWORD *)(v15 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
      v29(*(_QWORD *)(v10 + 48) + v33 * v28, v1, v7);
      ++*(_QWORD *)(v10 + 16);
      v9 = v26;
      if (v13)
        goto LABEL_3;
LABEL_4:
      if (__OFADD__(v16, 1))
        goto LABEL_35;
      if (v16 + 1 >= v39)
        goto LABEL_29;
      sub_23F7F68F0();
      v16 = v19;
      if (!v20)
      {
        v16 = v19 + 1;
        if (v19 + 1 >= v39)
          goto LABEL_29;
        if (!v40[v16])
        {
          v16 = v19 + 2;
          if (v19 + 2 >= v39)
            goto LABEL_29;
          if (!v40[v16])
          {
            if (v19 + 3 >= v39)
            {
LABEL_29:
              sub_23F7D24FC();
              v4 = v0;
              sub_23F7F65E8();
              if (v38 > 63)
                sub_23F7F0E44(0, (unint64_t)(v38 + 63) >> 6, v40);
              else
                *v40 = -1 << v38;
              v9[2] = 0;
              break;
            }
            sub_23F7F68F0();
            if (!v22)
            {
              while (1)
              {
                v16 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_36;
                if (v16 >= v39)
                  goto LABEL_29;
                ++v21;
                if (v40[v16])
                  goto LABEL_17;
              }
            }
            v16 = v21;
          }
        }
      }
LABEL_17:
      sub_23F7F6744();
      v13 = v24 & v23;
    }
  }
  sub_23F7D24FC();
  *v4 = v10;
  sub_23F693DDC();
}

void sub_23F7F2428()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v1 = v0;
  v2 = sub_23FB2EF54();
  v53 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v52 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23FB2E8D0();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ToolboxCustomKeyResult(0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v60 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v47 - v9;
  v11 = *v0;
  sub_23F6916B8(&qword_256EAB838);
  v12 = sub_23FB2F770();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v48 = v0;
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v56 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v55 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    swift_retain();
    v19 = 0;
    v20 = (uint64_t)v60;
    v57 = v10;
    if (!v17)
      goto LABEL_7;
LABEL_6:
    v21 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    for (i = v21 | (v19 << 6); ; i = __clz(__rbit64(v24)) + (v19 << 6))
    {
      v26 = v11;
      v27 = *(_QWORD *)(v11 + 48);
      v28 = *(_QWORD *)(v58 + 72);
      sub_23F7E76D0(v27 + v28 * i, (uint64_t)v10, type metadata accessor for ToolboxCustomKeyResult);
      sub_23FB2FC5C();
      sub_23F7E7704((uint64_t)v10, v20, type metadata accessor for ToolboxCustomKeyResult);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v29 = v52;
        v30 = v53;
        v31 = v54;
        (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v52, v20, v54);
        sub_23FB2FC68();
        sub_23F72156C(&qword_256EA8CB0, (void (*)(uint64_t))MEMORY[0x24BEBA5E0]);
        sub_23FB2F074();
        v32 = v29;
        v10 = v57;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v31);
      }
      else
      {
        v34 = v49;
        v33 = v50;
        v35 = v51;
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v49, v20, v51);
        sub_23FB2FC68();
        sub_23F72156C(&qword_256EA9AA0, (void (*)(uint64_t))MEMORY[0x24BEB8FE0]);
        sub_23FB2F074();
        v36 = v35;
        v10 = v57;
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v36);
      }
      v37 = sub_23FB2FC8C();
      v38 = -1 << *(_BYTE *)(v13 + 32);
      v39 = v37 & ~v38;
      v40 = v39 >> 6;
      if (((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6))) == 0)
      {
        v42 = 0;
        v43 = (unint64_t)(63 - v38) >> 6;
        v20 = (uint64_t)v60;
        while (++v40 != v43 || (v42 & 1) == 0)
        {
          v44 = v40 == v43;
          if (v40 == v43)
            v40 = 0;
          v42 |= v44;
          v45 = *(_QWORD *)(v18 + 8 * v40);
          if (v45 != -1)
          {
            v41 = __clz(__rbit64(~v45)) + (v40 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v41 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      v20 = (uint64_t)v60;
LABEL_33:
      *(_QWORD *)(v18 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
      sub_23F7E76D0((uint64_t)v10, *(_QWORD *)(v13 + 48) + v41 * v28, type metadata accessor for ToolboxCustomKeyResult);
      ++*(_QWORD *)(v13 + 16);
      v11 = v26;
      if (v17)
        goto LABEL_6;
LABEL_7:
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_41;
      if (v23 >= v55)
        goto LABEL_35;
      v24 = v56[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v55)
          goto LABEL_35;
        v24 = v56[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v55)
            goto LABEL_35;
          v24 = v56[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v55)
            {
LABEL_35:
              swift_release();
              v1 = v48;
              v46 = 1 << *(_BYTE *)(v11 + 32);
              if (v46 > 63)
                sub_23F7F0E44(0, (unint64_t)(v46 + 63) >> 6, v56);
              else
                *v56 = -1 << v46;
              *(_QWORD *)(v11 + 16) = 0;
              break;
            }
            v24 = v56[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_42;
                if (v19 >= v55)
                  goto LABEL_35;
                v24 = v56[v19];
                ++v25;
                if (v24)
                  goto LABEL_20;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_20:
      v17 = (v24 - 1) & v24;
    }
  }
  swift_release();
  *v1 = v13;
}

uint64_t sub_23F7F2930()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAB840);
  v3 = sub_23FB2F770();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      v16 = v2;
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * i);
      v18 = *v17;
      v19 = v17[1];
      v20 = v17[2];
      v21 = v17[3];
      sub_23FB2FC5C();
      swift_bridgeObjectRetain();
      sub_23FB2F200();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23FB2F200();
      swift_bridgeObjectRelease();
      result = sub_23FB2FC8C();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v8 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v8 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v25);
      *v30 = v18;
      v30[1] = v19;
      v30[2] = v20;
      v30[3] = v21;
      ++*(_QWORD *)(v4 + 16);
      v2 = v16;
      if (v7)
        goto LABEL_6;
LABEL_7:
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_38;
      if (v13 >= v32)
        goto LABEL_32;
      v14 = v33[v13];
      ++v10;
      if (!v14)
      {
        v10 = v13 + 1;
        if (v13 + 1 >= v32)
          goto LABEL_32;
        v14 = v33[v10];
        if (!v14)
        {
          v10 = v13 + 2;
          if (v13 + 2 >= v32)
            goto LABEL_32;
          v14 = v33[v10];
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v32)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v31 = 1 << *(_BYTE *)(v2 + 32);
              if (v31 > 63)
                sub_23F7F0E44(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v14 = v33[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_39;
                if (v10 >= v32)
                  goto LABEL_32;
                v14 = v33[v10];
                ++v15;
                if (v14)
                  goto LABEL_20;
              }
            }
            v10 = v15;
          }
        }
      }
LABEL_20:
      v7 = (v14 - 1) & v14;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23F7F2C64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAA640);
  result = sub_23FB2F770();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v7 = (uint64_t *)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 56);
    v8 = 1 << *(_BYTE *)(v2 + 32);
    v27 = -1 << v8;
    v28 = v1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & v6;
    v29 = 1 << *(_BYTE *)(v2 + 32);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = result + 56;
    if ((v9 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      result = sub_23FB2FC50();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v10)
        goto LABEL_6;
LABEL_7:
      v15 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_38;
      if (v15 >= v11)
        goto LABEL_32;
      v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        v5 = v15 + 1;
        if (v15 + 1 >= v11)
          goto LABEL_32;
        v16 = v7[v5];
        if (!v16)
        {
          v5 = v15 + 2;
          if (v15 + 2 >= v11)
            goto LABEL_32;
          v16 = v7[v5];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63)
                sub_23F7F0E44(0, v11, (_QWORD *)(v2 + 56));
              else
                *v7 = v27;
              v1 = v28;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_39;
                if (v5 >= v11)
                  goto LABEL_32;
                v16 = v7[v5];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v5 = v17;
          }
        }
      }
LABEL_20:
      v10 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23F7F2EE4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23F7F1C50();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23F7F40B0();
      goto LABEL_22;
    }
    sub_23F7F4B50();
  }
  v11 = *v4;
  sub_23FB2FC5C();
  sub_23FB2F200();
  result = sub_23FB2FC8C();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23FB2FB78(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23FB2FBCC();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23FB2FB78();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_23F7F307C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_23FB2EDD4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23F7F2170();
  }
  else
  {
    if (v11 > v10)
    {
      sub_23F7F496C();
      goto LABEL_12;
    }
    sub_23F7F500C();
  }
  v12 = *v3;
  sub_23F72156C(&qword_256EA8CA0, (void (*)(uint64_t))MEMORY[0x24BEB9D20]);
  v13 = sub_23FB2F068();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_23F72156C(&qword_256EA8CA8, (void (*)(uint64_t))MEMORY[0x24BEB9D20]);
      v18 = sub_23FB2F11C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23FB2FBCC();
  __break(1u);
  return result;
}

uint64_t sub_23F7F32D0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_23F7F1F28();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_23F7F4260();
      goto LABEL_14;
    }
    sub_23F7F4DF8();
  }
  v8 = *v3;
  sub_23FB2FC5C();
  sub_23F6AD3EC();
  result = sub_23FB2FC8C();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_23F69DB94();
    v11 = v10;
    result = swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
LABEL_13:
      sub_23F6916B8(&qword_256EA98F8);
      result = sub_23FB2FBCC();
      __break(1u);
    }
    else
    {
      v12 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        swift_bridgeObjectRetain();
        sub_23F69DB94();
        v14 = v13;
        result = swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v5;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

uint64_t sub_23F7F345C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_23FB2EF54();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23F7F2170();
  }
  else
  {
    if (v11 > v10)
    {
      sub_23F7F496C();
      goto LABEL_12;
    }
    sub_23F7F500C();
  }
  v12 = *v3;
  sub_23F72156C(&qword_256EA8CB0, (void (*)(uint64_t))MEMORY[0x24BEBA5E0]);
  v13 = sub_23FB2F068();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_23F72156C(&qword_256EA8CB8, (void (*)(uint64_t))MEMORY[0x24BEBA5E0]);
      v18 = sub_23FB2F11C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23FB2FBCC();
  __break(1u);
  return result;
}

void sub_23F7F36B0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = sub_23FB2EF54();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v49 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23FB2E8D0();
  v52 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23F6916B8(&qword_256EA9AA8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ToolboxCustomKeyResult(0);
  v47 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v46 - v20;
  v22 = *(_QWORD *)(*v3 + 16);
  v23 = *(_QWORD *)(*v3 + 24);
  v46[0] = v3;
  if (v23 <= v22 || (a3 & 1) == 0)
  {
    v51 = v19;
    if ((a3 & 1) != 0)
    {
      sub_23F7F2428();
    }
    else
    {
      if (v23 > v22)
      {
        sub_23F7F4408();
        goto LABEL_20;
      }
      sub_23F7F528C();
    }
    v24 = *v3;
    sub_23FB2FC5C();
    ToolboxCustomKeyResult.hash(into:)();
    v25 = sub_23FB2FC8C();
    v26 = -1 << *(_BYTE *)(v24 + 32);
    a2 = v25 & ~v26;
    v59 = v24 + 56;
    v60 = v24;
    if (((*(_QWORD *)(v24 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v58 = ~v26;
      v57 = *(_QWORD *)(v47 + 72);
      v50 = a1;
      v55 = v21;
      v56 = v17;
      v46[1] = v14;
      do
      {
        sub_23F7E7704(*(_QWORD *)(v60 + 48) + v57 * a2, (uint64_t)v21, type metadata accessor for ToolboxCustomKeyResult);
        v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
        sub_23F7E7704((uint64_t)v21, (uint64_t)v13, type metadata accessor for ToolboxCustomKeyResult);
        sub_23F7E7704(a1, v27, type metadata accessor for ToolboxCustomKeyResult);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_23F7E7704((uint64_t)v13, (uint64_t)v17, type metadata accessor for ToolboxCustomKeyResult);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v28 = v53;
            v29 = v54;
            v30 = v9;
            v31 = v49;
            (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v49, v27, v54);
            v32 = sub_23FB2EF0C();
            v33 = *(void (**)(char *, uint64_t))(v28 + 8);
            v34 = v31;
            v9 = v30;
            v21 = v55;
            v33(v34, v29);
            v35 = v29;
            v17 = v56;
            v33(v56, v35);
            a1 = v50;
            sub_23F7F6140((uint64_t)v13, type metadata accessor for ToolboxCustomKeyResult);
            if ((v32 & 1) != 0)
              goto LABEL_23;
            goto LABEL_19;
          }
          (*(void (**)(char *, uint64_t))(v53 + 8))(v17, v54);
        }
        else
        {
          v36 = v51;
          sub_23F7E7704((uint64_t)v13, v51, type metadata accessor for ToolboxCustomKeyResult);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            v37 = v52;
            v38 = v48;
            (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v48, v27, v9);
            v39 = sub_23FB2E894();
            v40 = *(void (**)(char *, uint64_t))(v37 + 8);
            v41 = v38;
            v17 = v56;
            v40(v41, v9);
            v40((char *)v36, v9);
            a1 = v50;
            sub_23F7F6140((uint64_t)v13, type metadata accessor for ToolboxCustomKeyResult);
            v21 = v55;
            if ((v39 & 1) != 0)
              goto LABEL_23;
            goto LABEL_19;
          }
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v36, v9);
          v21 = v55;
        }
        sub_23F7F6110((uint64_t)v13, &qword_256EA9AA8);
LABEL_19:
        sub_23F7F6140((uint64_t)v21, type metadata accessor for ToolboxCustomKeyResult);
        a2 = (a2 + 1) & v58;
      }
      while (((*(_QWORD *)(v59 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_20:
  v42 = *(_QWORD *)v46[0];
  *(_QWORD *)(*(_QWORD *)v46[0] + 8 * (a2 >> 6) + 56) |= 1 << a2;
  sub_23F7E76D0(a1, *(_QWORD *)(v42 + 48) + *(_QWORD *)(v47 + 72) * a2, type metadata accessor for ToolboxCustomKeyResult);
  v43 = *(_QWORD *)(v42 + 16);
  v44 = __OFADD__(v43, 1);
  v45 = v43 + 1;
  if (v44)
  {
    __break(1u);
LABEL_23:
    sub_23F7F6140((uint64_t)v21, type metadata accessor for ToolboxCustomKeyResult);
    sub_23FB2FBCC();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v42 + 16) = v45;
  }
}

uint64_t sub_23F7F3B64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v11 = result;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_21;
  if ((a6 & 1) != 0)
  {
    sub_23F7F2930();
  }
  else
  {
    if (v13 > v12)
    {
      result = (uint64_t)sub_23F7F462C();
      goto LABEL_21;
    }
    sub_23F7F571C();
  }
  v14 = *v6;
  sub_23FB2FC5C();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23FB2F200();
  swift_bridgeObjectRelease();
  result = sub_23FB2FC8C();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a5 = result & ~v15;
  v16 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v17 = ~v15;
    v18 = *(_QWORD *)(v14 + 48);
    do
    {
      v19 = (_QWORD *)(v18 + 32 * a5);
      v20 = v19[2];
      v21 = v19[3];
      v22 = *v19 == v11 && v19[1] == a2;
      if (v22 || (result = sub_23FB2FB78(), (result & 1) != 0))
      {
        if (v20 == a3 && v21 == a4)
          goto LABEL_24;
        result = sub_23FB2FB78();
        if ((result & 1) != 0)
          goto LABEL_24;
      }
      a5 = (a5 + 1) & v17;
    }
    while (((*(_QWORD *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
  }
LABEL_21:
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v25 = (uint64_t *)(*(_QWORD *)(v24 + 48) + 32 * a5);
  *v25 = v11;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_24:
  result = sub_23FB2FBCC();
  __break(1u);
  return result;
}

void sub_23F7F3D44(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_23F7F2C64();
  }
  else
  {
    if (v7 > v6)
    {
      sub_23F7F47EC();
      goto LABEL_14;
    }
    sub_23F7F5A1C();
  }
  v8 = *v3;
  v9 = sub_23FB2FC50();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == a1)
    {
LABEL_13:
      sub_23FB2FBCC();
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = a1;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = v16;
    sub_23F694C84();
  }
}

uint64_t sub_23F7F3E5C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_23FB2E1D4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23F7F2170();
  }
  else
  {
    if (v11 > v10)
    {
      sub_23F7F496C();
      goto LABEL_12;
    }
    sub_23F7F500C();
  }
  v12 = *v3;
  sub_23F72156C(&qword_256EAB858, (void (*)(uint64_t))MEMORY[0x24BE57C08]);
  v13 = sub_23FB2F068();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_23F72156C(&qword_256EAB860, (void (*)(uint64_t))MEMORY[0x24BE57C08]);
      v18 = sub_23FB2F11C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23FB2FBCC();
  __break(1u);
  return result;
}

void *sub_23F7F40B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_23F6916B8(&qword_256EAA6D8);
  v2 = *v0;
  v3 = sub_23FB2F764();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23F7F4260()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_23F6916B8(&qword_256EAB850);
  v2 = *v0;
  v3 = sub_23FB2F764();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_23F7F4408()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for ToolboxCustomKeyResult(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6916B8(&qword_256EAB838);
  v6 = *v0;
  v7 = sub_23FB2F764();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release();
LABEL_30:
    *v1 = v8;
    return;
  }
  v25 = v1;
  v9 = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 56 + 8 * v11)
    memmove(v9, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  if (!v16)
    goto LABEL_12;
LABEL_11:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v18 | (v13 << 6); ; i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    v23 = *(_QWORD *)(v3 + 72) * i;
    sub_23F7E7704(*(_QWORD *)(v6 + 48) + v23, (uint64_t)v5, type metadata accessor for ToolboxCustomKeyResult);
    sub_23F7E76D0((uint64_t)v5, *(_QWORD *)(v8 + 48) + v23, type metadata accessor for ToolboxCustomKeyResult);
    if (v16)
      goto LABEL_11;
LABEL_12:
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v17)
      goto LABEL_28;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v17)
        goto LABEL_28;
      v21 = *(_QWORD *)(v10 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v17)
          goto LABEL_28;
        v21 = *(_QWORD *)(v10 + 8 * v13);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v16 = (v21 - 1) & v21;
  }
  v22 = v20 + 3;
  if (v22 >= v17)
  {
LABEL_28:
    swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v21 = *(_QWORD *)(v10 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
}

void *sub_23F7F462C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = v0;
  sub_23F6916B8(&qword_256EAB840);
  v2 = *v0;
  v3 = sub_23FB2F764();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 32 * i);
    v21 = v20[1];
    v22 = v20[2];
    v23 = v20[3];
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * i);
    *v24 = *v20;
    v24[1] = v21;
    v24[2] = v22;
    v24[3] = v23;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_23F7F47EC()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = v0;
  sub_23F6916B8(&qword_256EAA640);
  v2 = (_QWORD *)*v0;
  v3 = sub_23FB2F764();
  if (!v2[2])
  {
LABEL_26:
    swift_release();
    *v1 = v3;
    sub_23F694C84();
    return;
  }
  sub_23F7F65E8();
  v4 = v2 + 7;
  sub_23F7F6764();
  if ((_QWORD *)v3 != v2 || v5 >= &v2[v6 + 7])
    memmove(v5, v2 + 7, 8 * v6);
  *(_QWORD *)(v3 + 16) = v2[2];
  sub_23F7F6764();
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v9 << 6); ; i = __clz(__rbit64(v14)) + (v9 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i) = *(_QWORD *)(v2[6] + 8 * i);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8)
      goto LABEL_26;
    v14 = v4[v13];
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_26;
      v14 = v4[v9];
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_26;
        v14 = v4[v9];
        if (!v14)
          break;
      }
    }
LABEL_23:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v8)
    goto LABEL_26;
  v14 = v4[v15];
  if (v14)
  {
    v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v8)
      goto LABEL_26;
    v14 = v4[v9];
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void sub_23F7F496C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;

  sub_23F6B50E8();
  v3 = v2;
  v4 = v0;
  v6 = *(_QWORD *)(v5(0) - 8);
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F7F6814();
  sub_23F6916B8(v3);
  v8 = (_QWORD *)*v0;
  v9 = sub_23FB2F764();
  if (!v8[2])
  {
    swift_release();
LABEL_30:
    *v4 = v9;
    sub_23F693DDC();
    return;
  }
  v28 = v4;
  sub_23F7F65E8();
  v10 = v8 + 7;
  sub_23F7F6764();
  if ((_QWORD *)v9 != v8 || v11 >= &v8[v12 + 7])
    memmove(v11, v8 + 7, 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = v8[2];
  sub_23F7F65E8();
  v16 = v8[7];
  v17 = -1;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  v18 = v17 & v16;
  v19 = (unint64_t)(v15 + 63) >> 6;
  if ((v17 & v16) == 0)
    goto LABEL_12;
LABEL_11:
  v20 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v20 | (v14 << 6); ; i = v26 + (v14 << 6))
  {
    v27 = *(_QWORD *)(v6 + 72) * i;
    sub_23F72E0C8(v1, v8[6] + v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    sub_23F72E0C8(*(_QWORD *)(v9 + 48) + v27, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    if (v18)
      goto LABEL_11;
LABEL_12:
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v19)
      goto LABEL_28;
    ++v14;
    if (!v10[v22])
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v19)
        goto LABEL_28;
      if (!v10[v14])
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v19)
          goto LABEL_28;
        if (!v10[v14])
          break;
      }
    }
LABEL_25:
    sub_23F7F6744();
    v18 = v25 & v24;
  }
  v23 = v22 + 3;
  if (v23 >= v19)
  {
LABEL_28:
    swift_release();
    v4 = v28;
    goto LABEL_30;
  }
  if (v10[v23])
  {
    v14 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v14 >= v19)
      goto LABEL_28;
    ++v23;
    if (v10[v14])
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_23F7F4B50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAA6D8);
  v3 = sub_23FB2F770();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_23FB2FC5C();
    swift_bridgeObjectRetain();
    sub_23FB2F200();
    result = sub_23FB2FC8C();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_23F7F4DF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAB850);
  v3 = sub_23FB2F770();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_23FB2FC5C();
    swift_bridgeObjectRetain();
    sub_23F6AD3EC();
    sub_23FB2FC8C();
    result = sub_23FB2F74C();
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * result) = v18;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v9)
      goto LABEL_23;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v9)
        goto LABEL_23;
      v16 = *(_QWORD *)(v6 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v9)
          goto LABEL_23;
        v16 = *(_QWORD *)(v6 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v8 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_23:
    swift_release();
    v1 = v0;
    goto LABEL_24;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v9)
      goto LABEL_23;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_23F7F500C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;

  sub_23F6B50E8();
  v3 = v2;
  v4 = v0;
  v7 = *(_QWORD *)(sub_23F7F67A4(v5, v6) - 8);
  sub_23F6BDE64();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F7F65B0();
  v9 = *v0;
  sub_23F6916B8(v3);
  v10 = sub_23FB2F770();
  if (!*(_QWORD *)(v9 + 16))
  {
    swift_release();
LABEL_31:
    *v4 = v10;
    sub_23F693DDC();
    return;
  }
  sub_23F7F65E8();
  v35 = v9 + 56;
  sub_23F7F691C();
  v13 = v12 & v11;
  sub_23F7F6764();
  v36 = v14;
  v15 = v10 + 56;
  swift_retain();
  v16 = 0;
  if (!v13)
    goto LABEL_4;
LABEL_3:
  v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v17 | (v16 << 6); ; i = v25 + (v16 << 6))
  {
    v26 = *(_QWORD *)(v7 + 72);
    sub_23F75E68C(v1, *(_QWORD *)(v9 + 48) + v26 * i, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    sub_23F7F68D0();
    sub_23FB2F068();
    sub_23F7F68BC();
    if (((v29 << v28) & ~*(_QWORD *)(v15 + 8 * v27)) == 0)
    {
      sub_23F7F687C();
      while (++v32 != v33 || (v31 & 1) == 0)
      {
        v34 = v32 == v33;
        if (v32 == v33)
          v32 = 0;
        v31 |= v34;
        if (*(_QWORD *)(v15 + 8 * v32) != -1)
        {
          sub_23F7F685C();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    sub_23F7F6890();
LABEL_27:
    *(_QWORD *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    sub_23F75E68C(*(_QWORD *)(v10 + 48) + v30 * v26, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
    ++*(_QWORD *)(v10 + 16);
    if (v13)
      goto LABEL_3;
LABEL_4:
    if (__OFADD__(v16, 1))
      goto LABEL_33;
    if (v16 + 1 >= v36)
      goto LABEL_29;
    sub_23F7F68F0();
    v16 = v19;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_29;
      if (!*(_QWORD *)(v35 + 8 * v16))
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v36)
          goto LABEL_29;
        if (!*(_QWORD *)(v35 + 8 * v16))
          break;
      }
    }
LABEL_17:
    sub_23F7F6744();
    v13 = v24 & v23;
  }
  if (v19 + 3 >= v36)
  {
LABEL_29:
    swift_release_n();
    v4 = v0;
    goto LABEL_31;
  }
  sub_23F7F68F0();
  if (v22)
  {
    v16 = v21;
    goto LABEL_17;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v36)
      goto LABEL_29;
    ++v21;
    if (*(_QWORD *)(v35 + 8 * v16))
      goto LABEL_17;
  }
LABEL_34:
  __break(1u);
}

void sub_23F7F528C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  void (*v34)(uint64_t);
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v1 = v0;
  v2 = sub_23FB2EF54();
  v53 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v52 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23FB2E8D0();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ToolboxCustomKeyResult(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v47 - v10;
  v12 = *v0;
  sub_23F6916B8(&qword_256EAB838);
  v13 = sub_23FB2F770();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_release();
LABEL_37:
    *v1 = v14;
    return;
  }
  v48 = v0;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v55 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v56 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  swift_retain();
  v20 = 0;
  v57 = v11;
  v58 = v9;
  if (!v18)
    goto LABEL_7;
LABEL_6:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v21 | (v20 << 6); ; i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    v26 = v12;
    v27 = *(_QWORD *)(v12 + 48);
    v28 = *(_QWORD *)(v59 + 72);
    sub_23F7E7704(v27 + v28 * i, (uint64_t)v11, type metadata accessor for ToolboxCustomKeyResult);
    sub_23FB2FC5C();
    sub_23F7E7704((uint64_t)v11, (uint64_t)v9, type metadata accessor for ToolboxCustomKeyResult);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v30 = v52;
      v29 = v53;
      v31 = v9;
      v32 = v54;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v52, v31, v54);
      sub_23FB2FC68();
      v33 = &qword_256EA8CB0;
      v34 = (void (*)(uint64_t))MEMORY[0x24BEBA5E0];
    }
    else
    {
      v30 = v49;
      v29 = v50;
      v35 = v9;
      v32 = v51;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v35, v51);
      sub_23FB2FC68();
      v33 = &qword_256EA9AA0;
      v34 = (void (*)(uint64_t))MEMORY[0x24BEB8FE0];
    }
    sub_23F72156C(v33, v34);
    sub_23FB2F074();
    v36 = *(void (**)(char *, uint64_t))(v29 + 8);
    v37 = v32;
    v11 = v57;
    v9 = v58;
    v36(v30, v37);
    v38 = sub_23FB2FC8C();
    v39 = -1 << *(_BYTE *)(v14 + 32);
    v40 = v38 & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6))) == 0)
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v39) >> 6;
      while (++v41 != v44 || (v43 & 1) == 0)
      {
        v45 = v41 == v44;
        if (v41 == v44)
          v41 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v19 + 8 * v41);
        if (v46 != -1)
        {
          v42 = __clz(__rbit64(~v46)) + (v41 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v42 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v19 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    sub_23F7E76D0((uint64_t)v11, *(_QWORD *)(v14 + 48) + v42 * v28, type metadata accessor for ToolboxCustomKeyResult);
    ++*(_QWORD *)(v14 + 16);
    v12 = v26;
    if (v18)
      goto LABEL_6;
LABEL_7:
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
      goto LABEL_39;
    if (v23 >= v56)
      goto LABEL_35;
    v24 = *(_QWORD *)(v55 + 8 * v23);
    ++v20;
    if (!v24)
    {
      v20 = v23 + 1;
      if (v23 + 1 >= v56)
        goto LABEL_35;
      v24 = *(_QWORD *)(v55 + 8 * v20);
      if (!v24)
      {
        v20 = v23 + 2;
        if (v23 + 2 >= v56)
          goto LABEL_35;
        v24 = *(_QWORD *)(v55 + 8 * v20);
        if (!v24)
          break;
      }
    }
LABEL_20:
    v18 = (v24 - 1) & v24;
  }
  v25 = v23 + 3;
  if (v25 >= v56)
  {
LABEL_35:
    swift_release_n();
    v1 = v48;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v55 + 8 * v25);
  if (v24)
  {
    v20 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v56)
      goto LABEL_35;
    v24 = *(_QWORD *)(v55 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_23F7F571C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAB840);
  v3 = sub_23FB2F770();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  if (!v7)
    goto LABEL_7;
LABEL_6:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * i);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = v16[3];
    sub_23FB2FC5C();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23FB2F200();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23FB2F200();
    swift_bridgeObjectRelease();
    result = sub_23FB2FC8C();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v8 + 8 * (v22 >> 6))) == 0)
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      while (++v23 != v26 || (v25 & 1) == 0)
      {
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v8 + 8 * v23);
        if (v28 != -1)
        {
          v24 = __clz(__rbit64(~v28)) + (v23 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v8 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v24);
    *v29 = v17;
    v29[1] = v18;
    v29[2] = v19;
    v29[3] = v20;
    ++*(_QWORD *)(v4 + 16);
    if (v7)
      goto LABEL_6;
LABEL_7:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_36;
    if (v13 >= v31)
      goto LABEL_32;
    v14 = *(_QWORD *)(v30 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v31)
        goto LABEL_32;
      v14 = *(_QWORD *)(v30 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v31)
          goto LABEL_32;
        v14 = *(_QWORD *)(v30 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v31)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v30 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v31)
      goto LABEL_32;
    v14 = *(_QWORD *)(v30 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23F7F5A1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  sub_23F6916B8(&qword_256EAA640);
  result = sub_23FB2F770();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = sub_23FB2FC50();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v14 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    result = swift_release();
    v1 = v26;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_23F7F5C78(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_23F7F5C94(a1, a2, (void (*)(_QWORD))type metadata accessor for ProgramStatement, a3);
}

void sub_23F7F5C94(unint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a1)
  {
    a3(0);
    sub_23F7F66B8();
    sub_23F7E7704(a2 + v8 + *(_QWORD *)(v9 + 72) * a1, a4, (uint64_t (*)(_QWORD))a3);
    return;
  }
  __break(1u);
}

_QWORD *sub_23F7F5D14@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t *)@<X0>, uint64_t a2@<X2>, char a3@<W3>, _QWORD *a4@<X8>)
{
  return sub_23F7F5D30(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ProgramStatement, a4);
}

_QWORD *sub_23F7F5D30@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t *)@<X0>, uint64_t a2@<X2>, char a3@<W3>, void (*a4)(_QWORD)@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a3 & 1) != 0)
  {
    a4(0);
    sub_23F693EC8();
    return (_QWORD *)_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v9, v10, v11, v12);
  }
  else
  {
    v14 = a2;
    result = a1(a5, &v14);
    if (!v5)
    {
      v13 = ((uint64_t (*)(_QWORD))a4)(0);
      return (_QWORD *)_s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0((uint64_t)a5, 0, 1, v13);
    }
  }
  return result;
}

uint64_t sub_23F7F5DD4()
{
  return swift_deallocObject();
}

uint64_t sub_23F7F5DE4(uint64_t a1)
{
  return sub_23F7E8EB8(a1);
}

void sub_23F7F5DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_23F7E90AC(a1, a2, a3, a4, a5);
}

uint64_t sub_23F7F5DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23F7E915C(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 32), a2);
}

uint64_t sub_23F7F5E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_23F7E924C(a1, a2, a3);
}

uint64_t sub_23F7F5E1C(uint64_t a1)
{
  uint64_t v1;

  return sub_23F7E989C(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
}

uint64_t sub_23F7F5E3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23F7E9AEC(a1, a2);
}

uint64_t sub_23F7F5E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23F7EDF98(a1, *(char **)(v2 + 16), a2);
}

uint64_t sub_23F7F5E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23F7EFDBC(a1, a2);
}

uint64_t sub_23F7F5E8C(uint64_t a1)
{
  uint64_t v1;

  return sub_23F7EFAFC(a1, *(_QWORD *)(v1 + 32)) & 1;
}

uint64_t sub_23F7F5EAC()
{
  return sub_23F7EFA34() & 1;
}

uint64_t sub_23F7F5ECC()
{
  return sub_23F7EF6E4() & 1;
}

unint64_t sub_23F7F5EEC()
{
  unint64_t result;

  result = qword_256EAB7F8;
  if (!qword_256EAB7F8)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for Session.SessionState.SessionStateError, &type metadata for Session.SessionState.SessionStateError);
    atomic_store(result, (unint64_t *)&qword_256EAB7F8);
  }
  return result;
}

void sub_23F7F5F28(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_23F7F5C94(*a1, *a2, (void (*)(_QWORD))type metadata accessor for Session.Event, a3);
}

void sub_23F7F5F64(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_23F7F5F28(a1, *(uint64_t **)(v2 + 16), a2);
}

void sub_23F7F5F80(uint64_t a1)
{
  uint64_t v2;

  sub_23F723384(&qword_256EAB800, &qword_256EAB808);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_23F7F5FBC(uint64_t a1)
{
  uint64_t v2;

  sub_23F723384(&qword_256EAB810, &qword_256EAB808);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_23F7F5FF8(uint64_t a1)
{
  uint64_t v2;

  sub_23F723384(&qword_256EAB818, &qword_256EAB820);
  *(_QWORD *)(a1 + 8) = v2;
}

unint64_t sub_23F7F6038()
{
  unint64_t result;

  result = qword_256EAB828;
  if (!qword_256EAB828)
  {
    result = MEMORY[0x242674E5C](&protocol conformance descriptor for Session.SessionState.SessionStateError, &type metadata for Session.SessionState.SessionStateError);
    atomic_store(result, (unint64_t *)&qword_256EAB828);
  }
  return result;
}

uint64_t _s17SessionStateErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23F7F60B4 + 4 * byte_23FB62DD4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23F7F60D4 + 4 * byte_23FB62DD9[v4]))();
}

_BYTE *sub_23F7F60B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23F7F60D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7F60DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7F60E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23F7F60EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23F7F60F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Session.SessionState.SessionStateError()
{
  return &type metadata for Session.SessionState.SessionStateError;
}

void sub_23F7F6110(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_23F6916B8(a2);
  sub_23F759768(*(_QWORD *)(v2 - 8));
  sub_23F694CC8();
}

void sub_23F7F6140(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_23F759768(*(_QWORD *)(v2 - 8));
  sub_23F694CC8();
}

uint64_t sub_23F7F6170()
{
  return sub_23F7F5ECC() & 1;
}

uint64_t sub_23F7F6188()
{
  return sub_23FB2F488();
}

void sub_23F7F61B8()
{
  JUMPOUT(0x242674E5CLL);
}

uint64_t sub_23F7F61C0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 152) + 8))(*(_QWORD *)(v1 - 136), v0);
}

uint64_t sub_23F7F61D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 160) + 16))(v0, *(_QWORD *)(v2 - 128), v1);
}

uint64_t sub_23F7F61F8()
{
  return sub_23FB2F464();
}

uint64_t sub_23F7F6210@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 112) = a2;
  *(_QWORD *)(v3 - 136) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_QWORD *)(v3 - 128) = v2;
  return sub_23FB2F968();
}

void sub_23F7F6230(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F7F6140(a1, v1);
}

void sub_23F7F6238()
{
  JUMPOUT(0x242674E5CLL);
}

uint64_t sub_23F7F6250()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 152) + 8))(*(_QWORD *)(v1 - 136), v0);
}

uint64_t sub_23F7F6264()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 344) + 8))(v0, *(_QWORD *)(v1 - 352));
}

uint64_t sub_23F7F6280()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 184) + 8))(v0, *(_QWORD *)(v1 - 192));
}

void sub_23F7F6290(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F7F6140(a1, v1);
}

uint64_t sub_23F7F6298()
{
  return type metadata accessor for Session.Event.Payload(0);
}

void sub_23F7F62A0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_23F7F62D0()
{
  return swift_getTupleTypeMetadata2();
}

uint64_t sub_23F7F62D8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return sub_23FB2F7C4();
}

void sub_23F7F62F0()
{
  JUMPOUT(0x242674E5CLL);
}

uint64_t sub_23F7F62F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_23F7F6308@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

void sub_23F7F6328(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F7E7704(a1, a2, v2);
}

uint64_t sub_23F7F6330()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7F635C()
{
  return sub_23FB2F32C();
}

void sub_23F7F6370()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = *(_QWORD *)(v0 - 96);
}

uint64_t sub_23F7F6384()
{
  return sub_23FB2F59C();
}

void sub_23F7F6398(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  JUMPOUT(0x242674E5CLL);
}

uint64_t sub_23F7F63AC()
{
  return sub_23FB2F8F0();
}

void sub_23F7F63C0()
{
  JUMPOUT(0x242674E5CLL);
}

uint64_t sub_23F7F63C8()
{
  uint64_t v0;

  return v0;
}

void sub_23F7F63F0()
{
  JUMPOUT(0x242674E5CLL);
}

void sub_23F7F63F8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F7F6140(a1, v1);
}

uint64_t sub_23F7F6410(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return v2(v4, *(_QWORD *)(a1 + 48) + v1 * v5, v3);
}

uint64_t sub_23F7F6430()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7F643C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_23F7F6444(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F7F6140(a1, v1);
}

uint64_t sub_23F7F644C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = *v1;
  *v1 = 0x8000000000000000;
  return v0;
}

uint64_t sub_23F7F648C()
{
  return sub_23FB2F584();
}

uint64_t sub_23F7F6498()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23F7F64A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7F64B4()
{
  return sub_23FB2F104();
}

uint64_t sub_23F7F64C4()
{
  return sub_23FB2F950();
}

uint64_t sub_23F7F64D4()
{
  return sub_23FB2DAF0();
}

uint64_t sub_23F7F64EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t, uint64_t);
  uint64_t v3;

  return v2(*(_QWORD *)(v3 - 120), *(_QWORD *)(**(_QWORD **)(v3 - 128) + 48) + v1, v0);
}

uint64_t sub_23F7F6504()
{
  uint64_t (*v0)(uint64_t, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v2, *(_QWORD *)(v3 - 96), v1);
}

uint64_t sub_23F7F651C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v1, v0);
}

void sub_23F7F6534(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F7E76D0(a1, a2, v2);
}

void sub_23F7F653C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F7E7704(a1, a2, v2);
}

uint64_t sub_23F7F6544()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

void sub_23F7F656C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_23F7F6140(a1, v1);
}

uint64_t sub_23F7F6584()
{
  return 0;
}

uint64_t sub_23F7F65D0()
{
  return sub_23FB2F11C();
}

uint64_t sub_23F7F65F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 272));
}

void sub_23F7F6600(uint64_t a1)
{
  uint64_t *v1;

  sub_23F7F6110(a1, v1);
}

void sub_23F7F6608()
{
  JUMPOUT(0x242674E5CLL);
}

void sub_23F7F6610(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_23F7E76D0(a1, v2, v1);
}

uint64_t sub_23F7F661C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  return sub_23FB2F068();
}

uint64_t sub_23F7F6630()
{
  return swift_getTupleTypeMetadata3();
}

uint64_t sub_23F7F6638(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(a1, 0);
}

uint64_t sub_23F7F6640(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23F7F664C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 200) + 8))(v0, *(_QWORD *)(v1 - 224));
}

uint64_t sub_23F7F6660()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 224) + 8))(v0, *(_QWORD *)(v1 - 240));
}

uint64_t sub_23F7F6674()
{
  return sub_23FB2F8F0();
}

uint64_t sub_23F7F6680()
{
  return type metadata accessor for QueryDecorationResult(0);
}

uint64_t sub_23F7F6688()
{
  return type metadata accessor for StatementResult(0);
}

uint64_t sub_23F7F6694()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7F66A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v0 + 56) + *(_QWORD *)(*(_QWORD *)(v2 - 288) + 72) * v1;
}

uint64_t sub_23F7F66C8()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = *(_QWORD *)(v1 - 88);
  return swift_bridgeObjectRelease();
}

void sub_23F7F66E4()
{
  JUMPOUT(0x242674E5CLL);
}

void sub_23F7F66F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_23F7E76D0(a1, a2, v2);
}

uint64_t sub_23F7F6700()
{
  return 255;
}

uint64_t sub_23F7F670C()
{
  return sub_23FB2C4B8();
}

uint64_t sub_23F7F6714()
{
  return type metadata accessor for Session.Event(255);
}

void sub_23F7F672C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 128) = v3;
  *(_QWORD *)(v4 - 120) = v1;
  *(_QWORD *)(v4 - 112) = ~a1;
  *(_QWORD *)(v4 - 104) = v2;
}

uint64_t sub_23F7F6754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = a10;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7F6770()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7F677C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_23F7F678C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7F6798()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23F7F67A4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a2;
  return a2(0);
}

void sub_23F7F67B4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F7F6140(v2, a2);
}

uint64_t sub_23F7F67BC()
{
  uint64_t v0;

  return v0;
}

void sub_23F7F67C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 192) = (char *)&a9 - v9;
}

uint64_t sub_23F7F67E0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 200) + 8))(v0, *(_QWORD *)(v1 - 208));
}

uint64_t sub_23F7F67F0()
{
  return sub_23FB2F950();
}

uint64_t sub_23F7F6800()
{
  return type metadata accessor for RetrievedContextStatement(0);
}

uint64_t sub_23F7F6834()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(v0, *(_QWORD *)(v1 - 240));
}

uint64_t sub_23F7F6844()
{
  return sub_23FB2F104();
}

uint64_t sub_23F7F6850()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7F6870()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(v2 - 96), v0);
}

uint64_t sub_23F7F68A4()
{
  return swift_bridgeObjectRetain();
}

void sub_23F7F68D0()
{
  uint64_t v0;

  sub_23F72156C(*(_QWORD **)(v0 - 96), *(void (**)(uint64_t))(v0 - 104));
}

uint64_t sub_23F7F68DC()
{
  return 0;
}

uint64_t sub_23F7F6930()
{
  return sub_23FB2F9BC();
}

uint64_t sub_23F7F6938()
{
  return swift_getEnumCaseMultiPayload();
}

void sub_23F7F6944(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23F7F6110(v2, a2);
}

uint64_t sub_23F7F694C()
{
  return sub_23FB2F0EC();
}

uint64_t sub_23F7F6958@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23F7F6964()
{
  return swift_getAssociatedTypeWitness();
}

void sub_23F7F6978(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_23F7E76D0(a1, v3, a3);
}

uint64_t sub_23F7F698C()
{
  return sub_23FB2F65C();
}

void sub_23F7F6998(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_23F7F6140(v2, a2);
}

uint64_t sub_23F7F69A0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_23F7F69B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t sub_23F7F69C4()
{
  return sub_23FB2F65C();
}

uint64_t sub_23F7F69D0()
{
  return 0;
}

uint64_t sub_23F7F69DC()
{
  return type metadata accessor for Session.Event(0);
}

uint64_t sub_23F7F69E8()
{
  return 0;
}

uint64_t sub_23F7F69FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  *(_QWORD *)(v3 - 136) = v2;
  return 255;
}

void sub_23F7F6A1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23F7F6110(v2, a2);
}

uint64_t StreamRedactable.streamRedacted()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v3, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
}

Swift::Void __swiftcall Session.Event.streamRedact()()
{
  type metadata accessor for Session.Event(0);
  Session.Event.Payload.streamRedact()();
}

Swift::Void __swiftcall Session.Event.Payload.streamRedact()()
{
  uint64_t v0;
  uint64_t DecorationResult;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  DecorationResult = type metadata accessor for QueryDecorationResult(0);
  MEMORY[0x24BDAC7A8](DecorationResult);
  v2 = type metadata accessor for Session.Event.Payload(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  sub_23F6F5920(v0, (uint64_t)&v7 - v4, v5);
  v6 = (char *)sub_23F7F6B84 + 4 * byte_23FB62F70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F7F6B84()
{
  uint64_t v0;

  sub_23F6F5978(v0, type metadata accessor for Session.Event.Payload);
}

void sub_23F7F6C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F6F5978(v1, type metadata accessor for Session.Event.Payload);
  sub_23F6F594C(v0, v2, type metadata accessor for QueryDecorationResult);
  sub_23F6F5920(v2, v3, type metadata accessor for QueryDecorationResult);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 8) = MEMORY[0x24BEE4AF8];
  sub_23F6F5978(v2, type metadata accessor for QueryDecorationResult);
  swift_storeEnumTagMultiPayload();
  sub_23F6F594C(v3, v1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7F6C74);
}

Swift::Void __swiftcall QueryDecorationResult.streamRedact()()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 8) = MEMORY[0x24BEE4AF8];
}

Swift::Void __swiftcall ContextRetrieved.streamRedact()()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  *v0 = MEMORY[0x24BEE4AF8];
}

uint64_t dispatch thunk of StreamRedactable.streamRedact()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void sub_23F7F6D70()
{
  sub_23F7F6F48();
}

void sub_23F7F6D7C(char a1)
{
  sub_23F7F79F8(0, a1);
}

void sub_23F7F6D88()
{
  sub_23F7F6F48();
}

void sub_23F7F6D94(char a1)
{
  sub_23F7F78D4(0, a1);
}

void sub_23F7F6DA0()
{
  sub_23F7F70C0();
}

void sub_23F7F6DB4()
{
  sub_23F7F70C0();
}

void sub_23F7F6DC8()
{
  sub_23F7F70C0();
}

void sub_23F7F6DDC()
{
  sub_23F7F70C0();
}

void sub_23F7F6DF0()
{
  sub_23F7F70C0();
}

void sub_23F7F6E04()
{
  sub_23F7F70C0();
}

void sub_23F7F6E18()
{
  sub_23F7F70C0();
}

void sub_23F7F6E2C()
{
  sub_23F6B53C4();
  sub_23F6B5508();
  sub_23F876B0C();
  sub_23F693E04();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F6E68()
{
  sub_23F7F7B44();
}

void sub_23F7F6E74()
{
  sub_23F7F70C0();
}

void sub_23F7F6E88()
{
  sub_23F7F7948();
}

void sub_23F7F6E94()
{
  sub_23F7F6F48();
}

void sub_23F7F6EA0()
{
  sub_23F7F7AD4();
}

void sub_23F7F6EAC()
{
  sub_23F6B53C4();
  sub_23F879950();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F6ED4()
{
  sub_23F7F7A6C();
}

void sub_23F7F6EE0(char a1)
{
  sub_23F7F7B8C(0, a1);
}

void sub_23F7F6EEC()
{
  sub_23F6B53C4();
  sub_23F87990C();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F6F14()
{
  sub_23F6B53C4();
  sub_23F876B0C();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F6F48()
{
  uint64_t v0;

  v0 = sub_23F6B53C4();
  sub_23F879970(v0);
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F6F74()
{
  sub_23F7F70C0();
}

void sub_23F7F6F88()
{
  sub_23F7F7078();
}

void sub_23F7F6F9C()
{
  sub_23F7F70C0();
}

void sub_23F7F6FB0()
{
  sub_23F7F70C0();
}

void sub_23F7F6FC4()
{
  sub_23F7F70C0();
}

void sub_23F7F6FD8()
{
  sub_23F7F7078();
}

void sub_23F7F6FEC()
{
  sub_23F7F7078();
}

void sub_23F7F7000()
{
  sub_23F7F70C0();
}

void sub_23F7F7014()
{
  sub_23F7F70C0();
}

void sub_23F7F7028()
{
  sub_23F7F70C0();
}

void sub_23F7F703C()
{
  sub_23F7F70C0();
}

void sub_23F7F7050()
{
  sub_23F7F7078();
}

void sub_23F7F7064()
{
  sub_23F7F7078();
}

void sub_23F7F7078()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  sub_23F879900();
  v1 = sub_23F8798E0();
  v0(v1);
  sub_23F877070();
  sub_23F878D7C();
  sub_23F6B5398();
}

void sub_23F7F70AC()
{
  sub_23F7F70C0();
}

void sub_23F7F70C0()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  sub_23F879900();
  v1 = sub_23F8798E0();
  v0(v1);
  sub_23F877070();
  sub_23F878D7C();
  sub_23F6B5398();
}

void sub_23F7F70F0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23F7F7138()
{
  sub_23F876B0C();
  return sub_23F876798();
}

uint64_t sub_23F7F7220()
{
  return sub_23FB2F200();
}

uint64_t sub_23F7F723C()
{
  return sub_23FB2F200();
}

uint64_t sub_23F7F724C()
{
  return sub_23FB2F200();
}

void sub_23F7F7260()
{
  sub_23FB2FC80();
  sub_23F694CC8();
}

uint64_t sub_23F7F7280(uint64_t a1, char a2)
{
  if (!a2)
    sub_23F879820();
  sub_23F876B0C();
  return sub_23F876798();
}

uint64_t sub_23F7F72F0()
{
  SessionEventPayloadType.rawValue.getter();
  sub_23FB2F200();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7F733C()
{
  sub_23F876B0C();
  return sub_23F876798();
}

uint64_t sub_23F7F7398()
{
  sub_23F876B0C();
  return sub_23F876798();
}

uint64_t sub_23F7F73EC(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_23F8797C4();
    sub_23F8797B0();
  }
  else
  {
    sub_23F693E2C();
  }
  sub_23F876B0C();
  return sub_23F876798();
}

void sub_23F7F7450(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23F7F7498()
{
  sub_23F876B0C();
  return sub_23F876798();
}

void sub_23F7F74DC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23F7F7510()
{
  sub_23FB2F200();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7F75C0()
{
  sub_23F878DC4();
  swift_bridgeObjectRetain();
  sub_23F70DC34();
  sub_23F876B0C();
  return sub_23F6B5A3C();
}

void sub_23F7F75F0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23F7F763C()
{
  sub_23F876B0C();
  return sub_23F876798();
}

uint64_t sub_23F7F7698()
{
  sub_23F876B0C();
  return sub_23F876798();
}

uint64_t sub_23F7F76E0(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_23F8797C4();
    sub_23F8797B0();
  }
  else
  {
    sub_23F693E2C();
  }
  sub_23F876B0C();
  return sub_23F876798();
}

void sub_23F7F7744(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23F7F7788()
{
  sub_23F693E2C();
  sub_23F876B0C();
  return sub_23F876798();
}

void sub_23F7F7808()
{
  sub_23FB2FC80();
  sub_23F694CC8();
}

void sub_23F7F7828()
{
  sub_23F7F7D3C();
}

void sub_23F7F783C()
{
  sub_23F7F7D3C();
}

void sub_23F7F7850()
{
  sub_23F7F7D3C();
}

void sub_23F7F7864()
{
  sub_23F7F7D3C();
}

void sub_23F7F7878()
{
  sub_23F7F7D3C();
}

void sub_23F7F788C()
{
  sub_23F7F7D84();
}

void sub_23F7F78A0()
{
  sub_23F6B63E0();
  sub_23F87990C();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F78C8()
{
  sub_23F7F7E18();
}

void sub_23F7F78D4(uint64_t a1, char a2)
{
  sub_23F6B63E0();
  if (a2)
  {
    sub_23F8797C4();
    sub_23F87979C();
  }
  sub_23F6B6730();
  sub_23F693DFC();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7948()
{
  sub_23F6B63E0();
  sub_23F876B0C();
  sub_23F693E04();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F79A4()
{
  sub_23F7F7E18();
}

void sub_23F7F79B0()
{
  sub_23F6B63E0();
  sub_23F6B5508();
  sub_23F876B0C();
  sub_23F693E04();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F79EC()
{
  sub_23F7F7E18();
}

void sub_23F7F79F8(uint64_t a1, char a2)
{
  sub_23F6B63E0();
  if (a2)
  {
    sub_23F8797C4();
    sub_23F87979C();
  }
  sub_23F6B6730();
  sub_23F693DFC();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7A6C()
{
  sub_23F6B63E0();
  sub_23F876B0C();
  sub_23F693E04();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7AD4()
{
  sub_23F6B63E0();
  sub_23F876B0C();
  sub_23F693E04();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7B44()
{
  sub_23F6B63E0();
  SessionEventPayloadType.rawValue.getter();
  sub_23F876B0C();
  sub_23F693E04();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7B8C(uint64_t a1, char a2)
{
  sub_23F6B63E0();
  if (!a2)
    sub_23F879820();
  sub_23F876B0C();
  sub_23F693E04();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7C10()
{
  sub_23F7F7D3C();
}

void sub_23F7F7C24()
{
  sub_23F7F7D3C();
}

void sub_23F7F7C38()
{
  sub_23F7F7D3C();
}

void sub_23F7F7C4C()
{
  sub_23F7F7D3C();
}

void sub_23F7F7C60()
{
  sub_23F7F7D3C();
}

void sub_23F7F7C74()
{
  sub_23F7F7D3C();
}

void sub_23F7F7C88()
{
  sub_23F7F7D84();
}

void sub_23F7F7C9C()
{
  sub_23F7F7D3C();
}

void sub_23F7F7CB0()
{
  sub_23F7F7D84();
}

void sub_23F7F7CC4()
{
  sub_23F7F7D3C();
}

void sub_23F7F7CD8()
{
  sub_23F7F7D3C();
}

void sub_23F7F7CEC()
{
  sub_23F7F7D3C();
}

void sub_23F7F7D00()
{
  sub_23F7F7D84();
}

void sub_23F7F7D14()
{
  sub_23F7F7D3C();
}

void sub_23F7F7D28()
{
  sub_23F7F7D3C();
}

void sub_23F7F7D3C()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  sub_23F8796D8();
  v1 = sub_23FB2FC5C();
  v0(v1);
  sub_23F877070();
  sub_23F878D7C();
  sub_23F6B5398();
}

void sub_23F7F7D70()
{
  sub_23F7F7D84();
}

void sub_23F7F7D84()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  sub_23F8796D8();
  v1 = sub_23FB2FC5C();
  v0(v1);
  sub_23F877070();
  sub_23F878D7C();
  sub_23F6B5398();
}

void sub_23F7F7DBC()
{
  sub_23F6B63E0();
  sub_23F879950();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7DE4()
{
  sub_23F6B63E0();
  sub_23F876B0C();
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7E18()
{
  uint64_t v0;

  v0 = sub_23F6B63E0();
  sub_23F879970(v0);
  sub_23F6B5608();
  sub_23F6B5398();
}

void sub_23F7F7E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23F6B5220();
  v13 = v12;
  v14 = sub_23F6B58C8();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F693EB0();
  v16 = *(_QWORD *)(v13 + 16);
  if (v16)
  {
    sub_23F878074();
    type metadata accessor for SpeechRequestCandidate(0);
    sub_23F6BC450();
    v18 = v13 + v17;
    v25 = *(_QWORD *)(v19 + 72);
    v26 = v20;
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    do
    {
      v21(v10, v18 + *(int *)(v26 + 20), v14);
      v22 = *(_QWORD *)(a10 + 16);
      if (v22 >= *(_QWORD *)(a10 + 24) >> 1)
        sub_23F877BB8();
      sub_23F8784E4();
      sub_23F6B633C(v23 + v24 * v22, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
      v18 += v25;
      --v16;
    }
    while (v16);
  }
  sub_23F77DB18();
  sub_23F6B5100();
}

uint64_t sub_23F7F7F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_23FB2C764();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v15[1] = v1;
    v18 = MEMORY[0x24BEE4AF8];
    sub_23F711208();
    v8 = v18;
    v9 = type metadata accessor for Candidate(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v16 = *(_QWORD *)(v10 + 72);
    v17 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v17 + 28), v3);
      v18 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      if (v13 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23F711208();
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, v6, v3);
      v11 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

void sub_23F7F80A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_23F6B5220();
  v2 = v1;
  v3 = sub_23F878700();
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F693E0C();
  v23 = v5;
  sub_23F6B5664();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B6580();
  v22 = v7;
  v26 = *(_QWORD *)(sub_23F6B58C8() - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v8);
  sub_23F6B5268();
  v9 = *(_QWORD *)(v2 + 16);
  if (v9)
  {
    v28 = MEMORY[0x24BEE4AF8];
    sub_23F711208();
    v10 = sub_23F7AE668(v2);
    if ((v10 & 0x8000000000000000) == 0)
    {
      v12 = v10;
      if (v10 < 1 << *(_BYTE *)(v2 + 32))
      {
        v13 = v11;
        v27 = v2 + 64;
        v21 = v0;
        v20 = v2;
        while ((*(_QWORD *)(v27 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
        {
          if (v13 != *(_DWORD *)(v2 + 36))
            goto LABEL_20;
          sub_23F83A800(*(_QWORD *)(v2 + 56) + *(_QWORD *)(v24 + 72) * v12, v22, type metadata accessor for Candidate);
          v14 = v23;
          sub_23F876934(v22, v23);
          sub_23F75E68C(v0, v23 + *(int *)(v25 + 28), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16));
          v15 = sub_23F6B619C();
          sub_23F83A7D4(v15, v16);
          if ((sub_23F77D93C() & 1) == 0)
          {
            sub_23F7D2A58();
            sub_23F711208();
            v14 = v28;
          }
          v17 = *(_QWORD *)(v14 + 16);
          v2 = v20;
          if (v17 >= *(_QWORD *)(v14 + 24) >> 1)
          {
            sub_23F877BB8();
            v14 = v28;
          }
          *(_QWORD *)(v14 + 16) = v17 + 1;
          v18 = v14
              + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
              + *(_QWORD *)(v26 + 72) * v17;
          v0 = v21;
          sub_23F75E68C(v18, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32));
          v28 = v14;
          if ((uint64_t)v12 >= -(-1 << *(_BYTE *)(v20 + 32)))
            goto LABEL_21;
          if ((*(_QWORD *)(v27 + 8 * (v12 >> 6)) & (1 << v12)) == 0)
            goto LABEL_22;
          if (v13 != *(_DWORD *)(v20 + 36))
            goto LABEL_23;
          v19 = sub_23FB2F740();
          if (!--v9)
            goto LABEL_18;
          v12 = v19;
          if ((v19 & 0x8000000000000000) == 0)
          {
            v13 = *(_DWORD *)(v20 + 36);
            if (v19 < 1 << *(_BYTE *)(v20 + 32))
              continue;
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
  else
  {
LABEL_18:
    sub_23F77DB18();
    sub_23F6B5100();
  }
}

void sub_23F7F831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD);
  void (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23F6B5220();
  v13 = v12;
  v15 = v14;
  sub_23F6B58C8();
  sub_23F6B5984();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F693EB0();
  v17 = *(_QWORD *)(v15 + 16);
  if (v17)
  {
    sub_23F878074();
    v13(0);
    sub_23F6BC450();
    v19 = v15 + v18;
    v26 = *(_QWORD *)(v20 + 72);
    v21 = *(void (**)(uint64_t))(v11 + 16);
    do
    {
      v22 = sub_23F7D260C();
      v21(v22);
      v23 = *(_QWORD *)(a10 + 16);
      if (v23 >= *(_QWORD *)(a10 + 24) >> 1)
        sub_23F877BB8();
      sub_23F8784E4();
      sub_23F6B633C(v24 + v25 * v23, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
      v19 += v26;
      --v17;
    }
    while (v17);
  }
  sub_23F77DB18();
  sub_23F6B5100();
}

uint64_t sub_23F7F8404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = type metadata accessor for Session.Event.Payload(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_23F712564();
    v11 = v18;
    v12 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v13 = *(v12 - 1);
      v14 = *v12;
      swift_bridgeObjectRetain();
      sub_23F82BD1C(v13, v14, a2, (uint64_t)v9);
      if (v3)
        break;
      swift_bridgeObjectRelease();
      v18 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      if (v15 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_23F712564();
        v11 = v18;
      }
      v12 += 2;
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_23F83A7A4((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, type metadata accessor for Session.Event.Payload);
      if (!--v10)
      {
        swift_release();
        return v11;
      }
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v11;
}

void sub_23F7F8594(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23F7F85DC()
{
  sub_23FB2F254();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23F7F86D0()
{
  sub_23FB2F7AC();
  swift_bridgeObjectRelease();
  sub_23FB2F254();
  swift_bridgeObjectRelease();
  sub_23FB2F254();
  sub_23FB2F254();
  return swift_bridgeObjectRelease();
}

void sub_23F7F8798(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23F7F87CC()
{
  sub_23FB2F254();
  return swift_bridgeObjectRelease();
}

void ProgramStatement.init(id:expression:targetType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23F876E44();
  v7 = type metadata accessor for ProgramStatement(v6);
  v8 = v4 + *(int *)(v7 + 24);
  v9 = sub_23F8786E0();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v8, 1, 1, v9);
  v10 = sub_23F6B58C8();
  sub_23F70D6B4(v10);
  sub_23F83A7A4(v3, v4 + *(int *)(v7 + 20), type metadata accessor for Expression);
  sub_23F878540(a3, v11, &qword_256EA6550);
  sub_23F6B5F7C();
}

uint64_t type metadata accessor for ProgramStatement(uint64_t a1)
{
  return sub_23F6D89A0(a1, (uint64_t *)&unk_256EADAA8);
}

void Session.Event.Payload.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_QWORD);
  char *v94;
  uint64_t v95[5];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[6];
  _QWORD v111[7];
  _QWORD v112[18];
  uint64_t v113;

  sub_23F6B50E8();
  type metadata accessor for QueryDecorationPrePlannerResult(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  v3 = sub_23F877CE4(v2, v95[0]);
  type metadata accessor for QueryDecorationResult(v3);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B51A4();
  sub_23F8789BC(v5);
  type metadata accessor for TypeConversionResult(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  v8 = sub_23F876E8C(v7, v95[0]);
  type metadata accessor for TypeConversionRequest(v8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v9);
  v11 = sub_23F876ED4(v10, v95[0]);
  type metadata accessor for ClientUndoRedoRequest(v11);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  v14 = sub_23F877CC0(v13, v95[0]);
  type metadata accessor for UndoRedoRequest(v14);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  v110[3] = (char *)v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolResolution(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  v19 = sub_23F877D08(v18, v95[0]);
  v109 = type metadata accessor for ExternalAgentOutcome(v19);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v20);
  v111[6] = (char *)v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ExternalAgentRequest(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v22);
  v111[4] = (char *)v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ExternalAgentSpeechQuery(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v24);
  v110[5] = (char *)v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ExternalAgentTextQuery(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v26);
  sub_23F70D434((uint64_t)v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_23FB2D0DC();
  sub_23F6B53F8(v28, (uint64_t)&v113);
  v108 = v29;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v30);
  v107 = sub_23F87768C(v31, v95[0]);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v32);
  v34 = sub_23F8780AC(v33, v95[0]);
  type metadata accessor for ActionCancellation(v34);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F877C9C(v36, v95[0]);
  v106 = type metadata accessor for SessionError();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v37);
  v39 = sub_23F876EB0(v38, v95[0]);
  type metadata accessor for QueryStepResults(v39);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v40);
  v112[8] = (char *)v95 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6D398C();
  v42 = sub_23FB2D520();
  sub_23F6B53F8(v42, (uint64_t)v110);
  v95[1] = v43;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F70D434((uint64_t)v95 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = sub_23FB2D430();
  v95[4] = *(_QWORD *)(v96 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v46);
  sub_23F70D434((uint64_t)v95 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = sub_23FB2D2C8();
  sub_23F6B53F8(v48, (uint64_t)v111);
  v97 = v49;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v50);
  sub_23F70D434((uint64_t)v95 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_23FB2D274();
  sub_23F6B53F8(v52, (uint64_t)v112);
  v98 = v53;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v54);
  sub_23F70D434((uint64_t)v95 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = sub_23FB2ED38();
  v112[2] = *(_QWORD *)(v56 - 8);
  v112[3] = v56;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v57);
  v112[1] = (char *)v95 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23F6D398C();
  v59 = sub_23FB2C89C();
  v112[4] = *(_QWORD *)(v59 - 8);
  v112[5] = v59;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v60);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v61);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v62);
  sub_23F6B6580();
  sub_23F70D434(v63);
  v64 = sub_23FB2C80C();
  v112[6] = *(_QWORD *)(v64 - 8);
  v112[7] = v64;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v65);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v66);
  sub_23F6B6580();
  v105 = v67;
  v104 = sub_23F878238();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v68);
  v103 = sub_23F8789C8((uint64_t)v95 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v70);
  v101 = sub_23F877ADC((uint64_t)v95 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v72);
  v102 = (char *)v95 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClientAction(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v74);
  v100 = (char *)v95 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Action(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v76);
  v99 = (char *)v95 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RequestContent.SystemPromptResolution(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v78);
  sub_23F6B57D8(v79, v95[0]);
  type metadata accessor for RequestContent.TextContent(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v80);
  v82 = sub_23F70D434((uint64_t)v95 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for RequestContent(v82);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v83);
  sub_23F77DA54();
  MEMORY[0x24BDAC7A8](v84);
  sub_23F878DA4();
  type metadata accessor for Request(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v85);
  sub_23F6B5314((uint64_t)v95 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F6916B8(&qword_256EAB740);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v87);
  sub_23F6B5CB8();
  MEMORY[0x24BDAC7A8](v88);
  sub_23F876AD4();
  MEMORY[0x24BDAC7A8](v89);
  sub_23F6D3BD8();
  MEMORY[0x24BDAC7A8](v90);
  sub_23F6B6B3C();
  type metadata accessor for TextQuery(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v91);
  type metadata accessor for Session.Event.Payload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v92);
  sub_23F6B5268();
  sub_23F83A800(v112[9], v0, v93);
  v94 = (char *)sub_23F7F904C + 4 * word_23FB63046[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23F7F904C()
{
  sub_23F878D64();
  sub_23F693DDC();
}

void StatementResultPayload.init(outcome:response:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_23F82E3DC(a1, a2, type metadata accessor for StatementResultPayload, a3);
}

uint64_t StatementResult.init(actionEventId:toolId:payload:resultStatementId:originProgramStatementId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v23)(void);

  sub_23F8770E0();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  sub_23F72E034();
  v12 = sub_23F876DBC();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v12, 1, 1, v13);
  v14 = (int *)sub_23F877994();
  v15 = (_QWORD *)(v11 + v14[5]);
  *v15 = 0;
  v15[1] = 0;
  v16 = sub_23F6B69B8();
  sub_23F840E4C(v16, v17, v18);
  sub_23F878804();
  *v15 = v9;
  v15[1] = v7;
  sub_23F83A7A4(v5, v11 + v14[6], type metadata accessor for StatementResultPayload);
  v19 = v11 + v14[7];
  v20 = sub_23F6B58C8();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = *(uint64_t (**)(void))(v21 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v19, v3, v20);
  sub_23F75E710(v11 + v14[8], v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
  return sub_23F877458(v11 + v14[9], v1, v20, v23);
}

__n128 Request.init(content:safetyMode:prescribedPlan:rewriteMetadataEventID:rewriteMetadataInlined:)()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  sub_23F87743C();
  v2 = v1;
  sub_23F87972C();
  v4 = *v3;
  v5 = v3[1];
  v6 = *((_BYTE *)v3 + 16);
  v23 = *v7;
  v21 = v8;
  v22 = *((_QWORD *)v7 + 2);
  v9 = (int *)sub_23F878EF8();
  v10 = v0 + v9[6];
  v11 = v0 + v9[7];
  v12 = sub_23F72E034();
  sub_23F6B5A8C(v11, v13, v14, v12);
  v15 = (uint64_t *)(v0 + v9[8]);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v16 = sub_23F6B5EE4();
  sub_23F83A7A4(v16, v17, v18);
  *(_BYTE *)(v0 + v9[5]) = v2;
  *(_QWORD *)v10 = v4;
  *(_QWORD *)(v10 + 8) = v5;
  *(_BYTE *)(v10 + 16) = v6;
  sub_23F878540(v21, v19, &qword_256EA2798);
  sub_23F77D90C(*v15, v15[1]);
  *(_OWORD *)v15 = v23;
  v15[2] = v22;
  sub_23F6F09E8();
  return result;
}

__n128 ExternalAgentRequest.init(content:rewriteMetadataEventID:rewriteMetadataInlined:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;

  sub_23F877640();
  v11 = sub_23F8781D0();
  v12 = type metadata accessor for ExternalAgentRequest(v11);
  v13 = sub_23F72E034();
  sub_23F877FA8(v13);
  sub_23F877F94(v9, v14, type metadata accessor for RequestContent);
  sub_23F879990(v15, v16, &qword_256EA2798);
  sub_23F878648();
  *(_OWORD *)v12 = a9;
  *(_QWORD *)(v12 + 16) = v10;
  sub_23F6B647C();
  return result;
}

uint64_t RequestContent.TextContent.init(text:statementId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_23F7FA760(a1, a2, a3, type metadata accessor for RequestContent.TextContent, a4);
}

uint64_t SpeechRequestCandidate.init(recognition:statementId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_23F7FA760(a1, a2, a3, type metadata accessor for SpeechRequestCandidate, a4);
}

uint64_t sub_23F7FA760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  *a5 = a1;
  a5[1] = a2;
  sub_23F876A04(a1, a2, a3, a4);
  sub_23F6B58C8();
  v5 = sub_23F8769D8();
  return sub_23F6B64B0(v5, v6, v7, v8);
}

void RequestContent.SystemPromptResolution.init(actionEventId:systemResponseEventId:userAction:statementId:input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;

  sub_23F6B50E8();
  v1 = v0;
  v26 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_23F8786D8();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23F72E034();
  sub_23F878A38(v10);
  v14 = (int *)sub_23F87798C();
  sub_23F78F478();
  sub_23F878D40();
  sub_23F878540(v8, v15, &qword_256EA2798);
  sub_23F77DB9C(v10 + v14[5], v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32));
  sub_23F83A7A4(v4, v10 + v14[6], type metadata accessor for RequestContent.SystemPromptResolution.UserAction);
  v16 = v10 + v14[7];
  v17 = sub_23F6B58C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, v26, v17);
  sub_23F6B5164(v1, 1, v11);
  if (v18)
  {
    sub_23F6B68CC();
    v19 = sub_23F878D40();
    sub_23F876B14(v19, &qword_256EA8C38);
  }
  else
  {
    v20 = sub_23F6B5994();
    sub_23F83A7A4(v20, v21, v22);
  }
  v23 = sub_23F6B619C();
  sub_23F83B7F8(v23, v24, v25);
  sub_23F693DDC();
}

IntelligenceFlowPlannerSupport::RequestContent::SystemPromptResolution::RequirementResolution __swiftcall RequestContent.SystemPromptResolution.RequirementResolution.init(isRequirementSatisfied:)(IntelligenceFlowPlannerSupport::RequestContent::SystemPromptResolution::RequirementResolution isRequirementSatisfied)
{
  IntelligenceFlowPlannerSupport::RequestContent::SystemPromptResolution::RequirementResolution *v1;

  v1->isRequirementSatisfied = isRequirementSatisfied.isRequirementSatisfied;
  return isRequirementSatisfied;
}

IntelligenceFlowPlannerSupport::RequestPrescribedPlan::SearchTool __swiftcall RequestPrescribedPlan.SearchTool.init(query:isLowConfidenceKnowledge:)(Swift::String query, Swift::Bool isLowConfidenceKnowledge)
{
  uint64_t v2;
  IntelligenceFlowPlannerSupport::RequestPrescribedPlan::SearchTool result;

  *(Swift::String *)v2 = query;
  *(_BYTE *)(v2 + 16) = isLowConfidenceKnowledge;
  result.query = query;
  result.isLowConfidenceKnowledge = isLowConfidenceKnowledge;
  return result;
}

void Session.Transcript.init(events:)()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_23F6D3A90();
  v3 = v2;
  v5 = v4;
  v6 = (int *)type metadata accessor for Session.Transcript(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B52B0();
  if (*(_QWORD *)(v3 + 16))
  {
    sub_23F7E52BC();
    sub_23F7F68B0();
    v9 = v3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    sub_23F72E034();
    v10 = sub_23F78F534();
    v11(v10);
    v12 = (uint64_t *)(v9 + v1[9]);
    v13 = *v12;
    v14 = v12[1];
    v15 = (_QWORD *)(v0 + v6[5]);
    *v15 = v13;
    v15[1] = v14;
    v16 = (uint64_t *)(v9 + v1[10]);
    v17 = *v16;
    v18 = v16[1];
    v19 = (_QWORD *)(v0 + v6[6]);
    *v19 = v17;
    v19[1] = v18;
    v20 = (uint64_t *)(v9 + v1[11]);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(v0 + v6[7]);
    *v23 = v21;
    v23[1] = v22;
    *(_QWORD *)(v0 + v6[8]) = v3;
    v24 = sub_23F6B6AB8();
    sub_23F83A7A4(v24, v25, v26);
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v5, 0, 1, (uint64_t)v6);
    sub_23F6B6548();
    sub_23F77DCD4();
    sub_23F6B90D8();
    sub_23F6B69E0();
  }
  else
  {
    sub_23F6B5AB0();
    v27 = sub_23F8778B4();
    _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v27, v28, v29, (uint64_t)v6);
  }
}

uint64_t sub_23F7FAA20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  int64_t v30;

  v29 = a1 + 56;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 56);
  v30 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  v4 = 0;
  v5 = MEMORY[0x24BEE4AF8];
  if (!v3)
    goto LABEL_5;
LABEL_4:
  for (v3 &= v3 - 1; ; v3 = (v7 - 1) & v7)
  {
    swift_bridgeObjectRetain();
    sub_23F7F80A4();
    v10 = v9;
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v5 + 16);
    if (__OFADD__(v12, v11))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v12 + v11 > *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_23F753F14();
      v5 = v13;
    }
    if (*(_QWORD *)(v10 + 16))
    {
      v14 = *(_QWORD *)(v5 + 16);
      v15 = (*(_QWORD *)(v5 + 24) >> 1) - v14;
      v16 = sub_23FB2C764();
      if (v15 < v11)
        goto LABEL_42;
      v17 = *(_QWORD *)(v16 - 8);
      v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      v19 = *(_QWORD *)(v17 + 72);
      v20 = v5 + v18 + v19 * v14;
      v21 = v10 + v18;
      v22 = v19 * v11;
      v23 = v20 + v22;
      v24 = v21 + v22;
      if (v21 < v23 && v20 < v24)
        goto LABEL_46;
      swift_arrayInitWithCopy();
      if (v11)
      {
        v26 = *(_QWORD *)(v5 + 16);
        v6 = __OFADD__(v26, v11);
        v27 = v26 + v11;
        if (v6)
          goto LABEL_43;
        *(_QWORD *)(v5 + 16) = v27;
      }
    }
    else if (v11)
    {
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_4;
LABEL_5:
    v6 = __OFADD__(v4++, 1);
    if (v6)
      goto LABEL_44;
    if (v4 >= v30)
      goto LABEL_39;
    v7 = *(_QWORD *)(v29 + 8 * v4);
    if (!v7)
      break;
LABEL_17:
    ;
  }
  v8 = v4 + 1;
  if (v4 + 1 >= v30)
    goto LABEL_39;
  v7 = *(_QWORD *)(v29 + 8 * v8);
  if (v7)
    goto LABEL_16;
  v8 = v4 + 2;
  if (v4 + 2 >= v30)
    goto LABEL_39;
  v7 = *(_QWORD *)(v29 + 8 * v8);
  if (v7)
    goto LABEL_16;
  v8 = v4 + 3;
  if (v4 + 3 >= v30)
    goto LABEL_39;
  v7 = *(_QWORD *)(v29 + 8 * v8);
  if (v7)
    goto LABEL_16;
  v8 = v4 + 4;
  if (v4 + 4 >= v30)
  {
LABEL_39:
    swift_release();
    return v5;
  }
  v7 = *(_QWORD *)(v29 + 8 * v8);
  if (v7)
  {
LABEL_16:
    v4 = v8;
    goto LABEL_17;
  }
  while (1)
  {
    v4 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v4 >= v30)
      goto LABEL_39;
    v7 = *(_QWORD *)(v29 + 8 * v4);
    ++v8;
    if (v7)
      goto LABEL_17;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = sub_23FB2F9B0();
  __break(1u);
  return result;
}

void static ActionParameterContext.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if ((sub_23F70D678() & 1) != 0
    && ((v0 = type metadata accessor for ActionParameterContext(0), sub_23F7A029C(*(int *)(v0 + 20)), v3)
      ? (v3 = v1 == v2)
      : (v3 = 0),
        (v3 || (sub_23F6B5280(), sub_23F7A01D0(), (v4 & 1) != 0))
     && ((sub_23F7A029C(*(int *)(v0 + 24)), v3) ? (v7 = v5 == v6) : (v7 = 0), !v7)))
  {
    sub_23FB2FB78();
  }
  else
  {
    sub_23F694C84();
  }
}

uint64_t Session.Transcript.events.getter()
{
  return sub_23F82EB30(type metadata accessor for Session.Transcript);
}

void Session.Event.payload.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F8785D0();
  sub_23F83A800(v1 + *(int *)(v2 + 28), v0, type metadata accessor for Session.Event.Payload);
  sub_23F694CC8();
}

void Session.Event.Payload.queryBehavior.getter(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  type metadata accessor for Session.Event.Payload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F876E18(v3, v4, v7);
  v5 = sub_23F7A02B4();
  if ((v5 - 32) < 5)
  {
    v6 = 2;
  }
  else if ((v5 - 1) >= 3)
  {
    if ((_DWORD)v5)
    {
      if ((_DWORD)v5 == 48)
      {
        v6 = 3;
        goto LABEL_6;
      }
      v6 = 0;
    }
    else
    {
      v6 = 3;
    }
  }
  else
  {
    v6 = 1;
  }
  sub_23F8766E0(v5, type metadata accessor for Session.Event.Payload);
LABEL_6:
  *a1 = v6;
  sub_23F694C84();
}

uint64_t Session.Event.id.getter()
{
  return sub_23F839AEC();
}

void Session.Event.sender.getter()
{
  type metadata accessor for Session.Event(0);
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

uint64_t SpeechQuery.safetyMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t TextQuery.safetyMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Request.safetyMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Request(0) + 20));
}

uint64_t ToolRetrievalResponse.init(originalSubQuery:rewrittenQuery:confidence:retrievedTools:types:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, float a8@<S0>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(float *)(a7 + 32) = a8;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

void Session.Event.Payload.statementIds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD);
  char *v60;
  uint64_t v61[50];

  sub_23F6B50E8();
  type metadata accessor for QueryDecorationPrePlannerResult(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  v3 = sub_23F877CE4(v2, v61[0]);
  v61[26] = type metadata accessor for ClientUndoRedoRequest(v3);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v4);
  v6 = sub_23F876E8C(v5, v61[0]);
  v61[23] = type metadata accessor for UndoRedoRequest(v6);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  v9 = sub_23F877CC0(v8, v61[0]);
  v61[19] = type metadata accessor for ToolResolution(v9);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v10);
  v12 = sub_23F877D08(v11, v61[0]);
  v61[21] = type metadata accessor for QueryDecorationResult(v12);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  v15 = sub_23F876ED4(v14, v61[0]);
  v61[17] = type metadata accessor for TypeConversionResult(v15);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  v61[16] = (uint64_t)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61[15] = sub_23F878708();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v18);
  sub_23F877ADC((uint64_t)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v20);
  v22 = sub_23F876EB0(v21, v61[0]);
  type metadata accessor for Action(v22);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v23);
  v61[11] = (uint64_t)v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61[9] = sub_23F877704();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v25);
  v27 = sub_23F877C9C(v26, v61[0]);
  type metadata accessor for QueryStepResults(v27);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v28);
  v61[7] = sub_23F87768C(v29, v61[0]);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v30);
  sub_23F6B5314((uint64_t)v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61[4] = *(_QWORD *)(sub_23F6916B8(&qword_256EA49D8) - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v32);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v33);
  sub_23F6B6580();
  v61[5] = v34;
  type metadata accessor for ActionCancellation(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v35);
  sub_23F70D434((uint64_t)v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = sub_23FB2D580();
  v38 = *(_QWORD *)(v37 - 8);
  v61[33] = v37;
  v61[34] = v38;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v39);
  v40 = sub_23F6B58C8();
  v61[35] = *(_QWORD *)(v40 - 8);
  v61[36] = v40;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v41);
  sub_23F693E0C();
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v42);
  sub_23F713E20();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6B6580();
  v45 = sub_23F8789D8(v44);
  v61[31] = *(_QWORD *)(v45 - 8);
  v61[32] = v45;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v46);
  v61[30] = (uint64_t)v61 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61[28] = sub_23F87798C();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v48);
  v50 = sub_23F8780AC(v49, v61[0]);
  type metadata accessor for RequestContent.TextContent(v50);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v51);
  v52 = sub_23F77E1CC();
  type metadata accessor for RequestContent(v52);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v53);
  v54 = sub_23F6B5864();
  type metadata accessor for Request(v54);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v55);
  sub_23F6B51A4();
  sub_23F879A28();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v56);
  v57 = sub_23F7A00C8();
  type metadata accessor for Session.Event.Payload(v57);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v58);
  sub_23F6B5208();
  sub_23F83A800(v61[37], v0, v59);
  v60 = (char *)&loc_23F7FB32C + dword_23F7FBDFC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23F7FB33C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F83A7D4(v1, type metadata accessor for Session.Event.Payload);
  return v0;
}

#error "23F7FBD14: call analysis failed (funcsize=8)"

void sub_23F7FBD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 248);
  sub_23F87676C(v1, v3);
  sub_23F6916B8(&qword_256EA6510);
  v4 = sub_23F876710();
  *(_OWORD *)(v4 + 16) = xmmword_23FB47010;
  sub_23F878C44(v4 + v0, v3 + *(int *)(*(_QWORD *)(v2 - 256) + 28), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1 + 16));
  JUMPOUT(0x23F7FBD78);
}

uint64_t SessionStart.initialLocaleSettings.getter()
{
  return sub_23F839AEC();
}

uint64_t Session.Transcript.sessionId.getter()
{
  return sub_23F839AEC();
}

void Session.Transcript.clientSessionId.getter()
{
  sub_23F81CEB0(type metadata accessor for Session.Transcript);
}

void Session.Transcript.clientApplicationId.getter()
{
  sub_23F82694C(type metadata accessor for Session.Transcript);
}

void Session.Transcript.clientGroupId.getter()
{
  sub_23F81B864(type metadata accessor for Session.Transcript);
}

void Session.Transcript.events.setter(uint64_t a1)
{
  sub_23F82EB58(a1, type metadata accessor for Session.Transcript);
}

uint64_t (*Session.Transcript.events.modify())()
{
  type metadata accessor for Session.Transcript(0);
  sub_23F6F0B5C();
  return nullsub_1;
}

void Session.Transcript.init(sessionId:clientSessionId:clientApplicationId:clientGroupId:events:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  sub_23F6B50E8();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  sub_23F876AEC();
  v12 = sub_23F72E034();
  sub_23F877000(v12);
  v13 = (int *)type metadata accessor for Session.Transcript(0);
  v14 = (_QWORD *)(v3 + v13[5]);
  *v14 = v2;
  v14[1] = v1;
  v15 = (_QWORD *)(v3 + v13[6]);
  *v15 = v0;
  v15[1] = v11;
  v16 = (_QWORD *)(v3 + v13[7]);
  *v16 = v9;
  v16[1] = v7;
  *(_QWORD *)(v3 + v13[8]) = v5;
  sub_23F693DDC();
}

void Session.Transcript.init(sessionId:clientSessionId:clientApplicationId:clientGroupId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  int *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  sub_23F6D3A90();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_23F72E034();
  sub_23F70D880();
  v14 = sub_23F7A1280();
  v15(v14);
  v16 = (int *)type metadata accessor for Session.Transcript(0);
  v17 = (_QWORD *)(v13 + v16[5]);
  *v17 = v11;
  v17[1] = v9;
  v18 = (_QWORD *)(v13 + v16[6]);
  *v18 = v7;
  v18[1] = v5;
  v19 = (_QWORD *)(v13 + v16[7]);
  *v19 = v3;
  v19[1] = v1;
  *(_QWORD *)(v13 + v16[8]) = MEMORY[0x24BEE4AF8];
  sub_23F6B69E0();
}

void Session.Transcript.init(sessionId:clientSessionId:events:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v8 = sub_23F72E034();
  sub_23F8772A0(v8);
  v9 = type metadata accessor for Session.Transcript(0);
  v10 = (_QWORD *)(a4 + *(int *)(v9 + 20));
  *v10 = a1;
  v10[1] = a2;
  sub_23F878A94((_QWORD *)(a4 + *(int *)(v9 + 24)));
  v12 = (_QWORD *)(a4 + v11);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)(a4 + *(int *)(v13 + 32)) = a3;
  sub_23F6B5F7C();
}

uint64_t Session.Transcript.init(sessionId:clientSessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  v4 = sub_23F72E034();
  sub_23F75E710(a2, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  v5 = type metadata accessor for Session.Transcript(0);
  sub_23F878E64(v5);
  sub_23F878A94(v6);
  v8 = (_QWORD *)(a2 + v7);
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)(a2 + *(int *)(v9 + 32)) = MEMORY[0x24BEE4AF8];
  v10 = sub_23F7D2D5C();
  return sub_23F877AEC(v10, v11, v12);
}

void Session.Transcript.append(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(BOOL);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Session.Transcript(0) + 32));
  sub_23F83A990((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23F7545C8);
  v4 = *(_QWORD *)(*v3 + 16);
  v5 = sub_23F78F478();
  sub_23F83A9FC(v5, v6);
  v7 = *v3;
  *(_QWORD *)(*v3 + 16) = v4 + 1;
  sub_23F7E52BC();
  sub_23F6BC450();
  sub_23F83A800(a1, v7 + v8 + *(_QWORD *)(v9 + 72) * v4, v10);
  *v3 = v7;
  sub_23F694C84();
}

void Session.Transcript.formingQueryEvent(clientRequestId:_:)()
{
  sub_23F7FC5F0();
}

void Session.Transcript.formingQueryEvent(id:clientRequestId:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_23F6B50E8();
  v51 = v4;
  v57 = v5;
  v54 = v7;
  v55 = v6;
  v9 = v8;
  v10 = sub_23F7A3510();
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  v12 = (int *)sub_23F877BC8();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Session.Event.Payload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B6B5C();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_23F72E034();
  sub_23F6B51B8();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B543C();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v49 = sub_23F878184(v23, v24, v25, v26, v27, v28, v29, v30, v44);
  sub_23F878B18((uint64_t)v49, v9);
  v50 = v2;
  v31 = sub_23F6B6AB8();
  sub_23F878B18(v31, v32);
  v56 = v9;
  sub_23F878B18((uint64_t)v19, v9);
  sub_23F878CF4((uint64_t)v19);
  v33 = v51;
  v51 = v1;
  sub_23F83A800(v33, v1, type metadata accessor for Session.Event.Payload);
  v34 = sub_23F878EBC();
  v36 = *v35;
  v37 = v35[1];
  v46 = *(_QWORD *)(v0 + v38);
  v47 = v36;
  v45 = *(_QWORD *)(v0 + *(int *)(v34 + 28));
  sub_23F6B54F8();
  sub_23F8793F8();
  v48 = v37;
  sub_23F6B6254();
  sub_23F6B90D8();
  sub_23FB2C44C();
  sub_23F8789B4();
  v39 = sub_23F87859C();
  if (qword_256EA0AC8 != -1)
    swift_once();
  v40 = sub_23F6BF1A4(v20, (uint64_t)qword_256F5C778);
  sub_23F878B18((uint64_t)&v15[v12[7]], v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v15, v3, v53);
  *(_QWORD *)&v15[v12[5]] = v3;
  *(_QWORD *)&v15[v12[6]] = v39;
  sub_23F83B688();
  sub_23FB2F050();
  sub_23F876DD4();
  v43 = Session.Event.init(id:sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)(v50, (uint64_t)v19, v51, v41, v57, v47, v48, v42, v44, v45, v46, v47, v48, (uint64_t)v49, v50, v51, v52, v53);
  sub_23F8792FC(v43, (uint64_t (*)(_QWORD))type metadata accessor for PreassignedEventID);
  sub_23F693DDC();
}

uint64_t Session.Event.init(id:sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t result;

  v20 = (int *)sub_23F7E52BC();
  v21 = a8 + v20[6];
  v22 = sub_23F72E034();
  sub_23F77E598(v21, 1);
  v23 = (_QWORD *)(a8 + v20[11]);
  *v23 = 0;
  v23[1] = 0;
  v24 = (_QWORD *)(a8 + v20[13]);
  *v24 = 0;
  v24[1] = 0;
  v25 = a8 + v20[14];
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  v26 = *(void (**)(uint64_t))(*(_QWORD *)(v22 - 8) + 32);
  v27 = sub_23F6B63F4();
  v26(v27);
  ((void (*)(uint64_t, uint64_t, uint64_t))v26)(a8 + v20[5], a1, v22);
  sub_23F840E4C(a2, v21, &qword_256EA2798);
  sub_23F83A7A4(a3, a8 + v20[7], type metadata accessor for Session.Event.Payload);
  v28 = (_QWORD *)(a8 + v20[8]);
  *v28 = a4;
  v28[1] = a5;
  v29 = (_QWORD *)(a8 + v20[9]);
  *v29 = a6;
  v29[1] = a7;
  v30 = (_QWORD *)(a8 + v20[10]);
  *v30 = a9;
  v30[1] = a10;
  swift_bridgeObjectRelease();
  *v23 = a11;
  v23[1] = a12;
  sub_23F83A7A4(a13, a8 + v20[12], (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  result = swift_bridgeObjectRelease();
  *v24 = a14;
  v24[1] = a15;
  *(_QWORD *)v25 = a16;
  *(_BYTE *)(v25 + 8) = a17 & 1;
  *(_QWORD *)(a8 + v20[15]) = a18;
  return result;
}

void Session.Transcript.formingQuerylessEvent(clientRequestId:_:)()
{
  sub_23F7FC5F0();
}

void sub_23F7FC5F0()
{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  sub_23F6D3A90();
  v1 = v0;
  sub_23F877788();
  type metadata accessor for PreassignedEventID();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v2);
  sub_23F878580();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  v3 = sub_23F72E430();
  v1(v3);
  sub_23F6B69E0();
}

void Session.Transcript.formingQuerylessEvent(id:clientRequestId:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_23F6B50E8();
  v52 = v4;
  v58 = v5;
  v55 = v7;
  v56 = v6;
  v9 = v8;
  v10 = sub_23F7A3510();
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  v12 = (int *)sub_23F877BC8();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Session.Event.Payload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  sub_23F6B53AC();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_23F72E034();
  sub_23F6B51B8();
  MEMORY[0x24BDAC7A8](v21);
  sub_23F6B543C();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v49 = sub_23F878184(v23, v24, v25, v26, v27, v28, v29, v30, v45);
  v57 = v9;
  sub_23F7DD628((uint64_t)v49, v9);
  v50 = v1;
  sub_23F7DD628(v1, v0);
  v51 = v19;
  v31 = sub_23F877898();
  _s30IntelligenceFlowPlannerSupport25ContextProtoRetrievedToolV26ContextProtoDefinitionEnumOwst_0(v31, v32, v33, v20);
  v34 = v52;
  v52 = v2;
  sub_23F83A800(v34, v2, type metadata accessor for Session.Event.Payload);
  v35 = sub_23F878EBC();
  v37 = *v36;
  v38 = v36[1];
  v47 = *(_QWORD *)(v0 + v39);
  v48 = v37;
  v46 = *(_QWORD *)(v0 + *(int *)(v35 + 28));
  sub_23F6B54F8();
  sub_23F8793F8();
  sub_23F6B5F1C();
  sub_23F6B90D8();
  sub_23FB2C44C();
  sub_23F8789B4();
  v40 = sub_23F87859C();
  if (qword_256EA0AC8 != -1)
    swift_once();
  v41 = sub_23F6BF1A4(v20, (uint64_t)qword_256F5C778);
  sub_23F7DD628((uint64_t)&v15[v12[7]], v41);
  sub_23F78F1E4((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 32));
  *(_QWORD *)&v15[v12[5]] = v3;
  *(_QWORD *)&v15[v12[6]] = v40;
  sub_23F83B688();
  sub_23FB2F050();
  sub_23F876DD4();
  v44 = Session.Event.init(id:sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)(v50, (uint64_t)v51, v52, v42, v58, v48, v38, v43, v45, v46, v47, v48, (uint64_t)v49, v50, (uint64_t)v51, v52, v53, v54);
  sub_23F8792FC(v44, (uint64_t (*)(_QWORD))type metadata accessor for PreassignedEventID);
  sub_23F693DDC();
}

void Session.Transcript.formingOriginatingEventForTesting(_:clientRequestId:sender:)()
{
  uint64_t v0;

  sub_23F6D3A90();
  sub_23F8795F0();
  type metadata accessor for PreassignedEventID();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B59E0();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  Session.Transcript.formingOriginatingEventForTesting(id:_:clientRequestId:sender:)();
  sub_23F6B69E0();
}

void Session.Transcript.formingOriginatingEventForTesting(id:_:clientRequestId:sender:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  __uint64_t v42;
  __uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  sub_23F6B50E8();
  v60 = v4;
  v61 = v3;
  v65 = v5;
  v62 = v7;
  v63 = v6;
  v58 = v8;
  v10 = v9;
  v59 = sub_23F7A3510();
  v57 = *(_QWORD *)(v59 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v11);
  sub_23F6B5864();
  v12 = (int *)type metadata accessor for Timepoint();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v13);
  v14 = sub_23F6B51D0();
  type metadata accessor for Session.Event.Payload(v14);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v15);
  sub_23F6B5268();
  sub_23F6916B8(&qword_256EA2798);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23F72E034();
  sub_23F6B51B8();
  MEMORY[0x24BDAC7A8](v20);
  sub_23F878C20();
  v23 = v21 - v22;
  v25 = MEMORY[0x24BDAC7A8](v24);
  v54 = sub_23F878184(v25, v26, v27, v28, v29, v30, v31, v32, v50);
  v64 = v10;
  sub_23F87960C((uint64_t)v54, v10);
  v55 = v23;
  sub_23F87960C(v23, v0);
  v56 = v18;
  sub_23F87732C((uint64_t)v18);
  v33 = v58;
  v58 = v2;
  sub_23F83A800(v33, v2, type metadata accessor for Session.Event.Payload);
  v34 = sub_23F878EBC();
  v36 = *v35;
  v37 = v35[1];
  v39 = *(_QWORD *)(v0 + v38 + 8);
  v52 = *(_QWORD *)(v0 + v38);
  v53 = v36;
  v40 = (uint64_t *)(v0 + *(int *)(v34 + 28));
  v41 = v40[1];
  v51 = *v40;
  sub_23F6B54F8();
  sub_23F8793F8();
  sub_23F6B5508();
  sub_23F77E584();
  sub_23FB2C44C();
  v42 = sub_23F8789B4();
  v43 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_256EA0AC8 != -1)
    swift_once();
  v44 = sub_23F6BF1A4(v19, (uint64_t)qword_256F5C778);
  sub_23F87960C(v1 + v12[7], v44);
  v45 = sub_23F72E430();
  v46(v45);
  *(_QWORD *)(v1 + v12[5]) = v42;
  *(_QWORD *)(v1 + v12[6]) = v43;
  sub_23F83B688();
  v47 = sub_23FB2F050();
  v48 = swift_bridgeObjectRetain();
  v49 = Session.Event.init(id:sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)(v55, (uint64_t)v56, v58, v63, v65, v53, v37, v62, v52, v39, v51, v41, v1, v61, v48, 0, 1, v47);
  sub_23F8792FC(v49, (uint64_t (*)(_QWORD))type metadata accessor for PreassignedEventID);
  sub_23F693DDC();
}

uint64_t sub_23F7FCBAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6553746E65696C63 && a2 == 0xEF64496E6F697373;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000013 && a2 == 0x800000023FB330B0 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = a1 == 0x7247746E65696C63 && a2 == 0xED0000644970756FLL;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        v9 = sub_23FB2FB78();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 4;
        else
          return 5;
      }
    }
  }
}

uint64_t sub_23F7FCE00(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23F7FCE38 + 4 * byte_23FB630B8[a1]))(0x496E6F6973736573, 0xE900000000000064);
}

uint64_t sub_23F7FCE38()
{
  return 0x6553746E65696C63;
}

unint64_t sub_23F7FCE5C()
{
  return 0xD000000000000013;
}

uint64_t sub_23F7FCE78()
{
  return 0x7247746E65696C63;
}

uint64_t sub_23F7FCE9C()
{
  return 0x73746E657665;
}

uint64_t sub_23F7FCEB0()
{
  unsigned __int8 *v0;

  return sub_23F7FCE00(*v0);
}

uint64_t sub_23F7FCEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23F7FCBAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23F7FCEDC()
{
  sub_23F83B6C4();
  return sub_23FB2FD10();
}

uint64_t sub_23F7FCF04()
{
  sub_23F83B6C4();
  return sub_23FB2FD1C();
}

void Session.Transcript.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v7[16];
  uint64_t v8;
  char v9;
  char v10;

  sub_23F6D3DC4();
  sub_23F70D5A8();
  sub_23F6916B8(&qword_256EAB880);
  sub_23F70D528();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v7[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23F70D4B8();
  sub_23F83B6C4();
  sub_23F6B63A4();
  v10 = 0;
  sub_23F72E034();
  sub_23F6B4EEC((uint64_t)&qword_256EA6620);
  sub_23F876660();
  if (!v0)
  {
    type metadata accessor for Session.Transcript(0);
    sub_23F87686C();
    v9 = 2;
    sub_23F87698C();
    sub_23F8772F4();
    v8 = *(_QWORD *)(v1 + *(int *)(v2 + 32));
    v7[15] = 4;
    sub_23F6916B8(&qword_256EAB808);
    sub_23F83B700();
    sub_23F70D4F0();
  }
  sub_23F6B56E0((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_23F70D9D8();
  sub_23F6D3710();
}

void Session.Transcript.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_23F6B5220();
  v5 = v4;
  v20 = v6;
  sub_23F72E034();
  sub_23F70D9A8();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B5420(v8, v19);
  sub_23F6916B8(&qword_256EAB898);
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23F6B51D0();
  v11 = (int *)type metadata accessor for Session.Transcript(v10);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v12);
  sub_23F6B5208();
  sub_23F876BD8(v5);
  sub_23F83B6C4();
  sub_23F8787AC();
  sub_23F877128();
  if (v1)
  {
    sub_23F877780();
  }
  else
  {
    sub_23F6B4EEC((uint64_t)&qword_256EA6700);
    sub_23F876F6C();
    sub_23F6B6E1C();
    sub_23F6B633C(v2, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    sub_23F70DD04();
    v13 = sub_23F70D944();
    sub_23F87949C(v13, v14, v11[5]);
    sub_23F87780C();
    v15 = sub_23F8783D4();
    sub_23F87949C(v15, v16, v11[6]);
    sub_23F8772E4();
    v17 = sub_23F8779EC();
    sub_23F87949C(v17, v18, v11[7]);
    sub_23F6916B8(&qword_256EAB808);
    sub_23F83B77C();
    sub_23F6B6E1C();
    sub_23F876F34(v0);
    *(_QWORD *)(v2 + v11[8]) = v22;
    sub_23F876818(v2, v20);
    sub_23F87897C();
    sub_23F876820(v2);
  }
  sub_23F6B6834();
  sub_23F6B5100();
}

void sub_23F7FD32C()
{
  Session.Transcript.init(from:)();
}

void sub_23F7FD340()
{
  Session.Transcript.encode(to:)();
}

uint64_t Session.Event.id.setter(uint64_t a1)
{
  return sub_23F839B28(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

uint64_t (*Session.Event.id.modify())()
{
  return nullsub_1;
}

uint64_t Session.Event.sessionId.getter()
{
  return sub_23F811704(type metadata accessor for Session.Event);
}

uint64_t Session.Event.sessionId.setter(uint64_t a1)
{
  return sub_23F811750(a1, type metadata accessor for Session.Event);
}

uint64_t (*Session.Event.sessionId.modify())()
{
  sub_23F7E52BC();
  sub_23F6F099C();
  return nullsub_1;
}

void Session.Event.queryEventId.getter()
{
  sub_23F81A9D8(type metadata accessor for Session.Event);
}

void Session.Event.queryEventId.setter(uint64_t a1)
{
  sub_23F81AA10(a1, type metadata accessor for Session.Event);
}

uint64_t (*Session.Event.queryEventId.modify())()
{
  sub_23F7E52BC();
  sub_23F6F09C4();
  return nullsub_1;
}

void Session.Event.payload.setter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F87867C();
  sub_23F6F0A54();
  sub_23F83B7F8(v0, v1, type metadata accessor for Session.Event.Payload);
  sub_23F694CC8();
}

uint64_t (*Session.Event.payload.modify())()
{
  type metadata accessor for Session.Event(0);
  sub_23F6F0A54();
  return nullsub_1;
}

void Session.Event.clientRequestId.getter()
{
  sub_23F82CCB0(type metadata accessor for Session.Event);
}

void Session.Event.clientRequestId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F8770D0();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.Event.clientRequestId.modify())()
{
  type metadata accessor for Session.Event(0);
  sub_23F6F0B5C();
  return nullsub_1;
}

void Session.Event.clientSessionId.getter()
{
  type metadata accessor for Session.Event(0);
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.Event.clientSessionId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F8770D0();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.Event.clientSessionId.modify())()
{
  type metadata accessor for Session.Event(0);
  sub_23F6F0D38();
  return nullsub_1;
}

void Session.Event.clientApplicationId.getter()
{
  type metadata accessor for Session.Event(0);
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.Event.clientApplicationId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F8770D0();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.Event.clientApplicationId.modify())()
{
  type metadata accessor for Session.Event(0);
  return nullsub_1;
}

void Session.Event.clientGroupId.getter()
{
  type metadata accessor for Session.Event(0);
  sub_23F6B54F8();
  sub_23F6B5994();
  sub_23F694CC8();
}

void Session.Event.clientGroupId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F8770D0();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.Event.clientGroupId.modify())()
{
  type metadata accessor for Session.Event(0);
  return nullsub_1;
}

void Session.Event.timepoint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F8785D0();
  sub_23F83A800(v1 + *(int *)(v2 + 48), v0, (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  sub_23F694CC8();
}

void Session.Event.timepoint.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23F87867C();
  sub_23F83B7F8(v0, v1 + *(int *)(v2 + 48), (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  sub_23F694CC8();
}

uint64_t (*Session.Event.timepoint.modify())()
{
  type metadata accessor for Session.Event(0);
  return nullsub_1;
}

void Session.Event.sender.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_23F8770D0();
  sub_23F6F096C();
  *v1 = v2;
  v1[1] = v0;
  sub_23F694C84();
}

uint64_t (*Session.Event.sender.modify())()
{
  type metadata accessor for Session.Event(0);
  return nullsub_1;
}

uint64_t Session.Event.postingSpan.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Session.Event(0) + 56));
}

void Session.Event.postingSpan.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(type metadata accessor for Session.Event(0) + 56);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  sub_23F694C84();
}

uint64_t (*Session.Event.postingSpan.modify())()
{
  type metadata accessor for Session.Event(0);
  return nullsub_1;
}

uint64_t Session.Event.initiatedSpans.getter()
{
  type metadata accessor for Session.Event(0);
  return swift_bridgeObjectRetain();
}

void Session.Event.initiatedSpans.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(sub_23F7E52BC() + 60);
  sub_23F8779DC();
  *(_QWORD *)(v1 + v3) = a1;
  sub_23F694C84();
}

uint64_t (*Session.Event.initiatedSpans.modify())()
{
  type metadata accessor for Session.Event(0);
  return nullsub_1;
}

void Session.Event.init(sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,uint64_t a22,uint64_t a23,__int128 a24,uint64_t a25,char a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  sub_23F6B50E8();
  v76 = v31;
  v77 = v30;
  v79 = v32;
  v80 = v33;
  v78 = v34;
  v66 = v35;
  v67 = v36;
  v38 = v37;
  v75 = v39;
  v73 = a24;
  v74 = a21;
  v70 = a27;
  v71 = a25;
  v72 = a22;
  v68 = a23;
  v69 = a26 & 1;
  sub_23F7A34F8();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v65 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Session.Event.Payload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v43);
  sub_23F6B53AC();
  sub_23F6B5D68();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v44);
  sub_23F78F260();
  sub_23FB2C4B8();
  sub_23F6B6124();
  MEMORY[0x24BDAC7A8](v45);
  sub_23F6B65E0();
  MEMORY[0x24BDAC7A8](v46);
  sub_23F878DA4();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  v47 = sub_23F7F64A8();
  sub_23F77DD54(v47, v48, v49);
  sub_23F877E74(v38, v29);
  v50 = v67;
  v51 = sub_23F6B6854();
  sub_23F83A800(v51, v52, type metadata accessor for Session.Event.Payload);
  v53 = v68;
  v54 = sub_23F6B689C();
  sub_23F83A800(v54, v55, (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  v64 = v70;
  v63 = v69;
  v62 = v71;
  v61 = v73;
  v60 = v72;
  v59 = v74;
  v58 = v76;
  sub_23F879614();
  Session.Event.init(id:sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)(v56, v29, v28, v77, v78, v79, v80, v57, v58, v59, *((uint64_t *)&v59 + 1), v60, (uint64_t)v42, v61, *((uint64_t *)&v61 + 1), v62, v63, v64);
  sub_23F83A7D4(v53, (uint64_t (*)(_QWORD))type metadata accessor for Timepoint);
  sub_23F83A7D4(v50, type metadata accessor for Session.Event.Payload);
  sub_23F7F6110(v38, &qword_256EA2798);
  sub_23F6B563C(v66, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  sub_23F693DDC();
}

void Session.Event.init(sessionId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timestamp:sender:postingSpan:initiatedSpans:)()
{
  sub_23F876898();
  __break(1u);
}

void Session.Event.init(id:sessionId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timestamp:sender:postingSpan:initiatedSpans:)()
{
  sub_23F876898();
  __break(1u);
}

void Session.Event.init(sessionId:payload:clientRequestId:clientSessionId:timestamp:sender:postingSpan:initiatedSpans:)()
{
  sub_23F876898();
  __break(1u);
}

void Session.Event.timestamp.getter()
{
  sub_23F876898();
  __break(1u);
}

void sub_23F7FDAF0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_23FB2C470();
  MEMORY[0x24BDAC7A8](v0);
  (*(void (**)(void))(v1 + 16))();
  Session.Event.timestamp.setter();
}

void Session.Event.timestamp.setter()
{
  sub_23F876898();
  __break(1u);
}

void Session.Event.timestamp.modify()
{
  sub_23F876898();
  __break(1u);
}

void Session.Event.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23FB2F7AC();
  sub_23FB2F254();
  sub_23F72E034();
  sub_23F6B4EEC((uint64_t)&unk_256EA6720);
  sub_23F877248();
  sub_23F6B68F8();
  sub_23F6B5AB0();
  sub_23F877514();
  v1 = sub_23F7E52BC();
  sub_23F877248();
  sub_23F6B68F8();
  sub_23F6B5908();
  sub_23F876B94();
  sub_23F87703C();
  sub_23F876FF4();
  sub_23F6B6090();
  sub_23F876B94();
  sub_23F87703C();
  sub_23F876FF4();
  sub_23F6B6090();
  sub_23F6B68F8();
  sub_23F87703C();
  sub_23F876FF4();
  sub_23F6B6090();
  sub_23F6B68F8();
  if (!*(_QWORD *)(v0 + *(int *)(v1 + 44) + 8))
    sub_23F878778();
  swift_bridgeObjectRetain();
  sub_23F750320();
  sub_23F6B5908();
  sub_23F877514();
  sub_23F7A3510();
  sub_23F6B4EEC((uint64_t)&qword_256EA7780);
  sub_23FB2FB48();
  sub_23F6B68F8();
  sub_23F6B5908();
  sub_23F876D94();
  Session.Event.Payload.description.getter();
  sub_23F6B68F8();
  sub_23F6B5908();
  sub_23F6B68F8();
  if ((*(_BYTE *)(v0 + *(int *)(v1 + 56) + 8) & 1) == 0)
  {
    sub_23F797084();
    sub_23FB2F6F8();
  }
  sub_23F877298();
  sub_23F693E04();
  sub_23F8784D0();
}

void sub_23F7FDE78()
{
  sub_23F7FDEB0();
}

void sub_23F7FDE94()
{
  sub_23F7FDEB0();
}

void sub_23F7FDEB0()
{
  sub_23F694CF8();
  sub_23F693E04();
  sub_23F694CC8();
}

void sub_23F7FDEE4()
{
  sub_23F7FDEB0();
}

void sub_23F7FDF04()
{
  sub_23F7F6F14();
}

void sub_23F7FDF2C()
{
  sub_23F7F7DE4();
}

void sub_23F7FDF50(BOOL *a1@<X8>)
{
  char v2;

  sub_23F7FDEB0();
  *a1 = v2 != 0;
}

void sub_23F7FDF8C(_QWORD *a1@<X8>)
{
  sub_23F878F34(a1);
}

void sub_23F7FDFA0(BOOL *a1@<X8>)
{
  char v2;

  sub_23F7FDE78();
  *a1 = v2 != 0;
}

void sub_23F7FDFCC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23F7FDFD8()
{
  sub_23F83D084();
  return sub_23FB2FD10();
}

uint64_t sub_23F7FE000()
{
  sub_23F83D084();
  return sub_23FB2FD1C();
}

void sub_23F7FE028()
{
  sub_23F7F6F14();
}

void sub_23F7FE058()
{
  sub_23F7F7DE4();
}

void sub_23F7FE084(BOOL *a1@<X8>)
{
  char v2;

  sub_23F7FDEB0();
  *a1 = v2 != 0;
}

void sub_23F7FE0C0(_QWORD *a1@<X8>)
{
  sub_23F878F34(a1);
}

uint64_t sub_23F7FE0DC()
{
  return 0x74616469646E6163;
}

void sub_23F7FE0F8(BOOL *a1@<X8>)
{
  char v2;

  sub_23F7FDE94();
  *a1 = v2 != 0;
}

uint64_t sub_23F7FE124()
{
  sub_23F83D00C();
  return sub_23FB2FD10();
}

uint64_t sub_23F7FE14C()
{
  sub_23F83D00C();
  return sub_23FB2FD1C();
}

void sub_23F7FE174()
{
  sub_23F7F6F14();
}

void sub_23F7FE198()
{
  sub_23F7F7DE4();
}

void sub_23F7FE1B8(BOOL *a1@<X8>)
{
  char v2;

  sub_23F7FDEB0();
  *a1 = v2 != 0;
}

void sub_23F7FE1F4(_QWORD *a1@<X8>)
{
  sub_23F878F34(a1);
}

uint64_t sub_23F7FE204()
{
  return 1851878512;
}

void sub_23F7FE214(BOOL *a1@<X8>)
{
  char v2;

  sub_23F7FDEE4();
  *a1 = v2 != 0;
}

uint64_t sub_23F7FE240()
{
  sub_23F83CF58();
  return sub_23FB2FD10();
}

uint64_t sub_23F7FE268()
{
  sub_23F83CF58();
  return sub_23FB2FD1C();
}

void RequestContent.SystemPromptResolution.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  sub_23F6B6244();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v1);
  sub_23F6B52B0();
  sub_23F876BC8();
  sub_23FB2F7AC();
  sub_23F878F14();
  sub_23F7502F8();
  v2 = sub_23F6B5FE0();
  sub_23F876C10(v2, v3);
  v4 = sub_23F72E034();
  v5 = sub_23F6B5164(v0, 1, v4);
  if (v6)
  {
    sub_23F876C50(v5, &qword_256EA2798);
  }
  else
  {
    sub_23FB2C494();
    v7 = sub_23F6B54C8();
    sub_23F78F1E4(v7, v8);
  }
  sub_23F72E3F8();
  sub_23FB2F254();
  sub_23F6B6090();
  sub_23F878D64();
  sub_23F876B94();
  sub_23F87798C();
  sub_23F878C38();
  sub_23F6B4EEC((uint64_t)&unk_256EA6720);
  sub_23FB2FB48();
  sub_23F878710();
  sub_23F6B5AB0();
  sub_23FB2F254();
  RequestContent.SystemPromptResolution.UserAction.description.getter();
  sub_23F878710();
  sub_23F6B5AB0();
  sub_23F876774();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877A70();
  sub_23F878710();
  sub_23F693E04();
  sub_23F8767CC();
  sub_23F6B5F7C();
}

void Action.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23F877640();
  sub_23F876CF0();
  sub_23FB2F7AC();
  sub_23F877940();
  sub_23F876ACC();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877A50();
  sub_23F876ACC();
  sub_23F6B5AB0();
  sub_23F876D94();
  v1 = type metadata accessor for Action(0);
  sub_23F87703C();
  sub_23F876FF4();
  sub_23F6B6090();
  sub_23F878D70();
  sub_23F8779B4();
  if (!*(_QWORD *)(v0 + *(int *)(v1 + 24) + 8))
    sub_23F878778();
  swift_bridgeObjectRetain();
  sub_23F750320();
  sub_23F6B5908();
  sub_23F8776CC();
  sub_23F878924();
  swift_bridgeObjectRetain();
  sub_23F876FF4();
  sub_23F6B6090();
  sub_23F877404();
  sub_23F876B94();
  type metadata accessor for Action.ParameterValue(0);
  sub_23F6B5F1C();
  sub_23F879818();
  sub_23F876ACC();
  sub_23F6B5908();
  sub_23F6B6090();
  sub_23F878D70();
  sub_23FB2F254();
  sub_23F750320();
  sub_23F6B5908();
  sub_23F876840();
  sub_23F879764(*(int *)(v1 + 40));
  swift_bridgeObjectRetain();
  sub_23F6B6E7C();
  sub_23F6B5AB0();
  sub_23F8767CC();
  sub_23F6B647C();
}

void ClientAction.description.getter()
{
  uint64_t v0;

  sub_23F877640();
  sub_23FB2F7AC();
  sub_23F877940();
  sub_23F876ACC();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877A50();
  sub_23F876ACC();
  sub_23F6B5AB0();
  sub_23F876D94();
  v0 = type metadata accessor for ClientAction(0);
  sub_23F87703C();
  sub_23F876FF4();
  sub_23F6B6090();
  sub_23F877414();
  sub_23F6B6634();
  sub_23F6B5F1C();
  sub_23F879818();
  sub_23F876ACC();
  sub_23F6B5908();
  sub_23F6B6090();
  sub_23F877404();
  sub_23F876B94();
  sub_23F878924();
  swift_bridgeObjectRetain();
  sub_23F876FF4();
  sub_23F6B6090();
  sub_23F876840();
  sub_23F879764(*(int *)(v0 + 32));
  swift_bridgeObjectRetain();
  sub_23F6B6E7C();
  sub_23F6B5AB0();
  sub_23F8767CC();
  sub_23F6B647C();
}

void ActionCancellation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23F6B6244();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F876BC8();
  sub_23FB2F7AC();
  sub_23F878F14();
  sub_23F7502F8();
  v1 = sub_23F7B0E48();
  sub_23F876C10(v1, v2);
  sub_23F6B6098();
  sub_23FB2F17C();
  sub_23FB2F254();
  sub_23F6B5AB0();
  sub_23F878D64();
  sub_23F876B94();
  sub_23F878248();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877A70();
  sub_23F878710();
  sub_23F693E04();
  sub_23F8767CC();
  sub_23F6B5F7C();
}

void ExternalAgentOutcome.outcome.getter()
{
  uint64_t v0;

  v0 = sub_23F6F0920();
  type metadata accessor for ExternalAgentOutcome(v0);
  sub_23F87986C();
  sub_23F694CC8();
}

uint64_t ToolResolution.description.getter()
{
  uint64_t v1;

  sub_23F877E38();
  sub_23F877940();
  sub_23F878D64();
  sub_23F876B94();
  sub_23FB2E8A0();
  sub_23F876ACC();
  sub_23F6B5AB0();
  sub_23F876774();
  sub_23F878E7C();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877248();
  sub_23F876ACC();
  sub_23F6B644C();
  sub_23F876ACC();
  sub_23F877248();
  sub_23F876ACC();
  sub_23F693E04();
  sub_23F8767CC();
  return v1;
}

void UndoRedoRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  sub_23F6B50E8();
  v4 = sub_23F6B58C8();
  v17 = *(_QWORD *)(v4 - 8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  sub_23F6B52B0();
  sub_23F6916B8(&qword_256EA49D8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v6);
  sub_23F6B5208();
  sub_23F6B5D68();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v7);
  sub_23F6B59E0();
  sub_23FB2F7AC();
  sub_23F7502F8();
  v8 = *(_QWORD *)(v0 + 8);
  sub_23F6B90D8();
  sub_23F8781AC();
  sub_23FB2F254();
  sub_23F717D54();
  sub_23F8798AC();
  type metadata accessor for UndoRedoRequest(0);
  sub_23F87843C();
  sub_23F877E74(v0 + v9, v3);
  v10 = sub_23F72E034();
  sub_23F6B5164(v3, 1, v10);
  if (v11)
  {
    sub_23F7F6110(v3, &qword_256EA2798);
  }
  else
  {
    sub_23FB2C488();
    v12 = sub_23F7D2C3C();
    v13(v12, v10);
  }
  sub_23FB2F254();
  sub_23F756640();
  sub_23F8774C8();
  sub_23F879878();
  sub_23F876774();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F8796F0();
  sub_23F8798C4();
  sub_23F693E04();
  sub_23F876B94();
  sub_23F7DCCDC(v0 + *(int *)(v8 + 32), v2, &qword_256EA49D8);
  sub_23F6B5164(v2, 1, v4);
  if (!v11)
  {
    v14 = sub_23F78F534();
    sub_23F72E0C8(v14, v15, v16);
    sub_23F8796F0();
    sub_23F78F1E4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
  }
  sub_23F7B0E48();
  sub_23FB2F254();
  sub_23F6B6090();
  sub_23F8767CC();
  sub_23F693DDC();
}

void ClientUndoRedoRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[16];
  uint64_t v11;
  unint64_t v12;

  sub_23F6B50E8();
  v3 = sub_23F6B58C8();
  sub_23F6B562C();
  MEMORY[0x24BDAC7A8](v4);
  sub_23F6B6B5C();
  sub_23F878A54();
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = 0;
  v12 = 0xE000000000000000;
  sub_23FB2F7AC();
  sub_23F7502F8();
  sub_23FB2C488();
  sub_23F8798C4();
  sub_23F6B6A48();
  sub_23F8774C8();
  v8 = sub_23F8786F0();
  v10[15] = *(_BYTE *)(v0 + *(int *)(v8 + 20));
  sub_23F879878();
  sub_23F876774();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F8799A8();
  sub_23F8798C4();
  sub_23F756640();
  sub_23F876B94();
  sub_23F7DCCDC(v0 + *(int *)(v8 + 28), (uint64_t)v7, &qword_256EA49D8);
  sub_23F6B5164((uint64_t)v7, 1, v3);
  if (v9)
  {
    sub_23F878778();
  }
  else
  {
    sub_23F759774(v1, (uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    sub_23F8799A8();
    sub_23F6B56E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_23F750320();
  sub_23F6B5908();
  sub_23F8767CC();
  sub_23F693DDC();
}

void TypeConversionRequest.description.getter()
{
  sub_23F877640();
  sub_23F876CF0();
  sub_23FB2F7AC();
  sub_23F877940();
  sub_23F876B94();
  sub_23F6B6634();
  sub_23F8795D0();
  sub_23F878D70();
  sub_23F876D94();
  sub_23F878708();
  sub_23F8786E0();
  sub_23F8795D0();
  sub_23F876774();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877A70();
  sub_23F876ACC();
  sub_23F693E04();
  sub_23F8767CC();
  sub_23F6B647C();
}

void TypeConversionResult.description.getter()
{
  sub_23F877640();
  sub_23F877E38();
  sub_23F877940();
  sub_23F876ACC();
  sub_23F6B6634();
  sub_23F879834();
  sub_23F876774();
  sub_23F878E8C();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877248();
  sub_23F876ACC();
  sub_23F6B644C();
  sub_23F877404();
  sub_23F876B94();
  sub_23F877248();
  sub_23F876ACC();
  sub_23F693E04();
  sub_23F8767CC();
  sub_23F6B647C();
}

void QueryDecorationResult.description.getter()
{
  uint64_t v0;

  sub_23F6B50E8();
  sub_23F6916B8(&qword_256EA71F8);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F6B5208();
  sub_23F6916B8(&qword_256EA2948);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_23FB4F190;
  sub_23FB2DE8C();
  sub_23F6B54F8();
  sub_23F879494();
}

void sub_23F7FF08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23F693DFC();
  sub_23F878668(0x203A736E6170737BLL);
  sub_23F6B6A48();
  v2 = *(_QWORD *)(v1 - 88);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v1 - 96);
  *(_QWORD *)(v1 - 88) = v2;
  sub_23F6B90D8();
  sub_23F6B5A54();
  sub_23F717D54();
  v3 = *(_QWORD *)(v1 - 88);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 - 96);
  *(_QWORD *)(v0 + 40) = v3;
  type metadata accessor for RetrievedContextStatement(0);
  sub_23F6B54F8();
  sub_23F879494();
}

void sub_23F7FF0EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23F693DFC();
  sub_23F8798B8();
  *(_QWORD *)(v1 - 96) = 0xD000000000000012;
  *(_QWORD *)(v1 - 88) = v2;
  sub_23F77E608();
  sub_23FB2F254();
  sub_23F756640();
  v3 = *(_QWORD *)(v1 - 88);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v1 - 96);
  *(_QWORD *)(v1 - 88) = v3;
  sub_23F77E600();
  sub_23F6B5A54();
  sub_23F6B6A48();
  v4 = *(_QWORD *)(v1 - 88);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 - 96);
  *(_QWORD *)(v0 + 56) = v4;
  sub_23F6B54F8();
  sub_23F879494();
}

void sub_23F7FF14C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t DecorationResult;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23F693DFC();
  sub_23F878668(v3 | 1);
  sub_23F6B6A48();
  v5 = *(_QWORD *)(v4 - 88);
  *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 96);
  *(_QWORD *)(v4 - 88) = v5;
  sub_23F6B90D8();
  sub_23F6B5A54();
  sub_23F717D54();
  v6 = *(_QWORD *)(v4 - 88);
  v0[8] = *(_QWORD *)(v4 - 96);
  v0[9] = v6;
  DecorationResult = type metadata accessor for QueryDecorationResult(0);
  sub_23F87869C(v1 + *(int *)(DecorationResult + 28), v2);
  sub_23F6B6964();
  sub_23FB2F17C();
  *(_QWORD *)(v4 - 96) = v3 + 6;
  *(_QWORD *)(v4 - 88) = 0x800000023FB34250;
  sub_23FB2F254();
  sub_23F6B5908();
  v8 = *(_QWORD *)(v4 - 88);
  *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 96);
  *(_QWORD *)(v4 - 88) = v8;
  sub_23F6B5F1C();
  sub_23F6B5A54();
  sub_23F6B5908();
  v9 = *(_QWORD *)(v4 - 88);
  v0[10] = *(_QWORD *)(v4 - 96);
  v0[11] = v9;
  v10 = type metadata accessor for DynamicEnumerationEntityStatement(0);
  v11 = sub_23F6B54F8();
  MEMORY[0x242674058](v11, v10);
  sub_23F693DFC();
  *(_QWORD *)(v4 - 96) = v3 + 11;
  *(_QWORD *)(v4 - 88) = 0x800000023FB34270;
  sub_23F876E38();
  sub_23F6B5908();
  v12 = *(_QWORD *)(v4 - 88);
  *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 96);
  *(_QWORD *)(v4 - 88) = v12;
  sub_23F6B6254();
  sub_23F6B5A54();
  sub_23F6B5AB0();
  v13 = *(_QWORD *)(v4 - 88);
  v0[12] = *(_QWORD *)(v4 - 96);
  v0[13] = v13;
  *(_QWORD *)(v4 - 96) = v0;
  sub_23F6916B8(&qword_256EA1918);
  sub_23F6AF984();
  sub_23FB2F110();
  sub_23F693E04();
  sub_23F6B68CC();
  sub_23F693DDC();
}

uint64_t QueryDecorationPrePlannerResult.description.getter()
{
  sub_23FB2F7AC();
  sub_23F87975C();
  sub_23F6B58C8();
  sub_23F6B4EEC((uint64_t)&unk_256EA1E40);
  sub_23F877A50();
  sub_23F6B68F8();
  sub_23F6B5AB0();
  sub_23F6B5A54();
  sub_23FB2F7AC();
  sub_23F87975C();
  sub_23F879A20();
  sub_23F878C38();
  sub_23F77DCD4();
  sub_23F8787BC();
  sub_23F6B644C();
  sub_23F6B5A54();
  sub_23F6B6254();
  sub_23F8787BC();
  sub_23F6B5AB0();
  sub_23F6B644C();
  sub_23F876D94();
  sub_23F878CC4();
  sub_23FB2F8FC();
  sub_23F6B5A54();
  sub_23F6B6254();
  sub_23F750320();
  sub_23F6B5AB0();
  sub_23F6B5908();
  return 0x656D65746174537BLL;
}

void Session.Event.Payload.eventTypeString.getter()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  char *v3;
  uint64_t v4;

  type metadata accessor for Session.Event.Payload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F876E18(v1, v2, v4);
  v3 = (char *)sub_23F7FF4E4 + 4 * word_23FB630BE[sub_23F7A02B4()];
  __asm { BR              X10 }
}

void sub_23F7FF4E4(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  sub_23F694C84();
}

void sub_23F7FFAE8()
{
  JUMPOUT(0x23F7FFAD8);
}

void Session.Event.Payload.payloadType.getter()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  char *v3;
  uint64_t v4;

  type metadata accessor for Session.Event.Payload(0);
  sub_23F693E20();
  MEMORY[0x24BDAC7A8](v0);
  sub_23F876E18(v1, v2, v4);
  v3 = (char *)sub_23F7FFB70 + 4 * byte_23FB63120[sub_23F7A02B4()];
  __asm { BR              X11 }
}

void sub_23F7FFB70(uint64_t a1)
{
  _BYTE *v1;

  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  *v1 = 31;
  sub_23F694C84();
}

void sub_23F7FFB90(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFBA4(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFBB8(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFBCC(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFBE0(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFBF4(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC08(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC1C(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC30(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC44(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC58(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC6C(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC80(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC94()
{
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFC9C(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFCB0(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFCC4(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFCD8(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFCEC(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD00(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD14(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD28(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD3C(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD50(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD64(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD78(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD8C()
{
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFD94(uint64_t a1)
{
  sub_23F8766E0(a1, type metadata accessor for Session.Event.Payload);
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFDA8()
{
  JUMPOUT(0x23F7FFB80);
}

void sub_23F7FFDB0()
{
  JUMPOUT(0x23F7FFB80);
}

uint64_t sub_23F7FFDB8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v8;

  v2 = a1 == 0x647261646E617473 && a2 == 0xE800000000000000;
  if (v2 || (sub_23FB2FB78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
    if (v6 || (sub_23FB2FB78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x79726F7369766461 && a2 == 0xE800000000000000;
      if (v7 || (sub_23FB2FB78() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000014 && a2 == 0x800000023FB345B0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = sub_23FB2FB78();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

