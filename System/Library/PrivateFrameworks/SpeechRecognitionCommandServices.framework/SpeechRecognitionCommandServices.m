void sub_22BD93F60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD94140(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD9419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_22BD94D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22BD94FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x22E2FB328](v4, 0x60C4044C4A2DFLL);

  _Unwind_Resume(a1);
}

void sub_22BD95718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_22BD95AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void sub_22BD95CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CMDPFst *a15)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  std::unique_ptr<CMDPFst>::reset[abi:ne180100](&a15, 0);
  _Unwind_Resume(a1);
}

void sub_22BD95EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,CMDPFst *a22)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  std::unique_ptr<CMDPFst>::reset[abi:ne180100](&a22, 0);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F6524A0, MEMORY[0x24BEDAAF0]);
}

void sub_22BD96160(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

CMDPNormalizer *std::unique_ptr<CMDPNormalizer>::reset[abi:ne180100](CMDPNormalizer **a1, CMDPNormalizer *a2)
{
  CMDPNormalizer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CMDPNormalizer::~CMDPNormalizer(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

CMDPFst *std::unique_ptr<CMDPFst>::reset[abi:ne180100](CMDPFst **a1, CMDPFst *a2)
{
  CMDPFst *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CMDPFst::~CMDPFst(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

void CMDPFst::~CMDPFst(CMDPFst *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__construct_one_at_end[abi:ne180100]<std::string const&,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(a1 + 8) = v5 + 32;
}

void sub_22BD965C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(uint64_t *a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v18[2];
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  v19 = v13;
  v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v19;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)&v12[32 * v5 + 24] = v15;
  v19 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer(v18);
  return v16;
}

void sub_22BD966D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7 - 32;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v10 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(v8 + 24) = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100](v4, i - 32);
  }
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__emplace_back_slow_path<char const*&,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(uint64_t *a1, char **a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>>(v9, v11);
  else
    v12 = 0;
  v17 = v12;
  v18 = &v12[32 * v5];
  v19 = v18;
  v20 = &v12[32 * v11];
  v13 = std::string::basic_string[abi:ne180100]<0>(v18, *a2);
  v14 = *a3;
  *a3 = 0;
  v13[3] = v14;
  v19 += 32;
  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer(&v17);
  return v15;
}

void sub_22BD96B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_22BD97068(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD97450(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD9762C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD97754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD97980(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD97C2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD97E84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD99218(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD99834(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD99F78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD9E898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_22BD9EF38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD9F200(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BD9F3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_22BD9F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_22BD9F708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x22E2FB328](v3, 0x60C4044C4A2DFLL);

  _Unwind_Resume(a1);
}

void sub_22BD9FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  uint64_t v15;
  void *v16;
  va_list va;

  va_start(va, a14);
  std::vector<std::vector<std::pair<std::string,std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_22BDA01A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_22BDA05E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  a25 = a10;
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unique_ptr<CMDPToken>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_22BDA0800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_22BDA093C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_22BDA0DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{

  a46 = a11;
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);

  _Unwind_Resume(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F6524A8, MEMORY[0x24BEDAB00]);
}

void sub_22BDA1028(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<CMDPToken>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x22E2FB328);
  }
}

void sub_22BDA139C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x1012C408B718000);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<CMDPToken>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)v1, v3);
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<CMDPToken>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<CMDPToken>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<CMDPToken>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<CMDPToken>::operator()[abi:ne180100](i - 8, v5);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::vector<std::vector<std::pair<std::string,std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::vector<std::pair<std::string,std::string>>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<CMDPToken>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<CMDPToken>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

_BYTE *OUTLINED_FUNCTION_1(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

uint64_t AllValidCommandParameterIdentifiers()
{
  if (AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup != -1)
    dispatch_once(&AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup, &__block_literal_global_2);
  return AllValidCommandParameterIdentifiers_sValidBuiltInLMIdentifierSet;
}

BOOL IsValidCommandParameterIdentifier(uint64_t a1)
{
  void *v2;
  _BOOL8 v3;

  if (AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup != -1)
    dispatch_once(&AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup, &__block_literal_global_2);
  objc_msgSend((id)AllValidCommandParameterIdentifiers_sValidBuiltInLMIdentifierSet, "member:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

void sub_22BDA3EE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BDA43D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id SRCSLogGeneral()
{
  if (SRCSLogGeneral_onceToken != -1)
    dispatch_once(&SRCSLogGeneral_onceToken, &__block_literal_global_5);
  return (id)SRCSLogGeneral_sLogGeneral;
}

void sub_22BDA6DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_22BDA6FA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22BDA7C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 184), 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t yyparse()
{
  int v0;
  _OWORD *v1;
  unint64_t v2;
  _BYTE *v3;
  char *v4;
  _OWORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  const __CFDictionary *v18;
  __CFArray *v19;
  const __CFString *v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  const void *v23;
  const void *v24;
  __CFDictionary *CommandParseDictionary;
  const __CFString *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  void *value;
  _OWORD v39[100];
  _BYTE v40[400];
  char v41[128];
  char buffer[5000];
  uint64_t v43;

  MEMORY[0x24BDAC7A8]();
  v0 = 0;
  v43 = *MEMORY[0x24BDAC8D0];
  v1 = v39;
  v2 = 200;
  memset(v39, 0, 512);
  yynerrs = 0;
  yychar = -2;
  value = (void *)*MEMORY[0x24BDBD270];
  v3 = v40;
  v4 = v40;
  v5 = v39;
  while (1)
  {
    *(_WORD *)v4 = v0;
    if (&v3[2 * v2 - 2] <= v4)
      break;
LABEL_12:
    if (((0xF4C2uLL >> v0) & 1) != 0)
      goto LABEL_27;
    v10 = yypact[v0];
    v11 = yychar;
    if (yychar == -2)
    {
      v11 = yylex();
      yychar = v11;
    }
    if (v11 <= 0)
    {
      v12 = 0;
      yychar = 0;
    }
    else
    {
      v12 = v11 > 0x103 ? 2 : yytranslate[v11];
    }
    v13 = (v12 + v10);
    if (v13 > 0x16 || v12 != yycheck[v13])
    {
LABEL_27:
      if (((0xB1DuLL >> v0) & 1) == 0)
      {
        v14 = yydefact[v0];
        v15 = yyr2[v14];
        switch(v0)
        {
          case 1:
            CommandParseDictionary = CreateCommandParseDictionary();
            if (CommandParseDictionary && *(_QWORD *)v5)
            {
              v16 = CommandParseDictionary;
              CFDictionaryAddValue(CommandParseDictionary, kSRCSCommandParseDictionaryKeyText[0], *(const void **)v5);
              goto LABEL_56;
            }
            bzero(buffer, 0x1388uLL);
            v26 = CFSTR("Nil parameter in '| string'");
            goto LABEL_64;
          case 5:
          case 18:
          case 23:
          case 24:
            v17 = CreateCommandParseDictionary();
            if (v17)
            {
              v16 = v17;
              if (*(_QWORD *)v5)
              {
                CFRelease(*(CFTypeRef *)v5);
                sResultDictionary = (uint64_t)v16;
                break;
              }
            }
            bzero(buffer, 0x1388uLL);
            v26 = CFSTR("Nil parameter in ': spokenCommandStringComponent'");
            goto LABEL_64;
          case 6:
          case 7:
            v16 = *(__CFDictionary **)v5;
            break;
          case 12:
            if (!*((_QWORD *)v5 - 1) || !*(_QWORD *)v5)
            {
              bzero(buffer, 0x1388uLL);
              v26 = CFSTR("Nil parameter in '| spokenCommandStringComponent optionalComponent'");
              goto LABEL_64;
            }
            v16 = CreateCommandParseDictionary();
            if (v16)
              goto LABEL_47;
            bzero(buffer, 0x1388uLL);
            v20 = CFSTR("Nil dictionary in '| spokenCommandStringComponent optionalComponent'");
            goto LABEL_46;
          case 13:
            if (!*((_QWORD *)v5 - 1) || !*(_QWORD *)v5)
            {
              bzero(buffer, 0x1388uLL);
              v26 = CFSTR("Nil parameter in '| spokenCommandStringComponent stringOrIdentifierComponent'");
              goto LABEL_64;
            }
            v16 = CreateCommandParseDictionary();
            if (!v16)
            {
              bzero(buffer, 0x1388uLL);
              v20 = CFSTR("Nil dictionary in '| spokenCommandStringComponent stringOrIdentifierComponent'");
LABEL_46:
              CFStringGetCString(v20, buffer, 5000, 0x8000100u);
              yyerror(buffer);
            }
LABEL_47:
            CFRelease(*((CFTypeRef *)v5 - 1));
LABEL_56:
            v24 = *(const void **)v5;
            goto LABEL_57;
          case 14:
            v21 = (__CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v5 - 1), kSRCSCommandParseDictionaryKeyAttributes[0]);
            if (v21)
            {
              CFDictionaryAddValue(v21, kSRCSCommandParseAttributeOptional[0], value);
            }
            else
            {
              bzero(buffer, 0x1388uLL);
              CFStringGetCString(CFSTR("Nil attribute in ': '[' spokenCommandStringComponent ']''"), buffer, 5000, 0x8000100u);
              yyerror(buffer);
            }
            v16 = (__CFDictionary *)*((_QWORD *)v5 - 1);
            break;
          case 15:
            v22 = CreateCommandParseDictionary();
            if (!v22 || (v23 = (const void *)*((_QWORD *)v5 - 1)) == 0)
            {
              bzero(buffer, 0x1388uLL);
              v26 = CFSTR("Nil parameter in '| '{' kParameterToken '}''");
              goto LABEL_64;
            }
            v16 = v22;
            CFDictionaryAddValue(v22, kSRCSCommandParseDictionaryKeyIdentifier[0], v23);
            CFDictionaryAddValue(v16, kSRCSCommandParseDictionaryKeyIsBuiltInIdentifier[0], value);
            v24 = (const void *)*((_QWORD *)v5 - 1);
LABEL_57:
            CFRelease(v24);
            break;
          case 16:
          case 20:
          case 25:
          case 26:
            v18 = (const __CFDictionary *)*((_QWORD *)v5 - 2);
            if (v18 && *(_QWORD *)v5)
            {
              v19 = (__CFArray *)CFDictionaryGetValue(v18, kSRCSCommandParseDictionaryKeyChildren[0]);
              if (v19)
              {
                CFArrayAppendValue(v19, *(const void **)v5);
              }
              else
              {
                bzero(buffer, 0x1388uLL);
                CFStringGetCString(CFSTR("Nil children in '| spokenCommandList '|' spokenCommandStringComponent'"), buffer, 5000, 0x8000100u);
                yyerror(buffer);
              }
              CFRelease(*(CFTypeRef *)v5);
              v16 = (__CFDictionary *)*((_QWORD *)v5 - 2);
            }
            else
            {
              bzero(buffer, 0x1388uLL);
              v26 = CFSTR("Nil parameter in '| spokenCommandList '|' spokenCommandStringComponent'");
LABEL_64:
              CFStringGetCString(v26, buffer, 5000, 0x8000100u);
              yyerror(buffer);
              v16 = 0;
            }
            break;
          default:
            v16 = (__CFDictionary *)*((_QWORD *)v5 + 1 - v15);
            break;
        }
        v27 = (char *)v5 - 8 * v15;
        v4 -= 2 * v15;
        *((_QWORD *)v27 + 1) = v16;
        v5 = v27 + 8;
        v28 = yyr1[v14] - 12;
        v29 = (*(__int16 *)v4 + yypgoto[v28]);
        if (v29 <= 0x16 && *(unsigned __int16 *)v4 == (unsigned __int16)yycheck[v29])
          v0 = yytable[v29];
        else
          v0 = yydefgoto[v28];
        goto LABEL_73;
      }
LABEL_75:
      ++yynerrs;
      v31 = yysyntax_error(0, v0, yychar);
      v32 = v31;
      v30 = v41;
      if ((unint64_t)v31 < 0x81)
      {
        v35 = 128;
      }
      else
      {
        if (v31 < 0)
          v33 = -1;
        else
          v33 = 2 * v31;
        v34 = (char *)malloc_type_malloc(v33, 0xDEBF358uLL);
        if (v34)
          v30 = v34;
        v35 = 128;
        if (v34)
          v35 = v33;
      }
      if (v32 - 1 < v35)
      {
        yysyntax_error(v30, v0, yychar);
        yyerror(v30);
LABEL_89:
        v36 = 1;
        goto LABEL_90;
      }
      yyerror("syntax error");
      if (!v32)
        goto LABEL_89;
LABEL_88:
      yyerror("memory exhausted");
      v36 = 2;
LABEL_90:
      v7 = v3;
      goto LABEL_91;
    }
    if (((0x208440uLL >> (v12 + v10)) & 1) != 0)
      goto LABEL_75;
    if ((_DWORD)v13 == 2)
    {
      v36 = 0;
      v30 = v41;
      goto LABEL_90;
    }
    if (v11 >= 1)
      yychar = -2;
    v0 = yytable[v13];
    *((_QWORD *)v5 + 1) = yylval;
    v5 = (_OWORD *)((char *)v5 + 8);
LABEL_73:
    v4 += 2;
  }
  if (v2 > 0x7CF
    || (2 * v2 >= 0x7D0 ? (v2 = 2000) : (v2 *= 2), (v6 = malloc_type_malloc(10 * v2 + 7, 0x11AE56D4uLL)) == 0))
  {
    v30 = v41;
    goto LABEL_88;
  }
  v7 = v6;
  v8 = (v4 - v3) >> 1;
  v9 = v8 + 1;
  memcpy(v6, v3, 2 * (v8 + 1));
  memcpy(&v7[(2 * v2 + 7) & 0xFFFFFFFFFFFFFFF8], v1, 8 * (v8 + 1));
  if (v3 != v40)
    free(v3);
  if ((uint64_t)v2 > v9)
  {
    v4 = &v7[2 * v8];
    v5 = &v7[8 * v9 - 8 + ((2 * v2 + 7) & 0xFFFFFFFFFFFFFFF8)];
    v3 = v7;
    v1 = &v7[(2 * v2 + 7) & 0xFFFFFFFFFFFFFFF8];
    goto LABEL_12;
  }
  v36 = 1;
  v30 = v41;
LABEL_91:
  if (v7 != v40)
    free(v7);
  if (v30 != v41)
    free(v30);
  return v36;
}

__CFDictionary *CreateCommandParseDictionary()
{
  int v0;
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  int v5;
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CFMutableArrayRef v10;
  __CFArray *v11;
  const __CFDictionary *Value;
  BOOL v13;
  const __CFDictionary *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  uint64_t Count;
  char v18;
  const __CFArray *v19;
  const __CFArray *v20;
  uint64_t v21;
  char v22;
  char v24[5000];
  uint64_t v25;
  CFRange v26;
  CFRange v27;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v25 = *MEMORY[0x24BDAC8D0];
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v8)
    {
      v9 = v8;
      CFDictionaryAddValue(Mutable, kSRCSCommandParseDictionaryKeyAttributes[0], v8);
      CFRelease(v9);
      if (v5)
        CFDictionaryAddValue(v9, kSRCSCommandParseAttributePath[0], (const void *)*MEMORY[0x24BDBD270]);
    }
    else
    {
      bzero(v24, 0x1388uLL);
      CFStringGetCString(CFSTR("Nil attributes for in 'CreateCommandParseDictionary()'"), v24, 5000, 0x8000100u);
      yyerror(v24);
    }
    v10 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
    if (v10)
    {
      v11 = v10;
      if (v4)
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(v4, kSRCSCommandParseDictionaryKeyAttributes[0]);
        if (Value)
        {
          v13 = CFDictionaryContainsKey(Value, kSRCSCommandParseAttributeOptional[0]) != 0;
          if (!v2)
            goto LABEL_17;
          goto LABEL_14;
        }
        bzero(v24, 0x1388uLL);
        CFStringGetCString(CFSTR("Nil attribute for child 1 in 'CreateCommandParseDictionary()'"), v24, 5000, 0x8000100u);
        yyerror(v24);
      }
      v13 = 0;
      if (!v2)
        goto LABEL_17;
LABEL_14:
      v14 = (const __CFDictionary *)CFDictionaryGetValue(v2, kSRCSCommandParseDictionaryKeyAttributes[0]);
      if (v14)
      {
        v13 = CFDictionaryContainsKey(v14, kSRCSCommandParseAttributeOptional[0]) != 0;
      }
      else
      {
        bzero(v24, 0x1388uLL);
        CFStringGetCString(CFSTR("Nil attribute for child 2 in 'CreateCommandParseDictionary()'"), v24, 5000, 0x8000100u);
        yyerror(v24);
      }
LABEL_17:
      if (v4)
      {
        v15 = (const __CFArray *)CFDictionaryGetValue(v4, kSRCSCommandParseDictionaryKeyChildren[0]);
        if (v15)
        {
          v16 = v15;
          Count = CFArrayGetCount(v15);
          if (v2)
            v18 = v13;
          else
            v18 = 1;
          if (Count >= 1 && (v18 & 1) == 0)
          {
            v26.length = Count;
            v26.location = 0;
            CFArrayAppendArray(v11, v16, v26);
            goto LABEL_27;
          }
          CFArrayAppendValue(v11, v4);
          if (!v2)
          {
LABEL_36:
            CFDictionaryAddValue(Mutable, kSRCSCommandParseDictionaryKeyChildren[0], v11);
            CFRelease(v11);
            return Mutable;
          }
LABEL_27:
          v19 = (const __CFArray *)CFDictionaryGetValue(v2, kSRCSCommandParseDictionaryKeyChildren[0]);
          if (v19)
          {
            v20 = v19;
            v21 = CFArrayGetCount(v19);
            v22 = v21 < 1 || v13;
            if ((v22 & 1) != 0)
            {
              CFArrayAppendValue(v11, v2);
            }
            else
            {
              v27.length = v21;
              v27.location = 0;
              CFArrayAppendArray(v11, v20, v27);
            }
          }
          else
          {
            bzero(v24, 0x1388uLL);
            CFStringGetCString(CFSTR("Nil children 2 in 'CreateCommandParseDictionary()'"), v24, 5000, 0x8000100u);
            yyerror(v24);
          }
          goto LABEL_36;
        }
        bzero(v24, 0x1388uLL);
        CFStringGetCString(CFSTR("Nil children 1 in 'CreateCommandParseDictionary()'"), v24, 5000, 0x8000100u);
        yyerror(v24);
      }
      if (!v2)
        goto LABEL_36;
      goto LABEL_27;
    }
    bzero(v24, 0x1388uLL);
    CFStringGetCString(CFSTR("Nil children in 'CreateCommandParseDictionary()'"), v24, 5000, 0x8000100u);
    yyerror(v24);
  }
  return Mutable;
}

uint64_t yysyntax_error(_BYTE *a1, int a2, unsigned int a3)
{
  unint64_t v3;
  char v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  int v28;
  char *i;
  int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36[64];
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (((0x10B3DuLL >> a2) & 1) != 0)
  {
    v5 = a2;
    v6 = yypact[a2];
    if (a3 > 0x103)
      v7 = 2;
    else
      v7 = yytranslate[a3];
    v8 = yytname[v7];
    v9 = yytnamerr(0, v8);
    v39 = 0u;
    v38 = 0u;
    v37 = v8;
    strcpy(v36, "syntax error, unexpected %s");
    if (((0xF6C2uLL >> v5) & 1) != 0)
      v10 = -v6;
    else
      v10 = 0;
    if (23 - v6 >= 12)
      v11 = 12;
    else
      v11 = 23 - v6;
    if (v10 < v11)
    {
      v12 = 0;
      v13 = &v36[27];
      v14 = v10;
      v15 = v6;
      v16 = v11;
      v17 = ", expecting %s";
      v18 = 1;
      v35 = v9;
      v19 = v9;
      while (1)
      {
        if (v14 != 1 && (_DWORD)v14 == yycheck[v14 + v15])
        {
          if (v18 == 5)
          {
            v36[27] = 0;
            v18 = 1;
            v19 = v35;
            goto LABEL_27;
          }
          v20 = yytname[v14];
          (&v37)[v18] = v20;
          v21 = yytnamerr(0, v20);
          v22 = __CFADD__(v21, v19);
          v19 += v21;
          v23 = v22;
          --v13;
          do
          {
            v24 = *(unsigned __int8 *)v17++;
            *++v13 = v24;
          }
          while (v24);
          ++v18;
          v12 |= v23;
          v17 = " or %s";
        }
        if (++v14 == v16)
          goto LABEL_27;
      }
    }
    v12 = 0;
    v18 = 1;
    v19 = v9;
LABEL_27:
    v25 = 0;
    while (v36[v25++])
      ;
    v3 = v19 + v25 - 1;
    if (v12 | (v3 < v19))
      return -1;
    if (!a1)
      return v3;
    v28 = 0;
    for (i = v36; ; i += v33)
    {
      v30 = *i;
      *a1 = v30;
      if (v30 != 37)
        break;
      if (i[1] != 115 || v28 >= v18)
        goto LABEL_41;
      v34 = v28 + 1;
      v32 = yytnamerr((uint64_t)a1, (&v37)[v28]);
      v33 = 2;
      v28 = v34;
LABEL_43:
      a1 += v32;
    }
    if (!v30)
      return v3;
LABEL_41:
    v32 = 1;
    v33 = 1;
    goto LABEL_43;
  }
  return 0;
}

CFStringRef yyerror(char *cStr)
{
  CFStringRef result;

  sLastErrorLineNumber = 1;
  if (sLastErrorDescriptionString)
    CFRelease((CFTypeRef)sLastErrorDescriptionString);
  result = CFStringCreateWithCString(0, cStr, 0x8000100u);
  sLastErrorDescriptionString = (uint64_t)result;
  return result;
}

uint64_t CreateMutableDictionaryFromSpokenCommandString(const __CFString *a1, _QWORD *a2)
{
  const void *v3;

  sResultDictionary = 0;
  sCurSpokenCommandStringOffset = 0;
  sSpokenCommandString = (uint64_t)a1;
  sSpokenCommandStringLength = CFStringGetLength(a1);
  sLastErrorLineNumber = 0;
  if (sLastErrorDescriptionString)
  {
    CFRelease((CFTypeRef)sLastErrorDescriptionString);
    sLastErrorDescriptionString = 0;
  }
  yyparse();
  if (a2 && sLastErrorDescriptionString && CFStringGetLength((CFStringRef)sLastErrorDescriptionString) >= 1)
  {
    v3 = (const void *)sLastErrorDescriptionString;
    *a2 = sLastErrorDescriptionString;
    CFRetain(v3);
  }
  return sResultDictionary;
}

uint64_t yylex()
{
  int CharacterAtIndex;
  UniChar v1;
  CFIndex v2;
  uint64_t v3;
  CFIndex v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFStringRef v7;
  const __CFString *v8;
  CFRange v10;

  if (!sReservedCharacterSet)
  {
    sReservedCharacterSet = (uint64_t)CFCharacterSetCreateMutable(0);
    CFCharacterSetAddCharactersInString((CFMutableCharacterSetRef)sReservedCharacterSet, CFSTR("[]{}|"));
  }
  if (sCurSpokenCommandStringOffset >= sSpokenCommandStringLength)
    return 0;
  CharacterAtIndex = CFStringGetCharacterAtIndex((CFStringRef)sSpokenCommandString, sCurSpokenCommandStringOffset);
  if (!CharacterAtIndex)
    return 0;
  v1 = CharacterAtIndex;
  v2 = sCurSpokenCommandStringOffset;
  if (CFCharacterSetIsCharacterMember((CFCharacterSetRef)sReservedCharacterSet, CharacterAtIndex))
  {
    ++sCurSpokenCommandStringOffset;
    return (char)v1;
  }
  while (1)
  {
    v4 = sCurSpokenCommandStringOffset + 1;
    sCurSpokenCommandStringOffset = v4;
    v5 = sSpokenCommandStringLength;
    if (v4 < sSpokenCommandStringLength)
    {
      v1 = CFStringGetCharacterAtIndex((CFStringRef)sSpokenCommandString, v4);
      v4 = sCurSpokenCommandStringOffset;
      v5 = sSpokenCommandStringLength;
    }
    if (v4 >= v5)
      break;
    if (CFCharacterSetIsCharacterMember((CFCharacterSetRef)sReservedCharacterSet, v1))
    {
      v4 = sCurSpokenCommandStringOffset;
      break;
    }
  }
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v10.length = v4 - v2;
  v10.location = v2;
  v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFStringRef)sSpokenCommandString, v10);
  if (!v7)
    return 0;
  v8 = v7;
  yylval = (uint64_t)CFStringCreateMutable(v6, 0);
  CFStringAppend((CFMutableStringRef)yylval, v8);
  if (IsValidCommandParameterIdentifier((uint64_t)v8))
    v3 = 258;
  else
    v3 = 259;
  CFRelease(v8);
  if (sLastErrorSymbolString)
  {
    CFRelease((CFTypeRef)sLastErrorSymbolString);
    sLastErrorSymbolString = 0;
  }
  if (yylval)
    sLastErrorSymbolString = (uint64_t)CFStringCreateCopy(0, (CFStringRef)yylval);
  return v3;
}

uint64_t YYLastErrorLineNumber()
{
  return sLastErrorLineNumber;
}

uint64_t YYLastErrorSymbolString()
{
  return sLastErrorSymbolString;
}

uint64_t yytnamerr(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *i;
  int v5;
  int v6;
  char v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  int v11;

  if (*a2 != 34)
  {
LABEL_13:
    v10 = 0;
    if (a1)
    {
      do
      {
        v11 = a2[v10];
        *(_BYTE *)(a1 + v10++) = v11;
      }
      while (v11);
    }
    else
    {
      while (a2[v10++])
        ;
    }
    return v10 - 1;
  }
  v2 = 0;
  v3 = a2;
  for (i = a2; ; v3 = i)
  {
    v6 = (char)*++i;
    v5 = v6;
    v7 = v6;
    if (v6 > 91)
    {
      if (v5 == 92)
      {
        v9 = v3[2];
        v8 = v3 + 2;
        if (v9 != 92)
          goto LABEL_13;
        v7 = 92;
        i = v8;
      }
      goto LABEL_10;
    }
    if (v5 == 34)
      break;
    if (v5 == 39 || v5 == 44)
      goto LABEL_13;
LABEL_10:
    if (a1)
      *(_BYTE *)(a1 + v2) = v7;
    ++v2;
  }
  if (a1)
    *(_BYTE *)(a1 + v2) = 0;
  return v2;
}

void CMDPFst::CMDPFst(CMDPFst *this, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  *(_BYTE *)this = a2;
  v3 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(v3);
  *((_QWORD *)this + 1) = v3;
  v4 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "isyms");
  *v4 = &off_24F6568C8;
  std::allocate_shared[abi:ne180100]<fst::internal::SymbolTableImpl,std::allocator<fst::internal::SymbolTableImpl>,std::string const&,void>((__int128 *)__p, v4 + 1);
  *((_QWORD *)this + 2) = v4;
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "osyms");
  *v5 = &off_24F6568C8;
  std::allocate_shared[abi:ne180100]<fst::internal::SymbolTableImpl,std::allocator<fst::internal::SymbolTableImpl>,std::string const&,void>((__int128 *)__p, v5 + 1);
  *((_QWORD *)this + 3) = v5;
  if (v10 < 0)
    operator delete(__p[0]);
  v6 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "states");
  *v6 = &off_24F6568C8;
  std::allocate_shared[abi:ne180100]<fst::internal::SymbolTableImpl,std::allocator<fst::internal::SymbolTableImpl>,std::string const&,void>((__int128 *)__p, v6 + 1);
  *((_QWORD *)this + 4) = v6;
  if (v10 < 0)
    operator delete(__p[0]);
  v7 = *((_QWORD *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  v8 = *((_QWORD *)this + 3);
  std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_22BDA9388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a14 < 0)
    operator delete(__p);
  v16 = v14[4];
  v14[4] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v14[3];
  v14[3] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v14[2];
  v14[2] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v14[1];
  v14[1] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(exception_object);
}

void sub_22BDA94D4()
{
  uint64_t v0;

  MEMORY[0x22E2FB328](v0, 0xA1C409BE6959DLL);
  JUMPOUT(0x22BDA94CCLL);
}

void CMDPFst::setStart(CMDPFst *this, int __val)
{
  uint64_t v3;
  std::string v4;

  std::to_string(&v4, __val);
  v3 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4), &v4);
  if (v3 == -1)
  {
    v3 = (*(int (**)(_QWORD))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1));
    (*(void (**)(_QWORD, std::string *, uint64_t))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), &v4, v3);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), v3);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_22BDA9598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CMDPFst::setFinal(CMDPFst *this, int __val, double a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  std::string v9;

  std::to_string(&v9, __val);
  v5 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4), &v9);
  if (v5 == -1)
  {
    v5 = (*(int (**)(_QWORD))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1));
    (*(void (**)(_QWORD, std::string *, uint64_t))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), &v9, v5);
  }
  v6 = *((_QWORD *)this + 1);
  v7 = a3;
  v8 = v7;
  (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)v6 + 160))(v6, v5, &v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_22BDA966C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CMDPFst::setSymbols(CMDPFst *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), *((_QWORD *)this + 2));
  v2 = 24;
  if (!*(_BYTE *)this)
    v2 = 16;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 264))(*((_QWORD *)this + 1), *(_QWORD *)((char *)this + v2));
}

void CMDPFst::addArc(uint64_t a1, int __val, int a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  _DWORD v18[4];
  std::string v19;
  std::string v20;

  std::to_string(&v20, __val);
  v11 = (*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), &v20);
  if (v11 == -1)
  {
    v11 = (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
    (*(void (**)(_QWORD, std::string *, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), &v20, v11);
  }
  std::to_string(&v19, a3);
  v12 = (*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), &v19);
  LODWORD(v13) = v12;
  if (v12 == -1)
  {
    v13 = (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
    (*(void (**)(_QWORD, std::string *, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), &v19, v13);
  }
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a4);
  v15 = v14;
  if (*(_BYTE *)a1)
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a5);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = a6;
  v18[0] = v15;
  v18[1] = v14;
  *(float *)&v18[2] = v17;
  v18[3] = v13;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v16 + 184))(v16, v11, v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_22BDA9858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void CMDPFst::addArc(uint64_t a1, int a2, int a3, uint64_t a4, int __val, double a6)
{
  std::string v11;

  std::to_string(&v11, __val);
  CMDPFst::addArc(a1, a2, a3, a4, (uint64_t)&v11, a6);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_22BDA9918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cmdp_fst_util::compose(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  fst *v9;
  const fst::SymbolTable *v10;
  BOOL *v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  void *__p[2];
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  if (a1 && a2)
  {
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0);
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    v30 = 0;
    v9 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7);
    v10 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    v12 = fst::MergeSymbolTable(v9, v10, (const fst::SymbolTable *)&v30, v11);
    std::string::basic_string[abi:ne180100]<0>(__p, "<rho>");
    v13 = (*(uint64_t (**)(_QWORD *, void **))(*v12 + 80))(v12, __p);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "<sigma>");
    v14 = (*(uint64_t (**)(_QWORD *, void **))(*v12 + 80))(v12, __p);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "<phi>");
    v15 = (*(uint64_t (**)(_QWORD *, void **))(*v12 + 80))(v12, __p);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7);
    fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v7, v16, 0, 1, v17, (uint64_t)v12, 1);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
    fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v8, v18, (uint64_t)v12, 1, v19, 0, 1);
    if (a3)
    {
      fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v7);
      fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v8);
    }
    LOBYTE(__p[0]) = FLAGS_fst_default_cache_gc;
    v28 = 0;
    v29 = 0;
    __p[1] = (void *)FLAGS_fst_default_cache_gc_limit;
    v20 = (_QWORD *)operator new();
    cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SpecialMatcher(v20, v7, 2, v13, v14, v15, 0);
    v26 = v20;
    v21 = (_QWORD *)operator new();
    cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SpecialMatcher(v21, v8, 1, v13, v14, v15, 0);
    v27 = v21;
    v22 = operator new();
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase1<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(v7, v8, (uint64_t)__p, &v31);
    *(_OWORD *)(v22 + 8) = v31;
    *(_QWORD *)v22 = &off_24F6539A0;
    *a4 = 0;
    v23 = (_QWORD *)operator new();
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(v23, v22);
    *a4 = v23;
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    v24 = CMDPOSLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_22BD8C000, v24, OS_LOG_TYPE_ERROR, "cmdp_fst_util::composeFst : null FSTs", (uint8_t *)__p, 2u);
    }
    *a4 = 0;
  }
}

void sub_22BDA9CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  uint64_t v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22BDA9E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  uint64_t v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22BDA9EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  char *v19;
  char *v20;
  uint64_t v21[7];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25[3];
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  memset(v25, 0, sizeof(v25));
  v24 = 0;
  v21[0] = 0;
  v21[1] = (uint64_t)&v26;
  v21[2] = (uint64_t)v25;
  v21[3] = (uint64_t)&v24;
  v22 = 0u;
  v23 = 0u;
  fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, v21, 0);
  __p = 0;
  v19 = 0;
  v20 = 0;
  v2 = v27;
  if (v27)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v26[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v25[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v20)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v9 = v20 - (_BYTE *)__p;
          if ((v20 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v20, v10);
            v6 = (char *)__p;
            v3 = v19;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v19 = v5;
          v20 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v19 = v5;
        v2 = v27;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  v14 = *((_QWORD *)&v23 + 1);
  *((_QWORD *)&v23 + 1) = 0;
  if (v14)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v23 + 8, v14);
  v15 = (void **)v23;
  *(_QWORD *)&v23 = 0;
  if (v15)
    std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v23, v15);
  v16 = *((_QWORD *)&v22 + 1);
  *((_QWORD *)&v22 + 1) = 0;
  if (v16)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v22 + 8, v16);
  v17 = v22;
  *(_QWORD *)&v22 = 0;
  if (v17)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v22, v17);
  if (v25[0])
    operator delete(v25[0]);
  if (v26)
    operator delete(v26);
}

void sub_22BDAA114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  uint64_t v25;
  void *v27;

  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a13);
  if (__p)
    operator delete(__p);
  v27 = *(void **)(v25 - 104);
  if (v27)
    operator delete(v27);
  _Unwind_Resume(a1);
}

void cmdp_fst_util::replace(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  fst *v8;
  uint64_t v9;
  fst *v10;
  const fst::SymbolTable *v11;
  BOOL *v12;
  BOOL *v13;
  const fst::SymbolTable *v14;
  const fst::SymbolTable *v15;
  fst *v16;
  const fst::SymbolTable *v17;
  BOOL *v18;
  const fst::SymbolTable *v19;
  BOOL *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51[8];
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  int v56;
  char v57;
  uint64_t v58;
  void *__p;
  char *v60;
  char *v61;
  char v62;
  __int128 v63;

  v62 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v14 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
      v11 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
      v14 = (const fst::SymbolTable *)fst::MergeSymbolTable(v10, v11, (const fst::SymbolTable *)&v62, v12);
      if (v8)
      {
        v15 = (const fst::SymbolTable *)fst::MergeSymbolTable(v8, v14, (const fst::SymbolTable *)&v62, v13);
        (*(void (**)(fst *))(*(_QWORD *)v8 + 8))(v8);
        (*(void (**)(const fst::SymbolTable *))(*(_QWORD *)v14 + 8))(v14);
        v14 = v15;
      }
      v6 += 32;
      v8 = v14;
    }
    while (v6 != v7);
  }
  v16 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v17 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v19 = (const fst::SymbolTable *)fst::MergeSymbolTable(v16, v17, (const fst::SymbolTable *)&v62, v18);
  v21 = fst::MergeSymbolTable(v14, v19, (const fst::SymbolTable *)&v62, v20);
  (*(void (**)(const fst::SymbolTable *))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(const fst::SymbolTable *))(*(_QWORD *)v19 + 8))(v19);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, v22, (uint64_t)v21, 1, v23, (uint64_t)v21, 1);
  __p = 0;
  v60 = 0;
  v61 = 0;
  v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v61, 1uLL);
  v26 = &v24[16 * v25];
  *(_DWORD *)v24 = -1;
  *((_QWORD *)v24 + 1) = a1;
  v27 = v24 + 16;
  v29 = (char *)__p;
  v28 = v60;
  if (v60 != __p)
  {
    do
    {
      *((_OWORD *)v24 - 1) = *((_OWORD *)v28 - 1);
      v24 -= 16;
      v28 -= 16;
    }
    while (v28 != v29);
    v28 = (char *)__p;
  }
  __p = v24;
  v60 = v27;
  v61 = v26;
  if (v28)
    operator delete(v28);
  v60 = v27;
  v30 = *a2;
  v31 = a2[1];
  if (*a2 != v31)
  {
    do
    {
      v32 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v21 + 80))(v21, v30);
      v33 = *(_QWORD *)(v30 + 24);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 96))(v33);
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 104))(v33);
      fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v33, v34, (uint64_t)v21, 1, v35, (uint64_t)v21, 1);
      v36 = v60;
      if (v60 >= v61)
      {
        v38 = (v60 - (_BYTE *)__p) >> 4;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v40 = v61 - (_BYTE *)__p;
        if ((v61 - (_BYTE *)__p) >> 3 > v39)
          v39 = v40 >> 3;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v41 = 0xFFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v61, v41);
        v44 = &v42[16 * v38];
        *(_DWORD *)v44 = v32;
        *((_QWORD *)v44 + 1) = v33;
        v46 = (char *)__p;
        v45 = v60;
        v47 = v44;
        if (v60 != __p)
        {
          do
          {
            *((_OWORD *)v47 - 1) = *((_OWORD *)v45 - 1);
            v47 -= 16;
            v45 -= 16;
          }
          while (v45 != v46);
          v45 = (char *)__p;
        }
        v37 = v44 + 16;
        __p = v47;
        v60 = v44 + 16;
        v61 = &v42[16 * v43];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_DWORD *)v60 = v32;
        *((_QWORD *)v36 + 1) = v33;
        v37 = v36 + 16;
      }
      v60 = v37;
      v30 += 32;
    }
    while (v30 != v31);
  }
  v51[0] = FLAGS_fst_default_cache_gc;
  v52 = FLAGS_fst_default_cache_gc_limit;
  v53 = 0;
  v54 = 1;
  v55 = xmmword_22BDF36B0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v48 = operator new();
  std::allocate_shared[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::vector<std::pair<int,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>> const&,fst::ReplaceFstOptions<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>((uint64_t *)&__p, (uint64_t)v51, &v63);
  v49 = v63;
  *(_OWORD *)(v48 + 8) = v63;
  *(_QWORD *)v48 = &off_24F654F08;
  *a3 = 0;
  if ((fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CyclicDependencies(v49) & 1) == 0)
  {
    v50 = (_QWORD *)operator new();
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(v50, v48);
    *a3 = v50;
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)v50);
    cmdp_fst_util::rmEpsilon(v50);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  if (__p)
  {
    v60 = (char *)__p;
    operator delete(__p);
  }
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
}

void sub_22BDAA5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  MEMORY[0x22E2FB328](v21, 0xA1C409BE6959DLL);
  *v19 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (__p)
    operator delete(__p);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void cmdp_fst_util::rmEpsilon(void *a1)
{
  int v2;

  if (a1)
  {
    v2 = *fst::TropicalWeightTpl<float>::Zero();
    fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, 1, &v2, -1, 0.000001);
  }
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(void *a1, char a2, int *a3, int a4, float a5)
{
  int v10;
  _BYTE *v11;
  int v12;
  float v13;
  char v14;
  char v15;
  int v16;
  int v17;
  _BYTE v18[72];
  void *v19;
  void *v20;
  uint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v18, (uint64_t)a1, (uint64_t)&v19);
  v10 = *a3;
  v11 = v18;
  v12 = -1;
  v13 = a5;
  v14 = 0;
  v15 = a2;
  v16 = v10;
  v17 = a4;
  fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>(a1, &v19, (uint64_t)&v11);
  fst::AutoQueue<int>::~AutoQueue((uint64_t)v18);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_22BDAA7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  fst::AutoQueue<int>::~AutoQueue((uint64_t)va);
  v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(_QWORD *)(v5 - 80) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

int *fst::TropicalWeightTpl<float>::Zero()
{
  unsigned __int8 v0;

  {
    fst::TropicalWeightTpl<float>::Zero(void)::zero = 2139095040;
  }
  return &fst::TropicalWeightTpl<float>::Zero(void)::zero;
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E2FB1B4](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x22E2FB2D4](a1 + 52);
  return a1;
}

BOOL cmdp_fst_util::isEmpty(uint64_t a1)
{
  return !a1 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == -1;
}

float cmdp_fst_util::shortestDistance(uint64_t a1)
{
  int *v1;
  float result;
  float v3;
  float v4;
  float v5;

  fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, &v3, 0.000001);
  v1 = fst::TropicalWeightTpl<float>::NoWeight();
  result = v3;
  v5 = v3;
  v4 = 0.0;
  v4 = *(float *)v1;
  if (v3 == v4)
    return 3.4028e38;
  return result;
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float v5;
  float *v6;
  unint64_t v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  void *__p;
  float *v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, (char **)&__p, 0, a3);
  if ((char *)v13 - (_BYTE *)__p == 4 && *(float *)__p >= -INFINITY && *(float *)__p <= -INFINITY)
  {
    v5 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    v6 = (float *)__p;
  }
  else
  {
    v5 = *(float *)fst::TropicalWeightTpl<float>::Zero();
    v6 = v13;
    if (v13 != __p)
    {
      v7 = 0;
      v6 = (float *)__p;
      do
      {
        (*(void (**)(float *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 24))(&v11, a1, v7);
        v8 = v6[v7];
        if (v8 == -INFINITY || v11 >= -INFINITY && v11 <= -INFINITY)
        {
          v9 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else
        {
          v10 = v11 == INFINITY || v8 == INFINITY;
          v9 = v8 + v11;
          if (v10)
            v9 = INFINITY;
        }
        if (v5 == -INFINITY || v9 >= -INFINITY && v9 <= -INFINITY)
        {
          v5 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else if (v5 >= v9)
        {
          v5 = v9;
        }
        ++v7;
        v6 = (float *)__p;
      }
      while (v7 < ((char *)v13 - (_BYTE *)__p) >> 2);
    }
  }
  *a2 = v5;
  if (v6)
  {
    v13 = v6;
    operator delete(v6);
  }
}

void sub_22BDAAA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *fst::TropicalWeightTpl<float>::NoWeight()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    fst::TropicalWeightTpl<float>::NoWeight(void)::no_weight = 2143289344;
  }
  return &fst::TropicalWeightTpl<float>::NoWeight(void)::no_weight;
}

void cmdp_fst_util::shortestPath(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  _QWORD v10[3];
  int v11;
  void **v12;
  uint8_t buf[8];
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0)
  {
    v9 = CMDPOSLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_22BD8C000, v9, OS_LOG_TYPE_ERROR, "RXFstOp::copyNBestStrings : invalid n = %d, n should be > 0", buf, 8u);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(buf);
    v11 = *fst::TropicalWeightTpl<float>::Zero();
    fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, (uint64_t)buf, a2, 0, 0, &v11, -1, 0.000001);
    fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t *)buf, 0, 0, 0.00097656);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    memset(v10, 0, sizeof(v10));
    cmdp_fst_util::pathImpl(buf, *(_DWORD *)(v14 + 80), (uint64_t)v10, a3);
    v12 = (void **)v10;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v12);
    *(_QWORD *)buf = off_24F652DA0;
    v6 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22BDAAC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  va_list va1;
  void (**v10)();
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void **);
  v10 = va_arg(va2, void (**)());
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::vector<std::vector<std::pair<std::string,std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v10 = off_24F652DA0;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, int a3, char a4, char a5, int *a6, int a7, float a8)
{
  int v16;
  _BYTE *v17;
  int v18;
  float v19;
  char v20;
  int v21;
  char v22;
  char v23;
  char v24;
  int v25;
  int v26;
  _BYTE v27[72];
  void *v28;
  void *v29;
  uint64_t v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v27, a1, (uint64_t)&v28);
  v16 = *a6;
  v17 = v27;
  v18 = -1;
  v19 = a8;
  v20 = 0;
  v21 = a3;
  v22 = a4;
  v23 = 0;
  v24 = a5;
  v25 = v16;
  v26 = a7;
  fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,(void *)0>(a1, a2, (uint64_t)&v28, (uint64_t)&v17);
  fst::AutoQueue<int>::~AutoQueue((uint64_t)v27);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_22BDAADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  fst::AutoQueue<int>::~AutoQueue((uint64_t)va);
  v9 = *(void **)(v7 - 104);
  if (v9)
  {
    *(_QWORD *)(v7 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t *a1, int a2, int a3, float a4)
{
  int v7;
  int v8;
  void *__p;
  void *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1, (char **)&__p, a2 == 0, a4);
  v8 = *fst::TropicalWeightTpl<float>::One();
  if (a3)
  {
    fst::ComputeTotalWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1, (uint64_t *)&__p, a2 == 0, &v7);
    v8 = v7;
  }
  fst::Reweight<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, (uint64_t *)&__p, a2);
  if (a3)
    fst::RemoveWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1, &v8, a2 == 1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_22BDAAE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cmdp_fst_util::pathImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4)
{
  int *v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *i;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  int v23;
  int v24;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  int v29;
  int v30;
  uint64_t v32;
  char v33;
  void **v34;
  void **v35;
  int v36;
  int v37;
  int v39;
  int v40;
  void *__p[2];
  char v43;
  uint8_t buf[23];
  char v45;
  uint64_t v46;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 24))(&v46);
  v8 = fst::TropicalWeightTpl<float>::Zero();
  *(_DWORD *)buf = v46;
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *v8;
  v9.n128_u32[0] = v46;
  if (*(float *)&v46 != *(float *)__p)
  {
    v10 = a4[1];
    if (v10 >= a4[2])
    {
      v11 = std::vector<std::vector<std::pair<std::string,std::string>>>::__push_back_slow_path<std::vector<std::pair<std::string,std::string>> const&>(a4, (__int128 **)a3);
    }
    else
    {
      std::vector<std::vector<std::pair<std::string,std::string>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string,std::string>> const&>((uint64_t)a4, (__int128 **)a3);
      v11 = v10 + 24;
    }
    a4[1] = v11;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1[1] + 56) + 8 * a2);
  v13 = *(_QWORD *)(v12 + 24);
  v14 = *(_QWORD *)(v12 + 32);
  if (v13 == v14)
    v15 = 0;
  else
    v15 = *(_QWORD *)(v12 + 24);
  if (v13 != v14)
  {
    v16 = (v14 - v13) >> 4;
    if (v16 <= 1)
      v17 = 1;
    else
      v17 = v16;
    for (i = (_DWORD *)(v15 + 12); *i == a2; i += 4)
    {
      v19 = CMDPOSLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_22BD8C000, v19, OS_LOG_TYPE_ERROR, "cmdp_fst_util::unionFst : Loop detected while computing paths", buf, 2u);
      }
LABEL_44:
      if (!--v17)
        return;
    }
    v20 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 96))(a1, v9);
    v21 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
    (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v20 + 72))(buf, v20, (int)*(i - 3));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v21 + 72))(__p, v21, (int)*(i - 2));
    if (v45 < 0)
    {
      if (*(_QWORD *)&buf[8] != 5)
        goto LABEL_26;
      v22 = *(uint8_t **)buf;
    }
    else
    {
      if (v45 != 5)
        goto LABEL_26;
      v22 = buf;
    }
    v23 = *(_DWORD *)v22;
    v24 = v22[4];
    if (v23 != 1936745788 || v24 != 62)
      goto LABEL_26;
    if (v43 < 0)
    {
      if (__p[1] != (void *)5)
        goto LABEL_26;
      v34 = (void **)__p[0];
    }
    else
    {
      if (v43 != 5)
        goto LABEL_26;
      v34 = __p;
    }
    v36 = *(_DWORD *)v34;
    v37 = *((unsigned __int8 *)v34 + 4);
    if (v36 == 1936745788 && v37 == 62)
    {
LABEL_30:
      cmdp_fst_util::pathImpl(a1, *i, a3, a4);
      if (v45 < 0)
      {
        if (*(_QWORD *)&buf[8] != 5)
          goto LABEL_39;
        v28 = *(uint8_t **)buf;
      }
      else
      {
        if (v45 != 5)
          goto LABEL_39;
        v28 = buf;
      }
      v29 = *(_DWORD *)v28;
      v30 = v28[4];
      if (v29 != 1936745788 || v30 != 62)
        goto LABEL_39;
      v33 = v43;
      if (v43 < 0)
      {
        if (__p[1] == (void *)5)
        {
          v35 = (void **)__p[0];
LABEL_62:
          v39 = *(_DWORD *)v35;
          v40 = *((unsigned __int8 *)v35 + 4);
          if (v39 == 1936745788 && v40 == 62)
            goto LABEL_40;
        }
      }
      else if (v43 == 5)
      {
        v35 = __p;
        goto LABEL_62;
      }
LABEL_39:
      v32 = *(_QWORD *)(a3 + 8) - 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a3 + 16, v32);
      *(_QWORD *)(a3 + 8) = v32;
      v33 = v43;
LABEL_40:
      if (v33 < 0)
        operator delete(__p[0]);
      if (v45 < 0)
        operator delete(*(void **)buf);
      goto LABEL_44;
    }
LABEL_26:
    v26 = *(_QWORD *)(a3 + 8);
    if (v26 >= *(_QWORD *)(a3 + 16))
    {
      v27 = std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string&,std::string&>((uint64_t *)a3, (__int128 *)buf, (__int128 *)__p);
    }
    else
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(*(std::string **)(a3 + 8), (__int128 *)buf, (__int128 *)__p);
      v27 = v26 + 48;
      *(_QWORD *)(a3 + 8) = v26 + 48;
    }
    *(_QWORD *)(a3 + 8) = v27;
    goto LABEL_30;
  }
}

void sub_22BDAB1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 8) = v22;
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(_QWORD *a1)
{
  *a1 = off_24F652DA0;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E2FB1E4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2FB1F0](v13);
  return a1;
}

void sub_22BDAB3B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E2FB1F0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x22BDAB390);
}

void sub_22BDAB3F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_22BDAB52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

std::string *std::vector<std::vector<std::pair<std::string,std::string>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string,std::string>> const&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_22BDAB6D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<std::string,std::string>>>::__push_back_slow_path<std::vector<std::pair<std::string,std::string>> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<std::pair<std::string,std::string>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::~__split_buffer(v14);
  return v12;
}

void sub_22BDAB7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22BDAB860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22BDAB9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22BDABA2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::vector<std::vector<std::pair<std::string,std::string>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string&,std::string&>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  uint64_t v13;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v6;
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v11)
    v12 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v9, v11);
  else
    v12 = 0;
  __v.__first_ = v12;
  __v.__begin_ = v12 + v5;
  __v.__end_cap_.__value_ = &v12[v11];
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&__v.__begin_->first, a2, a3);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  return v13;
}

void sub_22BDABE60(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_22BDABEEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

float fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<S0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  float *v3;
  float result;

  v3 = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2);
  result = *v3;
  *a3 = *(_DWORD *)v3;
  return result;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Write(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  BOOL v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write: No write stream method for ", 39);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  BOOL v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write: No write filename method for ", 41);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22BDAC2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22BDAC3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitMatcher()
{
  return 0;
}

uint64_t std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  void *__p[2];
  char v11;
  BOOL v12;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v12, (uint64_t)__p);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"TestProperties: stored FST properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (stored: props1, computed: props2)", 35);
    LogMessage::~LogMessage((LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_22BDAC5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  int *v27;
  int v28;
  int v29;
  unint64_t v30;
  int *v31;
  __n128 v32;
  int *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int *v37;
  int *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  v9 = v8;
  if (a4)
  {
    v10 = v8 & 0xFFFFFFFF0000 | (2 * v8) & 0xAAAAAAAA0000 | (v8 >> 1) & 0x555555550000 | 7;
    if ((a2 & ~v10) == 0)
    {
      if (a3)
        *a3 = v10;
      return v9;
    }
  }
  v9 = v8 & 7;
  v57 = 0;
  v58 = v9;
  v55 = 0;
  v56 = 0;
  v11 = a2 & 0xCF3C00000000;
  if ((a2 & 0xCF3C00000000) != 0)
  {
    v50 = (unint64_t)&v55;
    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = &v58;
    v53 = 0u;
    v54 = 0u;
    fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t *)&v50, 0);
    v12 = *((_QWORD *)&v54 + 1);
    *((_QWORD *)&v54 + 1) = 0;
    if (v12)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v54 + 8, v12);
    v13 = (void **)v54;
    *(_QWORD *)&v54 = 0;
    if (v13)
      std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v54, v13);
    v14 = *((_QWORD *)&v53 + 1);
    *((_QWORD *)&v53 + 1) = 0;
    if (v14)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v53 + 8, v14);
    v15 = v53;
    *(_QWORD *)&v53 = 0;
    if (v15)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v53, v15);
    v9 = v58;
  }
  if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
    goto LABEL_104;
  v44 = a2 & 0xC0000;
  v45 = 0;
  v16 = 0x10425A810000;
  if ((a2 & 0xC0000) != 0)
    v16 = 0x10425A850000;
  v17 = v9 | v16;
  v43 = a2 & 0x300000;
  if ((a2 & 0x300000) != 0)
    v17 |= 0x100000uLL;
  if (v11)
    v17 |= 0x800000000000uLL;
  v58 = v17;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v45);
  v18 = 0;
LABEL_23:
  if (!v45)
  {
    if ((int)v47 >= v46)
      goto LABEL_96;
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45))
  {
    if (v45)
    {
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)v45 + 24))();
      goto LABEL_29;
    }
LABEL_28:
    v19 = v47;
LABEL_29:
    if (v44)
    {
      v20 = operator new();
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_DWORD *)(v20 + 32) = 1065353216;
      v21 = v49;
      v49 = (_QWORD *)v20;
      if (v21)
      {
        v22 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v21);
        MEMORY[0x22E2FB328](v22, 0x10A0C408EF24B1CLL);
      }
    }
    if (v43)
    {
      v23 = operator new();
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_DWORD *)(v23 + 32) = 1065353216;
      v24 = v48;
      v48 = (_QWORD *)v23;
      if (v24)
      {
        v25 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v24);
        MEMORY[0x22E2FB328](v25, 0x10A0C408EF24B1CLL);
      }
    }
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v19, &v50);
    v26 = 1;
    while ((_QWORD)v50)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v50 + 16))(v50))
      {
        if ((_QWORD)v50)
        {
          (*(void (**)(void))(*(_QWORD *)v50 + 8))();
          goto LABEL_83;
        }
LABEL_81:
        if (*((_QWORD *)&v51 + 1))
          --**((_DWORD **)&v51 + 1);
LABEL_83:
        if (v18 > 0)
          v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1, v19);
        v37 = fst::TropicalWeightTpl<float>::Zero();
        LODWORD(v50) = v59;
        HIDWORD(v59) = 0;
        HIDWORD(v59) = *v37;
        if (*(float *)&v59 == *((float *)&v59 + 1))
        {
          if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 32))(a1, v19, *(float *)&v59) != 1)
            v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        }
        else
        {
          v38 = fst::TropicalWeightTpl<float>::One();
          LODWORD(v50) = v59;
          HIDWORD(v59) = 0;
          HIDWORD(v59) = *v38;
          v39.n128_u32[0] = v59;
          if (*(float *)&v59 != *((float *)&v59 + 1))
            v58 = v58 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          ++v18;
        }
        if (v45)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v45 + 32))(v45, v39);
        else
          ++v47;
        goto LABEL_23;
      }
      if (!(_QWORD)v50)
        goto LABEL_41;
      v27 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v50 + 24))();
LABEL_42:
      if (v49 && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v49, v27))
        v58 = v58 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
      if (v48 && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v48, v27 + 1))
        v58 = v58 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
      v28 = *v27;
      v29 = *v27;
      if (*v27 != v27[1])
      {
        v58 = v58 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
        v29 = v27[1];
      }
      if (v28 | v29)
      {
        if (v28)
        {
          if (!v29)
            goto LABEL_58;
          goto LABEL_54;
        }
        v30 = v58;
      }
      else
      {
        v30 = v58 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
      }
      v58 = v30 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
      if (!v29)
      {
LABEL_58:
        v58 = v58 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
        if ((v26 & 1) != 0)
          goto LABEL_63;
        goto LABEL_59;
      }
LABEL_54:
      if ((v26 & 1) != 0)
        goto LABEL_63;
LABEL_59:
      if (v28 < (int)v11)
        v58 = v58 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
      if (v29 < SHIDWORD(v11))
        v58 = v58 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_63:
      v31 = fst::TropicalWeightTpl<float>::One();
      HIDWORD(v59) = 0;
      HIDWORD(v59) = v27[2];
      LODWORD(v59) = 0;
      LODWORD(v59) = *v31;
      v32.n128_u32[0] = HIDWORD(v59);
      if (*((float *)&v59 + 1) != *(float *)&v59)
      {
        v33 = fst::TropicalWeightTpl<float>::Zero();
        HIDWORD(v59) = 0;
        HIDWORD(v59) = v27[2];
        LODWORD(v59) = 0;
        LODWORD(v59) = *v33;
        v32.n128_u32[0] = HIDWORD(v59);
        if (*((float *)&v59 + 1) != *(float *)&v59)
        {
          v34 = v58;
          v35 = v58 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          v58 = v35;
          if ((v34 & 0x800000000000) != 0 && v55[(int)v19] == v55[v27[3]])
            v58 = v35 & 0xFFFF3FFDFFFFFFFFLL | 0x400000000000;
        }
      }
      v36 = v27[3];
      if (v36 <= (int)v19)
        v58 = v58 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
      if (v36 != (_DWORD)v19 + 1)
        v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      v11 = *(_QWORD *)v27;
      if (v49)
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v49, v27, v27);
      if (v48)
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v48, v27 + 1, v27 + 1);
      if ((_QWORD)v50)
      {
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v50 + 32))(v50, v32);
        v26 = 0;
      }
      else
      {
        v26 = 0;
        ++v52;
      }
    }
    if (v52 >= (unint64_t)v51)
      goto LABEL_81;
LABEL_41:
    v27 = (int *)(*((_QWORD *)&v50 + 1) + 16 * v52);
    goto LABEL_42;
  }
  if (v45)
    (*(void (**)(void))(*(_QWORD *)v45 + 8))();
LABEL_96:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != -1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
  }
  if (v48)
  {
    v40 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v48);
    MEMORY[0x22E2FB328](v40, 0x10A0C408EF24B1CLL);
  }
  if (v49)
  {
    v41 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v49);
    MEMORY[0x22E2FB328](v41, 0x10A0C408EF24B1CLL);
  }
  v9 = v58;
LABEL_104:
  if (a3)
    *a3 = v9 & 0xFFFFFFFF0000 | (2 * v9) & 0xAAAAAAAA0000 | (v9 >> 1) & 0x555555550000 | 7;
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  return v9;
}

void sub_22BDACD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  uint64_t v10;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va1, 0);
  v9 = *(void **)(v7 - 128);
  if (v9)
  {
    *(_QWORD *)(v7 - 120) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

BOOL fst::CompatProperties(unint64_t this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  void *__p[2];
  char v19;
  BOOL v20;

  v2 = (((2 * a2) & 0xAAAAAAAA0000 | a2 & 0xFFFFFFFF0000 | (a2 >> 1) & 0x555555550000) & ((this >> 1) & 0x555555550000 | (2 * this) & 0xAAAAAAAA0000 | this) | 7) & (a2 ^ this);
  if (v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      if ((v6 & v2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        LogMessage::LogMessage(&v20, (uint64_t)__p);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"CompatProperties: Mismatch: ", 28);
        v8 = strlen(fst::PropertyNames[v5]);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)fst::PropertyNames[v5], v8);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": props1 = ", 11);
        if ((v6 & this) != 0)
          v11 = "true";
        else
          v11 = "false";
        if ((v6 & this) != 0)
          v12 = 4;
        else
          v12 = 5;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", props2 = ", 11);
        if ((v6 & a2) != 0)
          v15 = "true";
        else
          v15 = "false";
        if ((v6 & a2) != 0)
          v16 = 4;
        else
          v16 = 5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        LogMessage::~LogMessage((LogMessage *)&v20);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      v6 *= 2;
      ++v5;
    }
    while (v5 != 64);
  }
  return v2 == 0;
}

void sub_22BDACF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[10];
  v2 = a1 + 10;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = (void **)a1[9];
  a1[9] = 0;
  if (v5)
    std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)(a1 + 9), v5);
  v6 = a1[8];
  a1[8] = 0;
  if (v6)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)(a1 + 8), v6);
  v7 = a1[7];
  a1[7] = 0;
  if (v7)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)(a1 + 7), v7);
  return a1;
}

uint64_t std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

int *fst::TropicalWeightTpl<float>::One()
{
  unsigned __int8 v0;

  {
    fst::TropicalWeightTpl<float>::One(void)::one = 0;
  }
  return &fst::TropicalWeightTpl<float>::One(void)::one;
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char inited;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  char v42;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t (**v50)();
  _QWORD v51[3];
  uint64_t v52[3];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  _BYTE *v56;
  char *v57;
  char *v58;

  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit((uint64_t)a2, a1);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v45 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
    return;
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v51, 64);
  v53 = 0;
  v50 = &off_24F652F20;
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v44)
    v5 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v5 = (v45 + 1);
  if ((int)v5 <= (unint64_t)(v57 - v56))
  {
    if ((int)v5 < (unint64_t)(v57 - v56))
      v57 = &v56[(int)v5];
  }
  else
  {
    std::vector<unsigned char>::__append(&v56, (int)v5 - (v57 - v56), &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
  }
  v47 = 0;
  v48 = 0;
  v49 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v47);
  if (v45 >= (int)v5)
    goto LABEL_97;
  v6 = v45;
  do
  {
    v56[(int)v6] = 1;
    v7 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v7 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v51, 1);
      *(_QWORD *)(v7 + 48) = 0;
    }
    *(_DWORD *)v7 = v6;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_QWORD *)(v7 + 40) = 0;
    *(_OWORD *)(v7 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v6, v7 + 8);
    v46 = v7;
    std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v54, &v46);
    inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, v6, v6);
LABEL_16:
    v9 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v10 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v11 = *(int *)v10;
      v12 = v57 - v56;
      if (v57 - v56 <= v11)
      {
        v5 = v11 + 1;
        if (v11 + 1 <= v12)
        {
          if (v11 + 1 < v12)
            v57 = &v56[v5];
        }
        else
        {
          std::vector<unsigned char>::__append(&v56, v11 + 1 - v12, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v9 & 1) == 0)
        goto LABEL_33;
      v13 = v10[1];
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
          goto LABEL_33;
        v14 = v10[1];
        if (!v14)
          goto LABEL_29;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
LABEL_30:
        v16 = *(int *)(v15 + 12);
        v17 = v56;
        v18 = v57 - v56;
        if (v57 - v56 <= v16)
        {
          v5 = (v16 + 1);
          if ((int)v5 <= v18)
          {
            if ((int)v5 < v18)
              v57 = &v56[(int)v5];
          }
          else
          {
            std::vector<unsigned char>::__append(&v56, (int)v5 - v18, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
            v16 = *(int *)(v15 + 12);
            v17 = v56;
          }
        }
        v25 = v17[v16];
        if (v25 == 1)
        {
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc((uint64_t)a2, v11, v15);
          v24 = v10[1];
          if (v24)
            goto LABEL_50;
LABEL_51:
          ++v10[5];
        }
        else
        {
          if (v25 != 2)
          {
            v17[v16] = 1;
            v26 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v26 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v51, 1);
              *(_QWORD *)(v26 + 48) = 0;
            }
            *(_DWORD *)v26 = *(_DWORD *)(v15 + 12);
            *(_OWORD *)(v26 + 24) = 0u;
            *(_QWORD *)(v26 + 40) = 0;
            *(_OWORD *)(v26 + 8) = 0u;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
            v46 = v26;
            std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v54, &v46);
            inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, *(_DWORD *)(v15 + 12), v6);
            goto LABEL_16;
          }
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc((_QWORD **)a2, v11, v15);
          v24 = v10[1];
          if (!v24)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        }
      }
      else
      {
        if (v10[5] < v10[3])
        {
LABEL_29:
          v15 = v10[2] + 16 * v10[5];
          goto LABEL_30;
        }
LABEL_33:
        v56[v11] = 2;
        v19 = v10[1];
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          v20 = (_DWORD *)v10[4];
          if (v20)
            --*v20;
        }
        v10[6] = v53;
        v53 = v10;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v22 = *(_DWORD *)v21;
          v23 = *(_QWORD *)(v21 + 8);
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, v22);
          v24 = *(_QWORD *)(v21 + 8);
          if (v24)
            goto LABEL_50;
          ++*(_QWORD *)(v21 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v6 == v45)
      v6 = 0;
    else
      v6 = (v6 + 1);
    if ((int)v6 < (int)v5)
    {
      v27 = &v56[(int)v6];
      v28 = (int)v5 - (uint64_t)(int)v6;
      while (*v27++)
      {
        v6 = (v6 + 1);
        if (!--v28)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v44 || (_DWORD)v6 != (_DWORD)v5)
      continue;
LABEL_67:
    if (v47)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47) & 1) != 0)
        continue;
      if (v47)
      {
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
        goto LABEL_73;
      }
    }
    else if (v49 >= v48)
    {
      continue;
    }
    v30 = v49;
LABEL_73:
    if (v30 != (_DWORD)v5)
    {
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47);
      else
        ++v49;
      goto LABEL_67;
    }
    v31 = v57;
    if (v57 >= v58)
    {
      v33 = (unint64_t)v56;
      v34 = v57 - v56;
      v35 = v57 - v56 + 1;
      if (v35 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v36 = v58 - v56;
      if (2 * (v58 - v56) > (unint64_t)v35)
        v35 = 2 * v36;
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
        v37 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = operator new(v37);
      else
        v38 = 0;
      v39 = &v38[v34];
      v40 = &v38[v34];
      *v40 = 0;
      v32 = v40 + 1;
      if (v31 != (char *)v33)
      {
        v41 = &v31[~v33];
        do
        {
          v42 = *--v31;
          (v41--)[(_QWORD)v38] = v42;
        }
        while (v31 != (char *)v33);
        v31 = v56;
        v39 = v38;
      }
      v56 = v39;
      v57 = v32;
      v58 = &v38[v37];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v57 = 0;
      v32 = v31 + 1;
    }
    v5 = (v5 + 1);
    v57 = v32;
  }
  while ((v9 & 1) != 0 && (int)v6 < (int)v5);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v50 = &off_24F652F88;
  v51[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v52);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v54);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_22BDAD778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (*(_QWORD *)a1)
    *(_QWORD *)(*(_QWORD *)a1 + 8) = **(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = 0;
    *(_QWORD *)(v5 + 8) = 0;
  }
  else
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    *(_QWORD *)(a1 + 16) = v7;
    v6 = 1;
  }
  *(_BYTE *)(a1 + 52) = v6;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
  *(_QWORD *)(a1 + 32) = a2;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = (_QWORD *)operator new();
  v10 = *(_QWORD *)(a1 + 56);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *(_QWORD *)(a1 + 56) = v9;
  if (v10)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](a1 + 56, v10);
  v11 = (_QWORD *)operator new();
  v12 = *(_QWORD *)(a1 + 64);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *(_QWORD *)(a1 + 64) = v11;
  if (v12)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](a1 + 64, v12);
  v13 = (_QWORD *)operator new();
  v14 = *(void ***)(a1 + 72);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = 0;
  *(_QWORD *)(a1 + 72) = v13;
  if (v14)
    std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100](a1 + 72, v14);
  v15 = (_QWORD *)operator new();
  v18 = *(_QWORD *)(a1 + 80);
  v17 = (_QWORD *)(a1 + 80);
  v16 = v18;
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  *v17 = v15;
  if (v18)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)v17, v16);
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_QWORD *)a1)
  {
    v2 = **(_DWORD ***)a1;
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 8) - (_QWORD)v2;
    if (v3)
    {
      v4 = v3 >> 2;
      if (v4 <= 1)
        v4 = 1;
      do
      {
        *v2 = *(_DWORD *)(a1 + 48) + ~*v2;
        ++v2;
        --v4;
      }
      while (v4);
    }
  }
  if (*(_BYTE *)(a1 + 52))
  {
    v5 = *(void ***)(a1 + 16);
    if (v5)
    {
      if (*v5)
        operator delete(*v5);
      MEMORY[0x22E2FB328](v5, 0x1010C40113C0ABBLL);
    }
  }
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v6)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](a1 + 56, v6);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v7)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](a1 + 64, v7);
  v8 = *(void ***)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v8)
    std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100](a1 + 72, v8);
  v11 = *(_QWORD *)(a1 + 80);
  v10 = (_QWORD *)(a1 + 80);
  v9 = v11;
  *v10 = 0;
  if (v11)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)v10, v9);
}

uint64_t fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v4);
  v3 = 0;
  while (1)
  {
    while (!v4)
    {
      if (v6 >= v5)
        return v3;
      v3 = (v3 + 1);
LABEL_10:
      ++v6;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
      break;
    v3 = (v3 + 1);
    if (!v4)
      goto LABEL_10;
    (*(void (**)(void))(*(_QWORD *)v4 + 32))();
  }
  if (v4)
    (*(void (**)(void))(*(_QWORD *)v4 + 8))();
  return v3;
}

void sub_22BDADB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v65;
  char v66;
  char v67;

  v6 = a1[10];
  v7 = *(_DWORD **)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    v10 = *(_DWORD **)v6;
    v11 = ((uint64_t)v7 - *(_QWORD *)v6) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      v10 = *(_DWORD **)v6;
      v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = a2;
    v9 = v16 + 4;
    while (v7 != v10)
    {
      v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(_QWORD *)v6 = v16;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(v6 + 16) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v7 = a2;
    v9 = v7 + 1;
  }
  *(_QWORD *)(v6 + 8) = v9;
  v19 = a2;
  v20 = *(_QWORD *)a1[7];
  if (a2 >= (unint64_t)((*(_QWORD *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      v21 = *a1;
      if (*a1)
      {
        v22 = *(_QWORD *)(v21 + 16);
        v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          v25 = *(_DWORD **)v21;
          v26 = ((uint64_t)v23 - *(_QWORD *)v21) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            goto LABEL_78;
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            v25 = *(_DWORD **)v21;
            v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = -1;
          v24 = v31 + 4;
          while (v23 != v25)
          {
            v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(_QWORD *)v21 = v31;
          *(_QWORD *)(v21 + 8) = v24;
          *(_QWORD *)(v21 + 16) = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v23 = -1;
          v24 = v23 + 1;
        }
        *(_QWORD *)(v21 + 8) = v24;
      }
      v33 = a1[1];
      if (v33)
      {
        v67 = 0;
        std::vector<BOOL>::push_back(v33, &v67);
      }
      v34 = a1[2];
      v66 = 0;
      std::vector<BOOL>::push_back(v34, &v66);
      v35 = a1[7];
      v36 = *(_DWORD **)(v35 + 8);
      v37 = *(_QWORD *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        v39 = *(_DWORD **)v35;
        v40 = ((uint64_t)v36 - *(_QWORD *)v35) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          goto LABEL_78;
        v42 = v37 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          v39 = *(_DWORD **)v35;
          v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = -1;
        v38 = v45 + 4;
        while (v36 != v39)
        {
          v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(_QWORD *)v35 = v45;
        *(_QWORD *)(v35 + 8) = v38;
        *(_QWORD *)(v35 + 16) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v36 = -1;
        v38 = v36 + 1;
      }
      *(_QWORD *)(v35 + 8) = v38;
      v47 = a1[8];
      v48 = *(_DWORD **)(v47 + 8);
      v49 = *(_QWORD *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        v51 = *(_DWORD **)v47;
        v52 = ((uint64_t)v48 - *(_QWORD *)v47) >> 2;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
LABEL_78:
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v54 = v49 - (_QWORD)v51;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          v51 = *(_DWORD **)v47;
          v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[4 * v52];
        *(_DWORD *)v57 = -1;
        v50 = v57 + 4;
        while (v48 != v51)
        {
          v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(_QWORD *)v47 = v57;
        *(_QWORD *)(v47 + 8) = v50;
        *(_QWORD *)(v47 + 16) = &v56[4 * v55];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v48 = -1;
        v50 = v48 + 1;
      }
      *(_QWORD *)(v47 + 8) = v50;
      v59 = a1[9];
      v65 = 0;
      std::vector<BOOL>::push_back(v59, &v65);
      v20 = *(_QWORD *)a1[7];
    }
    while (v19 >= (*(_QWORD *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  v60 = (_QWORD *)a1[9];
  *(_DWORD *)(*(_QWORD *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  v61 = v19 >> 6;
  v62 = 1 << v19;
  *(_QWORD *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  v63 = (_QWORD *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) |= v62;
  }
  else
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) &= ~v62;
    *(_QWORD *)a1[3] = *(_QWORD *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
  return 1;
}

int *fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(uint64_t a1, int a2, int a3)
{
  int *result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v25);
  result = fst::TropicalWeightTpl<float>::Zero();
  v26 = v25;
  HIDWORD(v25) = 0;
  HIDWORD(v25) = *result;
  if (*(float *)&v25 != *((float *)&v25 + 1))
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) == *(_DWORD *)(**(_QWORD **)(a1 + 64) + 4 * a2))
  {
    v7 = 0;
    v8 = *(uint64_t **)(a1 + 80);
    v9 = *v8;
    v10 = v8[1] - *v8;
    v11 = **(_QWORD **)(a1 + 16);
    v12 = (int *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + v9 - 4);
    do
    {
      v13 = *v12--;
      v7 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
    }
    while ((_DWORD)v13 != a2);
    v14 = *(_QWORD **)a1;
    do
    {
      v15 = *(_QWORD *)(a1 + 80);
      v16 = *(_QWORD *)(v15 + 8);
      v19 = *(int *)(v16 - 4);
      v17 = v16 - 4;
      v18 = v19;
      if (v14)
        *(_DWORD *)(*v14 + 4 * v18) = *(_DWORD *)(a1 + 48);
      v20 = v18 >> 6;
      v21 = 1 << v18;
      if ((v7 & 1) != 0)
        *(_QWORD *)(v11 + 8 * v20) |= v21;
      result = **(int ***)(a1 + 72);
      *(_QWORD *)&result[2 * v20] &= ~v21;
      *(_QWORD *)(v15 + 8) = v17;
    }
    while ((_DWORD)v18 != a2);
    if ((v7 & 1) == 0)
      **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
    ++*(_DWORD *)(a1 + 48);
  }
  if (a3 != -1)
  {
    v22 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v22 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v22 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v23 = **(_QWORD **)(a1 + 64);
    v24 = *(_DWORD *)(v23 + 4 * a2);
    if (v24 < *(_DWORD *)(v23 + 4 * a3))
      *(_DWORD *)(v23 + 4 * a3) = v24;
  }
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(int *)(a3 + 12);
  v4 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v3);
  v5 = **(_QWORD **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2))
    *(_DWORD *)(v5 + 4 * a2) = v4;
  v6 = **(_QWORD **)(a1 + 16);
  if (((*(_QWORD *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    *(_QWORD *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = *(unint64_t **)(a1 + 24);
  v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *v7 = v8;
  if ((_DWORD)v3 == *(_DWORD *)(a1 + 40))
    *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc(_QWORD **a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a3 + 12);
  v4 = *a1[7];
  v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
  }
  else
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
    if ((*(_QWORD *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2))
        *(_DWORD *)(v8 + 4 * a2) = v5;
    }
  }
  v9 = *a1[2];
  if ((*(_QWORD *)(v9 + 8 * v6) & v7) != 0)
    *(_QWORD *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return 1;
}

_QWORD *fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void std::default_delete<std::vector<int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x22E2FB328);
  }
}

void std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    if (*a2)
      operator delete(*a2);
    JUMPOUT(0x22E2FB328);
  }
}

void fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<48ul>::Size()
{
  return 48;
}

_QWORD *fst::internal::MemoryPoolImpl<48ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<48ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F652FB0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDAE4C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<56ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<56ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<56ul>::Size()
{
  return 56;
}

void std::__list_imp<std::unique_ptr<char []>>::clear(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      v5 = (uint64_t *)v2[1];
      std::__list_imp<std::unique_ptr<char []>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<std::unique_ptr<char []>>::__delete_node[abi:ne180100]<>(int a1, _QWORD *__p)
{
  uint64_t v3;

  v3 = __p[2];
  __p[2] = 0;
  if (v3)
    MEMORY[0x22E2FB310](v3, 0x1000C8077774924);
  operator delete(__p);
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22BDAEA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t fst::internal::MemoryArenaImpl<56ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 56 * a2;
  v4 = a1[1];
  if (224 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_22BDAF134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_22BDAF7D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

BOOL *LogMessage::LogMessage(BOOL *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 5)
    {
LABEL_12:
      v8 = 0;
      goto LABEL_13;
    }
    v4 = *(_QWORD *)a2;
  }
  else
  {
    v4 = a2;
    if (v3 != 5)
      goto LABEL_12;
  }
  v5 = *(_DWORD *)v4;
  v6 = *(unsigned __int8 *)(v4 + 4);
  v8 = v5 == 1096040774 && v6 == 76;
LABEL_13:
  *a1 = v8;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
  return a1;
}

void LogMessage::~LogMessage(LogMessage *this)
{
  const std::locale::facet *v2;
  std::locale v3;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v2 = std::locale::use_facet(&v3, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v3);
  std::ostream::put();
  std::ostream::flush();
  if (*(_BYTE *)this)
    exit(1);
}

void sub_22BDAFB68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *std::allocate_shared[abi:ne180100]<fst::internal::SymbolTableImpl,std::allocator<fst::internal::SymbolTableImpl>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x130uLL);
  result = std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<fst::internal::SymbolTableImpl>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_22BDAFC54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<fst::internal::SymbolTableImpl>,0>(std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24F653000;
  fst::internal::SymbolTableImpl::SymbolTableImpl(a1 + 1, a2);
  return a1;
}

void sub_22BDAFC9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F653000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F653000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

void std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::__on_zero_shared(uint64_t a1)
{
  fst::internal::SymbolTableImpl::~SymbolTableImpl((fst::internal::SymbolTableImpl *)(a1 + 24));
}

std::string *fst::internal::SymbolTableImpl::SymbolTableImpl(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2]);
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = (std::string::size_type)&this[6];
  this[6].__r_.__value_.__s.__data_[16] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  this[9].__r_.__value_.__r.__words[0] = 850045863;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[2] = 0u;
  this[11].__r_.__value_.__l.__size_ = 0;
  return this;
}

void sub_22BDAFD94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void fst::internal::SymbolTableImpl::~SymbolTableImpl(fst::internal::SymbolTableImpl *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::mutex::~mutex((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(_QWORD *a1)
{
  *a1 = off_24F652DA0;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 16);
  result[1] = *(_QWORD *)(a1 + 8);
  result[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *result = &off_24F653050;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (a1 != a2)
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,void>(a2, &v7);
    std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), &v7);
    v3 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  return a1;
}

unint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 80) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

float fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(v6, a2, (float *)&v8);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a3 & 4) != (a3 & 4 & a2))
    fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 16))(v2) & 0xEAFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x806A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && !*(_QWORD *)(v1 + 8))
  {
    v15 = *(_QWORD **)(a1 + 8);
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v15);
    result = (*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    v15[1] = (*((_DWORD *)v15 + 2) | result) & 4 | 0x956A5A950003;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = (uint64_t *)(a1 + 8);
    v5 = *(_QWORD *)(v3 + 40);
    v4 = *(_QWORD *)(v3 + 48);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
    std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100](v2, &v16);
    v6 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *v2;
    if (v5)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v10 = 0;
    v11 = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *v2;
    if (v4)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v13 = 0;
    result = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v12 + 48) = v13;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(*(_QWORD **)(v6[7] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v6[1] = v6[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[7] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 56), a2);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 24), a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (a2)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  else
    v5 = 0;
  result = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (a2)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  else
    v5 = 0;
  result = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)operator new();
  *v6 = &off_24F653530;
  v6[3] = 0;
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v7 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * a2);
  v6[2] = v7 + 8;
  *a3 = v6;
}

void sub_22BDB0690(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  uint64_t v29;
  void *v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string __p[5];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)v32 = 0u;
  v6 = -1;
  v36 = 0;
  v37 = 0;
  v35 = -1;
  v35 = (*(int (**)(_QWORD *))(*a1 + 16))(a1);
  v36 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 56))(a1, 1, 0))
    v7 = 0;
  else
    v7 = *(_BYTE *)(a3 + 28) == 0;
  if (!v7)
  {
    v6 = 0;
LABEL_6:
    v8 = 0;
    v36 = (int)fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1);
    goto LABEL_9;
  }
  v9 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v9[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 5) + 32))(__p, *((_QWORD *)v9 + 5), 0, 1, 16);
    v6 = v39;
    if (v39 != -1)
      goto LABEL_6;
  }
  v8 = 1;
LABEL_9:
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v11 = v10 | 3;
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v11, (uint64_t)&v30 + 4);
  v29 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(a1[1] + 64) - *(_QWORD *)(a1[1] + 56);
  v13 = v12 >> 3;
  if ((int)(v12 >> 3) < 1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v14 = 0;
    v15 = (v12 >> 3);
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 24))(&v30, a1, v14);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (_DWORD)v30;
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v14);
      std::ostream::write();
      v16 = *(_QWORD *)(*(_QWORD *)(a1[1] + 56) + 8 * v14);
      v17 = *(_QWORD *)(v16 + 24);
      v18 = *(_QWORD *)(v16 + 32);
      if (v17 == v18)
        v19 = 0;
      else
        v19 = *(_QWORD *)(v16 + 24);
      if (v17 != v18)
      {
        v20 = (v18 - v17) >> 4;
        if (v20 <= 1)
          v21 = 1;
        else
          v21 = v20;
        v22 = (_DWORD *)(v19 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v22;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v22[1];
          std::ostream::write();
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"VectorFst::Write: Write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_33:
    LogMessage::~LogMessage((LogMessage *)&v30);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_36;
  }
  if (!v8)
  {
    if (v36 == v13)
    {
      updated = 1;
      goto LABEL_36;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_33;
  }
  v36 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v11, (uint64_t)&v30 + 4, v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_36:
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  if (SHIBYTE(v32[0]) < 0)
    operator delete(v31[0]);
  return updated;
}

void sub_22BDB0AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  LogMessage::~LogMessage((LogMessage *)&a12);
  if (a31 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 144))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 144))(v23, a2);
  }
  return result;
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  _BYTE v26[16];
  _QWORD v27[17];
  __int128 __p;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x22E2FB1E4](v26);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    __p = 0u;
    v29 = 0u;
    v36 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v27, v17, &__p, 16);
    if (v27[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x22E2FB1F0](v26);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
    v19 = *(char *)(a3 + 23);
    if (v19 >= 0)
      v20 = a3;
    else
      v20 = *(_QWORD *)a3;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a3 + 23);
    else
      v21 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      v22 = *(char *)(a3 + 23);
      if (v22 >= 0)
        v20 = a3;
      else
        v20 = *(_QWORD *)a3;
      if (v22 >= 0)
        v21 = *(unsigned __int8 *)(a3 + 23);
      else
        v21 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x22E2FB1E4](v27, a2);
      v23 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v23[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5) + 32))(&__p, *((_QWORD *)v23 + 5), 0, 2, 16);
        if (v36 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x22E2FB1F0](v27);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      v24 = *(char *)(a3 + 23);
      if (v24 >= 0)
        v20 = a3;
      else
        v20 = *(_QWORD *)a3;
      if (v24 >= 0)
        v21 = *(unsigned __int8 *)(a3 + 23);
      else
        v21 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
  LogMessage::~LogMessage((LogMessage *)v27);
  if (SBYTE7(v29) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_22BDB0FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x22E2FB1F0](&a12);
  _Unwind_Resume(a1);
}

void fst::FstHeader::~FstHeader(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::TropicalWeightTpl<float>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::TropicalWeightTpl<float>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type(void)::type;
}

void sub_22BDB1130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::TropicalWeightTpl<float>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  std::string v5;

  {
    v2 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v5, "tropical");
    v3 = std::string::append(&v5, "");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)&v3->__r_.__value_.__l + 2);
    *(_OWORD *)v2 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    fst::TropicalWeightTpl<float>::Type(void)::type = v2;
  }
  return fst::TropicalWeightTpl<float>::Type(void)::type;
}

void sub_22BDB1228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x22E2FB328](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFile(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  int v6;
  const std::string::value_type *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  std::string __p;
  __int16 v17;
  char v18;
  char v19;
  char v20;
  BOOL v21;
  std::string v22;
  __int16 v23;
  char v24;
  char v25;
  char v26;
  _BYTE v27[384];
  _QWORD v28[20];

  v28[19] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    std::ofstream::basic_ofstream(&v22);
    if ((v27[*(_QWORD *)(v22.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage(&v21, (uint64_t)&__p);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write: Can't open file: ", 29);
      v6 = *(char *)(a2 + 23);
      if (v6 >= 0)
        v7 = (const std::string::value_type *)a2;
      else
        v7 = *(const std::string::value_type **)a2;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 23);
      else
        v8 = *(_QWORD *)(a2 + 8);
      goto LABEL_31;
    }
    v10 = FLAGS_fst_align;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v17 = 257;
    v18 = 1;
    v19 = v10;
    v20 = 0;
    v12 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a1 + 80))(a1, &v22, &__p);
    v13 = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v13 & 1) != 0)
        goto LABEL_23;
    }
    else if ((v12 & 1) != 0)
    {
LABEL_23:
      v11 = 1;
LABEL_34:
      v22.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
      *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words
                                + *(_QWORD *)(v22.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8]
                                                                                                  + 24);
      MEMORY[0x22E2FB1B4](&v22.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x22E2FB2D4](v28);
      return v11;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage(&v21, (uint64_t)&__p);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write failed: ", 19);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v7 = (const std::string::value_type *)a2;
    else
      v7 = *(const std::string::value_type **)a2;
    if (v14 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
LABEL_31:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    LogMessage::~LogMessage((LogMessage *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = 0;
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v9 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v22 = __p;
  v23 = 257;
  v24 = 1;
  v25 = v9;
  v26 = 0;
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)a1 + 80))(a1, MEMORY[0x24BEDB318], &v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_22BDB1540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x22E2FB1A8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_22BDB16A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x22E2FB2D4](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22BDB1798(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F653410;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22BDB17E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F653410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F653410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  void *__p[2];
  __int128 v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  *(_QWORD *)a1 = &off_24F653500;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(_QWORD *)a1 = &off_24F653460;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  std::string::operator=(v4, (const std::string *)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  if (v7)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *v5;
  *v5 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (v9)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_DWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 1, 0))
  {
    v11 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 56), v11);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 112))(a2, &v20);
  while (1)
  {
    if (!v20)
    {
      if ((int)v22 >= v21)
        goto LABEL_39;
LABEL_19:
      v12 = v22;
      goto LABEL_20;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20))
      break;
    if (!v20)
      goto LABEL_19;
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 24))();
LABEL_20:
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(&v19, a2, v12);
    **(_DWORD **)(*v6 + 8 * (int)v12) = v19;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v12);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v12) + 24), v13);
    v18 = 0;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 120))(a2, v12, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v18 >= (unint64_t)v17)
          goto LABEL_32;
LABEL_26:
        v14 = (char *)__p[1] + 16 * v18;
        goto LABEL_27;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]))
        break;
      if (!__p[0])
        goto LABEL_26;
      v14 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 24))();
LABEL_27:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v12), v14);
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
      else
        ++v18;
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (*((_QWORD *)&v17 + 1))
      --**((_DWORD **)&v17 + 1);
LABEL_34:
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
    else
      ++v22;
  }
  if (v20)
    (*(void (**)(void))(*(_QWORD *)v20 + 8))();
LABEL_39:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0xFFFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_22BDB1BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;

  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(_QWORD *a1)
{
  char *v2;
  int *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = (char *)operator new(0x30uLL);
  v3 = fst::TropicalWeightTpl<float>::Zero();
  v4 = a1[9];
  *(_DWORD *)v2 = *v3;
  *((_QWORD *)v2 + 5) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  v5 = (_QWORD *)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[7];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 9), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v2;
    v6 = v13 + 8;
    v16 = (char *)a1[7];
    v15 = (char *)a1[8];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[7];
    }
    a1[7] = v13;
    a1[8] = v6;
    a1[9] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[8] = v6;
  return (((unint64_t)v6 - a1[7]) >> 3) - 1;
}

uint64_t fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &off_24F6534D0;
  v2 = (_QWORD **)a1[8];
  if (v2 != (_QWORD **)a1[7])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[7];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[7];
    }
    while (v3 < (uint64_t)(a1[8] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl((uint64_t)a1);
}

void fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x22E2FB328);
}

void fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24F653500;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 16 * v6;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
}

void sub_22BDB2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v2 + v5 - 4);
      v5 -= 16;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t result;

  if (!*a2)
    ++a1[1];
  if (!a2[1])
    ++a1[2];
  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(a1 + 3, (uint64_t)a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_DWORD *)(v3 + 8) = a2[2];
    *(_DWORD *)(v3 + 12) = a2[3];
    result = v3 + 16;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v7, v9);
  v11 = &v10[16 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[16 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  v17 = v11 + 16;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 += (v16 - v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_22BDB2260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(_QWORD *__p)
{
  void *v2;

  if (__p)
  {
    v2 = (void *)__p[3];
    if (v2)
    {
      __p[4] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2 || *(_QWORD *)(v2 + 8))
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,void>(a1, &v6);
    std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), &v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22BDB239C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F653410;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22BDB23E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

float fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(_QWORD *a1, int a2, float *a3)
{
  unint64_t v6;
  uint64_t v7;
  float result;
  int v9;

  v9 = **(_DWORD **)(a1[7] + 8 * a2);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v7 = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v6, (float *)&v9, a3);
  result = *a3;
  **(float **)(a1[7] + 8 * a2) = *a3;
  a1[1] = a1[1] & 4 | v7;
  return result;
}

uint64_t fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(unint64_t a1, float *a2, float *a3)
{
  if (*a2 != *(float *)fst::TropicalWeightTpl<float>::Zero() && *a2 != *(float *)fst::TropicalWeightTpl<float>::One())
    a1 &= ~0x100000000uLL;
  if (*a3 != *(float *)fst::TropicalWeightTpl<float>::Zero() && *a3 != *(float *)fst::TropicalWeightTpl<float>::One())
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  return a1 & 0xC3FFFFFF0007;
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8 * a2) + 32);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[7] + 8 * a2) + 24))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 16);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(*(_QWORD **)(a1[7] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = *a3;
  v7 = *((_DWORD *)a3 + 1);
  v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v7)
    v8 = a1;
  v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7)
    v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v6 == 0.0)
    v8 = v9;
  if (v7)
    v10 = v8;
  else
    v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 <= SLODWORD(v6))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v7)
      v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    else
      v10 = v11;
  }
  if (a3[2] != *(float *)fst::TropicalWeightTpl<float>::Zero()
    && a3[2] != *(float *)fst::TropicalWeightTpl<float>::One())
  {
    v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 3) <= a2)
    v12 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  else
    v12 = v10;
  if ((v12 & 0x4000000000) != 0)
    return v12 & 0x45D7FFEB0007 | 0x2800000000;
  else
    return v12 & 0x45D7FFEB0007;
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int64x2_t v34;
  std::vector<int>::value_type __x;
  std::vector<int> v36;

  v4 = (uint64_t *)(a1 + 56);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v36, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v36.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v36.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v36.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 56);
    }
    while (v12 < (*(_QWORD *)(a1 + 64) - v11) >> 3);
  }
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(_QWORD *)(v16 + 24);
      v18 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v21 = v18 - v17;
      v20 = v18 == v17;
      if (v18 == v17)
        v22 = 0;
      else
        v22 = *(_QWORD *)(v16 + 24);
      if (v20)
      {
        v34 = *(int64x2_t *)(v16 + 8);
        v24 = 0;
        v31 = v21 >> 4;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = (int *)(v22 + 12);
        do
        {
          v26 = v36.__begin_[*v25];
          if (v26 == -1)
          {
            v28 = *(_QWORD *)(v25 - 3);
            v29.i64[0] = v28;
            v29.i64[1] = HIDWORD(v28);
            v19 = vaddq_s64(v19, vceqzq_s64(v29));
          }
          else
          {
            *v25 = v26;
            if (v23 != v24)
            {
              v27 = v22 + 16 * v24;
              *(_QWORD *)v27 = *(_QWORD *)(v25 - 3);
              *(_DWORD *)(v27 + 8) = *(v25 - 1);
              *(_DWORD *)(v27 + 12) = v26;
              v14 = *v4;
            }
            ++v24;
          }
          v16 = *(_QWORD *)(v14 + 8 * v15);
          ++v23;
          v30 = *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24);
          v25 += 4;
        }
        while (v23 < v30 >> 4);
        v34 = v19;
        v31 = v30 >> 4;
      }
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs((_QWORD *)v16, v31 - v24);
      v14 = *(_QWORD *)(a1 + 56);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v34;
    }
    while (v15 < (*(_QWORD *)(a1 + 64) - v14) >> 3);
  }
  v32 = *(int *)(a1 + 80);
  if ((_DWORD)v32 == -1)
  {
    v33 = v36.__begin_;
    if (!v36.__begin_)
      return;
  }
  else
  {
    v33 = v36.__begin_;
    *(_DWORD *)(a1 + 80) = v36.__begin_[v32];
  }
  v36.__end_ = v33;
  operator delete(v33);
}

void sub_22BDB2938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append((void **)a1, a2 - v2);
  }
}

_QWORD *fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  if (a2)
  {
    v2 = result[4];
    v3 = -16 * a2;
    v4 = (_DWORD *)(v2 - 16);
    v5 = (_DWORD *)(v2 - 16);
    do
    {
      v6 = *v5;
      v5 -= 4;
      if (!v6)
        --result[1];
      if (!v4[1])
        --result[2];
      v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_22BDB2A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEEC2B8ne180100IJESD_Li0EEESD_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22BDB2BD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEEC2B8ne180100IJESD_Li0EEESD_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F653410;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl((uint64_t)(a1 + 3));
  return a1;
}

void sub_22BDB2C18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &off_24F653500;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(_QWORD *)a1 = &off_24F653460;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x956A5A950003;
  return a1;
}

void sub_22BDB2CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2 != *(_QWORD *)(a1 + 56))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 56);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(v2 + 8 * v3++));
      v2 = *(_QWORD *)(a1 + 56);
    }
    while (v3 < (*(_QWORD *)(a1 + 64) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 64) = v2;
  *(_DWORD *)(a1 + 80) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x22E2FB328);
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Done(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Position(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Reset(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Seek(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Flags()
{
  return 15;
}

int *fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  float *v14;
  float v15;
  int v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int *result;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v6 = (int *)(v5 + 16 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (v7 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 16 * v4;
  v13 = fst::TropicalWeightTpl<float>::Zero();
  v15 = *(float *)(v12 + 8);
  v14 = (float *)(v12 + 8);
  if (v15 != *(float *)v13 && *v14 != *(float *)fst::TropicalWeightTpl<float>::One())
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(*(_QWORD **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v16 = *(_DWORD *)a2;
  v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v16)
  {
    if (!v17)
    {
      v18 = *(unint64_t **)(a1 + 16);
      v19 = *v18;
LABEL_19:
      *v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v18 = *(unint64_t **)(a1 + 16);
    v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v18 = v20;
    if (!v17)
    {
      v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v18 = v19;
      goto LABEL_19;
    }
  }
  result = fst::TropicalWeightTpl<float>::Zero();
  if (*(float *)(a2 + 8) != *(float *)result)
  {
    result = fst::TropicalWeightTpl<float>::One();
    if (*(float *)(a2 + 8) != *(float *)result)
      **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= 0x30FC30007uLL;
  return result;
}

float fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  float result;

  v3 = a1[3];
  v4 = (_DWORD *)(v3 + 16 * a3);
  if (!*v4)
    --a1[1];
  if (!v4[1])
    --a1[2];
  if (!*(_DWORD *)a2)
    ++a1[1];
  if (!*(_DWORD *)(a2 + 4))
    ++a1[2];
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v5 = v3 + 16 * a3;
  result = *(float *)(a2 + 8);
  *(float *)(v5 + 8) = result;
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  std::string::basic_string[abi:ne180100]<0>(v16, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, (uint64_t)v16, a4, a5, a6, (uint64_t)__p, a7);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_22BDB3334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  int *v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  int *v42;
  int *v43;
  int *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v62;
  _QWORD *v63;
  void **v64;
  void *v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v81;
  BOOL v83;
  void *v84[2];
  char v85;
  void *v86[2];
  unsigned __int8 v87;
  void *__p;
  unint64_t *v89;
  unint64_t *v90;
  int *v91;
  int *v92;
  int *v93;

  v9 = a8;
  v11 = a1;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  if (a2 && a3)
  {
    v15 = *(unsigned __int8 *)(a4 + 23);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a4 + 8);
    if (v15)
    {
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a4);
      if (v16 == -1)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
          LogMessage::LogMessage((BOOL *)v86, (uint64_t)&__p);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Input symbol '", 14);
          v18 = *(char *)(a4 + 23);
          v19 = v18 >= 0 ? a4 : *(_QWORD *)a4;
          v20 = v18 >= 0 ? *(unsigned __int8 *)(a4 + 23) : *(_QWORD *)(a4 + 8);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' missing from target symbol table", 34);
          LogMessage::~LogMessage((LogMessage *)v86);
          if (SHIBYTE(v90) < 0)
            operator delete(__p);
        }
        v16 = -1;
        v81 = 1;
      }
      else
      {
        v81 = 0;
      }
    }
    else
    {
      v81 = 0;
      v16 = -1;
    }
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0);
    if (v22)
    {
      v24 = v23;
      v25 = 0;
      v26 = v16;
      v27 = v16;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(&__p, a2, v24);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(v86, a2, v24);
        v28 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 80))(a3, v86);
        if ((char)v87 < 0)
          operator delete(v86[0]);
        v29 = v28 == -1;
        if (v28 == -1)
          LODWORD(v28) = v26;
        if (v29 && v16 == -1)
        {
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v86, "INFO");
            LogMessage::LogMessage((BOOL *)v84, (uint64_t)v86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Input symbol ID ", 16);
            v31 = (_QWORD *)std::ostream::operator<<();
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" symbol '", 9);
            v33 = SHIBYTE(v90) >= 0 ? &__p : (void **)__p;
            v34 = SHIBYTE(v90) >= 0 ? HIBYTE(v90) : (uint64_t)v89;
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"' missing from target symbol table", 34);
            LogMessage::~LogMessage((LogMessage *)v84);
            if ((char)v87 < 0)
              operator delete(v86[0]);
          }
          ++v81;
          LODWORD(v28) = -1;
        }
        v36 = v92;
        if (v92 >= v93)
        {
          v38 = ((char *)v92 - (char *)v91) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v39 = v93 - v91;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if ((unint64_t)((char *)v93 - (char *)v91) >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v93, v40);
          else
            v41 = 0;
          v42 = (int *)&v41[8 * v38];
          *(_QWORD *)v42 = v24 | ((unint64_t)v28 << 32);
          v37 = v42 + 2;
          v44 = v91;
          v43 = v92;
          if (v92 != v91)
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 2;
              *((_QWORD *)v42 - 1) = v45;
              v42 -= 2;
            }
            while (v43 != v44);
            v43 = v91;
          }
          v91 = v42;
          v92 = v37;
          v93 = (int *)&v41[8 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)v92 = v24 | ((unint64_t)v28 << 32);
          v37 = v36 + 2;
        }
        v92 = v37;
        if (SHIBYTE(v90) < 0)
          operator delete(__p);
        ++v25;
        v16 = v27;
        if (v25 < v22)
          v24 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 64))(a2, v25);
      }
      while (v25 != v22);
    }
    v9 = a8;
    v11 = a1;
    if (v81)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
      LogMessage::LogMessage((BOOL *)v86, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Target symbol table missing: ", 29);
      v46 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" input symbols", 14);
      LogMessage::~LogMessage((LogMessage *)v86);
      if (SHIBYTE(v90) < 0)
      {
        operator delete(__p);
        if (!a5)
          goto LABEL_65;
        goto LABEL_64;
      }
    }
    if (a5)
LABEL_64:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a3);
  }
LABEL_65:
  __p = 0;
  v89 = 0;
  v90 = 0;
  if (a6 && a7)
  {
    v47 = *(unsigned __int8 *)(v9 + 23);
    if ((v47 & 0x80u) != 0)
      v47 = *(_QWORD *)(v9 + 8);
    if (v47)
    {
      v48 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a7 + 80))(a7, v9);
      if (v48 == -1)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v86, "INFO");
          LogMessage::LogMessage((BOOL *)v84, (uint64_t)v86);
          v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Output symbol '", 15);
          v51 = *(char *)(v9 + 23);
          v52 = v51 >= 0 ? v9 : *(_QWORD *)v9;
          v53 = v51 >= 0 ? *(unsigned __int8 *)(v9 + 23) : *(_QWORD *)(v9 + 8);
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v52, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"' missing from target symbol table", 34);
          LogMessage::~LogMessage((LogMessage *)v84);
          if ((char)v87 < 0)
            operator delete(v86[0]);
        }
        v48 = -1;
        v49 = 1;
      }
      else
      {
        v49 = 0;
      }
    }
    else
    {
      v49 = 0;
      v48 = -1;
    }
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 120))(a6);
    v56 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a6 + 64))(a6, 0);
    if (v55)
    {
      v57 = v56;
      v58 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a6 + 72))(v86, a6, v57);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a6 + 72))(v84, a6, v57);
        v59 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a7 + 80))(a7, v84);
        if (v85 < 0)
          operator delete(v84[0]);
        v60 = v59 == -1;
        if (v59 == -1)
          LODWORD(v59) = v48;
        if (v60 && v48 == -1)
        {
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v84, "INFO");
            LogMessage::LogMessage(&v83, (uint64_t)v84);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Output symbol ID ", 17);
            v62 = (_QWORD *)std::ostream::operator<<();
            v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" symbol '", 9);
            v64 = (v87 & 0x80u) == 0 ? v86 : (void **)v86[0];
            v65 = (v87 & 0x80u) == 0 ? (void *)v87 : v86[1];
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, (uint64_t)v65);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"' missing from target symbol table", 34);
            LogMessage::~LogMessage((LogMessage *)&v83);
            if (v85 < 0)
              operator delete(v84[0]);
          }
          ++v49;
          LODWORD(v59) = -1;
        }
        v67 = v89;
        if (v89 >= v90)
        {
          v69 = ((char *)v89 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v69 + 1) >> 61)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v70 = ((char *)v90 - (_BYTE *)__p) >> 2;
          if (v70 <= v69 + 1)
            v70 = v69 + 1;
          if ((unint64_t)((char *)v90 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v70;
          if (v71)
            v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v90, v71);
          else
            v72 = 0;
          v73 = (unint64_t *)&v72[8 * v69];
          *v73 = v57 | ((unint64_t)v59 << 32);
          v68 = v73 + 1;
          v75 = (char *)__p;
          v74 = (char *)v89;
          if (v89 != __p)
          {
            do
            {
              v76 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *--v73 = v76;
            }
            while (v74 != v75);
            v74 = (char *)__p;
          }
          __p = v73;
          v89 = v68;
          v90 = (unint64_t *)&v72[8 * v71];
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v89 = v57 | ((unint64_t)v59 << 32);
          v68 = v67 + 1;
        }
        v89 = v68;
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (++v58 < v55)
          v57 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 64))(a6, v58);
      }
      while (v58 != v55);
    }
    v11 = a1;
    if (v49)
    {
      std::string::basic_string[abi:ne180100]<0>(v86, "WARNING");
      LogMessage::LogMessage((BOOL *)v84, (uint64_t)v86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Target symbol table missing: ", 29);
      v77 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" output symbols", 15);
      LogMessage::~LogMessage((LogMessage *)v84);
      if ((char)v87 < 0)
        operator delete(v86[0]);
    }
    if (a9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(a1, a7);
  }
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v11, &v91, (int **)&__p);
  if (__p)
  {
    v89 = (unint64_t *)__p;
    operator delete(__p);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
}

void sub_22BDB3BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  void *v38;

  if (a30 < 0)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  v38 = *(void **)(v36 - 112);
  if (v38)
  {
    *(_QWORD *)(v36 - 104) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, int **a2, int **a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v14;
  void *__p[2];
  char v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD v25[5];
  _QWORD v26[5];

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  std::unordered_map<int,int>::unordered_map<std::__wrap_iter<std::pair<int,int> const*>>((uint64_t)v26, *a2, a2[1]);
  std::unordered_map<int,int>::unordered_map<std::__wrap_iter<std::pair<int,int> const*>>((uint64_t)v25, *a3, a3[1]);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v22);
  while (1)
  {
    if (!v22)
    {
      if ((int)v24 >= v23)
        goto LABEL_39;
LABEL_7:
      v7 = v24;
      goto LABEL_8;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22) & 1) != 0)
      break;
    if (!v22)
      goto LABEL_7;
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 24))();
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 272))(a1, v7, &v21);
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21) & 1) == 0)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v18 = *(_QWORD *)v8;
      v19 = *(_DWORD *)(v8 + 8);
      v20 = *(_DWORD *)(v8 + 12);
      v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v26, (int *)&v18);
      if (v9)
      {
        if (*((_DWORD *)v9 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          LogMessage::LogMessage(&v17, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Input symbol ID ", 16);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" missing from target vocabulary", 31);
          goto LABEL_30;
        }
        LODWORD(v18) = *((_DWORD *)v9 + 5);
      }
      v10 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v25, (int *)&v18 + 1);
      if (v10)
      {
        if (*((_DWORD *)v10 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          LogMessage::LogMessage(&v17, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Output symbol id ", 17);
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" missing from target vocabulary", 31);
LABEL_30:
          LogMessage::~LogMessage((LogMessage *)&v17);
          if (v16 < 0)
            operator delete(__p[0]);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, 4, 4);
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          goto LABEL_36;
        }
        HIDWORD(v18) = *((_DWORD *)v10 + 5);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 80))(v21, &v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    }
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    else
      ++v24;
  }
  if (v22)
    (*(void (**)(void))(*(_QWORD *)v22 + 8))();
LABEL_39:
  v14 = fst::RelabelProperties(v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v14, 0xFFFFFFFF0007);
LABEL_36:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v25);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v26);
}

void sub_22BDB406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v25 - 72);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,int>::unordered_map<std::__wrap_iter<std::pair<int,int> const*>>(uint64_t a1, int *a2, int *a3)
{
  int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int> const&>(a1, v5, v5);
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_22BDB418C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int> const&>(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_22BDB43A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  _BYTE v10[4];
  uint64_t v11;
  int v12;
  unsigned int v13;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == -1)
    return result;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v6);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v11);
  while (1)
  {
    if (!v11)
    {
      if ((int)v13 >= v12)
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0xFFFFFFFF0007);
LABEL_8:
      v7 = v13;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
      break;
    if (!v11)
      goto LABEL_8;
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 24))();
LABEL_9:
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v7);
    for (i = a2[5]; ; a2[5] = i)
    {
      v9 = a2[2];
      if (i >= (a2[3] - v9) >> 4)
        break;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 184))(a1, v7, v9 + 16 * i);
      i = a2[5] + 1;
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 24))(v10, *a2, v7);
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 160))(a1, v7, v10);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    else
      ++v13;
  }
  if (v11)
    (*(void (**)(void))(*(_QWORD *)v11 + 8))();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0xFFFFFFFF0007);
}

void sub_22BDB45A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v4, v5);
  v6 = *a1;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v6 + 120))(v6, a2, &v14);
  while (1)
  {
    if (!(_QWORD)v14)
    {
      if (v16 >= (unint64_t)v15)
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14 + 16))(v14))
      break;
    if ((_QWORD)v14)
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = *((_QWORD *)&v14 + 1) + 16 * v16;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(v4, v7);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v7 + 12);
      v9 = v8 + 16;
    }
    a1[3] = v9;
    if ((_QWORD)v14)
      (*(void (**)(_QWORD))(*(_QWORD *)v14 + 32))(v14);
    else
      ++v16;
  }
  if ((_QWORD)v14)
  {
    (*(void (**)(void))(*(_QWORD *)v14 + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (*((_QWORD *)&v15 + 1))
    --**((_DWORD **)&v15 + 1);
LABEL_18:
  v10 = (uint64_t *)a1[2];
  v11 = (uint64_t *)a1[3];
  v12 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 4);
  if (v11 == v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(v10, v11, (uint64_t)&v14, v13, 1);
}

void sub_22BDB4754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((_DWORD *)a2 - 3) < *((_DWORD *)v9 + 1))
        {
          v22 = *v9;
          v23 = *((_DWORD *)v9 + 2);
          v24 = *((_DWORD *)v9 + 3);
          *v9 = *(a2 - 2);
          *((_DWORD *)v9 + 2) = *((_DWORD *)a2 - 2);
          *((_DWORD *)v9 + 3) = *((_DWORD *)a2 - 1);
          *(a2 - 2) = v22;
          *((_DWORD *)a2 - 2) = v23;
          *((_DWORD *)a2 - 1) = v24;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(v9 + 6), (uint64_t)(a2 - 2));
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            v17 = *((_DWORD *)v9 + 2);
            v18 = *((_DWORD *)v9 + 3);
            *v9 = *v15;
            *((_DWORD *)v9 + 2) = *((_DWORD *)v15 + 2);
            *((_DWORD *)v9 + 3) = *((_DWORD *)v15 + 3);
            *v15 = v16;
            *((_DWORD *)v15 + 2) = v17;
            *((_DWORD *)v15 + 3) = v18;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*((_DWORD *)v9 - 3) >= *((_DWORD *)v9 + 1))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(v9, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, (uint64_t)v19);
          v9 = v19 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)(v19 + 2), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((_DWORD *)a2 - 4) < *(_DWORD *)v9)
        {
          v22 = *v9;
          v23 = *((_DWORD *)v9 + 2);
          v24 = *((_DWORD *)v9 + 3);
          *v9 = *(a2 - 2);
          *((_DWORD *)v9 + 2) = *((_DWORD *)a2 - 2);
          *((_DWORD *)v9 + 3) = *((_DWORD *)a2 - 1);
          *(a2 - 2) = v22;
          *((_DWORD *)a2 - 2) = v23;
          *((_DWORD *)a2 - 1) = v24;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9, (int *)v9 + 4, (int *)a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, v9 + 2, (int *)v9 + 8, a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, (uint64_t)(v9 + 2), v9 + 4, v9 + 6, a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (int *)&v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(&v9[2 * (v13 >> 1)], (int *)v9, (int *)a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9, (int *)&v9[2 * (v13 >> 1)], (int *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9 + 2, v15 - 4, (int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v9 + 4, (int *)&v9[2 * v14 + 2], (int *)a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)v15 - 2, v15, (int *)&v9[2 * v14 + 2]);
            v16 = *v9;
            v17 = *((_DWORD *)v9 + 2);
            v18 = *((_DWORD *)v9 + 3);
            *v9 = *(_QWORD *)v15;
            *((_DWORD *)v9 + 2) = v15[2];
            *((_DWORD *)v9 + 3) = v15[3];
            *(_QWORD *)v15 = v16;
            v15[2] = v17;
            v15[3] = v18;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*((_DWORD *)v9 - 4) >= *(_DWORD *)v9)
          {
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(v9, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v9, v19);
          v9 = v19 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)(v19 + 2), a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((int *)v9, (int *)a2, (int *)a2, a3);
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      do
      {
        v5 = v2;
        if (v4[5] < v4[1])
        {
          v6 = *v2;
          v7 = v4[6];
          v8 = v4[7];
          v9 = HIDWORD(*v5);
          v10 = v3;
          while (1)
          {
            v11 = result + v10;
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(result + v10);
            *(_DWORD *)(v11 + 24) = *(_DWORD *)(result + v10 + 8);
            *(_DWORD *)(v11 + 28) = *(_DWORD *)(result + v10 + 12);
            if (!v10)
              break;
            v10 -= 16;
            if (*(_DWORD *)(v11 - 12) <= (int)v9)
            {
              v12 = result + v10 + 16;
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *(_QWORD *)v12 = v6;
          *(_DWORD *)(v12 + 8) = v7;
          *(_DWORD *)(v12 + 12) = v8;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(_DWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;

  if (result != (_DWORD *)a2)
  {
    v2 = result + 4;
    if (result + 4 != (_DWORD *)a2)
    {
      v3 = result + 7;
      do
      {
        v4 = v2;
        if (result[5] < result[1])
        {
          v5 = *v2;
          v6 = result[6];
          v7 = result[7];
          v8 = HIDWORD(*v4);
          v9 = v3;
          do
          {
            v10 = v9;
            *(_QWORD *)(v9 - 3) = *(_QWORD *)(v9 - 7);
            *(v9 - 1) = *(v9 - 5);
            v11 = *(v9 - 4);
            v9 -= 4;
            *v10 = v11;
          }
          while (*(v10 - 10) > (int)v8);
          *(_QWORD *)(v9 - 3) = v5;
          *(v9 - 1) = v6;
          *v9 = v7;
        }
        v2 = v4 + 2;
        v3 += 4;
        result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    v5 = *a1;
    v6 = *((_DWORD *)a1 + 2);
    v7 = *((_DWORD *)a1 + 3);
    if (v4 < v3)
    {
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a1 + 3) = *((_DWORD *)a3 + 3);
      *a3 = v5;
      *((_DWORD *)a3 + 2) = v6;
      *((_DWORD *)a3 + 3) = v7;
      return 1;
    }
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
    *a2 = v5;
    *((_DWORD *)a2 + 2) = v6;
    *((_DWORD *)a2 + 3) = v7;
    if (*((_DWORD *)a3 + 1) >= SHIDWORD(v5))
      return 1;
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
    *a3 = v5;
    *((_DWORD *)a3 + 2) = v6;
    *((_DWORD *)a3 + 3) = v7;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *a2;
    v9 = *((_DWORD *)a2 + 2);
    v10 = *((_DWORD *)a2 + 3);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
    *a3 = v8;
    *((_DWORD *)a3 + 2) = v9;
    *((_DWORD *)a3 + 3) = v10;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1))
      return 1;
    v11 = *a1;
    v12 = *((_DWORD *)a1 + 2);
    v13 = *((_DWORD *)a1 + 3);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
    *a2 = v11;
    *((_DWORD *)a2 + 2) = v12;
    *((_DWORD *)a2 + 3) = v13;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v2 = *a1;
  v3 = HIDWORD(*a1);
  if (*(_DWORD *)(a2 - 12) <= (int)v3)
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if ((unint64_t)v7 >= a2)
        break;
      v8 = *((_DWORD *)v7 + 1);
      v7 += 2;
    }
    while (v8 <= (int)v3);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4 + 2;
      v6 = *((_DWORD *)v4 + 5);
      v4 += 2;
    }
    while (v6 <= (int)v3);
  }
  if ((unint64_t)v5 >= a2)
  {
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 16;
      v10 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
    }
    while (v10 > (int)v3);
  }
  v11 = *((_DWORD *)a1 + 2);
  v12 = *((_DWORD *)a1 + 3);
  while ((unint64_t)v5 < v9)
  {
    v13 = *v5;
    v14 = *((_DWORD *)v5 + 2);
    v15 = *((_DWORD *)v5 + 3);
    *v5 = *(_QWORD *)v9;
    *((_DWORD *)v5 + 2) = *(_DWORD *)(v9 + 8);
    *((_DWORD *)v5 + 3) = *(_DWORD *)(v9 + 12);
    *(_QWORD *)v9 = v13;
    *(_DWORD *)(v9 + 8) = v14;
    *(_DWORD *)(v9 + 12) = v15;
    do
    {
      v16 = *((_DWORD *)v5 + 5);
      v5 += 2;
    }
    while (v16 <= (int)v3);
    do
    {
      v17 = *(_DWORD *)(v9 - 12);
      v9 -= 16;
    }
    while (v17 > (int)v3);
  }
  if (v5 - 2 != a1)
  {
    *a1 = *(v5 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v5 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v5 - 1);
  }
  *(v5 - 2) = v2;
  *((_DWORD *)v5 - 2) = v11;
  *((_DWORD *)v5 - 1) = v12;
  return v5;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v2 = 0;
  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 3);
  v6 = HIDWORD(*a1);
  do
  {
    v7 = HIDWORD(a1[v2 + 2]);
    v2 += 2;
  }
  while (v7 < (int)v6);
  v8 = &a1[v2];
  if (v2 == 2)
  {
    while ((unint64_t)v8 < a2)
    {
      v9 = a2 - 16;
      v11 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
      if (v11 < (int)v6)
        goto LABEL_9;
    }
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 16;
      v10 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
    }
    while (v10 >= (int)v6);
  }
LABEL_9:
  v12 = v8;
  if ((unint64_t)v8 < v9)
  {
    v13 = v9;
    do
    {
      v14 = *v12;
      v15 = *((_DWORD *)v12 + 2);
      v16 = *((_DWORD *)v12 + 3);
      *v12 = *(_QWORD *)v13;
      *((_DWORD *)v12 + 2) = *(_DWORD *)(v13 + 8);
      *((_DWORD *)v12 + 3) = *(_DWORD *)(v13 + 12);
      *(_QWORD *)v13 = v14;
      *(_DWORD *)(v13 + 8) = v15;
      *(_DWORD *)(v13 + 12) = v16;
      do
      {
        v17 = *((_DWORD *)v12 + 5);
        v12 += 2;
      }
      while (v17 < (int)v6);
      do
      {
        v18 = *(_DWORD *)(v13 - 12);
        v13 -= 16;
      }
      while (v18 >= (int)v6);
    }
    while ((unint64_t)v12 < v13);
  }
  if (v12 - 2 != a1)
  {
    *a1 = *(v12 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v12 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v12 - 1);
  }
  *(v12 - 2) = v3;
  *((_DWORD *)v12 - 2) = v4;
  *((_DWORD *)v12 - 1) = v5;
  return v12 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_DWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a1 + 12);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(_QWORD *)(a2 - 16) = v6;
        *(_DWORD *)(a2 - 8) = v7;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v10 + 4) < *(_DWORD *)(v9 + 4))
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_DWORD *)(v10 + 8);
      v15 = *(_DWORD *)(v10 + 12);
      v16 = HIDWORD(*(_QWORD *)v10);
      v17 = v11;
      while (1)
      {
        v18 = a1 + v17;
        *(_QWORD *)(v18 + 48) = *(_QWORD *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 56) = *(_DWORD *)(a1 + v17 + 40);
        *(_DWORD *)(v18 + 60) = *(_DWORD *)(a1 + v17 + 44);
        if (v17 == -32)
          break;
        v17 -= 16;
        if (*(_DWORD *)(v18 + 20) <= (int)v16)
        {
          v19 = a1 + v17 + 48;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *(_QWORD *)v19 = v13;
      *(_DWORD *)(v19 + 8) = v14;
      *(_DWORD *)(v19 + 12) = v15;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    v9 = *(_QWORD *)a3;
    result = *(float *)(a3 + 8);
    v10 = *(_DWORD *)(a3 + 12);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
    *(_QWORD *)a4 = v9;
    *(float *)(a4 + 8) = result;
    *(_DWORD *)(a4 + 12) = v10;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      v11 = *(_QWORD *)a2;
      result = *(float *)(a2 + 8);
      v12 = *(_DWORD *)(a2 + 12);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_QWORD *)a3 = v11;
      *(float *)(a3 + 8) = result;
      *(_DWORD *)(a3 + 12) = v12;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        v13 = *(_QWORD *)a1;
        result = *(float *)(a1 + 8);
        v14 = *(_DWORD *)(a1 + 12);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        *(_QWORD *)a2 = v13;
        *(float *)(a2 + 8) = result;
        *(_DWORD *)(a2 + 12) = v14;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 4) < *(_DWORD *)(a4 + 4))
  {
    v11 = *(_QWORD *)a4;
    result = *(float *)(a4 + 8);
    v12 = *(_DWORD *)(a4 + 12);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a5 + 12);
    *(_QWORD *)a5 = v11;
    *(float *)(a5 + 8) = result;
    *(_DWORD *)(a5 + 12) = v12;
    if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
    {
      v13 = *(_QWORD *)a3;
      result = *(float *)(a3 + 8);
      v14 = *(_DWORD *)(a3 + 12);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_QWORD *)a4 = v13;
      *(float *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 12) = v14;
      if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
      {
        v15 = *(_QWORD *)a2;
        result = *(float *)(a2 + 8);
        v16 = *(_DWORD *)(a2 + 12);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_QWORD *)a3 = v15;
        *(float *)(a3 + 8) = result;
        *(_DWORD *)(a3 + 12) = v16;
        if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
        {
          v17 = *(_QWORD *)a1;
          result = *(float *)(a1 + 8);
          v18 = *(_DWORD *)(a1 + 12);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_QWORD *)a2 = v17;
          *(float *)(a2 + 8) = result;
          *(_DWORD *)(a2 + 12) = v18;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*((_DWORD *)v14 + 1) < *(_DWORD *)(a1 + 4))
        {
          v15 = *v14;
          v16 = *((_DWORD *)v14 + 2);
          v17 = *((_DWORD *)v14 + 3);
          *v14 = *(_QWORD *)a1;
          *((_DWORD *)v14 + 2) = *(_DWORD *)(a1 + 8);
          *((_DWORD *)v14 + 3) = *(_DWORD *)(a1 + 12);
          *(_QWORD *)a1 = v15;
          *(_DWORD *)(a1 + 8) = v16;
          *(_DWORD *)(a1 + 12) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = a2 - 2;
      do
      {
        v20 = *(_QWORD *)a1;
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a1 + 12);
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v18);
        if (v19 == (uint64_t *)v23)
        {
          *(_QWORD *)v23 = v20;
          *(_DWORD *)(v23 + 8) = v21;
          *(_DWORD *)(v23 + 12) = v22;
        }
        else
        {
          *(_QWORD *)v23 = *v19;
          *(_DWORD *)(v23 + 8) = *((_DWORD *)v19 + 2);
          *(_DWORD *)(v23 + 12) = *((_DWORD *)v19 + 3);
          *v19 = v20;
          *((_DWORD *)v19 + 2) = v21;
          *((_DWORD *)v19 + 3) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (uint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *((_DWORD *)v8 + 1);
        v11 = *((_DWORD *)v8 + 5);
        v8 += 2 * (v10 < v11);
        if (v10 < v11)
          v7 = v9;
      }
      if (*((_DWORD *)v8 + 1) >= *((_DWORD *)a4 + 1))
      {
        v12 = *a4;
        v13 = *((_DWORD *)a4 + 2);
        v14 = *((_DWORD *)a4 + 3);
        v15 = HIDWORD(*a4);
        do
        {
          v16 = a4;
          a4 = v8;
          *v16 = *v8;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v8 + 2);
          *((_DWORD *)v16 + 3) = *((_DWORD *)v8 + 3);
          if (v5 < v7)
            break;
          v17 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 16 * v17);
          v18 = 2 * v7 + 2;
          if (v18 < a3)
          {
            v19 = *((_DWORD *)v8 + 1);
            v20 = *((_DWORD *)v8 + 5);
            v8 += 2 * (v19 < v20);
            if (v19 < v20)
              v17 = v18;
          }
          v7 = v17;
        }
        while (*((_DWORD *)v8 + 1) >= (int)v15);
        *a4 = v12;
        *((_DWORD *)a4 + 2) = v13;
        *((_DWORD *)a4 + 3) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1 + 16 * (v3 + 1);
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = *(_DWORD *)(v6 + 4);
      v10 = *(_DWORD *)(v6 + 20);
      v6 += 16 * (v9 < v10);
      if (v9 < v10)
        v7 = v8;
    }
    *(_QWORD *)a1 = *(_QWORD *)v6;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(v6 + 12);
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    if (*(_DWORD *)(result + 16 * v4 + 4) < *(_DWORD *)(a2 - 12))
    {
      v7 = *(_QWORD *)(a2 - 16);
      v5 = a2 - 16;
      v6 = v7;
      v8 = *(_DWORD *)(v5 + 8);
      v9 = *(_DWORD *)(v5 + 12);
      v10 = HIDWORD(v7);
      do
      {
        v11 = v5;
        v5 = result + 16 * v4;
        *(_QWORD *)v11 = *(_QWORD *)v5;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v5 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v5 + 12);
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v4 + 4) < (int)v10);
      *(_QWORD *)v5 = v6;
      *(_DWORD *)(v5 + 8) = v8;
      *(_DWORD *)(v5 + 12) = v9;
    }
  }
  return result;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  _BYTE v10[4];
  uint64_t v11;
  int v12;
  unsigned int v13;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == -1)
    return result;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v6);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v11);
  while (1)
  {
    if (!v11)
    {
      if ((int)v13 >= v12)
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0xFFFFFFFF0007);
LABEL_8:
      v7 = v13;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
      break;
    if (!v11)
      goto LABEL_8;
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 24))();
LABEL_9:
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v7);
    for (i = a2[5]; ; a2[5] = i)
    {
      v9 = a2[2];
      if (i >= (a2[3] - v9) >> 4)
        break;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 184))(a1, v7, v9 + 16 * i);
      i = a2[5] + 1;
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 24))(v10, *a2, v7);
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 160))(a1, v7, v10);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    else
      ++v13;
  }
  if (v11)
    (*(void (**)(void))(*(_QWORD *)v11 + 8))();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0xFFFFFFFF0007);
}

void sub_22BDB5900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v4, v5);
  v6 = *a1;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v6 + 120))(v6, a2, &v14);
  while (1)
  {
    if (!(_QWORD)v14)
    {
      if (v16 >= (unint64_t)v15)
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14 + 16))(v14))
      break;
    if ((_QWORD)v14)
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = *((_QWORD *)&v14 + 1) + 16 * v16;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(v4, v7);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v7 + 12);
      v9 = v8 + 16;
    }
    a1[3] = v9;
    if ((_QWORD)v14)
      (*(void (**)(_QWORD))(*(_QWORD *)v14 + 32))(v14);
    else
      ++v16;
  }
  if ((_QWORD)v14)
  {
    (*(void (**)(void))(*(_QWORD *)v14 + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (*((_QWORD *)&v15 + 1))
    --**((_DWORD **)&v15 + 1);
LABEL_18:
  v10 = (uint64_t *)a1[2];
  v11 = (uint64_t *)a1[3];
  v12 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 4);
  if (v11 == v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(v10, v11, (uint64_t)&v14, v13, 1);
}

void sub_22BDB5AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      do
      {
        v5 = v2;
        if (v4[4] < *v4)
        {
          v6 = *v2;
          v7 = v4[6];
          v8 = v3;
          v9 = v4[7];
          while (1)
          {
            v10 = result + v8;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(result + v8);
            *(_DWORD *)(v10 + 24) = *(_DWORD *)(result + v8 + 8);
            *(_DWORD *)(v10 + 28) = *(_DWORD *)(result + v8 + 12);
            if (!v8)
              break;
            v8 -= 16;
            if (*(_DWORD *)(v10 - 16) <= (int)v6)
            {
              v11 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *(_QWORD *)v11 = v6;
          *(_DWORD *)(v11 + 8) = v7;
          *(_DWORD *)(v11 + 12) = v9;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(_DWORD *result, _DWORD *a2)
{
  _QWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      v3 = result + 7;
      do
      {
        v4 = v2;
        if (result[4] < *result)
        {
          v5 = *v2;
          v6 = result[6];
          v7 = v3;
          v8 = result[7];
          do
          {
            v9 = v7;
            *(_QWORD *)(v7 - 3) = *(_QWORD *)(v7 - 7);
            *(v7 - 1) = *(v7 - 5);
            v10 = *(v7 - 4);
            v7 -= 4;
            *v9 = v10;
          }
          while (*(v9 - 11) > (int)v5);
          *(_QWORD *)(v7 - 3) = v5;
          *(v7 - 1) = v6;
          *v7 = v8;
        }
        v2 = v4 + 2;
        v3 += 4;
        result = v4;
      }
      while (v4 + 2 != (_QWORD *)a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    v5 = *a1;
    v6 = *((_DWORD *)a1 + 2);
    v7 = *((_DWORD *)a1 + 3);
    if (v4 < v3)
    {
      *a1 = *(_QWORD *)a3;
      *((_DWORD *)a1 + 2) = a3[2];
      *((_DWORD *)a1 + 3) = a3[3];
      *(_QWORD *)a3 = v5;
      a3[2] = v6;
      a3[3] = v7;
      return 1;
    }
    *a1 = *(_QWORD *)a2;
    *((_DWORD *)a1 + 2) = a2[2];
    *((_DWORD *)a1 + 3) = a2[3];
    *(_QWORD *)a2 = v5;
    a2[2] = v6;
    a2[3] = v7;
    if (*a3 >= (int)v5)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = a3[2];
    a2[3] = a3[3];
    *(_QWORD *)a3 = v5;
    a3[2] = v6;
    a3[3] = v7;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *(_QWORD *)a2;
    v9 = a2[2];
    v10 = a2[3];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = a3[2];
    a2[3] = a3[3];
    *(_QWORD *)a3 = v8;
    a3[2] = v9;
    a3[3] = v10;
    if (*a2 >= *(_DWORD *)a1)
      return 1;
    v11 = *a1;
    v12 = *((_DWORD *)a1 + 2);
    v13 = *((_DWORD *)a1 + 3);
    *a1 = *(_QWORD *)a2;
    *((_DWORD *)a1 + 2) = a2[2];
    *((_DWORD *)a1 + 3) = a2[3];
    *(_QWORD *)a2 = v11;
    a2[2] = v12;
    a2[3] = v13;
    return 2;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(_DWORD *a1, unint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_QWORD *)a1;
  if (*(_DWORD *)(a2 - 16) <= (int)*(_QWORD *)a1)
  {
    v5 = a1 + 4;
    do
    {
      v3 = v5;
      if ((unint64_t)v5 >= a2)
        break;
      v5 += 4;
    }
    while (*v3 <= (int)v2);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[4];
      v3 += 4;
    }
    while (v4 <= (int)v2);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      v6 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v6 > (int)v2);
  }
  v7 = a1[2];
  v8 = a1[3];
  while ((unint64_t)v3 < a2)
  {
    v9 = *(_QWORD *)v3;
    v10 = v3[2];
    v11 = v3[3];
    *(_QWORD *)v3 = *(_QWORD *)a2;
    v3[2] = *(_DWORD *)(a2 + 8);
    v3[3] = *(_DWORD *)(a2 + 12);
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = v11;
    do
    {
      v12 = v3[4];
      v3 += 4;
    }
    while (v12 <= (int)v2);
    do
    {
      v13 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v13 > (int)v2);
  }
  if (v3 - 4 != a1)
  {
    *(_QWORD *)a1 = *((_QWORD *)v3 - 2);
    a1[2] = *(v3 - 2);
    a1[3] = *(v3 - 1);
  }
  *((_QWORD *)v3 - 2) = v2;
  *(v3 - 2) = v7;
  *(v3 - 1) = v8;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v2 = 0;
  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 3);
  do
  {
    v6 = a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < (int)v3);
  v7 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v9 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v9 >= (int)v3);
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v8 >= (int)v3);
  }
  v10 = &a1[v2];
  if (v7 < a2)
  {
    v11 = a2;
    do
    {
      v12 = *v10;
      v13 = *((_DWORD *)v10 + 2);
      v14 = *((_DWORD *)v10 + 3);
      *v10 = *(_QWORD *)v11;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(v11 + 8);
      *((_DWORD *)v10 + 3) = *(_DWORD *)(v11 + 12);
      *(_QWORD *)v11 = v12;
      *(_DWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 12) = v14;
      do
      {
        v15 = *((_DWORD *)v10 + 4);
        v10 += 2;
      }
      while (v15 < (int)v3);
      do
      {
        v16 = *(_DWORD *)(v11 - 16);
        v11 -= 16;
      }
      while (v16 >= (int)v3);
    }
    while ((unint64_t)v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    *a1 = *(v10 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v10 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v10 - 1);
  }
  *(v10 - 2) = v3;
  *((_DWORD *)v10 - 2) = v4;
  *((_DWORD *)v10 - 1) = v5;
  return v10 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  int v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 4) < *(_DWORD *)a1)
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_DWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a1 + 12);
        *(_QWORD *)a1 = *((_QWORD *)a2 - 2);
        *(_DWORD *)(a1 + 8) = *(a2 - 2);
        *(_DWORD *)(a1 + 12) = *(a2 - 1);
        *((_QWORD *)a2 - 2) = v6;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (int *)(a1 + 16), a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, (uint64_t *)(a1 + 16), (int *)(a1 + 32), (uint64_t *)a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a1 + 16, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 48), (uint64_t *)a2 - 2);
      return 1;
    default:
      v9 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v10 = (_DWORD *)(a1 + 48);
      if ((_DWORD *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (*v10 < *v9)
    {
      v13 = *(_QWORD *)v10;
      v14 = v10[2];
      v15 = v11;
      v16 = v10[3];
      while (1)
      {
        v17 = a1 + v15;
        *(_QWORD *)(v17 + 48) = *(_QWORD *)(a1 + v15 + 32);
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v15 + 40);
        *(_DWORD *)(v17 + 60) = *(_DWORD *)(a1 + v15 + 44);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (*(_DWORD *)(v17 + 16) <= (int)v13)
        {
          v18 = a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v13;
      *(_DWORD *)(v18 + 8) = v14;
      *(_DWORD *)(v18 + 12) = v16;
      if (++v12 == 8)
        return v10 + 4 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 4;
    if (v10 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  float result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (int *)a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    result = *((float *)a3 + 2);
    v10 = a3[3];
    *(_QWORD *)a3 = *a4;
    a3[2] = *((_DWORD *)a4 + 2);
    a3[3] = *((_DWORD *)a4 + 3);
    *a4 = v9;
    *((float *)a4 + 2) = result;
    *((_DWORD *)a4 + 3) = v10;
    if (*a3 < *(_DWORD *)a2)
    {
      v11 = *a2;
      result = *((float *)a2 + 2);
      v12 = *((_DWORD *)a2 + 3);
      *a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = a3[2];
      *((_DWORD *)a2 + 3) = a3[3];
      *(_QWORD *)a3 = v11;
      *((float *)a3 + 2) = result;
      a3[3] = v12;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        v13 = *(_QWORD *)a1;
        result = *(float *)(a1 + 8);
        v14 = *(_DWORD *)(a1 + 12);
        *(_QWORD *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
        *a2 = v13;
        *((float *)a2 + 2) = result;
        *((_DWORD *)a2 + 3) = v14;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  float result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, (uint64_t *)a2, (int *)a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v11 = *a4;
    result = *((float *)a4 + 2);
    v12 = *((_DWORD *)a4 + 3);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = *((_DWORD *)a5 + 2);
    *((_DWORD *)a4 + 3) = *((_DWORD *)a5 + 3);
    *a5 = v11;
    *((float *)a5 + 2) = result;
    *((_DWORD *)a5 + 3) = v12;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      v13 = *a3;
      result = *((float *)a3 + 2);
      v14 = *((_DWORD *)a3 + 3);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = *((_DWORD *)a4 + 2);
      *((_DWORD *)a3 + 3) = *((_DWORD *)a4 + 3);
      *a4 = v13;
      *((float *)a4 + 2) = result;
      *((_DWORD *)a4 + 3) = v14;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        v15 = *(_QWORD *)a2;
        result = *(float *)(a2 + 8);
        v16 = *(_DWORD *)(a2 + 12);
        *(_QWORD *)a2 = *a3;
        *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
        *(_DWORD *)(a2 + 12) = *((_DWORD *)a3 + 3);
        *a3 = v15;
        *((float *)a3 + 2) = result;
        *((_DWORD *)a3 + 3) = v16;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          v17 = *(_QWORD *)a1;
          result = *(float *)(a1 + 8);
          v18 = *(_DWORD *)(a1 + 12);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_QWORD *)a2 = v17;
          *(float *)(a2 + 8) = result;
          *(_DWORD *)(a2 + 12) = v18;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int *v23;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_QWORD *)v14;
          v16 = v14[2];
          v17 = v14[3];
          *(_QWORD *)v14 = *(_QWORD *)a1;
          v14[2] = a1[2];
          v14[3] = a1[3];
          *(_QWORD *)a1 = v15;
          a1[2] = v16;
          a1[3] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = a2 - 4;
      do
      {
        v20 = *(_QWORD *)a1;
        v21 = a1[2];
        v22 = a1[3];
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v18);
        if (v19 == v23)
        {
          *(_QWORD *)v23 = v20;
          v23[2] = v21;
          v23[3] = v22;
        }
        else
        {
          *(_QWORD *)v23 = *(_QWORD *)v19;
          v23[2] = v19[2];
          v23[3] = v19[3];
          *(_QWORD *)v19 = v20;
          v19[2] = v21;
          v19[3] = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, (uint64_t)(v23 + 4), a4, ((char *)(v23 + 4) - (char *)a1) >> 4);
        }
        v19 -= 4;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (int *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[4];
        if (*v8 <= v11)
          v10 = v8[4];
        if (*v8 < v11)
        {
          v8 += 4;
          v7 = v9;
        }
      }
      if (v10 >= *a4)
      {
        v12 = *(_QWORD *)a4;
        v13 = a4[2];
        v14 = a4[3];
        do
        {
          v15 = a4;
          a4 = v8;
          *(_QWORD *)v15 = *(_QWORD *)v8;
          v15[2] = v8[2];
          v15[3] = v8[3];
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (int *)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v17 = *v8;
            v7 = v16;
          }
          else
          {
            v17 = *v8;
            v18 = v8[4];
            if (*v8 <= v18)
              v17 = v8[4];
            if (*v8 >= v18)
              v7 = v16;
            else
              v8 += 4;
          }
        }
        while (v17 >= (int)v12);
        *(_QWORD *)a4 = v12;
        a4[2] = v13;
        a4[3] = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[4 * v3 + 4];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = *v6;
      v10 = v6[4];
      if (*v6 < v10)
        v6 += 4;
      if (v9 < v10)
        v7 = v8;
    }
    *(_QWORD *)a1 = *(_QWORD *)v6;
    a1[2] = v6[2];
    a1[3] = v6[3];
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 16 * (v4 >> 1);
    v7 = a2 - 16;
    if (*(_DWORD *)v6 < *(_DWORD *)(a2 - 16))
    {
      v8 = *(_QWORD *)(a2 - 16);
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      do
      {
        v11 = v7;
        v7 = v6;
        *(_QWORD *)v11 = *(_QWORD *)v6;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v6 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v6 + 12);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = result + 16 * v5;
      }
      while (*(_DWORD *)v6 < (int)v8);
      *(_QWORD *)v7 = v8;
      *(_DWORD *)(v7 + 8) = v9;
      *(_DWORD *)(v7 + 12) = v10;
    }
  }
  return result;
}

_QWORD *cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SpecialMatcher(_QWORD *a1, uint64_t a2, __int32 a3, int a4, int a5, int a6, int32x2_t *a7)
{
  uint64_t v14;
  uint64_t v15;

  v14 = operator new();
  v15 = operator new();
  fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(v15, a2, a3, a6, 0, 0, 0);
  fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(v14, a2, a3, a5, 0, v15);
  fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::RhoMatcher((uint64_t)a1, a2, a3, a4, 0, v14);
  *a1 = &off_24F6535D8;
  if (!a7)
  {
    a7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(a7, a2, a3, 1);
  }
  a1[8] = a7;
  return a1;
}

void sub_22BDB6B44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x22E2FB328](v2, 0x10E1C4054F459C6);
  v4 = v1[1];
  *v1 = &off_24F653920;
  v1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::RhoMatcher(uint64_t a1, uint64_t a2, __int32 a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  BOOL v12;
  void *v14[2];
  char v15;
  BOOL v16;
  void *__p[2];
  char v18;
  BOOL v19;

  v6 = a6;
  *(_QWORD *)a1 = &off_24F653920;
  if (!a6)
  {
    v6 = operator new();
    fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(v6, a2, a3, -1, 0, 0);
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = -1;
  *(_BYTE *)(a1 + 56) = 0;
  if (a3 == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"RhoMatcher: Bad match type", 26);
    LogMessage::~LogMessage((LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_DWORD *)(a1 + 16) = 4;
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v14, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v14, "ERROR");
    LogMessage::LogMessage(&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"RhoMatcher: 0 cannot be used as rho_label", 41);
    LogMessage::~LogMessage((LogMessage *)&v16);
    if (v15 < 0)
      operator delete(v14[0]);
    *(_DWORD *)(a1 + 20) = -1;
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (a5 == 1)
  {
    v12 = 1;
  }
  else
  {
    if (a5)
    {
      *(_BYTE *)(a1 + 24) = 0;
      return a1;
    }
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(_BYTE *)(a1 + 24) = v12;
  return a1;
}

void sub_22BDB6DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(exception_object);
}

int32x2_t *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  uint64_t v7;
  int32x2_t v8;

  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(a1, v7, a3, a4);
  v8 = a1[1];
  a1[1] = a1[2];
  if (v8)
    (*(void (**)(int32x2_t))(**(_QWORD **)&v8 + 8))(v8);
  return a1;
}

{
  int v5;
  __int32 v6;
  void *__p[2];
  char v9;
  BOOL v10;

  *a1 = (int32x2_t)&off_24F653730;
  a1[1] = 0;
  a1[2] = (int32x2_t)a2;
  a1[3].i32[0] = -1;
  a1[4] = 0;
  a1[5].i32[0] = a3;
  a1[5].i32[1] = a4;
  a1[6].i32[0] = -1;
  a1[7] = 0;
  v5 = *fst::TropicalWeightTpl<float>::One();
  a1[8] = (int32x2_t)0xFFFFFFFFLL;
  a1[9].i32[0] = v5;
  a1[9].i32[1] = -1;
  a1[10].i8[2] = 0;
  a1[11] = (int32x2_t)&off_24F653820;
  fst::internal::MemoryArenaImpl<48ul>::MemoryArenaImpl(&a1[12], 1);
  a1[18] = 0;
  a1[11] = (int32x2_t)&off_24F6537C8;
  v6 = a1[5].i32[0];
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      a1[8] = vrev64_s32(a1[8]);
    }
    else if (v6 != 4)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      LogMessage::LogMessage(&v10, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SortedMatcher: Bad match type", 29);
      LogMessage::~LogMessage((LogMessage *)&v10);
      if (v9 < 0)
        operator delete(__p[0]);
      a1[5].i32[0] = 4;
      a1[10].i8[2] = 1;
    }
  }
  return a1;
}

_QWORD *cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~SpecialMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24F6535D8;
  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &off_24F653920;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~SpecialMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24F6535D8;
  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &off_24F653920;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x22E2FB328);
}

_QWORD *cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::RhoMatcher((uint64_t)v4, a1, a2);
  *v4 = &off_24F6535D8;
  v4[8] = 0;
  return v4;
}

void sub_22BDB7030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40A8D10E09);
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 52) != (_DWORD)a2)
  {
    v2 = result;
    *(_DWORD *)(result + 52) = a2;
    result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(_QWORD *)(result + 8), a2);
    *(_BYTE *)(v2 + 56) = *(_DWORD *)(v2 + 20) != -1;
  }
  return result;
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;
  void *__p[2];
  char v8;
  BOOL v9;

  v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(*(_QWORD *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD)
        return result;
      if (!*(_BYTE *)(a1 + 56))
        return result;
      result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
      *(_BYTE *)(a1 + 56) = result;
      if (!result)
        return result;
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"RhoMatcher::Find: bad label (rho)", 33);
  LogMessage::~LogMessage((LogMessage *)&v9);
  if (v8 < 0)
    operator delete(__p[0]);
  result = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

void sub_22BDB71B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Done(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
                                                                                                  + 8));
}

_QWORD *fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(uint64_t a1)
{
  int v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_DWORD *)(a1 + 28);
  result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value(*(_QWORD *)(a1 + 8));
  v4 = result;
  if (v2 != -1)
  {
    v5 = *result;
    *(_QWORD *)(a1 + 32) = *result;
    result = (_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v4 + 2);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v4 + 3);
    if (!*(_BYTE *)(a1 + 24))
    {
      v7 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16) == 1)
      {
        *(_DWORD *)result = v7;
        return result;
      }
      goto LABEL_10;
    }
    v6 = *(_DWORD *)(a1 + 20);
    if (v6 == (_DWORD)v5)
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
    if (v6 == HIDWORD(v5))
    {
      v7 = *(_DWORD *)(a1 + 28);
LABEL_10:
      *(_DWORD *)(a1 + 36) = v7;
    }
  }
  return result;
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Next(uint64_t a1)
{
  return fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(_QWORD *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Properties(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *__p[2];
  char v9;
  BOOL v10;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a1 + 48))
    result |= 4uLL;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int8 *)(a1 + 24);
      v5 = result & 0xFFFFEFFF3FFAFFFFLL;
      v6 = 0xFFFFEFFF0FF3FFFFLL;
LABEL_8:
      v7 = result & v6;
      if (v4)
        return v7;
      else
        return v5;
    }
    if (v3 == 1)
    {
      v4 = *(unsigned __int8 *)(a1 + 24);
      v5 = result & 0xFFFFEFFFCFEEFFFFLL;
      v6 = 0xFFFFEFFF0FCFFFFFLL;
      goto LABEL_8;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"RhoMatcher: Bad match type: ", 28);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v10);
    if (v9 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_22BDB73E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) == -1 || *(_DWORD *)(a1 + 16) == 4)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  else
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8)) | 1;
}

int *fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  return fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2, a3);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  *(_DWORD *)(a1 + 52) = a2;
  fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(_QWORD *)(a1 + 8), a2);
  v4 = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  *(_BYTE *)(a1 + 56) = v4;
  if (v4)
    return -1;
  else
    return fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Priority(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(uint64_t a1, uint64_t a2, __int32 a3, int a4, char a5, int a6, int32x2_t *a7)
{
  int32x2_t *v7;
  BOOL v14;
  void *__p[2];
  char v17;
  BOOL v18;

  v7 = a7;
  *(_QWORD *)a1 = &off_24F653698;
  if (!a7)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(v7, a2, a3, 1);
  }
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 48) = -1;
  *(_BYTE *)(a1 + 56) = a5;
  *(_BYTE *)(a1 + 57) = 0;
  if (a3 == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"PhiMatcher: Bad match type", 26);
    LogMessage::~LogMessage((LogMessage *)&v18);
    if (v17 < 0)
      operator delete(__p[0]);
    *(_DWORD *)(a1 + 16) = 4;
    *(_BYTE *)(a1 + 57) = 1;
  }
  if (a6 == 1)
  {
    v14 = 1;
  }
  else
  {
    if (a6)
    {
      *(_BYTE *)(a1 + 24) = 0;
      return a1;
    }
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(_BYTE *)(a1 + 24) = v14;
  return a1;
}

void sub_22BDB7654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  v20 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~PhiMatcher(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F653698;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~PhiMatcher(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F653698;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(v4, a1, a2);
  return v4;
}

void sub_22BDB77B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C4068031F8ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 48) != (_DWORD)a2)
  {
    v2 = a2;
    v3 = result;
    result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(_QWORD *)(result + 8), a2);
    *(_DWORD *)(v3 + 48) = v2;
    *(_BYTE *)(v3 + 25) = *(_DWORD *)(v3 + 20) != -1;
  }
  return result;
}

BOOL fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(uint64_t a1, int a2)
{
  uint64_t v5;
  _BOOL8 v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *v17;
  void *__p[2];
  char v20;
  BOOL v21;
  BOOL v22;
  void *v23[2];
  char v24;

  if (*(_DWORD *)(a1 + 20) == a2 && (a2 + 1) >= 2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v23, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v23, "ERROR");
    LogMessage::LogMessage((BOOL *)__p, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"PhiMatcher::Find: bad label (phi): ", 35);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)__p);
    if (v24 < 0)
      operator delete(v23[0]);
    v6 = 0;
    *(_BYTE *)(a1 + 57) = 1;
  }
  else
  {
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 48));
    *(_DWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 52) = *fst::TropicalWeightTpl<float>::One();
    if (*(_DWORD *)(a1 + 20))
      goto LABEL_6;
    if (a2 == -1)
    {
      return 0;
    }
    else
    {
      if (a2)
      {
LABEL_6:
        if ((a2 + 1) < 2 || !*(_BYTE *)(a1 + 25))
          return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), a2);
        LODWORD(v5) = *(_DWORD *)(a1 + 48);
        v6 = 1;
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), a2))
        {
          v7 = (_QWORD *)MEMORY[0x24BEDB310];
          while (1)
          {
            if (*(_DWORD *)(a1 + 20))
              v8 = *(_DWORD *)(a1 + 20);
            else
              v8 = -1;
            v6 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), v8);
            if (!v6)
              return v6;
            if (*(_BYTE *)(a1 + 56)
              && *(_DWORD *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8))
                           + 12) == (_DWORD)v5)
            {
              *(_DWORD *)(a1 + 28) = a2;
              return 1;
            }
            v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8));
            v10 = *(float *)(a1 + 52);
            if (v10 == -INFINITY || (v11 = *(float *)(v9 + 8), v11 >= -INFINITY) && v11 <= -INFINITY)
            {
              v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
            }
            else
            {
              v13 = v11 == INFINITY || v10 == INFINITY;
              v12 = v10 + v11;
              if (v13)
                v12 = INFINITY;
            }
            *(float *)(a1 + 52) = v12;
            v5 = *(unsigned int *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8))
                                 + 12);
            v14 = *(_QWORD *)(a1 + 8);
            if (*(_BYTE *)(v14 + 80))
            {
              *(_BYTE *)(v14 + 80) = 0;
            }
            else
            {
              v15 = *(_QWORD **)(v14 + 32);
              if (*v15)
              {
                (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 32))(*v15);
                v14 = *(_QWORD *)(a1 + 8);
              }
              else
              {
                ++v15[4];
              }
            }
            if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(v14))
              break;
LABEL_41:
            fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(_QWORD *)(a1 + 8), v5);
            if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), a2))
              return v6;
          }
          v16 = FLAGS_fst_error_fatal;
          if (FLAGS_fst_error_fatal)
          {
            std::string::basic_string[abi:ne180100]<0>(v23, "FATAL");
            LogMessage::LogMessage(&v22, (uint64_t)v23);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
            LogMessage::LogMessage(&v21, (uint64_t)__p);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"PhiMatcher: Phi non-determinism not supported", 45);
          if (v16)
          {
            LogMessage::~LogMessage((LogMessage *)&v22);
            if (v24 < 0)
            {
              v17 = v23[0];
LABEL_39:
              operator delete(v17);
            }
          }
          else
          {
            LogMessage::~LogMessage((LogMessage *)&v21);
            if (v20 < 0)
            {
              v17 = __p[0];
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a1 + 57) = 1;
          goto LABEL_41;
        }
        return v6;
      }
      if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), -1))
        return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), 0);
      *(_DWORD *)(a1 + 28) = 0;
      return 1;
    }
  }
  return v6;
}

void sub_22BDB7B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(a1 + 8));
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  float v5;
  float v6;
  float v7;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;

  v2 = *(_DWORD *)(a1 + 28);
  if (v2 != -1)
  {
    if (v2)
      goto LABEL_3;
LABEL_21:
    v12 = *fst::TropicalWeightTpl<float>::One();
    *(_QWORD *)(a1 + 32) = 0xFFFFFFFFLL;
    v13 = (_DWORD *)(a1 + 32);
    v14 = v13[4];
    v4 = v13;
    v13[2] = v12;
    v13[3] = v14;
    if (*(v13 - 4) == 2)
      *(_QWORD *)v13 = 0xFFFFFFFF00000000;
    return (uint64_t)v4;
  }
  if (*(float *)(a1 + 52) == *(float *)fst::TropicalWeightTpl<float>::One())
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8));
  if (!*(_DWORD *)(a1 + 28))
    goto LABEL_21;
LABEL_3:
  v3 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v3;
  v4 = (_DWORD *)(a1 + 32);
  v5 = *(float *)(v3 + 8);
  *(float *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(v3 + 12);
  v6 = *(float *)(a1 + 52);
  if (v6 == -INFINITY || v5 >= -INFINITY && v5 <= -INFINITY)
  {
    v7 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v9 = v5 == INFINITY || v6 == INFINITY;
    v7 = v6 + v5;
    if (v9)
      v7 = INFINITY;
  }
  *(float *)(a1 + 40) = v7;
  v10 = *(_DWORD *)(a1 + 28);
  if (v10 == -1)
    return (uint64_t)v4;
  if (*(_BYTE *)(a1 + 24))
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (*(_DWORD *)(a1 + 32) == v11)
      *v4 = v10;
    if (*(_DWORD *)(a1 + 36) != v11)
      return (uint64_t)v4;
    goto LABEL_25;
  }
  if (*(_DWORD *)(a1 + 16) != 1)
  {
LABEL_25:
    *(_DWORD *)(a1 + 36) = v10;
    return (uint64_t)v4;
  }
  *v4 = v10;
  return (uint64_t)v4;
}

_QWORD *fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[1];
  if (*(_BYTE *)(v1 + 80))
  {
    *(_BYTE *)(v1 + 80) = 0;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 32);
    result = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 32))(result);
    else
      ++*(_QWORD *)(v2 + 32);
  }
  return result;
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  void *__p[2];
  char v10;
  BOOL v11;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a1 + 57))
    result |= 4uLL;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (v3 == 2)
    {
      if (*(_DWORD *)(a1 + 20))
        v5 = result;
      else
        v5 = result | 0x8800000;
      v6 = *(unsigned __int8 *)(a1 + 24);
      v7 = v5 & 0xFFFFEFFF0FFAFFFFLL;
      v4 = 0xFFFFEFFF0FF3FFFFLL;
      goto LABEL_14;
    }
    if (v3 == 1)
    {
      v4 = 0xFFFFEFFF0FCFFFFFLL;
      if (*(_DWORD *)(a1 + 20))
        v5 = result;
      else
        v5 = result | 0x2800000;
      v6 = *(unsigned __int8 *)(a1 + 24);
      v7 = v5 & 0xFFFFEFFF0FEEFFFFLL;
LABEL_14:
      v8 = v5 & v4;
      if (v6)
        return v8;
      else
        return v7;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"PhiMatcher: Bad match type: ", 28);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_22BDB7F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) == -1 || *(_DWORD *)(a1 + 16) == 4)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  else
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8)) | 1;
}

int *fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  uint64_t v6;
  int *result;
  float v8;
  uint64_t v9;
  int *v10;
  __n128 v11;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  float v20;
  uint64_t v21;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  result = (int *)(*(_QWORD *(**)(char *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))((char *)&v19 + 4, v6, a2);
  if (*(_DWORD *)(a1 + 20) == -1)
  {
    v8 = *((float *)&v19 + 1);
  }
  else
  {
    result = fst::TropicalWeightTpl<float>::Zero();
    v8 = *((float *)&v19 + 1);
    LODWORD(v21) = HIDWORD(v19);
    v20 = 0.0;
    v20 = *(float *)result;
    if (*((float *)&v19 + 1) == v20)
    {
      HIDWORD(v19) = *fst::TropicalWeightTpl<float>::One();
      while (1)
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(_QWORD *)(a1 + 8), a2);
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(&v19, v9, a2);
        v10 = fst::TropicalWeightTpl<float>::Zero();
        LODWORD(v21) = v19;
        v20 = 0.0;
        v20 = *(float *)v10;
        v11.n128_u32[0] = v19;
        if (*(float *)&v19 != v20)
          break;
        v12 = *(_DWORD *)(a1 + 20) ? *(_DWORD *)(a1 + 20) : -1;
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), v12))
          break;
        v13 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8));
        if (*((float *)&v19 + 1) == -INFINITY || (v14 = *(float *)(v13 + 8), v14 >= -INFINITY) && v14 <= -INFINITY)
        {
          v15 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else
        {
          v16 = v14 == INFINITY || *((float *)&v19 + 1) == INFINITY;
          v15 = *((float *)&v19 + 1) + v14;
          if (v16)
            v15 = INFINITY;
        }
        *((float *)&v19 + 1) = v15;
        if ((_DWORD)a2 == *(_DWORD *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8))
                                     + 12))
        {
          result = fst::TropicalWeightTpl<float>::Zero();
          goto LABEL_26;
        }
        a2 = *(unsigned int *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(_QWORD *)(a1 + 8))
                             + 12);
      }
      v17 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v11);
      result = (int *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(&v21, v17, a2);
      if (*((float *)&v19 + 1) == -INFINITY || *(float *)&v21 >= -INFINITY && *(float *)&v21 <= -INFINITY)
      {
        result = fst::TropicalWeightTpl<float>::NoWeight();
LABEL_26:
        v8 = *(float *)result;
        goto LABEL_32;
      }
      v18 = *(float *)&v21 == INFINITY || *((float *)&v19 + 1) == INFINITY;
      v8 = *((float *)&v19 + 1) + *(float *)&v21;
      if (v18)
        v8 = INFINITY;
    }
  }
LABEL_32:
  *a3 = v8;
  return result;
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 != -1)
  {
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(v5, a2);
    if (*(_DWORD *)(a1 + 20))
      v6 = *(_DWORD *)(a1 + 20);
    else
      v6 = -1;
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(_QWORD *)(a1 + 8), v6))
      return -1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Flags()
{
  return 0;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Final(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &off_24F653698;
  v6 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(v6, *(_QWORD *)(a2 + 8), a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

void sub_22BDB8310(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C4054F459C6);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)a1 = &off_24F653730;
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 72))(*(_QWORD *)(a2 + 16), a3);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = -1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 88) = &off_24F653820;
  fst::internal::MemoryArenaImpl<48ul>::MemoryArenaImpl((_QWORD *)(a1 + 96), 1);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 88) = &off_24F6537C8;
  return a1;
}

void sub_22BDB83E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_22BDB8480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C4054F459C6);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 4)
    return 4;
  if (v2 == 1)
    v6 = 0x10000000;
  else
    v6 = 0x40000000;
  v7 = *(_QWORD *)(a1 + 16);
  if (v2 == 1)
    v8 = 805306368;
  else
    v8 = 3221225472;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 40);
  v10 = 0x80000000;
  if (v2 == 1)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 4;
  else
    return 5;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  BOOL v8;

  if (*(_DWORD *)(result + 24) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 24) = a2;
    if (*(_DWORD *)(result + 40) == 4)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      LogMessage::LogMessage(&v8, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SortedMatcher: Bad match type", 29);
      LogMessage::~LogMessage((LogMessage *)&v8);
      if (v7 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 82) = 1;
    }
    fst::Destroy<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(*(_QWORD *)(v3 + 32), v3 + 88);
    v4 = *(_QWORD **)(v3 + 144);
    if (v4)
    {
      *(_QWORD *)(v3 + 144) = v4[5];
    }
    else
    {
      v4 = (_QWORD *)fst::internal::MemoryArenaImpl<48ul>::Allocate((_QWORD *)(v3 + 96), 1);
      v4[5] = 0;
    }
    v5 = *(_QWORD *)(v3 + 16);
    v4[4] = 0;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 120))(v5, a2, v4);
    *(_QWORD *)(v3 + 32) = v4;
    if (*v4)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v4 + 72))(*v4, 16, 16);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), a2);
    *(_QWORD *)(v3 + 56) = result;
    *(_DWORD *)(v3 + 76) = a2;
  }
  return result;
}

void sub_22BDB869C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 81) = 1;
  if (*(_BYTE *)(a1 + 82))
  {
    result = 0;
    *(_BYTE *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 48) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 48) = v4;
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Search(a1)
        || *(_BYTE *)(a1 + 80) != 0;
  }
  return result;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  if (*(_BYTE *)(a1 + 80))
    return 0;
  v3 = *(_QWORD **)(a1 + 32);
  if (*v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 16))(*v3) & 1) != 0)
      return 1;
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 81))
    return 0;
  v4 = *(_QWORD **)(a1 + 32);
  if (*v4
    && (*(_DWORD *)(a1 + 40) == 1 ? (v5 = 1) : (v5 = 2),
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v4 + 72))(*v4, v5, 15),
        v4 = *(_QWORD **)(a1 + 32),
        *v4))
  {
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  }
  else
  {
    v6 = v4[1] + 16 * v4[4];
  }
  if (*(_DWORD *)(a1 + 40) == 1)
    v7 = (_DWORD *)v6;
  else
    v7 = (_DWORD *)(v6 + 4);
  return *v7 != *(_DWORD *)(a1 + 48);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(uint64_t a1)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 80))
    return a1 + 64;
  v3 = *(_QWORD **)(a1 + 32);
  if (*v3
    && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 72))(*v3, 15, 15),
        v3 = *(_QWORD **)(a1 + 32),
        *v3))
  {
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  }
  else
  {
    return v3[1] + 16 * v3[4];
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 80))
  {
    *(_BYTE *)(result + 80) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 32);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2 | (4 * *(unsigned __int8 *)(a1 + 82));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Priority(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653820;
  a1[1] = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653820;
  a1[1] = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<40ul>::Size()
{
  return 40;
}

_QWORD *fst::internal::MemoryPoolImpl<40ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653820;
  a1[1] = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<40ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653820;
  a1[1] = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<48ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F653848;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDB8AE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<48ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<48ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<48ul>::Size()
{
  return 48;
}

_QWORD *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24F653730;
  fst::Destroy<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1[4], (uint64_t)(a1 + 11));
  a1[11] = &off_24F653820;
  a1[12] = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 15);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t fst::Destroy<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;

  if (result)
  {
    v3 = result;
    result = *(_QWORD *)result;
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v4 = *(_DWORD **)(v3 + 24);
      if (v4)
        --*v4;
    }
    *(_QWORD *)(v3 + 40) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v3;
  }
  return result;
}

uint64_t fst::internal::MemoryArenaImpl<48ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 48 * a2;
  v4 = a1[1];
  if (192 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Search(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _DWORD *v25;

  v2 = **(_QWORD **)(a1 + 32);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v3 = 1;
    else
      v3 = 2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 72))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 44))
  {
    v4 = *(_QWORD **)(a1 + 32);
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 48))(*v4);
    else
      v4[4] = 0;
    while (1)
    {
      v13 = *(_QWORD **)(a1 + 32);
      if (*v13)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13) & 1) != 0)
          return 0;
        v13 = *(_QWORD **)(a1 + 32);
        if (*v13)
        {
          v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
          goto LABEL_37;
        }
        v15 = v13[4];
      }
      else
      {
        v15 = v13[4];
        if (v15 >= v13[2])
          return 0;
      }
      v14 = v13[1] + 16 * v15;
LABEL_37:
      if (*(_DWORD *)(a1 + 40) == 1)
        v16 = (int *)v14;
      else
        v16 = (int *)(v14 + 4);
      v17 = *v16;
      v18 = *(_DWORD *)(a1 + 48);
      v19 = v17 == v18;
      v20 = 2 * (v17 > v18);
      if (v19)
        v20 = 1;
      if (v20)
        return v20 == 1;
      v12 = *(_QWORD **)(a1 + 32);
      if (*v12)
        (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 32))(*v12);
      else
        ++v12[4];
    }
  }
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = v6 + ((v5 - v6) >> 1);
      v8 = *(_QWORD **)(a1 + 32);
      if (!*v8)
        break;
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v8 + 56))(*v8, v6 + ((v5 - v6) >> 1));
      v8 = *(_QWORD **)(a1 + 32);
      if (!*v8)
      {
        v10 = v8[4];
        goto LABEL_16;
      }
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
LABEL_17:
      if (*(_DWORD *)(a1 + 40) == 1)
        v11 = (_DWORD *)v9;
      else
        v11 = (_DWORD *)(v9 + 4);
      if (*v11 >= *(_DWORD *)(a1 + 48))
        v5 = v6 + ((v5 - v6) >> 1);
      else
        v6 = v7 + 1;
      if (v6 >= v5)
        goto LABEL_47;
    }
    v8[4] = v7;
    v10 = v6 + ((v5 - v6) >> 1);
LABEL_16:
    v9 = v8[1] + 16 * v10;
    goto LABEL_17;
  }
  v6 = 0;
LABEL_47:
  v22 = *(_QWORD **)(a1 + 32);
  if (*v22)
    (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v22 + 56))(*v22, v6);
  else
    v22[4] = v6;
  if (v6 >= *(_QWORD *)(a1 + 56))
    return 0;
  v23 = *(_QWORD **)(a1 + 32);
  if (*v23)
    v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 24))(*v23);
  else
    v24 = v23[1] + 16 * v23[4];
  if (*(_DWORD *)(a1 + 40) == 1)
    v25 = (_DWORD *)v24;
  else
    v25 = (_DWORD *)(v24 + 4);
  return *v25 == *(_DWORD *)(a1 + 48);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, __int32 a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  BOOL v12;
  void *v14[2];
  char v15;
  BOOL v16;
  void *__p[2];
  char v18;
  BOOL v19;

  v6 = a6;
  *(_QWORD *)a1 = &off_24F653888;
  if (!a6)
  {
    v6 = operator new();
    fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(v6, a2, a3, -1, 1, 0, 0);
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  if (a3 == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SigmaMatcher: Bad match type", 28);
    LogMessage::~LogMessage((LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_DWORD *)(a1 + 16) = 4;
    *(_BYTE *)(a1 + 52) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v14, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v14, "ERROR");
    LogMessage::LogMessage(&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SigmaMatcher: 0 cannot be used as sigma_label", 45);
    LogMessage::~LogMessage((LogMessage *)&v16);
    if (v15 < 0)
      operator delete(v14[0]);
    *(_DWORD *)(a1 + 20) = -1;
    *(_BYTE *)(a1 + 52) = 1;
  }
  if (a5 == 1)
  {
    v12 = 1;
  }
  else
  {
    if (a5)
    {
      *(_BYTE *)(a1 + 24) = 0;
      return a1;
    }
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(_BYTE *)(a1 + 24) = v12;
  return a1;
}

void sub_22BDB918C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~SigmaMatcher(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F653888;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~SigmaMatcher(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F653888;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(v4, a1, a2);
  return v4;
}

void sub_22BDB9318(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 56) != (_DWORD)a2)
  {
    v2 = a2;
    v3 = result;
    *(_DWORD *)(result + 56) = a2;
    v4 = *(_QWORD *)(result + 8);
    if (*(_DWORD *)(v4 + 48) != (_DWORD)a2)
    {
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(_QWORD *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 48) = v2;
      *(_BYTE *)(v4 + 25) = *(_DWORD *)(v4 + 20) != -1;
    }
    v5 = *(_DWORD *)(v3 + 20);
    result = v5 != -1
          && fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(_QWORD *)(v3 + 8), v5);
    *(_BYTE *)(v3 + 25) = result;
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;
  void *__p[2];
  char v8;
  BOOL v9;

  *(_DWORD *)(a1 + 48) = a2;
  v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    result = fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(_QWORD *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD)
        return result;
      if (!*(_BYTE *)(a1 + 25))
        return result;
      result = fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
      if (!result)
        return result;
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SigmaMatcher::Find: bad label (sigma)", 37);
  LogMessage::~LogMessage((LogMessage *)&v9);
  if (v8 < 0)
    operator delete(__p[0]);
  result = 0;
  *(_BYTE *)(a1 + 52) = 1;
  return result;
}

void sub_22BDB94E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Done(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                  + 8));
}

_QWORD *fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value(uint64_t a1)
{
  int v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_DWORD *)(a1 + 28);
  result = (_QWORD *)fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(_QWORD *)(a1 + 8));
  v4 = result;
  if (v2 != -1)
  {
    v5 = *result;
    *(_QWORD *)(a1 + 32) = *result;
    result = (_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v4 + 2);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v4 + 3);
    if (!*(_BYTE *)(a1 + 24))
    {
      v7 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16) == 1)
      {
        *(_DWORD *)result = v7;
        return result;
      }
      goto LABEL_10;
    }
    v6 = *(_DWORD *)(a1 + 20);
    if (v6 == (_DWORD)v5)
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
    if (v6 == HIDWORD(v5))
    {
      v7 = *(_DWORD *)(a1 + 28);
LABEL_10:
      *(_DWORD *)(a1 + 36) = v7;
    }
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (*(_BYTE *)(v2 + 80))
  {
    *(_BYTE *)(v2 + 80) = 0;
  }
  else
  {
    v3 = *(_QWORD **)(v2 + 32);
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    }
    else
    {
      ++v3[4];
    }
  }
  result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(v2);
  if (result && *(_BYTE *)(a1 + 25) && *(_DWORD *)(a1 + 28) == -1 && *(int *)(a1 + 48) >= 1)
  {
    result = fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Properties(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  BOOL v7;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a1 + 52))
    result |= 4uLL;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = -4030464001;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 2)
    {
      v4 = -3225223169;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 1)
    {
      v4 = -809304065;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SigmaMatcher: Bad match type: ", 30);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v7);
    if (v6 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_22BDB978C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) == -1 || *(_DWORD *)(a1 + 16) == 4)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  else
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8)) | 1;
}

int *fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  return fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == -1)
    return fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Priority(*(_QWORD *)(a1 + 8), a2);
  fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(a1, a2);
  if (!*(_BYTE *)(a1 + 25))
    return fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Priority(*(_QWORD *)(a1 + 8), a2);
  else
    return -1;
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &off_24F653888;
  v6 = operator new();
  fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(v6, *(_QWORD *)(a2 + 8), a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = -1;
  return a1;
}

void sub_22BDB98FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C4068031F8ALL);
  _Unwind_Resume(a1);
}

_QWORD *fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~RhoMatcher(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F653920;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~RhoMatcher(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F653920;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::RhoMatcher(v4, a1, a2);
  return v4;
}

void sub_22BDB9A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C405FEA184BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::RhoMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &off_24F653920;
  v6 = operator new();
  fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(v6, *(_QWORD *)(a2 + 8), a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = -1;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_22BDB9AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

void sub_22BDB9C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  v18[11] = v19;
  v18[12] = &off_24F653848;
  std::__list_imp<std::unique_ptr<char []>>::clear(v18 + 15);
  v21 = v18[1];
  v18[1] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

double fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase1<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  double result;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  double v14[3];

  v7[0] = *(_BYTE *)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = 0;
  v10 = 1;
  v5 = *(_OWORD *)(a3 + 32);
  v11 = *(_OWORD *)(a3 + 16);
  v12 = v5;
  v13 = 1;
  std::allocate_shared[abi:ne180100]<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>(a1, a2, (uint64_t)v7, v14);
  result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(_QWORD *a1)
{
  *a1 = off_24F654D38;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(_QWORD *a1)
{
  *a1 = off_24F654D38;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFst(v4, a1, a2);
  return v4;
}

void sub_22BDB9E8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24F654EC8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 16))(a1);
  *(_QWORD *)v4 = &off_24F654E48;
  *a2 = v4;
  return result;
}

void sub_22BDB9F40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a1, a2);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0xD8uLL);
  result = std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_22BDB9FE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F653A68;
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_22BDBA028(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F653A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F653A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  fst *v14;
  const fst::SymbolTable *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *__p[2];
  char v27;
  BOOL v28;
  BOOL v29;
  std::string __str;

  *(_QWORD *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(a1, (char *)a4) = &off_24F653AB8;
  v8 = *(uint64_t **)(a4 + 48);
  if (!v8)
  {
    v8 = (uint64_t *)operator new();
    fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 32), *(_QWORD **)(a4 + 40));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_QWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 152) = v8[1];
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 72))(*(_QWORD *)(a1 + 152));
  v10 = *(_QWORD *)(a4 + 56);
  v11 = v10;
  if (!v10)
  {
    v11 = operator new();
    fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::CompactHashBiTable(v11, 0, 0, 0);
    v10 = *(_QWORD *)(a4 + 56);
  }
  *(_QWORD *)(a1 + 176) = v11;
  if (v10)
    v12 = *(_BYTE *)(a4 + 64) == 0;
  else
    v12 = 0;
  v13 = !v12;
  *(_BYTE *)(a1 + 184) = v13;
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v14 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
  v15 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (!fst::CompatSymbols(v14, v15, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    LogMessage::LogMessage(&v29, (uint64_t)&__str);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ComposeFst: Output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    LogMessage::~LogMessage((LogMessage *)&v29);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 96))(*(_QWORD *)(a1 + 160));
  if (v17)
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 104))(*(_QWORD *)(a1 + 168));
  if (v19)
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  v20 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    LogMessage::LogMessage(&v28, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ComposeFstImpl: Match type: ", 28);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v28);
    if (v27 < 0)
      operator delete(__p[0]);
  }
  if (*(_DWORD *)(a1 + 188) == 4)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, 0xFFFFFFFF0007, 0);
  v23 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 80))(*(_QWORD *)(a1 + 144), v21);
  v24 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 80))(*(_QWORD *)(a1 + 152), v22);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFF00000000FFFFLL | fst::ComposeProperties(v23, v24) & 0xFFFFFFFF0004;
  return a1;
}

void sub_22BDBA434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v28;

  if (a25 < 0)
    operator delete(__p);
  v28 = *v26;
  *v26 = 0;
  if (v28)
    std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100]((uint64_t)v26, v28);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v25);
  _Unwind_Resume(a1);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  BOOL v6;
  int v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *__p[2];
  char v13;
  BOOL v14;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 88))(*(_QWORD *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 1) != 2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ComposeFst: 1st argument cannot perform required matching ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(sort?).", 8);
  }
  else if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 88))(*(_QWORD *)(a1 + 152)) & 1) != 0
         && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 1) != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ComposeFst: 2nd argument cannot perform required matching ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(sort?).", 8);
  }
  else
  {
    v2 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0);
    v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0);
    if (v3 == 1 && v2 == 2)
      v5 = 3;
    else
      v5 = 2;
    v6 = v2 == 2;
    if (v2 == 2)
      v7 = v5;
    else
      v7 = 1;
    if (v6 || v3 == 1)
      goto LABEL_36;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 1) == 2)
    {
      v7 = 2;
      goto LABEL_36;
    }
    v7 = 1;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 1) == 1)
      goto LABEL_36;
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  LogMessage::~LogMessage((LogMessage *)&v14);
  if (v13 < 0)
    operator delete(__p[0]);
  v7 = 4;
LABEL_36:
  *(_DWORD *)(a1 + 188) = v7;
}

void sub_22BDBA7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(uint64_t a1)
{
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 56))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 80))(*(_QWORD *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 80))(*(_QWORD *)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_22BDBA92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10F3C40FFC02FA9);
  _Unwind_Resume(a1);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 104) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = (int *)a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(v7, v5, v6, &v16);
  if (fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a3);
  return v6;
}

void sub_22BDBAA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C402D4BD5F2);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 16))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 16))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

int *fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(_QWORD *a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int *result;
  float v10;
  uint64_t v11;
  int *v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v6 = *(_QWORD *)(a1[22] + 104);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(_QWORD *)(*(_QWORD *)(a1[18] + 8) + 8), v8, &v15);
  result = fst::TropicalWeightTpl<float>::Zero();
  v10 = v15;
  v17 = v15;
  v16 = 0.0;
  v16 = *(float *)result;
  if (v15 != v16)
  {
    v11 = v7[1];
    fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(_QWORD *)(*(_QWORD *)(a1[19] + 8) + 8), v11, &v14);
    result = fst::TropicalWeightTpl<float>::Zero();
    v10 = v14;
    v17 = v14;
    v16 = 0.0;
    v16 = *(float *)result;
    if (v14 != v16)
    {
      v12 = (int *)a1[17];
      LOBYTE(v17) = *(_BYTE *)(v6 + 12 * a2 + 8);
      result = fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(v12, v8, v11, &v17);
      if (v15 == -INFINITY || v14 >= -INFINITY && v14 <= -INFINITY)
      {
        result = fst::TropicalWeightTpl<float>::NoWeight();
        v10 = *(float *)result;
      }
      else
      {
        v13 = v14 == INFINITY || v15 == INFINITY;
        v10 = v15 + v14;
        if (v13)
          v10 = INFINITY;
      }
    }
  }
  *a3 = v10;
  return result;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v10[8];
  unint64_t v11;

  *(_QWORD *)a1 = &off_24F653500;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24F653BB0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 104) = *a2;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  v5 = v4;
  if (!v4)
  {
    v5 = operator new();
    v6 = *((_QWORD *)a2 + 1);
    v10[0] = *a2;
    v11 = v6;
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(v5, v10);
    v7 = v11;
    *(_BYTE *)(v5 + 88) = v11 == 0;
    *(_DWORD *)(v5 + 92) = -1;
    *(_QWORD *)(v5 + 96) = 0;
    *(_BYTE *)(v5 + 104) = v10[0];
    if (v7 <= 0x1FA0)
      v7 = 8096;
    *(_QWORD *)(v5 + 112) = v7;
    *(_BYTE *)(v5 + 120) = 0;
    *(_QWORD *)(v5 + 128) = 0;
    v4 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(a1 + 120) = v5;
  v8 = v4 == 0;
  *(_BYTE *)(a1 + 128) = v8;
  if (a2[24])
    v8 = 1;
  *(_BYTE *)(a1 + 129) = v8;
  return a1;
}

void sub_22BDBADB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  MEMORY[0x22E2FB328](v2, 0x10A0C40690396FALL);
  if (*v3)
    operator delete(*v3);
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitMatcher()
{
  return 0;
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(uint64_t a1)
{
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_22BDF36C0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = operator new();
  *(_OWORD *)v4 = xmmword_22BDF36C0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  v5 = operator new();
  *(_OWORD *)v5 = xmmword_22BDF36C0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(a1 + 80) = v5;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(a1);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_22BDBAF1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  uint64_t *v4;
  void *v6;

  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 7);
  v6 = *v3;
  if (*v3)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 8);
    do
    {
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(v2 + 8 * v3++), (uint64_t **)(a1 + 72));
      v2 = *(_QWORD *)(a1 + 8);
    }
    while (v3 < (*(_QWORD *)(a1 + 16) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 16) = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear((_QWORD *)(a1 + 32));
}

_QWORD *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(_QWORD *result, uint64_t **a2)
{
  _QWORD *v3;
  _QWORD **v4;

  if (result)
  {
    v3 = result;
    v4 = (_QWORD **)(result + 3);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v3 + 6);
    result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a2);
    v3[8] = result[7];
    result[7] = v3;
  }
  return result;
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](_QWORD ***a1)
{
  _QWORD **v1;
  _QWORD *v2;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v1[1] = v2;
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(v1 + 3, v2, ((char *)v1[2] - (char *)v2) >> 4);
  }
}

void fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  _QWORD *v4;

  if (a3 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    if (!__p)
      return;
    __p[4] = v4[7];
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    if (!__p)
      return;
    __p[2] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    if (!__p)
      return;
    __p[8] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    if (!__p)
      return;
    __p[16] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    if (!__p)
      return;
    __p[32] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    if (!__p)
      return;
    __p[64] = v4[7];
    goto LABEL_22;
  }
  if (a3 > 0x40)
  {
    operator delete(__p);
    return;
  }
  v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
  if (__p)
  {
    __p[128] = v4[7];
LABEL_22:
    v4[7] = __p;
  }
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x11uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 128);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653C38;
    fst::internal::MemoryArenaImpl<24ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F653BE0;
    v6 = *(_QWORD *)(*v3 + 128);
    *(_QWORD *)(*v3 + 128) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBB224(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__append((char **)a1, a2 - v4);
  }
}

void std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<16ul>::Size()
{
  return 16;
}

_QWORD *fst::internal::MemoryPoolImpl<16ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<16ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<24ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F653C60;
  a1[1] = 24 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBB5D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<24ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<24ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<24ul>::Size()
{
  return 24;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x21uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 256);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653CF8;
    fst::internal::MemoryArenaImpl<40ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F653CA0;
    v6 = *(_QWORD *)(*v3 + 256);
    *(_QWORD *)(*v3 + 256) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBB714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<32ul>::Size()
{
  return 32;
}

_QWORD *fst::internal::MemoryPoolImpl<32ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<32ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<40ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F653D20;
  a1[1] = 40 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBB8C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<40ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<40ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<40ul>::Size()
{
  return 40;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x41uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653DB8;
    fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F653D60;
    v6 = *(_QWORD *)(*v3 + 512);
    *(_QWORD *)(*v3 + 512) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBB9FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<64ul>::Size()
{
  return 64;
}

_QWORD *fst::internal::MemoryPoolImpl<64ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<64ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F653DE0;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBBBA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<72ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<72ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<72ul>::Size()
{
  return 72;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x81uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653E78;
    fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F653E20;
    v6 = *(_QWORD *)(*v3 + 1024);
    *(_QWORD *)(*v3 + 1024) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBBCE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<128ul>::Size()
{
  return 128;
}

_QWORD *fst::internal::MemoryPoolImpl<128ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<128ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F653EA0;
  a1[1] = 136 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBBE90(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<136ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<136ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<136ul>::Size()
{
  return 136;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x101uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653F38;
    fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F653EE0;
    v6 = *(_QWORD *)(*v3 + 2048);
    *(_QWORD *)(*v3 + 2048) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBBFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<256ul>::Size()
{
  return 256;
}

_QWORD *fst::internal::MemoryPoolImpl<256ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<256ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F653F60;
  a1[1] = 264 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBC178(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<264ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<264ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<264ul>::Size()
{
  return 264;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x201uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653FF8;
    fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F653FA0;
    v6 = *(_QWORD *)(*v3 + 4096);
    *(_QWORD *)(*v3 + 4096) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBC2B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<512ul>::Size()
{
  return 512;
}

_QWORD *fst::internal::MemoryPoolImpl<512ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<512ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F654020;
  a1[1] = 520 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBC464(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<520ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<520ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<520ul>::Size()
{
  return 520;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x401uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x2000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6540B8;
    fst::internal::MemoryArenaImpl<1032ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654060;
    v6 = *(_QWORD *)(*v3 + 0x2000);
    *(_QWORD *)(*v3 + 0x2000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBC5A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<1024ul>::Size()
{
  return 1024;
}

_QWORD *fst::internal::MemoryPoolImpl<1024ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<1024ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<1032ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F6540E0;
  a1[1] = 1032 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBC750(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<1032ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<1032ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<1032ul>::Size()
{
  return 1032;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x41uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653DB8;
    fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654120;
    v6 = *(_QWORD *)(*v3 + 512);
    *(_QWORD *)(*v3 + 512) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBC88C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x81uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653E78;
    fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654160;
    v6 = *(_QWORD *)(*v3 + 1024);
    *(_QWORD *)(*v3 + 1024) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBC9E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x101uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653F38;
    fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6541A0;
    v6 = *(_QWORD *)(*v3 + 2048);
    *(_QWORD *)(*v3 + 2048) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBCB34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x201uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653FF8;
    fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6541E0;
    v6 = *(_QWORD *)(*v3 + 4096);
    *(_QWORD *)(*v3 + 4096) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBCC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x401uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x2000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6540B8;
    fst::internal::MemoryArenaImpl<1032ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654220;
    v6 = *(_QWORD *)(*v3 + 0x2000);
    *(_QWORD *)(*v3 + 0x2000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBCDE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x800)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x801uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x4000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6542B8;
    fst::internal::MemoryArenaImpl<2056ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654260;
    v6 = *(_QWORD *)(*v3 + 0x4000);
    *(_QWORD *)(*v3 + 0x4000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBCF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6542B8;
  a1[1] = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6542B8;
  a1[1] = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<2048ul>::Size()
{
  return 2048;
}

_QWORD *fst::internal::MemoryPoolImpl<2048ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6542B8;
  a1[1] = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<2048ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6542B8;
  a1[1] = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<2056ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F6542E0;
  a1[1] = 2056 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBD0E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<2056ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<2056ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<2056ul>::Size()
{
  return 2056;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x8007)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x1001uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x8000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654378;
    fst::internal::MemoryArenaImpl<4104ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654320;
    v6 = *(_QWORD *)(*v3 + 0x8000);
    *(_QWORD *)(*v3 + 0x8000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBD230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654378;
  a1[1] = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654378;
  a1[1] = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<4096ul>::Size()
{
  return 4096;
}

_QWORD *fst::internal::MemoryPoolImpl<4096ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654378;
  a1[1] = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<4096ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654378;
  a1[1] = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<4104ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F6543A0;
  a1[1] = 4104 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBD3DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<4104ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<4104ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<4104ul>::Size()
{
  return 4104;
}

_QWORD *std::__list_imp<int,fst::PoolAllocator<int>>::clear(_QWORD *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (result[2])
  {
    v1 = (uint64_t)result;
    v3 = *result;
    v2 = (uint64_t *)result[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*result + 8);
    **(_QWORD **)(v3 + 8) = v4;
    result[2] = 0;
    while (v2 != (uint64_t *)v1)
    {
      v5 = (uint64_t *)v2[1];
      result = std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(v1, (uint64_t)v2);
      v2 = v5;
    }
  }
  return result;
}

_QWORD *std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(*(uint64_t **)(a1 + 24));
  if (a2)
  {
    *(_QWORD *)(a2 + 24) = result[7];
    result[7] = a2;
  }
  return result;
}

void fst::PoolAllocator<std::__list_node<int,void *>>::deallocate(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  _QWORD *v4;

  if (a3 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>(*a1);
    if (!__p)
      return;
    __p[6] = v4[7];
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(*a1);
    if (!__p)
      return;
    __p[3] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>(*a1);
    if (!__p)
      return;
    __p[12] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>(*a1);
    if (!__p)
      return;
    __p[24] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>(*a1);
    if (!__p)
      return;
    __p[48] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>(*a1);
    if (!__p)
      return;
    __p[96] = v4[7];
    goto LABEL_22;
  }
  if (a3 > 0x40)
  {
    operator delete(__p);
    return;
  }
  v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>(*a1);
  if (__p)
  {
    __p[192] = v4[7];
LABEL_22:
    v4[7] = __p;
  }
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC7)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x19uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 192);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654438;
    fst::internal::MemoryArenaImpl<32ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6543E0;
    v6 = *(_QWORD *)(*v3 + 192);
    *(_QWORD *)(*v3 + 192) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBD6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<24ul>::Size()
{
  return 24;
}

_QWORD *fst::internal::MemoryPoolImpl<24ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<24ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<32ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F654460;
  a1[1] = 32 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBD864(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<32ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<32ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<32ul>::Size()
{
  return 32;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x187)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x31uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 384);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F652F88;
    fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6544A0;
    v6 = *(_QWORD *)(*v3 + 384);
    *(_QWORD *)(*v3 + 384) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBD9A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x307)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x61uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 768);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654538;
    fst::internal::MemoryArenaImpl<104ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6544E0;
    v6 = *(_QWORD *)(*v3 + 768);
    *(_QWORD *)(*v3 + 768) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBDAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<96ul>::Size()
{
  return 96;
}

_QWORD *fst::internal::MemoryPoolImpl<96ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<96ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<104ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F654560;
  a1[1] = 104 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBDCA0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<104ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<104ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<104ul>::Size()
{
  return 104;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x607)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0xC1uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1536);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6545F8;
    fst::internal::MemoryArenaImpl<200ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6545A0;
    v6 = *(_QWORD *)(*v3 + 1536);
    *(_QWORD *)(*v3 + 1536) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBDDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<192ul>::Size()
{
  return 192;
}

_QWORD *fst::internal::MemoryPoolImpl<192ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<192ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<200ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F654620;
  a1[1] = 200 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBDF88(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<200ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<200ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<200ul>::Size()
{
  return 200;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC07)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x181uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 3072);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6546B8;
    fst::internal::MemoryArenaImpl<392ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654660;
    v6 = *(_QWORD *)(*v3 + 3072);
    *(_QWORD *)(*v3 + 3072) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBE0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<384ul>::Size()
{
  return 384;
}

_QWORD *fst::internal::MemoryPoolImpl<384ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<384ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<392ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F6546E0;
  a1[1] = 392 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBE270(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<392ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<392ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<392ul>::Size()
{
  return 392;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x300)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x301uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 6144);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654778;
    fst::internal::MemoryArenaImpl<776ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654720;
    v6 = *(_QWORD *)(*v3 + 6144);
    *(_QWORD *)(*v3 + 6144) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBE3B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<768ul>::Size()
{
  return 768;
}

_QWORD *fst::internal::MemoryPoolImpl<768ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<768ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<776ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F6547A0;
  a1[1] = 776 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBE55C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<776ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<776ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<776ul>::Size()
{
  return 776;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x600)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x601uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 12288);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654838;
    fst::internal::MemoryArenaImpl<1544ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6547E0;
    v6 = *(_QWORD *)(*v3 + 12288);
    *(_QWORD *)(*v3 + 12288) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBE69C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<1536ul>::Size()
{
  return 1536;
}

_QWORD *fst::internal::MemoryPoolImpl<1536ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<1536ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<1544ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F654860;
  a1[1] = 1544 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBE848(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<1544ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<1544ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<1544ul>::Size()
{
  return 1544;
}

uint64_t *fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8) - 1;
  *(_QWORD *)(*a1 + 8) = v3;
  if (!v3)
  {
    v5 = (void **)(v2 + 16);
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x22E2FB328](v2, 0x1020C40DB654AE0);
  }
  return a1;
}

void std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24F653BB0;
  if (*(_BYTE *)(a1 + 129))
  {
    v2 = *(uint64_t **)(a1 + 120);
    if (v2)
    {
      v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorCacheStore(v2);
      MEMORY[0x22E2FB328](v3, 0x10A0C40690396FALL);
    }
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
    operator delete(v4);
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorCacheStore(uint64_t *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear((uint64_t)a1);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 10);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 7);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SpecialMatcher(v6, a2, 2, -3, -2, -1, 0);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SpecialMatcher(a5, a3, 1, -3, -2, -1, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD *))(*v6 + 72))(v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_22BDBEB4C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x22E2FB328](v2, 0x10A1C40A8D10E09);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::CompactHashBiTable(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
    a3 = operator new();
  *(_QWORD *)a1 = a3;
  if (!a4)
    a4 = operator new();
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a1;
  *(_QWORD *)(a1 + 24) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set(a1 + 32, a2, (_QWORD *)(a1 + 16), (_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (a2)
    std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::reserve((char **)(a1 + 104), a2);
  return a1;
}

void sub_22BDBEC78(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x22E2FB328](v3, 0xC400A2AC0F1);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = operator new();
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)v8 = xmmword_22BDF36D0;
  v11 = v8;
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(&v11);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_22BDF36C0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_22BDBEE98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 16));
  return a1;
}

void std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::deallocate((uint64_t **)(a1 + 8), a2, *(_QWORD *)a1);
}

void fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::deallocate(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  _QWORD *v4;

  if (a3 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(*a1);
    if (!__p)
      return;
    __p[2] = v4[7];
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(*a1);
    if (!__p)
      return;
    __p[1] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(*a1);
    if (!__p)
      return;
    __p[4] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(*a1);
    if (!__p)
      return;
    __p[8] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(*a1);
    if (!__p)
      return;
    __p[16] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(*a1);
    if (!__p)
      return;
    __p[32] = v4[7];
    goto LABEL_22;
  }
  if (a3 > 0x40)
  {
    operator delete(__p);
    return;
  }
  v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(*a1);
  if (__p)
  {
    __p[64] = v4[7];
LABEL_22:
    v4[7] = __p;
  }
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x47)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 9uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 64);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6548F8;
    fst::internal::MemoryArenaImpl<16ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6548A0;
    v6 = *(_QWORD *)(*v3 + 64);
    *(_QWORD *)(*v3 + 64) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBF0D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6548F8;
  a1[1] = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6548F8;
  a1[1] = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryPoolImpl<8ul>::Size()
{
  return 8;
}

_QWORD *fst::internal::MemoryPoolImpl<8ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6548F8;
  a1[1] = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<8ul>::~MemoryPoolImpl(_QWORD *a1)
{
  *a1 = &off_24F6548F8;
  a1[1] = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::internal::MemoryArenaImpl<16ul>::MemoryArenaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F654920;
  a1[1] = 16 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_22BDBF278(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::MemoryArenaImpl<16ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<16ul>::~MemoryArenaImpl(_QWORD *a1)
{
  *a1 = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::MemoryArenaImpl<16ul>::Size()
{
  return 16;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x11uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 128);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653C38;
    fst::internal::MemoryArenaImpl<24ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654960;
    v6 = *(_QWORD *)(*v3 + 128);
    *(_QWORD *)(*v3 + 128) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBF3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x21uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 256);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653CF8;
    fst::internal::MemoryArenaImpl<40ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6549A0;
    v6 = *(_QWORD *)(*v3 + 256);
    *(_QWORD *)(*v3 + 256) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBF508(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x41uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653DB8;
    fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6549E0;
    v6 = *(_QWORD *)(*v3 + 512);
    *(_QWORD *)(*v3 + 512) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBF65C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x81uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653E78;
    fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654A20;
    v6 = *(_QWORD *)(*v3 + 1024);
    *(_QWORD *)(*v3 + 1024) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBF7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x101uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653F38;
    fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654A60;
    v6 = *(_QWORD *)(*v3 + 2048);
    *(_QWORD *)(*v3 + 2048) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBF904(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x201uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653FF8;
    fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654AA0;
    v6 = *(_QWORD *)(*v3 + 4096);
    *(_QWORD *)(*v3 + 4096) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDBFA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (unint64_t *)(a1 + 8);
  if (a2)
  {
    v5 = fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate((uint64_t **)(a1 + 16), a2);
    v6 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v5;
    if (v6)
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100]((uint64_t)v3, v6);
    v7 = 0;
    *v3 = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
    while (a2 != v7);
    v8 = *(_QWORD **)(a1 + 24);
    if (v8)
    {
      v9 = v8[1];
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        if (v9 >= a2)
          v9 %= a2;
      }
      else
      {
        v9 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 24;
      v12 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v13 = v12[1];
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v9)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v8;
              goto LABEL_23;
            }
            *v8 = *v12;
            *v12 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
            v12 = v8;
          }
          v13 = v9;
LABEL_23:
          v8 = v12;
          v12 = (_QWORD *)*v12;
          v9 = v13;
        }
        while (v12);
      }
    }
  }
  else
  {
    v11 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v11);
    *v3 = 0;
  }
}

_QWORD *fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<24ul>::Allocate(v2 + 1, 1);
      result[2] = 0;
      return result;
    }
    v4 = result[2];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<16ul>::Allocate(v2 + 1, 1);
      result[1] = 0;
      return result;
    }
    v4 = result[1];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<40ul>::Allocate(v2 + 1, 1);
      result[4] = 0;
      return result;
    }
    v4 = result[4];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<72ul>::Allocate(v2 + 1, 1);
      result[8] = 0;
      return result;
    }
    v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<136ul>::Allocate(v2 + 1, 1);
      result[16] = 0;
      return result;
    }
    v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<264ul>::Allocate(v2 + 1, 1);
      result[32] = 0;
      return result;
    }
    v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<520ul>::Allocate(v2 + 1, 1);
      result[64] = 0;
      return result;
    }
    v4 = result[64];
    goto LABEL_26;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t fst::internal::MemoryArenaImpl<16ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 16 * a2;
  v4 = a1[1];
  if (v4 >= a2 << 6)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<24ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 24 * a2;
  v4 = a1[1];
  if (96 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<40ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 40 * a2;
  v4 = a1[1];
  if (160 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<72ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 72 * a2;
  v4 = a1[1];
  if (288 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<136ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 136 * a2;
  v4 = a1[1];
  if (544 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<264ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 264 * a2;
  v4 = a1[1];
  if (1056 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<520ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 520 * a2;
  v4 = a1[1];
  if (2080 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node((_QWORD *)a1, *(_QWORD **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

_QWORD *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = (_QWORD *)*v2;
      result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>((uint64_t *)v3[4]);
      v2[3] = result[7];
      result[7] = v2;
      v2 = v4;
    }
    while (v4);
  }
  return result;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC7)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x19uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 192);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654438;
    fst::internal::MemoryArenaImpl<32ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654AE0;
    v6 = *(_QWORD *)(*v3 + 192);
    *(_QWORD *)(*v3 + 192) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC06A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x187)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x31uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 384);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F652F88;
    fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654B20;
    v6 = *(_QWORD *)(*v3 + 384);
    *(_QWORD *)(*v3 + 384) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC07F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x307)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x61uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 768);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654538;
    fst::internal::MemoryArenaImpl<104ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654B60;
    v6 = *(_QWORD *)(*v3 + 768);
    *(_QWORD *)(*v3 + 768) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC094C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x607)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0xC1uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1536);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6545F8;
    fst::internal::MemoryArenaImpl<200ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654BA0;
    v6 = *(_QWORD *)(*v3 + 1536);
    *(_QWORD *)(*v3 + 1536) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC0AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC07)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x181uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 3072);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6546B8;
    fst::internal::MemoryArenaImpl<392ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654BE0;
    v6 = *(_QWORD *)(*v3 + 3072);
    *(_QWORD *)(*v3 + 3072) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC0BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x300)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x301uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 6144);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654778;
    fst::internal::MemoryArenaImpl<776ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654C20;
    v6 = *(_QWORD *)(*v3 + 6144);
    *(_QWORD *)(*v3 + 6144) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC0D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x600)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x601uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 12288);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654838;
    fst::internal::MemoryArenaImpl<1544ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F654C60;
    v6 = *(_QWORD *)(*v3 + 12288);
    *(_QWORD *)(*v3 + 12288) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC0EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

void std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = a2[1];
    a2[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *a2;
    *a2 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    JUMPOUT(0x22E2FB328);
  }
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)a1 = &off_24F653AB8;
  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(uint64_t **)(a1 + 176);
    if (v2)
    {
      v3 = (void *)v2[13];
      if (v3)
      {
        v2[14] = (uint64_t)v3;
        operator delete(v3);
      }
      std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(v2 + 4));
      v4 = v2[1];
      v2[1] = 0;
      if (v4)
        MEMORY[0x22E2FB328](v4, 0xC400A2AC0F1);
      v5 = *v2;
      *v2 = 0;
      if (v5)
        MEMORY[0x22E2FB328](v5, 0xC400A2AC0F1);
      MEMORY[0x22E2FB328](v2, 0x10E0C401DE81863);
    }
  }
  v6 = *(uint64_t **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v6)
    std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100](a1 + 136, v6);
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  __n128 *v4;
  __n128 v5;
  uint64_t v6;

  *fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &off_24F653AB8;
  v4 = (__n128 *)operator new();
  fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(v4, *(uint64_t **)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *v4;
  *(__n128 *)(a1 + 144) = *v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 72))(v5.n128_u64[0], v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 72))(*(_QWORD *)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_BYTE *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  return a1;
}

void sub_22BDC1180(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v5;

  MEMORY[0x22E2FB328](v3, 0x10E0C401DE81863);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100]((uint64_t)v2, v5);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ComposeFstImplBase(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl((uint64_t)a1, a2, 1u);
  *(_QWORD *)v4 = off_24F653B58;
  std::string::operator=((std::string *)(v4 + 16), (const std::string *)(a2 + 16));
  a1[1] = a1[1] & 0xFFFF00000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 0xFFFFFFFF0004;
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v6 = a1[5];
  a1[5] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 48);
  if (v7)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = a1[6];
  a1[6] = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_22BDC12B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &off_24F653500;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24F653BB0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 88) = v14 == 0;
  *(_DWORD *)(v6 + 92) = -1;
  *(_QWORD *)(v6 + 96) = 0;
  *(_BYTE *)(v6 + 104) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 112) = v8;
  *(_BYTE *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  *(_BYTE *)(a1 + 129) = 1;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 120);
    *(_OWORD *)(v6 + 104) = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 120) = v11;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_22BDC143C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x22E2FB328](v3, 0x10A0C40690396FALL);
  if (*v2)
    operator delete(*v2);
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CopyStates(a1, a2);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    if (*(_DWORD *)(a2 + 92) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 96) = MutableState;
  }
  return a1;
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;

  v13 = a2;
  v3 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 8;
  if (a2 >= (unint64_t)((v6 - v5) >> 3))
  {
    v12 = 0;
    std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(v4, a2 + 1, &v12);
  }
  else
  {
    v7 = *(_QWORD **)(v5 + 8 * a2);
    if (v7)
      return v7;
  }
  v7 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate((uint64_t **)(a1 + 72), 1uLL);
  *(_DWORD *)v7 = *fst::TropicalWeightTpl<float>::Zero();
  v7[5] = 0;
  *(_OWORD *)(v7 + 3) = 0u;
  *(_OWORD *)(v7 + 1) = 0u;
  v8 = *(_QWORD *)(a1 + 80);
  v7[6] = v8;
  ++*(_QWORD *)(v8 + 8);
  v7[7] = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) = v7;
  if (*(_BYTE *)a1)
  {
    v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(a1 + 32, 0, 0, &v13);
    v10 = *(_QWORD *)(a1 + 32);
    *v9 = v10;
    v9[1] = a1 + 32;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 32) = v9;
    ++*(_QWORD *)(a1 + 48);
  }
  return v7;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CopyStates(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(a1);
  v4 = (char **)(a1 + 8);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 8), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v23 = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate((uint64_t **)(a1 + 72), 1uLL);
        *(_DWORD *)v8 = *(_DWORD *)v7;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v7 + 8);
        std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::vector<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,0>(v8 + 3, *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), (uint64_t *)(a1 + 80));
        *((_DWORD *)v8 + 14) = *(_DWORD *)(v7 + 56);
        *((_DWORD *)v8 + 15) = 0;
        if (*(_BYTE *)a1)
        {
          v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(a1 + 32, 0, 0, &v23);
          v10 = *(_QWORD *)(a1 + 32);
          *v9 = v10;
          v9[1] = a1 + 32;
          *(_QWORD *)(v10 + 8) = v9;
          *(_QWORD *)(a1 + 32) = v9;
          ++*(_QWORD *)(a1 + 48);
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = *(_QWORD **)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 24, v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = *(char **)(a1 + 8);
        v20 = *(char **)(a1 + 16);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        *(_QWORD *)(a1 + 8) = v19;
        *(_QWORD *)(a1 + 16) = v13;
        *(_QWORD *)(a1 + 24) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 16) = v13;
      v6 = ++v23;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

_QWORD *fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<136ul>::Allocate(v2 + 1, 1);
      result[16] = 0;
      return result;
    }
    v4 = result[16];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<72ul>::Allocate(v2 + 1, 1);
      result[8] = 0;
      return result;
    }
    v4 = result[8];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<264ul>::Allocate(v2 + 1, 1);
      result[32] = 0;
      return result;
    }
    v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<520ul>::Allocate(v2 + 1, 1);
      result[64] = 0;
      return result;
    }
    v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<1032ul>::Allocate(v2 + 1, 1);
      result[128] = 0;
      return result;
    }
    v4 = result[128];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<2056ul>::Allocate(v2 + 1, 1);
      result[256] = 0;
      return result;
    }
    v4 = result[256];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<4104ul>::Allocate(v2 + 1, 1);
      result[512] = 0;
      return result;
    }
    v4 = result[512];
    goto LABEL_26;
  }
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t fst::internal::MemoryArenaImpl<1032ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 1032 * a2;
  v4 = a1[1];
  if (4128 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<2056ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 2056 * a2;
  v4 = a1[1];
  if (8224 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<4104ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 4104 * a2;
  v4 = a1[1];
  if (16416 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

_QWORD *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::vector<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a4;
  a1[3] = *a4;
  ++*(_QWORD *)(v5 + 8);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>>(a1, a2, a3, (a3 - a2) >> 4);
  return a1;
}

void sub_22BDC1D14(_Unwind_Exception *a1)
{
  uint64_t *v1;

  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__vallocate[abi:ne180100]((uint64_t)result, a4);
    v7 = v6[1];
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 12) = *(_DWORD *)(a2 + 12);
      v7 += 16;
      a2 += 16;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_22BDC1DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9)
{
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__vallocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  if (a2 >> 60)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate((uint64_t **)(a1 + 24), a2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[2 * a2];
  return result;
}

_QWORD *fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<40ul>::Allocate(v2 + 1, 1);
      result[4] = 0;
      return result;
    }
    v4 = result[4];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<24ul>::Allocate(v2 + 1, 1);
      result[2] = 0;
      return result;
    }
    v4 = result[2];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<72ul>::Allocate(v2 + 1, 1);
      result[8] = 0;
      return result;
    }
    v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<136ul>::Allocate(v2 + 1, 1);
      result[16] = 0;
      return result;
    }
    v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<264ul>::Allocate(v2 + 1, 1);
      result[32] = 0;
      return result;
    }
    v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<520ul>::Allocate(v2 + 1, 1);
      result[64] = 0;
      return result;
    }
    v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<1032ul>::Allocate(v2 + 1, 1);
      result[128] = 0;
      return result;
    }
    v4 = result[128];
    goto LABEL_26;
  }
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

_QWORD *std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10[2];
  _QWORD *v11;

  v9 = *(_QWORD *)(a1 + 24);
  ++*(_QWORD *)(v9 + 8);
  std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__allocation_guard[abi:ne180100]<fst::PoolAllocator<std::__list_node<int,void *>>>((uint64_t)v10, &v9, 1uLL);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(&v9);
  v7 = v11;
  *v11 = a2;
  v7[1] = a3;
  *((_DWORD *)v7 + 4) = *a4;
  v11 = 0;
  std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__destroy[abi:ne180100]((uint64_t)v10);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v10);
  return v7;
}

void sub_22BDC2038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__allocation_guard[abi:ne180100]<fst::PoolAllocator<std::__list_node<int,void *>>>(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a2 + 8) + 1;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = fst::PoolAllocator<std::__list_node<int,void *>>::allocate((uint64_t **)a1, a3);
  return a1;
}

void sub_22BDC2090(_Unwind_Exception *a1)
{
  uint64_t *v1;

  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PoolAllocator<std::__list_node<int,void *>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<56ul>::Allocate(v2 + 1, 1);
      result[6] = 0;
      return result;
    }
    v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<32ul>::Allocate(v2 + 1, 1);
      result[3] = 0;
      return result;
    }
    v4 = result[3];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<104ul>::Allocate(v2 + 1, 1);
      result[12] = 0;
      return result;
    }
    v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<200ul>::Allocate(v2 + 1, 1);
      result[24] = 0;
      return result;
    }
    v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<392ul>::Allocate(v2 + 1, 1);
      result[48] = 0;
      return result;
    }
    v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<776ul>::Allocate(v2 + 1, 1);
      result[96] = 0;
      return result;
    }
    v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<1544ul>::Allocate(v2 + 1, 1);
      result[192] = 0;
      return result;
    }
    v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t fst::internal::MemoryArenaImpl<32ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 32 * a2;
  v4 = a1[1];
  if (v4 >= a2 << 7)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<104ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 104 * a2;
  v4 = a1[1];
  if (416 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<200ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 200 * a2;
  v4 = a1[1];
  if (800 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<392ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 392 * a2;
  v4 = a1[1];
  if (1568 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<776ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 776 * a2;
  v4 = a1[1];
  if (3104 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t fst::internal::MemoryArenaImpl<1544ul>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 1544 * a2;
  v4 = a1[1];
  if (6176 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

void std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__destroy[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
    fst::PoolAllocator<std::__list_node<int,void *>>::deallocate((uint64_t **)a1, v1, *(_QWORD *)(a1 + 8));
}

void std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(*a2, a3);
  a1[1] = cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(a2[1], a3);
  a1[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
  a1[3] = -1;
  *((_BYTE *)a1 + 32) = -1;
  return a1;
}

void sub_22BDC29E8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  v1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::CompactHashBiTable(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_QWORD *)a1 = operator new();
  *(_QWORD *)(a1 + 8) = operator new();
  *(_QWORD *)(a1 + 16) = a1;
  *(_QWORD *)(a1 + 24) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set(a1 + 32, *(_QWORD *)(a2 + 72), (_QWORD *)(a1 + 16), (_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*>((char *)(a1 + 104), *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2));
  for (i = *(int **)(a2 + 56); i; i = *(int **)i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 32, i + 4, i + 4);
  return a1;
}

void sub_22BDC2AF0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v2);
  v4 = v1[1];
  v1[1] = 0;
  if (v4)
    MEMORY[0x22E2FB328](v4, 0xC400A2AC0F1);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    MEMORY[0x22E2FB328](v5, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22BDC2BC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

_QWORD *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *a2;
  if (*a2 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (v7 == -1)
      v9 = *(int **)(v8 + 128);
    else
      v9 = (int *)(*(_QWORD *)(v8 + 104) + 12 * v7);
    v10 = *v9 + 7853 * v9[1] + 7867 * *((char *)v9 + 8);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t **)(a1 + 32), 1uLL);
  *i = 0;
  i[1] = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_44:
    *v23 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11)
        v24 %= v11;
    }
    else
    {
      v24 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 40);
  return i;
}

void sub_22BDC2EC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t ***v2;

  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return 1;
  result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    v5 = *a1;
    if (a2 == -1)
      v6 = *(_QWORD *)(v5 + 128);
    else
      v6 = *(_QWORD *)(v5 + 104) + 12 * a2;
    if (a3 == -1)
      v7 = *(_QWORD *)(v5 + 128);
    else
      v7 = *(_QWORD *)(v5 + 104) + 12 * a3;
    if (v6 == v7)
      return 1;
    return *(_DWORD *)v6 == *(_DWORD *)v7
        && *(_DWORD *)(v6 + 4) == *(_DWORD *)(v7 + 4)
        && *(unsigned __int8 *)(v6 + 8) == *(unsigned __int8 *)(v7 + 8);
  }
  return result;
}

_QWORD *fst::PoolAllocator<std::__hash_node<int,void *>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<56ul>::Allocate(v2 + 1, 1);
      result[6] = 0;
      return result;
    }
    v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<32ul>::Allocate(v2 + 1, 1);
      result[3] = 0;
      return result;
    }
    v4 = result[3];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<104ul>::Allocate(v2 + 1, 1);
      result[12] = 0;
      return result;
    }
    v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<200ul>::Allocate(v2 + 1, 1);
      result[24] = 0;
      return result;
    }
    v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<392ul>::Allocate(v2 + 1, 1);
      result[48] = 0;
      return result;
    }
    v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<776ul>::Allocate(v2 + 1, 1);
      result[96] = 0;
      return result;
    }
    v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<1544ul>::Allocate(v2 + 1, 1);
      result[192] = 0;
      return result;
    }
    v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t ***std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](uint64_t ***result, uint64_t a2)
{
  if (a2)
  {
    result = (uint64_t ***)fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(**result);
    *(_QWORD *)(a2 + 24) = result[7];
    result[7] = (uint64_t **)a2;
  }
  return result;
}

int *fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(int *result, uint64_t a2, int a3, _BYTE *a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;
  int v11;

  v5 = result;
  if (result[6] != (_DWORD)a2 || result[7] != a3 || *a4 != *((_BYTE *)result + 32))
  {
    result[6] = a2;
    result[7] = a3;
    *((_BYTE *)result + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)result + 2) + 32))(*((_QWORD *)result + 2), a2);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 2) + 48))(*((_QWORD *)v5 + 2), a2);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v5 + 2) + 24))(&v10, *((_QWORD *)v5 + 2), a2);
    result = fst::TropicalWeightTpl<float>::Zero();
    v11 = v10;
    HIDWORD(v10) = 0;
    HIDWORD(v10) = *result;
    v9 = *(float *)&v10 == *((float *)&v10 + 1) && v6 == v7;
    *((_BYTE *)v5 + 33) = v9;
    *((_BYTE *)v5 + 34) = v7 == 0;
  }
  return result;
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v11;
  void *__p[2];
  char v13;
  BOOL v14;

  v3 = *(_DWORD *)(a1 + 188);
  if (v3 == 1)
    return 1;
  if (v3 == 2)
    return 0;
  v7 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Priority(*(_QWORD *)(a1 + 144), a2);
  v8 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Priority(*(_QWORD *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ComposeFst: Both sides can't require match", 42);
    LogMessage::~LogMessage((LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  v11 = v8 == -1 || v7 <= v8;
  return v7 != -1 && v11;
}

void sub_22BDC337C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v14;
  int *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  int v19[4];

  if (*(_DWORD *)(a7 + 52) != (_DWORD)a4)
  {
    *(_DWORD *)(a7 + 52) = a4;
    fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(_QWORD *)(a7 + 8), a4);
    *(_BYTE *)(a7 + 56) = *(_DWORD *)(a7 + 20) != -1;
  }
  v14 = *fst::TropicalWeightTpl<float>::One();
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  v19[2] = v14;
  v19[3] = a6;
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a7, v19, a8);
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a5 + 120))(a5, a6, &v16);
  while (1)
  {
    if (!(_QWORD)v16)
    {
      if (v18 >= (unint64_t)v17)
        goto LABEL_15;
LABEL_9:
      v15 = (int *)(*((_QWORD *)&v16 + 1) + 16 * v18);
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16 + 16))(v16))
      break;
    if (!(_QWORD)v16)
      goto LABEL_9;
    v15 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 24))();
LABEL_10:
    fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a7, v15, a8);
    if ((_QWORD)v16)
      (*(void (**)(_QWORD))(*(_QWORD *)v16 + 32))(v16);
    else
      ++v18;
  }
  if ((_QWORD)v16)
  {
    (*(void (**)(void))(*(_QWORD *)v16 + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (*((_QWORD *)&v17 + 1))
    --**((_DWORD **)&v17 + 1);
LABEL_17:
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_22BDC354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  int *v10;
  _BOOL8 result;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  char v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  char v22;
  char v23;
  float *v24;
  uint64_t *v25;
  char v26;
  char v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a3, *v10);
  if (result)
  {
    for (result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8));
          !result;
          result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8)))
    {
      v12 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a3);
      v13 = *v12;
      v31 = *v12;
      v32 = *((_DWORD *)v12 + 2);
      v33 = *((_DWORD *)v12 + 3);
      v14 = *(_QWORD *)a4;
      v28 = *(_QWORD *)a4;
      v29 = a4[2];
      v30 = a4[3];
      if (a5)
      {
        v15 = HIDWORD(v14);
        v16 = *(unsigned __int8 **)(a1 + 136);
        if ((_DWORD)v15 != -1)
        {
          if ((_DWORD)v13 == -1)
          {
            v17 = v16[32];
            if (v16[32])
              v18 = -1;
            else
              v18 = 0;
            v27 = v18;
            if (v17)
              goto LABEL_35;
          }
          else
          {
            if ((_DWORD)v15)
              v23 = 0;
            else
              v23 = -1;
            v27 = v23;
            if (!(_DWORD)v15)
              goto LABEL_35;
          }
LABEL_28:
          v24 = (float *)&v28;
          v25 = (uint64_t *)&v31;
LABEL_34:
          fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v24, (uint64_t)v25, &v27);
          goto LABEL_35;
        }
        if (!v16[33])
        {
          v27 = v16[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        v19 = HIDWORD(v13);
        v20 = *(unsigned __int8 **)(a1 + 136);
        if ((_DWORD)v19 != -1)
        {
          if ((_DWORD)v14 == -1)
          {
            v21 = v20[32];
            if (v21)
              v22 = -1;
            else
              v22 = 0;
            v27 = v22;
            if (v21)
              goto LABEL_35;
          }
          else
          {
            if ((_DWORD)v19)
              v26 = 0;
            else
              v26 = -1;
            v27 = v26;
            if (!(_DWORD)v19)
              goto LABEL_35;
          }
LABEL_33:
          v24 = (float *)&v31;
          v25 = (uint64_t *)&v28;
          goto LABEL_34;
        }
        if (!v20[33])
        {
          v27 = v20[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(_QWORD *)(a3 + 8));
    }
  }
  return result;
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(uint64_t a1, int a2)
{
  _QWORD *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = MutableState[3];
  v6 = MutableState[4] - v5;
  if (v6)
  {
    v7 = v6 >> 4;
    v8 = *(_DWORD *)(a1 + 64);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 12);
    do
    {
      v11 = *v9;
      v9 += 4;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 64) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 14) |= 0xAu;
}

_QWORD *fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  int Id;
  _QWORD *MutableState;
  _DWORD v18[4];
  uint64_t v19;
  char v20;

  v7 = *(_DWORD *)(a4 + 12);
  *(float *)&v19 = a3[3];
  HIDWORD(v19) = v7;
  v20 = *a5;
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 4);
  v10 = a3[2];
  if (v10 == -INFINITY || (v11 = *(float *)(a4 + 8), v11 >= -INFINITY) && v11 <= -INFINITY)
  {
    v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v13 = v11 == INFINITY || v10 == INFINITY;
    v14 = v10 + v11;
    if (v13)
      v12 = INFINITY;
    else
      v12 = v14;
  }
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(*(_QWORD **)(a1 + 176), &v19, 1);
  *(float *)v18 = v8;
  v18[1] = v9;
  *(float *)&v18[2] = v12;
  v18[3] = Id;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  return std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](MutableState + 3, (uint64_t)v18);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(_QWORD *a1, uint64_t *a2, int a3)
{
  _QWORD *v4;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;

  a1[16] = a2;
  v4 = a1 + 4;
  if (!a3)
  {
    v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(v4, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::kCurrentKey);
    if (!v6)
      return 0xFFFFFFFFLL;
    return *((unsigned int *)v6 + 4);
  }
  v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v4, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::kCurrentKey, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::kCurrentKey);
  if (!v7)
    return *((unsigned int *)v6 + 4);
  v8 = a1[13];
  v9 = a1[14];
  v10 = (uint64_t)(v9 - v8) / 12;
  *((_DWORD *)v6 + 4) = v10;
  v11 = a1[15];
  if (v9 >= v11)
  {
    if ((unint64_t)(v10 + 1) > 0x1555555555555555)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v8) >> 2);
    v15 = 2 * v14;
    if (2 * v14 <= v10 + 1)
      v15 = v10 + 1;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v16 = 0x1555555555555555;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>((uint64_t)(a1 + 15), v16);
    else
      v17 = 0;
    v18 = &v17[12 * v10];
    v19 = &v17[12 * v16];
    v20 = *a2;
    *((_DWORD *)v18 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v18 = v20;
    v13 = v18 + 12;
    v22 = (_DWORD *)a1[13];
    v21 = (_DWORD *)a1[14];
    if (v21 != v22)
    {
      do
      {
        v23 = *(_QWORD *)(v21 - 3);
        v21 -= 3;
        v24 = v21[2];
        *(_QWORD *)(v18 - 12) = v23;
        v18 -= 12;
        *((_DWORD *)v18 + 2) = v24;
      }
      while (v21 != v22);
      v21 = (_DWORD *)a1[13];
    }
    a1[13] = v18;
    a1[14] = v13;
    a1[15] = v19;
    if (v21)
      operator delete(v21);
  }
  else
  {
    v12 = *a2;
    *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v9 = v12;
    v13 = (char *)(v9 + 12);
  }
  a1[14] = v13;
  return v10;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  unsigned int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;

  v3 = *a2;
  if (*a2 < -1)
  {
    v6 = 0;
  }
  else
  {
    v4 = a1[6];
    if (v3 == -1)
      v5 = *(int **)(v4 + 128);
    else
      v5 = (int *)(*(_QWORD *)(v4 + 104) + 12 * v3);
    v6 = *v5 + 7853 * v5[1] + 7867 * *((char *)v5 + 8);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = a1 + 8;
    do
    {
      v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

_QWORD *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  _QWORD *MutableState;
  _QWORD *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *((_DWORD *)MutableState + 14);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 14) = v5 | 4;
      v6 = MutableState[4] - MutableState[3] + *(_QWORD *)(a1 + 128) + 64;
      *(_QWORD *)(a1 + 128) = v6;
      *(_BYTE *)(a1 + 120) = 1;
      if (v6 > *(_QWORD *)(a1 + 112))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

_QWORD *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *MutableState;

  v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2)
    return *(_QWORD **)(a1 + 96);
  if (!*(_BYTE *)(a1 + 88))
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 92) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 96) = MutableState;
    *((_DWORD *)MutableState + 14) |= 4u;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((uint64_t)(MutableState + 3), 0x80uLL);
    return *(_QWORD **)(a1 + 96);
  }
  v5 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(v5 + 60))
  {
    *(_DWORD *)(v5 + 56) &= ~4u;
    *(_BYTE *)(a1 + 88) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 92) = a2;
  *(_DWORD *)v5 = *fst::TropicalWeightTpl<float>::Zero();
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v5 + 24);
  result = *(_QWORD **)(a1 + 96);
  *((_DWORD *)result + 14) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(uint64_t a1, _QWORD *a2, char a3, float a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *MutableState;
  unint64_t v19;
  int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32[2];
  char v33;
  BOOL v34;
  BOOL v35;
  void *__p[2];
  char v37;

  if (*(_BYTE *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v32, (uint64_t)__p);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache size = ", 15);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)v32);
      if (v37 < 0)
        operator delete(__p[0]);
    }
    v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * a4);
    v15 = *(_QWORD *)(a1 + 40);
LABEL_6:
    *(_QWORD *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      v16 = *(_DWORD *)(v15 + 16);
      if (v16)
        v17 = v16 - 1;
      else
        v17 = *(_DWORD *)(a1 + 92);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, v17);
      v19 = *(_QWORD *)(a1 + 128);
      if (v19 <= v14 || *((_DWORD *)MutableState + 15))
      {
LABEL_23:
        *((_DWORD *)MutableState + 14) &= ~8u;
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        goto LABEL_6;
      }
      if ((a3 & 1) != 0)
      {
        if (MutableState == a2)
          goto LABEL_23;
        v20 = *((_DWORD *)MutableState + 14);
      }
      else
      {
        v20 = *((_DWORD *)MutableState + 14);
        if ((v20 & 8) != 0 || MutableState == a2)
          goto LABEL_23;
      }
      if ((v20 & 4) != 0)
      {
        v21 = MutableState[4] - MutableState[3] + 64;
        v22 = v19 > v21;
        v23 = v19 - v21;
        if (v22)
          *(_QWORD *)(a1 + 128) = v23;
      }
      fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(a1);
      v15 = *(_QWORD *)(a1 + 64);
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 128) <= v14)
    {
      v24 = *(_QWORD *)(a1 + 128);
      if (v14)
      {
        if (v24 > v14)
        {
          v25 = *(_QWORD *)(a1 + 112);
          do
          {
            v25 *= 2;
            v22 = v24 > 2 * v14;
            v14 *= 2;
          }
          while (v22);
          *(_QWORD *)(a1 + 112) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        LogMessage::LogMessage(&v35, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        LogMessage::~LogMessage((LogMessage *)&v35);
        if (v37 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "INFO");
      LogMessage::LogMessage(&v34, (uint64_t)v32);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"), free recently cached = ", 26);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", cache size = ", 15);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", cache frac = ", 15);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", cache limit = ", 16);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)&v34);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
}

void sub_22BDC4038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 4)
  {
    v3 = (uint64_t *)result;
    if (a2 >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v5[4] = result + 24;
    v5[0] = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate((uint64_t **)(result + 24), a2);
    v5[1] = v5[0] + v4;
    v5[2] = v5[0] + v4;
    v5[3] = v5[0] + 16 * a2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v5);
    return std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_22BDC4138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)a1)
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(*(uint64_t ***)(a1 + 32), *(_QWORD **)a1, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 4);
  return a1;
}

_QWORD *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 16);
  if (!v1 || v1 - 1 == *(_DWORD *)(a1 + 92))
  {
    *(_DWORD *)(a1 + 92) = -1;
    *(_QWORD *)(a1 + 96) = 0;
  }
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Delete(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Delete(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(*(_QWORD *)(a1 + 64) + 16)), (uint64_t **)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(*(_QWORD *)(a1 + 64) + 16)) = 0;
  v2 = *(uint64_t **)(a1 + 64);
  v4 = *v2;
  v3 = v2[1];
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)v2[1] = v4;
  --*(_QWORD *)(a1 + 48);
  return std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(a1 + 32, (uint64_t)v2);
}

_QWORD *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[5];

  v3 = result;
  v4 = result[1];
  v5 = result[2];
  if (v4 >= v5)
  {
    v7 = (uint64_t)(v4 - *result) >> 4;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v9 = (uint64_t **)(result + 3);
    v10 = v5 - *v3;
    if (v10 >> 3 > v8)
      v8 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v8;
    v14[4] = v3 + 3;
    v12 = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(v9, v11);
    v13 = &v12[2 * v7];
    v14[0] = v12;
    v14[1] = v13;
    v14[3] = &v12[2 * v11];
    *v13 = *(_QWORD *)a2;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
    *((_DWORD *)v13 + 3) = *(_DWORD *)(a2 + 12);
    v14[2] = v13 + 2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v14);
    v6 = v3[1];
    result = (_QWORD *)std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
    v6 = v4 + 16;
    result[1] = v4 + 16;
  }
  v3[1] = v6;
  return result;
}

void sub_22BDC4340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 120) && (*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24) + *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v4;
    if (v4 > *(_QWORD *)(a1 + 112))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, (_QWORD *)a2, 0, 0.666);
  }
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(uint64_t a1, int a2)
{
  int v2;
  _QWORD *v3;
  unint64_t v4;

  if (*(_DWORD *)(a1 + 100) < a2)
    *(_DWORD *)(a1 + 100) = a2;
  v2 = *(_DWORD *)(a1 + 96);
  if (v2 <= a2)
  {
    if (v2 == a2)
      *(_DWORD *)(a1 + 96) = a2 + 1;
    if (*(_BYTE *)(a1 + 104) || !*(_QWORD *)(a1 + 112))
    {
      v3 = (_QWORD *)(a1 + 72);
      v4 = a2;
      if (*(_QWORD *)(a1 + 80) <= (unint64_t)a2)
        std::vector<BOOL>::resize(a1 + 72, a2 + 1, 0);
      *(_QWORD *)(*v3 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
    }
  }
}

_QWORD *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(_QWORD *result)
{
  _DWORD *v1;
  _DWORD *v2;

  v1 = (_DWORD *)result[3];
  v2 = (_DWORD *)result[4];
  while (v1 != v2)
  {
    if (!*v1)
      ++result[1];
    if (!v1[1])
      ++result[2];
    v1 += 4;
  }
  return result;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_22BDC4608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;

  *(_QWORD *)a1 = &off_24F654CA0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 36) = a3;
  *(_QWORD *)(a1 + 40) = cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(*(_QWORD *)(v4 + 144), 0);
  *(_QWORD *)(a1 + 48) = cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 152), 0);
  *(_BYTE *)(a1 + 56) = 0;
  v5 = *fst::TropicalWeightTpl<float>::One();
  *(_QWORD *)(a1 + 60) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 68) = v5;
  *(_DWORD *)(a1 + 72) = -1;
  if (*(_DWORD *)(a1 + 36) == 2)
    *(_QWORD *)(a1 + 60) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_22BDC4948(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[6];
  v1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[1];
  v1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24F654CA0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24F654CA0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_22BDC4AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C402D4BD5F2);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  if ((_DWORD)result != 4)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2);
    if ((_DWORD)result != 4)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) != 5
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2), (_DWORD)result != 5))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) == 5
          && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2) == *(_DWORD *)(a1 + 36))
        {
          return 5;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) != *(_DWORD *)(a1 + 36)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2), (_DWORD)result != 5))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) != *(_DWORD *)(a1 + 36))return 4;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 36))
            return 4;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(result + 32) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 32) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 176) + 104) + 12 * a2);
    v4 = *(_QWORD *)(result + 40);
    v5 = *v3;
    if (*(_DWORD *)(v4 + 52) != (_DWORD)v5)
    {
      *(_DWORD *)(v4 + 52) = v5;
      result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(_QWORD *)(v4 + 8), v5);
      *(_BYTE *)(v4 + 56) = *(_DWORD *)(v4 + 20) != -1;
    }
    v6 = *(_QWORD *)(v2 + 48);
    v7 = v3[1];
    if (*(_DWORD *)(v6 + 52) != (_DWORD)v7)
    {
      *(_DWORD *)(v6 + 52) = v7;
      result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(_QWORD *)(v6 + 8), v7);
      *(_BYTE *)(v6 + 56) = *(_DWORD *)(v6 + 20) != -1;
    }
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(v2 + 32);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;

  *(_BYTE *)(a1 + 56) = a2 == 0;
  if (*(_DWORD *)(a1 + 36) == 1)
  {
    if (a2)
    {
      v2 = (uint64_t *)(a1 + 40);
      v3 = (uint64_t *)(a1 + 48);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    v2 = (uint64_t *)(a1 + 48);
    v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 56)
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8)
                                                                                                  + 8))
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8)
                                                                                                  + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
    return a1 + 60;
  else
    return a1 + 76;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 56))
  {
    *(_BYTE *)(result + 56) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 36) == 1)
    {
      v1 = *(_QWORD *)(result + 40);
      v2 = *(_QWORD *)(result + 48);
    }
    else
    {
      v2 = *(_QWORD *)(result + 40);
      v1 = *(_QWORD *)(result + 48);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;

  *(_QWORD *)a1 = &off_24F654CA0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 72))(*(_QWORD *)(a2 + 16), a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 + 8);
  v7 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 36) = v7;
  *(_QWORD *)(a1 + 40) = cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(*(_QWORD *)(a2 + 40), a3);
  *(_QWORD *)(a1 + 48) = cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(*(_QWORD *)(a2 + 48), a3);
  *(_BYTE *)(a1 + 56) = 0;
  v8 = *fst::TropicalWeightTpl<float>::One();
  *(_QWORD *)(a1 + 60) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 68) = v8;
  *(_DWORD *)(a1 + 72) = -1;
  if (*(_DWORD *)(a1 + 36) == 2)
    *(_QWORD *)(a1 + 60) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_22BDC4EE0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[6];
  v1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[1];
  v1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int *v9;
  int *v10;

  result = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a3, a2);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 36);
    v9 = (int *)fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a3);
    v10 = v9 + 1;
    if (v8 != 1)
      v10 = v9;
    fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int *v7;
  int *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;

  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8)))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8)
                                                                                                  + 8)))
    {
      fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(_QWORD *)(a2 + 8));
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 8)))
      {
        v6 = *(_DWORD *)(a1 + 36);
        v7 = (int *)fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a2);
        v8 = v7 + 1;
        if (v6 != 1)
          v8 = v7;
        if (fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a3, *v8))
        {
          break;
        }
        fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(_QWORD *)(a2 + 8));
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8)))
    {
      v9 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a2);
      v10 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a3);
      fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(_QWORD *)(a3 + 8));
      v11 = *(unsigned int *)(a1 + 32);
      v12 = *(_DWORD *)(a1 + 36);
      v13 = v12 == 1;
      if (v12 == 1)
        v14 = v9;
      else
        v14 = v10;
      v20 = *v14;
      v21 = *((_DWORD *)v14 + 2);
      v22 = *((_DWORD *)v14 + 3);
      if (v13)
        v15 = v10;
      else
        v15 = v9;
      v17 = *v15;
      v18 = *((_DWORD *)v15 + 2);
      v19 = *((_DWORD *)v15 + 3);
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, (uint64_t)&v20, (uint64_t)&v17))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  uint64_t v16;
  char v17;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 **)(v5 + 136);
  v7 = *(_DWORD *)(a3 + 4);
  if (v7 == -1)
  {
    if (v6[33])
      return 0;
    LOBYTE(v6) = v6[34] ^ 1;
  }
  else if (*(_DWORD *)a4 == -1)
  {
    v8 = 0;
    LODWORD(v6) = v6[32];
    if ((_DWORD)v6)
      return v8;
  }
  else
  {
    LOBYTE(v6) = 0;
    if (!v7)
      return 0;
  }
  v9 = *(_DWORD *)(a4 + 12);
  LODWORD(v16) = *(_DWORD *)(a3 + 12);
  HIDWORD(v16) = v9;
  v17 = (char)v6;
  v10 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 80) = v10;
  v11 = *(float *)(a3 + 8);
  if (v11 == -INFINITY || (v12 = *(float *)(a4 + 8), v12 >= -INFINITY) && v12 <= -INFINITY)
  {
    v13 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    v5 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v14 = v12 == INFINITY || v11 == INFINITY;
    v13 = v11 + v12;
    if (v14)
      v13 = INFINITY;
  }
  *(float *)(a1 + 84) = v13;
  v8 = 1;
  *(_DWORD *)(a1 + 88) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(*(_QWORD **)(v5 + 176), &v16, 1);
  return v8;
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  int v3;

  if (!*(_BYTE *)(a1 + 56))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 4))
    {
      *(_BYTE *)(a1 + 56) = 1;
    }
    else if (!*(_BYTE *)(a1 + 56))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 60) = v3;
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_DWORD *)(a1 + 64) <= v3)
          *(_DWORD *)(a1 + 64) = v3 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 60);
}

float fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *MutableState;
  uint64_t v7;
  float **v8;
  float *v9;
  float result;
  uint64_t v11;

  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 64))(&v11, a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1[15], a2);
    *MutableState = v11;
    MutableState[14] |= 9u;
  }
  v7 = a1[15];
  if (*(_DWORD *)(v7 + 92) == (_DWORD)a2)
    v8 = (float **)(v7 + 96);
  else
    v8 = (float **)(*(_QWORD *)(v7 + 8) + 8 * ((int)a2 + 1));
  v9 = *v8;
  result = *v9;
  *a3 = *(_DWORD *)v9;
  return result;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 92) == a2)
  {
    v3 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 56);
  if ((v8 & 1) == 0)
    return 0;
  *(_DWORD *)(v7 + 56) = v8 | 8;
  return 1;
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 92) == a2)
  {
    v3 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 56);
  if ((v8 & 2) == 0)
    return 0;
  *(_DWORD *)(v7 + 56) = v8 | 8;
  return 1;
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a2 + 8);
  if (a3)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::shared_ptr[abi:ne180100]<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,void>(v10, v5);
    v4 = v10[0];
    v6 = v10[1];
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  a1[1] = v4;
  a1[2] = v6;
  *a1 = &off_24F6539A0;
  return a1;
}

_QWORD *std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::shared_ptr[abi:ne180100]<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24F654DD0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22BDC5630(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_default_delete<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::__shared_ptr_pointer<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_default_delete<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_default_delete<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 64))
    return 0;
  v5 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *(_QWORD *)(v20 + 24);
    v9 = *(_QWORD *)(v20 + 32) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 64);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 64) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 64);
    --*(_DWORD *)(v20 + 60);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64));
  return v4;
}

void sub_22BDC57F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;

  v1 = *(unsigned int *)(a1 + 96);
  if ((int)v1 <= *(_DWORD *)(a1 + 100))
  {
    while (1)
    {
      v3 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ExpandedState(a1, v1);
      v4 = *(_DWORD *)(a1 + 96);
      if (!v3)
        break;
      v1 = (v4 + 1);
      *(_DWORD *)(a1 + 96) = v1;
      if (v4 >= *(_DWORD *)(a1 + 100))
        return v1;
    }
    return *(unsigned int *)(a1 + 96);
  }
  return v1;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ExpandedState(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 104) || !*(_QWORD *)(a1 + 112))
    return (*(_QWORD *)(*(_QWORD *)(a1 + 72) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v3 + 92) == a2)
    {
      v4 = (_QWORD *)(v3 + 96);
      return *v4 != 0;
    }
    v5 = a2 + 1;
    v7 = v3 + 8;
    v6 = *(_QWORD *)(v3 + 8);
    if (v5 < (*(_QWORD *)(v7 + 8) - v6) >> 3)
    {
      v4 = (_QWORD *)(v6 + 8 * v5);
      return *v4 != 0;
    }
  }
  return 0;
}

_QWORD *fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 15);
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_22BDC5998(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 120);
  if (*(_DWORD *)(v3 + 92) == a2)
    v4 = (uint64_t *)(v3 + 96);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8 * (a2 + 1));
  v5 = *v4;
  v8 = *(_DWORD *)(v5 + 60);
  v6 = (_DWORD *)(v5 + 60);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 9);
  v10 = (*(_QWORD *)(v6 - 7) - v9) >> 4;
  if (*(_QWORD *)(v6 - 7) == v9)
    v9 = 0;
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *v6 = v7 + 1;
  return result;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,void>(a2, &v7);
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToMutableFst(a1, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *a1 = &off_24F653050;
  return a1;
}

void sub_22BDC5AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToMutableFst(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    a1[1] = v3;
    a1[2] = v4;
    *a1 = off_24F6532E8;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
  }
  *a1 = off_24F6531C0;
  return a1;
}

_QWORD *fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFst(_QWORD *a1)
{
  *a1 = off_24F6553E8;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFst(_QWORD *a1)
{
  *a1 = off_24F6553E8;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(*(_QWORD *)(a1 + 8));
}

_DWORD *fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToFst(v4, a1, a2);
  *v4 = &off_24F654F08;
  return v4;
}

void sub_22BDC5D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24F6554F0;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 16))(a1);
  *(_QWORD *)v4 = &off_24F655480;
  *a2 = v4;
  return result;
}

void sub_22BDC5DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t (*v6)(void);
  void *__p[2];
  char v8;
  BOOL v9;

  if (*(_BYTE *)(a1[1] + 160))
    goto LABEL_2;
  if (a2 == 2)
  {
    v6 = *(uint64_t (**)(void))(*a1 + 56);
  }
  else
  {
    if (a2 != 1)
      goto LABEL_2;
    v6 = *(uint64_t (**)(void))(*a1 + 56);
  }
  if (v6())
  {
    v2 = operator new();
    fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher(v2, (uint64_t)a1, a2);
    return v2;
  }
LABEL_2:
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    LogMessage::LogMessage(&v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Not using replace matcher", 25);
    LogMessage::~LogMessage((LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_22BDC5F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  MEMORY[0x22E2FB328](v18, 0x10E1C40A5BE1C0BLL);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::vector<std::pair<int,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>> const&,fst::ReplaceFstOptions<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x128uLL);
  result = std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<int,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>> const&,fst::ReplaceFstOptions<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_22BDC5F9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<int,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>> const&,fst::ReplaceFstOptions<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F654FD0;
  fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_22BDC5FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F654FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F654FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  fst *v50;
  const fst::SymbolTable *v51;
  int v52;
  _QWORD *v53;
  void *v54;
  fst *v55;
  const fst::SymbolTable *v56;
  int v57;
  _QWORD *v58;
  void *v59;
  int v60;
  _QWORD *v61;
  int v62;
  _QWORD *v63;
  const char *v64;
  uint64_t v65;
  int64x2_t *v67;
  uint64_t v68;
  void *v69[2];
  char v70;
  BOOL v71;
  char v72;
  void *v73[2];
  char v74;
  BOOL v75;
  _QWORD v76[2];
  char v77;
  BOOL v78;
  void *__p[2];
  char v80;
  BOOL v81;
  _QWORD v82[2];
  char v83;
  BOOL v84;
  BOOL v85;
  std::string __str;
  char *v87;
  uint64_t v88;

  v6 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(a1, (char *)a3);
  *(_QWORD *)v6 = off_24F655020;
  *(_QWORD *)(v6 + 132) = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)&v8 = (int)v7;
  *((_QWORD *)&v8 + 1) = SHIDWORD(v7);
  *(_OWORD *)(v6 + 144) = v8;
  v9 = *(_QWORD *)(a3 + 56);
  if (!v9)
  {
    v9 = operator new();
    fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::DefaultReplaceStateTable(v9);
  }
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 168) = v9;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v68 = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  v67 = (int64x2_t *)(a1 + 240);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "replace");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)(a1 + 144))
    *(_DWORD *)(a1 + 132) = 1;
  if (!*(_QWORD *)(a1 + 152))
    *(_DWORD *)(a1 + 136) = 1;
  if (*a2 != a2[1])
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8) + 96))(*(_QWORD *)(*a2 + 8));
    if (v10)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8) + 104))(*(_QWORD *)(*a2 + 8));
    if (v12)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    v13 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v15 = *(_QWORD **)(a1 + 248);
  v14 = *(_QWORD *)(a1 + 256);
  if ((unint64_t)v15 >= v14)
  {
    v17 = ((uint64_t)v15 - v67->i64[0]) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v18 = v14 - v67->i64[0];
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v88 = a1 + 256;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 256, v20);
    else
      v21 = 0;
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    v87 = v23;
    *(_QWORD *)v22 = 0;
    v16 = v22 + 8;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 8);
    v25 = *(_QWORD **)(a1 + 240);
    v24 = *(_QWORD **)(a1 + 248);
    if (v24 == v25)
    {
      v27 = vdupq_n_s64((unint64_t)v24);
    }
    else
    {
      do
      {
        v26 = *--v24;
        *v24 = 0;
        *((_QWORD *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v27 = *v67;
      v16 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
      v23 = v87;
    }
    *(_QWORD *)(a1 + 240) = v22;
    *(_QWORD *)(a1 + 248) = v16;
    *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v27;
    v28 = *(char **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v23;
    v87 = v28;
    __str.__r_.__value_.__r.__words[0] = v27.i64[0];
    std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    *v15 = 0;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 248) = v16;
  v29 = *a2;
  if (a2[1] != *a2)
  {
    v30 = 0;
    while (1)
    {
      LODWORD(v69[0]) = 0;
      v31 = v29 + 16 * v30;
      LODWORD(v69[0]) = *(_DWORD *)v31;
      v32 = *(_QWORD *)(v31 + 8);
      v34 = *(_QWORD *)(a1 + 240);
      v33 = *(_QWORD *)(a1 + 248);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v68, (int *)v69, (uint64_t)&std::piecewise_construct, &__str)+ 5) = (unint64_t)(v33 - v34) >> 3;
      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)(a1 + 176), (int *)v69, v69);
      v35 = v32;
      if (!*(_BYTE *)(a3 + 48))
        v35 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 72))(v32, 0);
      v37 = *(uint64_t **)(a1 + 248);
      v36 = *(_QWORD *)(a1 + 256);
      if ((unint64_t)v37 >= v36)
      {
        v39 = (uint64_t *)v67->i64[0];
        v40 = ((uint64_t)v37 - v67->i64[0]) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v42 = v36 - (_QWORD)v39;
        if (v42 >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v88 = a1 + 256;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 256, v43);
          v39 = *(uint64_t **)(a1 + 240);
          v37 = *(uint64_t **)(a1 + 248);
        }
        else
        {
          v44 = 0;
        }
        v45 = (uint64_t *)&v44[8 * v40];
        v46 = &v44[8 * v43];
        v87 = v46;
        *v45 = v35;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v45 + 1);
        if (v37 == v39)
        {
          v38 = v45 + 1;
        }
        else
        {
          do
          {
            v47 = *--v37;
            *v37 = 0;
            *--v45 = v47;
          }
          while (v37 != v39);
          v38 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
          v46 = v87;
        }
        v48 = *(_OWORD *)(a1 + 240);
        *(_QWORD *)(a1 + 240) = v45;
        *(_QWORD *)(a1 + 248) = v38;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v48;
        v49 = *(char **)(a1 + 256);
        *(_QWORD *)(a1 + 256) = v46;
        v87 = v49;
        __str.__r_.__value_.__r.__words[0] = v48;
        std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        *v37 = v35;
        v38 = v37 + 1;
      }
      *(_QWORD *)(a1 + 248) = v38;
      if (!v30)
        goto LABEL_77;
      v50 = *(fst **)(a1 + 40);
      v51 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 96))(v32);
      if (!fst::CompatSymbols(v50, v51, (const fst::SymbolTable *)1))
        break;
LABEL_66:
      v55 = *(fst **)(a1 + 48);
      v56 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 104))(v32);
      if (!fst::CompatSymbols(v55, v56, (const fst::SymbolTable *)1))
      {
        v57 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v76, "FATAL");
          LogMessage::LogMessage(&v78, (uint64_t)v76);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v73, "ERROR");
          LogMessage::LogMessage(&v75, (uint64_t)v73);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ReplaceFstImpl: Output symbols of FST ", 38);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" do not match output symbols of base FST (0th FST)", 50);
        if (v57)
        {
          LogMessage::~LogMessage((LogMessage *)&v78);
          if (v77 < 0)
          {
            v59 = (void *)v76[0];
            goto LABEL_75;
          }
        }
        else
        {
          LogMessage::~LogMessage((LogMessage *)&v75);
          if (v74 < 0)
          {
            v59 = v73[0];
LABEL_75:
            operator delete(v59);
          }
        }
        *(_QWORD *)(a1 + 8) |= 4uLL;
      }
LABEL_77:
      ++v30;
      v29 = *a2;
      if (v30 >= (a2[1] - *a2) >> 4)
        goto LABEL_78;
    }
    v52 = FLAGS_fst_error_fatal;
    if (FLAGS_fst_error_fatal)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "FATAL");
      LogMessage::LogMessage(&v84, (uint64_t)v82);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      LogMessage::LogMessage(&v81, (uint64_t)__p);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ReplaceFstImpl: Input symbols of FST ", 37);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" do not match input symbols of base FST (0th FST)", 49);
    if (v52)
    {
      LogMessage::~LogMessage((LogMessage *)&v84);
      if (v83 < 0)
      {
        v54 = (void *)v82[0];
LABEL_64:
        operator delete(v54);
      }
    }
    else
    {
      LogMessage::~LogMessage((LogMessage *)&v81);
      if (v80 < 0)
      {
        v54 = __p[0];
        goto LABEL_64;
      }
    }
    *(_QWORD *)(a1 + 8) |= 4uLL;
    goto LABEL_66;
  }
LABEL_78:
  __str.__r_.__value_.__r.__words[0] = a3 + 28;
  v60 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v68, (int *)(a3 + 28), (uint64_t)&std::piecewise_construct, &__str)+ 5);
  if (!v60 && *(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240) >= 9uLL)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    LogMessage::LogMessage(&v85, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ReplaceFstImpl: No FST corresponding to root label ", 51);
    v61 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" in the input tuple vector", 26);
    LogMessage::~LogMessage((LogMessage *)&v85);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  if (v60 <= 1)
    v62 = 1;
  else
    v62 = v60;
  *(_DWORD *)(a1 + 264) = v62;
  v72 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | fst::ReplaceFstProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(*(_DWORD *)(a3 + 28), a2, *(_DWORD *)(a1 + 132), *(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 144), &v72);
  *(_BYTE *)(a1 + 160) = v72 ^ 1;
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v69, "INFO");
    LogMessage::LogMessage(&v71, (uint64_t)v69);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ReplaceFstImpl::ReplaceFstImpl: always_cache = ", 47);
    if (*(_BYTE *)(a1 + 160))
      v64 = "true";
    else
      v64 = "false";
    if (*(_BYTE *)(a1 + 160))
      v65 = 4;
    else
      v65 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    LogMessage::~LogMessage((LogMessage *)&v71);
    if (v70 < 0)
      operator delete(v69[0]);
  }
  return a1;
}

void sub_22BDC67F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10, void **a11, uint64_t a12, void **a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(char *)(v15 - 105) < 0)
    operator delete(*(void **)(v15 - 128));
  a13 = a11;
  std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a12);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v14, *a10);
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(v13 + 168), 0);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v13);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(int a1, uint64_t *a2, int a3, int a4, int a5, _BYTE *a6)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  char v46;
  int v48;
  int v49;
  int v50;
  BOOL v54;
  BOOL v55;
  int v56;
  int v57;
  void *__p;
  char *v59;
  char *v60;

  v6 = a6;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v7 = *a2;
  v8 = a2[1] - *a2;
  if (v8)
  {
    v48 = a3;
    v49 = a5;
    v50 = a4;
    v9 = 0;
    v10 = 0;
    v11 = v8 >> 4;
    v12 = 1;
    v13 = 1;
    v14 = 1;
    v15 = 1;
    v16 = 1;
    do
    {
      v56 = v16;
      v57 = v12;
      v17 = v15;
      v18 = (int *)(v7 + 16 * v9);
      v19 = *v18;
      v20 = v11 >= v19 && v19 > 0;
      v54 = v20;
      v55 = v19 < 0;
      if ((_DWORD)v19 == a1)
        v10 = v9;
      v21 = *((_QWORD *)v18 + 1);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21) != -1;
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 56))(v21, 0x10000000, 0) != 0;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 56))(v21, 0x40000000, 0) != 0;
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 56))(v21, 0xFFFFFFFF0004, 0);
      v26 = v25;
      v27 = v59;
      if (v59 >= v60)
      {
        v31 = (char *)__p;
        v32 = (v59 - (_BYTE *)__p) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v34 = v60 - (_BYTE *)__p;
        if ((v60 - (_BYTE *)__p) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v60, v35);
          v31 = (char *)__p;
          v27 = v59;
        }
        else
        {
          v36 = 0;
        }
        v37 = (uint64_t *)&v36[8 * v32];
        *v37 = v26;
        v28 = (char *)(v37 + 1);
        v29 = v17;
        while (v27 != v31)
        {
          v38 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v37 = v38;
        }
        __p = v37;
        v59 = v28;
        v60 = &v36[8 * v35];
        v30 = v57;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_QWORD *)v59 = v25;
        v28 = v27 + 8;
        v29 = v17;
        v30 = v57;
      }
      v14 &= v55;
      v13 &= v54;
      v15 = v22 & v29;
      v12 = v23 & v30;
      v16 = v24 & v56;
      v59 = v28;
      ++v9;
      v7 = *a2;
      v11 = (a2[1] - *a2) >> 4;
    }
    while (v11 > v9);
    v39 = v10;
    v40 = v14 | v13;
    v6 = a6;
    a5 = v49;
    a4 = v50;
    a3 = v48;
  }
  else
  {
    v39 = 0;
    LOBYTE(v16) = 1;
    v15 = 1;
    v40 = 1;
    LOBYTE(v12) = 1;
  }
  v43 = a3 == 4 && a5 != -1 || (a4 & 0xFFFFFFFE) == 2;
  v44 = (a3 & 0xFFFFFFFE) == 2 || v43;
  v45 = fst::ReplaceProperties((uint64_t **)&__p, v39, (a3 & 0xFFFFFFFD) == 1, (a4 & 0xFFFFFFFD) == 1, (a3 - 1) < 2, (a4 - 1) < 2, v44, v15, v12, v16, v40);
  if ((v45 & 0x50000000) != 0)
    v46 = v15;
  else
    v46 = 0;
  *v6 = v46;
  if (__p)
  {
    v59 = (char *)__p;
    operator delete(__p);
  }
  return v45;
}

void sub_22BDC6C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFstImpl(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24F655020;
  v3 = (void **)(a1 + 240);
  std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 176, *(_QWORD **)(a1 + 184));
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(a1 + 168), 0);
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24F655020;
  v4 = (void **)(a1 + 240);
  std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 176, *(_QWORD **)(a1 + 184));
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(a1 + 168), 0);
  v2 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
  return MEMORY[0x22E2FB328](v2, 0x10B3C4075DE3A39);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((a2 & 4) != 0)
  {
    v4 = a1[30];
    if ((unint64_t)(a1[31] - v4) >= 9)
    {
      v5 = 1;
      do
      {
        if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 56))(*(_QWORD *)(v4 + 8 * v5), 4, 0))
        {
          a1[1] |= 4uLL;
        }
        ++v5;
        v4 = a1[30];
      }
      while (v5 < (a1[31] - v4) >> 3);
    }
  }
  return a1[1] & a2;
}

uint64_t fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::DefaultReplaceStateTable(uint64_t a1)
{
  uint64_t v2;

  v2 = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::CompactHashBiTable(a1, 0, 0, 0);
  fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::CompactHashBiTable((uint64_t *)(v2 + 136), 0, 0, 0);
  return a1;
}

void sub_22BDC6E80(_Unwind_Exception *a1)
{
  uint64_t *v1;

  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = (uint64_t)v2;
    operator delete(v2);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    MEMORY[0x22E2FB328](v3, 0xC400A2AC0F1);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    MEMORY[0x22E2FB328](v4, 0xC400A2AC0F1);
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::CompactHashBiTable(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
    a3 = operator new();
  *(_QWORD *)a1 = a3;
  if (!a4)
    a4 = operator new();
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a1;
  *(_QWORD *)(a1 + 24) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set(a1 + 32, a2, (_QWORD *)(a1 + 16), (_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (a2)
    std::vector<fst::ReplaceStateTuple<int,long>>::reserve((void **)(a1 + 104), a2);
  return a1;
}

void sub_22BDC6FAC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x22E2FB328](v3, 0xC400A2AC0F1);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::ReplaceStateTuple<int,long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = operator new();
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)v8 = xmmword_22BDF36D0;
  v11 = v8;
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(&v11);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_22BDF36C0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_22BDC719C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node((_QWORD *)a1, *(_QWORD **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

_QWORD *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = (_QWORD *)*v2;
      result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>((uint64_t *)v3[4]);
      v2[3] = result[7];
      result[7] = v2;
      v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::CompactHashBiTable(uint64_t *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
    a3 = operator new();
  *a1 = a3;
  if (!a4)
    a4 = operator new();
  a1[1] = a4;
  a1[2] = (uint64_t)a1;
  a1[3] = (uint64_t)a1;
  std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::unordered_set((uint64_t)(a1 + 4), a2, a1 + 2, a1 + 3);
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  if (a2)
    std::vector<fst::ReplaceStackPrefix<int,int>>::reserve(a1 + 13, a2);
  return a1;
}

void sub_22BDC72F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v12;

  v12 = *v10;
  *v10 = 0;
  if (v12)
    MEMORY[0x22E2FB328](v12, 0xC400A2AC0F1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_22BDC73F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = operator new();
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)v8 = xmmword_22BDF36D0;
  v11 = v8;
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(&v11);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_22BDF36C0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_22BDC74EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<long,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 16));
  return a1;
}

void std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::deallocate((uint64_t **)(a1 + 8), a2, *(_QWORD *)a1);
}

void fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::deallocate(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  _QWORD *v4;

  if (a3 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>(*a1);
    if (!__p)
      return;
    __p[2] = v4[7];
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>(*a1);
    if (!__p)
      return;
    __p[1] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>(*a1);
    if (!__p)
      return;
    __p[4] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>(*a1);
    if (!__p)
      return;
    __p[8] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>(*a1);
    if (!__p)
      return;
    __p[16] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>(*a1);
    if (!__p)
      return;
    __p[32] = v4[7];
    goto LABEL_22;
  }
  if (a3 > 0x40)
  {
    operator delete(__p);
    return;
  }
  v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>(*a1);
  if (__p)
  {
    __p[64] = v4[7];
LABEL_22:
    v4[7] = __p;
  }
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x47)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 9uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 64);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6548F8;
    fst::internal::MemoryArenaImpl<16ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F655068;
    v6 = *(_QWORD *)(*v3 + 64);
    *(_QWORD *)(*v3 + 64) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC7724(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6548F8;
  a1[1] = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6548F8;
  a1[1] = &off_24F654920;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x11uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 128);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653C38;
    fst::internal::MemoryArenaImpl<24ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6550A8;
    v6 = *(_QWORD *)(*v3 + 128);
    *(_QWORD *)(*v3 + 128) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC7878(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x21uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 256);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653CF8;
    fst::internal::MemoryArenaImpl<40ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6550E8;
    v6 = *(_QWORD *)(*v3 + 256);
    *(_QWORD *)(*v3 + 256) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC79CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x41uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653DB8;
    fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F655128;
    v6 = *(_QWORD *)(*v3 + 512);
    *(_QWORD *)(*v3 + 512) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC7B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x81uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653E78;
    fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F655168;
    v6 = *(_QWORD *)(*v3 + 1024);
    *(_QWORD *)(*v3 + 1024) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC7C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x101uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653F38;
    fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6551A8;
    v6 = *(_QWORD *)(*v3 + 2048);
    *(_QWORD *)(*v3 + 2048) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC7DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x201uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653FF8;
    fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6551E8;
    v6 = *(_QWORD *)(*v3 + 4096);
    *(_QWORD *)(*v3 + 4096) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC7F20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

void std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (unint64_t *)(a1 + 8);
  if (a2)
  {
    v5 = fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::allocate((uint64_t **)(a1 + 16), a2);
    v6 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v5;
    if (v6)
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100]((uint64_t)v3, v6);
    v7 = 0;
    *v3 = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
    while (a2 != v7);
    v8 = *(_QWORD **)(a1 + 24);
    if (v8)
    {
      v9 = v8[1];
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        if (v9 >= a2)
          v9 %= a2;
      }
      else
      {
        v9 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 24;
      v12 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v13 = v12[1];
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v9)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v8;
              goto LABEL_23;
            }
            *v8 = *v12;
            *v12 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
            v12 = v8;
          }
          v13 = v9;
LABEL_23:
          v8 = v12;
          v12 = (_QWORD *)*v12;
          v9 = v13;
        }
        while (v12);
      }
    }
  }
  else
  {
    v11 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v11);
    *v3 = 0;
  }
}

_QWORD *fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<24ul>::Allocate(v2 + 1, 1);
      result[2] = 0;
      return result;
    }
    v4 = result[2];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<16ul>::Allocate(v2 + 1, 1);
      result[1] = 0;
      return result;
    }
    v4 = result[1];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<40ul>::Allocate(v2 + 1, 1);
      result[4] = 0;
      return result;
    }
    v4 = result[4];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<72ul>::Allocate(v2 + 1, 1);
      result[8] = 0;
      return result;
    }
    v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<136ul>::Allocate(v2 + 1, 1);
      result[16] = 0;
      return result;
    }
    v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<264ul>::Allocate(v2 + 1, 1);
      result[32] = 0;
      return result;
    }
    v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<520ul>::Allocate(v2 + 1, 1);
      result[64] = 0;
      return result;
    }
    v4 = result[64];
    goto LABEL_26;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__deallocate_node((_QWORD *)a1, *(_QWORD **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<long,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

_QWORD *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__deallocate_node(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = (_QWORD *)*v2;
      result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>((uint64_t *)v3[4]);
      v2[3] = result[7];
      result[7] = v2;
      v2 = v4;
    }
    while (v4);
  }
  return result;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC7)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x19uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 192);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654438;
    fst::internal::MemoryArenaImpl<32ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F655228;
    v6 = *(_QWORD *)(*v3 + 192);
    *(_QWORD *)(*v3 + 192) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC84E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654438;
  a1[1] = &off_24F654460;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x187)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x31uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 384);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F652F88;
    fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F655268;
    v6 = *(_QWORD *)(*v3 + 384);
    *(_QWORD *)(*v3 + 384) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC8634(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x307)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x61uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 768);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654538;
    fst::internal::MemoryArenaImpl<104ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6552A8;
    v6 = *(_QWORD *)(*v3 + 768);
    *(_QWORD *)(*v3 + 768) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC8788(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654538;
  a1[1] = &off_24F654560;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x607)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0xC1uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1536);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6545F8;
    fst::internal::MemoryArenaImpl<200ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6552E8;
    v6 = *(_QWORD *)(*v3 + 1536);
    *(_QWORD *)(*v3 + 1536) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC88DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6545F8;
  a1[1] = &off_24F654620;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC07)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x181uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 3072);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6546B8;
    fst::internal::MemoryArenaImpl<392ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F655328;
    v6 = *(_QWORD *)(*v3 + 3072);
    *(_QWORD *)(*v3 + 3072) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC8A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6546B8;
  a1[1] = &off_24F6546E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x300)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x301uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 6144);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654778;
    fst::internal::MemoryArenaImpl<776ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F655368;
    v6 = *(_QWORD *)(*v3 + 6144);
    *(_QWORD *)(*v3 + 6144) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC8B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654778;
  a1[1] = &off_24F6547A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x600)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x601uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 12288);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654838;
    fst::internal::MemoryArenaImpl<1544ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6553A8;
    v6 = *(_QWORD *)(*v3 + 12288);
    *(_QWORD *)(*v3 + 12288) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDC8CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654838;
  a1[1] = &off_24F654860;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v10 = (_QWORD *)(v7 - 24);
      v10[2] = 0;
      v11 = *(const void **)(v9 - 24);
      v12 = *(_QWORD *)(v9 - 16);
      v9 -= 24;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v10, v11, v12, (v12 - (uint64_t)v11) >> 3);
      v7 = *((_QWORD *)&v18 + 1) - 24;
      *((_QWORD *)&v18 + 1) -= 24;
    }
    while (v9 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_22BDC8EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22BDC8F18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<fst::ReplaceStackPrefix<int,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<fst::ReplaceStackPrefix<int,int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<fst::ReplaceStackPrefix<int,int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_22BDC9314(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::~DefaultReplaceStateTable(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

uint64_t *fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::~DefaultReplaceStateTable(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;

  v8 = (void **)(a1 + 30);
  std::vector<fst::ReplaceStackPrefix<int,int>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table((uint64_t)(a1 + 21));
  v2 = a1[18];
  a1[18] = 0;
  if (v2)
    MEMORY[0x22E2FB328](v2, 0xC400A2AC0F1);
  v3 = a1[17];
  a1[17] = 0;
  if (v3)
    MEMORY[0x22E2FB328](v3, 0xC400A2AC0F1);
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = (uint64_t)v4;
    operator delete(v4);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    MEMORY[0x22E2FB328](v5, 0xC400A2AC0F1);
  v6 = *a1;
  *a1 = 0;
  if (v6)
    MEMORY[0x22E2FB328](v6, 0xC400A2AC0F1);
  return a1;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void *Id;
  _QWORD *v7;
  unsigned int v8;
  void *__p[3];

  if (*(_BYTE *)(a1 + 56))
    return *(unsigned int *)(a1 + 60);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 4))
  {
    *(_BYTE *)(a1 + 56) = 1;
    return *(unsigned int *)(a1 + 60);
  }
  if (*(_BYTE *)(a1 + 56))
    return *(unsigned int *)(a1 + 60);
  v3 = *(_QWORD *)(a1 + 240);
  if (*(_QWORD *)(a1 + 248) - v3 == 8)
  {
    result = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 60) = -1;
    *(_BYTE *)(a1 + 56) = 1;
    if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0)
      *(_DWORD *)(a1 + 64) = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 8 * *(int *)(a1 + 264));
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    if ((_DWORD)result != -1)
    {
      v5 = result;
      memset(__p, 0, sizeof(__p));
      Id = (void *)fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId((_QWORD *)(*(_QWORD *)(a1 + 168) + 136), (uint64_t)__p, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v7 = *(_QWORD **)(a1 + 168);
      v8 = *(_DWORD *)(a1 + 264);
      __p[0] = Id;
      __p[1] = (void *)__PAIR64__(v5, v8);
      result = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v7, __p, 1);
      *(_DWORD *)(a1 + 60) = result;
      *(_BYTE *)(a1 + 56) = 1;
      if (*(_DWORD *)(a1 + 64) <= (int)result)
        *(_DWORD *)(a1 + 64) = result + 1;
    }
  }
  return result;
}

void sub_22BDC9608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  _QWORD *v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  a1[16] = a2;
  v4 = a1 + 4;
  if (!a3)
  {
    v6 = std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::find<long>(v4, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::kCurrentKey);
    if (!v6)
      return -1;
    return v6[2];
  }
  v6 = std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__emplace_unique_key_args<long,long const&>((uint64_t)v4, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::kCurrentKey, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::kCurrentKey);
  if (!v7)
    return v6[2];
  v8 = a1[14];
  v9 = a1[15];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - a1[13]) >> 3);
  v6[2] = v10;
  v11 = a1 + 13;
  if (v8 >= v9)
  {
    v12 = std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(v11, a2);
  }
  else
  {
    std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>((uint64_t)v11, a2);
    v12 = v8 + 24;
  }
  a1[14] = v12;
  return v10;
}

_QWORD *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__emplace_unique_key_args<long,long const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc::operator()((uint64_t *)(a1 + 48), *a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual::operator()((uint64_t **)(a1 + 64), i[2], *a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = fst::PoolAllocator<std::__hash_node<long,void *>>::allocate((uint64_t **)(a1 + 32), 1uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v16 = *(float *)(a1 + 56);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 40);
  return i;
}

void sub_22BDC9938(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t ***v2;

  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<long,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int **v3;
  int *v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  if (a2 < -1)
    return 0;
  v2 = *a1;
  v3 = a2 == -1 ? *(int ***)(v2 + 128) : (int **)(*(_QWORD *)(v2 + 104) + 24 * a2);
  v4 = *v3;
  v5 = v3[1];
  if (v4 == v5)
    return 0;
  result = 0;
  do
  {
    v7 = *v4;
    v8 = v4[1];
    v4 += 2;
    result += v7 + 7863 * v8;
  }
  while (v4 != v5);
  return result;
}

BOOL fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual::operator()(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return 1;
  result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    v5 = *a1;
    if (a2 == -1)
      v6 = v5[16];
    else
      v6 = v5[13] + 24 * a2;
    if (a3 == -1)
      v7 = v5[16];
    else
      v7 = v5[13] + 24 * a3;
    return std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](v5[1], v6, v7);
  }
  return result;
}

BOOL std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;

  v4 = *(_DWORD **)a2;
  v3 = *(_DWORD **)(a2 + 8);
  v5 = ((uint64_t)v3 - *(_QWORD *)a2) >> 3;
  v6 = *(_DWORD **)a3;
  if (v5 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
    return 0;
  if (v3 == v4)
    return 1;
  v7 = v5 <= 1 ? 1 : ((uint64_t)v3 - *(_QWORD *)a2) >> 3;
  if (*v4 != *v6 || v4[1] != v6[1])
    return 0;
  v8 = v6 + 3;
  v9 = v4 + 3;
  v10 = 1;
  do
  {
    v11 = v10;
    if (v7 == v10)
      break;
    if (*(v9 - 1) != *(v8 - 1))
      break;
    v13 = *v9;
    v9 += 2;
    v12 = v13;
    v14 = *v8;
    v8 += 2;
    ++v10;
  }
  while (v12 == v14);
  return v11 >= v5;
}

_QWORD *fst::PoolAllocator<std::__hash_node<long,void *>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<56ul>::Allocate(v2 + 1, 1);
      result[6] = 0;
      return result;
    }
    v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<32ul>::Allocate(v2 + 1, 1);
      result[3] = 0;
      return result;
    }
    v4 = result[3];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<104ul>::Allocate(v2 + 1, 1);
      result[12] = 0;
      return result;
    }
    v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<200ul>::Allocate(v2 + 1, 1);
      result[24] = 0;
      return result;
    }
    v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<392ul>::Allocate(v2 + 1, 1);
      result[48] = 0;
      return result;
    }
    v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<776ul>::Allocate(v2 + 1, 1);
      result[96] = 0;
      return result;
    }
    v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<1544ul>::Allocate(v2 + 1, 1);
      result[192] = 0;
      return result;
    }
    v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t ***std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<long,void *>>>::operator()[abi:ne180100](uint64_t ***result, uint64_t a2)
{
  if (a2)
  {
    result = (uint64_t ***)fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>(**result);
    *(_QWORD *)(a2 + 24) = result[7];
    result[7] = (uint64_t **)a2;
  }
  return result;
}

_QWORD *std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_22BDC9D00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_22BDC9E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::find<long>(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;

  v4 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc::operator()(a1 + 6, *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t **)(a1 + 8);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual::operator()(v12, v11[2], *a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(_QWORD *a1, _OWORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  a1[16] = a2;
  v4 = a1 + 4;
  if (!a3)
  {
    v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(v4, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::kCurrentKey);
    if (!v6)
      return 0xFFFFFFFFLL;
    return *((unsigned int *)v6 + 4);
  }
  v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v4, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::kCurrentKey, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::kCurrentKey);
  if (!v7)
    return *((unsigned int *)v6 + 4);
  v8 = a1[13];
  v9 = (_OWORD *)a1[14];
  v10 = ((uint64_t)v9 - v8) >> 4;
  *((_DWORD *)v6 + 4) = v10;
  v11 = a1[15];
  if ((unint64_t)v9 >= v11)
  {
    v13 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v14 = v11 - v8;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a1 + 15), v15);
    else
      v16 = 0;
    v17 = &v16[16 * v10];
    v18 = &v16[16 * v15];
    *(_OWORD *)v17 = *a2;
    v12 = v17 + 16;
    v20 = (char *)a1[13];
    v19 = (char *)a1[14];
    if (v19 != v20)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)a1[13];
    }
    a1[13] = v17;
    a1[14] = v12;
    a1[15] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = *a2;
    v12 = v9 + 1;
  }
  a1[14] = v12;
  return v10;
}

_QWORD *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
    if ((_DWORD)v7 == -1)
      v9 = *(_QWORD *)(v8 + 128);
    else
      v9 = *(_QWORD *)(v8 + 104) + 16 * v7;
    v10 = *(_QWORD *)v9 + 7853 * *(int *)(v9 + 8) + 7867 * *(int *)(v9 + 12);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t **)(a1 + 32), 1uLL);
  *i = 0;
  i[1] = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_44:
    *v23 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11)
        v24 %= v11;
    }
    else
    {
      v24 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 40);
  return i;
}

void sub_22BDCA2F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t ***v2;

  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return 1;
  result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    v5 = *a1;
    if (a2 == -1)
      v6 = *(_QWORD *)(v5 + 128);
    else
      v6 = *(_QWORD *)(v5 + 104) + 16 * a2;
    if (a3 == -1)
      v7 = *(_QWORD *)(v5 + 128);
    else
      v7 = *(_QWORD *)(v5 + 104) + 16 * a3;
    return *(_QWORD *)v6 == *(_QWORD *)v7
        && *(_DWORD *)(v6 + 8) == *(_DWORD *)(v7 + 8)
        && *(_DWORD *)(v6 + 12) == *(_DWORD *)(v7 + 12);
  }
  return result;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;

  v3 = *a2;
  if ((int)v3 < -1)
  {
    v6 = 0;
  }
  else
  {
    v4 = a1[6];
    if ((_DWORD)v3 == -1)
      v5 = *(_QWORD *)(v4 + 128);
    else
      v5 = *(_QWORD *)(v4 + 104) + 16 * v3;
    v6 = *(_QWORD *)v5 + 7853 * *(int *)(v5 + 8) + 7867 * *(int *)(v5 + 12);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = a1 + 8;
    do
    {
      v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

_DWORD *fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  _DWORD *result;
  uint64_t v7;
  int **v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  result = (_DWORD *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal(a1, a2);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v7 + 92) == a2)
      v8 = (int **)(v7 + 96);
    else
      v8 = (int **)(*(_QWORD *)(v7 + 8) + 8 * a2 + 8);
    *a3 = **v8;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 104);
    v10 = fst::TropicalWeightTpl<float>::Zero();
    v11 = *v10;
    *a3 = *v10;
    if (!*(_QWORD *)(v9 + 16 * a2))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * *(int *)(v9 + 16 * a2 + 8));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(&v13, v12, *(unsigned int *)(v9 + 16 * a2 + 12));
      v11 = v13;
      *a3 = v13;
    }
    if (*(_BYTE *)(a1 + 160)
      || (result = (_DWORD *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(a1, a2), (_DWORD)result))
    {
      result = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *result = v11;
      result[14] |= 9u;
    }
  }
  return result;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (!fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(a1, a2))
  {
    if (!*(_BYTE *)(a1 + 160))
    {
      v9 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 104) + 16 * a2);
      if (HIDWORD(v9) == -1)
        return 0;
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * SDWORD2(v9));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      return v8
           + fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(a1, (uint64_t *)&v9, 0, 15);
    }
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand((uint64_t *)a1, a2);
  }
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 92) == a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(uint64_t *a1, int a2)
{
  uint64_t v4;
  _QWORD *MutableState;
  unsigned int *v6;
  _QWORD *v7;
  _DWORD v8[4];
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;

  v12 = *(_OWORD *)(*(_QWORD *)(a1[21] + 104) + 16 * a2);
  if (HIDWORD(v12) == -1)
  {
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((uint64_t)a1, a2);
    return;
  }
  v4 = *(_QWORD *)(a1[30] + 8 * SDWORD2(v12));
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4);
  if (fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v12, v8, 15))
  {
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1[15], a2);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](MutableState + 3, (uint64_t)v8);
  }
  while (1)
  {
    if (!(_QWORD)v9)
    {
      if (v11 >= (unint64_t)v10)
        break;
      goto LABEL_7;
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 16))(v9) & 1) != 0)
      break;
    if ((_QWORD)v9)
    {
      v6 = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 24))(v9);
      goto LABEL_8;
    }
LABEL_7:
    v6 = (unsigned int *)(*((_QWORD *)&v9 + 1) + 16 * v11);
LABEL_8:
    if (fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc((uint64_t)a1, (uint64_t)&v12, v6, (uint64_t)v8, 15))
    {
      v7 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1[15], a2);
      std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](v7 + 3, (uint64_t)v8);
    }
    if ((_QWORD)v9)
      (*(void (**)(_QWORD))(*(_QWORD *)v9 + 32))(v9);
    else
      ++v11;
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((uint64_t)a1, a2);
  if ((_QWORD)v9)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v9 + 8))(v9);
  }
  else if (*((_QWORD *)&v10 + 1))
  {
    --**((_DWORD **)&v10 + 1);
  }
}

void sub_22BDCA850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(uint64_t a1, uint64_t *a2, _DWORD *a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  int *v10;
  __n128 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t Id;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  void *__p;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4 == -1)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * *((int *)a2 + 2));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v9 + 24))(&v26, v9, *((unsigned int *)a2 + 3));
  v10 = fst::TropicalWeightTpl<float>::Zero();
  LODWORD(v22) = v26;
  HIDWORD(v26) = 0;
  HIDWORD(v26) = *v10;
  v11.n128_u32[0] = v26;
  if (*(float *)&v26 == *((float *)&v26 + 1))
    return 0;
  v12 = *a2;
  if (!*a2)
    return 0;
  if (a3)
  {
    v13 = *(_DWORD *)(a1 + 136);
    if ((v13 & 0xFFFFFFFD) == 1)
      v14 = 0;
    else
      v14 = *(_DWORD *)(a1 + 152);
    *a3 = v14;
    if ((v13 - 1) >= 2)
      v16 = *(_DWORD *)(a1 + 152);
    else
      v16 = 0;
    a3[1] = v16;
    if ((a4 & 8) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 240) + 24 * v12;
      v24 = 0;
      v25 = 0;
      __p = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 3);
      v24 -= 8;
      Id = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId((_QWORD *)(*(_QWORD *)(a1 + 168) + 136), (uint64_t)&__p, 1);
      if (__p)
      {
        v24 = (char *)__p;
        operator delete(__p);
      }
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(_QWORD **)(a1 + 168);
      *(_QWORD *)&v22 = Id;
      *((_QWORD *)&v22 + 1) = *(_QWORD *)(v19 - 8);
      a3[3] = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v20, &v22, 1);
    }
    if ((a4 & 4) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * *((int *)a2 + 2));
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)v21 + 24))(&v22, v21, v4, v11);
      a3[2] = v22;
    }
  }
  return 1;
}

void sub_22BDCAA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5)
{
  BOOL v7;
  char v8;
  signed int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int Id;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  __int128 v36;

  v7 = (a5 & 0xFFFFFFFA) != 0 || (*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) == 1;
  if (!v7)
  {
    *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_DWORD *)(a4 + 8) = a3[2];
    Id = a3[3];
LABEL_24:
    *(_DWORD *)(a4 + 12) = Id;
    return 1;
  }
  v8 = a5;
  v12 = a3 + 1;
  v11 = a3[1];
  if (!v11 || v11 < *(_DWORD *)(*(_QWORD *)(a1 + 176) + 28))
    goto LABEL_19;
  v13 = a1 + 184;
  v14 = *(_QWORD *)(a1 + 184);
  if (v14)
  {
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14);
  }
  else
  {
    do
    {
      v15 = *(_QWORD *)(v13 + 16);
      v7 = *(_QWORD *)v15 == v13;
      v13 = v15;
    }
    while (v7);
  }
  if (v11 > *(_DWORD *)(v15 + 28)
    || (v16 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 200), (int *)a3 + 1)) == 0)
  {
LABEL_19:
    if ((v8 & 8) != 0)
    {
      v23 = *(_QWORD **)(a1 + 168);
      v24 = *(_DWORD *)(a2 + 8);
      v25 = a3[3];
      *(_QWORD *)&v36 = *(_QWORD *)a2;
      *((_QWORD *)&v36 + 1) = __PAIR64__(v25, v24);
      Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v23, &v36, 1);
    }
    else
    {
      Id = -1;
    }
    v26 = *(_QWORD *)a3;
    v27 = a3[2];
    goto LABEL_23;
  }
  v17 = *((_DWORD *)v16 + 5);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 240) + 24 * *(_QWORD *)a2;
  __p = 0;
  v34 = 0;
  v35 = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3);
  fst::ReplaceStackPrefix<int,int>::Push(&__p, *(_DWORD *)(a2 + 8), a3[3]);
  v19 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId((_QWORD *)(*(_QWORD *)(a1 + 168) + 136), (uint64_t)&__p, 1);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * (int)v17);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  if (v21 != -1)
  {
    if ((v8 & 8) != 0)
    {
      v29 = *(_QWORD **)(a1 + 168);
      *(_QWORD *)&v36 = v19;
      *((_QWORD *)&v36 + 1) = __PAIR64__(v21, v17);
      Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v29, &v36, 1);
    }
    else
    {
      Id = -1;
    }
    v30 = 0;
    v31 = *(_DWORD *)(a1 + 132);
    if ((v31 & 0xFFFFFFFD) == 1)
      v32 = 0;
    else
      v32 = *a3;
    if ((v31 - 1) >= 2)
    {
      v30 = *(_QWORD *)(a1 + 144);
      if (v30 == -1)
        v30 = *v12;
    }
    v27 = a3[2];
    v26 = v32 | (v30 << 32);
LABEL_23:
    *(_QWORD *)a4 = v26;
    *(_DWORD *)(a4 + 8) = v27;
    goto LABEL_24;
  }
  return 0;
}

void sub_22BDCAC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ReplaceStackPrefix<int,int>::Push(void **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v8 = (unint64_t)a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(unint64_t **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)*a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v6, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2 | (unint64_t)(a3 << 32);
    v10 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = a2 | (unint64_t)(a3 << 32);
    v10 = v9 + 1;
  }
  a1[1] = v10;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;

  if (!fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2))
  {
    if (!*((_BYTE *)a1 + 160) && (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 24))(a1, 0x10000000))
    {
      v9 = *(_OWORD *)(*(_QWORD *)(a1[21] + 104) + 16 * a2);
      if (HIDWORD(v9) == -1)
        return 0;
      v8 = *(_QWORD *)(a1[30] + 8 * SDWORD2(v9));
      if ((*((_DWORD *)a1 + 33) & 0xFFFFFFFD) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
        v6 = 0;
      }
      else
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      }
      if ((a1[17] & 0xFFFFFFFD) == 1)
        v6 += fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v9, 0, 15);
      return v6;
    }
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(a1, a2);
  }
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

void sub_22BDCAFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::IsNonTerminal(_QWORD *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v7;

  v7 = a2;
  if (*(_DWORD *)(a1[22] + 28) > a2)
    return 0;
  v2 = a1 + 23;
  v3 = a1[23];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    do
    {
      v4 = v2[2];
      v5 = *(_QWORD *)v4 == (_QWORD)v2;
      v2 = (_QWORD *)v4;
    }
    while (v5);
  }
  return *(_DWORD *)(v4 + 28) >= a2
      && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 25, &v7) != 0;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;

  if (!fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2))
  {
    if (!*((_BYTE *)a1 + 160) && (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 24))(a1, 0x40000000))
    {
      v9 = *(_OWORD *)(*(_QWORD *)(a1[21] + 104) + 16 * a2);
      if (HIDWORD(v9) == -1)
        return 0;
      v8 = *(_QWORD *)(a1[30] + 8 * SDWORD2(v9));
      if ((*((_DWORD *)a1 + 33) - 1) >= 2)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
        v6 = 0;
      }
      if ((*((_DWORD *)a1 + 34) - 1) <= 1)
        v6 += fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v9, 0, 15);
      return v6;
    }
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(a1, a2);
  }
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

void sub_22BDCB284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *a1 = off_24F6553E8;
  a1[1] = 0;
  v4 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  if (a3)
  {
    std::allocate_shared[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,void>(*(_QWORD *)(a2 + 8), &v9);
    std::shared_ptr<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=[abi:ne180100](v4, &v9);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100](a1 + 1, (uint64_t *)(a2 + 8));
  }
  return a1;
}

void sub_22BDCB358(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x128uLL);
  result = std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22BDCB414(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F654FD0;
  fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22BDCB45C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  std::string __str;
  char *v45;
  uint64_t v46;

  v4 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(a1, a2, 0);
  *(_QWORD *)v4 = off_24F655020;
  *(_QWORD *)(v4 + 132) = *(_QWORD *)(a2 + 132);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(v4 + 160) = *(_BYTE *)(a2 + 160);
  v5 = operator new();
  fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::DefaultReplaceStateTable(v5, *(_QWORD *)(a2 + 168));
  *(_QWORD *)(a1 + 168) = v5;
  std::set<int>::set[abi:ne180100]((uint64_t *)(a1 + 176), a2 + 176);
  std::unordered_map<int,int>::unordered_map(a1 + 200, a2 + 200);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v6 = (uint64_t **)(a1 + 240);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  std::string::basic_string[abi:ne180100]<0>(&__str, "replace");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFF00000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 0xFFFFFFFF0004;
  v7 = *(_QWORD *)(a2 + 40);
  if (v7)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::reserve((char **)(a1 + 240), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3);
  v12 = *(uint64_t **)(a1 + 248);
  v11 = *(_QWORD *)(a1 + 256);
  if ((unint64_t)v12 >= v11)
  {
    v14 = *v6;
    v15 = v12 - *v6;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v46 = a1 + 256;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 256, v18);
      v14 = *(uint64_t **)(a1 + 240);
      v12 = *(uint64_t **)(a1 + 248);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    v45 = v21;
    *(_QWORD *)v20 = 0;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 8);
    if (v12 == v14)
    {
      v13 = v20 + 8;
    }
    else
    {
      do
      {
        v22 = *--v12;
        *v12 = 0;
        *((_QWORD *)v20 - 1) = v22;
        v20 -= 8;
      }
      while (v12 != v14);
      v13 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
      v21 = v45;
    }
    v23 = *(_OWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v20;
    *(_QWORD *)(a1 + 248) = v13;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v23;
    v24 = *(char **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v21;
    v45 = v24;
    __str.__r_.__value_.__r.__words[0] = v23;
    std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    *v12 = 0;
    v13 = v12 + 1;
  }
  *(_QWORD *)(a1 + 248) = v13;
  v25 = *(_QWORD *)(a2 + 240);
  if ((unint64_t)(*(_QWORD *)(a2 + 248) - v25) >= 9)
  {
    v26 = 1;
    do
    {
      v27 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 8 * v26) + 72))(*(_QWORD *)(v25 + 8 * v26), 1);
      v28 = v27;
      v30 = *(uint64_t **)(a1 + 248);
      v29 = *(_QWORD *)(a1 + 256);
      if ((unint64_t)v30 >= v29)
      {
        v32 = *v6;
        v33 = v30 - *v6;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v46 = a1 + 256;
        if (v36)
        {
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 256, v36);
          v32 = *(uint64_t **)(a1 + 240);
          v30 = *(uint64_t **)(a1 + 248);
        }
        else
        {
          v37 = 0;
        }
        v38 = (uint64_t *)&v37[8 * v33];
        v39 = &v37[8 * v36];
        v45 = v39;
        *v38 = v28;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v38 + 1);
        if (v30 == v32)
        {
          v31 = v38 + 1;
        }
        else
        {
          do
          {
            v40 = *--v30;
            *v30 = 0;
            *--v38 = v40;
          }
          while (v30 != v32);
          v31 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
          v39 = v45;
        }
        v41 = *(_OWORD *)(a1 + 240);
        *(_QWORD *)(a1 + 240) = v38;
        *(_QWORD *)(a1 + 248) = v31;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v41;
        v42 = *(char **)(a1 + 256);
        *(_QWORD *)(a1 + 256) = v39;
        v45 = v42;
        __str.__r_.__value_.__r.__words[0] = v41;
        std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        *v30 = v27;
        v31 = v30 + 1;
      }
      *(_QWORD *)(a1 + 248) = v31;
      ++v26;
      v25 = *(_QWORD *)(a2 + 240);
    }
    while (v26 < (*(_QWORD *)(a2 + 248) - v25) >> 3);
  }
  return a1;
}

void sub_22BDCB810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a9);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a10, *(_QWORD **)(v19 + 184));
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(v19 + 168), 0);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v19);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::DefaultReplaceStateTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::CompactHashBiTable(a1, 0, 0, 0);
  fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::CompactHashBiTable((uint64_t *)(v4 + 136), (_QWORD *)(a2 + 136));
  return a1;
}

void sub_22BDCB9A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::CompactHashBiTable(uint64_t *a1, _QWORD *a2)
{
  _QWORD *i;

  *a1 = operator new();
  a1[1] = operator new();
  a1[2] = (uint64_t)a1;
  a1[3] = (uint64_t)a1;
  std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::unordered_set((uint64_t)(a1 + 4), a2[9], a1 + 2, a1 + 3);
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(a1 + 13, a2[13], a2[14], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[14] - a2[13]) >> 3));
  for (i = (_QWORD *)a2[7]; i; i = (_QWORD *)*i)
    std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__emplace_unique_key_args<long,long const&>((uint64_t)(a1 + 4), i + 2, i + 2);
  return a1;
}

void sub_22BDCBA88(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table(v2);
  v4 = v1[1];
  v1[1] = 0;
  if (v4)
    MEMORY[0x22E2FB328](v4, 0xC400A2AC0F1);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    MEMORY[0x22E2FB328](v5, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ReplaceStackPrefix<int,int>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReplaceStackPrefix<int,int>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22BDCBB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<fst::ReplaceStackPrefix<int,int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22BDCBC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_22BDCBD38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::unordered_map<int,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(a1, i + 4, (_QWORD *)i + 2);
  return a1;
}

void sub_22BDCC05C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_22BDCC278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  signed int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15[4];
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 64))
    return 0;
  v5 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(v15, *(_QWORD *)(a1 + 8), v6);
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFlags((int *)v15, 15, 31);
    v7 = v16;
    v8 = v17;
    while (v7 < v8)
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(v15)[3];
      if (*(_DWORD *)(v9 + 64) <= v10)
        *(_DWORD *)(v9 + 64) = v10 + 1;
      v8 = v17;
      v7 = ++v16;
    }
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(*(_QWORD *)(a1 + 16), v6);
    v11 = *(_DWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 64);
    v4 = v11 >= v13;
    if (v18)
      --*v18;
    if (v19)
      --*v19;
    if (v11 < v13)
      break;
    v6 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v12);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64));
  return v4;
}

void sub_22BDCC3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,_DWORD *a26)
{
  if (a22)
    --*a22;
  if (a26)
    --*a26;
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFlags(int *a1, int a2, int a3)
{
  char v3;
  int v5;
  uint64_t result;
  int v7;
  int v8;

  v3 = a2;
  v5 = a1[14] & ~a3;
  result = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_BYTE *)(result + 160))
    v7 = 15;
  else
    v7 = 31;
  v8 = v7 & a2 | v5;
  a1[14] = v8;
  if ((v8 & 0x10) == 0 && a1[38] != 15)
  {
    result = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(result, a1[2]);
    if ((result & 1) == 0)
      a1[38] = 0;
  }
  if ((v3 & 0x10) != 0 && !a1[38])
    return (uint64_t)fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Init(a1);
  return result;
}

unsigned int *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *__p[2];
  char v14;
  BOOL v15;

  v2 = *((_DWORD *)a1 + 38);
  if (v2)
  {
    v3 = a1[5];
    v4 = v2 ^ 0xF;
  }
  else
  {
    if ((a1[7] & 0x10) != 0)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      LogMessage::LogMessage(&v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ReplaceFst: Inconsistent arc iterator flags", 43);
      LogMessage::~LogMessage((LogMessage *)&v15);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(*a1, *((unsigned int *)a1 + 2), a1 + 10);
    v4 = 0;
    v3 = 0;
    a1[18] = a1[11];
    *((_DWORD *)a1 + 38) = 15;
    a1[5] = 0;
  }
  v5 = a1[4] - v3;
  if (v5 < 0)
  {
    v11 = *((_DWORD *)a1 + 14);
    if (((*((_DWORD *)a1 + 43) ^ 0xF) & v11) != 0)
    {
      fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(_QWORD *)(*a1 + 8), a1 + 2, (_DWORD *)a1 + 39, v11 & 0xF);
      *((_DWORD *)a1 + 43) = a1[7] & 0xF;
    }
    return (unsigned int *)a1 + 39;
  }
  else
  {
    v6 = (unsigned int *)(a1[18] + 16 * v5);
    v7 = *((_DWORD *)a1 + 14);
    if ((v4 & v7) != 0)
    {
      v8 = (uint64_t)(a1 + 2);
      v10 = *a1;
      v9 = (uint64_t)a1 + 60;
      fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc(*(_QWORD *)(v10 + 8), v8, v6, v9, v7 & 0xF);
      return (unsigned int *)v9;
    }
  }
  return v6;
}

void sub_22BDCC644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  char HasArcs;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  *a1 = a2;
  *((_DWORD *)a1 + 2) = a3;
  a1[2] = -1;
  v4 = a1 + 2;
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = -1;
  *((_DWORD *)a1 + 14) = 15;
  *((_OWORD *)a1 + 5) = 0u;
  v5 = a1 + 10;
  *((_OWORD *)a1 + 7) = 0u;
  v6 = a1 + 14;
  *((_DWORD *)a1 + 43) = 0;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *(_OWORD *)((char *)a1 + 140) = 0u;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v7 + 160))
  {
    HasArcs = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(v7, a3);
    a2 = *a1;
    a3 = *((_DWORD *)a1 + 2);
    if ((HasArcs & 1) == 0)
    {
      fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(*(uint64_t **)(a2 + 8), *((_DWORD *)a1 + 2));
      a2 = *a1;
      a3 = *((_DWORD *)a1 + 2);
    }
  }
  v9 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(*(_QWORD *)(a2 + 8), a3);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  if (v9)
  {
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(v11, *((_DWORD *)a1 + 2), v5);
    v12 = a1[11];
    a1[6] = a1[12];
    a1[18] = v12;
    *((_DWORD *)a1 + 38) = 15;
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 168) + 104) + 16 * *((int *)a1 + 2));
    v13 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v13 == -1)
    {
      a1[6] = 0;
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 240) + 8 * *((int *)a1 + 6));
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 120))(v14, v13, v6);
      a1[18] = a1[15];
      v15 = fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(_QWORD *)(*a1 + 8), v4, (_DWORD *)a1 + 39, 7);
      *((_DWORD *)a1 + 43) = 7;
      v16 = a1[16] + v15;
      a1[5] = v15;
      a1[6] = v16;
      *((_DWORD *)a1 + 38) = 0;
    }
  }
  return a1;
}

_BYTE *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Init(_BYTE *result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = result;
  if ((result[56] & 0x10) != 0)
  {
    v3 = *((_QWORD *)result + 16);
    *((_QWORD *)result + 18) = *((_QWORD *)result + 15);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 8) + 132) & 0xFFFFFFFD) == 1)
      v4 = 4;
    else
      v4 = 5;
    *((_DWORD *)result + 38) = v4;
    v2 = *((_QWORD *)result + 6) - v3;
  }
  else
  {
    result = (_BYTE *)(*(uint64_t (**)(void))(**(_QWORD **)result + 120))();
    v2 = 0;
    *((_QWORD *)v1 + 18) = *((_QWORD *)v1 + 11);
    *((_DWORD *)v1 + 38) = 15;
  }
  *((_QWORD *)v1 + 5) = v2;
  return result;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t *a1, int a2, _QWORD *a3)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(a1, a2);
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator((uint64_t)a1, a2, a3);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  *(_QWORD *)a1 = off_24F655530;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = a3;
  *(_WORD *)(a1 + 77) = 0;
  *(_QWORD *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = -1;
  v4 = *fst::TropicalWeightTpl<float>::One();
  *(_QWORD *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 120) = v4;
  *(_DWORD *)(a1 + 124) = -1;
  if (*(_DWORD *)(a1 + 72) == 2)
    *(_QWORD *)(a1 + 112) = 0xFFFFFFFF00000000;
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatchers(a1);
  return a1;
}

void sub_22BDCC95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v14;

  v12 = v11;
  a10 = v12;
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v14 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatchers(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(a1 + 40);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::resize(a1 + 40, (uint64_t)(*(_QWORD *)(v2 + 248) - *(_QWORD *)(v2 + 240)) >> 3);
  v4 = *(_QWORD *)(v2 + 240);
  if (*(_QWORD *)(v2 + 248) != v4)
  {
    v5 = 0;
    do
    {
      if (*(_QWORD *)(v4 + 8 * v5))
      {
        v6 = *(_QWORD *)(a1 + 40);
        v7 = operator new();
        fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher(v7, *(_QWORD *)(*(_QWORD *)(v2 + 240) + 8 * v5), *(unsigned int *)(a1 + 72), 1, 0, 1);
        std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100]((uint64_t *)(v6 + 8 * v5), v7);
        v8 = *(_QWORD *)(a1 + 24);
        v9 = *(_QWORD **)(v8 + 176);
        if (v9 != (_QWORD *)(v8 + 184))
        {
          do
          {
            fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(*(_QWORD *)(*v3 + 8 * v5), *((_DWORD *)v9 + 7));
            v10 = (_QWORD *)v9[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v9[2];
                v12 = *v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v12);
            }
            v9 = v11;
          }
          while (v11 != (_QWORD *)(*(_QWORD *)(a1 + 24) + 184));
        }
      }
      ++v5;
      v4 = *(_QWORD *)(v2 + 240);
    }
    while (v5 < (*(_QWORD *)(v2 + 248) - v4) >> 3);
  }
}

void sub_22BDCCAB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x1020C403A3A3D98);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFstMatcher(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24F655530;
  v4 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24F655530;
  v4 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return MEMORY[0x22E2FB328](a1, 0x10E1C40A5BE1C0BLL);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher(v4, a1, a2);
  return v4;
}

void sub_22BDCCBF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C40A5BE1C0BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 72);
  if (v2 == 4)
    return 4;
  if (v2 == 1)
    v6 = 0x10000000;
  else
    v6 = 0x40000000;
  v7 = *(_QWORD *)(a1 + 16);
  if (v2 == 1)
    v8 = 805306368;
  else
    v8 = 3221225472;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 72);
  v10 = 0x80000000;
  if (v2 == 1)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 4;
  else
    return 5;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  if (*(_DWORD *)(result + 64) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 64) = a2;
    *(_OWORD *)(result + 80) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 168) + 104) + 16 * a2);
    v3 = *(unsigned int *)(result + 92);
    if ((_DWORD)v3 == -1)
    {
      *(_BYTE *)(result + 76) = 1;
    }
    else
    {
      v4 = *(_DWORD **)(*(_QWORD *)(result + 40) + 8 * *(int *)(result + 88));
      *(_QWORD *)(result + 32) = v4;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v4 + 8) + 32))(*(_QWORD *)(*(_QWORD *)v4 + 8), v3);
      v4[18] = v3;
      *(_DWORD *)(v2 + 124) = *(_DWORD *)(v2 + 64);
      *(_BYTE *)(v2 + 78) = 0;
    }
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  *(_DWORD *)(a1 + 68) = a2;
  if ((a2 + 1) > 1)
    return fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(_QWORD *)(a1 + 32), a2);
  if (!a2)
    *(_BYTE *)(a1 + 77) = 1;
  *(_BYTE *)(a1 + 78) = fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(_QWORD *)(a1 + 24), (uint64_t *)(a1 + 80), 0, 15);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 48) = v4 + 24;
  *(_BYTE *)(v4 + 56) = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    v8 = *(_QWORD **)(v4 + 16);
    while (1)
    {
      *(_QWORD *)(v4 + 48) = v8;
      if (v8 == v5)
        break;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v4 + 8) + 40))(*(_QWORD *)(*(_QWORD *)v4 + 8), *((unsigned int *)v8 + 7));
      v10 = *(_QWORD **)(v4 + 48);
      if ((v9 & 1) != 0)
      {
        if (v10 == v5)
          break;
        *(_BYTE *)(v4 + 76) = 0;
        return 1;
      }
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v8 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v10[2];
          v12 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (!v12);
      }
    }
  }
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v4 + 8) + 40))(*(_QWORD *)(*(_QWORD *)v4 + 8), 0xFFFFFFFFLL);
  *(_BYTE *)(v4 + 76) = v6 ^ 1;
  if ((v6 & 1) != 0)
    return 1;
  if (a2)
    v12 = *(_BYTE *)(a1 + 78) == 0;
  else
    v12 = 0;
  return !v12;
}

BOOL fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 77) && !*(_BYTE *)(a1 + 78) && *(_BYTE *)(*(_QWORD *)(a1 + 32) + 76) != 0;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 77))
    return a1 + 112;
  if (*(_BYTE *)(a1 + 78))
  {
    v2 = a1 + 96;
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(_QWORD *)(a1 + 24), (uint64_t *)(a1 + 80), (_DWORD *)(a1 + 96), 15);
  }
  else
  {
    v3 = *(unsigned int **)(a1 + 32);
    if (*((_BYTE *)v3 + 56))
      v4 = v3 + 15;
    else
      v4 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 8) + 56))(*(_QWORD *)(*(_QWORD *)v3 + 8));
    v5 = *(_QWORD *)(a1 + 24);
    v6 = a1 + 80;
    v2 = a1 + 96;
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc(v5, v6, v4, v2, 15);
  }
  return v2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(uint64_t result)
{
  if (*(_BYTE *)(result + 77))
  {
    *(_BYTE *)(result + 77) = 0;
  }
  else if (*(_BYTE *)(result + 78))
  {
    *(_BYTE *)(result + 78) = 0;
  }
  else
  {
    return fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(*(_QWORD *)(result + 32));
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Priority(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

void std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (uint64_t *)v5)
        std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100](--v3, 0);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__append((char **)a1, a2 - v4);
  }
}

uint64_t std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

void fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  void *__p[2];
  char v3;
  BOOL v4;

  if (a2)
  {
    fst::CompactSet<int,-1>::Insert(a1 + 16, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v4, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    LogMessage::~LogMessage((LogMessage *)&v4);
    if (v3 < 0)
      operator delete(__p[0]);
  }
}

void sub_22BDCD0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 12))
  {
    v2 = *(uint64_t **)a1;
    if (*(_QWORD *)a1)
    {
      v3 = v2[1];
      v2[1] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = *v2;
      *v2 = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      MEMORY[0x22E2FB328](v2, 0x60C405C6656D0);
    }
  }
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, char a6)
{
  uint64_t *v11;
  char v13;
  int v14;
  int v15;

  v11 = a5;
  if (!a5)
  {
    v11 = (uint64_t *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v11, a2, a3);
  }
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 8) = a4;
  if (a5)
    v13 = a6;
  else
    v13 = 1;
  *(_BYTE *)(a1 + 12) = v13;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  if ((_DWORD)a3 == 1)
    v14 = -1;
  else
    v14 = 0;
  if ((_DWORD)a3 == 1)
    v15 = 0;
  else
    v15 = -1;
  *(_DWORD *)(a1 + 60) = v14;
  *(_DWORD *)(a1 + 64) = v15;
  *(_DWORD *)(a1 + 68) = *fst::TropicalWeightTpl<float>::One();
  *(_DWORD *)(a1 + 72) = -1;
  return a1;
}

void sub_22BDCD3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x60C405C6656D0);
  _Unwind_Resume(a1);
}

uint64_t *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int32x2_t *v7;
  uint64_t v8;

  v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  *a1 = v5;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a3);
  a1[1] = v6;
  if (!v6)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(v7, *a1, a3, 1);
    v8 = a1[1];
    a1[1] = (uint64_t)v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

void sub_22BDCD4D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x22E2FB328](v2, 0x10E1C4054F459C6);
  v4 = v1[1];
  v1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

uint64_t **fst::CompactSet<int,-1>::Insert(uint64_t a1, int a2)
{
  uint64_t **result;
  int v4;
  int v5;
  int v7;
  int v9;

  v9 = a2;
  result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a1, &v9, &v9);
  v4 = *(_DWORD *)(a1 + 24);
  v5 = v9;
  if (v4 == -1 || v9 < v4)
    *(_DWORD *)(a1 + 24) = v9;
  v7 = *(_DWORD *)(a1 + 28);
  if (v7 == -1 || v7 < v5)
    *(_DWORD *)(a1 + 28) = v5;
  return result;
}

void std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)a1 = off_24F655530;
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 72))(*(_QWORD *)(a2 + 16), a3);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 77) = 0;
  *(_QWORD *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = -1;
  v7 = *fst::TropicalWeightTpl<float>::One();
  *(_QWORD *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 120) = v7;
  *(_DWORD *)(a1 + 124) = -1;
  if (*(_DWORD *)(a1 + 72) == 2)
    *(_QWORD *)(a1 + 112) = 0xFFFFFFFF00000000;
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatchers(a1);
  return a1;
}

void sub_22BDCD6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v4 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t (*v4)(void);
  uint64_t result;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = a1 + 24;
  *(_BYTE *)(a1 + 56) = 0;
  if (a2 == -1)
  {
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    {
      v6 = *(_QWORD **)(a1 + 16);
      while (1)
      {
        *(_QWORD *)(a1 + 48) = v6;
        if (v6 == v3)
          break;
        v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 40))(*(_QWORD *)(*(_QWORD *)a1 + 8), *((unsigned int *)v6 + 7));
        v8 = *(_QWORD **)(a1 + 48);
        if ((v7 & 1) != 0)
        {
          if (v8 == v3)
            break;
          result = 1;
          goto LABEL_11;
        }
        v9 = (_QWORD *)v8[1];
        if (v9)
        {
          do
          {
            v6 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v8[2];
            v10 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (!v10);
        }
      }
    }
    v4 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 40);
    goto LABEL_10;
  }
  if (!a2)
  {
    v4 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 40);
LABEL_10:
    result = v4();
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a1 + 8) & 2) == 0 || v3 == (_QWORD *)fst::CompactSet<int,-1>::Find(a1 + 16, a2))
  {
    v4 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 40);
    goto LABEL_10;
  }
  result = 1;
  *(_BYTE *)(a1 + 56) = 1;
LABEL_11:
  *(_BYTE *)(a1 + 76) = result ^ 1;
  return result;
}

uint64_t fst::CompactSet<int,-1>::Find(uint64_t a1, int a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = v2 != -1 && v2 <= a2;
  if (!v3 || *(_DWORD *)(a1 + 28) < a2)
    return a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  v5 = a1 + 8;
  v6 = v7;
  if (!v7)
    return v5;
  v4 = v5;
  do
  {
    v8 = *(_DWORD *)(v6 + 28);
    v9 = v8 < a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (!v9)
      v4 = v6;
    v6 = *v10;
  }
  while (*v10);
  if (v4 == v5 || *(_DWORD *)(v4 + 28) > a2)
    return v5;
  return v4;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  _BYTE *v1;
  char v2;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = (_BYTE *)result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = 1;
LABEL_3:
    v1[76] = v2;
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)result + 8) + 64))(*(_QWORD *)(*(_QWORD *)result + 8));
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v1 + 8) + 48))(*(_QWORD *)(*(_QWORD *)v1 + 8));
    v1[76] = result;
    if ((_DWORD)result)
    {
      v3 = v1 + 24;
      v4 = (_QWORD *)*((_QWORD *)v1 + 6);
      if (v4 != (_QWORD *)(v1 + 24))
      {
        v5 = (_QWORD *)v4[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v4[2];
            v7 = *v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          *((_QWORD *)v1 + 6) = v6;
          if (v6 == (_QWORD *)v3)
            goto LABEL_19;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v1 + 8) + 40))(*(_QWORD *)(*(_QWORD *)v1 + 8), *((unsigned int *)v6 + 7));
          v8 = (_QWORD *)*((_QWORD *)v1 + 6);
          if ((result & 1) != 0)
            break;
          v9 = (_QWORD *)v8[1];
          if (v9)
          {
            do
            {
              v6 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v6 = (_QWORD *)v8[2];
              v7 = *v6 == (_QWORD)v8;
              v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == (_QWORD *)v3)
        {
LABEL_19:
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v1 + 8) + 40))(*(_QWORD *)(*(_QWORD *)v1 + 8), 0xFFFFFFFFLL);
          v2 = result ^ 1;
          goto LABEL_3;
        }
        v1[76] = 0;
      }
    }
  }
  return result;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CyclicDependencies(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[208];
  unint64_t v4;
  uint64_t v5[3];

  v5[0] = *(int *)(a1 + 264);
  v5[1] = 0x100000002;
  v5[2] = 0;
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceUtil((uint64_t)v3, (uint64_t *)(a1 + 240), a1 + 200, v5);
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetDependencies((uint64_t)v3, 0);
  v1 = (v4 >> 34) & 1;
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~ReplaceUtil((uint64_t)v3);
  return v1;
}

void sub_22BDCDA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~ReplaceUtil((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceUtil(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t i;
  uint64_t *v44;

  v7 = *a4;
  v8 = a4[1];
  v9 = a4[2];
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = (char **)(a1 + 24);
  *(_DWORD *)(a1 + 4) = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  v11 = (uint64_t *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::vector<int>::vector((std::vector<int> *)(a1 + 72), (a2[1] - *a2) >> 3);
  v44 = v11;
  std::unordered_map<int,int>::unordered_map(a1 + 96, a3);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst((_QWORD *)(a1 + 136));
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v12 = *(_QWORD **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v12 >= v13)
  {
    v15 = ((char *)v12 - *v10) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v16 = v13 - (_QWORD)*v10;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 40, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = 0;
    v14 = v20 + 8;
    v23 = *(char **)(a1 + 24);
    v22 = *(char **)(a1 + 32);
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = *v10;
    }
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v12 = 0;
    v14 = v12 + 1;
  }
  *(_QWORD *)(a1 + 32) = v14;
  v25 = *a2;
  if ((unint64_t)(a2[1] - *a2) >= 9)
  {
    v26 = 1;
    do
    {
      v27 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v25 + 8 * v26) + 72))(*(_QWORD *)(v25 + 8 * v26), 0);
      v28 = v27;
      v30 = *(uint64_t **)(a1 + 32);
      v29 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v30 >= v29)
      {
        v32 = ((char *)v30 - *v10) >> 3;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v33 = v29 - (_QWORD)*v10;
        v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1))
          v34 = v32 + 1;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 40, v35);
        else
          v36 = 0;
        v37 = (uint64_t *)&v36[8 * v32];
        *v37 = v28;
        v31 = v37 + 1;
        v39 = *(char **)(a1 + 24);
        v38 = *(char **)(a1 + 32);
        if (v38 != v39)
        {
          do
          {
            v40 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v37 = v40;
          }
          while (v38 != v39);
          v38 = *v10;
        }
        *(_QWORD *)(a1 + 24) = v37;
        *(_QWORD *)(a1 + 32) = v31;
        *(_QWORD *)(a1 + 40) = &v36[8 * v35];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v30 = v27;
        v31 = v30 + 1;
      }
      *(_QWORD *)(a1 + 32) = v31;
      ++v26;
      v25 = *a2;
    }
    while (v26 < (a2[1] - *a2) >> 3);
  }
  v41 = *(uint64_t **)(a3 + 16);
  for (i = *v44; v41; v41 = (uint64_t *)*v41)
    *(_DWORD *)(i + 4 * *((int *)v41 + 5)) = *((_DWORD *)v41 + 4);
  *(_DWORD *)a1 = *(_DWORD *)(i + 4 * *(int *)(a1 + 4));
  return a1;
}

void sub_22BDCDCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13, void **a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v18 = (void *)v14[31];
  if (v18)
  {
    v14[32] = v18;
    operator delete(v18);
  }
  a14 = a10;
  std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v19 = (void *)v14[23];
  if (v19)
    operator delete(v19);
  v20 = *v16;
  if (*v16)
  {
    v14[21] = v20;
    operator delete(v20);
  }
  v14[17] = off_24F652DA0;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 18));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a11);
  v21 = *a13;
  if (*a13)
  {
    v14[10] = v21;
    operator delete(v21);
  }
  v22 = (void *)v14[6];
  if (v22)
  {
    v14[7] = v22;
    operator delete(v22);
  }
  v23 = *v15;
  if (*v15)
  {
    v14[4] = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_22BDCDDFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 24;
    do
    {
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v5, *(_QWORD **)(v5 + 8));
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v5 - 24, *(_QWORD **)(v5 - 16));
      v6 = v5 - 56;
      v5 -= 80;
    }
    while (v6 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats::~ReplaceStats(uint64_t a1)
{
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  return a1;
}

void fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetDependencies(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  __int128 v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  int *v54;
  int v55;
  float v56;
  float v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;

  v2 = a2;
  v4 = a1 + 136;
  if ((int)((*(_QWORD *)(*(_QWORD *)(a1 + 144) + 64) - *(_QWORD *)(*(_QWORD *)(a1 + 144) + 56)) >> 3) >= 1)
  {
    if (!a2)
      return;
    v5 = (_BYTE *)(a1 + 216);
    if (*(_BYTE *)(a1 + 216))
      return;
    fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(a1 + 136);
    std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__base_destruct_at_end[abi:ne180100](a1 + 224, *(_QWORD *)(a1 + 224));
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
    *(_BYTE *)(a1 + 216) = v2;
    goto LABEL_6;
  }
  *(_BYTE *)(a1 + 216) = a2;
  v5 = (_BYTE *)(a1 + 216);
  if (a2)
LABEL_6:
    std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::reserve((uint64_t *)(a1 + 224), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
  {
    v6 = 0;
    do
    {
      fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(v4);
      v7 = *fst::TropicalWeightTpl<float>::One();
      fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v4);
      v8 = *(_QWORD **)(a1 + 144);
      LODWORD(v47) = v7;
      fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(v8, v6, (float *)&v47);
      if (*(_BYTE *)(a1 + 216))
      {
        v50 = 0;
        v51 = 0;
        v47 = 0uLL;
        LODWORD(v48) = 0;
        *((_QWORD *)&v48 + 1) = 0;
        v49 = (unint64_t)&v50;
        *((_QWORD *)&v52 + 1) = 0;
        *(_QWORD *)&v53 = 0;
        *(_QWORD *)&v52 = (char *)&v52 + 8;
        v9 = *(_QWORD *)(a1 + 232);
        if (v9 >= *(_QWORD *)(a1 + 240))
        {
          v14 = std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__push_back_slow_path<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>((uint64_t *)(a1 + 224), (uint64_t)&v47);
        }
        else
        {
          v10 = v48;
          *(_OWORD *)v9 = v47;
          *(_OWORD *)(v9 + 16) = v10;
          *(_QWORD *)(v9 + 32) = v49;
          v11 = v50;
          *(_QWORD *)(v9 + 40) = v50;
          v12 = v9 + 40;
          v13 = v51;
          *(_QWORD *)(v9 + 48) = v51;
          if (v13)
          {
            v11[2] = v12;
            v49 = (unint64_t)&v50;
            v50 = 0;
            v51 = 0;
          }
          else
          {
            *(_QWORD *)(v9 + 32) = v12;
          }
          *(_QWORD *)(v9 + 56) = v52;
          v15 = *((_QWORD *)&v52 + 1);
          *(_QWORD *)(v9 + 64) = *((_QWORD *)&v52 + 1);
          v16 = v9 + 64;
          v17 = v53;
          *(_QWORD *)(v9 + 72) = v53;
          if (v17)
          {
            *(_QWORD *)(v15 + 16) = v16;
            *(_QWORD *)&v52 = (char *)&v52 + 8;
            *((_QWORD *)&v52 + 1) = 0;
            *(_QWORD *)&v53 = 0;
          }
          else
          {
            *(_QWORD *)(v9 + 56) = v16;
          }
          v14 = v9 + 80;
        }
        *(_QWORD *)(a1 + 232) = v14;
        std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)&v52, *((_QWORD **)&v52 + 1));
        std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)&v49, v50);
      }
      ++v6;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  }
  v18 = *(_DWORD *)(a1 + 4);
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v4);
  v19 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(v19 + 80) = v18;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  *(_QWORD *)(v19 + 8) = v20 & 0xCCCFFFFF0007 | (((v20 >> 35) & 1) << 37) | *(_QWORD *)(v19 + 8) & 4;
  v61 = 0;
  v22 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 32);
  if (v21 != v22)
  {
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *(_QWORD *)(v22 + 8 * v24);
      if (!v25)
        goto LABEL_60;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v46 = v25;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 112))(v25, &v58);
LABEL_25:
      if (!v58)
        break;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58))
      {
        if (v58)
        {
          v26 = (*(uint64_t (**)(void))(*(_QWORD *)v58 + 24))();
          goto LABEL_31;
        }
LABEL_30:
        v26 = v60;
LABEL_31:
        v27 = v46;
        if (*v5)
        {
          ++*(_DWORD *)(*(_QWORD *)(a1 + 224) + 80 * v61);
          (*(void (**)(float *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v46 + 24))(&v57, v46, v26);
          v28 = fst::TropicalWeightTpl<float>::Zero();
          *(float *)&v47 = v57;
          LODWORD(v54) = 0;
          LODWORD(v54) = *v28;
          v27 = v46;
          if (v57 != *(float *)&v54)
          {
            v29 = *(_QWORD *)(a1 + 224) + 80 * v61;
            ++*(_DWORD *)(v29 + 4);
          }
        }
        v49 = 0;
        v47 = 0u;
        v48 = 0u;
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v27 + 120))(v27, v26, &v47);
        while (1)
        {
          if ((_QWORD)v47)
          {
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v47 + 16))(v47))
            {
              if ((_QWORD)v47)
              {
                (*(void (**)(_QWORD))(*(_QWORD *)v47 + 8))(v47);
                goto LABEL_54;
              }
LABEL_52:
              if (*((_QWORD *)&v48 + 1))
                --**((_DWORD **)&v48 + 1);
LABEL_54:
              if (v58)
                (*(void (**)(uint64_t))(*(_QWORD *)v58 + 32))(v58);
              else
                ++v60;
              goto LABEL_25;
            }
          }
          else if (v49 >= (unint64_t)v48)
          {
            goto LABEL_52;
          }
          if (*v5)
          {
            v30 = *(_QWORD *)(a1 + 224) + 80 * v61;
            ++*(_QWORD *)(v30 + 8);
          }
          if ((_QWORD)v47)
            v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47 + 24))(v47);
          else
            v31 = *((_QWORD *)&v47 + 1) + 16 * v49;
          v32 = (int *)(v31 + 4);
          v33 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 96), (int *)(v31 + 4));
          if (v33)
          {
            v57 = *((float *)v33 + 5);
            v34 = v61;
            v35 = *v32;
            v36 = *fst::TropicalWeightTpl<float>::One();
            LODWORD(v54) = v35;
            HIDWORD(v54) = v35;
            v55 = v36;
            v56 = v57;
            fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v4);
            fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(_QWORD **)(a1 + 144), v34, (float *)&v54);
            if (*v5)
            {
              v37 = *(_QWORD *)(a1 + 224);
              ++*(_DWORD *)(v37 + 80 * v61 + 16);
              v38 = v37 + 80 * SLODWORD(v57);
              ++*(_QWORD *)(v38 + 24);
              v54 = &v61;
              v39 = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v38 + 32), &v61, (uint64_t)&std::piecewise_construct, &v54);
              v39[5] = (uint64_t *)((char *)v39[5] + 1);
              v40 = (uint64_t **)(*(_QWORD *)(a1 + 224) + 80 * v61 + 56);
              v54 = (int *)&v57;
              v41 = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v40, (int *)&v57, (uint64_t)&std::piecewise_construct, &v54);
              v41[5] = (uint64_t *)((char *)v41[5] + 1);
            }
          }
          if ((_QWORD)v47)
            (*(void (**)(_QWORD))(*(_QWORD *)v47 + 32))(v47);
          else
            ++v49;
        }
      }
      if (v58)
        (*(void (**)(void))(*(_QWORD *)v58 + 8))();
LABEL_59:
      v23 = v61;
      v22 = *(_QWORD *)(a1 + 24);
      v21 = *(_QWORD *)(a1 + 32);
LABEL_60:
      v61 = ++v23;
      v24 = v23;
      if (v23 >= (unint64_t)((v21 - v22) >> 3))
        goto LABEL_61;
    }
    if ((int)v60 >= v59)
      goto LABEL_59;
    goto LABEL_30;
  }
LABEL_61:
  *(_QWORD *)&v47 = a1 + 160;
  *((_QWORD *)&v47 + 1) = a1 + 184;
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = a1 + 208;
  v52 = 0u;
  v53 = 0u;
  fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v4, (uint64_t *)&v47, 0);
  v42 = *((_QWORD *)&v53 + 1);
  *((_QWORD *)&v53 + 1) = 0;
  if (v42)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v53 + 8, v42);
  v43 = (void **)v53;
  *(_QWORD *)&v53 = 0;
  if (v43)
    std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v53, v43);
  v44 = *((_QWORD *)&v52 + 1);
  *((_QWORD *)&v52 + 1) = 0;
  if (v44)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v52 + 8, v44);
  v45 = v52;
  *(_QWORD *)&v52 = 0;
  if (v45)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v52, v45);
}

void sub_22BDCE508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_22BDCE634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 80;
      std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>::construct[abi:ne180100]<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>(a1, v7 - 80, v9);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>::construct[abi:ne180100]<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  v4 = (_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 40) = v5;
  v6 = a2 + 40;
  v7 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a3 + 32) = v4;
    *v4 = 0;
    *(_QWORD *)(a3 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v6;
  }
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  v8 = (_QWORD *)(a3 + 64);
  v9 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 64) = v9;
  v10 = a2 + 64;
  v11 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 72) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)(a3 + 56) = v8;
    *v8 = 0;
    *(_QWORD *)(a3 + 72) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 56) = v10;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i + 56, *(_QWORD **)(i + 64));
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i + 32, *(_QWORD **)(i + 40));
    i = *(_QWORD *)(a2 + 32) + 80;
  }
}

uint64_t std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i - 24, *(_QWORD **)(i - 16));
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i - 48, *(_QWORD **)(i - 40));
  }
}

uint64_t std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__push_back_slow_path<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>::construct[abi:ne180100]<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_22BDCEAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~ReplaceUtil(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v13;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_QWORD *)(a1 + 24);
        v2 = *(_QWORD *)(a1 + 32);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = *(void **)(a1 + 248);
  if (v6)
  {
    *(_QWORD *)(a1 + 256) = v6;
    operator delete(v6);
  }
  v13 = (void **)(a1 + 224);
  std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v7 = *(void **)(a1 + 184);
  if (v7)
    operator delete(v7);
  v8 = *(void **)(a1 + 160);
  if (v8)
  {
    *(_QWORD *)(a1 + 168) = v8;
    operator delete(v8);
  }
  *(_QWORD *)(a1 + 136) = off_24F652DA0;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100](a1 + 144);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 96);
  v9 = *(void **)(a1 + 72);
  if (v9)
  {
    *(_QWORD *)(a1 + 80) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(_QWORD *)(a1 + 56) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 24);
  if (v11)
  {
    *(_QWORD *)(a1 + 32) = v11;
    operator delete(v11);
  }
  return a1;
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>(void *a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  int v7;
  unint64_t v8;
  char *v9;
  int v10;
  void **v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<int>::pointer v15;
  uint64_t v16;
  int v17;
  std::vector<int>::pointer v18;
  unint64_t v19;
  int v20;
  std::vector<int>::pointer v21;
  int *v22;
  std::vector<int>::pointer v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  int *v29;
  int v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t i;
  std::vector<int>::pointer end;
  int *v37;
  std::vector<int>::pointer begin;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  int *v44;
  int v45;
  int begin_low;
  int *v47;
  uint64_t v48;
  unint64_t v49;
  std::vector<int>::pointer v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  unint64_t j;
  int *v58;
  unint64_t v59;
  unint64_t v60;
  int *v61;
  float v62;
  unsigned int v63;
  int *v64;
  int v65;
  void *__p[2];
  __int128 v67;
  unint64_t v68;
  int v69;
  char v70;
  char v71;
  __int128 v72;
  _QWORD v73[15];
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  int v83;
  std::vector<int> v84;
  uint64_t v85;
  std::vector<int> v86;
  std::vector<int> v87;
  char *v88;
  void **v89;
  std::vector<int> *v90;
  uint64_t v91;
  int v92;
  char v93;

  if ((*(unsigned int (**)(void *))(*(_QWORD *)a1 + 16))(a1) == -1)
    return;
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 136))(a1);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v88, v6, (unsigned __int8 *)__p);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 16))(a1);
  v8 = 0;
  *(_QWORD *)&v88[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if (v8 < (*(int (**)(void *))(*(_QWORD *)a1 + 136))(a1))
  {
    v68 = 0;
    *(_OWORD *)__p = 0u;
    v67 = 0u;
    (*(void (**)(void *, unint64_t, void **))(*(_QWORD *)a1 + 120))(a1, v8, __p);
    while (1)
    {
      if (__p[0])
      {
        if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]))
        {
          if (__p[0])
          {
            (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
            goto LABEL_20;
          }
LABEL_18:
          if (*((_QWORD *)&v67 + 1))
            --**((_DWORD **)&v67 + 1);
LABEL_20:
          ++v8;
          goto LABEL_3;
        }
        if (__p[0])
        {
          v9 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 24))();
          goto LABEL_11;
        }
      }
      else if (v68 >= (unint64_t)v67)
      {
        goto LABEL_18;
      }
      v9 = (char *)__p[1] + 16 * v68;
LABEL_11:
      if (*(_QWORD *)v9)
        *(_QWORD *)&v88[((unint64_t)*((int *)v9 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *((_DWORD *)v9 + 3);
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
      else
        ++v68;
    }
  }
  memset(&v87, 0, sizeof(v87));
  v10 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 136))(a1);
  std::vector<int>::reserve(&v87, v10);
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0x4000000000, 0) & 0x4000000000) != 0)
  {
    for (i = 0; i < (*(int (**)(void *))(*(_QWORD *)a1 + 136))(a1); ++i)
    {
      end = v87.__end_;
      if (v87.__end_ >= v87.__end_cap_.__value_)
      {
        begin = v87.__begin_;
        v39 = v87.__end_ - v87.__begin_;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v41 = (char *)v87.__end_cap_.__value_ - (char *)v87.__begin_;
        if (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v87.__end_cap_, v42);
          begin = v87.__begin_;
          end = v87.__end_;
        }
        else
        {
          v43 = 0;
        }
        v44 = (int *)&v43[4 * v39];
        *v44 = i;
        v37 = v44 + 1;
        while (end != begin)
        {
          v45 = *--end;
          *--v44 = v45;
        }
        v87.__begin_ = v44;
        v87.__end_ = v37;
        v87.__end_cap_.__value_ = (int *)&v43[4 * v42];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v87.__end_ = i;
        v37 = end + 1;
      }
      v87.__end_ = v37;
    }
    goto LABEL_102;
  }
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0x800000000, 0) & 0x800000000) == 0)
  {
    v85 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    __p[0] = &v89;
    __p[1] = 0;
    *(_QWORD *)&v67 = 0;
    *((_QWORD *)&v67 + 1) = &v85;
    v72 = 0u;
    *(_OWORD *)v73 = 0u;
    fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)a1, (uint64_t *)__p, 0);
    std::vector<int>::vector(&v86, ((char *)v90 - (char *)v89) >> 2, &fst::kNoStateId);
    std::vector<int>::vector(&v84, ((char *)v90 - (char *)v89) >> 2, &fst::kNoStateId);
    v11 = v89;
    v12 = v86.__begin_;
    if (v90 != (std::vector<int> *)v89)
    {
      v13 = 0;
      v14 = ((char *)v90 - (char *)v89) >> 2;
      v15 = v84.__begin_;
      if (v14 <= 1)
        v14 = 1;
      do
      {
        v16 = *((int *)v11 + v13);
        v17 = v12[v16];
        if (v17 != -1)
        {
          v15[v13] = v17;
          v16 = *((int *)v11 + v13);
        }
        v12[v16] = v13++;
      }
      while (v14 != v13);
    }
    v18 = v86.__end_;
    if (v86.__end_ != v12)
    {
      v19 = 0;
      do
      {
        v20 = v12[v19];
        if (v20 != -1)
        {
          v21 = v87.__end_;
          do
          {
            if (v21 >= v87.__end_cap_.__value_)
            {
              v23 = v87.__begin_;
              v24 = v21 - v87.__begin_;
              v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 62)
                std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
              v26 = (char *)v87.__end_cap_.__value_ - (char *)v87.__begin_;
              if (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 1 > v25)
                v25 = v26 >> 1;
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
                v27 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v27 = v25;
              if (v27)
              {
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v87.__end_cap_, v27);
                v23 = v87.__begin_;
                v21 = v87.__end_;
              }
              else
              {
                v28 = 0;
              }
              v29 = (int *)&v28[4 * v24];
              *v29 = v20;
              v22 = v29 + 1;
              while (v21 != v23)
              {
                v30 = *--v21;
                *--v29 = v30;
              }
              v87.__begin_ = v29;
              v87.__end_ = v22;
              v87.__end_cap_.__value_ = (int *)&v28[4 * v27];
              if (v23)
                operator delete(v23);
            }
            else
            {
              *v21 = v20;
              v22 = v21 + 1;
            }
            v87.__end_ = v22;
            v20 = v84.__begin_[v20];
            v21 = v22;
          }
          while (v20 != -1);
          v12 = v86.__begin_;
          v18 = v86.__end_;
        }
        ++v19;
      }
      while (v19 < v18 - v12);
    }
    if (v84.__begin_)
    {
      v84.__end_ = v84.__begin_;
      operator delete(v84.__begin_);
      v12 = v86.__begin_;
    }
    if (v12)
    {
      v86.__end_ = v12;
      operator delete(v12);
    }
    v31 = v73[1];
    v73[1] = 0;
    if (v31)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v73[1], v31);
    v32 = (void **)v73[0];
    v73[0] = 0;
    if (v32)
      std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)v73, v32);
    v33 = *((_QWORD *)&v72 + 1);
    *((_QWORD *)&v72 + 1) = 0;
    if (v33)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v72 + 8, v33);
    v34 = v72;
    *(_QWORD *)&v72 = 0;
    if (v34)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v72, v34);
    if (v89)
    {
      v90 = (std::vector<int> *)v89;
      operator delete(v89);
    }
    goto LABEL_102;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v67 = 0;
  LOBYTE(v84.__begin_) = 0;
  v89 = __p;
  v90 = &v84;
  v91 = 0;
  fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)a1, (uint64_t)&v89, 0);
  begin_low = LOBYTE(v84.__begin_);
  if (LOBYTE(v84.__begin_))
  {
    std::vector<int>::resize(&v87, ((char *)__p[1] - (char *)__p[0]) >> 2);
    v47 = (int *)__p[0];
    if (__p[1] != __p[0])
    {
      v48 = 0;
      v49 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v50 = v87.__begin_;
      if (v49 <= 1)
        v49 = 1;
      do
      {
        v50[v47[v48]] = v48;
        ++v48;
      }
      while (v49 != v48);
    }
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v86, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v86, "ERROR");
    LogMessage::LogMessage((BOOL *)&v85, (uint64_t)&v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"RmEpsilon: Inconsistent acyclic property bit", 44);
    LogMessage::~LogMessage((LogMessage *)&v85);
    if (SHIBYTE(v86.__end_cap_.__value_) < 0)
      operator delete(v86.__begin_);
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, 4, 4);
  }
  v51 = v91;
  v91 = 0;
  if (v51)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v91, v51);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (begin_low)
  {
LABEL_102:
    __p[0] = a1;
    __p[1] = a2;
    *(_QWORD *)&v67 = a1;
    *((_QWORD *)&v67 + 1) = a2;
    v68 = *(_QWORD *)a3;
    v69 = *(_DWORD *)(a3 + 16);
    v70 = *(_BYTE *)(a3 + 20);
    v71 = 1;
    v72 = 0u;
    memset(v73, 0, 85);
    a2[1] = *a2;
    memset(&v73[11], 0, 32);
    v74 = 1065353216;
    v83 = 0;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0;
    while (v87.__begin_ != v87.__end_)
    {
      v52 = *--v87.__end_;
      if (((*(_QWORD *)&v88[(v52 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v52) & 1) == 0)
      {
        if (*(_BYTE *)(a3 + 21))
          continue;
        v55 = fst::TropicalWeightTpl<float>::Zero();
        LODWORD(v89) = 0;
        LODWORD(v89) = *(_DWORD *)(a3 + 24);
        LODWORD(v84.__begin_) = 0;
        LODWORD(v84.__begin_) = *v55;
        if (*(float *)&v89 != *(float *)&v84.__begin_ || *(_DWORD *)(a3 + 28) != -1)
          continue;
      }
      fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Expand(__p, v52);
      v65 = v82;
      (*(void (**)(void *, unint64_t, int *))(*(_QWORD *)a1 + 160))(a1, v52, &v65);
      (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 216))(a1, v52);
      (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v52, (uint64_t)(*((_QWORD *)&v80 + 1) - v80) >> 4);
      v53 = *((_QWORD *)&v80 + 1);
      v54 = v80;
      while (v54 != v53)
      {
        (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v52, v53 - 16);
        v54 = v80;
        v53 = *((_QWORD *)&v80 + 1) - 16;
        *((_QWORD *)&v80 + 1) -= 16;
      }
    }
    if (*(_BYTE *)(a3 + 21)
      || (v58 = fst::TropicalWeightTpl<float>::Zero(),
          LODWORD(v89) = 0,
          LODWORD(v89) = *(_DWORD *)(a3 + 24),
          LODWORD(v84.__begin_) = 0,
          LODWORD(v84.__begin_) = *v58,
          *(float *)&v89 != *(float *)&v84.__begin_)
      || *(_DWORD *)(a3 + 28) != -1)
    {
      for (j = 0; j < (*(int (**)(void *))(*(_QWORD *)a1 + 136))(a1); ++j)
      {
        if (((*(_QWORD *)&v88[(j >> 3) & 0x1FFFFFFFFFFFFFF8] >> j) & 1) == 0)
          (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 216))(a1, j);
      }
    }
    if (BYTE4(v73[10]))
      (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, 4, 4);
    v59 = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
    v60 = fst::RmEpsilonProperties(v59, 0);
    (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v60, 0xFFFFFFFF0007);
    v61 = fst::TropicalWeightTpl<float>::Zero();
    LODWORD(v89) = 0;
    v62 = *(float *)(a3 + 24);
    *(float *)&v89 = v62;
    LODWORD(v84.__begin_) = 0;
    LODWORD(v84.__begin_) = *v61;
    v63 = *(_DWORD *)(a3 + 28);
    if (v62 != *(float *)&v84.__begin_ || v63 != -1)
    {
      v89 = (void **)__PAIR64__(v63, LODWORD(v62));
      v91 = 0;
      v92 = 981467136;
      v93 = 0;
      fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,(void *)0>((uint64_t)a1, (uint64_t)&v89);
    }
    if (*(_BYTE *)(a3 + 21))
    {
      v64 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v89) = 0;
      LODWORD(v89) = *(_DWORD *)(a3 + 24);
      LODWORD(v84.__begin_) = 0;
      LODWORD(v84.__begin_) = *v64;
      if (*(float *)&v89 == *(float *)&v84.__begin_ && *(_DWORD *)(a3 + 28) == -1)
        fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1);
    }
    fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(__p);
  }
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
    operator delete(v87.__begin_);
  }
  if (v88)
    operator delete(v88);
}

void sub_22BDCF648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  void *v20;

  if (*(char *)(v16 - 177) < 0)
    operator delete(*(void **)(v15 + 360));
  v18 = *(_QWORD *)(v15 + 448);
  *(_QWORD *)(v15 + 448) = 0;
  if (v18)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v14, v18);
  if (__p)
    operator delete(__p);
  v19 = *(void **)(v15 + 384);
  if (v19)
  {
    *(_QWORD *)(v15 + 392) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v15 + 408);
  if (v20)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  void *v56[2];
  char v57;
  BOOL v58;
  __int16 v59;
  void *v60[3];
  void *__p[2];
  uint64_t v62;
  uint64_t *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_24F6555C8;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (uint64_t *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v9 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == -1)
  {
    v23 = operator new();
    *(_DWORD *)(v23 + 8) = 5;
    *(_BYTE *)(v23 + 12) = 0;
    *(_QWORD *)v23 = &off_24F655640;
    *(_QWORD *)(v23 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    v24 = *v6;
    *v6 = v23;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using state-order discipline", 39);
      goto LABEL_19;
    }
  }
  else if ((v9 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v25, a2);
    v26 = *v6;
    *v6 = v25;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using top-order discipline", 37);
      goto LABEL_19;
    }
  }
  else
  {
    if ((v9 & 0x200000000) == 0)
    {
      v66 = 0;
      __p[0] = v8;
      __p[1] = 0;
      v62 = 0;
      v63 = &v66;
      v64 = 0u;
      v65 = 0u;
      fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2, (uint64_t *)__p, 0);
      v10 = *(int **)(a1 + 48);
      v11 = *(int **)(a1 + 56);
      if (v10 != v11)
      {
        v12 = v10 + 1;
        if (v10 + 1 != v11)
        {
          v13 = *v10;
          v14 = v10 + 1;
          do
          {
            v16 = *v14++;
            v15 = v16;
            v17 = v13 < v16;
            if (v13 <= v16)
              v13 = v15;
            if (v17)
              v10 = v12;
            v12 = v14;
          }
          while (v14 != v11);
        }
      }
      v18 = *v10;
      v19 = *v10 + 1;
      std::vector<fst::QueueType>::vector(v60, v19);
      if (a3)
      {
        v20 = operator new();
        v21 = (_QWORD *)operator new();
        *v21 = a3;
        v21[1] = v20;
        v22 = v21;
      }
      else
      {
        v20 = 0;
        v22 = 0;
      }
      v59 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(a2, v8, (uint64_t)v60, v20, &v59, (_BYTE *)&v59 + 1);
      if (HIBYTE(v59))
      {
        v29 = operator new();
        *(_DWORD *)(v29 + 8) = 2;
        *(_BYTE *)(v29 + 12) = 0;
        *(_QWORD *)v29 = &off_24F655710;
        *(_OWORD *)(v29 + 16) = 0u;
        *(_OWORD *)(v29 + 32) = 0u;
        *(_OWORD *)(v29 + 48) = 0u;
        v30 = *v6;
        *v6 = v29;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        if (FLAGS_v < 2)
          goto LABEL_71;
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_40:
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
LABEL_71:
        if (v22)
          MEMORY[0x22E2FB328](v22, 0x60C405BB7FD7CLL);
        if (v20)
          MEMORY[0x22E2FB328](v20, 0xC400A2AC0F1);
        if (v60[0])
        {
          v60[1] = v60[0];
          operator delete(v60[0]);
        }
        v51 = *((_QWORD *)&v65 + 1);
        *((_QWORD *)&v65 + 1) = 0;
        if (v51)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v65 + 8, v51);
        v52 = (void **)v65;
        *(_QWORD *)&v65 = 0;
        if (v52)
          std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v65, v52);
        v53 = *((_QWORD *)&v64 + 1);
        *((_QWORD *)&v64 + 1) = 0;
        if (v53)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v64 + 8, v53);
        v54 = v64;
        *(_QWORD *)&v64 = 0;
        if (v54)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v64, v54);
        return a1;
      }
      if ((_BYTE)v59)
      {
        v31 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v31, (uint64_t)v8);
        v32 = *v6;
        *v6 = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (FLAGS_v < 2)
          goto LABEL_71;
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_40;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
      }
      std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)v7, v19);
      if (v18 < 0)
      {
LABEL_69:
        v49 = operator new();
        *(_DWORD *)(v49 + 8) = 6;
        *(_BYTE *)(v49 + 12) = 0;
        *(_QWORD *)v49 = &off_24F655848;
        *(_QWORD *)(v49 + 16) = v7;
        *(_QWORD *)(v49 + 24) = v8;
        *(_QWORD *)(v49 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v49 + 48) = 0;
        *(_QWORD *)(v49 + 56) = 0;
        *(_QWORD *)(v49 + 40) = 0;
        v50 = *v6;
        *v6 = v49;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        goto LABEL_71;
      }
      v33 = 0;
      while (1)
      {
        v34 = *((_DWORD *)v60[0] + v33);
        if (v34 == 3)
        {
          v37 = *v7;
          v38 = operator new();
          *(_DWORD *)(v38 + 8) = 3;
          *(_BYTE *)(v38 + 12) = 0;
          *(_QWORD *)v38 = &off_24F655778;
          *(_OWORD *)(v38 + 16) = *v22;
          *(_OWORD *)(v38 + 32) = 0u;
          *(_OWORD *)(v38 + 48) = 0u;
          *(_OWORD *)(v38 + 64) = 0u;
          *(_OWORD *)(v38 + 80) = 0u;
          *(_OWORD *)(v38 + 92) = 0u;
          *(_QWORD *)(v38 + 120) = 0;
          *(_QWORD *)(v38 + 128) = 0;
          *(_QWORD *)(v38 + 112) = 0;
          v39 = *(_QWORD *)(v37 + 8 * v33);
          *(_QWORD *)(v37 + 8 * v33) = v38;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v40 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": using shortest-first discipline", 33);
        }
        else if (v34 == 2)
        {
          v41 = *v7;
          v42 = operator new();
          *(_DWORD *)(v42 + 8) = 2;
          *(_BYTE *)(v42 + 12) = 0;
          *(_QWORD *)v42 = &off_24F655710;
          *(_OWORD *)(v42 + 16) = 0u;
          *(_OWORD *)(v42 + 32) = 0u;
          *(_OWORD *)(v42 + 48) = 0u;
          v43 = *(_QWORD *)(v41 + 8 * v33);
          *(_QWORD *)(v41 + 8 * v33) = v42;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using LIFO discipline", 23);
        }
        else if (v34)
        {
          v45 = *v7;
          v46 = operator new();
          *(_DWORD *)(v46 + 8) = 1;
          *(_BYTE *)(v46 + 12) = 0;
          *(_QWORD *)v46 = &off_24F6557E0;
          *(_OWORD *)(v46 + 16) = 0u;
          *(_OWORD *)(v46 + 32) = 0u;
          *(_OWORD *)(v46 + 48) = 0u;
          v47 = *(_QWORD *)(v45 + 8 * v33);
          *(_QWORD *)(v45 + 8 * v33) = v46;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v48 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": using FIFO discipine", 22);
        }
        else
        {
          v35 = *(_QWORD *)(*v7 + 8 * v33);
          *(_QWORD *)(*v7 + 8 * v33) = 0;
          if (v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v36 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": using trivial discipline", 26);
        }
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
LABEL_68:
        if (v19 == ++v33)
          goto LABEL_69;
      }
    }
    v27 = operator new();
    *(_DWORD *)(v27 + 8) = 2;
    *(_BYTE *)(v27 + 12) = 0;
    *(_QWORD *)v27 = &off_24F655710;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    v28 = *v6;
    *v6 = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_19:
      LogMessage::~LogMessage((LogMessage *)v60);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_22BDD00FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v32;
  uint64_t v33;

  LogMessage::~LogMessage((LogMessage *)&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28)
    {
LABEL_10:
      MEMORY[0x22E2FB328](v28, 0x60C405BB7FD7CLL);
      if (!v29)
      {
LABEL_7:
        if (a18)
        {
          a19 = (uint64_t)a18;
          operator delete(a18);
        }
        fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a21);
        v32 = *v27;
        if (*v27)
        {
          *(_QWORD *)(v26 + 56) = v32;
          operator delete(v32);
        }
        std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        v33 = *v30;
        *v30 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        _Unwind_Resume(a1);
      }
LABEL_6:
      MEMORY[0x22E2FB328](v29, 0xC400A2AC0F1);
      goto LABEL_7;
    }
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (!v29)
    goto LABEL_7;
  goto LABEL_6;
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char inited;
  char v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t (**v49)();
  _QWORD v50[3];
  uint64_t v51[3];
  int *v52;
  _OWORD v53[2];
  __int128 v54;
  char *v55;
  char *v56;
  char *v57;

  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit((uint64_t)a2, a1);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v44 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
    return;
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0u;
  memset(v53, 0, sizeof(v53));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v50, 64);
  v52 = 0;
  v49 = &off_24F652F20;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v43)
    v5 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v5 = (v44 + 1);
  if ((int)v5 <= (unint64_t)(v56 - v55))
  {
    if ((int)v5 < (unint64_t)(v56 - v55))
      v56 = &v55[(int)v5];
  }
  else
  {
    std::vector<unsigned char>::__append(&v55, (int)v5 - (v56 - v55), &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v46);
  if (v44 >= (int)v5)
    goto LABEL_100;
  v6 = v44;
  do
  {
    v55[(int)v6] = 1;
    v7 = (uint64_t)v52;
    if (v52)
    {
      v52 = (int *)*((_QWORD *)v52 + 6);
    }
    else
    {
      v7 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v50, 1);
      *(_QWORD *)(v7 + 48) = 0;
    }
    *(_DWORD *)v7 = v6;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_QWORD *)(v7 + 40) = 0;
    *(_OWORD *)(v7 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v6, v7 + 8);
    v45 = v7;
    std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v53, &v45);
    inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, v6, v6);
LABEL_16:
    v9 = inited;
    while (*((_QWORD *)&v54 + 1))
    {
      v10 = *(int **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
      v11 = *v10;
      v12 = v56 - v55;
      if (v56 - v55 <= v11)
      {
        v5 = v11 + 1;
        if (v11 + 1 <= v12)
        {
          if (v11 + 1 < v12)
            v56 = &v55[v5];
        }
        else
        {
          std::vector<unsigned char>::__append(&v55, v11 + 1 - v12, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v9 & 1) == 0)
        goto LABEL_33;
      v13 = *((_QWORD *)v10 + 1);
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
          goto LABEL_33;
        v14 = *((_QWORD *)v10 + 1);
        if (v14)
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
          goto LABEL_30;
        }
LABEL_29:
        v15 = *((_QWORD *)v10 + 2) + 16 * *((_QWORD *)v10 + 5);
LABEL_30:
        v16 = *(int *)(v15 + 12);
        v17 = v56 - v55;
        if (v56 - v55 <= v16)
        {
          v5 = v16 + 1;
          if (v16 + 1 <= v17)
          {
            if (v16 + 1 < v17)
              v56 = &v55[v5];
          }
          else
          {
            std::vector<unsigned char>::__append(&v55, v16 + 1 - v17, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
          }
        }
        if (*(_QWORD *)v15)
        {
          v22 = *((_QWORD *)v10 + 1);
          if (v22)
            goto LABEL_53;
          goto LABEL_54;
        }
        v23 = *(int *)(v15 + 12);
        v24 = v55[v23];
        if (v24 == 1)
        {
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc((uint64_t)a2, v11, v15);
          v22 = *((_QWORD *)v10 + 1);
          if (v22)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v24 != 2)
        {
          v55[v23] = 1;
          v25 = (uint64_t)v52;
          if (v52)
          {
            v52 = (int *)*((_QWORD *)v52 + 6);
          }
          else
          {
            v25 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v50, 1);
            *(_QWORD *)(v25 + 48) = 0;
          }
          *(_DWORD *)v25 = *(_DWORD *)(v15 + 12);
          *(_OWORD *)(v25 + 24) = 0u;
          *(_QWORD *)(v25 + 40) = 0;
          *(_OWORD *)(v25 + 8) = 0u;
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
          v45 = v25;
          std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v53, &v45);
          inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, *(_DWORD *)(v15 + 12), v6);
          goto LABEL_16;
        }
        v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc((_QWORD **)a2, v11, v15);
        v22 = *((_QWORD *)v10 + 1);
        if (!v22)
          goto LABEL_54;
LABEL_53:
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      }
      else
      {
        if (*((_QWORD *)v10 + 5) < *((_QWORD *)v10 + 3))
          goto LABEL_29;
LABEL_33:
        v55[v11] = 2;
        v18 = *((_QWORD *)v10 + 1);
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        else
        {
          v19 = (_DWORD *)*((_QWORD *)v10 + 4);
          if (v19)
            --*v19;
        }
        *((_QWORD *)v10 + 6) = v52;
        v52 = v10;
        --*((_QWORD *)&v54 + 1);
        std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v53, 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v10 = *(int **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
          v20 = *v10;
          v21 = *((_QWORD *)v10 + 1);
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, v20);
          v22 = *((_QWORD *)v10 + 1);
          if (v22)
            goto LABEL_53;
LABEL_54:
          ++*((_QWORD *)v10 + 5);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v6 == v44)
      v6 = 0;
    else
      v6 = (v6 + 1);
    if ((int)v6 < (int)v5)
    {
      v26 = &v55[(int)v6];
      v27 = (int)v5 - (uint64_t)(int)v6;
      while (*v26++)
      {
        v6 = (v6 + 1);
        if (!--v27)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v43 || (_DWORD)v6 != (_DWORD)v5)
      continue;
LABEL_70:
    if (v46)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46) & 1) != 0)
        continue;
      if (v46)
      {
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
        goto LABEL_76;
      }
    }
    else if (v48 >= v47)
    {
      continue;
    }
    v29 = v48;
LABEL_76:
    if (v29 != (_DWORD)v5)
    {
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
      else
        ++v48;
      goto LABEL_70;
    }
    v30 = v56;
    if (v56 >= v57)
    {
      v32 = (unint64_t)v55;
      v33 = v56 - v55;
      v34 = v56 - v55 + 1;
      if (v34 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v35 = v57 - v55;
      if (2 * (v57 - v55) > (unint64_t)v34)
        v34 = 2 * v35;
      if (v35 >= 0x3FFFFFFFFFFFFFFFLL)
        v36 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
        v37 = (char *)operator new(v36);
      else
        v37 = 0;
      v38 = &v37[v33];
      v39 = &v37[v33];
      *v39 = 0;
      v31 = v39 + 1;
      if (v30 != (char *)v32)
      {
        v40 = &v30[~v32];
        do
        {
          v41 = *--v30;
          (v40--)[(_QWORD)v37] = v41;
        }
        while (v30 != (char *)v32);
        v30 = v55;
        v38 = v37;
      }
      v55 = v38;
      v56 = v31;
      v57 = &v37[v36];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v56 = 0;
      v31 = v30 + 1;
    }
    v5 = (v5 + 1);
    v56 = v31;
  }
  while ((v9 & 1) != 0 && (int)v6 < (int)v5);
LABEL_100:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v49 = &off_24F652F88;
  v50[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v51);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v53);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
}

void sub_22BDD09EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  float *v22;
  int v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  float v35;
  float v36;

  *a5 = 1;
  *a6 = 1;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 2;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a3, 4 * v12);
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v32);
  while (1)
  {
    result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33)
        return result;
LABEL_11:
      v15 = v34;
      goto LABEL_12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    result = v32;
    if (v14)
      break;
    if (!v32)
      goto LABEL_11;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 24))();
LABEL_12:
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v15, &v29);
    v17 = (int)v15;
    while (1)
    {
      if (!(_QWORD)v29)
      {
        if (v31 >= (unint64_t)v30)
          goto LABEL_39;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v29 + 16))(v29))
        break;
      if ((_QWORD)v29)
      {
        v18 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      v18 = *((_QWORD *)&v29 + 1) + 16 * v31;
LABEL_19:
      if (*(_QWORD *)v18)
        goto LABEL_29;
      v19 = *(int *)(*a2 + 4 * v17);
      if ((_DWORD)v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 12)))
      {
        v20 = *(_DWORD **)a3;
        if (!a4
          || (v21 = fst::TropicalWeightTpl<float>::One(),
              v22 = (float *)(v18 + 8),
              fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(a4, (float *)(v18 + 8), (float *)v21)))
        {
          v23 = 1;
          goto LABEL_24;
        }
        if ((v20[v19] | 2) == 2)
        {
          v26 = fst::TropicalWeightTpl<float>::Zero();
          v36 = 0.0;
          v36 = *v22;
          v35 = 0.0;
          v35 = *(float *)v26;
          if (v36 == v35
            || (v27 = fst::TropicalWeightTpl<float>::One(),
                v36 = 0.0,
                v36 = *v22,
                v35 = 0.0,
                v35 = *(float *)v27,
                v36 == v35))
          {
            v23 = 2;
          }
          else
          {
            v23 = 3;
          }
LABEL_24:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      v24 = fst::TropicalWeightTpl<float>::Zero();
      v36 = 0.0;
      v36 = *(float *)(v18 + 8);
      v35 = 0.0;
      v35 = *(float *)v24;
      v16.n128_f32[0] = v36;
      if (v36 != v35)
      {
        v25 = fst::TropicalWeightTpl<float>::One();
        v36 = 0.0;
        v36 = *(float *)(v18 + 8);
        v35 = 0.0;
        v35 = *(float *)v25;
        v16.n128_f32[0] = v36;
        if (v36 != v35)
          *a6 = 0;
      }
LABEL_29:
      if ((_QWORD)v29)
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v29 + 32))(v29, v16);
      else
        ++v31;
    }
    if ((_QWORD)v29)
    {
      (*(void (**)(void))(*(_QWORD *)v29 + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (*((_QWORD *)&v30 + 1))
      --**((_DWORD **)&v30 + 1);
LABEL_41:
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    else
      ++v34;
  }
  if (v32)
    return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
  return result;
}

void sub_22BDD0D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

void fst::AutoQueue<int>::~AutoQueue(uint64_t a1)
{
  fst::AutoQueue<int>::~AutoQueue(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::AutoQueue<int>::Head(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Enqueue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Dequeue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Update(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Empty(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Clear(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

_QWORD *fst::StateOrderQueue<int>::~StateOrderQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F655640;
  v2 = (void *)a1[3];
  if (v2)
    operator delete(v2);
  return a1;
}

void fst::StateOrderQueue<int>::~StateOrderQueue(_QWORD *a1)
{
  void *v1;

  *a1 = &off_24F655640;
  v1 = (void *)a1[3];
  if (v1)
    operator delete(v1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::StateOrderQueue<int>::Head(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void fst::StateOrderQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  if (v3 > v4)
  {
    *(_DWORD *)(a1 + 20) = a2;
LABEL_6:
    *(_DWORD *)(a1 + 16) = a2;
    goto LABEL_7;
  }
  if (v4 < a2)
  {
    *(_DWORD *)(a1 + 20) = a2;
    goto LABEL_7;
  }
  if (v3 > a2)
    goto LABEL_6;
LABEL_7:
  v5 = (_QWORD *)(a1 + 24);
  v6 = a2;
  while (*(_QWORD *)(a1 + 32) <= v6)
  {
    v7 = 0;
    std::vector<BOOL>::push_back(a1 + 24, &v7);
  }
  *(_QWORD *)(*v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
}

uint64_t fst::StateOrderQueue<int>::Dequeue(uint64_t result)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  int v4;

  v1 = *(_QWORD *)(result + 24);
  v2 = *(_DWORD *)(result + 20);
  v3 = *(int *)(result + 16);
  *(_QWORD *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
  if ((int)v3 <= v2)
  {
    v4 = v3 - 1;
    do
    {
      if (((*(_QWORD *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
        break;
      ++v3;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

BOOL fst::StateOrderQueue<int>::Empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::StateOrderQueue<int>::Clear(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  double result;

  v1 = *(_DWORD *)(a1 + 20);
  v2 = *(int *)(a1 + 16);
  if ((int)v2 <= v1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = v1 - v2 + 1;
    do
    {
      *(_QWORD *)(v3 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  result = NAN;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  BOOL v8;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_24F6556A8;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v9[0] = a1 + 24;
  v9[1] = &v11;
  v10 = 0;
  fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2, (uint64_t)v9, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"TopOrderQueue: FST is not acyclic", 33);
    LogMessage::~LogMessage((LogMessage *)&v8);
    if (v7 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  v4 = v10;
  v10 = 0;
  if (v4)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v10, v4);
  return a1;
}

void sub_22BDD11D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void **v24;
  void *v26;
  void *v27;

  if (a14 < 0)
    operator delete(__p);
  if (a21)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v23, a21);
  v26 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v21 + 56) = v26;
    operator delete(v26);
  }
  v27 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t (**v52)();
  _QWORD v53[3];
  uint64_t v54[3];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;

  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(a2);
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v47 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
    return;
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v53, 64);
  v55 = 0;
  v52 = &off_24F652F20;
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v46)
    v6 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v6 = (v47 + 1);
  if ((int)v6 <= (unint64_t)(v59 - v58))
  {
    if ((int)v6 < (unint64_t)(v59 - v58))
      v59 = &v58[(int)v6];
  }
  else
  {
    std::vector<unsigned char>::__append(&v58, (int)v6 - (v59 - v58), &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v49);
  if (v47 >= (int)v6)
    goto LABEL_106;
  v7 = v47;
  v45 = a3;
  do
  {
    v58[(int)v7] = 1;
    v8 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v8 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_QWORD *)(v8 + 40) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v7, v8 + 8);
    v48 = v8;
    std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v56, &v48);
    v9 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v10 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_66;
    }
    v10 = 1;
    do
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v9 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v9 + v57 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v59 - v58;
      if (v59 - v58 <= v12)
      {
        v6 = v12 + 1;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v59 = &v58[v6];
        }
        else
        {
          std::vector<unsigned char>::__append(&v58, v12 + 1 - v13, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v10 & 1) == 0)
      {
LABEL_32:
        v58[v12] = 2;
        v19 = v11[1];
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          v20 = (_DWORD *)v11[4];
          if (v20)
            --*v20;
        }
        v11[6] = v55;
        v55 = v11;
        --*((_QWORD *)&v57 + 1);
        std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
        if (!*((_QWORD *)&v57 + 1))
        {
          fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
          goto LABEL_62;
        }
        v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
        v23 = *(_QWORD *)(v21 + 8);
        if (v23)
        {
LABEL_41:
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
          goto LABEL_62;
        }
        ++*(_QWORD *)(v21 + 40);
        goto LABEL_62;
      }
      v14 = v11[1];
      if (!v14)
      {
        if (v11[5] >= v11[3])
          goto LABEL_32;
LABEL_28:
        v16 = v11[2] + 16 * v11[5];
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
        goto LABEL_32;
      v15 = v11[1];
      if (!v15)
        goto LABEL_28;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
LABEL_29:
      v17 = *(int *)(v16 + 12);
      v18 = v59 - v58;
      if (v59 - v58 <= v17)
      {
        v6 = v17 + 1;
        if (v17 + 1 <= v18)
        {
          if (v17 + 1 < v18)
            v59 = &v58[v6];
        }
        else
        {
          std::vector<unsigned char>::__append(&v58, v17 + 1 - v18, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if (*(_QWORD *)v16)
      {
        v23 = v11[1];
        if (v23)
          goto LABEL_41;
LABEL_58:
        ++v11[5];
        goto LABEL_62;
      }
      v24 = *(int *)(v16 + 12);
      v25 = v58[v24];
      if (v25 == 1)
      {
        **(_BYTE **)(a2 + 8) = 0;
        v27 = v11[1];
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
          v10 = 0;
          goto LABEL_62;
        }
        v10 = 0;
        goto LABEL_58;
      }
      if (v25 == 2)
      {
        v26 = v11[1];
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
        else
          ++v11[5];
      }
      else
      {
        v58[v24] = 1;
        v28 = (uint64_t)v55;
        if (v55)
        {
          v55 = (_QWORD *)v55[6];
        }
        else
        {
          v28 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
          *(_QWORD *)(v28 + 48) = 0;
        }
        *(_DWORD *)v28 = *(_DWORD *)(v16 + 12);
        *(_OWORD *)(v28 + 24) = 0u;
        *(_QWORD *)(v28 + 40) = 0;
        *(_OWORD *)(v28 + 8) = 0u;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
        v48 = v28;
        std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v56, &v48);
      }
      v10 = 1;
LABEL_62:
      v9 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_66:
    if ((_DWORD)v7 == v47)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v29 = &v58[(int)v7];
      v30 = (int)v6 - (uint64_t)(int)v7;
      while (*v29++)
      {
        v7 = (v7 + 1);
        if (!--v30)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v46 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_76:
    if (v49)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49) & 1) != 0)
        continue;
      if (v49)
      {
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
        goto LABEL_82;
      }
    }
    else if (v51 >= v50)
    {
      continue;
    }
    v32 = v51;
LABEL_82:
    if (v32 != (_DWORD)v6)
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
      else
        ++v51;
      goto LABEL_76;
    }
    v33 = v59;
    if (v59 >= v60)
    {
      v35 = (unint64_t)v58;
      v36 = v59 - v58;
      v37 = v59 - v58 + 1;
      if (v37 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v38 = v60 - v58;
      if (2 * (v60 - v58) > (unint64_t)v37)
        v37 = 2 * v38;
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v39 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v40 = (char *)operator new(v39);
      else
        v40 = 0;
      v41 = &v40[v36];
      v42 = &v40[v36];
      *v42 = 0;
      v34 = v42 + 1;
      if (v33 != (char *)v35)
      {
        v43 = &v33[~v35];
        do
        {
          v44 = *--v33;
          (v43--)[(_QWORD)v40] = v44;
        }
        while (v33 != (char *)v35);
        v33 = v58;
        v41 = v40;
      }
      v58 = v41;
      v59 = v34;
      v60 = &v40[v39];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v59 = 0;
      v34 = v33 + 1;
    }
    v6 = (v6 + 1);
    v59 = v34;
    a3 = v45;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_106:
  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v52 = &off_24F652F88;
  v53[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v54);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v56);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
}

void sub_22BDD1954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void fst::TopOrderQueue<int>::~TopOrderQueue(_QWORD *a1)
{
  fst::TopOrderQueue<int>::~TopOrderQueue(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::TopOrderQueue<int>::Head(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * *(int *)(a1 + 16));
}

uint64_t fst::TopOrderQueue<int>::Enqueue(uint64_t result, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(_DWORD *)(result + 20);
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_DWORD *)(v4 + 4 * a2);
  if (v2 > v3)
  {
    *(_DWORD *)(result + 20) = v5;
LABEL_6:
    *(_DWORD *)(result + 16) = v5;
    goto LABEL_7;
  }
  if (v5 <= v3)
  {
    if (v5 < v2)
      goto LABEL_6;
  }
  else
  {
    *(_DWORD *)(result + 20) = v5;
  }
LABEL_7:
  *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * *(int *)(v4 + 4 * a2)) = a2;
  return result;
}

uint64_t fst::TopOrderQueue<int>::Dequeue(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(result + 48);
  *(_DWORD *)(v1 + 4 * *(int *)(result + 16)) = -1;
  v2 = *(_DWORD *)(result + 20);
  v3 = *(int *)(result + 16);
  if ((int)v3 <= v2)
  {
    v4 = (int *)(v1 + 4 * v3);
    v5 = v3 - 1;
    do
    {
      v6 = *v4++;
      if (v6 != -1)
        break;
      *(_DWORD *)(result + 16) = v5 + 2;
      ++v5;
    }
    while (v2 != v5);
  }
  return result;
}

BOOL fst::TopOrderQueue<int>::Empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::TopOrderQueue<int>::Clear(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(int *)(a1 + 16);
  if ((int)v1 <= *(_DWORD *)(a1 + 20))
  {
    v2 = *(_QWORD *)(a1 + 48);
    do
      *(_DWORD *)(v2 + 4 * v1) = -1;
    while (v1++ < *(int *)(a1 + 20));
  }
  result = NAN;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 16);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = v2;
  if (v3)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](a1 + 16, v3);
  **(_BYTE **)(a1 + 8) = 1;
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t **v3;
  uint64_t v4;
  unint64_t v5;
  char **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t **v23;

  if (!*(_BYTE *)a1[1])
  {
    v2 = a1[2];
    goto LABEL_26;
  }
  (*a1)[1] = **a1;
  v3 = a1 + 2;
  v2 = a1[2];
  v4 = v2[1];
  if (v4 != *v2)
  {
    v5 = 0;
    do
    {
      v6 = (char **)*a1;
      v7 = (char *)(*a1)[1];
      v8 = (*a1)[2];
      if ((unint64_t)v7 >= v8)
      {
        v10 = *v6;
        v11 = (v7 - *v6) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(*a1 + 2), v14);
          v10 = *v6;
          v7 = v6[1];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = -1;
        v9 = v16 + 4;
        while (v7 != v10)
        {
          v17 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *v6 = v16;
        v6[1] = v9;
        v6[2] = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v7 = -1;
        v9 = v7 + 4;
      }
      v6[1] = v9;
      ++v5;
      v2 = *v3;
      v4 = **v3;
      v18 = ((*v3)[1] - v4) >> 2;
    }
    while (v18 > v5);
    if (v18)
      goto LABEL_22;
LABEL_30:
    *v3 = 0;
    goto LABEL_31;
  }
  v18 = (v4 - *v2) >> 2;
  if (!v18)
    goto LABEL_30;
LABEL_22:
  v19 = 0;
  v20 = **a1;
  v21 = (int *)(v4 + 4 * v18 - 4);
  do
  {
    v22 = *v21--;
    *(_DWORD *)(v20 + 4 * v22) = v19++;
  }
  while (v18 != v19);
LABEL_26:
  a1[2] = 0;
  v23 = a1 + 2;
  if (v2)
  {
    v3 = v23;
LABEL_31:
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)v3, (uint64_t)v2);
  }
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v4 >= v5)
  {
    v7 = *(_DWORD **)v3;
    v8 = ((uint64_t)v4 - *(_QWORD *)v3) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3 + 16, v11);
      v7 = *(_DWORD **)v3;
      v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v6;
    *(_QWORD *)(v3 + 16) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *(_QWORD *)(v3 + 8) = v6;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *fst::TopOrderQueue<int>::~TopOrderQueue(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F6556A8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *fst::LifoQueue<int>::~LifoQueue(_QWORD *a1)
{
  *a1 = &off_24F655710;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  return a1;
}

void fst::LifoQueue<int>::~LifoQueue(_QWORD *a1)
{
  *a1 = &off_24F655710;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::LifoQueue<int>::Head(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((*(_QWORD *)(a1 + 48) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*(_QWORD *)(a1 + 48) & 0x3FFLL));
}

void fst::LifoQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v2;

  v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::LifoQueue<int>::Dequeue(int64x2_t *a1)
{
  a1[3] = vaddq_s64(a1[3], (int64x2_t)xmmword_22BDF36E0);
  return std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1[1].i64, 1);
}

BOOL fst::LifoQueue<int>::Empty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == 0;
}

void fst::LifoQueue<int>::Clear(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[3];
  v3 = a1[4];
  a1[7] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[4];
      v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 1024;
  }
  a1[6] = v6;
}

uint64_t std::deque<int>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::~__split_buffer((uint64_t)a1);
}

void std::deque<int>::push_front(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<int>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 10));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 4 * (v4 & 0x3FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_DWORD *)(v7 - 4) = *a2;
  v8 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v8;
}

void std::deque<int>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 7) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x400)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 512;
      else
        v40 = (uint64_t)a1[4] + 1024;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 512;
      else
        v35 = (uint64_t)a1[4] + 1024;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 1024;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_22BDD24B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

_QWORD *std::vector<fst::QueueType>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_22BDD25B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v3;
  float v4;

  v3 = *a2;
  v4 = *a3;
  if (*a2 == *a3)
    return 0;
  if (v3 == -INFINITY || v4 >= -INFINITY && v4 <= -INFINITY)
  {
    v4 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    v3 = *a2;
  }
  else if (v3 < v4)
  {
    v4 = *a2;
  }
  return v4 == v3;
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_24F6556A8;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::vector<int>::vector((std::vector<int> *)(a1 + 48), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_22BDD2708(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22BDD2780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::~ShortestFirstQueue(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Head(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Enqueue(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Dequeue(uint64_t a1)
{
  return fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Clear(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

_QWORD *fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_24F655778;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 64;
  v4 = *(int **)(a1 + 64);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
        v4 = *(int **)(a1 + 64);
        v7 = *(int **)(a1 + 72);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 64) = v15;
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 72) = v10;
    v19 = *(char **)(a1 + 24);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 16);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
        v21 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 88);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 88);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 24) = v20;
    v31 = *(char **)(a1 + 48);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 88);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 48) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 40);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        v33 = *(char **)(a1 + 40);
        v31 = *(char **)(a1 + 48);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 88);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 40) = v39;
      *(_QWORD *)(a1 + 48) = v32;
      *(_QWORD *)(a1 + 56) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 64);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(*(_QWORD *)(a1 + 8), (float *)(**(_QWORD **)a1 + 4 * *(int *)(v6 + 4 * v8)), (float *)(**(_QWORD **)a1 + 4 * *a2)))
      {
        break;
      }
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      v6 = *(_QWORD *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 64);
  v2 = *v1;
  v3 = *(int *)(a1 + 88) - 1;
  v4 = *(int **)(a1 + 40);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Heapify(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  while (1)
  {
    v4 = (2 * (_DWORD)a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 88)
      || !(result = fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(*(_QWORD *)(v3 + 8), (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v4)), (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)a2)))))
    {
      v4 = a2;
    }
    v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 88))
    {
      result = fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(*(_QWORD *)(v3 + 8), (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5)), (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v4)));
      if (result)
        v4 = v5;
      else
        v4 = v4;
    }
    if ((_DWORD)v4 == (_DWORD)a2)
      break;
    v6 = *(_QWORD *)(v3 + 40);
    v7 = *(int *)(v6 + 4 * (int)a2);
    v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    v9 = *(_QWORD *)(v3 + 16);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    v10 = *(_QWORD *)(v3 + 64);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

_QWORD *fst::FifoQueue<int>::~FifoQueue(_QWORD *a1)
{
  *a1 = &off_24F6557E0;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  return a1;
}

void fst::FifoQueue<int>::~FifoQueue(_QWORD *a1)
{
  *a1 = &off_24F6557E0;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::FifoQueue<int>::Head(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[7] + a1[6] - 1;
  return *(unsigned int *)(*(_QWORD *)(a1[3] + ((v1 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1 & 0x3FF));
}

void fst::FifoQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v2;

  v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::FifoQueue<int>::Dequeue(uint64_t a1)
{
  --*(_QWORD *)(a1 + 56);
  return std::deque<int>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)(a1 + 16), 1);
}

BOOL fst::FifoQueue<int>::Empty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == 0;
}

void fst::FifoQueue<int>::Clear(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[3];
  v3 = a1[4];
  a1[7] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[4];
      v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 1024;
  }
  a1[6] = v6;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F655848;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F655848;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Head(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 <= *(_DWORD *)(a1 + 36))
  {
    while (1)
    {
      v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
      if (v4)
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
        v3 = *(_DWORD *)(a1 + 32);
        if ((v5 & 1) != 0)
          goto LABEL_10;
        v6 = v3;
        if (*(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v3))
          goto LABEL_11;
      }
      else
      {
        v6 = v2;
        v3 = v2;
      }
      v7 = *(_QWORD *)(a1 + 40);
      if (v6 < (*(_QWORD *)(a1 + 48) - v7) >> 2 && *(_DWORD *)(v7 + 4 * v6) != -1)
        goto LABEL_11;
LABEL_10:
      v2 = v3 + 1;
      *(_DWORD *)(a1 + 32) = v3 + 1;
      if (v3++ >= *(_DWORD *)(a1 + 36))
        goto LABEL_11;
    }
  }
  v3 = *(_DWORD *)(a1 + 32);
LABEL_11:
  v9 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v3);
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v3);
}

char *fst::SccQueue<int,fst::QueueBase<int>>::Enqueue(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = (int)a2;
  v7 = **(_QWORD **)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 4 * (int)a2);
  if (v4 > v5)
  {
    *(_DWORD *)(a1 + 36) = v8;
LABEL_3:
    *(_DWORD *)(a1 + 32) = v8;
    goto LABEL_7;
  }
  if (v8 <= v5)
  {
    if (v8 < v4)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
  }
LABEL_7:
  v9 = *(int *)(v7 + 4 * (int)a2);
  v10 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v9);
  if (v10)
    return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2);
  result = *(char **)(a1 + 40);
  v12 = *(char **)(a1 + 48);
  v13 = (v12 - result) >> 2;
  if (v13 <= v9)
  {
    v14 = (_QWORD *)(a1 + 56);
    do
    {
      if ((unint64_t)v12 >= *v14)
      {
        v16 = v13 + 1;
        if ((v13 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v17 = *v14 - (_QWORD)result;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v18);
          result = *(char **)(a1 + 40);
          v12 = *(char **)(a1 + 48);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v13];
        *(_DWORD *)v20 = -1;
        v15 = v20 + 4;
        while (v12 != result)
        {
          v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *(_QWORD *)(a1 + 40) = v20;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = &v19[4 * v18];
        if (result)
        {
          operator delete(result);
          result = *(char **)(a1 + 40);
        }
        else
        {
          result = v20;
        }
      }
      else
      {
        *(_DWORD *)v12 = -1;
        v15 = v12 + 4;
      }
      *(_QWORD *)(a1 + 48) = v15;
      v13 = (v15 - result) >> 2;
      v9 = *(int *)(**(_QWORD **)(a1 + 24) + 4 * v6);
      v12 = v15;
    }
    while (v13 <= v9);
  }
  *(_DWORD *)&result[4 * v9] = v2;
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Dequeue(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 32);
  v2 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v1);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = *(_QWORD *)(result + 40);
  if (v1 < (*(_QWORD *)(result + 48) - v3) >> 2)
    *(_DWORD *)(v3 + 4 * v1) = -1;
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Update(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * *(int *)(**(_QWORD **)(a1 + 24) + 4 * a2));
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Empty(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 36);
  v2 = *(int *)(a1 + 32);
  if ((int)v2 < v1)
    return 0;
  if ((int)v2 > v1)
    return 1;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v2 >= (*(_QWORD *)(a1 + 48) - v5) >> 2)
    return 1;
  return *(_DWORD *)(v5 + 4 * v2) == -1;
}

double fst::SccQueue<int,fst::QueueBase<int>>::Clear(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *(int *)(a1 + 32);
  if ((int)v2 <= *(_DWORD *)(a1 + 36))
  {
    do
    {
      v3 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 40);
        if (v2 < (*(_QWORD *)(a1 + 48) - v4) >> 2)
          *(_DWORD *)(v4 + 4 * v2) = -1;
      }
    }
    while ((uint64_t)v2++ < *(int *)(a1 + 36));
  }
  result = NAN;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFF00000000;
  return result;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t (**v52)();
  _QWORD v53[3];
  uint64_t v54[3];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;

  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(a2);
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v47 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
    return;
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v53, 64);
  v55 = 0;
  v52 = &off_24F6558B0;
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v46)
    v6 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v6 = (v47 + 1);
  if ((int)v6 <= (unint64_t)(v59 - v58))
  {
    if ((int)v6 < (unint64_t)(v59 - v58))
      v59 = &v58[(int)v6];
  }
  else
  {
    std::vector<unsigned char>::__append(&v58, (int)v6 - (v59 - v58), &fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v49);
  if (v47 >= (int)v6)
    goto LABEL_106;
  v7 = v47;
  v45 = a3;
  do
  {
    v58[(int)v7] = 1;
    v8 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v8 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_QWORD *)(v8 + 40) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v7, v8 + 8);
    v48 = v8;
    std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v56, &v48);
    v9 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v10 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_66;
    }
    v10 = 1;
    do
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v9 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v9 + v57 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v59 - v58;
      if (v59 - v58 <= v12)
      {
        v6 = v12 + 1;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v59 = &v58[v6];
        }
        else
        {
          std::vector<unsigned char>::__append(&v58, v12 + 1 - v13, &fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v10 & 1) == 0)
      {
LABEL_32:
        v58[v12] = 2;
        v19 = v11[1];
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          v20 = (_DWORD *)v11[4];
          if (v20)
            --*v20;
        }
        v11[6] = v55;
        v55 = v11;
        --*((_QWORD *)&v57 + 1);
        std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
        if (!*((_QWORD *)&v57 + 1))
        {
          fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
          goto LABEL_62;
        }
        v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
        v23 = *(_QWORD *)(v21 + 8);
        if (v23)
        {
LABEL_41:
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
          goto LABEL_62;
        }
        ++*(_QWORD *)(v21 + 40);
        goto LABEL_62;
      }
      v14 = v11[1];
      if (!v14)
      {
        if (v11[5] >= v11[3])
          goto LABEL_32;
LABEL_28:
        v16 = v11[2] + 16 * v11[5];
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
        goto LABEL_32;
      v15 = v11[1];
      if (!v15)
        goto LABEL_28;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
LABEL_29:
      v17 = *(int *)(v16 + 12);
      v18 = v59 - v58;
      if (v59 - v58 <= v17)
      {
        v6 = v17 + 1;
        if (v17 + 1 <= v18)
        {
          if (v17 + 1 < v18)
            v59 = &v58[v6];
        }
        else
        {
          std::vector<unsigned char>::__append(&v58, v17 + 1 - v18, &fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if (*(_QWORD *)v16)
      {
        v23 = v11[1];
        if (v23)
          goto LABEL_41;
LABEL_58:
        ++v11[5];
        goto LABEL_62;
      }
      v24 = *(int *)(v16 + 12);
      v25 = v58[v24];
      if (v25 == 1)
      {
        **(_BYTE **)(a2 + 8) = 0;
        v27 = v11[1];
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
          v10 = 0;
          goto LABEL_62;
        }
        v10 = 0;
        goto LABEL_58;
      }
      if (v25 == 2)
      {
        v26 = v11[1];
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
        else
          ++v11[5];
      }
      else
      {
        v58[v24] = 1;
        v28 = (uint64_t)v55;
        if (v55)
        {
          v55 = (_QWORD *)v55[6];
        }
        else
        {
          v28 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
          *(_QWORD *)(v28 + 48) = 0;
        }
        *(_DWORD *)v28 = *(_DWORD *)(v16 + 12);
        *(_OWORD *)(v28 + 24) = 0u;
        *(_QWORD *)(v28 + 40) = 0;
        *(_OWORD *)(v28 + 8) = 0u;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
        v48 = v28;
        std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v56, &v48);
      }
      v10 = 1;
LABEL_62:
      v9 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_66:
    if ((_DWORD)v7 == v47)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v29 = &v58[(int)v7];
      v30 = (int)v6 - (uint64_t)(int)v7;
      while (*v29++)
      {
        v7 = (v7 + 1);
        if (!--v30)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v46 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_76:
    if (v49)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49) & 1) != 0)
        continue;
      if (v49)
      {
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
        goto LABEL_82;
      }
    }
    else if (v51 >= v50)
    {
      continue;
    }
    v32 = v51;
LABEL_82:
    if (v32 != (_DWORD)v6)
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
      else
        ++v51;
      goto LABEL_76;
    }
    v33 = v59;
    if (v59 >= v60)
    {
      v35 = (unint64_t)v58;
      v36 = v59 - v58;
      v37 = v59 - v58 + 1;
      if (v37 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v38 = v60 - v58;
      if (2 * (v60 - v58) > (unint64_t)v37)
        v37 = 2 * v38;
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v39 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v40 = (char *)operator new(v39);
      else
        v40 = 0;
      v41 = &v40[v36];
      v42 = &v40[v36];
      *v42 = 0;
      v34 = v42 + 1;
      if (v33 != (char *)v35)
      {
        v43 = &v33[~v35];
        do
        {
          v44 = *--v33;
          (v43--)[(_QWORD)v40] = v44;
        }
        while (v33 != (char *)v35);
        v33 = v58;
        v41 = v40;
      }
      v58 = v41;
      v59 = v34;
      v60 = &v40[v39];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v59 = 0;
      v34 = v33 + 1;
    }
    v6 = (v6 + 1);
    v59 = v34;
    a3 = v45;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_106:
  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v52 = &off_24F652F88;
  v53[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v54);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v56);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
}

void sub_22BDD3B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char inited;
  char v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t (**v49)();
  _QWORD v50[3];
  uint64_t v51[3];
  int *v52;
  _OWORD v53[2];
  __int128 v54;
  char *v55;
  char *v56;
  char *v57;

  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit((uint64_t)a2, a1);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v44 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
    return;
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0u;
  memset(v53, 0, sizeof(v53));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v50, 64);
  v52 = 0;
  v49 = &off_24F6558B0;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v43)
    v5 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v5 = (v44 + 1);
  if ((int)v5 <= (unint64_t)(v56 - v55))
  {
    if ((int)v5 < (unint64_t)(v56 - v55))
      v56 = &v55[(int)v5];
  }
  else
  {
    std::vector<unsigned char>::__append(&v55, (int)v5 - (v56 - v55), &fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v46);
  if (v44 >= (int)v5)
    goto LABEL_100;
  v6 = v44;
  do
  {
    v55[(int)v6] = 1;
    v7 = (uint64_t)v52;
    if (v52)
    {
      v52 = (int *)*((_QWORD *)v52 + 6);
    }
    else
    {
      v7 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v50, 1);
      *(_QWORD *)(v7 + 48) = 0;
    }
    *(_DWORD *)v7 = v6;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_QWORD *)(v7 + 40) = 0;
    *(_OWORD *)(v7 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v6, v7 + 8);
    v45 = v7;
    std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v53, &v45);
    inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, v6, v6);
LABEL_16:
    v9 = inited;
    while (*((_QWORD *)&v54 + 1))
    {
      v10 = *(int **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
      v11 = *v10;
      v12 = v56 - v55;
      if (v56 - v55 <= v11)
      {
        v5 = v11 + 1;
        if (v11 + 1 <= v12)
        {
          if (v11 + 1 < v12)
            v56 = &v55[v5];
        }
        else
        {
          std::vector<unsigned char>::__append(&v55, v11 + 1 - v12, &fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v9 & 1) == 0)
        goto LABEL_33;
      v13 = *((_QWORD *)v10 + 1);
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
          goto LABEL_33;
        v14 = *((_QWORD *)v10 + 1);
        if (v14)
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
          goto LABEL_30;
        }
LABEL_29:
        v15 = *((_QWORD *)v10 + 2) + 16 * *((_QWORD *)v10 + 5);
LABEL_30:
        v16 = *(int *)(v15 + 12);
        v17 = v56 - v55;
        if (v56 - v55 <= v16)
        {
          v5 = v16 + 1;
          if (v16 + 1 <= v17)
          {
            if (v16 + 1 < v17)
              v56 = &v55[v5];
          }
          else
          {
            std::vector<unsigned char>::__append(&v55, v16 + 1 - v17, &fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
          }
        }
        if (*(_QWORD *)v15)
        {
          v22 = *((_QWORD *)v10 + 1);
          if (v22)
            goto LABEL_53;
          goto LABEL_54;
        }
        v23 = *(int *)(v15 + 12);
        v24 = v55[v23];
        if (v24 == 1)
        {
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc((uint64_t)a2, v11, v15);
          v22 = *((_QWORD *)v10 + 1);
          if (v22)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v24 != 2)
        {
          v55[v23] = 1;
          v25 = (uint64_t)v52;
          if (v52)
          {
            v52 = (int *)*((_QWORD *)v52 + 6);
          }
          else
          {
            v25 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v50, 1);
            *(_QWORD *)(v25 + 48) = 0;
          }
          *(_DWORD *)v25 = *(_DWORD *)(v15 + 12);
          *(_OWORD *)(v25 + 24) = 0u;
          *(_QWORD *)(v25 + 40) = 0;
          *(_OWORD *)(v25 + 8) = 0u;
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
          v45 = v25;
          std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v53, &v45);
          inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, *(_DWORD *)(v15 + 12), v6);
          goto LABEL_16;
        }
        v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc((_QWORD **)a2, v11, v15);
        v22 = *((_QWORD *)v10 + 1);
        if (!v22)
          goto LABEL_54;
LABEL_53:
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      }
      else
      {
        if (*((_QWORD *)v10 + 5) < *((_QWORD *)v10 + 3))
          goto LABEL_29;
LABEL_33:
        v55[v11] = 2;
        v18 = *((_QWORD *)v10 + 1);
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        else
        {
          v19 = (_DWORD *)*((_QWORD *)v10 + 4);
          if (v19)
            --*v19;
        }
        *((_QWORD *)v10 + 6) = v52;
        v52 = v10;
        --*((_QWORD *)&v54 + 1);
        std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v53, 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v10 = *(int **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
          v20 = *v10;
          v21 = *((_QWORD *)v10 + 1);
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, v20);
          v22 = *((_QWORD *)v10 + 1);
          if (v22)
            goto LABEL_53;
LABEL_54:
          ++*((_QWORD *)v10 + 5);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v6 == v44)
      v6 = 0;
    else
      v6 = (v6 + 1);
    if ((int)v6 < (int)v5)
    {
      v26 = &v55[(int)v6];
      v27 = (int)v5 - (uint64_t)(int)v6;
      while (*v26++)
      {
        v6 = (v6 + 1);
        if (!--v27)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v43 || (_DWORD)v6 != (_DWORD)v5)
      continue;
LABEL_70:
    if (v46)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46) & 1) != 0)
        continue;
      if (v46)
      {
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
        goto LABEL_76;
      }
    }
    else if (v48 >= v47)
    {
      continue;
    }
    v29 = v48;
LABEL_76:
    if (v29 != (_DWORD)v5)
    {
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
      else
        ++v48;
      goto LABEL_70;
    }
    v30 = v56;
    if (v56 >= v57)
    {
      v32 = (unint64_t)v55;
      v33 = v56 - v55;
      v34 = v56 - v55 + 1;
      if (v34 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v35 = v57 - v55;
      if (2 * (v57 - v55) > (unint64_t)v34)
        v34 = 2 * v35;
      if (v35 >= 0x3FFFFFFFFFFFFFFFLL)
        v36 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
        v37 = (char *)operator new(v36);
      else
        v37 = 0;
      v38 = &v37[v33];
      v39 = &v37[v33];
      *v39 = 0;
      v31 = v39 + 1;
      if (v30 != (char *)v32)
      {
        v40 = &v30[~v32];
        do
        {
          v41 = *--v30;
          (v40--)[(_QWORD)v37] = v41;
        }
        while (v30 != (char *)v32);
        v30 = v55;
        v38 = v37;
      }
      v55 = v38;
      v56 = v31;
      v57 = &v37[v36];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v56 = 0;
      v31 = v30 + 1;
    }
    v5 = (v5 + 1);
    v56 = v31;
  }
  while ((v9 & 1) != 0 && (int)v6 < (int)v5);
LABEL_100:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v49 = &off_24F652F88;
  v50[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v51);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v53);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
}

void sub_22BDD42D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

int *fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Expand(_QWORD *a1, int a2)
{
  int *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  BOOL v34;
  float v35;
  int v36[4];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  int v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  int v45;

  v45 = a2;
  *((_DWORD *)a1 + 78) = *fst::TropicalWeightTpl<float>::Zero();
  a1[37] = a1[36];
  result = (int *)fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(a1 + 2, a2);
  if (*((_BYTE *)a1 + 156))
    return result;
  std::deque<int>::push_back(a1 + 26, &v45);
  v5 = a1[31];
  if (!v5)
    goto LABEL_67;
  v6 = a1 + 32;
  do
  {
    v7 = v5 - 1;
    v8 = *(unsigned int *)(*(_QWORD *)(a1[27] + (((unint64_t)(a1[30] + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[30] + v7) & 0x3FF));
    a1[31] = v7;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 26, 1);
    while (a1[33] <= (unint64_t)(int)v8)
    {
      LOBYTE(v42) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 32), &v42);
    }
    v9 = *(_QWORD *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6));
    if ((v9 & (1 << v8)) != 0)
      goto LABEL_66;
    *(_QWORD *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6)) = v9 | (1 << v8);
    v10 = a1[35];
    v11 = operator new(0x10uLL);
    *(_QWORD *)v11 = v10;
    v11[2] = v8;
    a1[35] = v11;
    v12 = *a1;
    v42 = 0u;
    v43 = 0u;
    v44 = 0;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v12 + 120))(v12, v8, &v42);
    while (1)
    {
      if (!(_QWORD)v42)
      {
        if (v44 >= (unint64_t)v43)
          goto LABEL_48;
LABEL_13:
        v13 = *((_QWORD *)&v42 + 1) + 16 * v44;
        goto LABEL_14;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v42 + 16))(v42))
        break;
      if (!(_QWORD)v42)
        goto LABEL_13;
      v13 = (*(uint64_t (**)(void))(*(_QWORD *)v42 + 24))();
LABEL_14:
      v14 = *(_QWORD *)v13;
      v39 = *(_QWORD *)v13;
      v15 = *(float *)(v13 + 8);
      v40 = v15;
      v41 = *(_DWORD *)(v13 + 12);
      v16 = *(float *)(*(_QWORD *)a1[1] + 4 * (int)v8);
      if (v16 == -INFINITY || v15 >= -INFINITY && v15 <= -INFINITY)
      {
        v17 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        LODWORD(v14) = v39;
        LODWORD(v18) = HIDWORD(v39);
      }
      else
      {
        v18 = HIDWORD(v14);
        v19 = v16 == INFINITY || v15 == INFINITY;
        v17 = v15 + v16;
        if (v19)
          v17 = INFINITY;
      }
      v40 = v17;
      if (v14 | v18)
      {
        v20 = (uint64_t)(a1[37] - a1[36]) >> 4;
        v21 = *((unsigned int *)a1 + 79);
        v36[0] = v14;
        v36[1] = v18;
        v36[2] = v41;
        v37 = v21;
        v38 = v20;
        v22 = std::__hash_table<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,true>,std::allocator<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 20), v36, (uint64_t)v36);
        if (v23)
        {
          v24 = a1[37];
          if (v24 < a1[38])
            goto LABEL_37;
          goto LABEL_28;
        }
        v26 = *((_DWORD *)a1 + 79);
        if (*((_DWORD *)v22 + 8) != v26)
        {
          *((_DWORD *)v22 + 8) = v26;
          v24 = a1[37];
          v22[5] = (uint64_t)(v24 - a1[36]) >> 4;
          if (v24 < a1[38])
          {
LABEL_37:
            *(_QWORD *)v24 = v39;
            *(float *)(v24 + 8) = v40;
            *(_DWORD *)(v24 + 12) = v41;
            v25 = v24 + 16;
            goto LABEL_38;
          }
LABEL_28:
          v25 = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(a1 + 36, (uint64_t)&v39);
LABEL_38:
          a1[37] = v25;
          goto LABEL_39;
        }
        v27 = a1[36] + 16 * v22[5];
        v29 = *(float *)(v27 + 8);
        v28 = (float *)(v27 + 8);
        v30 = v29;
        if (v29 == -INFINITY || v40 >= -INFINITY && v40 <= -INFINITY)
        {
          v30 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else if (v30 >= v40)
        {
          v30 = v40;
        }
        *v28 = v30;
      }
      else
      {
        while (a1[33] <= (unint64_t)v41)
        {
          LOBYTE(v36[0]) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 32), v36);
        }
        if (((*(_QWORD *)(*v6 + (((unint64_t)v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
          std::deque<int>::push_back(a1 + 26, &v41);
      }
LABEL_39:
      if ((_QWORD)v42)
        (*(void (**)(_QWORD))(*(_QWORD *)v42 + 32))(v42);
      else
        ++v44;
    }
    if ((_QWORD)v42)
    {
      (*(void (**)(void))(*(_QWORD *)v42 + 8))();
      goto LABEL_50;
    }
LABEL_48:
    if (*((_QWORD *)&v43 + 1))
      --**((_DWORD **)&v43 + 1);
LABEL_50:
    v31 = *(_QWORD *)a1[1];
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 24))(&v42, *a1, v8);
    v32 = *(float *)(v31 + 4 * (int)v8);
    if (v32 == -INFINITY || *(float *)&v42 >= -INFINITY && *(float *)&v42 <= -INFINITY)
    {
      v33 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else
    {
      v34 = *(float *)&v42 == INFINITY || v32 == INFINITY;
      v33 = v32 + *(float *)&v42;
      if (v34)
        v33 = INFINITY;
    }
    v35 = *((float *)a1 + 78);
    if (v35 == -INFINITY || v33 >= -INFINITY && v33 <= -INFINITY)
    {
      v33 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v35 < v33)
    {
      v33 = *((float *)a1 + 78);
    }
    *((float *)a1 + 78) = v33;
LABEL_66:
    v5 = a1[31];
  }
  while (v5);
LABEL_67:
  for (result = (int *)a1[35]; result; result = (int *)a1[35])
  {
    *(_QWORD *)(a1[32] + (((unint64_t)result[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << result[2]);
    a1[35] = *(_QWORD *)result;
    operator delete(result);
  }
  ++*((_DWORD *)a1 + 79);
  return result;
}

void sub_22BDD4834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  else if (a20)
  {
    --*a20;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *fst::MemoryPool<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

void std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22BDD4D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(_QWORD *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  int **v6;
  void **v7;
  int *v8;
  int *v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v22;
  int *v23;
  _DWORD *v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int *v31;
  int v32;
  int v33;
  unint64_t v34;
  int *v35;
  _DWORD *v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int v44;
  char *v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __n128 v59;
  int v60;
  unint64_t v61;
  int **v62;
  int **v63;
  int *v64;
  int *v65;
  unint64_t v66;
  int *v67;
  int *v68;
  int *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  int *v75;
  int v76;
  int v77;
  unint64_t v78;
  int *v79;
  _DWORD *v80;
  int *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  int *v87;
  int v88;
  int v89;
  unint64_t v90;
  int *v91;
  _DWORD *v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int *v99;
  int v100;
  int *v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int **v107;
  unint64_t i;
  int *v109;
  int *v110;
  int *v111;
  unint64_t v112;
  int *v113;
  int *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  int *v120;
  int v121;
  int v122;
  unint64_t v123;
  int *v124;
  _DWORD *v125;
  int *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  int *v132;
  int v133;
  int v134;
  unint64_t v135;
  int *v136;
  _DWORD *v137;
  int *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  int *v144;
  int v145;
  char *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  int v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  float v167;
  BOOL v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v176;
  float v177;
  uint64_t v178;
  char v179;
  uint64_t result;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  void **v184;
  void **v185;
  void **v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  uint64_t v190;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) == -1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 56))(*a1, 4, 0);
    if (!result)
      return result;
    v181 = (char *)a1 + 140;
    goto LABEL_270;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v4 = a2;
  v5 = a1[1];
  v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2))
  {
    v185 = (void **)(a1 + 5);
    v7 = (void **)(a1 + 8);
    do
    {
      v8 = fst::TropicalWeightTpl<float>::Zero();
      v9 = v8;
      v10 = *(_QWORD *)(v5 + 16);
      v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(int **)v5;
        v14 = ((uint64_t)v11 - *(_QWORD *)v5) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5 + 16, v17);
          v11 = *v6;
          v13 = *(int **)v5;
        }
        else
        {
          v18 = 0;
        }
        v19 = (int *)&v18[4 * v14];
        *v19 = *v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)v5 = v19;
        *v6 = v12;
        *(_QWORD *)(v5 + 16) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = *v8;
        v12 = v11 + 1;
      }
      *v6 = v12;
      v21 = *fst::TropicalWeightTpl<float>::Zero();
      v23 = (int *)a1[6];
      v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        v25 = (int *)*v185;
        v26 = ((char *)v23 - (_BYTE *)*v185) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
LABEL_276:
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
          v25 = (int *)a1[5];
          v23 = (int *)a1[6];
        }
        else
        {
          v30 = 0;
        }
        v31 = (int *)&v30[4 * v26];
        *v31 = v21;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *--v23;
          *--v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      a1[6] = v24;
      v33 = *fst::TropicalWeightTpl<float>::Zero();
      v35 = (int *)a1[9];
      v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        v37 = (int *)*v7;
        v38 = ((char *)v35 - (_BYTE *)*v7) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v40 = v34 - (_QWORD)v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 10), v41);
          v37 = (int *)a1[8];
          v35 = (int *)a1[9];
        }
        else
        {
          v42 = 0;
        }
        v43 = (int *)&v42[4 * v38];
        *v43 = v33;
        v36 = v43 + 1;
        while (v35 != v37)
        {
          v44 = *--v35;
          *--v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
      v5 = a1[1];
      v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v45 = (char *)a1[14];
    v46 = (char *)a1[15];
    v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          v50 = v47 + 1;
          if ((v47 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v51 = *v48 - (_QWORD)v45;
          if (v51 >> 1 > v50)
            v50 = v51 >> 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
            v52 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v52);
            v45 = (char *)a1[14];
            v46 = (char *)a1[15];
          }
          else
          {
            v53 = 0;
          }
          v54 = &v53[4 * v47];
          *(_DWORD *)v54 = -1;
          v49 = v54 + 4;
          while (v46 != v45)
          {
            v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            v45 = (char *)a1[14];
          }
          else
          {
            v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)v46 = -1;
          v49 = v46 + 4;
        }
        a1[15] = v49;
        v47 = (v49 - v45) >> 2;
        v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(_QWORD *)a1[1] + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  v56 = a1[5];
  v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  v57 = a1[8];
  v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  *(_QWORD *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v4);
  v182 = (uint64_t)(a1 + 10);
  v183 = (uint64_t)(a1 + 7);
  v58 = a1 + 16;
  v181 = (char *)a1 + 140;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_266;
    v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v61 = v60;
    while (1)
    {
      v62 = (int **)a1[1];
      v63 = v62 + 1;
      if (v61 < v62[1] - *v62)
        break;
      v64 = fst::TropicalWeightTpl<float>::Zero();
      v65 = v64;
      v66 = (unint64_t)v62[2];
      v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        v69 = *v62;
        v70 = v67 - *v62;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v72 = v66 - (_QWORD)v69;
        if (v72 >> 1 > v71)
          v71 = v72 >> 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
          v73 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 2), v73);
          v67 = *v63;
          v69 = *v62;
        }
        else
        {
          v74 = 0;
        }
        v75 = (int *)&v74[4 * v70];
        *v75 = *v65;
        v68 = v75 + 1;
        while (v67 != v69)
        {
          v76 = *--v67;
          *--v75 = v76;
        }
        *v62 = v75;
        *v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v67 = *v64;
        v68 = v67 + 1;
      }
      *v63 = v68;
      v77 = *fst::TropicalWeightTpl<float>::Zero();
      v79 = (int *)a1[6];
      v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        v81 = (int *)*v184;
        v82 = ((char *)v79 - (_BYTE *)*v184) >> 2;
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v84 = v78 - (_QWORD)v81;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v85);
          v81 = (int *)a1[5];
          v79 = (int *)a1[6];
        }
        else
        {
          v86 = 0;
        }
        v87 = (int *)&v86[4 * v82];
        *v87 = v77;
        v80 = v87 + 1;
        while (v79 != v81)
        {
          v88 = *--v79;
          *--v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81)
          operator delete(v81);
      }
      else
      {
        *v79 = v77;
        v80 = v79 + 1;
      }
      a1[6] = v80;
      v89 = *fst::TropicalWeightTpl<float>::Zero();
      v91 = (int *)a1[9];
      v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        v93 = (int *)*v186;
        v94 = ((char *)v91 - (_BYTE *)*v186) >> 2;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62)
          goto LABEL_276;
        v96 = v90 - (_QWORD)v93;
        if (v96 >> 1 > v95)
          v95 = v96 >> 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
          v97 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v97);
          v93 = (int *)a1[8];
          v91 = (int *)a1[9];
        }
        else
        {
          v98 = 0;
        }
        v99 = (int *)&v98[4 * v94];
        *v99 = v89;
        v92 = v99 + 1;
        while (v91 != v93)
        {
          v100 = *--v91;
          *--v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *v91 = v89;
        v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 24))(&v190, *a1, v61);
      v101 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v187) = v190;
      HIDWORD(v190) = 0;
      HIDWORD(v190) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_266:
        ++*((_DWORD *)a1 + 34);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result)
          return result;
LABEL_270:
        *v181 = 1;
        return result;
      }
    }
    *(_QWORD *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    v102 = a1[8];
    v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *fst::TropicalWeightTpl<float>::Zero();
    v104 = *a1;
    v187 = 0u;
    v188 = 0u;
    v189 = 0;
    (*(void (**)(uint64_t, unint64_t, __int128 *))(*(_QWORD *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if (!(_QWORD)v187)
      {
        if (v189 >= (unint64_t)v188)
        {
LABEL_258:
          v179 = 1;
          goto LABEL_259;
        }
LABEL_140:
        v105 = *((_QWORD *)&v187 + 1) + 16 * v189;
        goto LABEL_141;
      }
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 16))(v187) & 1) != 0)
        goto LABEL_258;
      if (!(_QWORD)v187)
        goto LABEL_140;
      v105 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 24))(v187);
LABEL_141:
      if (!*(_QWORD *)v105)
      {
        v106 = a1[1];
        v107 = (int **)(v106 + 8);
        for (i = *(int *)(v105 + 12); i >= (uint64_t)(*(_QWORD *)(v106 + 8) - *(_QWORD *)v106) >> 2; i = *(int *)(v105 + 12))
        {
          v109 = fst::TropicalWeightTpl<float>::Zero();
          v110 = v109;
          v111 = *v107;
          v112 = *(_QWORD *)(v106 + 16);
          if ((unint64_t)*v107 >= v112)
          {
            v114 = *(int **)v106;
            v115 = ((uint64_t)v111 - *(_QWORD *)v106) >> 2;
            v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 62)
              std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
            v117 = v112 - (_QWORD)v114;
            if (v117 >> 1 > v116)
              v116 = v117 >> 1;
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
              v118 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v118 = v116;
            if (v118)
            {
              v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v106 + 16, v118);
              v111 = *v107;
              v114 = *(int **)v106;
            }
            else
            {
              v119 = 0;
            }
            v120 = (int *)&v119[4 * v115];
            *v120 = *v110;
            v113 = v120 + 1;
            while (v111 != v114)
            {
              v121 = *--v111;
              *--v120 = v121;
            }
            *(_QWORD *)v106 = v120;
            *v107 = v113;
            *(_QWORD *)(v106 + 16) = &v119[4 * v118];
            if (v114)
              operator delete(v114);
          }
          else
          {
            *v111 = *v109;
            v113 = v111 + 1;
          }
          *v107 = v113;
          v122 = *fst::TropicalWeightTpl<float>::Zero();
          v124 = (int *)a1[6];
          v123 = a1[7];
          if ((unint64_t)v124 >= v123)
          {
            v126 = (int *)*v184;
            v127 = ((char *)v124 - (_BYTE *)*v184) >> 2;
            v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 62)
              std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
            v129 = v123 - (_QWORD)v126;
            if (v129 >> 1 > v128)
              v128 = v129 >> 1;
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
              v130 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v130 = v128;
            if (v130)
            {
              v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v130);
              v126 = (int *)a1[5];
              v124 = (int *)a1[6];
            }
            else
            {
              v131 = 0;
            }
            v132 = (int *)&v131[4 * v127];
            *v132 = v122;
            v125 = v132 + 1;
            while (v124 != v126)
            {
              v133 = *--v124;
              *--v132 = v133;
            }
            a1[5] = v132;
            a1[6] = v125;
            a1[7] = &v131[4 * v130];
            if (v126)
              operator delete(v126);
          }
          else
          {
            *v124 = v122;
            v125 = v124 + 1;
          }
          a1[6] = v125;
          v134 = *fst::TropicalWeightTpl<float>::Zero();
          v136 = (int *)a1[9];
          v135 = a1[10];
          if ((unint64_t)v136 >= v135)
          {
            v138 = (int *)*v186;
            v139 = ((char *)v136 - (_BYTE *)*v186) >> 2;
            v140 = v139 + 1;
            if ((unint64_t)(v139 + 1) >> 62)
              std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
            v141 = v135 - (_QWORD)v138;
            if (v141 >> 1 > v140)
              v140 = v141 >> 1;
            if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
              v142 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v142 = v140;
            if (v142)
            {
              v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v142);
              v138 = (int *)a1[8];
              v136 = (int *)a1[9];
            }
            else
            {
              v143 = 0;
            }
            v144 = (int *)&v143[4 * v139];
            *v144 = v134;
            v137 = v144 + 1;
            while (v136 != v138)
            {
              v145 = *--v136;
              *--v144 = v145;
            }
            a1[8] = v144;
            a1[9] = v137;
            a1[10] = &v143[4 * v142];
            if (v138)
              operator delete(v138);
          }
          else
          {
            *v136 = v134;
            v137 = v136 + 1;
          }
          a1[9] = v137;
          BYTE4(v190) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 11), (_BYTE *)&v190 + 4);
          v106 = a1[1];
          v107 = (int **)(v106 + 8);
        }
        if (*((_BYTE *)a1 + 33))
        {
          v146 = (char *)a1[14];
          v147 = (char *)a1[15];
          v148 = (v147 - v146) >> 2;
          if (v148 <= (int)i)
          {
            do
            {
              if ((unint64_t)v147 >= *v58)
              {
                v151 = v148 + 1;
                if ((v148 + 1) >> 62)
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                v152 = *v58 - (_QWORD)v146;
                if (v152 >> 1 > v151)
                  v151 = v152 >> 1;
                if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
                  v153 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v153 = v151;
                if (v153)
                {
                  v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v153);
                  v146 = (char *)a1[14];
                  v147 = (char *)a1[15];
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[4 * v148];
                *(_DWORD *)v155 = -1;
                v150 = v155 + 4;
                while (v147 != v146)
                {
                  v156 = *((_DWORD *)v147 - 1);
                  v147 -= 4;
                  *((_DWORD *)v155 - 1) = v156;
                  v155 -= 4;
                }
                a1[14] = v155;
                a1[15] = v150;
                a1[16] = &v154[4 * v153];
                if (v146)
                {
                  operator delete(v146);
                  v146 = (char *)a1[14];
                }
                else
                {
                  v146 = v155;
                }
              }
              else
              {
                *(_DWORD *)v147 = -1;
                v150 = v147 + 4;
              }
              a1[15] = v150;
              v148 = (v150 - v146) >> 2;
              v157 = *(_DWORD *)(v105 + 12);
              v147 = v150;
            }
            while (v148 <= v157);
            v149 = v157;
            LODWORD(i) = *(_DWORD *)(v105 + 12);
          }
          else
          {
            v149 = (int)i;
          }
          if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
          {
            v158 = fst::TropicalWeightTpl<float>::Zero();
            v159 = *(int *)(v105 + 12);
            *(_DWORD *)(*(_QWORD *)a1[1] + 4 * v159) = *v158;
            v160 = a1[5];
            *(_DWORD *)(v160 + 4 * v159) = *fst::TropicalWeightTpl<float>::Zero();
            v161 = *(int *)(v105 + 12);
            i = (unint64_t)*v186;
            *(_DWORD *)(i + 4 * v161) = *fst::TropicalWeightTpl<float>::Zero();
            v162 = *(int *)(v105 + 12);
            *(_QWORD *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
            *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
            LODWORD(i) = *(_DWORD *)(v105 + 12);
          }
        }
        v163 = *(_QWORD *)a1[1];
        v164 = a1[5];
        v165 = a1[8];
        if (v103 == -INFINITY || (v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
        {
          v167 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else
        {
          v168 = v166 == INFINITY || v103 == INFINITY;
          v169 = v103 + v166;
          v167 = v168 ? INFINITY : v169;
        }
        v170 = *(float *)(v163 + 4 * (int)i);
        if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
        {
          v171 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
          v170 = *(float *)(v163 + 4 * (int)i);
        }
        else
        {
          v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
        }
        v172 = *((float *)a1 + 7);
        v173 = v171 + v172;
        v174 = v172 + v170;
        if (v170 > v173 || v171 > v174)
          break;
      }
LABEL_255:
      if ((_QWORD)v187)
        (*(void (**)(_QWORD))(*(_QWORD *)v187 + 32))(v187);
      else
        ++v189;
    }
    v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      v176 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v176 >= v167)
    {
      v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      v177 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v177 >= v167)
    {
      v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      v178 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)) & 1) != 0)
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(_QWORD *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_255;
    }
    v179 = 0;
    *v181 = 1;
LABEL_259:
    result = v187;
    if ((_QWORD)v187)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 8))(v187);
    }
    else if (*((_QWORD *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_22BDD5D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22BDD6138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,true>,std::allocator<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = a2[1];
  v6 = a2[2];
  v8 = *a2;
  v9 = v6 + 7853 * *a2 + 7867 * v7;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v6 + 7853 * v8 + 7867 * v7;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *(_QWORD *)((char *)v13 + 20) == __PAIR64__(v6, v7))
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x30uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = *(_QWORD *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v13 + 2) = *(_OWORD *)(a3 + 16);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v13 = *v22;
LABEL_39:
    *v22 = v13;
    goto LABEL_40;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_22BDD63C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,(void *)0>(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int *v6;
  void **v7;
  void **v8;
  void **v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  _DWORD *v13;
  int *v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  float *v37;
  float v38;
  float v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  int v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  int *v49;
  float v50;
  float v51;
  BOOL v52;
  float *v53;
  float v54;
  float v55;
  BOOL v56;
  float *v57;
  float v58;
  float v59;
  unint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int v76;
  float v77;
  float v78;
  uint64_t v79;
  float v80;
  int v81;
  uint64_t v82;
  int v83;
  float v84;
  unsigned int v85;
  char v86;
  void *__p;
  char *v88;
  char *v89;
  void *v90[3];
  void *v91;
  unint64_t v92;
  _QWORD v93[3];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void *v97[4];
  void *v98;
  void *v99;
  uint64_t v100;
  void *v101[4];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (v4 < 1)
    return;
  v5 = v4;
  v6 = fst::TropicalWeightTpl<float>::Zero();
  std::vector<fst::TropicalWeightTpl<float>>::vector(v101, v5, v6);
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v7 = *(void ***)(a2 + 16);
  if (!v7)
  {
    std::vector<fst::TropicalWeightTpl<float>>::reserve(&v98, v5);
    fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, (char **)&v98, 1, *(float *)(a2 + 24));
    v7 = *(void ***)(a2 + 16);
  }
  if (v7)
    v8 = v7;
  else
    v8 = &v98;
  if (*(_DWORD *)(a2 + 4))
  {
    v9 = v7 ? v7 : &v98;
    v10 = v9[1];
    v11 = *v8;
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) < (unint64_t)((v10 - v11) >> 2))
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v13 = *v8;
      v14 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v93[0]) = 0;
      LODWORD(v93[0]) = v13[v12];
      LODWORD(v91) = 0;
      LODWORD(v91) = *v14;
      if (*(float *)v93 != *(float *)&v91)
      {
        v93[0] = v101;
        v93[1] = v8;
        v94 = 0u;
        v95 = 0u;
        v96 = 0u;
        memset(v97, 0, 28);
        LOBYTE(v90[0]) = 0;
        std::vector<BOOL>::vector(&v91, v5, (unsigned __int8 *)v90);
        __p = (void *)-1;
        std::vector<unsigned long>::vector(v90, v5, &__p);
        __p = 0;
        v88 = 0;
        v89 = 0;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
        v16 = v15;
        v17 = v88;
        if (v88 >= v89)
        {
          v19 = (char *)__p;
          v20 = (v88 - (_BYTE *)__p) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v22 = v89 - (_BYTE *)__p;
          if ((v89 - (_BYTE *)__p) >> 1 > v21)
            v21 = v22 >> 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89, v23);
            v19 = (char *)__p;
            v17 = v88;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v20];
          v26 = &v24[4 * v23];
          *(_DWORD *)v25 = v16;
          v18 = v25 + 4;
          while (v17 != v19)
          {
            v27 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v25 - 1) = v27;
            v25 -= 4;
          }
          __p = v25;
          v88 = v18;
          v89 = v26;
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_DWORD *)v88 = v15;
          v18 = v17 + 4;
        }
        v88 = v18;
        v85 = 0;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        v85 = v28;
        if (*(_BYTE *)(a2 + 28))
        {
          v29 = *(float *)a2;
          if (*(float *)a2 == -INFINITY || (v30 = *((float *)*v8 + v28), v30 >= -INFINITY) && v30 <= -INFINITY)
          {
LABEL_43:
            v31 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
LABEL_49:
            v84 = v31;
            if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v86, &v84, (float *)*v8 + (int)v85))
            {
              v33 = 0;
            }
            else
            {
              *((_DWORD *)v101[0] + (int)v85) = *fst::TropicalWeightTpl<float>::One();
              v34 = fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert((uint64_t)v93, (int *)&v85);
              *((_QWORD *)v90[0] + (int)v85) = v34;
              v33 = 1;
            }
            while (LODWORD(v97[3]))
            {
              v85 = *(_DWORD *)v97[0];
              fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Pop((uint64_t)v93);
              v35 = v85;
              v36 = (int)v85;
              *((_QWORD *)v90[0] + (int)v85) = -1;
              *(_QWORD *)((char *)v91 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
              v37 = (float *)v101[0];
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v82, a1);
              v38 = v37[v36];
              if (v38 == -INFINITY || *(float *)&v82 >= -INFINITY && *(float *)&v82 <= -INFINITY)
              {
                v39 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
              }
              else
              {
                v40 = *(float *)&v82 == INFINITY || v38 == INFINITY;
                v39 = v38 + *(float *)&v82;
                if (v40)
                  v39 = INFINITY;
              }
              *(float *)&v79 = v39;
              if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v86, &v84, (float *)&v79))
              {
                v41 = v85;
                v83 = *fst::TropicalWeightTpl<float>::Zero();
                (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 160))(a1, v41, &v83);
              }
              (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 272))(a1, v85, &v82);
              while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82))
              {
                v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82);
                v79 = *(_QWORD *)v42;
                v43 = *(float *)(v42 + 8);
                v80 = v43;
                v44 = *(_DWORD *)(v42 + 12);
                v81 = v44;
                v45 = *((float *)v101[0] + (int)v85);
                if (v45 == -INFINITY || v43 >= -INFINITY && v43 <= -INFINITY)
                {
                  v46 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                  v44 = v81;
                }
                else
                {
                  v47 = v45 == INFINITY || v43 == INFINITY;
                  v48 = v43 + v45;
                  if (v47)
                    v46 = INFINITY;
                  else
                    v46 = v48;
                }
                if (v44 >= (unint64_t)(((_BYTE *)v9[1] - (_BYTE *)*v8) >> 2))
                  v49 = fst::TropicalWeightTpl<float>::Zero();
                else
                  v49 = (int *)((char *)*v8 + 4 * v44);
                if (v46 == -INFINITY || (v50 = *(float *)v49, *(float *)v49 >= -INFINITY) && *(float *)v49 <= -INFINITY)
                {
                  v51 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                }
                else
                {
                  v52 = v50 == INFINITY || v46 == INFINITY;
                  v51 = v46 + v50;
                  if (v52)
                    v51 = INFINITY;
                }
                v78 = v51;
                if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v86, &v84, &v78))
                {
                  v81 = *(_DWORD *)__p;
                  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v82 + 80))(v82, &v79);
                }
                else
                {
                  v53 = (float *)v101[0];
                  v54 = *((float *)v101[0] + (int)v85);
                  if (v54 == -INFINITY || v80 >= -INFINITY && v80 <= -INFINITY)
                  {
                    v55 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                    v53 = (float *)v101[0];
                  }
                  else
                  {
                    v56 = v80 == INFINITY || v54 == INFINITY;
                    v55 = v54 + v80;
                    if (v56)
                      v55 = INFINITY;
                  }
                  v77 = v55;
                  if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v86, &v77, &v53[v81]))
                  {
                    v57 = (float *)v101[0];
                    v58 = *((float *)v101[0] + (int)v85);
                    if (v58 == -INFINITY || v80 >= -INFINITY && v80 <= -INFINITY)
                    {
                      v59 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                      v57 = (float *)v101[0];
                    }
                    else
                    {
                      v61 = v80 == INFINITY || v58 == INFINITY;
                      v59 = v58 + v80;
                      if (v61)
                        v59 = INFINITY;
                    }
                    v60 = v81;
                    v57[v81] = v59;
                  }
                  else
                  {
                    v60 = v81;
                  }
                  if (((*(_QWORD *)((char *)v91 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60) & 1) == 0)
                  {
                    v62 = *(_DWORD *)(a2 + 4);
                    if (v62 == -1 || v33 < v62)
                    {
                      v63 = *((_QWORD *)v90[0] + v60);
                      if (v63 == -1)
                      {
                        v64 = fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert((uint64_t)v93, &v81);
                        *((_QWORD *)v90[0] + v81) = v64;
                        ++v33;
                      }
                      else
                      {
                        fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Update((uint64_t)v93, v63, &v81);
                      }
                    }
                  }
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v82 + 32))(v82);
              }
              if (v82)
                (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
            }
            v65 = v92;
            if (v92)
            {
              v66 = 0;
              do
              {
                if (((*(_QWORD *)((char *)v91 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v66) & 1) == 0)
                {
                  v67 = v88;
                  if (v88 >= v89)
                  {
                    v69 = (char *)__p;
                    v70 = (v88 - (_BYTE *)__p) >> 2;
                    v71 = v70 + 1;
                    if ((unint64_t)(v70 + 1) >> 62)
                      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                    v72 = v89 - (_BYTE *)__p;
                    if ((v89 - (_BYTE *)__p) >> 1 > v71)
                      v71 = v72 >> 1;
                    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                      v73 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v73 = v71;
                    if (v73)
                    {
                      v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89, v73);
                      v69 = (char *)__p;
                      v67 = v88;
                    }
                    else
                    {
                      v74 = 0;
                    }
                    v75 = &v74[4 * v70];
                    *(_DWORD *)v75 = v66;
                    v68 = v75 + 4;
                    while (v67 != v69)
                    {
                      v76 = *((_DWORD *)v67 - 1);
                      v67 -= 4;
                      *((_DWORD *)v75 - 1) = v76;
                      v75 -= 4;
                    }
                    __p = v75;
                    v88 = v68;
                    v89 = &v74[4 * v73];
                    if (v69)
                      operator delete(v69);
                  }
                  else
                  {
                    *(_DWORD *)v88 = v66;
                    v68 = v67 + 4;
                  }
                  v88 = v68;
                  v65 = v92;
                }
                ++v66;
              }
              while (v65 > v66);
            }
            (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, &__p);
            if (__p)
            {
              v88 = (char *)__p;
              operator delete(__p);
            }
            if (v90[0])
            {
              v90[1] = v90[0];
              operator delete(v90[0]);
            }
            if (v91)
              operator delete(v91);
            if (v97[0])
            {
              v97[1] = v97[0];
              operator delete(v97[0]);
            }
            if (*((_QWORD *)&v95 + 1))
            {
              *(_QWORD *)&v96 = *((_QWORD *)&v95 + 1);
              operator delete(*((void **)&v95 + 1));
            }
            if ((_QWORD)v94)
            {
              *((_QWORD *)&v94 + 1) = v94;
              operator delete((void *)v94);
            }
            goto LABEL_14;
          }
        }
        else
        {
          v29 = *((float *)*v8 + v28);
          if (v29 == -INFINITY)
            goto LABEL_43;
          v30 = *(float *)a2;
          if (*(float *)a2 >= -INFINITY && *(float *)a2 <= -INFINITY)
            goto LABEL_43;
        }
        v32 = v30 == INFINITY || v29 == INFINITY;
        v31 = v29 + v30;
        if (v32)
          v31 = INFINITY;
        goto LABEL_49;
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
LABEL_14:
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
}

void sub_22BDD6C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;
  void *v28;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::~Heap(&a25);
  v27 = *(void **)(v25 - 152);
  if (v27)
  {
    *(_QWORD *)(v25 - 144) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v25 - 128);
  if (v28)
  {
    *(_QWORD *)(v25 - 120) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void std::vector<fst::TropicalWeightTpl<float>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, char **a2, char a3, float a4)
{
  char *v7;
  _DWORD *v8;
  int *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _BYTE *v24;
  int v25;
  float v26;
  char v27;
  void *__p;
  _BYTE *v29;
  uint64_t v30;
  void (**v31)();
  int v32;
  std::__shared_weak_count *v33;
  _BYTE v34[72];

  if ((a3 & 1) != 0)
  {
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(&v31);
    fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t *)&v31, 1);
    __p = 0;
    v29 = 0;
    v30 = 0;
    fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>((uint64_t)v34, (uint64_t)&v31, (uint64_t)&__p);
    v24 = v34;
    v25 = -1;
    v26 = a4;
    v27 = 0;
    fst::ShortestDistance<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>((uint64_t)&v31, &__p, (uint64_t)&v24);
    v7 = *a2;
    a2[1] = *a2;
    v8 = __p;
    if (v29 - (_BYTE *)__p == 4)
    {
      if (*(float *)__p >= -INFINITY && *(float *)__p <= -INFINITY)
      {
        v9 = fst::TropicalWeightTpl<float>::NoWeight();
        std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, v9);
      }
    }
    else
    {
      v10 = 0;
      v11 = a2 + 2;
      v12 = v7;
      do
      {
        v13 = v10 + 1;
        v14 = v8[v10 + 1];
        if ((unint64_t)v12 >= *v11)
        {
          if (v13 >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v16 = *v11 - (_QWORD)v7;
          if (v16 >> 1 > v13)
            v13 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v13;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
            v7 = *a2;
            v12 = a2[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v10];
          *(_DWORD *)v19 = v14;
          v15 = v19 + 4;
          while (v12 != v7)
          {
            v20 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a2 = v19;
          a2[1] = v15;
          a2[2] = &v18[4 * v17];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *(_DWORD *)v12 = v14;
          v15 = v12 + 4;
        }
        a2[1] = v15;
        v7 = *a2;
        v10 = (v15 - *a2) >> 2;
        v8 = __p;
        v12 = v15;
      }
      while (v10 < ((v29 - (_BYTE *)__p) >> 2) - 1);
    }
    fst::AutoQueue<int>::~AutoQueue((uint64_t)v34);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
    v31 = off_24F655E28;
    v21 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v34, a1, (uint64_t)a2);
    v31 = (void (**)())v34;
    v32 = -1;
    *(float *)&v33 = a4;
    BYTE4(v33) = 0;
    fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, (uint64_t)&v31);
    fst::AutoQueue<int>::~AutoQueue((uint64_t)v34);
  }
}

void sub_22BDD704C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 72;
  v4 = *(int **)(a1 + 72);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 88);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 88, v13);
        v4 = *(int **)(a1 + 72);
        v7 = *(int **)(a1 + 80);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 72) = v15;
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 80) = v10;
    v19 = *(char **)(a1 + 32);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 24);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v25);
        v21 = *(char **)(a1 + 24);
        v19 = *(char **)(a1 + 32);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 96);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 24) = v27;
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 96);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 32) = v20;
    v31 = *(char **)(a1 + 56);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 96);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 56) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 48);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v37);
        v33 = *(char **)(a1 + 48);
        v31 = *(char **)(a1 + 56);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 96);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v39;
      *(_QWORD *)(a1 + 56) = v32;
      *(_QWORD *)(a1 + 64) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * *(int *)(*(_QWORD *)(a1 + 48) + 4 * *(int *)(a1 + 96))) = *(_DWORD *)(a1 + 96);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v42 + 1;
  return fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 72);
  v2 = *v1;
  v3 = *(int *)(a1 + 96) - 1;
  v4 = *(int **)(a1 + 48);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 96);
  fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Heapify(a1, 0);
  return v2;
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Update(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v7;

  v5 = *(int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  v6 = v5 - 1;
  if ((int)v5 < 1)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  v7 = fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *a3, *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v6 >> 1)));
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v5) = *a3;
  if (v7)
    return fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(a1, a3, v5);
  else
    return fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Heapify(a1, v5);
}

_QWORD *fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::~Heap(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::vector<fst::TropicalWeightTpl<float>>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22BDD74F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v4;
  _QWORD v5[3];
  int v6;
  char v7;
  char v8;
  void *v9[2];
  void *v10[2];
  __int128 v11;
  void *v12[2];
  void *__p[2];
  _BYTE v14[21];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 16);
  v7 = *(_BYTE *)(a3 + 20);
  v8 = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v14, 0, sizeof(v14));
  a2[1] = *a2;
  fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(v5, *(_DWORD *)(a3 + 12));
  if (v14[20])
  {
    a2[1] = *a2;
    v4 = fst::TropicalWeightTpl<float>::NoWeight();
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, v4);
  }
  if (__p[1])
  {
    *(void **)v14 = __p[1];
    operator delete(__p[1]);
  }
  if (v12[0])
    operator delete(v12[0]);
  if (v10[1])
  {
    *(void **)&v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_22BDD75E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  int *v18;
  __n128 v19;
  int *v20;
  unint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  char v38;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  int *v59;
  int *v60;
  uint64_t v61;
  float v62;
  uint64_t v63;

  (*(void (**)(uint64_t *))(*a2 + 200))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 256))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 264))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 224))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10 = 0;
  v63 = 0;
  if ((a3 & 1) != 0)
    goto LABEL_67;
  *(_QWORD *)&v54 = 0;
  DWORD2(v54) = 0;
  LODWORD(v55) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 112))(a1, &v54);
  v11 = 0xFFFFFFFFLL;
  while (1)
  {
    if ((_QWORD)v54)
    {
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v54 + 16))(v54);
      v13 = v54;
      if ((v12 & 1) != 0)
        goto LABEL_24;
      if ((_QWORD)v54)
      {
        v14 = (*(uint64_t (**)(void))(*(_QWORD *)v54 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v55 >= SDWORD2(v54))
    {
      goto LABEL_26;
    }
    v14 = v55;
LABEL_11:
    (*(void (**)(float *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v62, a1, v14);
    v15 = fst::TropicalWeightTpl<float>::Zero();
    *(float *)&v51 = v62;
    LODWORD(v59) = 0;
    LODWORD(v59) = *v15;
    v16 = 2 * ((_DWORD)v11 != -1);
    if ((_DWORD)v11 == -1)
      v17 = v14;
    else
      v17 = -1;
    if (*(float *)&v51 == *(float *)&v59)
      v16 = 4;
    v11 = v62 == *(float *)&v59 ? v11 : v17;
    if ((v16 | 4) != 4)
      break;
    if ((_QWORD)v54)
      (*(void (**)(_QWORD))(*(_QWORD *)v54 + 32))(v54);
    else
      LODWORD(v55) = v55 + 1;
  }
  v13 = v54;
LABEL_24:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_26:
  if ((_DWORD)v11 != -1)
  {
    (*(void (**)(int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1, v11);
    v18 = fst::TropicalWeightTpl<float>::One();
    LODWORD(v54) = (_DWORD)v59;
    LODWORD(v51) = 0;
    LODWORD(v51) = *v18;
    v19.n128_u32[0] = v59;
    if (*(float *)&v59 == *(float *)&v51)
    {
      v26 = 0;
      v48 = 0;
      goto LABEL_68;
    }
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v54 = (unint64_t)&v59;
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = &v63;
    v57 = 0u;
    v58 = 0u;
    fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t *)&v54, 0);
    v20 = v59;
    if (v59 != v60)
    {
      v21 = 0;
      do
      {
        v22 = *v20++;
        if (v22 == v59[(int)v11])
          ++v21;
      }
      while (v20 != v60);
      if (v21 > 1)
        goto LABEL_54;
    }
    v53 = 0;
    v51 = 0u;
    v52 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v11, &v51);
    while (2)
    {
      while (2)
      {
        if ((_QWORD)v51)
        {
          v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v51 + 16))(v51);
          v24 = v51;
          if ((v23 & 1) != 0)
            goto LABEL_48;
          if ((_QWORD)v51)
          {
            v25 = (*(uint64_t (**)(void))(*(_QWORD *)v51 + 24))();
            v24 = v51;
            if (*(_DWORD *)(v25 + 12) == (_DWORD)v11)
            {
              v11 = 0xFFFFFFFFLL;
LABEL_48:
              if (v24)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                goto LABEL_52;
              }
LABEL_50:
              if (*((_QWORD *)&v52 + 1))
                --**((_DWORD **)&v52 + 1);
LABEL_52:
              if ((_DWORD)v11 != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_55;
              }
LABEL_54:
              v10 = 0;
              v11 = 0xFFFFFFFFLL;
LABEL_55:
              v27 = *((_QWORD *)&v58 + 1);
              *((_QWORD *)&v58 + 1) = 0;
              if (v27)
                std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v58 + 8, v27);
              v28 = (void **)v58;
              *(_QWORD *)&v58 = 0;
              if (v28)
                std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v58, v28);
              v29 = *((_QWORD *)&v57 + 1);
              *((_QWORD *)&v57 + 1) = 0;
              if (v29)
                std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v57 + 8, v29);
              v30 = v57;
              *(_QWORD *)&v57 = 0;
              if (v30)
                std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v57, v30);
              if (v59)
              {
                v60 = v59;
                operator delete(v59);
              }
              if ((_DWORD)v11 != -1)
              {
                v48 = v10;
                v26 = 0;
                goto LABEL_68;
              }
              goto LABEL_67;
            }
            if ((_QWORD)v51)
            {
              (*(void (**)(void))(*(_QWORD *)v51 + 32))();
              continue;
            }
            goto LABEL_43;
          }
        }
        else if (v53 >= (unint64_t)v52)
        {
          goto LABEL_50;
        }
        break;
      }
      if (*(_DWORD *)(*((_QWORD *)&v51 + 1) + 16 * v53 + 12) == (_DWORD)v11)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_50;
      }
LABEL_43:
      ++v53;
      continue;
    }
  }
  v10 = 0;
LABEL_67:
  v48 = v10;
  v11 = (*(uint64_t (**)(uint64_t *))(*a2 + 176))(a2);
  v26 = 1;
LABEL_68:
  *(_QWORD *)&v51 = 0;
  DWORD2(v51) = 0;
  LODWORD(v52) = 0;
  (*(void (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)a1 + 112))(a1, &v51, v19);
  while (2)
  {
    if (!(_QWORD)v51)
    {
      if ((int)v52 >= SDWORD2(v51))
        goto LABEL_120;
      goto LABEL_74;
    }
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v51 + 16))(v51))
    {
      if ((_QWORD)v51)
      {
        v31 = (*(uint64_t (**)(void))(*(_QWORD *)v51 + 24))();
LABEL_75:
        v32 = v31 + v26;
        while ((*(int (**)(uint64_t *))(*a2 + 136))(a2) <= v32)
          (*(void (**)(uint64_t *))(*a2 + 176))(a2);
        if ((_DWORD)v31 == (_DWORD)v9)
        {
          v50 = *fst::TropicalWeightTpl<float>::One();
          (*(void (**)(uint64_t *, _QWORD, int *))(*a2 + 160))(a2, (v31 + v26), &v50);
        }
        (*(void (**)(float *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v62, a1, v31);
        v33 = fst::TropicalWeightTpl<float>::Zero();
        *(float *)&v54 = v62;
        LODWORD(v59) = 0;
        LODWORD(v59) = *v33;
        v34 = v26 ^ 1;
        if (v62 == *(float *)&v59)
          v34 = 1;
        if ((v34 & 1) == 0)
        {
          *(_QWORD *)&v54 = 0;
          *((float *)&v54 + 2) = v62;
          HIDWORD(v54) = v31 + v26;
          (*(void (**)(uint64_t *, _QWORD, __int128 *))(*a2 + 184))(a2, 0, &v54);
        }
        v56 = 0;
        v54 = 0u;
        v55 = 0u;
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v31, &v54);
LABEL_85:
        if ((_QWORD)v54)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v54 + 16))(v54))
          {
            if ((_QWORD)v54)
            {
              (*(void (**)(void))(*(_QWORD *)v54 + 8))();
              goto LABEL_115;
            }
LABEL_113:
            if (*((_QWORD *)&v55 + 1))
              --**((_DWORD **)&v55 + 1);
LABEL_115:
            if ((_QWORD)v51)
              (*(void (**)(_QWORD))(*(_QWORD *)v51 + 32))(v51);
            else
              LODWORD(v52) = v52 + 1;
            continue;
          }
          if ((_QWORD)v54)
          {
            v35 = (*(uint64_t (**)(void))(*(_QWORD *)v54 + 24))();
LABEL_91:
            v36 = (*(_DWORD *)(v35 + 12) + v26);
            v37 = *(float *)(v35 + 8);
            if ((_DWORD)v36 == (_DWORD)v11)
              v38 = v26;
            else
              v38 = 1;
            if ((v38 & 1) == 0)
            {
              (*(void (**)(int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1, v11);
              if (*(float *)&v59 == -INFINITY || v37 >= -INFINITY && v37 <= -INFINITY)
              {
                LODWORD(v37) = *fst::TropicalWeightTpl<float>::NoWeight();
              }
              else if (*(float *)&v59 == INFINITY || v37 == INFINITY)
              {
                v37 = INFINITY;
              }
              else
              {
                v37 = v37 + *(float *)&v59;
              }
            }
            v59 = *(int **)v35;
            v60 = (int *)__PAIR64__(v32, LODWORD(v37));
            while (1)
            {
              v40 = (*(uint64_t (**)(uint64_t *))(*a2 + 136))(a2);
              v41 = *a2;
              if (v40 > (int)v36)
                break;
              (*(void (**)(uint64_t *))(v41 + 176))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, int **))(v41 + 184))(a2, v36, &v59);
            if ((_QWORD)v54)
              (*(void (**)(_QWORD))(*(_QWORD *)v54 + 32))(v54);
            else
              ++v56;
            goto LABEL_85;
          }
        }
        else if (v56 >= (unint64_t)v55)
        {
          goto LABEL_113;
        }
        v35 = *((_QWORD *)&v54 + 1) + 16 * v56;
        goto LABEL_91;
      }
LABEL_74:
      v31 = v52;
      goto LABEL_75;
    }
    break;
  }
  if ((_QWORD)v51)
    (*(void (**)(void))(*(_QWORD *)v51 + 8))();
LABEL_120:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 152))(a2, v11);
  if ((_DWORD)v11 == (_DWORD)v9)
    v42 = v26;
  else
    v42 = 1;
  if ((v42 & 1) == 0)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v54, a1, v9);
    v49 = v54;
    (*(void (**)(uint64_t *, uint64_t, int *))(*a2 + 160))(a2, v9, &v49);
  }
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  v44 = v63 | v43;
  v45 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 56))(a2, 0xFFFFFFFF0007, 0) | v48;
  v46 = fst::ReverseProperties(v44, v26);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 168))(a2, v45 | v46, 0xFFFFFFFF0007);
}

void sub_22BDD7E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(va);
  v11 = *(void **)(v9 - 144);
  if (v11)
  {
    *(_QWORD *)(v9 - 136) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestDistance<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v4;
  _QWORD v5[3];
  int v6;
  char v7;
  char v8;
  void *v9[2];
  void *v10[2];
  __int128 v11;
  void *v12[2];
  void *__p[2];
  _BYTE v14[21];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 16);
  v7 = *(_BYTE *)(a3 + 20);
  v8 = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v14, 0, sizeof(v14));
  a2[1] = *a2;
  fst::internal::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ShortestDistance(v5, *(_DWORD *)(a3 + 12));
  if (v14[20])
  {
    a2[1] = *a2;
    v4 = fst::TropicalWeightTpl<float>::NoWeight();
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, v4);
  }
  if (__p[1])
  {
    *(void **)v14 = __p[1];
    operator delete(__p[1]);
  }
  if (v12[0])
    operator delete(v12[0]);
  if (v10[1])
  {
    *(void **)&v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_22BDD8008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(&a9);
  _Unwind_Resume(a1);
}

void std::vector<fst::TropicalWeightTpl<float>>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<fst::TropicalWeightTpl<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFst(_QWORD *a1)
{
  *a1 = off_24F655E28;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  void *v56[2];
  char v57;
  BOOL v58;
  __int16 v59;
  void *v60[3];
  void *__p[2];
  uint64_t v62;
  uint64_t *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_24F6555C8;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (uint64_t *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v9 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == -1)
  {
    v23 = operator new();
    *(_DWORD *)(v23 + 8) = 5;
    *(_BYTE *)(v23 + 12) = 0;
    *(_QWORD *)v23 = &off_24F655640;
    *(_QWORD *)(v23 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    v24 = *v6;
    *v6 = v23;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using state-order discipline", 39);
      goto LABEL_19;
    }
  }
  else if ((v9 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v25, a2);
    v26 = *v6;
    *v6 = v25;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using top-order discipline", 37);
      goto LABEL_19;
    }
  }
  else
  {
    if ((v9 & 0x200000000) == 0)
    {
      v66 = 0;
      __p[0] = v8;
      __p[1] = 0;
      v62 = 0;
      v63 = &v66;
      v64 = 0u;
      v65 = 0u;
      fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2, (uint64_t *)__p, 0);
      v10 = *(int **)(a1 + 48);
      v11 = *(int **)(a1 + 56);
      if (v10 != v11)
      {
        v12 = v10 + 1;
        if (v10 + 1 != v11)
        {
          v13 = *v10;
          v14 = v10 + 1;
          do
          {
            v16 = *v14++;
            v15 = v16;
            v17 = v13 < v16;
            if (v13 <= v16)
              v13 = v15;
            if (v17)
              v10 = v12;
            v12 = v14;
          }
          while (v14 != v11);
        }
      }
      v18 = *v10;
      v19 = *v10 + 1;
      std::vector<fst::QueueType>::vector(v60, v19);
      if (a3)
      {
        v20 = operator new();
        v21 = (_QWORD *)operator new();
        *v21 = a3;
        v21[1] = v20;
        v22 = v21;
      }
      else
      {
        v20 = 0;
        v22 = 0;
      }
      v59 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(a2, v8, (uint64_t)v60, v20, &v59, (_BYTE *)&v59 + 1);
      if (HIBYTE(v59))
      {
        v29 = operator new();
        *(_DWORD *)(v29 + 8) = 2;
        *(_BYTE *)(v29 + 12) = 0;
        *(_QWORD *)v29 = &off_24F655710;
        *(_OWORD *)(v29 + 16) = 0u;
        *(_OWORD *)(v29 + 32) = 0u;
        *(_OWORD *)(v29 + 48) = 0u;
        v30 = *v6;
        *v6 = v29;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        if (FLAGS_v < 2)
          goto LABEL_71;
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_40:
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
LABEL_71:
        if (v22)
          MEMORY[0x22E2FB328](v22, 0x60C405BB7FD7CLL);
        if (v20)
          MEMORY[0x22E2FB328](v20, 0xC400A2AC0F1);
        if (v60[0])
        {
          v60[1] = v60[0];
          operator delete(v60[0]);
        }
        v51 = *((_QWORD *)&v65 + 1);
        *((_QWORD *)&v65 + 1) = 0;
        if (v51)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v65 + 8, v51);
        v52 = (void **)v65;
        *(_QWORD *)&v65 = 0;
        if (v52)
          std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v65, v52);
        v53 = *((_QWORD *)&v64 + 1);
        *((_QWORD *)&v64 + 1) = 0;
        if (v53)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v64 + 8, v53);
        v54 = v64;
        *(_QWORD *)&v64 = 0;
        if (v54)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v64, v54);
        return a1;
      }
      if ((_BYTE)v59)
      {
        v31 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v31, (uint64_t)v8);
        v32 = *v6;
        *v6 = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (FLAGS_v < 2)
          goto LABEL_71;
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_40;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
      }
      std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)v7, v19);
      if (v18 < 0)
      {
LABEL_69:
        v49 = operator new();
        *(_DWORD *)(v49 + 8) = 6;
        *(_BYTE *)(v49 + 12) = 0;
        *(_QWORD *)v49 = &off_24F655848;
        *(_QWORD *)(v49 + 16) = v7;
        *(_QWORD *)(v49 + 24) = v8;
        *(_QWORD *)(v49 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v49 + 48) = 0;
        *(_QWORD *)(v49 + 56) = 0;
        *(_QWORD *)(v49 + 40) = 0;
        v50 = *v6;
        *v6 = v49;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        goto LABEL_71;
      }
      v33 = 0;
      while (1)
      {
        v34 = *((_DWORD *)v60[0] + v33);
        if (v34 == 3)
        {
          v37 = *v7;
          v38 = operator new();
          *(_DWORD *)(v38 + 8) = 3;
          *(_BYTE *)(v38 + 12) = 0;
          *(_QWORD *)v38 = &off_24F655778;
          *(_OWORD *)(v38 + 16) = *v22;
          *(_OWORD *)(v38 + 32) = 0u;
          *(_OWORD *)(v38 + 48) = 0u;
          *(_OWORD *)(v38 + 64) = 0u;
          *(_OWORD *)(v38 + 80) = 0u;
          *(_OWORD *)(v38 + 92) = 0u;
          *(_QWORD *)(v38 + 120) = 0;
          *(_QWORD *)(v38 + 128) = 0;
          *(_QWORD *)(v38 + 112) = 0;
          v39 = *(_QWORD *)(v37 + 8 * v33);
          *(_QWORD *)(v37 + 8 * v33) = v38;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v40 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": using shortest-first discipline", 33);
        }
        else if (v34 == 2)
        {
          v41 = *v7;
          v42 = operator new();
          *(_DWORD *)(v42 + 8) = 2;
          *(_BYTE *)(v42 + 12) = 0;
          *(_QWORD *)v42 = &off_24F655710;
          *(_OWORD *)(v42 + 16) = 0u;
          *(_OWORD *)(v42 + 32) = 0u;
          *(_OWORD *)(v42 + 48) = 0u;
          v43 = *(_QWORD *)(v41 + 8 * v33);
          *(_QWORD *)(v41 + 8 * v33) = v42;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using LIFO discipline", 23);
        }
        else if (v34)
        {
          v45 = *v7;
          v46 = operator new();
          *(_DWORD *)(v46 + 8) = 1;
          *(_BYTE *)(v46 + 12) = 0;
          *(_QWORD *)v46 = &off_24F6557E0;
          *(_OWORD *)(v46 + 16) = 0u;
          *(_OWORD *)(v46 + 32) = 0u;
          *(_OWORD *)(v46 + 48) = 0u;
          v47 = *(_QWORD *)(v45 + 8 * v33);
          *(_QWORD *)(v45 + 8 * v33) = v46;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v48 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": using FIFO discipine", 22);
        }
        else
        {
          v35 = *(_QWORD *)(*v7 + 8 * v33);
          *(_QWORD *)(*v7 + 8 * v33) = 0;
          if (v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v36 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": using trivial discipline", 26);
        }
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
LABEL_68:
        if (v19 == ++v33)
          goto LABEL_69;
      }
    }
    v27 = operator new();
    *(_DWORD *)(v27 + 8) = 2;
    *(_BYTE *)(v27 + 12) = 0;
    *(_QWORD *)v27 = &off_24F655710;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    v28 = *v6;
    *v6 = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_19:
      LogMessage::~LogMessage((LogMessage *)v60);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_22BDD89D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v32;
  uint64_t v33;

  LogMessage::~LogMessage((LogMessage *)&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28)
    {
LABEL_10:
      MEMORY[0x22E2FB328](v28, 0x60C405BB7FD7CLL);
      if (!v29)
      {
LABEL_7:
        if (a18)
        {
          a19 = (uint64_t)a18;
          operator delete(a18);
        }
        fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a21);
        v32 = *v27;
        if (*v27)
        {
          *(_QWORD *)(v26 + 56) = v32;
          operator delete(v32);
        }
        std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        v33 = *v30;
        *v30 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        _Unwind_Resume(a1);
      }
LABEL_6:
      MEMORY[0x22E2FB328](v29, 0xC400A2AC0F1);
      goto LABEL_7;
    }
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (!v29)
    goto LABEL_7;
  goto LABEL_6;
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  float *v21;
  int v22;
  int *v23;
  __n128 v24;
  int *v25;
  int *v26;
  int *v27;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  float v35;
  float v36;

  *a5 = 1;
  *a6 = 1;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 2;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a3, 4 * v12);
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v32);
  while (1)
  {
    result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33)
        return result;
LABEL_11:
      v15 = v34;
      goto LABEL_12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    result = v32;
    if (v14)
      break;
    if (!v32)
      goto LABEL_11;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 24))();
LABEL_12:
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v15, &v29);
    v16 = (int)v15;
    while (1)
    {
      if (!(_QWORD)v29)
      {
        if (v31 >= (unint64_t)v30)
          goto LABEL_38;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v29 + 16))(v29))
        break;
      if ((_QWORD)v29)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = *((_QWORD *)&v29 + 1) + 16 * v31;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4
          || (v20 = fst::TropicalWeightTpl<float>::One(),
              v21 = (float *)(v17 + 8),
              fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(a4, (float *)(v17 + 8), (float *)v20)))
        {
          v22 = 1;
          goto LABEL_23;
        }
        if ((v19[v18] | 2) == 2)
        {
          v26 = fst::TropicalWeightTpl<float>::Zero();
          v36 = 0.0;
          v36 = *v21;
          v35 = 0.0;
          v35 = *(float *)v26;
          if (v36 == v35
            || (v27 = fst::TropicalWeightTpl<float>::One(),
                v36 = 0.0,
                v36 = *v21,
                v35 = 0.0,
                v35 = *(float *)v27,
                v36 == v35))
          {
            v22 = 2;
          }
          else
          {
            v22 = 3;
          }
LABEL_23:
          v19[v18] = v22;
        }
        *a5 = 0;
      }
      v23 = fst::TropicalWeightTpl<float>::Zero();
      v36 = 0.0;
      v36 = *(float *)(v17 + 8);
      v35 = 0.0;
      v35 = *(float *)v23;
      v24.n128_f32[0] = v36;
      if (v36 != v35)
      {
        v25 = fst::TropicalWeightTpl<float>::One();
        v36 = 0.0;
        v36 = *(float *)(v17 + 8);
        v35 = 0.0;
        v35 = *(float *)v25;
        v24.n128_f32[0] = v36;
        if (v36 != v35)
          *a6 = 0;
      }
      if ((_QWORD)v29)
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v29 + 32))(v29, v24);
      else
        ++v31;
    }
    if ((_QWORD)v29)
    {
      (*(void (**)(void))(*(_QWORD *)v29 + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (*((_QWORD *)&v30 + 1))
      --**((_DWORD **)&v30 + 1);
LABEL_40:
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    else
      ++v34;
  }
  if (v32)
    return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
  return result;
}

void sub_22BDD8ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  BOOL v8;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_24F6556A8;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v9[0] = a1 + 24;
  v9[1] = &v11;
  v10 = 0;
  fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2, (uint64_t)v9, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"TopOrderQueue: FST is not acyclic", 33);
    LogMessage::~LogMessage((LogMessage *)&v8);
    if (v7 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  v4 = v10;
  v10 = 0;
  if (v4)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v10, v4);
  return a1;
}

void sub_22BDD9088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void **v24;
  void *v26;
  void *v27;

  if (a14 < 0)
    operator delete(__p);
  if (a21)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v23, a21);
  v26 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v21 + 56) = v26;
    operator delete(v26);
  }
  v27 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t (**v52)();
  _QWORD v53[3];
  uint64_t v54[3];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  _BYTE *v58;
  char *v59;
  char *v60;

  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(a2);
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v47 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
    return;
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v53, 64);
  v55 = 0;
  v52 = &off_24F652F20;
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v46)
    v6 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v6 = (v47 + 1);
  if ((int)v6 <= (unint64_t)(v59 - v58))
  {
    if ((int)v6 < (unint64_t)(v59 - v58))
      v59 = &v58[(int)v6];
  }
  else
  {
    std::vector<unsigned char>::__append(&v58, (int)v6 - (v59 - v58), &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v49);
  if (v47 >= (int)v6)
    goto LABEL_102;
  v7 = v47;
  v45 = a3;
  do
  {
    v58[(int)v7] = 1;
    v8 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v8 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_QWORD *)(v8 + 40) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v7, v8 + 8);
    v48 = v8;
    std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v56, &v48);
    v9 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v10 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v10 = 1;
    do
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v9 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v9 + v57 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v59 - v58;
      if (v59 - v58 <= v12)
      {
        v6 = v12 + 1;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v59 = &v58[v6];
        }
        else
        {
          std::vector<unsigned char>::__append(&v58, v12 + 1 - v13, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v10 & 1) != 0)
      {
        v14 = v11[1];
        if (v14)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
          {
            v15 = v11[1];
            if (v15)
              v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
            else
LABEL_28:
              v16 = v11[2] + 16 * v11[5];
            v17 = *(int *)(v16 + 12);
            v18 = v58;
            v19 = v59 - v58;
            if (v59 - v58 <= v17)
            {
              v6 = (v17 + 1);
              if ((int)v6 <= v19)
              {
                if ((int)v6 < v19)
                  v59 = &v58[(int)v6];
              }
              else
              {
                std::vector<unsigned char>::__append(&v58, (int)v6 - v19, &fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,BOOL)::kDfsWhite);
                v17 = *(int *)(v16 + 12);
                v18 = v58;
              }
            }
            v25 = v18[v17];
            if (v25 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v27 = v11[1];
              if (v27)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
                v10 = 0;
              }
              else
              {
                v10 = 0;
                ++v11[5];
              }
            }
            else
            {
              if (v25 == 2)
              {
                v26 = v11[1];
                if (v26)
                  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
                else
                  ++v11[5];
              }
              else
              {
                v18[v17] = 1;
                v28 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v28 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
                  *(_QWORD *)(v28 + 48) = 0;
                }
                *(_DWORD *)v28 = *(_DWORD *)(v16 + 12);
                *(_OWORD *)(v28 + 24) = 0u;
                *(_QWORD *)(v28 + 40) = 0;
                *(_OWORD *)(v28 + 8) = 0u;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
                v48 = v28;
                std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v56, &v48);
              }
              v10 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v11[5] < v11[3])
        {
          goto LABEL_28;
        }
      }
      v58[v12] = 2;
      v20 = v11[1];
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      else
      {
        v21 = (_DWORD *)v11[4];
        if (v21)
          --*v21;
      }
      v11[6] = v55;
      v55 = v11;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
        v24 = *(_QWORD *)(v22 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        else
          ++*(_QWORD *)(v22 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
      }
LABEL_58:
      v9 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v7 == v47)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v29 = &v58[(int)v7];
      v30 = (int)v6 - (uint64_t)(int)v7;
      while (*v29++)
      {
        v7 = (v7 + 1);
        if (!--v30)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v46 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_72:
    if (v49)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49) & 1) != 0)
        continue;
      if (v49)
      {
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
        goto LABEL_78;
      }
    }
    else if (v51 >= v50)
    {
      continue;
    }
    v32 = v51;
LABEL_78:
    if (v32 != (_DWORD)v6)
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
      else
        ++v51;
      goto LABEL_72;
    }
    v33 = v59;
    if (v59 >= v60)
    {
      v35 = (unint64_t)v58;
      v36 = v59 - v58;
      v37 = v59 - v58 + 1;
      if (v37 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v38 = v60 - v58;
      if (2 * (v60 - v58) > (unint64_t)v37)
        v37 = 2 * v38;
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v39 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v40 = operator new(v39);
      else
        v40 = 0;
      v41 = &v40[v36];
      v42 = &v40[v36];
      *v42 = 0;
      v34 = v42 + 1;
      if (v33 != (char *)v35)
      {
        v43 = &v33[~v35];
        do
        {
          v44 = *--v33;
          (v43--)[(_QWORD)v40] = v44;
        }
        while (v33 != (char *)v35);
        v33 = v58;
        v41 = v40;
      }
      v58 = v41;
      v59 = v34;
      v60 = &v40[v39];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v59 = 0;
      v34 = v33 + 1;
    }
    v6 = (v6 + 1);
    v59 = v34;
    a3 = v45;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v52 = &off_24F652F88;
  v53[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v54);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v56);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
}

void sub_22BDD97E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(_QWORD *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  int **v6;
  void **v7;
  int *v8;
  int *v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v22;
  int *v23;
  _DWORD *v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int *v31;
  int v32;
  int v33;
  unint64_t v34;
  int *v35;
  _DWORD *v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int v44;
  char *v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __n128 v59;
  int v60;
  unint64_t v61;
  int **v62;
  int **v63;
  int *v64;
  int *v65;
  unint64_t v66;
  int *v67;
  int *v68;
  int *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  int *v75;
  int v76;
  int v77;
  unint64_t v78;
  int *v79;
  _DWORD *v80;
  int *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  int *v87;
  int v88;
  int v89;
  unint64_t v90;
  int *v91;
  _DWORD *v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int *v99;
  int v100;
  int *v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int **v107;
  unint64_t i;
  int *v109;
  int *v110;
  int *v111;
  unint64_t v112;
  int *v113;
  int *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  int *v120;
  int v121;
  int v122;
  unint64_t v123;
  int *v124;
  _DWORD *v125;
  int *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  int *v132;
  int v133;
  int v134;
  unint64_t v135;
  int *v136;
  _DWORD *v137;
  int *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  int *v144;
  int v145;
  char *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  int v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  float v167;
  BOOL v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v176;
  float v177;
  uint64_t v178;
  char v179;
  uint64_t result;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  void **v184;
  void **v185;
  void **v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  uint64_t v190;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) == -1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 56))(*a1, 4, 0);
    if (!result)
      return result;
    v181 = (char *)a1 + 140;
    goto LABEL_269;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v4 = a2;
  v5 = a1[1];
  v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2))
  {
    v185 = (void **)(a1 + 5);
    v7 = (void **)(a1 + 8);
    do
    {
      v8 = fst::TropicalWeightTpl<float>::Zero();
      v9 = v8;
      v10 = *(_QWORD *)(v5 + 16);
      v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(int **)v5;
        v14 = ((uint64_t)v11 - *(_QWORD *)v5) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5 + 16, v17);
          v11 = *v6;
          v13 = *(int **)v5;
        }
        else
        {
          v18 = 0;
        }
        v19 = (int *)&v18[4 * v14];
        *v19 = *v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)v5 = v19;
        *v6 = v12;
        *(_QWORD *)(v5 + 16) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = *v8;
        v12 = v11 + 1;
      }
      *v6 = v12;
      v21 = *fst::TropicalWeightTpl<float>::Zero();
      v23 = (int *)a1[6];
      v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        v25 = (int *)*v185;
        v26 = ((char *)v23 - (_BYTE *)*v185) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
LABEL_275:
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
          v25 = (int *)a1[5];
          v23 = (int *)a1[6];
        }
        else
        {
          v30 = 0;
        }
        v31 = (int *)&v30[4 * v26];
        *v31 = v21;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *--v23;
          *--v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      a1[6] = v24;
      v33 = *fst::TropicalWeightTpl<float>::Zero();
      v35 = (int *)a1[9];
      v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        v37 = (int *)*v7;
        v38 = ((char *)v35 - (_BYTE *)*v7) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v40 = v34 - (_QWORD)v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 10), v41);
          v37 = (int *)a1[8];
          v35 = (int *)a1[9];
        }
        else
        {
          v42 = 0;
        }
        v43 = (int *)&v42[4 * v38];
        *v43 = v33;
        v36 = v43 + 1;
        while (v35 != v37)
        {
          v44 = *--v35;
          *--v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
      v5 = a1[1];
      v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v45 = (char *)a1[14];
    v46 = (char *)a1[15];
    v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          v50 = v47 + 1;
          if ((v47 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v51 = *v48 - (_QWORD)v45;
          if (v51 >> 1 > v50)
            v50 = v51 >> 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
            v52 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v52);
            v45 = (char *)a1[14];
            v46 = (char *)a1[15];
          }
          else
          {
            v53 = 0;
          }
          v54 = &v53[4 * v47];
          *(_DWORD *)v54 = -1;
          v49 = v54 + 4;
          while (v46 != v45)
          {
            v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            v45 = (char *)a1[14];
          }
          else
          {
            v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)v46 = -1;
          v49 = v46 + 4;
        }
        a1[15] = v49;
        v47 = (v49 - v45) >> 2;
        v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(_QWORD *)a1[1] + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  v56 = a1[5];
  v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  v57 = a1[8];
  v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  *(_QWORD *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v4);
  v182 = (uint64_t)(a1 + 10);
  v183 = (uint64_t)(a1 + 7);
  v58 = a1 + 16;
  v181 = (char *)a1 + 140;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_265;
    v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v61 = v60;
    while (1)
    {
      v62 = (int **)a1[1];
      v63 = v62 + 1;
      if (v61 < v62[1] - *v62)
        break;
      v64 = fst::TropicalWeightTpl<float>::Zero();
      v65 = v64;
      v66 = (unint64_t)v62[2];
      v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        v69 = *v62;
        v70 = v67 - *v62;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v72 = v66 - (_QWORD)v69;
        if (v72 >> 1 > v71)
          v71 = v72 >> 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
          v73 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 2), v73);
          v67 = *v63;
          v69 = *v62;
        }
        else
        {
          v74 = 0;
        }
        v75 = (int *)&v74[4 * v70];
        *v75 = *v65;
        v68 = v75 + 1;
        while (v67 != v69)
        {
          v76 = *--v67;
          *--v75 = v76;
        }
        *v62 = v75;
        *v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v67 = *v64;
        v68 = v67 + 1;
      }
      *v63 = v68;
      v77 = *fst::TropicalWeightTpl<float>::Zero();
      v79 = (int *)a1[6];
      v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        v81 = (int *)*v184;
        v82 = ((char *)v79 - (_BYTE *)*v184) >> 2;
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v84 = v78 - (_QWORD)v81;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v85);
          v81 = (int *)a1[5];
          v79 = (int *)a1[6];
        }
        else
        {
          v86 = 0;
        }
        v87 = (int *)&v86[4 * v82];
        *v87 = v77;
        v80 = v87 + 1;
        while (v79 != v81)
        {
          v88 = *--v79;
          *--v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81)
          operator delete(v81);
      }
      else
      {
        *v79 = v77;
        v80 = v79 + 1;
      }
      a1[6] = v80;
      v89 = *fst::TropicalWeightTpl<float>::Zero();
      v91 = (int *)a1[9];
      v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        v93 = (int *)*v186;
        v94 = ((char *)v91 - (_BYTE *)*v186) >> 2;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62)
          goto LABEL_275;
        v96 = v90 - (_QWORD)v93;
        if (v96 >> 1 > v95)
          v95 = v96 >> 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
          v97 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v97);
          v93 = (int *)a1[8];
          v91 = (int *)a1[9];
        }
        else
        {
          v98 = 0;
        }
        v99 = (int *)&v98[4 * v94];
        *v99 = v89;
        v92 = v99 + 1;
        while (v91 != v93)
        {
          v100 = *--v91;
          *--v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *v91 = v89;
        v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 24))(&v190, *a1, v61);
      v101 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v187) = v190;
      HIDWORD(v190) = 0;
      HIDWORD(v190) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_265:
        ++*((_DWORD *)a1 + 34);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result)
          return result;
LABEL_269:
        *v181 = 1;
        return result;
      }
    }
    *(_QWORD *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    v102 = a1[8];
    v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *fst::TropicalWeightTpl<float>::Zero();
    v104 = *a1;
    v187 = 0u;
    v188 = 0u;
    v189 = 0;
    (*(void (**)(uint64_t, unint64_t, __int128 *))(*(_QWORD *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if ((_QWORD)v187)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 16))(v187) & 1) != 0)
          goto LABEL_257;
        if ((_QWORD)v187)
        {
          v105 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 24))(v187);
          goto LABEL_141;
        }
      }
      else if (v189 >= (unint64_t)v188)
      {
LABEL_257:
        v179 = 1;
        goto LABEL_259;
      }
      v105 = *((_QWORD *)&v187 + 1) + 16 * v189;
LABEL_141:
      v106 = a1[1];
      v107 = (int **)(v106 + 8);
      for (i = *(int *)(v105 + 12); i >= (uint64_t)(*(_QWORD *)(v106 + 8) - *(_QWORD *)v106) >> 2; i = *(int *)(v105 + 12))
      {
        v109 = fst::TropicalWeightTpl<float>::Zero();
        v110 = v109;
        v111 = *v107;
        v112 = *(_QWORD *)(v106 + 16);
        if ((unint64_t)*v107 >= v112)
        {
          v114 = *(int **)v106;
          v115 = ((uint64_t)v111 - *(_QWORD *)v106) >> 2;
          v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v117 = v112 - (_QWORD)v114;
          if (v117 >> 1 > v116)
            v116 = v117 >> 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
            v118 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v118 = v116;
          if (v118)
          {
            v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v106 + 16, v118);
            v111 = *v107;
            v114 = *(int **)v106;
          }
          else
          {
            v119 = 0;
          }
          v120 = (int *)&v119[4 * v115];
          *v120 = *v110;
          v113 = v120 + 1;
          while (v111 != v114)
          {
            v121 = *--v111;
            *--v120 = v121;
          }
          *(_QWORD *)v106 = v120;
          *v107 = v113;
          *(_QWORD *)(v106 + 16) = &v119[4 * v118];
          if (v114)
            operator delete(v114);
        }
        else
        {
          *v111 = *v109;
          v113 = v111 + 1;
        }
        *v107 = v113;
        v122 = *fst::TropicalWeightTpl<float>::Zero();
        v124 = (int *)a1[6];
        v123 = a1[7];
        if ((unint64_t)v124 >= v123)
        {
          v126 = (int *)*v184;
          v127 = ((char *)v124 - (_BYTE *)*v184) >> 2;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v129 = v123 - (_QWORD)v126;
          if (v129 >> 1 > v128)
            v128 = v129 >> 1;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
            v130 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
          {
            v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v130);
            v126 = (int *)a1[5];
            v124 = (int *)a1[6];
          }
          else
          {
            v131 = 0;
          }
          v132 = (int *)&v131[4 * v127];
          *v132 = v122;
          v125 = v132 + 1;
          while (v124 != v126)
          {
            v133 = *--v124;
            *--v132 = v133;
          }
          a1[5] = v132;
          a1[6] = v125;
          a1[7] = &v131[4 * v130];
          if (v126)
            operator delete(v126);
        }
        else
        {
          *v124 = v122;
          v125 = v124 + 1;
        }
        a1[6] = v125;
        v134 = *fst::TropicalWeightTpl<float>::Zero();
        v136 = (int *)a1[9];
        v135 = a1[10];
        if ((unint64_t)v136 >= v135)
        {
          v138 = (int *)*v186;
          v139 = ((char *)v136 - (_BYTE *)*v186) >> 2;
          v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v141 = v135 - (_QWORD)v138;
          if (v141 >> 1 > v140)
            v140 = v141 >> 1;
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
            v142 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v142 = v140;
          if (v142)
          {
            v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v142);
            v138 = (int *)a1[8];
            v136 = (int *)a1[9];
          }
          else
          {
            v143 = 0;
          }
          v144 = (int *)&v143[4 * v139];
          *v144 = v134;
          v137 = v144 + 1;
          while (v136 != v138)
          {
            v145 = *--v136;
            *--v144 = v145;
          }
          a1[8] = v144;
          a1[9] = v137;
          a1[10] = &v143[4 * v142];
          if (v138)
            operator delete(v138);
        }
        else
        {
          *v136 = v134;
          v137 = v136 + 1;
        }
        a1[9] = v137;
        BYTE4(v190) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 11), (_BYTE *)&v190 + 4);
        v106 = a1[1];
        v107 = (int **)(v106 + 8);
      }
      if (*((_BYTE *)a1 + 33))
      {
        v146 = (char *)a1[14];
        v147 = (char *)a1[15];
        v148 = (v147 - v146) >> 2;
        if (v148 <= (int)i)
        {
          do
          {
            if ((unint64_t)v147 >= *v58)
            {
              v151 = v148 + 1;
              if ((v148 + 1) >> 62)
                std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
              v152 = *v58 - (_QWORD)v146;
              if (v152 >> 1 > v151)
                v151 = v152 >> 1;
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
                v153 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v153 = v151;
              if (v153)
              {
                v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v153);
                v146 = (char *)a1[14];
                v147 = (char *)a1[15];
              }
              else
              {
                v154 = 0;
              }
              v155 = &v154[4 * v148];
              *(_DWORD *)v155 = -1;
              v150 = v155 + 4;
              while (v147 != v146)
              {
                v156 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              a1[14] = v155;
              a1[15] = v150;
              a1[16] = &v154[4 * v153];
              if (v146)
              {
                operator delete(v146);
                v146 = (char *)a1[14];
              }
              else
              {
                v146 = v155;
              }
            }
            else
            {
              *(_DWORD *)v147 = -1;
              v150 = v147 + 4;
            }
            a1[15] = v150;
            v148 = (v150 - v146) >> 2;
            v157 = *(_DWORD *)(v105 + 12);
            v147 = v150;
          }
          while (v148 <= v157);
          v149 = v157;
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
        else
        {
          v149 = (int)i;
        }
        if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
        {
          v158 = fst::TropicalWeightTpl<float>::Zero();
          v159 = *(int *)(v105 + 12);
          *(_DWORD *)(*(_QWORD *)a1[1] + 4 * v159) = *v158;
          v160 = a1[5];
          *(_DWORD *)(v160 + 4 * v159) = *fst::TropicalWeightTpl<float>::Zero();
          v161 = *(int *)(v105 + 12);
          i = (unint64_t)*v186;
          *(_DWORD *)(i + 4 * v161) = *fst::TropicalWeightTpl<float>::Zero();
          v162 = *(int *)(v105 + 12);
          *(_QWORD *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
          *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
      }
      v163 = *(_QWORD *)a1[1];
      v164 = a1[5];
      v165 = a1[8];
      if (v103 == -INFINITY || (v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
      {
        v167 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v168 = v166 == INFINITY || v103 == INFINITY;
        v169 = v103 + v166;
        v167 = v168 ? INFINITY : v169;
      }
      v170 = *(float *)(v163 + 4 * (int)i);
      if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
      {
        v171 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        v170 = *(float *)(v163 + 4 * (int)i);
      }
      else
      {
        v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
      }
      v172 = *((float *)a1 + 7);
      v173 = v171 + v172;
      v174 = v172 + v170;
      if (v170 > v173 || v171 > v174)
        break;
LABEL_254:
      if ((_QWORD)v187)
        (*(void (**)(_QWORD))(*(_QWORD *)v187 + 32))(v187);
      else
        ++v189;
    }
    v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      v176 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v176 >= v167)
    {
      v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      v177 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v177 >= v167)
    {
      v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      v178 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)) & 1) != 0)
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(_QWORD *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_254;
    }
    v179 = 0;
    *v181 = 1;
LABEL_259:
    result = v187;
    if ((_QWORD)v187)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 8))(v187);
    }
    else if (*((_QWORD *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_22BDDA77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ImplToMutableFst(a1, &v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *a1 = &off_24F6558F0;
  return a1;
}

void sub_22BDDA8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ImplToMutableFst(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    a1[1] = v3;
    a1[2] = v4;
    *a1 = off_24F655D00;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
  }
  *a1 = off_24F655BD8;
  return a1;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFst(_QWORD *a1)
{
  *a1 = off_24F655E28;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
}

float fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<S0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  float *v3;
  float result;

  v3 = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2);
  result = *v3;
  *a3 = *(_DWORD *)v3;
  return result;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 16);
  result[1] = *(_QWORD *)(a1 + 8);
  result[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *result = &off_24F6558F0;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (a1 != a2)
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>(a2, &v7);
    std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), &v7);
    v3 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  return a1;
}

unint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 80) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

float fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(v6, a2, (float *)&v8);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a3 & 4) != (a3 & 4 & a2))
    fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 16))(v2) & 0xEAFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x806A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && !*(_QWORD *)(v1 + 8))
  {
    v15 = *(_QWORD **)(a1 + 8);
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v15);
    result = (*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    v15[1] = (*((_DWORD *)v15 + 2) | result) & 4 | 0x956A5A950003;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = (uint64_t *)(a1 + 8);
    v5 = *(_QWORD *)(v3 + 40);
    v4 = *(_QWORD *)(v3 + 48);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
    std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100](v2, &v16);
    v6 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *v2;
    if (v5)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v10 = 0;
    v11 = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *v2;
    if (v4)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v13 = 0;
    result = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v12 + 48) = v13;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(*(_QWORD **)(v6[7] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v6[1] = v6[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[7] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 56), a2);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8 * a2) + 24), a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (a2)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  else
    v5 = 0;
  result = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (a2)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  else
    v5 = 0;
  result = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)operator new();
  *v6 = &off_24F655F90;
  v6[3] = 0;
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v7 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * a2);
  v6[2] = v7 + 8;
  *a3 = v6;
}

void sub_22BDDB280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEEC2B8ne180100IJESF_Li0EEESF_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22BDDB2D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEEC2B8ne180100IJESF_Li0EEESF_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F655AB8;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl((uint64_t)(a1 + 3));
  return a1;
}

void sub_22BDDB320(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F655AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F655AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &off_24F655BA8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(_QWORD *)a1 = &off_24F655B08;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x956A5A950003;
  return a1;
}

void sub_22BDDB434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &off_24F655B78;
  v2 = (_QWORD **)a1[8];
  if (v2 != (_QWORD **)a1[7])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[7];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[7];
    }
    while (v3 < (uint64_t)(a1[8] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl((uint64_t)a1);
}

void fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x22E2FB328);
}

void fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24F655BA8;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Write(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  BOOL v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write: No write stream method for ", 39);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  BOOL v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write: No write filename method for ", 41);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22BDDB68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22BDDB770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  void *__p[2];
  char v11;
  BOOL v12;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v12, (uint64_t)__p);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"TestProperties: stored FST properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (stored: props1, computed: props2)", 35);
    LogMessage::~LogMessage((LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_22BDDB8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  int *v27;
  int v28;
  int v29;
  unint64_t v30;
  int *v31;
  __n128 v32;
  int *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int *v37;
  int *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  v9 = v8;
  if (a4)
  {
    v10 = v8 & 0xFFFFFFFF0000 | (2 * v8) & 0xAAAAAAAA0000 | (v8 >> 1) & 0x555555550000 | 7;
    if ((a2 & ~v10) == 0)
    {
      if (a3)
        *a3 = v10;
      return v9;
    }
  }
  v9 = v8 & 7;
  v57 = 0;
  v58 = v9;
  v55 = 0;
  v56 = 0;
  v11 = a2 & 0xCF3C00000000;
  if ((a2 & 0xCF3C00000000) != 0)
  {
    v50 = (unint64_t)&v55;
    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = &v58;
    v53 = 0u;
    v54 = 0u;
    fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, (uint64_t *)&v50, 0);
    v12 = *((_QWORD *)&v54 + 1);
    *((_QWORD *)&v54 + 1) = 0;
    if (v12)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v54 + 8, v12);
    v13 = (void **)v54;
    *(_QWORD *)&v54 = 0;
    if (v13)
      std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v54, v13);
    v14 = *((_QWORD *)&v53 + 1);
    *((_QWORD *)&v53 + 1) = 0;
    if (v14)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v53 + 8, v14);
    v15 = v53;
    *(_QWORD *)&v53 = 0;
    if (v15)
      std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v53, v15);
    v9 = v58;
  }
  if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
    goto LABEL_104;
  v44 = a2 & 0xC0000;
  v45 = 0;
  v16 = 0x10425A810000;
  if ((a2 & 0xC0000) != 0)
    v16 = 0x10425A850000;
  v17 = v9 | v16;
  v43 = a2 & 0x300000;
  if ((a2 & 0x300000) != 0)
    v17 |= 0x100000uLL;
  if (v11)
    v17 |= 0x800000000000uLL;
  v58 = v17;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v45);
  v18 = 0;
LABEL_23:
  if (!v45)
  {
    if ((int)v47 >= v46)
      goto LABEL_96;
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45))
  {
    if (v45)
    {
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)v45 + 24))();
      goto LABEL_29;
    }
LABEL_28:
    v19 = v47;
LABEL_29:
    if (v44)
    {
      v20 = operator new();
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_DWORD *)(v20 + 32) = 1065353216;
      v21 = v49;
      v49 = (_QWORD *)v20;
      if (v21)
      {
        v22 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v21);
        MEMORY[0x22E2FB328](v22, 0x10A0C408EF24B1CLL);
      }
    }
    if (v43)
    {
      v23 = operator new();
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_DWORD *)(v23 + 32) = 1065353216;
      v24 = v48;
      v48 = (_QWORD *)v23;
      if (v24)
      {
        v25 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v24);
        MEMORY[0x22E2FB328](v25, 0x10A0C408EF24B1CLL);
      }
    }
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v19, &v50);
    v26 = 1;
    while ((_QWORD)v50)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v50 + 16))(v50))
      {
        if ((_QWORD)v50)
        {
          (*(void (**)(void))(*(_QWORD *)v50 + 8))();
          goto LABEL_83;
        }
LABEL_81:
        if (*((_QWORD *)&v51 + 1))
          --**((_DWORD **)&v51 + 1);
LABEL_83:
        if (v18 > 0)
          v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1, v19);
        v37 = fst::TropicalWeightTpl<float>::Zero();
        LODWORD(v50) = v59;
        HIDWORD(v59) = 0;
        HIDWORD(v59) = *v37;
        if (*(float *)&v59 == *((float *)&v59 + 1))
        {
          if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 32))(a1, v19, *(float *)&v59) != 1)
            v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        }
        else
        {
          v38 = fst::TropicalWeightTpl<float>::One();
          LODWORD(v50) = v59;
          HIDWORD(v59) = 0;
          HIDWORD(v59) = *v38;
          v39.n128_u32[0] = v59;
          if (*(float *)&v59 != *((float *)&v59 + 1))
            v58 = v58 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          ++v18;
        }
        if (v45)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v45 + 32))(v45, v39);
        else
          ++v47;
        goto LABEL_23;
      }
      if (!(_QWORD)v50)
        goto LABEL_41;
      v27 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v50 + 24))();
LABEL_42:
      if (v49 && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v49, v27))
        v58 = v58 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
      if (v48 && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v48, v27 + 1))
        v58 = v58 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
      v28 = *v27;
      v29 = *v27;
      if (*v27 != v27[1])
      {
        v58 = v58 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
        v29 = v27[1];
      }
      if (v28 | v29)
      {
        if (v28)
        {
          if (!v29)
            goto LABEL_58;
          goto LABEL_54;
        }
        v30 = v58;
      }
      else
      {
        v30 = v58 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
      }
      v58 = v30 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
      if (!v29)
      {
LABEL_58:
        v58 = v58 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
        if ((v26 & 1) != 0)
          goto LABEL_63;
        goto LABEL_59;
      }
LABEL_54:
      if ((v26 & 1) != 0)
        goto LABEL_63;
LABEL_59:
      if (v28 < (int)v11)
        v58 = v58 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
      if (v29 < SHIDWORD(v11))
        v58 = v58 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_63:
      v31 = fst::TropicalWeightTpl<float>::One();
      HIDWORD(v59) = 0;
      HIDWORD(v59) = v27[2];
      LODWORD(v59) = 0;
      LODWORD(v59) = *v31;
      v32.n128_u32[0] = HIDWORD(v59);
      if (*((float *)&v59 + 1) != *(float *)&v59)
      {
        v33 = fst::TropicalWeightTpl<float>::Zero();
        HIDWORD(v59) = 0;
        HIDWORD(v59) = v27[2];
        LODWORD(v59) = 0;
        LODWORD(v59) = *v33;
        v32.n128_u32[0] = HIDWORD(v59);
        if (*((float *)&v59 + 1) != *(float *)&v59)
        {
          v34 = v58;
          v35 = v58 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          v58 = v35;
          if ((v34 & 0x800000000000) != 0 && v55[(int)v19] == v55[v27[3]])
            v58 = v35 & 0xFFFF3FFDFFFFFFFFLL | 0x400000000000;
        }
      }
      v36 = v27[3];
      if (v36 <= (int)v19)
        v58 = v58 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
      if (v36 != (_DWORD)v19 + 1)
        v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      v11 = *(_QWORD *)v27;
      if (v49)
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v49, v27, v27);
      if (v48)
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v48, v27 + 1, v27 + 1);
      if ((_QWORD)v50)
      {
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v50 + 32))(v50, v32);
        v26 = 0;
      }
      else
      {
        v26 = 0;
        ++v52;
      }
    }
    if (v52 >= (unint64_t)v51)
      goto LABEL_81;
LABEL_41:
    v27 = (int *)(*((_QWORD *)&v50 + 1) + 16 * v52);
    goto LABEL_42;
  }
  if (v45)
    (*(void (**)(void))(*(_QWORD *)v45 + 8))();
LABEL_96:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != -1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
  }
  if (v48)
  {
    v40 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v48);
    MEMORY[0x22E2FB328](v40, 0x10A0C408EF24B1CLL);
  }
  if (v49)
  {
    v41 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v49);
    MEMORY[0x22E2FB328](v41, 0x10A0C408EF24B1CLL);
  }
  v9 = v58;
LABEL_104:
  if (a3)
    *a3 = v9 & 0xFFFFFFFF0000 | (2 * v9) & 0xAAAAAAAA0000 | (v9 >> 1) & 0x555555550000 | 7;
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  return v9;
}

void sub_22BDDC080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  uint64_t v10;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va1, 0);
  v9 = *(void **)(v7 - 128);
  if (v9)
  {
    *(_QWORD *)(v7 - 120) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char inited;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  char v42;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t (**v50)();
  _QWORD v51[3];
  uint64_t v52[3];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  _BYTE *v56;
  char *v57;
  char *v58;

  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit((uint64_t)a2, a1);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v45 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
    return;
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v51, 64);
  v53 = 0;
  v50 = &off_24F655F50;
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v44)
    v5 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1);
  else
    v5 = (v45 + 1);
  if ((int)v5 <= (unint64_t)(v57 - v56))
  {
    if ((int)v5 < (unint64_t)(v57 - v56))
      v57 = &v56[(int)v5];
  }
  else
  {
    std::vector<unsigned char>::__append(&v56, (int)v5 - (v57 - v56), &fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,BOOL)::kDfsWhite);
  }
  v47 = 0;
  v48 = 0;
  v49 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v47);
  if (v45 >= (int)v5)
    goto LABEL_97;
  v6 = v45;
  do
  {
    v56[(int)v6] = 1;
    v7 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v7 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v51, 1);
      *(_QWORD *)(v7 + 48) = 0;
    }
    *(_DWORD *)v7 = v6;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_QWORD *)(v7 + 40) = 0;
    *(_OWORD *)(v7 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v6, v7 + 8);
    v46 = v7;
    std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::push_back(v54, &v46);
    inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, v6, v6);
LABEL_16:
    v9 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v10 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v11 = *(int *)v10;
      v12 = v57 - v56;
      if (v57 - v56 <= v11)
      {
        v5 = v11 + 1;
        if (v11 + 1 <= v12)
        {
          if (v11 + 1 < v12)
            v57 = &v56[v5];
        }
        else
        {
          std::vector<unsigned char>::__append(&v56, v11 + 1 - v12, &fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v9 & 1) == 0)
        goto LABEL_33;
      v13 = v10[1];
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
          goto LABEL_33;
        v14 = v10[1];
        if (!v14)
          goto LABEL_29;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
LABEL_30:
        v16 = *(int *)(v15 + 12);
        v17 = v56;
        v18 = v57 - v56;
        if (v57 - v56 <= v16)
        {
          v5 = (v16 + 1);
          if ((int)v5 <= v18)
          {
            if ((int)v5 < v18)
              v57 = &v56[(int)v5];
          }
          else
          {
            std::vector<unsigned char>::__append(&v56, (int)v5 - v18, &fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,BOOL)::kDfsWhite);
            v16 = *(int *)(v15 + 12);
            v17 = v56;
          }
        }
        v25 = v17[v16];
        if (v25 == 1)
        {
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc((uint64_t)a2, v11, v15);
          v24 = v10[1];
          if (v24)
            goto LABEL_50;
LABEL_51:
          ++v10[5];
        }
        else
        {
          if (v25 != 2)
          {
            v17[v16] = 1;
            v26 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v26 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v51, 1);
              *(_QWORD *)(v26 + 48) = 0;
            }
            *(_DWORD *)v26 = *(_DWORD *)(v15 + 12);
            *(_OWORD *)(v26 + 24) = 0u;
            *(_QWORD *)(v26 + 40) = 0;
            *(_OWORD *)(v26 + 8) = 0u;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
            v46 = v26;
            std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::push_back(v54, &v46);
            inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, *(_DWORD *)(v15 + 12), v6);
            goto LABEL_16;
          }
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc((_QWORD **)a2, v11, v15);
          v24 = v10[1];
          if (!v24)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        }
      }
      else
      {
        if (v10[5] < v10[3])
        {
LABEL_29:
          v15 = v10[2] + 16 * v10[5];
          goto LABEL_30;
        }
LABEL_33:
        v56[v11] = 2;
        v19 = v10[1];
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          v20 = (_DWORD *)v10[4];
          if (v20)
            --*v20;
        }
        v10[6] = v53;
        v53 = v10;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v22 = *(_DWORD *)v21;
          v23 = *(_QWORD *)(v21 + 8);
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, v22);
          v24 = *(_QWORD *)(v21 + 8);
          if (v24)
            goto LABEL_50;
          ++*(_QWORD *)(v21 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v11, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v6 == v45)
      v6 = 0;
    else
      v6 = (v6 + 1);
    if ((int)v6 < (int)v5)
    {
      v27 = &v56[(int)v6];
      v28 = (int)v5 - (uint64_t)(int)v6;
      while (*v27++)
      {
        v6 = (v6 + 1);
        if (!--v28)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v44 || (_DWORD)v6 != (_DWORD)v5)
      continue;
LABEL_67:
    if (v47)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47) & 1) != 0)
        continue;
      if (v47)
      {
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
        goto LABEL_73;
      }
    }
    else if (v49 >= v48)
    {
      continue;
    }
    v30 = v49;
LABEL_73:
    if (v30 != (_DWORD)v5)
    {
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47);
      else
        ++v49;
      goto LABEL_67;
    }
    v31 = v57;
    if (v57 >= v58)
    {
      v33 = (unint64_t)v56;
      v34 = v57 - v56;
      v35 = v57 - v56 + 1;
      if (v35 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v36 = v58 - v56;
      if (2 * (v58 - v56) > (unint64_t)v35)
        v35 = 2 * v36;
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
        v37 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = operator new(v37);
      else
        v38 = 0;
      v39 = &v38[v34];
      v40 = &v38[v34];
      *v40 = 0;
      v32 = v40 + 1;
      if (v31 != (char *)v33)
      {
        v41 = &v31[~v33];
        do
        {
          v42 = *--v31;
          (v41--)[(_QWORD)v38] = v42;
        }
        while (v31 != (char *)v33);
        v31 = v56;
        v39 = v38;
      }
      v56 = v39;
      v57 = v32;
      v58 = &v38[v37];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v57 = 0;
      v32 = v31 + 1;
    }
    v5 = (v5 + 1);
    v57 = v32;
  }
  while ((v9 & 1) != 0 && (int)v6 < (int)v5);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v50 = &off_24F652F88;
  v51[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v52);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v54);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_22BDDC830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v4);
  v3 = 0;
  while (1)
  {
    while (!v4)
    {
      if (v6 >= v5)
        return v3;
      v3 = (v3 + 1);
LABEL_10:
      ++v6;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
      break;
    v3 = (v3 + 1);
    if (!v4)
      goto LABEL_10;
    (*(void (**)(void))(*(_QWORD *)v4 + 32))();
  }
  if (v4)
    (*(void (**)(void))(*(_QWORD *)v4 + 8))();
  return v3;
}

void sub_22BDDC9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F652F88;
  a1[1] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22BDDCD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  uint64_t v29;
  void *v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string __p[5];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)v32 = 0u;
  v6 = -1;
  v36 = 0;
  v37 = 0;
  v35 = -1;
  v35 = (*(int (**)(_QWORD *))(*a1 + 16))(a1);
  v36 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 56))(a1, 1, 0))
    v7 = 0;
  else
    v7 = *(_BYTE *)(a3 + 28) == 0;
  if (!v7)
  {
    v6 = 0;
LABEL_6:
    v8 = 0;
    v36 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)a1);
    goto LABEL_9;
  }
  v9 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v9[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 5) + 32))(__p, *((_QWORD *)v9 + 5), 0, 1, 16);
    v6 = v39;
    if (v39 != -1)
      goto LABEL_6;
  }
  v8 = 1;
LABEL_9:
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v11 = v10 | 3;
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v11, (uint64_t)&v30 + 4);
  v29 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(a1[1] + 64) - *(_QWORD *)(a1[1] + 56);
  v13 = v12 >> 3;
  if ((int)(v12 >> 3) < 1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v14 = 0;
    v15 = (v12 >> 3);
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 24))(&v30, a1, v14);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (_DWORD)v30;
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v14);
      std::ostream::write();
      v16 = *(_QWORD *)(*(_QWORD *)(a1[1] + 56) + 8 * v14);
      v17 = *(_QWORD *)(v16 + 24);
      v18 = *(_QWORD *)(v16 + 32);
      if (v17 == v18)
        v19 = 0;
      else
        v19 = *(_QWORD *)(v16 + 24);
      if (v17 != v18)
      {
        v20 = (v18 - v17) >> 4;
        if (v20 <= 1)
          v21 = 1;
        else
          v21 = v20;
        v22 = (_DWORD *)(v19 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v22;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v22[1];
          std::ostream::write();
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"VectorFst::Write: Write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_33:
    LogMessage::~LogMessage((LogMessage *)&v30);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_36;
  }
  if (!v8)
  {
    if (v36 == v13)
    {
      updated = 1;
      goto LABEL_36;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_33;
  }
  v36 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v11, (uint64_t)&v30 + 4, v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_36:
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  if (SHIBYTE(v32[0]) < 0)
    operator delete(v31[0]);
  return updated;
}

void sub_22BDDD208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  LogMessage::~LogMessage((LogMessage *)&a12);
  if (a31 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 144))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 144))(v23, a2);
  }
  return result;
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  _BYTE v26[16];
  _QWORD v27[17];
  __int128 __p;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x22E2FB1E4](v26);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    __p = 0u;
    v29 = 0u;
    v36 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v27, v17, &__p, 16);
    if (v27[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x22E2FB1F0](v26);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
    v19 = *(char *)(a3 + 23);
    if (v19 >= 0)
      v20 = a3;
    else
      v20 = *(_QWORD *)a3;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a3 + 23);
    else
      v21 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      v22 = *(char *)(a3 + 23);
      if (v22 >= 0)
        v20 = a3;
      else
        v20 = *(_QWORD *)a3;
      if (v22 >= 0)
        v21 = *(unsigned __int8 *)(a3 + 23);
      else
        v21 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x22E2FB1E4](v27, a2);
      v23 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v23[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5) + 32))(&__p, *((_QWORD *)v23 + 5), 0, 2, 16);
        if (v36 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x22E2FB1F0](v27);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      v24 = *(char *)(a3 + 23);
      if (v24 >= 0)
        v20 = a3;
      else
        v20 = *(_QWORD *)a3;
      if (v24 >= 0)
        v21 = *(unsigned __int8 *)(a3 + 23);
      else
        v21 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
  LogMessage::~LogMessage((LogMessage *)v27);
  if (SBYTE7(v29) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_22BDDD6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x22E2FB1F0](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type(void)::type;
}

void sub_22BDDD7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFile(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  int v6;
  const std::string::value_type *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  std::string __p;
  __int16 v17;
  char v18;
  char v19;
  char v20;
  BOOL v21;
  std::string v22;
  __int16 v23;
  char v24;
  char v25;
  char v26;
  _BYTE v27[384];
  _QWORD v28[20];

  v28[19] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    std::ofstream::basic_ofstream(&v22);
    if ((v27[*(_QWORD *)(v22.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage(&v21, (uint64_t)&__p);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write: Can't open file: ", 29);
      v6 = *(char *)(a2 + 23);
      if (v6 >= 0)
        v7 = (const std::string::value_type *)a2;
      else
        v7 = *(const std::string::value_type **)a2;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 23);
      else
        v8 = *(_QWORD *)(a2 + 8);
      goto LABEL_31;
    }
    v10 = FLAGS_fst_align;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v17 = 257;
    v18 = 1;
    v19 = v10;
    v20 = 0;
    v12 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a1 + 80))(a1, &v22, &__p);
    v13 = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v13 & 1) != 0)
        goto LABEL_23;
    }
    else if ((v12 & 1) != 0)
    {
LABEL_23:
      v11 = 1;
LABEL_34:
      v22.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
      *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words
                                + *(_QWORD *)(v22.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8]
                                                                                                  + 24);
      MEMORY[0x22E2FB1B4](&v22.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x22E2FB2D4](v28);
      return v11;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage(&v21, (uint64_t)&__p);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fst::Write failed: ", 19);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v7 = (const std::string::value_type *)a2;
    else
      v7 = *(const std::string::value_type **)a2;
    if (v14 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
LABEL_31:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    LogMessage::~LogMessage((LogMessage *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = 0;
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v9 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v22 = __p;
  v23 = 257;
  v24 = 1;
  v25 = v9;
  v26 = 0;
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)a1 + 80))(a1, MEMORY[0x24BEDB318], &v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_22BDDDAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22BDDDBB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F655AB8;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22BDDDBF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  void *__p[2];
  __int128 v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  *(_QWORD *)a1 = &off_24F655BA8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(_QWORD *)a1 = &off_24F655B08;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  std::string::operator=(v4, (const std::string *)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  if (v7)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *v5;
  *v5 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (v9)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_DWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 1, 0))
  {
    v11 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2);
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 56), v11);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 112))(a2, &v20);
  while (1)
  {
    if (!v20)
    {
      if ((int)v22 >= v21)
        goto LABEL_39;
LABEL_19:
      v12 = v22;
      goto LABEL_20;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20))
      break;
    if (!v20)
      goto LABEL_19;
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 24))();
LABEL_20:
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(&v19, a2, v12);
    **(_DWORD **)(*v6 + 8 * (int)v12) = v19;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v12);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v12) + 24), v13);
    v18 = 0;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 120))(a2, v12, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v18 >= (unint64_t)v17)
          goto LABEL_32;
LABEL_26:
        v14 = (char *)__p[1] + 16 * v18;
        goto LABEL_27;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]))
        break;
      if (!__p[0])
        goto LABEL_26;
      v14 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 24))();
LABEL_27:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v12), v14);
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
      else
        ++v18;
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (*((_QWORD *)&v17 + 1))
      --**((_DWORD **)&v17 + 1);
LABEL_34:
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
    else
      ++v22;
  }
  if (v20)
    (*(void (**)(void))(*(_QWORD *)v20 + 8))();
LABEL_39:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0xFFFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_22BDDDF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;

  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 16 * v6;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
}

void sub_22BDDE0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t result;

  if (!*a2)
    ++a1[1];
  if (!a2[1])
    ++a1[2];
  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&>(a1 + 3, (uint64_t)a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_DWORD *)(v3 + 8) = a2[2];
    *(_DWORD *)(v3 + 12) = a2[3];
    result = v3 + 16;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v7, v9);
  v11 = &v10[16 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[16 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  v17 = v11 + 16;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 += (v16 - v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_22BDDE254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2 || *(_QWORD *)(v2 + 8))
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,void>(a1, &v6);
    std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), &v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22BDDE358(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F655AB8;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22BDDE3A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8 * a2) + 32);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[7] + 8 * a2) + 24))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 16);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(_QWORD **)(a1[7] + 8 * a2), a3);
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int64x2_t v34;
  std::vector<int>::value_type __x;
  std::vector<int> v36;

  v4 = (uint64_t *)(a1 + 56);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v36, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v36.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v36.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v36.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 56);
    }
    while (v12 < (*(_QWORD *)(a1 + 64) - v11) >> 3);
  }
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(_QWORD *)(v16 + 24);
      v18 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v21 = v18 - v17;
      v20 = v18 == v17;
      if (v18 == v17)
        v22 = 0;
      else
        v22 = *(_QWORD *)(v16 + 24);
      if (v20)
      {
        v34 = *(int64x2_t *)(v16 + 8);
        v24 = 0;
        v31 = v21 >> 4;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = (int *)(v22 + 12);
        do
        {
          v26 = v36.__begin_[*v25];
          if (v26 == -1)
          {
            v28 = *(_QWORD *)(v25 - 3);
            v29.i64[0] = v28;
            v29.i64[1] = HIDWORD(v28);
            v19 = vaddq_s64(v19, vceqzq_s64(v29));
          }
          else
          {
            *v25 = v26;
            if (v23 != v24)
            {
              v27 = v22 + 16 * v24;
              *(_QWORD *)v27 = *(_QWORD *)(v25 - 3);
              *(_DWORD *)(v27 + 8) = *(v25 - 1);
              *(_DWORD *)(v27 + 12) = v26;
              v14 = *v4;
            }
            ++v24;
          }
          v16 = *(_QWORD *)(v14 + 8 * v15);
          ++v23;
          v30 = *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24);
          v25 += 4;
        }
        while (v23 < v30 >> 4);
        v34 = v19;
        v31 = v30 >> 4;
      }
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs((_QWORD *)v16, v31 - v24);
      v14 = *(_QWORD *)(a1 + 56);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v34;
    }
    while (v15 < (*(_QWORD *)(a1 + 64) - v14) >> 3);
  }
  v32 = *(int *)(a1 + 80);
  if ((_DWORD)v32 == -1)
  {
    v33 = v36.__begin_;
    if (!v36.__begin_)
      return;
  }
  else
  {
    v33 = v36.__begin_;
    *(_DWORD *)(a1 + 80) = v36.__begin_[v32];
  }
  v36.__end_ = v33;
  operator delete(v33);
}

void sub_22BDDE644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x22E2FB328);
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Done(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Next(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Position(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Reset(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Seek(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Flags()
{
  return 15;
}

int *fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  float *v14;
  float v15;
  int v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int *result;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v6 = (int *)(v5 + 16 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (v7 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 16 * v4;
  v13 = fst::TropicalWeightTpl<float>::Zero();
  v15 = *(float *)(v12 + 8);
  v14 = (float *)(v12 + 8);
  if (v15 != *(float *)v13 && *v14 != *(float *)fst::TropicalWeightTpl<float>::One())
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(*(_QWORD **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v16 = *(_DWORD *)a2;
  v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v16)
  {
    if (!v17)
    {
      v18 = *(unint64_t **)(a1 + 16);
      v19 = *v18;
LABEL_19:
      *v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v18 = *(unint64_t **)(a1 + 16);
    v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v18 = v20;
    if (!v17)
    {
      v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v18 = v19;
      goto LABEL_19;
    }
  }
  result = fst::TropicalWeightTpl<float>::Zero();
  if (*(float *)(a2 + 8) != *(float *)result)
  {
    result = fst::TropicalWeightTpl<float>::One();
    if (*(float *)(a2 + 8) != *(float *)result)
      **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= 0x30FC30007uLL;
  return result;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  void *v56[2];
  char v57;
  BOOL v58;
  __int16 v59;
  void *v60[3];
  void *__p[2];
  uint64_t v62;
  uint64_t *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_24F6555C8;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (uint64_t *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v9 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == -1)
  {
    v23 = operator new();
    *(_DWORD *)(v23 + 8) = 5;
    *(_BYTE *)(v23 + 12) = 0;
    *(_QWORD *)v23 = &off_24F655640;
    *(_QWORD *)(v23 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    v24 = *v6;
    *v6 = v23;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using state-order discipline", 39);
      goto LABEL_19;
    }
  }
  else if ((v9 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(v25, a2);
    v26 = *v6;
    *v6 = v25;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using top-order discipline", 37);
      goto LABEL_19;
    }
  }
  else
  {
    if ((v9 & 0x200000000) == 0)
    {
      v66 = 0;
      __p[0] = v8;
      __p[1] = 0;
      v62 = 0;
      v63 = &v66;
      v64 = 0u;
      v65 = 0u;
      fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a2, (uint64_t *)__p, 0);
      v10 = *(int **)(a1 + 48);
      v11 = *(int **)(a1 + 56);
      if (v10 != v11)
      {
        v12 = v10 + 1;
        if (v10 + 1 != v11)
        {
          v13 = *v10;
          v14 = v10 + 1;
          do
          {
            v16 = *v14++;
            v15 = v16;
            v17 = v13 < v16;
            if (v13 <= v16)
              v13 = v15;
            if (v17)
              v10 = v12;
            v12 = v14;
          }
          while (v14 != v11);
        }
      }
      v18 = *v10;
      v19 = *v10 + 1;
      std::vector<fst::QueueType>::vector(v60, v19);
      if (a3)
      {
        v20 = operator new();
        v21 = (_QWORD *)operator new();
        *v21 = a3;
        v21[1] = v20;
        v22 = v21;
      }
      else
      {
        v20 = 0;
        v22 = 0;
      }
      v59 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(a2, v8, (uint64_t)v60, v20, &v59, (_BYTE *)&v59 + 1);
      if (HIBYTE(v59))
      {
        v29 = operator new();
        *(_DWORD *)(v29 + 8) = 2;
        *(_BYTE *)(v29 + 12) = 0;
        *(_QWORD *)v29 = &off_24F655710;
        *(_OWORD *)(v29 + 16) = 0u;
        *(_OWORD *)(v29 + 32) = 0u;
        *(_OWORD *)(v29 + 48) = 0u;
        v30 = *v6;
        *v6 = v29;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        if (FLAGS_v < 2)
          goto LABEL_71;
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_40:
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
LABEL_71:
        if (v22)
          MEMORY[0x22E2FB328](v22, 0x60C405BB7FD7CLL);
        if (v20)
          MEMORY[0x22E2FB328](v20, 0xC400A2AC0F1);
        if (v60[0])
        {
          v60[1] = v60[0];
          operator delete(v60[0]);
        }
        v51 = *((_QWORD *)&v65 + 1);
        *((_QWORD *)&v65 + 1) = 0;
        if (v51)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v65 + 8, v51);
        v52 = (void **)v65;
        *(_QWORD *)&v65 = 0;
        if (v52)
          std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)&v65, v52);
        v53 = *((_QWORD *)&v64 + 1);
        *((_QWORD *)&v64 + 1) = 0;
        if (v53)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v64 + 8, v53);
        v54 = v64;
        *(_QWORD *)&v64 = 0;
        if (v54)
          std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v64, v54);
        return a1;
      }
      if ((_BYTE)v59)
      {
        v31 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v31, (uint64_t)v8);
        v32 = *v6;
        *v6 = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (FLAGS_v < 2)
          goto LABEL_71;
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_40;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        LogMessage::LogMessage(&v58, (uint64_t)v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
      }
      std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)v7, v19);
      if (v18 < 0)
      {
LABEL_69:
        v49 = operator new();
        *(_DWORD *)(v49 + 8) = 6;
        *(_BYTE *)(v49 + 12) = 0;
        *(_QWORD *)v49 = &off_24F655848;
        *(_QWORD *)(v49 + 16) = v7;
        *(_QWORD *)(v49 + 24) = v8;
        *(_QWORD *)(v49 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v49 + 48) = 0;
        *(_QWORD *)(v49 + 56) = 0;
        *(_QWORD *)(v49 + 40) = 0;
        v50 = *v6;
        *v6 = v49;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        goto LABEL_71;
      }
      v33 = 0;
      while (1)
      {
        v34 = *((_DWORD *)v60[0] + v33);
        if (v34 == 3)
        {
          v37 = *v7;
          v38 = operator new();
          *(_DWORD *)(v38 + 8) = 3;
          *(_BYTE *)(v38 + 12) = 0;
          *(_QWORD *)v38 = &off_24F655778;
          *(_OWORD *)(v38 + 16) = *v22;
          *(_OWORD *)(v38 + 32) = 0u;
          *(_OWORD *)(v38 + 48) = 0u;
          *(_OWORD *)(v38 + 64) = 0u;
          *(_OWORD *)(v38 + 80) = 0u;
          *(_OWORD *)(v38 + 92) = 0u;
          *(_QWORD *)(v38 + 120) = 0;
          *(_QWORD *)(v38 + 128) = 0;
          *(_QWORD *)(v38 + 112) = 0;
          v39 = *(_QWORD *)(v37 + 8 * v33);
          *(_QWORD *)(v37 + 8 * v33) = v38;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v40 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": using shortest-first discipline", 33);
        }
        else if (v34 == 2)
        {
          v41 = *v7;
          v42 = operator new();
          *(_DWORD *)(v42 + 8) = 2;
          *(_BYTE *)(v42 + 12) = 0;
          *(_QWORD *)v42 = &off_24F655710;
          *(_OWORD *)(v42 + 16) = 0u;
          *(_OWORD *)(v42 + 32) = 0u;
          *(_OWORD *)(v42 + 48) = 0u;
          v43 = *(_QWORD *)(v41 + 8 * v33);
          *(_QWORD *)(v41 + 8 * v33) = v42;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using LIFO discipline", 23);
        }
        else if (v34)
        {
          v45 = *v7;
          v46 = operator new();
          *(_DWORD *)(v46 + 8) = 1;
          *(_BYTE *)(v46 + 12) = 0;
          *(_QWORD *)v46 = &off_24F6557E0;
          *(_OWORD *)(v46 + 16) = 0u;
          *(_OWORD *)(v46 + 32) = 0u;
          *(_OWORD *)(v46 + 48) = 0u;
          v47 = *(_QWORD *)(v45 + 8 * v33);
          *(_QWORD *)(v45 + 8 * v33) = v46;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v48 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": using FIFO discipine", 22);
        }
        else
        {
          v35 = *(_QWORD *)(*v7 + 8 * v33);
          *(_QWORD *)(*v7 + 8 * v33) = 0;
          if (v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          if (FLAGS_v < 3)
            goto LABEL_68;
          std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
          LogMessage::LogMessage(&v58, (uint64_t)v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: SCC #", 16);
          v36 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": using trivial discipline", 26);
        }
        LogMessage::~LogMessage((LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
LABEL_68:
        if (v19 == ++v33)
          goto LABEL_69;
      }
    }
    v27 = operator new();
    *(_DWORD *)(v27 + 8) = 2;
    *(_BYTE *)(v27 + 12) = 0;
    *(_QWORD *)v27 = &off_24F655710;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    v28 = *v6;
    *v6 = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v60, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_19:
      LogMessage::~LogMessage((LogMessage *)v60);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_22BDDF240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v32;
  uint64_t v33;

  LogMessage::~LogMessage((LogMessage *)&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28)
    {
LABEL_10:
      MEMORY[0x22E2FB328](v28, 0x60C405BB7FD7CLL);
      if (!v29)
      {
LABEL_7:
        if (a18)
        {
          a19 = (uint64_t)a18;
          operator delete(a18);
        }
        fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a21);
        v32 = *v27;
        if (*v27)
        {
          *(_QWORD *)(v26 + 56) = v32;
          operator delete(v32);
        }
        std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        v33 = *v30;
        *v30 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        _Unwind_Resume(a1);
      }
LABEL_6:
      MEMORY[0x22E2FB328](v29, 0xC400A2AC0F1);
      goto LABEL_7;
    }
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (!v29)
    goto LABEL_7;
  goto LABEL_6;
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  float *v21;
  int v22;
  int *v23;
  __n128 v24;
  int *v25;
  int *v26;
  int *v27;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  float v35;
  float v36;

  *a5 = 1;
  *a6 = 1;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 2;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a3, 4 * v12);
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v32);
  while (1)
  {
    result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33)
        return result;
LABEL_11:
      v15 = v34;
      goto LABEL_12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    result = v32;
    if (v14)
      break;
    if (!v32)
      goto LABEL_11;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 24))();
LABEL_12:
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v15, &v29);
    v16 = (int)v15;
    while (1)
    {
      if (!(_QWORD)v29)
      {
        if (v31 >= (unint64_t)v30)
          goto LABEL_38;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v29 + 16))(v29))
        break;
      if ((_QWORD)v29)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = *((_QWORD *)&v29 + 1) + 16 * v31;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4
          || (v20 = fst::TropicalWeightTpl<float>::One(),
              v21 = (float *)(v17 + 8),
              fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(a4, (float *)(v17 + 8), (float *)v20)))
        {
          v22 = 1;
          goto LABEL_23;
        }
        if ((v19[v18] | 2) == 2)
        {
          v26 = fst::TropicalWeightTpl<float>::Zero();
          v36 = 0.0;
          v36 = *v21;
          v35 = 0.0;
          v35 = *(float *)v26;
          if (v36 == v35
            || (v27 = fst::TropicalWeightTpl<float>::One(),
                v36 = 0.0,
                v36 = *v21,
                v35 = 0.0,
                v35 = *(float *)v27,
                v36 == v35))
          {
            v22 = 2;
          }
          else
          {
            v22 = 3;
          }
LABEL_23:
          v19[v18] = v22;
        }
        *a5 = 0;
      }
      v23 = fst::TropicalWeightTpl<float>::Zero();
      v36 = 0.0;
      v36 = *(float *)(v17 + 8);
      v35 = 0.0;
      v35 = *(float *)v23;
      v24.n128_f32[0] = v36;
      if (v36 != v35)
      {
        v25 = fst::TropicalWeightTpl<float>::One();
        v36 = 0.0;
        v36 = *(float *)(v17 + 8);
        v35 = 0.0;
        v35 = *(float *)v25;
        v24.n128_f32[0] = v36;
        if (v36 != v35)
          *a6 = 0;
      }
      if ((_QWORD)v29)
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v29 + 32))(v29, v24);
      else
        ++v31;
    }
    if ((_QWORD)v29)
    {
      (*(void (**)(void))(*(_QWORD *)v29 + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (*((_QWORD *)&v30 + 1))
      --**((_DWORD **)&v30 + 1);
LABEL_40:
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    else
      ++v34;
  }
  if (v32)
    return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
  return result;
}

void sub_22BDDF734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  BOOL v8;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_24F6556A8;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v9[0] = a1 + 24;
  v9[1] = &v11;
  v10 = 0;
  fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a2, (uint64_t)v9, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"TopOrderQueue: FST is not acyclic", 33);
    LogMessage::~LogMessage((LogMessage *)&v8);
    if (v7 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  v4 = v10;
  v10 = 0;
  if (v4)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)&v10, v4);
  return a1;
}

void sub_22BDDF8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void **v24;
  void *v26;
  void *v27;

  if (a14 < 0)
    operator delete(__p);
  if (a21)
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v23, a21);
  v26 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v21 + 56) = v26;
    operator delete(v26);
  }
  v27 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t (**v52)();
  _QWORD v53[3];
  uint64_t v54[3];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  _BYTE *v58;
  char *v59;
  char *v60;

  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(a2);
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v47 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
    return;
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(v53, 64);
  v55 = 0;
  v52 = &off_24F655F50;
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v46)
    v6 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1);
  else
    v6 = (v47 + 1);
  if ((int)v6 <= (unint64_t)(v59 - v58))
  {
    if ((int)v6 < (unint64_t)(v59 - v58))
      v59 = &v58[(int)v6];
  }
  else
  {
    std::vector<unsigned char>::__append(&v58, (int)v6 - (v59 - v58), fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,BOOL)::kDfsWhite);
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v49);
  if (v47 >= (int)v6)
    goto LABEL_102;
  v7 = v47;
  v45 = a3;
  do
  {
    v58[(int)v7] = 1;
    v8 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v8 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_QWORD *)(v8 + 40) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v7, v8 + 8);
    v48 = v8;
    std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::push_back(v56, &v48);
    v9 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v10 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v10 = 1;
    do
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v9 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v9 + v57 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v59 - v58;
      if (v59 - v58 <= v12)
      {
        v6 = v12 + 1;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v59 = &v58[v6];
        }
        else
        {
          std::vector<unsigned char>::__append(&v58, v12 + 1 - v13, fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,BOOL)::kDfsWhite);
        }
      }
      if ((v10 & 1) != 0)
      {
        v14 = v11[1];
        if (v14)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
          {
            v15 = v11[1];
            if (v15)
              v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
            else
LABEL_28:
              v16 = v11[2] + 16 * v11[5];
            v17 = *(int *)(v16 + 12);
            v18 = v58;
            v19 = v59 - v58;
            if (v59 - v58 <= v17)
            {
              v6 = (v17 + 1);
              if ((int)v6 <= v19)
              {
                if ((int)v6 < v19)
                  v59 = &v58[(int)v6];
              }
              else
              {
                std::vector<unsigned char>::__append(&v58, (int)v6 - v19, fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,BOOL)::kDfsWhite);
                v17 = *(int *)(v16 + 12);
                v18 = v58;
              }
            }
            v25 = v18[v17];
            if (v25 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v27 = v11[1];
              if (v27)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
                v10 = 0;
              }
              else
              {
                v10 = 0;
                ++v11[5];
              }
            }
            else
            {
              if (v25 == 2)
              {
                v26 = v11[1];
                if (v26)
                  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
                else
                  ++v11[5];
              }
              else
              {
                v18[v17] = 1;
                v28 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v28 = fst::internal::MemoryArenaImpl<56ul>::Allocate(v53, 1);
                  *(_QWORD *)(v28 + 48) = 0;
                }
                *(_DWORD *)v28 = *(_DWORD *)(v16 + 12);
                *(_OWORD *)(v28 + 24) = 0u;
                *(_QWORD *)(v28 + 40) = 0;
                *(_OWORD *)(v28 + 8) = 0u;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
                v48 = v28;
                std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::push_back(v56, &v48);
              }
              v10 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v11[5] < v11[3])
        {
          goto LABEL_28;
        }
      }
      v58[v12] = 2;
      v20 = v11[1];
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      else
      {
        v21 = (_DWORD *)v11[4];
        if (v21)
          --*v21;
      }
      v11[6] = v55;
      v55 = v11;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
        v24 = *(_QWORD *)(v22 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        else
          ++*(_QWORD *)(v22 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v12);
      }
LABEL_58:
      v9 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v7 == v47)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v29 = &v58[(int)v7];
      v30 = (int)v6 - (uint64_t)(int)v7;
      while (*v29++)
      {
        v7 = (v7 + 1);
        if (!--v30)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v46 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_72:
    if (v49)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49) & 1) != 0)
        continue;
      if (v49)
      {
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
        goto LABEL_78;
      }
    }
    else if (v51 >= v50)
    {
      continue;
    }
    v32 = v51;
LABEL_78:
    if (v32 != (_DWORD)v6)
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
      else
        ++v51;
      goto LABEL_72;
    }
    v33 = v59;
    if (v59 >= v60)
    {
      v35 = (unint64_t)v58;
      v36 = v59 - v58;
      v37 = v59 - v58 + 1;
      if (v37 < 0)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v38 = v60 - v58;
      if (2 * (v60 - v58) > (unint64_t)v37)
        v37 = 2 * v38;
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v39 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v40 = operator new(v39);
      else
        v40 = 0;
      v41 = &v40[v36];
      v42 = &v40[v36];
      *v42 = 0;
      v34 = v42 + 1;
      if (v33 != (char *)v35)
      {
        v43 = &v33[~v35];
        do
        {
          v44 = *--v33;
          (v43--)[(_QWORD)v40] = v44;
        }
        while (v33 != (char *)v35);
        v33 = v58;
        v41 = v40;
      }
      v58 = v41;
      v59 = v34;
      v60 = &v40[v39];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v59 = 0;
      v34 = v33 + 1;
    }
    v6 = (v6 + 1);
    v59 = v34;
    a3 = v45;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t **)a2);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v52 = &off_24F652F88;
  v53[0] = &off_24F652FB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(v54);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](v56);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
}

void sub_22BDE0050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__list_imp<std::unique_ptr<char []>>::clear((uint64_t *)va);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ShortestDistance(_QWORD *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  int **v6;
  void **v7;
  int *v8;
  int *v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v22;
  int *v23;
  _DWORD *v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int *v31;
  int v32;
  int v33;
  unint64_t v34;
  int *v35;
  _DWORD *v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int v44;
  char *v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __n128 v59;
  int v60;
  unint64_t v61;
  int **v62;
  int **v63;
  int *v64;
  int *v65;
  unint64_t v66;
  int *v67;
  int *v68;
  int *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  int *v75;
  int v76;
  int v77;
  unint64_t v78;
  int *v79;
  _DWORD *v80;
  int *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  int *v87;
  int v88;
  int v89;
  unint64_t v90;
  int *v91;
  _DWORD *v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int *v99;
  int v100;
  int *v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int **v107;
  unint64_t i;
  int *v109;
  int *v110;
  int *v111;
  unint64_t v112;
  int *v113;
  int *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  int *v120;
  int v121;
  int v122;
  unint64_t v123;
  int *v124;
  _DWORD *v125;
  int *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  int *v132;
  int v133;
  int v134;
  unint64_t v135;
  int *v136;
  _DWORD *v137;
  int *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  int *v144;
  int v145;
  char *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  int v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  float v167;
  BOOL v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v176;
  float v177;
  uint64_t v178;
  char v179;
  uint64_t result;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  void **v184;
  void **v185;
  void **v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  uint64_t v190;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) == -1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 56))(*a1, 4, 0);
    if (!result)
      return result;
    v181 = (char *)a1 + 140;
    goto LABEL_269;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v4 = a2;
  v5 = a1[1];
  v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2))
  {
    v185 = (void **)(a1 + 5);
    v7 = (void **)(a1 + 8);
    do
    {
      v8 = fst::TropicalWeightTpl<float>::Zero();
      v9 = v8;
      v10 = *(_QWORD *)(v5 + 16);
      v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(int **)v5;
        v14 = ((uint64_t)v11 - *(_QWORD *)v5) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5 + 16, v17);
          v11 = *v6;
          v13 = *(int **)v5;
        }
        else
        {
          v18 = 0;
        }
        v19 = (int *)&v18[4 * v14];
        *v19 = *v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)v5 = v19;
        *v6 = v12;
        *(_QWORD *)(v5 + 16) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = *v8;
        v12 = v11 + 1;
      }
      *v6 = v12;
      v21 = *fst::TropicalWeightTpl<float>::Zero();
      v23 = (int *)a1[6];
      v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        v25 = (int *)*v185;
        v26 = ((char *)v23 - (_BYTE *)*v185) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
LABEL_275:
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
          v25 = (int *)a1[5];
          v23 = (int *)a1[6];
        }
        else
        {
          v30 = 0;
        }
        v31 = (int *)&v30[4 * v26];
        *v31 = v21;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *--v23;
          *--v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      a1[6] = v24;
      v33 = *fst::TropicalWeightTpl<float>::Zero();
      v35 = (int *)a1[9];
      v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        v37 = (int *)*v7;
        v38 = ((char *)v35 - (_BYTE *)*v7) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v40 = v34 - (_QWORD)v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 10), v41);
          v37 = (int *)a1[8];
          v35 = (int *)a1[9];
        }
        else
        {
          v42 = 0;
        }
        v43 = (int *)&v42[4 * v38];
        *v43 = v33;
        v36 = v43 + 1;
        while (v35 != v37)
        {
          v44 = *--v35;
          *--v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
      v5 = a1[1];
      v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v45 = (char *)a1[14];
    v46 = (char *)a1[15];
    v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          v50 = v47 + 1;
          if ((v47 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v51 = *v48 - (_QWORD)v45;
          if (v51 >> 1 > v50)
            v50 = v51 >> 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
            v52 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v52);
            v45 = (char *)a1[14];
            v46 = (char *)a1[15];
          }
          else
          {
            v53 = 0;
          }
          v54 = &v53[4 * v47];
          *(_DWORD *)v54 = -1;
          v49 = v54 + 4;
          while (v46 != v45)
          {
            v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            v45 = (char *)a1[14];
          }
          else
          {
            v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)v46 = -1;
          v49 = v46 + 4;
        }
        a1[15] = v49;
        v47 = (v49 - v45) >> 2;
        v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(_QWORD *)a1[1] + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  v56 = a1[5];
  v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  v57 = a1[8];
  v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  *(_QWORD *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v4);
  v182 = (uint64_t)(a1 + 10);
  v183 = (uint64_t)(a1 + 7);
  v58 = a1 + 16;
  v181 = (char *)a1 + 140;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_265;
    v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v61 = v60;
    while (1)
    {
      v62 = (int **)a1[1];
      v63 = v62 + 1;
      if (v61 < v62[1] - *v62)
        break;
      v64 = fst::TropicalWeightTpl<float>::Zero();
      v65 = v64;
      v66 = (unint64_t)v62[2];
      v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        v69 = *v62;
        v70 = v67 - *v62;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v72 = v66 - (_QWORD)v69;
        if (v72 >> 1 > v71)
          v71 = v72 >> 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
          v73 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 2), v73);
          v67 = *v63;
          v69 = *v62;
        }
        else
        {
          v74 = 0;
        }
        v75 = (int *)&v74[4 * v70];
        *v75 = *v65;
        v68 = v75 + 1;
        while (v67 != v69)
        {
          v76 = *--v67;
          *--v75 = v76;
        }
        *v62 = v75;
        *v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v67 = *v64;
        v68 = v67 + 1;
      }
      *v63 = v68;
      v77 = *fst::TropicalWeightTpl<float>::Zero();
      v79 = (int *)a1[6];
      v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        v81 = (int *)*v184;
        v82 = ((char *)v79 - (_BYTE *)*v184) >> 2;
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v84 = v78 - (_QWORD)v81;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v85);
          v81 = (int *)a1[5];
          v79 = (int *)a1[6];
        }
        else
        {
          v86 = 0;
        }
        v87 = (int *)&v86[4 * v82];
        *v87 = v77;
        v80 = v87 + 1;
        while (v79 != v81)
        {
          v88 = *--v79;
          *--v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81)
          operator delete(v81);
      }
      else
      {
        *v79 = v77;
        v80 = v79 + 1;
      }
      a1[6] = v80;
      v89 = *fst::TropicalWeightTpl<float>::Zero();
      v91 = (int *)a1[9];
      v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        v93 = (int *)*v186;
        v94 = ((char *)v91 - (_BYTE *)*v186) >> 2;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62)
          goto LABEL_275;
        v96 = v90 - (_QWORD)v93;
        if (v96 >> 1 > v95)
          v95 = v96 >> 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
          v97 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v97);
          v93 = (int *)a1[8];
          v91 = (int *)a1[9];
        }
        else
        {
          v98 = 0;
        }
        v99 = (int *)&v98[4 * v94];
        *v99 = v89;
        v92 = v99 + 1;
        while (v91 != v93)
        {
          v100 = *--v91;
          *--v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *v91 = v89;
        v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 24))(&v190, *a1, v61);
      v101 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v187) = v190;
      HIDWORD(v190) = 0;
      HIDWORD(v190) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_265:
        ++*((_DWORD *)a1 + 34);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result)
          return result;
LABEL_269:
        *v181 = 1;
        return result;
      }
    }
    *(_QWORD *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    v102 = a1[8];
    v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *fst::TropicalWeightTpl<float>::Zero();
    v104 = *a1;
    v187 = 0u;
    v188 = 0u;
    v189 = 0;
    (*(void (**)(uint64_t, unint64_t, __int128 *))(*(_QWORD *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if ((_QWORD)v187)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 16))(v187) & 1) != 0)
          goto LABEL_257;
        if ((_QWORD)v187)
        {
          v105 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 24))(v187);
          goto LABEL_141;
        }
      }
      else if (v189 >= (unint64_t)v188)
      {
LABEL_257:
        v179 = 1;
        goto LABEL_259;
      }
      v105 = *((_QWORD *)&v187 + 1) + 16 * v189;
LABEL_141:
      v106 = a1[1];
      v107 = (int **)(v106 + 8);
      for (i = *(int *)(v105 + 12); i >= (uint64_t)(*(_QWORD *)(v106 + 8) - *(_QWORD *)v106) >> 2; i = *(int *)(v105 + 12))
      {
        v109 = fst::TropicalWeightTpl<float>::Zero();
        v110 = v109;
        v111 = *v107;
        v112 = *(_QWORD *)(v106 + 16);
        if ((unint64_t)*v107 >= v112)
        {
          v114 = *(int **)v106;
          v115 = ((uint64_t)v111 - *(_QWORD *)v106) >> 2;
          v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v117 = v112 - (_QWORD)v114;
          if (v117 >> 1 > v116)
            v116 = v117 >> 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
            v118 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v118 = v116;
          if (v118)
          {
            v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v106 + 16, v118);
            v111 = *v107;
            v114 = *(int **)v106;
          }
          else
          {
            v119 = 0;
          }
          v120 = (int *)&v119[4 * v115];
          *v120 = *v110;
          v113 = v120 + 1;
          while (v111 != v114)
          {
            v121 = *--v111;
            *--v120 = v121;
          }
          *(_QWORD *)v106 = v120;
          *v107 = v113;
          *(_QWORD *)(v106 + 16) = &v119[4 * v118];
          if (v114)
            operator delete(v114);
        }
        else
        {
          *v111 = *v109;
          v113 = v111 + 1;
        }
        *v107 = v113;
        v122 = *fst::TropicalWeightTpl<float>::Zero();
        v124 = (int *)a1[6];
        v123 = a1[7];
        if ((unint64_t)v124 >= v123)
        {
          v126 = (int *)*v184;
          v127 = ((char *)v124 - (_BYTE *)*v184) >> 2;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v129 = v123 - (_QWORD)v126;
          if (v129 >> 1 > v128)
            v128 = v129 >> 1;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
            v130 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
          {
            v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v130);
            v126 = (int *)a1[5];
            v124 = (int *)a1[6];
          }
          else
          {
            v131 = 0;
          }
          v132 = (int *)&v131[4 * v127];
          *v132 = v122;
          v125 = v132 + 1;
          while (v124 != v126)
          {
            v133 = *--v124;
            *--v132 = v133;
          }
          a1[5] = v132;
          a1[6] = v125;
          a1[7] = &v131[4 * v130];
          if (v126)
            operator delete(v126);
        }
        else
        {
          *v124 = v122;
          v125 = v124 + 1;
        }
        a1[6] = v125;
        v134 = *fst::TropicalWeightTpl<float>::Zero();
        v136 = (int *)a1[9];
        v135 = a1[10];
        if ((unint64_t)v136 >= v135)
        {
          v138 = (int *)*v186;
          v139 = ((char *)v136 - (_BYTE *)*v186) >> 2;
          v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v141 = v135 - (_QWORD)v138;
          if (v141 >> 1 > v140)
            v140 = v141 >> 1;
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
            v142 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v142 = v140;
          if (v142)
          {
            v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v142);
            v138 = (int *)a1[8];
            v136 = (int *)a1[9];
          }
          else
          {
            v143 = 0;
          }
          v144 = (int *)&v143[4 * v139];
          *v144 = v134;
          v137 = v144 + 1;
          while (v136 != v138)
          {
            v145 = *--v136;
            *--v144 = v145;
          }
          a1[8] = v144;
          a1[9] = v137;
          a1[10] = &v143[4 * v142];
          if (v138)
            operator delete(v138);
        }
        else
        {
          *v136 = v134;
          v137 = v136 + 1;
        }
        a1[9] = v137;
        BYTE4(v190) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 11), (_BYTE *)&v190 + 4);
        v106 = a1[1];
        v107 = (int **)(v106 + 8);
      }
      if (*((_BYTE *)a1 + 33))
      {
        v146 = (char *)a1[14];
        v147 = (char *)a1[15];
        v148 = (v147 - v146) >> 2;
        if (v148 <= (int)i)
        {
          do
          {
            if ((unint64_t)v147 >= *v58)
            {
              v151 = v148 + 1;
              if ((v148 + 1) >> 62)
                std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
              v152 = *v58 - (_QWORD)v146;
              if (v152 >> 1 > v151)
                v151 = v152 >> 1;
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
                v153 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v153 = v151;
              if (v153)
              {
                v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v153);
                v146 = (char *)a1[14];
                v147 = (char *)a1[15];
              }
              else
              {
                v154 = 0;
              }
              v155 = &v154[4 * v148];
              *(_DWORD *)v155 = -1;
              v150 = v155 + 4;
              while (v147 != v146)
              {
                v156 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              a1[14] = v155;
              a1[15] = v150;
              a1[16] = &v154[4 * v153];
              if (v146)
              {
                operator delete(v146);
                v146 = (char *)a1[14];
              }
              else
              {
                v146 = v155;
              }
            }
            else
            {
              *(_DWORD *)v147 = -1;
              v150 = v147 + 4;
            }
            a1[15] = v150;
            v148 = (v150 - v146) >> 2;
            v157 = *(_DWORD *)(v105 + 12);
            v147 = v150;
          }
          while (v148 <= v157);
          v149 = v157;
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
        else
        {
          v149 = (int)i;
        }
        if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
        {
          v158 = fst::TropicalWeightTpl<float>::Zero();
          v159 = *(int *)(v105 + 12);
          *(_DWORD *)(*(_QWORD *)a1[1] + 4 * v159) = *v158;
          v160 = a1[5];
          *(_DWORD *)(v160 + 4 * v159) = *fst::TropicalWeightTpl<float>::Zero();
          v161 = *(int *)(v105 + 12);
          i = (unint64_t)*v186;
          *(_DWORD *)(i + 4 * v161) = *fst::TropicalWeightTpl<float>::Zero();
          v162 = *(int *)(v105 + 12);
          *(_QWORD *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
          *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
      }
      v163 = *(_QWORD *)a1[1];
      v164 = a1[5];
      v165 = a1[8];
      if (v103 == -INFINITY || (v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
      {
        v167 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v168 = v166 == INFINITY || v103 == INFINITY;
        v169 = v103 + v166;
        v167 = v168 ? INFINITY : v169;
      }
      v170 = *(float *)(v163 + 4 * (int)i);
      if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
      {
        v171 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        v170 = *(float *)(v163 + 4 * (int)i);
      }
      else
      {
        v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
      }
      v172 = *((float *)a1 + 7);
      v173 = v171 + v172;
      v174 = v172 + v170;
      if (v170 > v173 || v171 > v174)
        break;
LABEL_254:
      if ((_QWORD)v187)
        (*(void (**)(_QWORD))(*(_QWORD *)v187 + 32))(v187);
      else
        ++v189;
    }
    v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      v176 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v176 >= v167)
    {
      v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      v177 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v177 >= v167)
    {
      v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      v178 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)) & 1) != 0)
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(_QWORD *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_254;
    }
    v179 = 0;
    *v181 = 1;
LABEL_259:
    result = v187;
    if ((_QWORD)v187)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 8))(v187);
    }
    else if (*((_QWORD *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_22BDE0FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::TropicalWeightTpl<float>>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22BDE11C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 72);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if (fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *(_DWORD *)(v6 + 4 * v8), *a2))
      {
        break;
      }
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      v6 = *(_QWORD *)(a1 + 72);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v8);
}

BOOL fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  int *v7;
  float v8;
  uint64_t v9;
  int *v10;
  float v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  int *v15;
  float v16;
  uint64_t v17;
  int *v18;
  float v19;
  float v20;
  BOOL v21;
  float v23;
  float v24;

  v5 = a2;
  v6 = **a1;
  if (a2 >= (unint64_t)(((*a1)[1] - v6) >> 2))
    v7 = fst::TropicalWeightTpl<float>::Zero();
  else
    v7 = (int *)(v6 + 4 * a2);
  v8 = *(float *)v7;
  v9 = *a1[1];
  if (v5 >= (a1[1][1] - v9) >> 2)
    v10 = fst::TropicalWeightTpl<float>::Zero();
  else
    v10 = (int *)(v9 + 4 * v5);
  if (v8 == -INFINITY || (v11 = *(float *)v10, *(float *)v10 >= -INFINITY) && *(float *)v10 <= -INFINITY)
  {
    v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v13 = v11 == INFINITY || v8 == INFINITY;
    v12 = v8 + v11;
    if (v13)
      v12 = INFINITY;
  }
  v24 = v12;
  v14 = **a1;
  if (a3 >= (unint64_t)(((*a1)[1] - v14) >> 2))
    v15 = fst::TropicalWeightTpl<float>::Zero();
  else
    v15 = (int *)(v14 + 4 * a3);
  v16 = *(float *)v15;
  v17 = *a1[1];
  if (a3 >= (unint64_t)((a1[1][1] - v17) >> 2))
    v18 = fst::TropicalWeightTpl<float>::Zero();
  else
    v18 = (int *)(v17 + 4 * a3);
  if (v16 == -INFINITY || (v19 = *(float *)v18, *(float *)v18 >= -INFINITY) && *(float *)v18 <= -INFINITY)
  {
    v20 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v21 = v19 == INFINITY || v16 == INFINITY;
    v20 = v16 + v19;
    if (v21)
      v20 = INFINITY;
  }
  v23 = v20;
  return fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)(a1 + 2), &v24, &v23);
}

BOOL fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Heapify(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  while (1)
  {
    v4 = (2 * (_DWORD)a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 96)
      || !(result = fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v4), *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)a2))))
    {
      v4 = a2;
    }
    v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 96))
    {
      result = fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v5), *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v4));
      if (result)
        v4 = v5;
      else
        v4 = v4;
    }
    if ((_DWORD)v4 == (_DWORD)a2)
      break;
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(int *)(v6 + 4 * (int)a2);
    v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    v9 = *(_QWORD *)(v3 + 24);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    v10 = *(_QWORD *)(v3 + 72);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

_QWORD *fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[35];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  a1[35] = 0;
  v5 = (void *)a1[32];
  if (v5)
    operator delete(v5);
  std::deque<int>::~deque[abi:ne180100](a1 + 26);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 20));
  v6 = (void *)a1[16];
  if (v6)
  {
    a1[17] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[13];
  if (v7)
    operator delete(v7);
  v8 = (void *)a1[10];
  if (v8)
  {
    a1[11] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t fst::AutoQueue<int>::~AutoQueue(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = &off_24F6555C8;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToMutableFst(a1, &v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *a1 = &off_24F653050;
  return a1;
}

void sub_22BDE1664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,(void *)0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  int v25;
  int v26;
  float v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  int v31;
  float v32;
  _BYTE *v33;
  int *v34;
  _BYTE *v35;
  size_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  _QWORD v41[2];
  std::__shared_weak_count *v42;
  void *v43;
  void *v44;
  _BYTE v45[12];
  char v46;
  uint64_t v47;
  uint64_t v48;
  void *__p;
  void *v50;
  uint64_t v51;
  int v52;
  float v53;
  uint64_t v54[2];
  std::__shared_weak_count *v55;

  v8 = *(_DWORD *)(a4 + 24);
  if (v8 == 1)
  {
    v43 = 0;
    v44 = 0;
    *(_QWORD *)v45 = 0;
    LODWORD(v54[0]) = 0;
    if (fst::internal::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (int **)a3, (uint64_t *)a4, v54, (__n128 **)&v43))fst::internal::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v43, LODWORD(v54[0]));
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 4, 4);
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
  }
  else if (v8 >= 1)
  {
    if (*(_BYTE *)(a4 + 29)
      || (fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (_QWORD *)a3, a4), v9 = *(int **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 4)|| *(float *)v9 < -INFINITY|| *(float *)v9 > -INFINITY)
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(v54);
      fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, v54, 1);
      v10 = *(float *)fst::TropicalWeightTpl<float>::Zero();
      v53 = v10;
      v11 = **(_QWORD **)(v54[1] + 56);
      v12 = *(_QWORD *)(v11 + 24);
      v13 = *(_QWORD *)(v11 + 32);
      if (v12 == v13)
        v14 = 0;
      else
        v14 = *(_QWORD *)(v11 + 24);
      if (v12 != v13)
      {
        v15 = (v13 - v12) >> 4;
        if (v15 <= 1)
          v16 = 1;
        else
          v16 = v15;
        v17 = (float *)(v14 + 12);
        v18 = v17;
        do
        {
          v19 = *(int *)v18;
          v18 += 4;
          v20 = v19 - 1;
          if (v19 - 1 < (unint64_t)((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2))
          {
            v21 = *(v17 - 1);
            if (v21 == -INFINITY || (v22 = *(float *)(*(_QWORD *)a3 + 4 * v20), v22 >= -INFINITY) && v22 <= -INFINITY)
            {
              v23 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
            }
            else
            {
              v24 = v22 == INFINITY || v21 == INFINITY;
              v23 = v21 + v22;
              if (v24)
                v23 = INFINITY;
            }
            if (v10 == -INFINITY || v23 >= -INFINITY && v23 <= -INFINITY)
            {
              v10 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
            }
            else if (v10 >= v23)
            {
              v10 = v23;
            }
            v53 = v10;
          }
          v17 = v18;
          --v16;
        }
        while (v16);
      }
      std::vector<fst::TropicalWeightTpl<float>>::insert(a3, *(int **)a3, (int *)&v53);
      if (*(_BYTE *)(a4 + 28))
      {
        __p = 0;
        v50 = 0;
        v51 = 0;
        v25 = *(_DWORD *)(a4 + 16);
        LOBYTE(v43) = FLAGS_fst_default_cache_gc;
        v44 = (void *)FLAGS_fst_default_cache_gc_limit;
        *(_DWORD *)v45 = v25;
        *(_QWORD *)&v45[4] = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>((uint64_t)v41, (uint64_t)v54, a3, (uint64_t)&__p, (uint64_t)&v43);
        v26 = *(_DWORD *)(a4 + 24);
        v27 = *(float *)(a4 + 16);
        v40 = *(_DWORD *)(a4 + 32);
        fst::internal::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v41, a2, (uint64_t *)&__p, v26, (float *)&v40, *(_DWORD *)(a4 + 36), v27);
        v41[0] = off_24F656600;
        v28 = v42;
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if (__p)
        {
          v50 = __p;
          operator delete(__p);
        }
      }
      else
      {
        v31 = *(_DWORD *)(a4 + 24);
        v32 = *(float *)(a4 + 16);
        v52 = *(_DWORD *)(a4 + 32);
        fst::internal::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v54, a2, (uint64_t *)a3, v31, (float *)&v52, *(_DWORD *)(a4 + 36), v32);
      }
      v34 = *(int **)a3;
      v33 = *(_BYTE **)(a3 + 8);
      v35 = (_BYTE *)(*(_QWORD *)a3 + 4);
      if (v35 != v33)
      {
        v36 = ((v33 - (_BYTE *)v34) & 0xFFFFFFFFFFFFFFFCLL) - 4;
        memmove(*(void **)a3, v35, v36);
        v34 = (int *)((char *)v34 + v36);
      }
      *(_QWORD *)(a3 + 8) = v34;
      v54[0] = (uint64_t)off_24F655E28;
      v37 = v55;
      if (v55)
      {
        v38 = (unint64_t *)&v55->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 4, 4);
    }
  }
}

void sub_22BDE1A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100](v21 + 8);
  if (__p)
    operator delete(__p);
  *(_QWORD *)(v22 - 104) = off_24F655E28;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100](v22 - 96);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, int **a2, uint64_t *a3, _DWORD *a4, __n128 **a5)
{
  uint64_t v8;
  float v9;
  int *v10;
  int *v11;
  unint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  int v22;
  unint64_t v23;
  __n128 *v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __n128 *v33;
  int *v34;
  int *v35;
  unint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  int *v46;
  char *v47;
  int v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __n128 *v60;
  float v61;
  int *v62;
  float v63;
  BOOL v64;
  __n128 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int *v70;
  unint64_t v71;
  int *v72;
  int *v73;
  int *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  int *v80;
  int v81;
  unint64_t v82;
  __n128 *v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __n128 *v91;
  __n128 *v92;
  int *v93;
  unint64_t v94;
  float v95;
  float v96;
  BOOL v97;
  float v98;
  float v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *i;
  char v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  float v116;
  float v117;
  void *__p[3];
  _QWORD v119[2];

  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == -1)
    return 1;
  memset(__p, 0, sizeof(__p));
  v8 = *a3;
  v110 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v110 == -1)
    v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v9 = *(float *)fst::TropicalWeightTpl<float>::Zero();
  a2[1] = *a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 56))(*(_QWORD *)(v8 + 16));
  for (i = a3; (int)v110 > (unint64_t)(a2[1] - *a2); a5[1] = v25)
  {
    v10 = fst::TropicalWeightTpl<float>::Zero();
    v11 = v10;
    v13 = a2[1];
    v12 = (unint64_t)a2[2];
    if ((unint64_t)v13 >= v12)
    {
      v15 = *a2;
      v16 = v13 - *a2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_182;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v19);
        v15 = *a2;
        v13 = a2[1];
      }
      else
      {
        v20 = 0;
      }
      v21 = (int *)&v20[4 * v16];
      *v21 = *v11;
      v14 = v21 + 1;
      while (v13 != v15)
      {
        v22 = *--v13;
        *--v21 = v22;
      }
      *a2 = v21;
      a2[1] = v14;
      a2[2] = (int *)&v20[4 * v19];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v13 = *v10;
      v14 = v13 + 1;
    }
    a2[1] = v14;
    LOBYTE(v113) = 0;
    std::vector<BOOL>::push_back((uint64_t)__p, &v113);
    v24 = a5[1];
    v23 = (unint64_t)a5[2];
    if ((unint64_t)v24 >= v23)
    {
      v26 = v24 - *a5;
      if ((unint64_t)(v26 + 1) >> 60)
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      v27 = v23 - (_QWORD)*a5;
      v28 = v27 >> 3;
      if (v27 >> 3 <= (unint64_t)(v26 + 1))
        v28 = v26 + 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a5 + 2), v29);
      else
        v30 = 0;
      v31 = &v30[16 * v26];
      *(_OWORD *)v31 = xmmword_22BDF36F0;
      v25 = (__n128 *)(v31 + 16);
      v33 = *a5;
      v32 = (char *)a5[1];
      if (v32 != (char *)*a5)
      {
        do
        {
          *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
          v31 -= 16;
          v32 -= 16;
        }
        while (v32 != (char *)v33);
        v32 = (char *)*a5;
      }
      *a5 = (__n128 *)v31;
      a5[1] = v25;
      a5[2] = (__n128 *)&v30[16 * v29];
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v24 = (__n128)xmmword_22BDF36F0;
      v25 = v24 + 1;
    }
  }
  v34 = fst::TropicalWeightTpl<float>::One();
  v35 = v34;
  v36 = (unint64_t)a2[2];
  v112 = (uint64_t)(a2 + 2);
  v37 = a2[1];
  if ((unint64_t)v37 >= v36)
  {
    v40 = *a2;
    v41 = v37 - *a2;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 62)
LABEL_182:
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v43 = v36 - (_QWORD)v40;
    if (v43 >> 1 > v42)
      v42 = v43 >> 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v112, v44);
      v40 = *a2;
      v37 = a2[1];
    }
    else
    {
      v45 = 0;
    }
    v46 = (int *)&v45[4 * v41];
    v47 = &v45[4 * v44];
    *v46 = *v35;
    v38 = v46 + 1;
    while (v37 != v40)
    {
      v48 = *--v37;
      *--v46 = v48;
    }
    *a2 = v46;
    a2[1] = v38;
    a2[2] = (int *)v47;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v37 = *v34;
    v38 = v37 + 1;
  }
  a2[1] = v38;
  v49 = (unint64_t)a5[2];
  v50 = a5[1];
  if ((unint64_t)v50 >= v49)
  {
    v52 = v50 - *a5;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v53 = v49 - (_QWORD)*a5;
    v54 = v53 >> 3;
    if (v53 >> 3 <= (unint64_t)(v52 + 1))
      v54 = v52 + 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v54;
    if (v55)
      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a5 + 2), v55);
    else
      v56 = 0;
    v57 = &v56[16 * v52];
    v58 = &v56[16 * v55];
    *(_OWORD *)v57 = xmmword_22BDF36F0;
    v51 = (__n128 *)(v57 + 16);
    v60 = *a5;
    v59 = (char *)a5[1];
    if (v59 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v57 - 1) = *((_OWORD *)v59 - 1);
        v57 -= 16;
        v59 -= 16;
      }
      while (v59 != (char *)v60);
      v59 = (char *)*a5;
    }
    *a5 = (__n128 *)v57;
    a5[1] = v51;
    a5[2] = (__n128 *)v58;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *v50 = (__n128)xmmword_22BDF36F0;
    v51 = v50 + 1;
  }
  a5[1] = v51;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 16) + 24))(*(_QWORD *)(v8 + 16), v110);
  LOBYTE(v113) = 1;
  std::vector<BOOL>::push_back((uint64_t)__p, &v113);
  v108 = 0;
LABEL_72:
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 48))(*(_QWORD *)(v8 + 16)) & 1) != 0
    || (v111 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 16))(*(_QWORD *)(v8 + 16)),
        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 32))(*(_QWORD *)(v8 + 16)),
        *(_QWORD *)((char *)__p[0] + (((unint64_t)(int)v111 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v111),
        v61 = *(float *)&(*a2)[(int)v111],
        ((*((_BYTE *)i + 30) != 0) & v108) == 1)
    && (v116 = v9,
        v117 = v61,
        fst::internal::FirstPathSelect<int,fst::TropicalWeightTpl<float>,fst::AutoQueue<int>>::operator()((uint64_t)&v113, v111, &v117, &v116)))
  {
    v39 = 1;
    goto LABEL_177;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(v119, a1, v111);
  v62 = fst::TropicalWeightTpl<float>::Zero();
  LODWORD(v113) = v119[0];
  HIDWORD(v119[0]) = 0;
  HIDWORD(v119[0]) = *v62;
  if (*(float *)v119 == *((float *)v119 + 1))
    goto LABEL_94;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 24))(&v113, a1, v111, *(float *)v119);
  if (v61 == -INFINITY || *(float *)&v113 >= -INFINITY && *(float *)&v113 <= -INFINITY)
  {
    v63 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v64 = *(float *)&v113 == INFINITY || v61 == INFINITY;
    v63 = v61 + *(float *)&v113;
    if (v64)
      v63 = INFINITY;
  }
  if (v9 == -INFINITY || v63 >= -INFINITY && v63 <= -INFINITY)
  {
    v63 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else if (v9 < v63)
  {
    v63 = v9;
  }
  *(float *)&v113 = v9;
  *((float *)v119 + 1) = v63;
  if (v9 != v63)
  {
    *a4 = v111;
    v9 = v63;
  }
  v39 = 0;
  v108 = 1;
  if (v9 != -INFINITY)
  {
LABEL_94:
    v115 = 0;
    v113 = 0u;
    v114 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v111, &v113);
    while (1)
    {
      if ((_QWORD)v113)
      {
        v66 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v113 + 16))(v113);
        v67 = v113;
        if ((v66 & 1) != 0)
        {
          v100 = 1;
LABEL_169:
          if (v67)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
            goto LABEL_174;
          }
LABEL_172:
          if (*((_QWORD *)&v114 + 1))
            --**((_DWORD **)&v114 + 1);
LABEL_174:
          if ((v100 & 1) == 0)
          {
            v39 = 0;
            break;
          }
          goto LABEL_72;
        }
        if ((_QWORD)v113)
        {
          v68 = (*(uint64_t (**)(void))(*(_QWORD *)v113 + 24))();
          goto LABEL_134;
        }
      }
      else if (v115 >= (unint64_t)v114)
      {
        v100 = 1;
        goto LABEL_172;
      }
      v68 = *((_QWORD *)&v113 + 1) + 16 * v115;
LABEL_134:
      while (1)
      {
        v93 = *a2;
        v94 = *(int *)(v68 + 12);
        if (v94 < a2[1] - *a2)
          break;
        v69 = fst::TropicalWeightTpl<float>::Zero();
        v70 = v69;
        v72 = a2[1];
        v71 = (unint64_t)a2[2];
        if ((unint64_t)v72 >= v71)
        {
          v74 = *a2;
          v75 = v72 - *a2;
          v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 62)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v77 = v71 - (_QWORD)v74;
          if (v77 >> 1 > v76)
            v76 = v77 >> 1;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
            v78 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (v78)
          {
            v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v112, v78);
            v74 = *a2;
            v72 = a2[1];
          }
          else
          {
            v79 = 0;
          }
          v80 = (int *)&v79[4 * v75];
          *v80 = *v70;
          v73 = v80 + 1;
          while (v72 != v74)
          {
            v81 = *--v72;
            *--v80 = v81;
          }
          *a2 = v80;
          a2[1] = v73;
          a2[2] = (int *)&v79[4 * v78];
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v72 = *v69;
          v73 = v72 + 1;
        }
        a2[1] = v73;
        BYTE4(v119[0]) = 0;
        std::vector<BOOL>::push_back((uint64_t)__p, (_BYTE *)v119 + 4);
        v83 = a5[1];
        v82 = (unint64_t)a5[2];
        if ((unint64_t)v83 >= v82)
        {
          v85 = v83 - *a5;
          if ((unint64_t)(v85 + 1) >> 60)
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          v86 = v82 - (_QWORD)*a5;
          v87 = v86 >> 3;
          if (v86 >> 3 <= (unint64_t)(v85 + 1))
            v87 = v85 + 1;
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
            v88 = 0xFFFFFFFFFFFFFFFLL;
          else
            v88 = v87;
          if (v88)
            v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a5 + 2), v88);
          else
            v89 = 0;
          v90 = &v89[16 * v85];
          v65 = (__n128)xmmword_22BDF36F0;
          *(_OWORD *)v90 = xmmword_22BDF36F0;
          v84 = (__n128 *)(v90 + 16);
          v92 = *a5;
          v91 = a5[1];
          if (v91 != *a5)
          {
            do
            {
              v65 = v91[-1];
              *((__n128 *)v90 - 1) = v65;
              v90 -= 16;
              --v91;
            }
            while (v91 != v92);
            v91 = *a5;
          }
          *a5 = (__n128 *)v90;
          a5[1] = v84;
          a5[2] = (__n128 *)&v89[16 * v88];
          if (v91)
            operator delete(v91);
        }
        else
        {
          v65 = (__n128)xmmword_22BDF36F0;
          *v83 = (__n128)xmmword_22BDF36F0;
          v84 = v83 + 1;
        }
        a5[1] = v84;
      }
      if (v61 == -INFINITY || (v95 = *(float *)(v68 + 8), v95 >= -INFINITY) && v95 <= -INFINITY)
      {
        v96 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v97 = v95 == INFINITY || v61 == INFINITY;
        v98 = v61 + v95;
        if (v97)
          v96 = INFINITY;
        else
          v96 = v98;
      }
      v65.n128_u32[0] = v93[v94];
      if (v65.n128_f32[0] == -INFINITY || v96 >= -INFINITY && v96 <= -INFINITY)
      {
        v65.n128_u32[0] = *fst::TropicalWeightTpl<float>::NoWeight();
      }
      else if (v65.n128_f32[0] >= v96)
      {
        v65.n128_f32[0] = v96;
      }
      HIDWORD(v119[0]) = 0;
      HIDWORD(v119[0]) = v93[v94];
      LODWORD(v119[0]) = v65.n128_u32[0];
      v65.n128_u32[0] = HIDWORD(v119[0]);
      if (*((float *)v119 + 1) != *(float *)v119)
      {
        v99 = *(float *)&v93[v94];
        if (v99 == -INFINITY || v96 >= -INFINITY && v96 <= -INFINITY)
        {
          v99 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else if (v99 >= v96)
        {
          v99 = v96;
        }
        v100 = 0;
        *(float *)&v93[v94] = v99;
        v67 = v113;
        if (v99 == -INFINITY)
          goto LABEL_169;
        if ((_QWORD)v113)
          v101 = (*(uint64_t (**)(void))(*(_QWORD *)v113 + 40))();
        else
          v101 = v115;
        v102 = *(int *)(v68 + 12);
        v103 = (uint64_t)&(*a5)[v102];
        *(_DWORD *)v103 = v111;
        *(_QWORD *)(v103 + 8) = v101;
        v104 = **(_QWORD **)(v8 + 16);
        if (((*(_QWORD *)((char *)__p[0] + ((v102 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v102) & 1) != 0)
        {
          (*(void (**)(void))(v104 + 40))();
        }
        else
        {
          (*(void (**)(void))(v104 + 24))();
          *(_QWORD *)((char *)__p[0] + (((unint64_t)*(int *)(v68 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v68 + 12);
        }
      }
      if ((_QWORD)v113)
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v113 + 32))(v113, v65);
      else
        ++v115;
    }
  }
LABEL_177:
  if (__p[0])
    operator delete(__p[0]);
  return v39;
}

void sub_22BDE2564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 264))(a2, v9);
  if ((_DWORD)a4 != -1)
  {
    v10 = -1;
    v11 = a4;
    v12 = -1;
    while (1)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
      if (v10 != -1)
        break;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v25, a1, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 160))(a2, v13, &v25);
LABEL_15:
      v10 = v11;
      v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      v12 = v13;
      if ((_DWORD)v11 == -1)
        goto LABEL_18;
    }
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v11, &v22);
    v14 = *(_QWORD *)(*a3 + 16 * v10 + 8);
    if ((_QWORD)v22)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v22 + 56))(v22, v14);
      if ((_QWORD)v22)
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v22 + 24))(v22);
        goto LABEL_11;
      }
      v14 = v24;
    }
    else
    {
      v24 = *(_QWORD *)(*a3 + 16 * v10 + 8);
    }
    v15 = *((_QWORD *)&v22 + 1) + 16 * v14;
LABEL_11:
    v19 = *(_QWORD *)v15;
    v20 = *(_DWORD *)(v15 + 8);
    v21 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v13, &v19);
    if ((_QWORD)v22)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v22 + 8))(v22);
    }
    else if (*((_QWORD *)&v23 + 1))
    {
      --**((_DWORD **)&v23 + 1);
    }
    goto LABEL_15;
  }
  v13 = 0xFFFFFFFFLL;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, v13);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 4, 4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  v17 = fst::ShortestPathProperties(v16, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, v17, 0xFFFFFFFF0007);
}

void sub_22BDE2888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<fst::TropicalWeightTpl<float>>::insert(uint64_t a1, int *a2, int *a3)
{
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  int *v14;
  int *v15;
  int v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL4 v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  void *__p;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v6 = *(int **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (uint64_t)a2 - *(_QWORD *)a1;
  v8 = v7 >> 2;
  v9 = (int *)(*(_QWORD *)a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v11 = a1 + 16;
  v10 = *(_QWORD *)(a1 + 16);
  if (v5 >= v10)
  {
    v17 = ((uint64_t)(v5 - (_QWORD)v6) >> 2) + 1;
    if (v17 >> 62)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v19 = v10 - (_QWORD)v6;
    if (v19 >> 1 > v17)
      v17 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v17;
    v35 = a1 + 16;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v20);
    else
      v21 = 0;
    v22 = &v21[4 * v8];
    __p = v21;
    v32 = v22;
    v33 = v22;
    v34 = &v21[4 * v20];
    if (v8 == v20)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v27 = 1;
        else
          v27 = v7 >> 1;
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11, v27);
        v22 = &v28[v27 & 0xFFFFFFFFFFFFFFFCLL];
        __p = v28;
        v32 = v22;
        v34 = &v28[4 * v29];
        if (v21)
          operator delete(v21);
      }
      else
      {
        v23 = v8 + 2;
        if (v8 >= -1)
          v23 = v8 + 1;
        v22 -= 4 * (v23 >> 1);
        v32 = v22;
      }
    }
    *(_DWORD *)v22 = *a3;
    v33 = v22 + 4;
    v9 = std::vector<fst::TropicalWeightTpl<float>>::__swap_out_circular_buffer((int **)a1, &__p, v9);
    if (v33 != v32)
      v33 += (v32 - v33 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (v9 == (int *)v5)
  {
    *v9 = *a3;
    *(_QWORD *)(a1 + 8) = v9 + 1;
  }
  else
  {
    v12 = v9 + 1;
    v13 = (_DWORD *)(v5 - 4);
    if (v5 < 4)
    {
      v15 = *(int **)(a1 + 8);
    }
    else
    {
      v14 = (int *)(v5 - 4);
      v15 = *(int **)(a1 + 8);
      do
      {
        v16 = *v14++;
        *v15++ = v16;
      }
      while ((unint64_t)v14 < v5);
    }
    *(_QWORD *)(a1 + 8) = v15;
    if ((int *)v5 != v12)
    {
      v24 = (uint64_t)(v5 - (_QWORD)v12) >> 2;
      do
        *v13-- = v6[v8 - 1 + v24--];
      while (v24 * 4);
    }
    v26 = v9 <= a3 && v15 > a3;
    *v9 = a3[v26];
  }
  return v9;
}

void sub_22BDE2AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::internal::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, float *a5, int a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  int *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  _DWORD *v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  char *v48;
  int *v49;
  int v50;
  int *v51;
  int *v52;
  uint64_t v53;
  float *v54;
  unint64_t v55;
  float v56;
  int *v57;
  float v58;
  float v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  float v74;
  int v75;
  float v76;
  BOOL v77;
  float v78;
  uint64_t v79;
  int v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  int v93;
  char *v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  int *v102;
  int v103;
  uint64_t v104;
  int v105;
  float v106;
  int *v107;
  float v108;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  int v123;
  char *v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  int *v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD v137[2];
  int v138;
  float v139;
  _QWORD v140[2];
  int v141;
  float v142;
  uint64_t v143;
  float v144;
  int v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  _QWORD v149[2];
  int v150;
  float v151;
  void *__p;
  char *v153;
  char *v154;
  float v155;
  int *v156;
  char *v157;
  char *v158;
  int v159;
  char v160;
  char *v161;
  char *v162;
  _QWORD v163[2];

  if (a4 < 1)
    return;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v13);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 264))(a2, v14);
  v161 = 0;
  v162 = 0;
  v163[0] = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == -1)
    goto LABEL_192;
  v17 = *a3;
  v16 = a3[1];
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) >= (unint64_t)((v16 - v17) >> 2))
    goto LABEL_192;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v19 = *a3;
  v20 = fst::TropicalWeightTpl<float>::Zero();
  LODWORD(v146) = 0;
  LODWORD(v146) = *(_DWORD *)(v19 + 4 * v18);
  LODWORD(v156) = 0;
  LODWORD(v156) = *v20;
  v15.n128_u32[0] = v146;
  if (*(float *)&v146 == *(float *)&v156)
    goto LABEL_192;
  v21 = fst::TropicalWeightTpl<float>::One();
  v22 = !fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v160, a5, (float *)v21);
  if (!a6)
    LOBYTE(v22) = 0;
  if (!v22)
  {
LABEL_192:
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 56))(a1, 4, 0, v15))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 4, 4);
    goto LABEL_10;
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, v23);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  v159 = *fst::TropicalWeightTpl<float>::One();
  (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 160))(a2, v24, &v159);
  if ((int)v24 >= (unint64_t)((v162 - v161) >> 3))
  {
    do
    {
      v25 = *fst::TropicalWeightTpl<float>::Zero();
      v26 = v162;
      if ((unint64_t)v162 >= v163[0])
      {
        v28 = (v162 - v161) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v30 = v163[0] - (_QWORD)v161;
        if ((uint64_t)(v163[0] - (_QWORD)v161) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v163, v31);
        v34 = &v33[8 * v28];
        *(_DWORD *)v34 = -1;
        *((_DWORD *)v34 + 1) = v25;
        v35 = v161;
        v36 = v162;
        v37 = v34;
        while (v36 != v35)
        {
          v38 = *((_DWORD *)v36 - 2);
          v36 -= 8;
          *((_DWORD *)v37 - 2) = v38;
          v37 -= 8;
          *((_DWORD *)v37 + 1) = *((_DWORD *)v36 + 1);
        }
        v27 = v34 + 8;
        v161 = v37;
        v162 = v34 + 8;
        v163[0] = &v33[8 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_DWORD *)v162 = -1;
        *((_DWORD *)v26 + 1) = v25;
        v27 = v26 + 8;
      }
      v162 = v27;
    }
    while ((int)v24 >= (unint64_t)((v27 - v161) >> 3));
  }
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v40 = *fst::TropicalWeightTpl<float>::One();
  v41 = &v161[8 * (int)v24];
  *(_DWORD *)v41 = v39;
  *((_DWORD *)v41 + 1) = v40;
  v158 = 0;
  v42 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, 1uLL);
  *v42 = v24;
  v156 = v42;
  v158 = (char *)&v42[v43];
  v157 = (char *)(v42 + 1);
  v44 = *(float *)(*a3 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1));
  if (v44 == -INFINITY || (v45 = *a5, *a5 >= -INFINITY) && *a5 <= -INFINITY)
  {
    v46 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v47 = v45 == INFINITY || v44 == INFINITY;
    v46 = v44 + v45;
    if (v47)
      v46 = INFINITY;
  }
  v155 = v46;
  __p = 0;
  v153 = 0;
  v154 = 0;
  v49 = v156;
  v48 = v157;
  if (v156 == (int *)v157)
    goto LABEL_178;
  do
  {
    v149[0] = &v161;
    v149[1] = a3;
    v150 = -1;
    v151 = a7;
    if (v48 - (char *)v49 >= 5)
    {
      v50 = *v49;
      v51 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(v49, (uint64_t)v149, (unint64_t)(v48 - (char *)v49) >> 2);
      v52 = (int *)(v48 - 4);
      if (v48 - 4 == (char *)v51)
      {
        *v51 = v50;
      }
      else
      {
        *v51 = *v52;
        *v52 = v50;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v49, (uint64_t)(v51 + 1), (uint64_t)v149, v51 + 1 - v49);
      }
    }
    v53 = *((int *)v157 - 1);
    v54 = (float *)&v161[8 * v53];
    v55 = *(int *)v54;
    v56 = v54[1];
    v157 -= 4;
    if ((_DWORD)v55 == -1)
    {
      v57 = fst::TropicalWeightTpl<float>::One();
    }
    else if (v55 >= (a3[1] - *a3) >> 2)
    {
      v57 = fst::TropicalWeightTpl<float>::Zero();
    }
    else
    {
      v57 = (int *)(*a3 + 4 * v55);
    }
    v58 = *(float *)v57;
    if (*(float *)v57 == -INFINITY || v56 >= -INFINITY && v56 <= -INFINITY)
    {
      v59 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else
    {
      v60 = v58 == INFINITY || v56 == INFINITY;
      v59 = v56 + v58;
      if (v60)
        v59 = INFINITY;
    }
    *(float *)&v146 = v59;
    if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v160, &v155, (float *)&v146)
      || a6 != -1 && (*(int (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2) >= a6)
    {
      goto LABEL_177;
    }
    v61 = v55 + 1;
    v62 = (char *)__p;
    v63 = v153;
    v64 = (v153 - (_BYTE *)__p) >> 2;
    while (v64 <= v61)
    {
      if (v63 >= v154)
      {
        v66 = v64 + 1;
        if ((v64 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v67 = v154 - v62;
        if ((v154 - v62) >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v154, v68);
          v62 = (char *)__p;
          v63 = v153;
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[4 * v64];
        *(_DWORD *)v70 = 0;
        v65 = v70 + 4;
        while (v63 != v62)
        {
          v71 = *((_DWORD *)v63 - 1);
          v63 -= 4;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        __p = v70;
        v153 = v65;
        v154 = &v69[4 * v68];
        if (v62)
        {
          operator delete(v62);
          v62 = (char *)__p;
        }
        else
        {
          v62 = v70;
        }
      }
      else
      {
        *(_DWORD *)v63 = 0;
        v65 = v63 + 4;
      }
      v153 = v65;
      v64 = (v65 - v62) >> 2;
      v63 = v65;
    }
    v72 = *(_DWORD *)&v62[4 * v61];
    *(_DWORD *)&v62[4 * v61] = v72 + 1;
    if ((_DWORD)v55 == -1)
    {
      v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v105 = *fst::TropicalWeightTpl<float>::One();
      *(_QWORD *)&v146 = 0;
      *((_QWORD *)&v146 + 1) = __PAIR64__(v53, v105);
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 184))(a2, v104, &v146);
      if (*(_DWORD *)__p != a4)
        goto LABEL_177;
      break;
    }
    if (v72 >= a4)
      goto LABEL_177;
    v148 = 0;
    v146 = 0u;
    v147 = 0u;
    (*(void (**)(uint64_t, unint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, v55, &v146);
    while (1)
    {
      if (!(_QWORD)v146)
      {
        if (v148 >= (unint64_t)v147)
          goto LABEL_134;
LABEL_87:
        v73 = *((_QWORD *)&v146 + 1) + 16 * v148;
        goto LABEL_88;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v146 + 16))(v146))
        break;
      if (!(_QWORD)v146)
        goto LABEL_87;
      v73 = (*(uint64_t (**)(void))(*(_QWORD *)v146 + 24))();
LABEL_88:
      v74 = *(float *)(v73 + 8);
      v75 = *(_DWORD *)(v73 + 12);
      v143 = *(_QWORD *)v73;
      v144 = v74;
      v145 = v75;
      if (v56 == -INFINITY || v74 >= -INFINITY && v74 <= -INFINITY)
      {
        v76 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v77 = v74 == INFINITY || v56 == INFINITY;
        v78 = v56 + v74;
        if (v77)
          v76 = INFINITY;
        else
          v76 = v78;
      }
      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
      v80 = v145;
      v81 = v162;
      if ((unint64_t)v162 >= v163[0])
      {
        v83 = (v162 - v161) >> 3;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v85 = v163[0] - (_QWORD)v161;
        if ((uint64_t)(v163[0] - (_QWORD)v161) >> 2 > v84)
          v84 = v85 >> 2;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v163, v86);
        v89 = &v88[8 * v83];
        *(_DWORD *)v89 = v80;
        *((float *)v89 + 1) = v76;
        v90 = v161;
        v91 = v162;
        v92 = v89;
        while (v91 != v90)
        {
          v93 = *((_DWORD *)v91 - 2);
          v91 -= 8;
          *((_DWORD *)v92 - 2) = v93;
          v92 -= 8;
          *((_DWORD *)v92 + 1) = *((_DWORD *)v91 + 1);
        }
        v82 = v89 + 8;
        v161 = v92;
        v162 = v89 + 8;
        v163[0] = &v88[8 * v87];
        if (v90)
          operator delete(v90);
      }
      else
      {
        *(_DWORD *)v162 = v145;
        *((float *)v81 + 1) = v76;
        v82 = v81 + 8;
      }
      v162 = v82;
      v145 = v53;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v79, &v143);
      v94 = v157;
      if (v157 >= v158)
      {
        v96 = v156;
        v97 = (v157 - (char *)v156) >> 2;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v99 = v158 - (char *)v156;
        if ((v158 - (char *)v156) >> 1 > v98)
          v98 = v99 >> 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
          v100 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        if (v100)
        {
          v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v100);
          v96 = v156;
          v94 = v157;
        }
        else
        {
          v101 = 0;
        }
        v102 = (int *)&v101[4 * v97];
        *v102 = v79;
        v95 = (uint64_t)(v102 + 1);
        while (v94 != (char *)v96)
        {
          v103 = *((_DWORD *)v94 - 1);
          v94 -= 4;
          *--v102 = v103;
        }
        v156 = v102;
        v157 = (char *)v95;
        v158 = &v101[4 * v100];
        if (v96)
          operator delete(v96);
      }
      else
      {
        *(_DWORD *)v157 = v79;
        v95 = (uint64_t)(v94 + 4);
      }
      v157 = (char *)v95;
      v140[0] = &v161;
      v140[1] = a3;
      v141 = -1;
      v142 = a7;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v156, v95, (uint64_t)v140, (v95 - (uint64_t)v156) >> 2);
      if ((_QWORD)v146)
        (*(void (**)(_QWORD))(*(_QWORD *)v146 + 32))(v146);
      else
        ++v148;
    }
    if ((_QWORD)v146)
    {
      (*(void (**)(void))(*(_QWORD *)v146 + 8))();
      goto LABEL_136;
    }
LABEL_134:
    if (*((_QWORD *)&v147 + 1))
      --**((_DWORD **)&v147 + 1);
LABEL_136:
    (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 24))(&v146, a1, v55);
    LODWORD(v106) = v146;
    v107 = fst::TropicalWeightTpl<float>::Zero();
    *(float *)&v146 = v106;
    LODWORD(v143) = 0;
    LODWORD(v143) = *v107;
    if (v106 != *(float *)&v143)
    {
      if (v56 == -INFINITY || v106 >= -INFINITY && v106 <= -INFINITY)
      {
        v108 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else if (v106 == INFINITY || v56 == INFINITY)
      {
        v108 = INFINITY;
      }
      else
      {
        v108 = v56 + v106;
      }
      v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
      v111 = v162;
      if ((unint64_t)v162 >= v163[0])
      {
        v113 = (v162 - v161) >> 3;
        v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v115 = v163[0] - (_QWORD)v161;
        if ((uint64_t)(v163[0] - (_QWORD)v161) >> 2 > v114)
          v114 = v115 >> 2;
        if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v114;
        v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v163, v116);
        v119 = &v118[8 * v113];
        *(_DWORD *)v119 = -1;
        *((float *)v119 + 1) = v108;
        v120 = v161;
        v121 = v162;
        v122 = v119;
        while (v121 != v120)
        {
          v123 = *((_DWORD *)v121 - 2);
          v121 -= 8;
          *((_DWORD *)v122 - 2) = v123;
          v122 -= 8;
          *((_DWORD *)v122 + 1) = *((_DWORD *)v121 + 1);
        }
        v112 = v119 + 8;
        v161 = v122;
        v162 = v119 + 8;
        v163[0] = &v118[8 * v117];
        if (v120)
          operator delete(v120);
      }
      else
      {
        *(_DWORD *)v162 = -1;
        *((float *)v111 + 1) = v108;
        v112 = v111 + 8;
      }
      v162 = v112;
      *(_QWORD *)&v146 = 0;
      *((_QWORD *)&v146 + 1) = __PAIR64__(v53, LODWORD(v106));
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 184))(a2, v110, &v146);
      v124 = v157;
      if (v157 >= v158)
      {
        v126 = v156;
        v127 = (v157 - (char *)v156) >> 2;
        v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v129 = v158 - (char *)v156;
        if ((v158 - (char *)v156) >> 1 > v128)
          v128 = v129 >> 1;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
          v130 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v130 = v128;
        if (v130)
        {
          v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v130);
          v126 = v156;
          v124 = v157;
        }
        else
        {
          v131 = 0;
        }
        v132 = (int *)&v131[4 * v127];
        *v132 = v110;
        v125 = (uint64_t)(v132 + 1);
        while (v124 != (char *)v126)
        {
          v133 = *((_DWORD *)v124 - 1);
          v124 -= 4;
          *--v132 = v133;
        }
        v156 = v132;
        v157 = (char *)v125;
        v158 = &v131[4 * v130];
        if (v126)
          operator delete(v126);
      }
      else
      {
        *(_DWORD *)v157 = v110;
        v125 = (uint64_t)(v124 + 4);
      }
      v157 = (char *)v125;
      v137[0] = &v161;
      v137[1] = a3;
      v138 = -1;
      v139 = a7;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v156, v125, (uint64_t)v137, (v125 - (uint64_t)v156) >> 2);
    }
LABEL_177:
    v49 = v156;
    v48 = v157;
  }
  while (v156 != (int *)v157);
LABEL_178:
  fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 4, 4);
  v134 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  v135 = fst::ShortestPathProperties(v134, 0);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, v135, 0xFFFFFFFF0007);
  if (__p)
  {
    v153 = (char *)__p;
    operator delete(__p);
  }
  if (v156)
  {
    v157 = (char *)v156;
    operator delete(v156);
  }
LABEL_10:
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
}

void sub_22BDE37BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 176);
  if (v36)
  {
    *(_QWORD *)(v34 - 168) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 144);
  if (v37)
  {
    *(_QWORD *)(v34 - 136) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFst(_QWORD *a1)
{
  *a1 = off_24F656600;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

BOOL fst::internal::FirstPathSelect<int,fst::TropicalWeightTpl<float>,fst::AutoQueue<int>>::operator()(uint64_t a1, uint64_t a2, float *a3, float *a4)
{
  float v5;

  v5 = *a3;
  if (*a3 == -INFINITY || *a4 >= -INFINITY && *a4 <= -INFINITY)
  {
    v5 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else if (v5 >= *a4)
  {
    v5 = *a4;
  }
  return *a4 == v5;
}

int *std::vector<fst::TropicalWeightTpl<float>>::__swap_out_circular_buffer(int **a1, _QWORD *a2, int *a3)
{
  int *result;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  int *v9;
  _DWORD *i;
  int v11;
  int *v12;
  int *v13;
  int *v14;

  result = (int *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = (int *)a2[1];
    do
    {
      v8 = *--v7;
      *--v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  for (i = (_DWORD *)a2[2]; a3 != v9; ++i)
  {
    v11 = *a3++;
    *i = v11;
  }
  a2[2] = i;
  v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = (int *)a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = (int *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (int *)(result + 4 * (v4 >> 1));
    v9 = (int *)(a2 - 4);
    result = fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (int *)(v6 + 4 * v7);
        result = fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  int *v7;
  int *v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  int v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;

  v6 = **(_QWORD **)a1;
  v7 = (int *)(v6 + 8 * a2);
  v8 = (int *)(v6 + 8 * a3);
  fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::PWeight(a1, *v7, (int *)&v26);
  if (v26 == -INFINITY || (v9 = *(float *)(v6 + 8 * a2 + 4), v9 >= -INFINITY) && v9 <= -INFINITY)
  {
    v10 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v11 = v9 == INFINITY || v26 == INFINITY;
    v10 = v26 + v9;
    if (v11)
      v10 = INFINITY;
  }
  v27 = v10;
  fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::PWeight(a1, *v8, (int *)&v25);
  if (v25 == -INFINITY || (v12 = *(float *)(v6 + 8 * a3 + 4), v12 >= -INFINITY) && v12 <= -INFINITY)
  {
    v13 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v14 = v12 == INFINITY || v25 == INFINITY;
    v13 = v25 + v12;
    if (v14)
      v13 = INFINITY;
  }
  v26 = v13;
  v15 = *v7;
  v16 = *(_DWORD *)(a1 + 16);
  v17 = *v8;
  v18 = a1 + 24;
  if (*v7 != v16 || v17 == v16)
  {
    LODWORD(result) = fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(v18, &v26, &v27);
    v21 = result;
    v22 = v15 != v16 && v17 == v16;
    if (v22)
      result = 0;
    else
      result = result;
    if (v22 && v21)
    {
      v23 = *(float *)(a1 + 20);
      return v27 > (float)(v23 + v26) || v26 > (float)(v23 + v27);
    }
  }
  else if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(v18, &v26, &v27))
  {
    return 1;
  }
  else
  {
    v24 = *(float *)(a1 + 20);
    return v27 <= (float)(v24 + v26) && v26 <= (float)(v24 + v27);
  }
  return result;
}

float fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::PWeight@<S0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  int *v4;
  uint64_t v5;
  float result;

  if (*(_DWORD *)(a1 + 16) == a2)
  {
    v4 = fst::TropicalWeightTpl<float>::One();
  }
  else
  {
    v5 = **(_QWORD **)(a1 + 8);
    if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v5) >> 2))
      v4 = fst::TropicalWeightTpl<float>::Zero();
    else
      v4 = (int *)(v5 + 4 * a2);
  }
  result = *(float *)v4;
  *a3 = *v4;
  return result;
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v11 = a4;
  v12 = a3;
  std::allocate_shared[abi:ne180100]<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,void>(a2, &v12, &v11, a5, __p);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(_QWORD *)a1 = &off_24F656038;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v13, (uint64_t)__p);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"DeterminizeFst: ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Distance to final states computed for acceptors only", 52);
    LogMessage::~LogMessage((LogMessage *)&v13);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  }
  return a1;
}

void sub_22BDE3E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  *v14 = off_24F656600;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFst(_QWORD *a1)
{
  *a1 = off_24F656600;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_22BDE400C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24F656790;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 16))(a1);
  *(_QWORD *)v4 = &off_24F656710;
  *a2 = v4;
  return result;
}

void sub_22BDE40C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xD8uLL);
  result = std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22BDE4150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F656100;
  fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(a1 + 3, a2, *a3, *a4, a5);
  return a1;
}

void sub_22BDE41A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F656100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F656100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *__p[2];
  char v16;
  BOOL v17;

  v10 = fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &off_24F656150;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v12 + 1), 0, 0, 0);
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"DeterminizeFst: Argument not an acceptor", 40);
    LogMessage::~LogMessage((LogMessage *)&v17);
    if (v16 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v13 = (_QWORD *)a1[20];
  if (v13)
    v13[1] = *v13;
  return a1;
}

void sub_22BDE43A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  _QWORD **v19;

  if (a14 < 0)
    operator delete(__p);
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100](v19, 0);
  std::unique_ptr<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reset[abi:ne180100]((uint64_t **)(v18 + 176), 0);
  fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase((_QWORD *)v18);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string __str;

  *(_QWORD *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CacheBaseImpl(a1, a3) = off_24F656200;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFF00000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0xFFFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  if (v9)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (v11)
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void sub_22BDE45AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = *(_QWORD *)(v15 + 136);
  *(_QWORD *)(v15 + 136) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24F656200;
  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl((uint64_t)a1);
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24F656150;
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100]((_QWORD **)(a1 + 184), 0);
  std::unique_ptr<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reset[abi:ne180100]((uint64_t **)(a1 + 176), 0);
  *(_QWORD *)a1 = off_24F656200;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24F656150;
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100]((_QWORD **)(a1 + 184), 0);
  std::unique_ptr<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reset[abi:ne180100]((uint64_t **)(a1 + 176), 0);
  *(_QWORD *)a1 = off_24F656200;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 56))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_22BDE47CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10F3C4045AD4555);
  _Unwind_Resume(a1);
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  float ***v4;
  float **v5;
  float ***v6;
  BOOL v7;
  float ***v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (float ***)v9;
  fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, v4 + 5);
      v5 = v4[1];
      if (v5)
      {
        do
        {
          v6 = (float ***)v5;
          v5 = (float **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (float ***)v4[2];
          v7 = *v6 == (float **)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v9);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_22BDE48A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 16))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = *fst::TropicalWeightTpl<float>::One();
    v5 = operator new();
    *(_QWORD *)v5 = 0;
    *(_BYTE *)(v5 + 8) = -1;
    v6 = operator new(0x10uLL);
    *(_QWORD *)v6 = 0;
    v6[2] = v3;
    v6[3] = v4;
    *(_QWORD *)v5 = v6;
    *(_BYTE *)(v5 + 8) = 0;
    return fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)v5);
  }
  return result;
}

int *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  float **v5;
  int *result;
  float v7;
  float *i;
  float v9;
  float v10;
  BOOL v11;
  uint64_t v12;

  v5 = *(float ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 112) + 8 * a2);
  result = fst::TropicalWeightTpl<float>::Zero();
  v7 = *(float *)result;
  *a3 = *result;
  for (i = *v5; i; i = *(float **)i)
  {
    result = (int *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 24))(&v12, *(_QWORD *)(a1 + 136), *((unsigned int *)i + 2));
    v9 = i[3];
    if (v9 == -INFINITY || *(float *)&v12 >= -INFINITY && *(float *)&v12 <= -INFINITY)
    {
      result = fst::TropicalWeightTpl<float>::NoWeight();
      v10 = *(float *)result;
    }
    else
    {
      v11 = *(float *)&v12 == INFINITY || v9 == INFINITY;
      v10 = v9 + *(float *)&v12;
      if (v11)
        v10 = INFINITY;
    }
    if (v7 == -INFINITY || v10 >= -INFINITY && v10 <= -INFINITY)
    {
      result = fst::TropicalWeightTpl<float>::NoWeight();
      v7 = *(float *)result;
    }
    else if (v7 >= v10)
    {
      v7 = v10;
    }
    *(float *)a3 = v7;
    if (v7 >= -INFINITY && v7 <= -INFINITY)
      *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return result;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &off_24F655BA8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24F656250;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 88) = v5 == 0;
  *(_DWORD *)(v4 + 92) = -1;
  *(_QWORD *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 104) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 112) = v5;
  *(_BYTE *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_WORD *)(a1 + 128) = 257;
  return a1;
}

void sub_22BDE4B84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  MEMORY[0x22E2FB328](v2, 0x10A0C40690396FALL);
  if (*v3)
    operator delete(*v3);
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(uint64_t a1)
{
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_22BDF36C0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = operator new();
  *(_OWORD *)v4 = xmmword_22BDF36C0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  v5 = operator new();
  *(_OWORD *)v5 = xmmword_22BDF36C0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(a1 + 80) = v5;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(a1);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_22BDE4CE4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  uint64_t *v4;
  void *v6;

  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 7);
  v6 = *v3;
  if (*v3)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 8);
    do
    {
      fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(_QWORD **)(v2 + 8 * v3++), (uint64_t **)(a1 + 72));
      v2 = *(_QWORD *)(a1 + 8);
    }
    while (v3 < (*(_QWORD *)(a1 + 16) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 16) = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear((_QWORD *)(a1 + 32));
}

_QWORD *fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(_QWORD *result, uint64_t **a2)
{
  _QWORD *v3;
  _QWORD **v4;

  if (result)
  {
    v3 = result;
    v4 = (_QWORD **)(result + 3);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v3 + 6);
    result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*a2);
    v3[8] = result[7];
    result[7] = v3;
  }
  return result;
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__destroy_vector::operator()[abi:ne180100](_QWORD ***a1)
{
  _QWORD **v1;
  _QWORD *v2;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v1[1] = v2;
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(v1 + 3, v2, ((char *)v1[2] - (char *)v2) >> 4);
  }
}

void fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  _QWORD *v4;

  if (a3 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*a1);
    if (!__p)
      return;
    __p[4] = v4[7];
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*a1);
    if (!__p)
      return;
    __p[2] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*a1);
    if (!__p)
      return;
    __p[8] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*a1);
    if (!__p)
      return;
    __p[16] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*a1);
    if (!__p)
      return;
    __p[32] = v4[7];
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*a1);
    if (!__p)
      return;
    __p[64] = v4[7];
    goto LABEL_22;
  }
  if (a3 > 0x40)
  {
    operator delete(__p);
    return;
  }
  v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*a1);
  if (__p)
  {
    __p[128] = v4[7];
LABEL_22:
    v4[7] = __p;
  }
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x11uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 128);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653C38;
    fst::internal::MemoryArenaImpl<24ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656280;
    v6 = *(_QWORD *)(*v3 + 128);
    *(_QWORD *)(*v3 + 128) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE4FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653C38;
  a1[1] = &off_24F653C60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x21uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 256);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653CF8;
    fst::internal::MemoryArenaImpl<40ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6562C0;
    v6 = *(_QWORD *)(*v3 + 256);
    *(_QWORD *)(*v3 + 256) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653CF8;
  a1[1] = &off_24F653D20;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x41uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653DB8;
    fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656300;
    v6 = *(_QWORD *)(*v3 + 512);
    *(_QWORD *)(*v3 + 512) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x81uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653E78;
    fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656340;
    v6 = *(_QWORD *)(*v3 + 1024);
    *(_QWORD *)(*v3 + 1024) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE53E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x101uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653F38;
    fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656380;
    v6 = *(_QWORD *)(*v3 + 2048);
    *(_QWORD *)(*v3 + 2048) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE553C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x201uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653FF8;
    fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6563C0;
    v6 = *(_QWORD *)(*v3 + 4096);
    *(_QWORD *)(*v3 + 4096) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x401uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x2000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6540B8;
    fst::internal::MemoryArenaImpl<1032ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656400;
    v6 = *(_QWORD *)(*v3 + 0x2000);
    *(_QWORD *)(*v3 + 0x2000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE57EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x41uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653DB8;
    fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656440;
    v6 = *(_QWORD *)(*v3 + 512);
    *(_QWORD *)(*v3 + 512) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5940(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653DB8;
  a1[1] = &off_24F653DE0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x81uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653E78;
    fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656480;
    v6 = *(_QWORD *)(*v3 + 1024);
    *(_QWORD *)(*v3 + 1024) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653E78;
  a1[1] = &off_24F653EA0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x101uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653F38;
    fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6564C0;
    v6 = *(_QWORD *)(*v3 + 2048);
    *(_QWORD *)(*v3 + 2048) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653F38;
  a1[1] = &off_24F653F60;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x201uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F653FF8;
    fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656500;
    v6 = *(_QWORD *)(*v3 + 4096);
    *(_QWORD *)(*v3 + 4096) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F653FF8;
  a1[1] = &off_24F654020;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x401uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x2000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6540B8;
    fst::internal::MemoryArenaImpl<1032ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656540;
    v6 = *(_QWORD *)(*v3 + 0x2000);
    *(_QWORD *)(*v3 + 0x2000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6540B8;
  a1[1] = &off_24F6540E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x800)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x801uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x4000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F6542B8;
    fst::internal::MemoryArenaImpl<2056ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F656580;
    v6 = *(_QWORD *)(*v3 + 0x4000);
    *(_QWORD *)(*v3 + 0x4000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE5FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6542B8;
  a1[1] = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F6542B8;
  a1[1] = &off_24F6542E0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x8007)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t)(a1 + 2), 0x1001uLL);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x8000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = *a1;
    *v4 = &off_24F654378;
    fst::internal::MemoryArenaImpl<4104ul>::MemoryArenaImpl(v4 + 1, v5);
    v4[7] = 0;
    *v4 = &off_24F6565C0;
    v6 = *(_QWORD *)(*v3 + 0x8000);
    *(_QWORD *)(*v3 + 0x8000) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void sub_22BDE6150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654378;
  a1[1] = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_24F654378;
  a1[1] = &off_24F6543A0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24F656250;
  if (*(_BYTE *)(a1 + 129))
  {
    v2 = *(uint64_t **)(a1 + 120);
    if (v2)
    {
      v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorCacheStore(v2);
      MEMORY[0x22E2FB328](v3, 0x10A0C40690396FALL);
    }
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
    operator delete(v4);
  return fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorCacheStore(uint64_t *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear((uint64_t)a1);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 10);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 7);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
    a3 = operator new();
  *(_QWORD *)a1 = a3;
  if (!a4)
    a4 = operator new();
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a1;
  *(_QWORD *)(a1 + 24) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set(a1 + 32, a2, (_QWORD *)(a1 + 16), (_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 104), a2);
  return a1;
}

void sub_22BDE6354(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x22E2FB328](v3, 0xC400A2AC0F1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = operator new();
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)v8 = xmmword_22BDF36D0;
  v11 = v8;
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(&v11);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_22BDF36C0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_22BDE64A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node((_QWORD *)a1, *(_QWORD **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

_QWORD *std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = (_QWORD *)*v2;
      result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>((uint64_t *)v3[4]);
      v2[3] = result[7];
      result[7] = v2;
      v2 = v4;
    }
    while (v4);
  }
  return result;
}

_QWORD *std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100](_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

_QWORD *fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1 + 14;
  v2 = (_QWORD *)a1[14];
  v3 = v4[1];
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = (_QWORD **)v2[v5];
      if (v6)
      {
        v7 = *v6;
        if (*v6)
        {
          do
          {
            v8 = (_QWORD *)*v7;
            operator delete(v7);
            v7 = v8;
          }
          while (v8);
        }
        *v6 = 0;
        MEMORY[0x22E2FB328](v6, 0x1020C405F07FB98);
        v2 = (_QWORD *)a1[14];
        v3 = a1[15];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    MEMORY[0x22E2FB328](v9, 0xC400A2AC0F1);
  v10 = a1[1];
  a1[1] = 0;
  if (v10)
    MEMORY[0x22E2FB328](v10, 0xC400A2AC0F1);
  return a1;
}

uint64_t **std::unique_ptr<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

_QWORD *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  void *__p[2];
  char v12;
  BOOL v13;

  v4 = fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &off_24F656150;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 72))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9, 0, 0);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"DeterminizeFsaImpl: Cannot copy with out_dist vector", 52);
    LogMessage::~LogMessage((LogMessage *)&v13);
    if (v12 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_22BDE6824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  _QWORD **v19;

  if (a14 < 0)
    operator delete(__p);
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100](v19, 0);
  std::unique_ptr<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reset[abi:ne180100]((uint64_t **)(v18 + 176), 0);
  fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase((_QWORD *)v18);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string __str;

  *(_QWORD *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CacheBaseImpl(a1, a2, 0) = off_24F656200;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 72))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFF00000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 0xFFFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_22BDE69DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 136);
  *(_QWORD *)(v15 + 136) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &off_24F655BA8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24F656250;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 88) = v14 == 0;
  *(_DWORD *)(v6 + 92) = -1;
  *(_QWORD *)(v6 + 96) = 0;
  *(_BYTE *)(v6 + 104) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 112) = v8;
  *(_BYTE *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  *(_BYTE *)(a1 + 129) = 1;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 120);
    *(_OWORD *)(v6 + 104) = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 120) = v11;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_22BDE6B9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x22E2FB328](v3, 0x10A0C40690396FALL);
  if (*v2)
    operator delete(*v2);
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::CopyStates(a1, a2);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    if (*(_DWORD *)(a2 + 92) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 96) = MutableState;
  }
  return a1;
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;

  v13 = a2;
  v3 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 8;
  if (a2 >= (unint64_t)((v6 - v5) >> 3))
  {
    v12 = 0;
    std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(v4, a2 + 1, &v12);
  }
  else
  {
    v7 = *(_QWORD **)(v5 + 8 * a2);
    if (v7)
      return v7;
  }
  v7 = fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::allocate((uint64_t **)(a1 + 72), 1uLL);
  *(_DWORD *)v7 = *fst::TropicalWeightTpl<float>::Zero();
  v7[5] = 0;
  *(_OWORD *)(v7 + 3) = 0u;
  *(_OWORD *)(v7 + 1) = 0u;
  v8 = *(_QWORD *)(a1 + 80);
  v7[6] = v8;
  ++*(_QWORD *)(v8 + 8);
  v7[7] = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) = v7;
  if (*(_BYTE *)a1)
  {
    v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(a1 + 32, 0, 0, &v13);
    v10 = *(_QWORD *)(a1 + 32);
    *v9 = v10;
    v9[1] = a1 + 32;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 32) = v9;
    ++*(_QWORD *)(a1 + 48);
  }
  return v7;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::CopyStates(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;

  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(a1);
  v4 = (char **)(a1 + 8);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 8), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v23 = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::allocate((uint64_t **)(a1 + 72), 1uLL);
        *(_DWORD *)v8 = *(_DWORD *)v7;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v7 + 8);
        std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::vector<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,0>(v8 + 3, *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), (uint64_t *)(a1 + 80));
        *((_DWORD *)v8 + 14) = *(_DWORD *)(v7 + 56);
        *((_DWORD *)v8 + 15) = 0;
        if (*(_BYTE *)a1)
        {
          v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(a1 + 32, 0, 0, &v23);
          v10 = *(_QWORD *)(a1 + 32);
          *v9 = v10;
          v9[1] = a1 + 32;
          *(_QWORD *)(v10 + 8) = v9;
          *(_QWORD *)(a1 + 32) = v9;
          ++*(_QWORD *)(a1 + 48);
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = *(_QWORD **)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 24, v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = *(char **)(a1 + 8);
        v20 = *(char **)(a1 + 16);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        *(_QWORD *)(a1 + 8) = v19;
        *(_QWORD *)(a1 + 16) = v13;
        *(_QWORD *)(a1 + 24) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 16) = v13;
      v6 = ++v23;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

_QWORD *fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<136ul>::Allocate(v2 + 1, 1);
      result[16] = 0;
      return result;
    }
    v4 = result[16];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<72ul>::Allocate(v2 + 1, 1);
      result[8] = 0;
      return result;
    }
    v4 = result[8];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<264ul>::Allocate(v2 + 1, 1);
      result[32] = 0;
      return result;
    }
    v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<520ul>::Allocate(v2 + 1, 1);
      result[64] = 0;
      return result;
    }
    v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<1032ul>::Allocate(v2 + 1, 1);
      result[128] = 0;
      return result;
    }
    v4 = result[128];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<2056ul>::Allocate(v2 + 1, 1);
      result[256] = 0;
      return result;
    }
    v4 = result[256];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<4104ul>::Allocate(v2 + 1, 1);
      result[512] = 0;
      return result;
    }
    v4 = result[512];
    goto LABEL_26;
  }
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::vector<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a4;
  a1[3] = *a4;
  ++*(_QWORD *)(v5 + 8);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>>(a1, a2, a3, (a3 - a2) >> 4);
  return a1;
}

void sub_22BDE7114(_Unwind_Exception *a1)
{
  uint64_t *v1;

  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__vallocate[abi:ne180100]((uint64_t)result, a4);
    v7 = v6[1];
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 12) = *(_DWORD *)(a2 + 12);
      v7 += 16;
      a2 += 16;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_22BDE71A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9)
{
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__vallocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  if (a2 >> 60)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  result = fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate((uint64_t **)(a1 + 24), a2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[2 * a2];
  return result;
}

_QWORD *fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  if (a2 == 2)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<40ul>::Allocate(v2 + 1, 1);
      result[4] = 0;
      return result;
    }
    v4 = result[4];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<24ul>::Allocate(v2 + 1, 1);
      result[2] = 0;
      return result;
    }
    v4 = result[2];
LABEL_26:
    v2[7] = v4;
    return result;
  }
  if (a2 <= 4)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<72ul>::Allocate(v2 + 1, 1);
      result[8] = 0;
      return result;
    }
    v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<136ul>::Allocate(v2 + 1, 1);
      result[16] = 0;
      return result;
    }
    v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<264ul>::Allocate(v2 + 1, 1);
      result[32] = 0;
      return result;
    }
    v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<520ul>::Allocate(v2 + 1, 1);
      result[64] = 0;
      return result;
    }
    v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*a1);
    result = (_QWORD *)v2[7];
    if (!result)
    {
      result = (_QWORD *)fst::internal::MemoryArenaImpl<1032ul>::Allocate(v2 + 1, 1);
      result[128] = 0;
      return result;
    }
    v4 = result[128];
    goto LABEL_26;
  }
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, _QWORD *a3)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD v19[2];
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v5 = **(float ***)(*(_QWORD *)(a1[23] + 112) + 8 * a2);
  if (!v5)
    goto LABEL_26;
  do
  {
    v6 = *((unsigned int *)v5 + 2);
    v7 = a1[17];
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v7 + 120))(v7, v6, &v20);
    while (1)
    {
      if (!(_QWORD)v20)
      {
        if (v22 >= (unint64_t)v21)
          goto LABEL_23;
LABEL_8:
        v8 = *((_QWORD *)&v20 + 1) + 16 * v22;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v20 + 16))(v20))
        break;
      if (!(_QWORD)v20)
        goto LABEL_8;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 24))();
LABEL_9:
      v9 = *(_DWORD *)(v8 + 12);
      v10 = v5[3];
      if (v10 == -INFINITY || (v11 = *(float *)(v8 + 8), v11 >= -INFINITY) && v11 <= -INFINITY)
      {
        v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v13 = v11 == INFINITY || v10 == INFINITY;
        v12 = v10 + v11;
        if (v13)
          v12 = INFINITY;
      }
      v19[0] = v9;
      *(float *)&v19[1] = v12;
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 2), v19, (uint64_t)a3);
      if ((_QWORD)v20)
        (*(void (**)(_QWORD))(*(_QWORD *)v20 + 32))(v20);
      else
        ++v22;
    }
    if ((_QWORD)v20)
    {
      (*(void (**)(void))(*(_QWORD *)v20 + 8))();
      goto LABEL_25;
    }
LABEL_23:
    if (*((_QWORD *)&v21 + 1))
      --**((_DWORD **)&v21 + 1);
LABEL_25:
    v5 = *(float **)v5;
  }
  while (v5);
LABEL_26:
  v16 = (_QWORD *)*a3;
  v14 = a3 + 1;
  v15 = v16;
  if (v16 != v14)
  {
    do
    {
      fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      v17 = (_QWORD *)v15[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v15[2];
          v13 = *v18 == (_QWORD)v15;
          v15 = v18;
        }
        while (!v13);
      }
      v15 = v18;
    }
    while (v18 != v14);
  }
}

void sub_22BDE759C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, float ***a3)
{
  int v5;
  int v6;
  int State;
  _QWORD *MutableState;
  _DWORD v10[4];

  v5 = *(_DWORD *)a3;
  v6 = *((_DWORD *)a3 + 1);
  State = fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(a1, a3[1]);
  v10[0] = v5;
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = State;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::push_back[abi:ne180100](MutableState + 3, (uint64_t)v10);
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetArcs(uint64_t a1, int a2)
{
  _QWORD *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = MutableState[3];
  v6 = MutableState[4] - v5;
  if (v6)
  {
    v7 = v6 >> 4;
    v8 = *(_DWORD *)(a1 + 64);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 12);
    do
    {
      v11 = *v9;
      v9 += 4;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 64) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 14) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v15;

  v15 = a2;
  v7 = std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v15);
  v8 = v7;
  if (*((_DWORD *)v7 + 10) == -1)
  {
    v11 = *a2;
    v12 = *fst::TropicalWeightTpl<float>::Zero();
    v9 = operator new();
    v10 = 0;
    *(_QWORD *)v9 = 0;
    *((_DWORD *)v8 + 10) = v11;
    *((_DWORD *)v8 + 11) = v12;
    v8[6] = v9;
    *(_BYTE *)(v9 + 8) = 0;
  }
  else
  {
    v9 = v7[6];
    v10 = *(_QWORD *)v9;
  }
  v13 = operator new(0x10uLL);
  *(_QWORD *)v13 = v10;
  v13[2] = *a4;
  v13[3] = a4[1];
  *(_QWORD *)v9 = v13;
  return 1;
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *i;
  float v14;
  float v15;
  float v16;
  BOOL v17;

  v4 = *(uint64_t ***)(a2 + 8);
  std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::sort[abi:ne180100](v4);
  v5 = *v4;
  if (*v4)
  {
    v6 = *v4;
    do
    {
      v7 = *(float *)(a2 + 4);
      if (v7 == -INFINITY || (v8 = *((float *)v6 + 3), v8 >= -INFINITY) && v8 <= -INFINITY)
      {
        v7 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else if (v7 >= v8)
      {
        v7 = *((float *)v6 + 3);
      }
      *(float *)(a2 + 4) = v7;
      if (v5 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v5 + 2))
      {
        v11 = (uint64_t *)*v6;
        v5 = v6;
      }
      else
      {
        v9 = *((float *)v5 + 3);
        if (v9 == -INFINITY || (v10 = *((float *)v6 + 3), v10 >= -INFINITY) && v10 <= -INFINITY)
        {
          v9 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else if (v9 >= v10)
        {
          v9 = *((float *)v6 + 3);
        }
        *((float *)v5 + 3) = v9;
        if (v9 >= -INFINITY && v9 <= -INFINITY)
          *(_QWORD *)(a1 + 8) |= 4uLL;
        v11 = (uint64_t *)*v6;
        v12 = (_QWORD *)*v5;
        *v5 = *(_QWORD *)*v5;
        operator delete(v12);
      }
      v6 = v11;
    }
    while (v11);
    for (i = *v4; i; i = (uint64_t *)*i)
    {
      v14 = *((float *)i + 3);
      if (v14 == -INFINITY || (v15 = *(float *)(a2 + 4), v15 >= -INFINITY) && v15 <= -INFINITY)
      {
        v16 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v17 = v14 == INFINITY;
        v16 = v14 - v15;
        if (v17)
          v16 = INFINITY;
        if (v15 == INFINITY)
          v16 = NAN;
      }
      if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        v16 = *(float *)(a1 + 144) * floorf((float)(v16 / *(float *)(a1 + 144)) + 0.5);
      *((float *)i + 3) = v16;
    }
  }
}

uint64_t *std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

float std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<S0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  int *v7;
  float result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  v7 = fst::TropicalWeightTpl<float>::Zero();
  result = *(float *)v7;
  v6[11] = *v7;
  *((_QWORD *)v6 + 6) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22BDE7AB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::sort[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *result;
  char v6;

  v2 = *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2;
    do
    {
      ++v3;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }
  result = std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(v2, v3, (uint64_t)&v6);
  *a1 = result;
  return result;
}

uint64_t *std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  if ((unint64_t)a2 >= 2)
  {
    if (a2 == 2)
    {
      v3 = (_QWORD *)*result;
      if (*(_DWORD *)(*result + 8) < *((_DWORD *)result + 2))
      {
        *v3 = result;
        *result = 0;
        return v3;
      }
    }
    else
    {
      if (a2 >= 0)
        v6 = a2;
      else
        v6 = a2 + 1;
      v7 = v6 >> 1;
      v8 = a2 - (v6 >> 1);
      v9 = result;
      if (a2 >= 4)
      {
        v10 = v7;
        v9 = result;
        do
        {
          --v10;
          v9 = (uint64_t *)*v9;
        }
        while (v10 > 1);
      }
      v11 = (uint64_t *)*v9;
      *v9 = 0;
      v12 = (uint64_t *)std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(result, v7, a3);
      v13 = (uint64_t *)std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(v11, v8, a3);
      return std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__merge<std::__less<void,void>>(v12, v13);
    }
  }
  return result;
}

uint64_t *std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__merge<std::__less<void,void>>(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t **v11;
  BOOL v12;

  if (a1)
  {
    if (a2)
    {
      v2 = *((_DWORD *)a1 + 2);
      if (*((_DWORD *)a2 + 2) >= v2)
      {
        v3 = a2;
        a2 = a1;
      }
      else
      {
        v3 = a2;
        do
        {
          v4 = (uint64_t **)v3;
          v3 = (uint64_t *)*v3;
        }
        while (v3 && *((_DWORD *)v3 + 2) < v2);
        *v4 = a1;
      }
      v5 = *a1;
      v6 = v3 != 0;
      if (*a1)
        v7 = v3 == 0;
      else
        v7 = 1;
      if (!v7)
      {
        do
        {
          v8 = (uint64_t *)v5;
          v9 = *(_DWORD *)(v5 + 8);
          if (*((_DWORD *)v3 + 2) < v9)
          {
            v10 = v3;
            do
            {
              v11 = (uint64_t **)v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10 && *((_DWORD *)v10 + 2) < v9);
            *a1 = (uint64_t)v3;
            v3 = *v11;
            *v11 = v8;
          }
          v5 = *v8;
          v6 = v3 != 0;
          if (*v8)
            v12 = v3 == 0;
          else
            v12 = 1;
          a1 = v8;
        }
        while (!v12);
        a1 = v8;
      }
      if (v6)
        *a1 = (uint64_t)v3;
    }
    else
    {
      return a1;
    }
  }
  return a2;
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  int v20;

  State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), (_QWORD **)a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(_QWORD *)(a1 + 160);
    if ((int)State >= (unint64_t)((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2))
    {
      fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, &v20);
      v7 = *(_QWORD *)(v6 + 16);
      v8 = *(_DWORD **)(v6 + 8);
      if ((unint64_t)v8 >= v7)
      {
        v10 = *(_DWORD **)v6;
        v11 = ((uint64_t)v8 - *(_QWORD *)v6) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
          v10 = *(_DWORD **)v6;
          v8 = *(_DWORD **)(v6 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        v17 = &v15[4 * v14];
        *(_DWORD *)v16 = v20;
        v9 = v16 + 4;
        while (v8 != v10)
        {
          v18 = *--v8;
          *((_DWORD *)v16 - 1) = v18;
          v16 -= 4;
        }
        *(_QWORD *)v6 = v16;
        *(_QWORD *)(v6 + 8) = v9;
        *(_QWORD *)(v6 + 16) = v17;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v8 = v20;
        v9 = v8 + 1;
      }
      *(_QWORD *)(v6 + 8) = v9;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t Id;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v8;

  v8 = a2;
  v2 = (a1[15] - a1[14]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = v8;
    if (v8)
    {
      v5 = *v8;
      if (*v8)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          operator delete(v5);
          v5 = v6;
        }
        while (v6);
      }
      *v4 = 0;
      MEMORY[0x22E2FB328](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

int *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, float **a2@<X1>, int *a3@<X8>)
{
  int *result;
  float v7;
  float *i;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;

  result = fst::TropicalWeightTpl<float>::Zero();
  v7 = *(float *)result;
  *a3 = *result;
  for (i = *a2; i; i = *(float **)i)
  {
    v9 = *((int *)i + 2);
    v10 = **(_QWORD **)(a1 + 152);
    if (v9 >= (*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v10) >> 2)
      result = fst::TropicalWeightTpl<float>::Zero();
    else
      result = (int *)(v10 + 4 * v9);
    v11 = i[3];
    if (v11 == -INFINITY || (v12 = *(float *)result, *(float *)result >= -INFINITY) && *(float *)result <= -INFINITY)
    {
      result = fst::TropicalWeightTpl<float>::NoWeight();
      v13 = *(float *)result;
    }
    else
    {
      v14 = v11 == INFINITY || v12 == INFINITY;
      v13 = v12 + v11;
      if (v14)
        v13 = INFINITY;
    }
    if (v7 == -INFINITY || v13 >= -INFINITY && v13 <= -INFINITY)
    {
      result = fst::TropicalWeightTpl<float>::NoWeight();
      v7 = *(float *)result;
    }
    else if (v7 >= v13)
    {
      v7 = v13;
    }
    *(float *)a3 = v7;
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  a1[16] = a2;
  v4 = a1 + 4;
  if (!a3)
  {
    v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::find<int>(v4, &fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
    if (!v6)
      return 0xFFFFFFFFLL;
    return *((unsigned int *)v6 + 4);
  }
  v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v4, &fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey, &fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (!v7)
    return *((unsigned int *)v6 + 4);
  v8 = a1[13];
  v9 = (_QWORD *)a1[14];
  v10 = ((uint64_t)v9 - v8) >> 3;
  *((_DWORD *)v6 + 4) = v10;
  v11 = a1[15];
  if ((unint64_t)v9 >= v11)
  {
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v13 = v11 - v8;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v10 + 1))
      v14 = v10 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 15), v15);
    else
      v16 = 0;
    v17 = &v16[8 * v10];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = *a2;
    v12 = v17 + 8;
    v20 = (char *)a1[13];
    v19 = (char *)a1[14];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)a1[13];
    }
    a1[13] = v17;
    a1[14] = v12;
    a1[15] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = *a2;
    v12 = v9 + 1;
  }
  a1[14] = v12;
  return v10;
}

_QWORD *std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(a1 + 48), *a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if ((fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t **)(a1 + 32), 1uLL);
  *i = 0;
  i[1] = v8;
  *((_DWORD *)i + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v16 = *(float *)(a1 + 56);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 40);
  return i;
}

void sub_22BDE8310(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t ***v2;

  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

unint64_t fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t ***v3;
  unint64_t result;
  uint64_t **v5;

  if (a2 < -1)
    return 0;
  v2 = *a1;
  if (a2 == -1)
    v3 = *(uint64_t ****)(v2 + 128);
  else
    v3 = (uint64_t ***)(*(_QWORD *)(v2 + 104) + 8 * a2);
  v5 = *v3;
  for (result = *((char *)v5 + 8);
        ;
        result ^= (2 * result) ^ (32 * *((int *)v5 + 2)) ^ ((unint64_t)*((int *)v5 + 2) >> 59) ^ *((unsigned int *)v5 + 3))
  {
    v5 = (uint64_t **)*v5;
    if (!v5)
      break;
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;

  if (a2 == a3)
    return 1;
  result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    v5 = *a1;
    if (a2 == -1)
      v6 = *(uint64_t **)(v5 + 128);
    else
      v6 = (uint64_t *)(*(_QWORD *)(v5 + 104) + 8 * a2);
    v7 = *v6;
    if (a3 == -1)
      v8 = *(uint64_t ***)(v5 + 128);
    else
      v8 = (uint64_t **)(*(_QWORD *)(v5 + 104) + 8 * a3);
    if (*((unsigned __int8 *)*v8 + 8) == *(unsigned __int8 *)(v7 + 8))
      return std::operator==[abi:ne180100]<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(*v8, (uint64_t *)v7);
    else
      return 0;
  }
  return result;
}

uint64_t std::operator==[abi:ne180100]<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t *a1, uint64_t *a2)
{
  while (1)
  {
    a1 = (uint64_t *)*a1;
    a2 = (uint64_t *)*a2;
    if (!a1 || a2 == 0)
      break;
    if (*((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2) || *((float *)a1 + 3) != *((float *)a2 + 3))
      return 0;
  }
  return (a1 != 0) ^ (a2 == 0);
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;

  v4 = fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(a1 + 6, *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = a1 + 8;
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if ((fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v12, *((_DWORD *)v11 + 4), *a2) & 1) != 0)return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  _QWORD *MutableState;
  _QWORD *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *((_DWORD *)MutableState + 14);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 14) = v5 | 4;
      v6 = MutableState[4] - MutableState[3] + *(_QWORD *)(a1 + 128) + 64;
      *(_QWORD *)(a1 + 128) = v6;
      *(_BYTE *)(a1 + 120) = 1;
      if (v6 > *(_QWORD *)(a1 + 112))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

_QWORD *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *MutableState;

  v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2)
    return *(_QWORD **)(a1 + 96);
  if (!*(_BYTE *)(a1 + 88))
    return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 92) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 96) = MutableState;
    *((_DWORD *)MutableState + 14) |= 4u;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reserve((uint64_t)(MutableState + 3), 0x80uLL);
    return *(_QWORD **)(a1 + 96);
  }
  v5 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(v5 + 60))
  {
    *(_DWORD *)(v5 + 56) &= ~4u;
    *(_BYTE *)(a1 + 88) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 92) = a2;
  *(_DWORD *)v5 = *fst::TropicalWeightTpl<float>::Zero();
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v5 + 24);
  result = *(_QWORD **)(a1 + 96);
  *((_DWORD *)result + 14) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(uint64_t a1, _QWORD *a2, char a3, float a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *MutableState;
  unint64_t v19;
  int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32[2];
  char v33;
  BOOL v34;
  BOOL v35;
  void *__p[2];
  char v37;

  if (*(_BYTE *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v32, (uint64_t)__p);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache size = ", 15);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)v32);
      if (v37 < 0)
        operator delete(__p[0]);
    }
    v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * a4);
    v15 = *(_QWORD *)(a1 + 40);
LABEL_6:
    *(_QWORD *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      v16 = *(_DWORD *)(v15 + 16);
      if (v16)
        v17 = v16 - 1;
      else
        v17 = *(_DWORD *)(a1 + 92);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, v17);
      v19 = *(_QWORD *)(a1 + 128);
      if (v19 <= v14 || *((_DWORD *)MutableState + 15))
      {
LABEL_23:
        *((_DWORD *)MutableState + 14) &= ~8u;
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        goto LABEL_6;
      }
      if ((a3 & 1) != 0)
      {
        if (MutableState == a2)
          goto LABEL_23;
        v20 = *((_DWORD *)MutableState + 14);
      }
      else
      {
        v20 = *((_DWORD *)MutableState + 14);
        if ((v20 & 8) != 0 || MutableState == a2)
          goto LABEL_23;
      }
      if ((v20 & 4) != 0)
      {
        v21 = MutableState[4] - MutableState[3] + 64;
        v22 = v19 > v21;
        v23 = v19 - v21;
        if (v22)
          *(_QWORD *)(a1 + 128) = v23;
      }
      fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Delete(a1);
      v15 = *(_QWORD *)(a1 + 64);
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 128) <= v14)
    {
      v24 = *(_QWORD *)(a1 + 128);
      if (v14)
      {
        if (v24 > v14)
        {
          v25 = *(_QWORD *)(a1 + 112);
          do
          {
            v25 *= 2;
            v22 = v24 > 2 * v14;
            v14 *= 2;
          }
          while (v22);
          *(_QWORD *)(a1 + 112) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        LogMessage::LogMessage(&v35, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        LogMessage::~LogMessage((LogMessage *)&v35);
        if (v37 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "INFO");
      LogMessage::LogMessage(&v34, (uint64_t)v32);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"), free recently cached = ", 26);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", cache size = ", 15);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", cache frac = ", 15);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", cache limit = ", 16);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)&v34);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
}

void sub_22BDE8A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 4)
  {
    v3 = (uint64_t *)result;
    if (a2 >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v5[4] = result + 24;
    v5[0] = fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate((uint64_t **)(result + 24), a2);
    v5[1] = v5[0] + v4;
    v5[2] = v5[0] + v4;
    v5[3] = v5[0] + 16 * a2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v5);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_22BDE8B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)a1)
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(*(uint64_t ***)(a1 + 32), *(_QWORD **)a1, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 4);
  return a1;
}

_QWORD *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Delete(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 16);
  if (!v1 || v1 - 1 == *(_DWORD *)(a1 + 92))
  {
    *(_DWORD *)(a1 + 92) = -1;
    *(_QWORD *)(a1 + 96) = 0;
  }
  return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(*(_QWORD *)(a1 + 64) + 16)), (uint64_t **)(a1 + 72));
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(*(_QWORD *)(a1 + 64) + 16)) = 0;
  v2 = *(uint64_t **)(a1 + 64);
  v4 = *v2;
  v3 = v2[1];
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)v2[1] = v4;
  --*(_QWORD *)(a1 + 48);
  return std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(a1 + 32, (uint64_t)v2);
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::push_back[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[5];

  v3 = result;
  v4 = result[1];
  v5 = result[2];
  if (v4 >= v5)
  {
    v7 = (uint64_t)(v4 - *result) >> 4;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v9 = (uint64_t **)(result + 3);
    v10 = v5 - *v3;
    if (v10 >> 3 > v8)
      v8 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v8;
    v14[4] = v3 + 3;
    v12 = fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate(v9, v11);
    v13 = &v12[2 * v7];
    v14[0] = v12;
    v14[1] = v13;
    v14[3] = &v12[2 * v11];
    *v13 = *(_QWORD *)a2;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
    *((_DWORD *)v13 + 3) = *(_DWORD *)(a2 + 12);
    v14[2] = v13 + 2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v14);
    v6 = v3[1];
    result = (_QWORD *)std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
    v6 = v4 + 16;
    result[1] = v4 + 16;
  }
  v3[1] = v6;
  return result;
}

void sub_22BDE8D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 120) && (*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24) + *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v4;
    if (v4 > *(_QWORD *)(a1 + 112))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, (_QWORD *)a2, 0, 0.666);
  }
}

uint64_t fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  int v3;

  if (!*(_BYTE *)(a1 + 56))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 4))
    {
      *(_BYTE *)(a1 + 56) = 1;
    }
    else if (!*(_BYTE *)(a1 + 56))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 60) = v3;
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_DWORD *)(a1 + 64) <= v3)
          *(_DWORD *)(a1 + 64) = v3 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 60);
}

float fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *MutableState;
  uint64_t v7;
  float **v8;
  float *v9;
  float result;
  uint64_t v11;

  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 56))(&v11, a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(a1[15], a2);
    *MutableState = v11;
    MutableState[14] |= 9u;
  }
  v7 = a1[15];
  if (*(_DWORD *)(v7 + 92) == (_DWORD)a2)
    v8 = (float **)(v7 + 96);
  else
    v8 = (float **)(*(_QWORD *)(v7 + 8) + 8 * ((int)a2 + 1));
  v9 = *v8;
  result = *v9;
  *a3 = *(_DWORD *)v9;
  return result;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a2 + 8);
  if (a3)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    std::shared_ptr<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::shared_ptr[abi:ne180100]<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,void>(v10, v5);
    v4 = v10[0];
    v6 = v10[1];
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  a1[1] = v4;
  a1[2] = v6;
  *a1 = &off_24F656038;
  return a1;
}

_QWORD *std::shared_ptr<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::shared_ptr[abi:ne180100]<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24F656698;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22BDE9014(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::shared_ptr<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_default_delete<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::__shared_ptr_pointer<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::shared_ptr<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_default_delete<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::shared_ptr<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_default_delete<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
  JUMPOUT(0x22E2FB328);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 64))
    return 0;
  v5 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *(_QWORD *)(v20 + 24);
    v9 = *(_QWORD *)(v20 + 32) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 64);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 64) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 64);
    --*(_DWORD *)(v20 + 60);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64));
  return v4;
}

void sub_22BDE91DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 15);
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_22BDE92A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 60);
  _Unwind_Resume(a1);
}

int *fst::ComputeTotalWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int *a4@<X8>)
{
  int *result;
  float v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  BOOL v13;
  uint64_t v14;

  if (a3)
  {
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) >= (unint64_t)((a2[1] - *a2) >> 2))
      result = fst::TropicalWeightTpl<float>::Zero();
    else
      result = (int *)(*a2 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1));
    *a4 = *result;
  }
  else
  {
    result = fst::TropicalWeightTpl<float>::Zero();
    v8 = *(float *)result;
    *a4 = *result;
    v9 = *a2;
    if (a2[1] != *a2)
    {
      v10 = 0;
      do
      {
        result = (int *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 24))(&v14, a1, v10);
        v11 = *(float *)(v9 + 4 * v10);
        if (v11 == -INFINITY || *(float *)&v14 >= -INFINITY && *(float *)&v14 <= -INFINITY)
        {
          result = fst::TropicalWeightTpl<float>::NoWeight();
          v12 = *(float *)result;
        }
        else
        {
          v13 = *(float *)&v14 == INFINITY || v11 == INFINITY;
          v12 = v11 + *(float *)&v14;
          if (v13)
            v12 = INFINITY;
        }
        if (v8 == -INFINITY || v12 >= -INFINITY && v12 <= -INFINITY)
        {
          result = fst::TropicalWeightTpl<float>::NoWeight();
          v8 = *(float *)result;
        }
        else if (v8 >= v12)
        {
          v8 = v12;
        }
        *(float *)a4 = v8;
        ++v10;
        v9 = *a2;
      }
      while (v10 < (a2[1] - *a2) >> 2);
    }
  }
  return result;
}

uint64_t fst::Reweight<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  uint64_t v26;
  int *v27;
  float v28;
  float v29;
  BOOL v30;
  int *v31;
  float v32;
  int *v33;
  __n128 v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  BOOL v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  signed int v70;
  float v71;
  float v72;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 136))(a1);
  if (!(_DWORD)result)
    return result;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 112))(a1, &v68);
LABEL_3:
  if (v68)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68))
      goto LABEL_90;
    if (v68)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
      goto LABEL_9;
    }
  }
  else if (v70 >= v69)
  {
    goto LABEL_90;
  }
  v7 = v70;
LABEL_9:
  v8 = v7;
  v9 = *a2;
  if (v7 != (a2[1] - *a2) >> 2)
  {
    v10 = fst::TropicalWeightTpl<float>::Zero();
    LODWORD(v64) = 0;
    LODWORD(v64) = *(_DWORD *)(v9 + 4 * v8);
    LODWORD(v67) = 0;
    LODWORD(v67) = *v10;
    v11.n128_u32[0] = v64;
    if (*(float *)&v64 == *(float *)&v67)
      goto LABEL_49;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, float))(*a1 + 272))(a1, v8, &v67, *(float *)&v64);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67))
      {
        if (v67)
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
        if (a3)
        {
LABEL_49:
          if (a3 == 1)
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, __n128))(*a1 + 24))(&v64, a1, v8, v11);
            v21 = *(float *)(v9 + 4 * v8);
            if (v21 == -INFINITY || *(float *)&v64 >= -INFINITY && *(float *)&v64 <= -INFINITY)
            {
              v22 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
            }
            else
            {
              v25 = *(float *)&v64 == INFINITY || v21 == INFINITY;
              v22 = v21 + *(float *)&v64;
              if (v25)
                v22 = INFINITY;
            }
            v62 = v22;
            (*(void (**)(uint64_t *, uint64_t, float *))(*a1 + 160))(a1, v8, &v62);
          }
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 24))(&v64, a1, v8);
          if (*(float *)&v64 == -INFINITY || (v23 = *(float *)(v9 + 4 * v8), v23 >= -INFINITY) && v23 <= -INFINITY)
          {
            v24 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
          }
          else
          {
            v24 = *(float *)&v64 - v23;
            if (*(float *)&v64 == INFINITY)
              v24 = INFINITY;
            if (v23 == INFINITY)
              v24 = NAN;
          }
          v63 = v24;
          (*(void (**)(uint64_t *, uint64_t, float *))(*a1 + 160))(a1, v8, &v63);
        }
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 32))(v68);
        else
          ++v70;
        goto LABEL_3;
      }
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
      v64 = *(_QWORD *)v12;
      v65 = *(float *)(v12 + 8);
      v66 = *(_DWORD *)(v12 + 12);
      v13 = v66;
      v14 = *a2;
      if (v66 < (unint64_t)((a2[1] - *a2) >> 2))
      {
        v15 = fst::TropicalWeightTpl<float>::Zero();
        v72 = 0.0;
        v72 = *(float *)(v14 + 4 * v13);
        v71 = 0.0;
        v71 = *(float *)v15;
        if (v72 != v71)
          break;
      }
LABEL_45:
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
    }
    if (a3)
    {
      if (a3 != 1)
      {
LABEL_44:
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 80))(v67, &v64);
        goto LABEL_45;
      }
      v16 = *(float *)(v9 + 4 * v8);
      if (v16 == -INFINITY || v65 >= -INFINITY && v65 <= -INFINITY)
      {
        v17 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v17 = INFINITY;
        if (v16 == INFINITY || v65 == INFINITY)
        {
LABEL_36:
          v19 = *(float *)(v14 + 4 * v13);
          if (v19 >= -INFINITY && v19 <= -INFINITY)
            goto LABEL_38;
LABEL_39:
          if (v19 == INFINITY)
          {
            v20 = NAN;
          }
          else
          {
            v20 = INFINITY;
            if (v17 != INFINITY)
              v20 = v17 - v19;
          }
          goto LABEL_43;
        }
        v17 = v16 + v65;
      }
      if (v17 != -INFINITY)
        goto LABEL_36;
LABEL_38:
      v20 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
LABEL_43:
      v65 = v20;
      goto LABEL_44;
    }
    if (v65 == -INFINITY || (v18 = *(float *)(v14 + 4 * v13), v18 >= -INFINITY) && v18 <= -INFINITY)
    {
      v17 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else
    {
      v17 = INFINITY;
      if (v65 == INFINITY || v18 == INFINITY)
        goto LABEL_29;
      v17 = v65 + v18;
    }
    if (v17 == -INFINITY)
      goto LABEL_38;
LABEL_29:
    v19 = *(float *)(v9 + 4 * v8);
    if (v19 >= -INFINITY && v19 <= -INFINITY)
      goto LABEL_38;
    goto LABEL_39;
  }
  while (1)
  {
LABEL_90:
    if (!v68)
    {
      if (v70 >= v69)
        break;
      goto LABEL_75;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68) & 1) != 0)
      break;
    if (v68)
    {
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
      goto LABEL_76;
    }
LABEL_75:
    v26 = v70;
LABEL_76:
    if (a3 == 1)
    {
      v27 = fst::TropicalWeightTpl<float>::Zero();
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 24))(&v64, a1, v26);
      v28 = *(float *)v27;
      if (*(float *)v27 == -INFINITY || *(float *)&v64 >= -INFINITY && *(float *)&v64 <= -INFINITY)
      {
        v29 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v30 = *(float *)&v64 == INFINITY || v28 == INFINITY;
        v29 = v28 + *(float *)&v64;
        if (v30)
          v29 = INFINITY;
      }
      v61 = v29;
      (*(void (**)(uint64_t *, uint64_t, float *))(*a1 + 160))(a1, v26, &v61);
    }
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 32))(v68);
    else
      ++v70;
  }
  if ((*(int (**)(uint64_t *))(*a1 + 16))(a1) >= (unint64_t)((a2[1] - *a2) >> 2))
    v31 = fst::TropicalWeightTpl<float>::Zero();
  else
    v31 = (int *)(*a2 + 4 * (*(int (**)(uint64_t *))(*a1 + 16))(a1));
  v32 = *(float *)v31;
  v33 = fst::TropicalWeightTpl<float>::One();
  *(float *)&v64 = v32;
  LODWORD(v67) = 0;
  LODWORD(v67) = *v33;
  v34.n128_f32[0] = v32;
  if (v32 == *(float *)&v67)
    goto LABEL_171;
  v35 = fst::TropicalWeightTpl<float>::Zero();
  *(float *)&v64 = v32;
  LODWORD(v67) = 0;
  LODWORD(v67) = *v35;
  v34.n128_f32[0] = v32;
  if (v32 == *(float *)&v67)
    goto LABEL_171;
  v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, float))(*a1 + 56))(a1, 0x2000000000, 1, v32);
  v37 = *a1;
  if ((v36 & 0x2000000000) == 0)
  {
    v38 = (*(uint64_t (**)(uint64_t *))(v37 + 176))(a1);
    if (a3)
    {
      v39 = *(float *)fst::TropicalWeightTpl<float>::One();
      if (v39 == -INFINITY || v32 >= -INFINITY && v32 <= -INFINITY)
      {
        v40 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else if (v32 == INFINITY)
      {
        v40 = NAN;
      }
      else
      {
        v40 = INFINITY;
        if (v39 != INFINITY)
          v40 = v39 - v32;
      }
    }
    else
    {
      v40 = v32;
    }
    v56 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    v64 = 0;
    v65 = v40;
    v66 = v56;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 184))(a1, v38, &v64);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 152))(a1, v38);
    goto LABEL_171;
  }
  v41 = (*(uint64_t (**)(uint64_t *))(v37 + 16))(a1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 272))(a1, v41, &v67);
  while (2)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67))
    {
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
      v64 = *(_QWORD *)v42;
      v43 = *(float *)(v42 + 8);
      v65 = v43;
      v66 = *(_DWORD *)(v42 + 12);
      if (a3)
      {
        v44 = *(float *)fst::TropicalWeightTpl<float>::One();
        if (v44 == -INFINITY || v32 >= -INFINITY && v32 <= -INFINITY)
        {
          v45 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
          goto LABEL_110;
        }
        if (v32 == INFINITY)
          goto LABEL_117;
        v45 = INFINITY;
        if (v44 != INFINITY)
        {
          v45 = v44 - v32;
LABEL_110:
          if (v45 == -INFINITY)
            goto LABEL_117;
        }
        if (v65 >= -INFINITY && v65 <= -INFINITY)
        {
LABEL_117:
          v46 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else
        {
          v48 = v65 == INFINITY || v45 == INFINITY;
          v46 = v45 + v65;
          if (v48)
            v46 = INFINITY;
        }
      }
      else
      {
        if (v32 == -INFINITY || v43 >= -INFINITY && v43 <= -INFINITY)
          goto LABEL_117;
        v47 = v43 == INFINITY || v32 == INFINITY;
        v46 = v32 + v43;
        if (v47)
          v46 = INFINITY;
      }
      v65 = v46;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 80))(v67, &v64);
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
      continue;
    }
    break;
  }
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  if (a3)
  {
    v49 = *(float *)fst::TropicalWeightTpl<float>::One();
    if (v49 == -INFINITY || v32 >= -INFINITY && v32 <= -INFINITY)
    {
      v50 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else
    {
      v25 = v49 == INFINITY;
      v52 = v49 - v32;
      if (v25)
        v52 = INFINITY;
      if (v32 == INFINITY)
        v50 = NAN;
      else
        v50 = v52;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 24))(&v64, a1, v41);
    if (v50 == -INFINITY || *(float *)&v64 >= -INFINITY && *(float *)&v64 <= -INFINITY)
    {
      v53 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else
    {
      v54 = *(float *)&v64 == INFINITY || v50 == INFINITY;
      v53 = v50 + *(float *)&v64;
      if (v54)
        v53 = INFINITY;
    }
    v59 = v53;
    (*(void (**)(uint64_t *, uint64_t, float *))(*a1 + 160))(a1, v41, &v59);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 24))(&v64, a1, v41);
    if (v32 == -INFINITY || *(float *)&v64 >= -INFINITY && *(float *)&v64 <= -INFINITY)
    {
      v51 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else
    {
      v55 = *(float *)&v64 == INFINITY || v32 == INFINITY;
      v51 = v32 + *(float *)&v64;
      if (v55)
        v51 = INFINITY;
    }
    v60 = v51;
    (*(void (**)(uint64_t *, uint64_t, float *))(*a1 + 160))(a1, v41, &v60);
  }
LABEL_171:
  v57 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, __n128))(*a1 + 56))(a1, 0xFFFFFFFF0007, 0, v34);
  v58 = fst::ReweightProperties(v57);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 168))(a1, v58, 0xFFFFFFFF0007);
  result = v68;
  if (v68)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  return result;
}

void sub_22BDE9E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(exception_object);
}

int *fst::RemoveWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, _DWORD *a2, int a3)
{
  int *result;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  int *v23;
  float v24;
  int v25;
  unsigned int v26;

  result = fst::TropicalWeightTpl<float>::One();
  LODWORD(v23) = 0;
  LODWORD(v23) = *a2;
  LODWORD(v21) = 0;
  LODWORD(v21) = *result;
  if (*(float *)&v23 == *(float *)&v21)
    return result;
  result = fst::TropicalWeightTpl<float>::Zero();
  LODWORD(v23) = 0;
  LODWORD(v23) = *a2;
  LODWORD(v21) = 0;
  LODWORD(v21) = *result;
  v7 = *(float *)&v23;
  if (*(float *)&v23 == *(float *)&v21)
    return result;
  if (a3)
  {
    v23 = 0;
    v24 = 0.0;
    v26 = 0;
    (*(void (**)(uint64_t, int **, float))(*(_QWORD *)a1 + 112))(a1, &v23, v7);
    while (1)
    {
      result = v23;
      if (!v23)
        break;
      v8 = (*(uint64_t (**)(int *))(*(_QWORD *)v23 + 16))(v23);
      result = v23;
      if (v8)
      {
        if (v23)
          return (int *)(*(uint64_t (**)(void))(*(_QWORD *)v23 + 8))();
        return result;
      }
      if (!v23)
        goto LABEL_11;
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 24))();
      if (v23)
        v10 = (*(uint64_t (**)(int *))(*(_QWORD *)v23 + 24))(v23);
      else
        v10 = v26;
LABEL_12:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v21, a1, v10);
      if (*(float *)&v21 == -INFINITY || (v11 = *(float *)a2, *(float *)a2 >= -INFINITY) && *(float *)a2 <= -INFINITY)
      {
        v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        v12 = *(float *)&v21 - v11;
        if (*(float *)&v21 == INFINITY)
          v12 = INFINITY;
        if (v11 == INFINITY)
          v12 = NAN;
      }
      v22 = v12;
      (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 160))(a1, v9, &v22);
      if (v23)
        (*(void (**)(int *))(*(_QWORD *)v23 + 32))(v23);
      else
        ++v26;
    }
    if ((int)v26 >= SLODWORD(v24))
      return result;
LABEL_11:
    v9 = v26;
    v10 = v26;
    goto LABEL_12;
  }
  v13 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 16))(a1, *(float *)&v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 272))(a1, v13, &v21);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v23 = *(int **)v14;
    v15 = *(float *)(v14 + 8);
    v24 = v15;
    v25 = *(_DWORD *)(v14 + 12);
    if (v15 == -INFINITY || (v16 = *(float *)a2, *(float *)a2 >= -INFINITY) && *(float *)a2 <= -INFINITY)
    {
      v17 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v16 == INFINITY)
    {
      v17 = NAN;
    }
    else
    {
      v17 = INFINITY;
      if (v15 != INFINITY)
        v17 = v15 - v16;
    }
    v24 = v17;
    (*(void (**)(uint64_t, int **))(*(_QWORD *)v21 + 80))(v21, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  }
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  (*(void (**)(int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v23, a1, v13);
  if (*(float *)&v23 == -INFINITY || (v18 = *(float *)a2, *(float *)a2 >= -INFINITY) && *(float *)a2 <= -INFINITY)
  {
    v19 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    v19 = *(float *)&v23 - v18;
    if (*(float *)&v23 == INFINITY)
      v19 = INFINITY;
    if (v18 == INFINITY)
      v19 = NAN;
  }
  v20 = v19;
  return (int *)(*(uint64_t (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 160))(a1, v13, &v20);
}

void sub_22BDEA270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t result)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(result + 24);
  if (v1)
    --*v1;
  return result;
}

void CMDPNormalizer::CMDPNormalizer(CMDPNormalizer *this, const __CFLocale *a2)
{
  *(_QWORD *)this = a2;
}

void CMDPNormalizer::~CMDPNormalizer(CMDPNormalizer *this)
{
  CFRelease(*(CFTypeRef *)this);
}

void CMDPNormalizer::normalize(CFLocaleRef *a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  const char *v3;
  const __CFString *v6;
  CFMutableStringRef MutableCopy;

  v3 = a2;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v6 = CFStringCreateWithCStringNoCopy(0, a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  MutableCopy = CFStringCreateMutableCopy(0, 0, v6);
  CFStringLowercase(MutableCopy, *a1);
  CFRelease(v6);
  if (MutableCopy)
  {
    cmdp_string::CreateCppStringFromCFString(MutableCopy, (const __CFString *)1, a3);
  }
  else if (v3[23] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
  }
}

void cmdp_string::CreateCppStringFromCFString(const __CFString *this@<X0>, const __CFString *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  CFIndex Length;
  uint64_t v7;
  char *v8;
  CFIndex v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  if (this)
  {
    v4 = (int)a2;
    Length = CFStringGetLength(this);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    MEMORY[0x24BDAC7A8]();
    v8 = (char *)v10 - v7;
    CFStringGetCString(this, (char *)v10 - v7, v9, 0x8000100u);
    std::string::basic_string[abi:ne180100]<0>(a3, v8);
    if (v4)
      CFRelease(this);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, 0);
  }
}

void sub_22BDEA50C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *CMDPNormalizer::homonymize@<X0>(const void **a1@<X1>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::string *result;
  const std::string *v7;
  uint64_t v8;
  uint64_t i;
  const void *v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[7];

  v77[6] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    v8 = operator new();
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v10, "zero", "0");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v11, "one", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v12, "two", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v13, "three", "3");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v14, "four", "4");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v15, "for", "4");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v16, "five", "5");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v17, "six", "6");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v18, "seven", "7");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v19, "eight", "8");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v20, "nine", "9");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v21, "to", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v22, "and", "&");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v23, "null", "0");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v24, "eins", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v25, "ein", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v26, "eine", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v27, "einer", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v28, "eines", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v29, "einen", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v30, "einem", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v31, "zwei", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v32, "zwo", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v33, "drei", "3");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v34, "vier", "4");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v35, "fünf", "5");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v36, "sechs", "6");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v37, "sieben", "7");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v38, "acht", "8");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v39, "neun", "9");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v40, "zehn", "10");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v41, "elf", "11");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v42, "zwölf", "12");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v43, "cero", "0");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v44, "un", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v45, "uno", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v46, "una", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v47, "dos", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v48, "tres", "3");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v49, "cuatro", "4");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v50, "cinco", "5");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v51, "seis", "6");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v52, "siete", "7");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v53, "ocho", "8");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v54, "nueve", "9");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v55, "zéro", "0");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v56, "une", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v57, "deux", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(v58, "trois", "3");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v59, "quatre", "4");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v60, "cinq", "5");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v61, "sept", "7");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v62, "huit", "8");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v63, "neuf", "9");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v64, "零", "0");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v65, "〇", "0");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v66, "一", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v67, "壱", "1");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v68, "二", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v69, "两", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v70, "兩", "2");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v71, "三", "3");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v72, "四", "4");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v73, "五", "5");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v74, "六", "6");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v75, "七", "7");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v76, "八", "8");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v77, "九", "9");
    std::map<std::string,std::string>::map[abi:ne180100](v8, v10, 68);
    for (i = 402; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v10[i]);
    CMDPNormalizer::homonymize(std::string const&)const::homonym_map = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(CMDPNormalizer::homonymize(std::string const&)const::homonym_map, a1);
  result = (std::string *)CMDPNormalizer::homonymize(std::string const&)const::homonym_map;
  if (CMDPNormalizer::homonymize(std::string const&)const::homonym_map + 8 != v5)
  {
    v7 = (const std::string *)std::map<std::string,std::string>::at(CMDPNormalizer::homonymize(std::string const&)const::homonym_map, a1);
    return std::string::operator=(a2, v7);
  }
  return result;
}

void sub_22BDEAE54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  for (i = 3216; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v2 + i);
  MEMORY[0x22E2FB328](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

__CFArray *CMDPNormalizer::tokenizedString(CMDPNormalizer *this, const __CFString *a2)
{
  __CFArray *Mutable;
  CFIndex Length;
  __CFStringTokenizer *v6;
  CFRange CurrentTokenRange;
  CFIndex v8;
  CFIndex v9;
  const __CFCharacterSet *v10;
  UniChar CharacterAtIndex;
  int v12;
  CFRange v13;
  CFStringRef v14;
  CFRange v16;
  CFRange v17;
  CFRange v18;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a2)
  {
    Length = CFStringGetLength(a2);
    v17.location = 0;
    v17.length = Length;
    v6 = CFStringTokenizerCreate(0, a2, v17, 4uLL, *(CFLocaleRef *)this);
    while (CFStringTokenizerAdvanceToNextToken(v6))
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v6);
      v8 = CurrentTokenRange.length;
      if (RDGetLegitimateCharacters(void)::s_init_char_set != -1)
        dispatch_once(&RDGetLegitimateCharacters(void)::s_init_char_set, &__block_literal_global_6);
      if (CFStringFindCharacterFromSet(a2, (CFCharacterSetRef)RDGetLegitimateCharacters(void)::s_legit_chars, CurrentTokenRange, 0, &v16))
      {
        v9 = CurrentTokenRange.length + CurrentTokenRange.location;
LABEL_7:
        if (v9 < Length - 1)
        {
          if (RDGetLegitimateCharacters(void)::s_init_char_set != -1)
            dispatch_once(&RDGetLegitimateCharacters(void)::s_init_char_set, &__block_literal_global_6);
          v10 = (const __CFCharacterSet *)RDGetLegitimateCharacters(void)::s_legit_chars;
          CharacterAtIndex = CFStringGetCharacterAtIndex(a2, v9 + 1);
          if (CFCharacterSetIsCharacterMember(v10, CharacterAtIndex))
          {
            v12 = CFStringGetCharacterAtIndex(a2, v9);
            if ((v12 - 8208) < 2 || v12 == 173 || v12 == 45)
            {
              while (CFStringTokenizerAdvanceToNextToken(v6))
              {
                v13 = CFStringTokenizerGetCurrentTokenRange(v6);
                if (v13.location > v9)
                {
                  v8 = v13.length - CurrentTokenRange.location + v13.location;
                  v9 = v13.length + v13.location;
                  goto LABEL_7;
                }
              }
            }
          }
        }
        v18.location = CurrentTokenRange.location;
        v18.length = v8;
        v14 = CFStringCreateWithSubstring(0, a2, v18);
        CFArrayAppendValue(Mutable, v14);
        CFRelease(v14);
      }
    }
    CFRelease(v6);
  }
  return Mutable;
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB188(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB1D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB228(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB2C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB318(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB368(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22BDEB3B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ___ZL25RDGetLegitimateCharactersv_block_invoke()
{
  const __CFCharacterSet *Predefined;
  __CFCharacterSet *MutableCopy;
  const __CFCharacterSet *v2;

  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  MutableCopy = CFCharacterSetCreateMutableCopy(0, Predefined);
  v2 = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  CFCharacterSetUnion(MutableCopy, v2);
  CFCharacterSetInvert(MutableCopy);
  RDGetLegitimateCharacters(void)::s_legit_chars = (uint64_t)MutableCopy;
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_22BDEB490(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22BDEB724(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22BDEB850(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

void CMDPToken::CMDPToken(std::string *this, __int128 *a2, std::string::value_type a3, std::string::value_type a4, double a5, double a6, double a7, double a8)
{
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  *(double *)&this[1].__r_.__value_.__l.__data_ = a5;
  *(double *)&this[1].__r_.__value_.__l.__size_ = a6;
  *(double *)&this[1].__r_.__value_.__r.__words[2] = a7;
  *(double *)&this[2].__r_.__value_.__l.__data_ = a8;
  this[2].__r_.__value_.__s.__data_[8] = a3;
  this[2].__r_.__value_.__s.__data_[9] = a4;
}

void cmdp_sausage_util::mergeTokens(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  std::string::value_type *v9;
  std::string::size_type v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  char v17;
  char v18;
  uint64_t v19;
  _BOOL4 v20;
  std::string __p;
  _DWORD v22[2];
  std::string v23;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v23 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  v9 = (std::string::value_type *)v8->__r_.__value_.__r.__words[0];
  v10 = v8->__r_.__value_.__l.__size_;
  v22[0] = v8->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)((char *)&v8->__r_.__value_.__r.__words[2] + 3);
  v11 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(double *)(a1 + 48);
  v16 = *(double *)(a2 + 48);
  v17 = *(_BYTE *)(a2 + 56);
  v18 = *(_BYTE *)(a1 + 57);
  v19 = operator new();
  if ((v11 & 0x80000000) == 0)
  {
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v23.__r_.__value_.__l.__size_ = v10;
    LODWORD(v23.__r_.__value_.__r.__words[2]) = v22[0];
    *(_DWORD *)((char *)&v23.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v22 + 3);
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = v11;
LABEL_20:
    v20 = 0;
    *(std::string *)v19 = v23;
    goto LABEL_21;
  }
  std::string::__init_copy_ctor_external(&v23, v9, v10);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_20;
  std::string::__init_copy_ctor_external((std::string *)v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  v20 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
LABEL_21:
  *(_QWORD *)(v19 + 24) = v12;
  *(_QWORD *)(v19 + 32) = v13;
  *(_QWORD *)(v19 + 40) = v14;
  *(double *)(v19 + 48) = v15 + v16;
  *(_BYTE *)(v19 + 56) = v17;
  *(_BYTE *)(v19 + 57) = v18;
  *a3 = v19;
  if (v20)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v9);
}

void sub_22BDEBC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x22E2FB328](v22, 0x1012C408B718000);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void cmdp_sausage_util::sanitizeTokenSausage(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  const __CFString *v9;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex v11;
  uint64_t v12;
  char v13;
  char v14;
  const __CFString *ValueAtIndex;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  std::string::size_type *v20;
  std::string::size_type v21;
  std::string::size_type *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  std::string::size_type v40;
  __int128 v41;
  int v42;
  std::string::size_type *v43;
  std::string::size_type v44;
  std::string::size_type *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  std::string::size_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  const __CFAllocator *alloc;
  _QWORD *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  std::string __p;
  std::string v63;
  std::string::size_type *v64;
  std::string::size_type *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string v70;
  char *v71;
  unint64_t *v72;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v54 = a1[1];
  if (*a1 == v54)
    return;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  do
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v3 = *(_QWORD **)v2;
    v55 = v2;
    v56 = *(_QWORD **)(v2 + 8);
    if (*(_QWORD **)v2 == v56)
      goto LABEL_85;
    do
    {
      v65 = 0;
      v66 = 0;
      v64 = 0;
      v4 = *v3;
      if (v3[1] == *v3)
        goto LABEL_82;
      v58 = v3;
      v5 = 0;
      do
      {
        v6 = *(__int128 **)(v4 + 8 * v5);
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v7 = *v6;
          v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v7;
        }
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v63;
        else
          v8 = (std::string *)v63.__r_.__value_.__r.__words[0];
        v9 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
        if (CFStringCompare(CFSTR(" "), v9, 0))
        {
          ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(alloc, v9, CFSTR(" "));
          if (!v9)
            goto LABEL_17;
LABEL_16:
          CFRelease(v9);
          goto LABEL_17;
        }
        ArrayBySeparatingStrings = 0;
        if (v9)
          goto LABEL_16;
LABEL_17:
        if (ArrayBySeparatingStrings && CFArrayGetCount(ArrayBySeparatingStrings) >= 2)
        {
          v11 = 0;
          v12 = *(_QWORD *)(v4 + 8 * v5);
          v59 = *(_OWORD *)(v12 + 40);
          v60 = *(_OWORD *)(v12 + 24);
          v13 = *(_BYTE *)(v12 + 57);
          v14 = *(_BYTE *)(v12 + 56);
          while (CFArrayGetCount(ArrayBySeparatingStrings) > v11)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v11);
            cmdp_string::CreateCppStringFromCFString(ValueAtIndex, 0, &__p);
            if (v11)
            {
              if (v11 == CFArrayGetCount(ArrayBySeparatingStrings) - 1)
                v16 = v14;
              else
                v16 = 1;
              v17 = 1;
            }
            else
            {
              v16 = 1;
              v17 = v13;
            }
            v18 = operator new();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v70, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v70 = __p;
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v18, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
              v19 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
              *(_OWORD *)(v18 + 24) = v60;
              *(_OWORD *)(v18 + 40) = v59;
              *(_BYTE *)(v18 + 56) = v16;
              *(_BYTE *)(v18 + 57) = v17;
              v61 = v18;
              if (v19 < 0)
                operator delete(v70.__r_.__value_.__l.__data_);
            }
            else
            {
              *(std::string *)v18 = v70;
              *(_OWORD *)(v18 + 24) = v60;
              *(_OWORD *)(v18 + 40) = v59;
              *(_BYTE *)(v18 + 56) = v16;
              *(_BYTE *)(v18 + 57) = v17;
              v61 = v18;
            }
            v20 = v65;
            if ((unint64_t)v65 >= v66)
            {
              v23 = v65 - v64;
              if ((unint64_t)(v23 + 1) >> 61)
                std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
              v24 = (uint64_t)(v66 - (_QWORD)v64) >> 2;
              if (v24 <= v23 + 1)
                v24 = v23 + 1;
              if (v66 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v25 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              v72 = &v66;
              if (v25)
                v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v66, v25);
              else
                v26 = 0;
              v27 = &v26[8 * v23];
              v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
              v70.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
              v71 = &v26[8 * v25];
              v28 = v61;
              v61 = 0;
              *(_QWORD *)v27 = v28;
              v70.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 8);
              std::vector<std::unique_ptr<CMDPToken>>::__swap_out_circular_buffer((uint64_t *)&v64, &v70);
              v22 = v65;
              std::__split_buffer<std::unique_ptr<CMDPToken>>::~__split_buffer((uint64_t)&v70);
            }
            else
            {
              v21 = v61;
              v61 = 0;
              *v65 = v21;
              v22 = v20 + 1;
            }
            v65 = v22;
            v29 = v61;
            v61 = 0;
            if (v29)
              std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)&v61, v29);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            ++v11;
          }
        }
        else
        {
          v30 = *(__int128 **)(v4 + 8 * v5);
          if (*((char *)v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v31 = *v30;
            v70.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
            *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v31;
          }
          v32 = *(_QWORD *)(v4 + 8 * v5);
          v33 = *(_QWORD *)(v32 + 24);
          v34 = *(_QWORD *)(v32 + 32);
          v35 = *(_QWORD *)(v32 + 40);
          v36 = *(_QWORD *)(v32 + 48);
          v37 = *(_BYTE *)(v32 + 56);
          v38 = *(_BYTE *)(v32 + 57);
          v39 = operator new();
          v40 = v39;
          v41 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
          LODWORD(v61) = v70.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)&v61 + 3) = *(_DWORD *)((char *)&v70.__r_.__value_.__r.__words[2] + 3);
          v42 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
          memset(&v70, 0, sizeof(v70));
          if (v42 < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v39, (const std::string::value_type *)v41, *((std::string::size_type *)&v41 + 1));
          }
          else
          {
            *(_OWORD *)v39 = v41;
            *(_DWORD *)(v39 + 16) = v61;
            *(_DWORD *)(v39 + 19) = *(_DWORD *)((char *)&v61 + 3);
            *(_BYTE *)(v39 + 23) = v42;
          }
          *(_QWORD *)(v40 + 24) = v33;
          *(_QWORD *)(v40 + 32) = v34;
          *(_QWORD *)(v40 + 40) = v35;
          *(_QWORD *)(v40 + 48) = v36;
          *(_BYTE *)(v40 + 56) = v37;
          *(_BYTE *)(v40 + 57) = v38;
          __p.__r_.__value_.__r.__words[0] = v40;
          if (v42 < 0)
            operator delete((void *)v41);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          v43 = v65;
          if ((unint64_t)v65 >= v66)
          {
            v46 = v65 - v64;
            if ((unint64_t)(v46 + 1) >> 61)
              std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
            v47 = (uint64_t)(v66 - (_QWORD)v64) >> 2;
            if (v47 <= v46 + 1)
              v47 = v46 + 1;
            if (v66 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            v72 = &v66;
            if (v48)
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v66, v48);
            else
              v49 = 0;
            v50 = (std::string::size_type *)&v49[8 * v46];
            v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
            v70.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
            v71 = &v49[8 * v48];
            v51 = __p.__r_.__value_.__r.__words[0];
            __p.__r_.__value_.__r.__words[0] = 0;
            *v50 = v51;
            v70.__r_.__value_.__r.__words[2] = (std::string::size_type)(v50 + 1);
            std::vector<std::unique_ptr<CMDPToken>>::__swap_out_circular_buffer((uint64_t *)&v64, &v70);
            v45 = v65;
            std::__split_buffer<std::unique_ptr<CMDPToken>>::~__split_buffer((uint64_t)&v70);
          }
          else
          {
            v44 = __p.__r_.__value_.__r.__words[0];
            __p.__r_.__value_.__r.__words[0] = 0;
            *v65 = v44;
            v45 = v43 + 1;
          }
          v65 = v45;
          v52 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          if (v52)
            std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)&__p, v52);
        }
        if (ArrayBySeparatingStrings)
          CFRelease(ArrayBySeparatingStrings);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        ++v5;
        v4 = *v58;
      }
      while (v5 < (uint64_t)(v58[1] - *v58) >> 3);
      v3 = v58;
      if (v64 != v65)
        std::vector<std::vector<std::unique_ptr<CMDPToken>>>::push_back[abi:ne180100](&v67, (uint64_t)&v64);
LABEL_82:
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
      std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
      v3 += 3;
    }
    while (v3 != v56);
    if (v67 != v68)
      std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::push_back[abi:ne180100](a2, (uint64_t)&v67);
LABEL_85:
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v2 = v55 + 24;
  }
  while (v55 + 24 != v54);
}

void sub_22BDEC264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t *a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  a35 = &a38;
  std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a38 = a10;
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

void cmdp_sausage_util::addArcToFst(uint64_t a1, int a2, int a3, int a4, const char *a5, int a6, uint64_t **a7, CFLocaleRef *a8)
{
  std::string::size_type size;
  char v15;
  std::string v16;
  std::string v17;
  std::string __p;

  CMDPNormalizer::normalize(a8, a5, &__p);
  std::to_string(&v17, a4);
  CMDPFst::addArc(a1, a2, a3, (uint64_t)&v17, (uint64_t)&__p, (double)a6);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a7, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  CMDPNormalizer::homonymize((const void **)&__p.__r_.__value_.__l.__data_, &v17);
  size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v17.__r_.__value_.__l.__size_;
  if (size)
  {
    std::to_string(&v16, a4);
    CMDPFst::addArc(a1, a2, a3, (uint64_t)&v16, (uint64_t)&v17, (double)a6);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a7, (const void **)&v17.__r_.__value_.__l.__data_, (uint64_t)&v17);
    v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  if (v15 < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22BDEC510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t cmdp_sausage_util::needsMerging(uint64_t a1, uint64_t a2, char a3)
{
  std::string::size_type size;
  std::string *v5;
  uint64_t v6;
  std::string *p_p;
  std::string::size_type v8;
  int v9;
  std::string __p;
  std::string v12;

  if ((a3 & 1) != 0)
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v12 = *(std::string *)a1;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v12.__r_.__value_.__l.__size_;
      if (v12.__r_.__value_.__l.__size_)
      {
        v5 = (std::string *)v12.__r_.__value_.__r.__words[0];
        goto LABEL_13;
      }
LABEL_22:
      v9 = 1;
    }
    else
    {
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      if (!*((_BYTE *)&v12.__r_.__value_.__s + 23))
        return 0;
      v5 = &v12;
      do
      {
LABEL_13:
        if (v5->__r_.__value_.__s.__data_[0] < 0)
          goto LABEL_22;
        v6 = MEMORY[0x24BDAC740];
        if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v5->__r_.__value_.__s.__data_[0] + 60) & 0x400) == 0)
          goto LABEL_22;
        v5 = (std::string *)((char *)v5 + 1);
        --size;
      }
      while (size);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v8 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_31;
        }
        v9 = 1;
LABEL_39:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        goto LABEL_22;
      p_p = &__p;
      v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_31:
      while ((p_p->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
           && (*(_DWORD *)(v6 + 4 * p_p->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
      {
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v8)
        {
          v9 = 0;
          goto LABEL_36;
        }
      }
      v9 = 1;
LABEL_36:
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_39;
    }
LABEL_23:
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      if ((v9 & 1) != 0)
        return 0;
    }
    else if (v9)
    {
      return 0;
    }
  }
  else if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a2 + 57))
  {
    return 0;
  }
  return 1;
}

void sub_22BDEC6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cmdp_sausage_util::fstFromSausage(uint64_t *a1@<X0>, CFLocaleRef *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  CMDPFst *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  void **v24;
  void **v25;
  void **v26;
  unint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  void **v35;
  int v36;
  void **v37;
  int v38;
  void **v39;
  void **v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  __int128 v47;
  void **v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  int *v57;
  void **v58;
  void **v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  __int128 *v66;
  __int128 v67;
  uint64_t v68;
  void **v69;
  void **v70;
  char v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  __int128 *v76;
  __int128 v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  int v85;
  int v86;
  _QWORD *v87;
  uint64_t *v88;
  int v89;
  BOOL v90;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  char v101;
  std::string v102;
  void **v103;
  void **v104;
  void **v105;
  int v106;
  int v107;
  void **v108;
  void **v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;

  cmdp_sausage_util::sanitizeTokenSausage(a1, &v111);
  if (v111 == v112)
  {
    *a6 = 0;
  }
  else
  {
    v81 = a6;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v7 = (CMDPFst *)operator new();
    CMDPFst::CMDPFst(v7, 1);
    CMDPFst::setStart(v7, 0);
    v9 = v111;
    v8 = v112;
    if (v112 == v111)
    {
      v12 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v85 = 0;
      v97 = (uint64_t)v7;
      do
      {
        v12 = v11 + 1;
        v13 = (uint64_t *)(v9 + 24 * v10);
        v14 = v13[1];
        v82 = v13 + 1;
        v83 = v13;
        v15 = *v13;
        ++v11;
        if (v14 != *v13)
        {
          v95 = v10;
          v16 = 0;
          v11 = v12;
          v86 = v12;
          do
          {
            v17 = (uint64_t *)(v15 + 24 * v16);
            v18 = v17[1];
            v87 = v17 + 1;
            v88 = v17;
            v99 = *v17;
            v19 = v18 - *v17;
            if (v18 != *v17)
            {
              v20 = 0;
              v21 = v16;
              v22 = v19 >> 3;
              v84 = v21;
              v89 = v21 - 100;
              do
              {
                v98 = v20;
                if (v20)
                {
                  v107 = v11;
                  if (v22 - 1 == v20)
                  {
                    v106 = v12;
                    v90 = 1;
                    v23 = v11;
                  }
                  else
                  {
                    v90 = 0;
                    v23 = v11;
                    v106 = ++v11;
                  }
                }
                else
                {
                  v90 = v19 == 8;
                  if (v19 == 8)
                    v11 = v12;
                  else
                    ++v11;
                  v23 = v85;
                  v106 = v11;
                  v107 = v85;
                }
                v103 = 0;
                v104 = 0;
                v105 = 0;
                v24 = v108;
                v25 = v109;
                if (v109 == v108)
                  goto LABEL_82;
                v26 = 0;
                v27 = 0;
                do
                {
                  if (HIDWORD(v24[3 * v27]) == v23)
                  {
                    if (v26 >= v105)
                    {
                      v29 = v103;
                      v30 = ((char *)v26 - (char *)v103) >> 2;
                      v31 = v30 + 1;
                      if ((unint64_t)(v30 + 1) >> 62)
                        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                      v32 = (char *)v105 - (char *)v103;
                      if (((char *)v105 - (char *)v103) >> 1 > v31)
                        v31 = v32 >> 1;
                      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                        v33 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v33 = v31;
                      if (v33)
                      {
                        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v105, v33);
                        v29 = v103;
                        v26 = v104;
                      }
                      else
                      {
                        v34 = 0;
                      }
                      v35 = (void **)&v34[4 * v30];
                      *(_DWORD *)v35 = v27;
                      v28 = (void **)((char *)v35 + 4);
                      while (v26 != v29)
                      {
                        v36 = *((_DWORD *)v26 - 1);
                        v26 = (void **)((char *)v26 - 4);
                        *((_DWORD *)v35 - 1) = v36;
                        v35 = (void **)((char *)v35 - 4);
                      }
                      v103 = v35;
                      v104 = v28;
                      v105 = (void **)&v34[4 * v33];
                      if (v29)
                        operator delete(v29);
                    }
                    else
                    {
                      *(_DWORD *)v26 = v27;
                      v28 = (void **)((char *)v26 + 4);
                    }
                    v104 = v28;
                    v26 = v28;
                    v24 = v108;
                    v25 = v109;
                  }
                  ++v27;
                }
                while (0xAAAAAAAAAAAAAAABLL * (v25 - v24) > v27);
                v37 = v103;
                if (v103 == v26)
                {
LABEL_82:
                  v71 = !v90;
                  if (-1 - 0x5555555555555555 * ((v112 - v111) >> 3) != v95)
                    v71 = 1;
                  if ((v71 & 1) != 0)
                  {
                    v78 = *(_QWORD *)(v99 + 8 * v98);
                    v102.__r_.__value_.__r.__words[0] = v78;
                    v101 = 0;
                    LODWORD(v100) = v89;
                    if ((unint64_t)v25 >= v110)
                    {
                      v79 = (void **)std::vector<cmdp_sausage_util::SausageArc>::__emplace_back_slow_path<int &,int &,CMDPToken *,BOOL,int>((uint64_t *)&v108, &v107, &v106, (uint64_t *)&v102, &v101, (int *)&v100);
                    }
                    else
                    {
                      cmdp_sausage_util::SausageArc::SausageArc((uint64_t)v25, v107, v106, v78, 0, v89);
                      v79 = v25 + 3;
                    }
                    v109 = v79;
                  }
                  else
                  {
                    v102.__r_.__value_.__r.__words[0] = *(_QWORD *)(v99 + 8 * v98);
                    v72 = *(_QWORD *)(a4 + 24);
                    if (!v72)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v73 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v72 + 48))(v72, &v102);
                    v75 = v106;
                    v74 = v107;
                    v76 = *(__int128 **)(v99 + 8 * v98);
                    if (*((char *)v76 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v76, *((_QWORD *)v76 + 1));
                    }
                    else
                    {
                      v77 = *v76;
                      v102.__r_.__value_.__r.__words[2] = *((_QWORD *)v76 + 2);
                      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v77;
                    }
                    cmdp_sausage_util::addArcToFst(v97, v74, v75, v73, (const char *)&v102, v89, a3, a2);
                    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v102.__r_.__value_.__l.__data_);
                    v7 = (CMDPFst *)v97;
                  }
                }
                else
                {
                  v96 = 1;
                  do
                  {
                    v38 = *(_DWORD *)v37;
                    v39 = v108;
                    v40 = &v108[3 * *(int *)v37];
                    v41 = (uint64_t *)(v40 + 2);
                    if ((cmdp_sausage_util::needsMerging((uint64_t)v40[2], *(_QWORD *)(v99 + 8 * v98), a5) & 1) != 0)
                    {
                      cmdp_sausage_util::mergeTokens(*v41, *(_QWORD *)(v99 + 8 * v98), (uint64_t *)&v100);
                      v42 = !v90;
                      if (-1 - 0x5555555555555555 * ((v112 - v111) >> 3) != v95)
                        v42 = 1;
                      if ((v42 & 1) == 0)
                      {
                        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
                        v43 = *(_QWORD *)(a4 + 24);
                        if (!v43)
                          std::__throw_bad_function_call[abi:ne180100]();
                        v44 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v43 + 48))(v43, &v102);
                        v45 = *(_DWORD *)v40;
                        v46 = v106;
                        if (*((char *)v100 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v100, *((_QWORD *)v100 + 1));
                        }
                        else
                        {
                          v47 = *v100;
                          v102.__r_.__value_.__r.__words[2] = *((_QWORD *)v100 + 2);
                          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v47;
                        }
                        cmdp_sausage_util::addArcToFst(v97, v45, v46, v44, (const char *)&v102, HIDWORD(v39[3 * v38 + 1]), a3, a2);
                        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v102.__r_.__value_.__l.__data_);
                        v7 = (CMDPFst *)v97;
                      }
                      v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
                      v101 = 0;
                      v57 = (int *)&v39[3 * v38 + 1] + 1;
                      v58 = v109;
                      if ((unint64_t)v109 >= v110)
                      {
                        v59 = (void **)std::vector<cmdp_sausage_util::SausageArc>::__emplace_back_slow_path<int &,int &,CMDPToken *,BOOL,int &>((uint64_t *)&v108, (int *)&v39[3 * v38], &v106, (uint64_t *)&v102, &v101, v57);
                      }
                      else
                      {
                        cmdp_sausage_util::SausageArc::SausageArc((uint64_t)v109, *(_DWORD *)v40, v106, (uint64_t)v100, 0, *v57);
                        v59 = v58 + 3;
                      }
                      v109 = v59;
                      v60 = (uint64_t)v100;
                      v100 = 0;
                      if (v60)
                        std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)&v100, v60);
                    }
                    else
                    {
                      v48 = &v39[3 * v38];
                      v50 = *((unsigned __int8 *)v48 + 8);
                      v49 = v48 + 1;
                      if (!v50)
                      {
                        v102.__r_.__value_.__r.__words[0] = *v41;
                        v51 = *(_QWORD *)(a4 + 24);
                        if (!v51)
                          std::__throw_bad_function_call[abi:ne180100]();
                        v52 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v51 + 48))(v51, &v102);
                        v53 = *(_DWORD *)v40;
                        v54 = HIDWORD(v39[3 * v38]);
                        v55 = *v41;
                        if (*(char *)(*v41 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v55, *(_QWORD *)(v55 + 8));
                        }
                        else
                        {
                          v56 = *(_OWORD *)v55;
                          v102.__r_.__value_.__r.__words[2] = *(_QWORD *)(v55 + 16);
                          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v56;
                        }
                        cmdp_sausage_util::addArcToFst(v97, v53, v54, v52, (const char *)&v102, HIDWORD(v39[3 * v38 + 1]), a3, a2);
                        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v102.__r_.__value_.__l.__data_);
                        *v49 = 1;
                        v7 = (CMDPFst *)v97;
                      }
                      v61 = !v90;
                      if (-1 - 0x5555555555555555 * ((v112 - v111) >> 3) != v95)
                        v61 = 1;
                      if ((v61 & 1) == 0 && ((v96 ^ 1) & 1) == 0)
                      {
                        v102.__r_.__value_.__r.__words[0] = *(_QWORD *)(v99 + 8 * v98);
                        v62 = *(_QWORD *)(a4 + 24);
                        if (!v62)
                          std::__throw_bad_function_call[abi:ne180100]();
                        v63 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v62 + 48))(v62, &v102);
                        v65 = v106;
                        v64 = v107;
                        v66 = *(__int128 **)(v99 + 8 * v98);
                        if (*((char *)v66 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v66, *((_QWORD *)v66 + 1));
                        }
                        else
                        {
                          v67 = *v66;
                          v102.__r_.__value_.__r.__words[2] = *((_QWORD *)v66 + 2);
                          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v67;
                        }
                        cmdp_sausage_util::addArcToFst(v97, v64, v65, v63, (const char *)&v102, v89, a3, a2);
                        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v102.__r_.__value_.__l.__data_);
                        v7 = (CMDPFst *)v97;
                      }
                      if ((v96 & 1) != 0)
                      {
                        v68 = *(_QWORD *)(v99 + 8 * v98);
                        v102.__r_.__value_.__r.__words[0] = v68;
                        v101 = 0;
                        LODWORD(v100) = v89;
                        v69 = v109;
                        if ((unint64_t)v109 >= v110)
                        {
                          v70 = (void **)std::vector<cmdp_sausage_util::SausageArc>::__emplace_back_slow_path<int &,int &,CMDPToken *,BOOL,int>((uint64_t *)&v108, &v107, &v106, (uint64_t *)&v102, &v101, (int *)&v100);
                        }
                        else
                        {
                          cmdp_sausage_util::SausageArc::SausageArc((uint64_t)v109, v107, v106, v68, 0, v89);
                          v70 = v69 + 3;
                        }
                        v96 = 0;
                        v109 = v70;
                      }
                      else
                      {
                        v96 = 0;
                      }
                    }
                    v37 = (void **)((char *)v37 + 4);
                  }
                  while (v37 != v26);
                }
                v12 = v86;
                if (v103)
                {
                  v104 = v103;
                  operator delete(v103);
                }
                v20 = v98 + 1;
                v99 = *v88;
                v19 = *v87 - *v88;
                v22 = v19 >> 3;
              }
              while (v19 >> 3 > (unint64_t)(v98 + 1));
              v14 = *v82;
              v16 = v84;
              v15 = *v83;
            }
            ++v16;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3) > v16);
          v9 = v111;
          v8 = v112;
          v10 = v95;
        }
        ++v10;
        v85 = v12;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) > v10);
    }
    CMDPFst::setFinal(v7, v12, 0.0);
    CMDPFst::setSymbols(v7);
    v80 = *((_QWORD *)v7 + 1);
    *((_QWORD *)v7 + 1) = 0;
    *v81 = v80;
    CMDPFst::~CMDPFst(v7);
    MEMORY[0x22E2FB328]();
    v103 = (void **)&v108;
    std::vector<cmdp_sausage_util::SausageArc>::__destroy_vector::operator()[abi:ne180100](&v103);
  }
  v108 = (void **)&v111;
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100](&v108);
}

void sub_22BDECFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  CMDPFst *v38;
  uint64_t v39;

  CMDPFst::~CMDPFst(v38);
  MEMORY[0x22E2FB328]();
  *(_QWORD *)(v39 - 168) = v39 - 136;
  std::vector<cmdp_sausage_util::SausageArc>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 168));
  *(_QWORD *)(v39 - 136) = v39 - 112;
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 136));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22BDED200(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<cmdp_sausage_util::SausageArc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cmdp_sausage_util::SausageArc>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<cmdp_sausage_util::SausageArc>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)v5, v6);
      v7 = v5 - 2;
      v5 -= 3;
    }
    while (v7 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22E2FB328);
}

uint64_t std::vector<cmdp_sausage_util::SausageArc>::__emplace_back_slow_path<int &,int &,CMDPToken *,BOOL,int>(uint64_t *a1, int *a2, int *a3, uint64_t *a4, char *a5, int *a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;

  v7 = *a1;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v15 = (uint64_t)(a1 + 2);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9)
    v9 = 2 * v16;
  if (v16 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v9;
  v25 = a1 + 2;
  if (v17)
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(v15, v17);
  else
    v18 = 0;
  v21 = v18;
  v22 = &v18[24 * v8];
  v23 = (uint64_t)v22;
  v24 = &v18[24 * v17];
  cmdp_sausage_util::SausageArc::SausageArc((uint64_t)v22, *a2, *a3, *a4, *a5, *a6);
  v23 = (uint64_t)(v22 + 24);
  std::vector<cmdp_sausage_util::SausageArc>::__swap_out_circular_buffer(a1, &v21);
  v19 = a1[1];
  std::__split_buffer<cmdp_sausage_util::SausageArc>::~__split_buffer((uint64_t)&v21);
  return v19;
}

void sub_22BDED438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cmdp_sausage_util::SausageArc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cmdp_sausage_util::SausageArc::SausageArc(uint64_t a1, int a2, int a3, uint64_t a4, char a5, int a6)
{
  std::string *v8;
  std::string *v9;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a6;
  v8 = (std::string *)operator new();
  v9 = v8;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
  }
  *(_OWORD *)&v9[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 24);
  *(_OWORD *)&v9[1].__r_.__value_.__r.__words[2] = *(_OWORD *)(a4 + 40);
  LOWORD(v9[2].__r_.__value_.__r.__words[1]) = *(_WORD *)(a4 + 56);
  *(_QWORD *)(a1 + 16) = v9;
  return a1;
}

void sub_22BDED4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x1012C408B718000);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cmdp_sausage_util::SausageArc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cmdp_sausage_util::SausageArc>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cmdp_sausage_util::SausageArc>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      v8 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(v7 - 8) = v8;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cmdp_sausage_util::SausageArc>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cmdp_sausage_util::SausageArc>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<cmdp_sausage_util::SausageArc>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cmdp_sausage_util::SausageArc>,std::reverse_iterator<cmdp_sausage_util::SausageArc*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    v3 = v1 + 2;
    do
    {
      v4 = *v3;
      *v3 = 0;
      if (v4)
        std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)v3, v4);
      v5 = v3 + 1;
      v3 += 3;
    }
    while (v5 != v2);
  }
}

uint64_t std::__split_buffer<cmdp_sausage_util::SausageArc>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<cmdp_sausage_util::SausageArc>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<cmdp_sausage_util::SausageArc>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  for (result = *(_QWORD *)(a1 + 16); result != a2; result = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = result - 24;
    v7 = *(_QWORD *)(result - 8);
    v5 = (_QWORD *)(result - 8);
    v6 = v7;
    *v5 = 0;
    if (v7)
      std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)v5, v6);
  }
  return result;
}

uint64_t std::vector<cmdp_sausage_util::SausageArc>::__emplace_back_slow_path<int &,int &,CMDPToken *,BOOL,int &>(uint64_t *a1, int *a2, int *a3, uint64_t *a4, char *a5, int *a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;

  v7 = *a1;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v15 = (uint64_t)(a1 + 2);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9)
    v9 = 2 * v16;
  if (v16 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v9;
  v25 = a1 + 2;
  if (v17)
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(v15, v17);
  else
    v18 = 0;
  v21 = v18;
  v22 = &v18[24 * v8];
  v23 = (uint64_t)v22;
  v24 = &v18[24 * v17];
  cmdp_sausage_util::SausageArc::SausageArc((uint64_t)v22, *a2, *a3, *a4, *a5, *a6);
  v23 = (uint64_t)(v22 + 24);
  std::vector<cmdp_sausage_util::SausageArc>::__swap_out_circular_buffer(a1, &v21);
  v19 = a1[1];
  std::__split_buffer<cmdp_sausage_util::SausageArc>::~__split_buffer((uint64_t)&v21);
  return v19;
}

void sub_22BDED844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cmdp_sausage_util::SausageArc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::MergeSymbolTable(fst *this, const fst::SymbolTable *a2, const fst::SymbolTable *a3, BOOL *a4)
{
  _QWORD *v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _OWORD *size;
  __int128 v32;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer first;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  __int128 v40;
  std::string::size_type v41;
  std::string::size_type i;
  std::string::size_type v43;
  const fst::SymbolTable *v44;
  std::string v45;
  std::string v46;
  std::__split_buffer<std::string> __p;

  v7 = (_QWORD *)operator new();
  (*(void (**)(fst *))(*(_QWORD *)this + 112))(this);
  std::operator+<char>();
  v8 = std::string::append(&v45, "_");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 112))(a2);
  v11 = *(char *)(v10 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)v10;
  else
    v12 = *(const std::string::value_type **)v10;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v10 + 23);
  else
    v13 = *(_QWORD *)(v10 + 8);
  v14 = std::string::append(&v46, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  __p.__end_ = (std::__split_buffer<std::string>::pointer)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__first_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *v7 = &off_24F6568C8;
  std::allocate_shared[abi:ne180100]<fst::internal::SymbolTableImpl,std::allocator<fst::internal::SymbolTableImpl>,std::string const&,void>((__int128 *)&__p, v7 + 1);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v16 = (*(uint64_t (**)(fst *))(*(_QWORD *)this + 120))(this);
  v17 = (*(uint64_t (**)(fst *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  if (!v16)
  {
    v19 = 0;
    if (!a3)
      goto LABEL_31;
    goto LABEL_30;
  }
  v18 = v17;
  v44 = a3;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  do
  {
    (*(void (**)(std::__split_buffer<std::string> *__return_ptr, fst *, uint64_t))(*(_QWORD *)this + 72))(&__p, this, v18);
    (*(void (**)(_QWORD *, std::__split_buffer<std::string> *, uint64_t))(*v7 + 24))(v7, &__p, v18);
    if (SHIBYTE(__p.__end_) < 0)
    {
      operator delete(__p.__first_);
      if (!v21)
      {
LABEL_22:
        v21 = 0;
        goto LABEL_23;
      }
    }
    else if (!v21)
    {
      goto LABEL_22;
    }
    (*(void (**)(std::__split_buffer<std::string> *__return_ptr, fst *, uint64_t))(*(_QWORD *)this + 72))(&__p, this, v18);
    v22 = (*(uint64_t (**)(const fst::SymbolTable *, std::__split_buffer<std::string> *))(*(_QWORD *)a2 + 80))(a2, &__p);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    v21 = v22 != -1;
    if (!((v22 == -1) | v19 & 1))
      v19 = v22 != v18;
LABEL_23:
    if (++v20 < v16)
      v18 = (*(uint64_t (**)(fst *, uint64_t))(*(_QWORD *)this + 64))(this, v20);
  }
  while (v16 != v20);
  if (v21)
  {
    a3 = v44;
    if (!v44)
    {
LABEL_31:
      v23 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 16))(a2);
      goto LABEL_32;
    }
LABEL_30:
    *(_BYTE *)a3 = v19 & 1;
    goto LABEL_31;
  }
  memset(&v46, 0, sizeof(v46));
  v25 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
  v26 = (*(uint64_t (**)(const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0);
  if (v25)
  {
    v27 = v26;
    v28 = 0;
    v29 = 1;
    while (1)
    {
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 72))(&__p, a2, v27);
      v30 = (*(uint64_t (**)(_QWORD *, std::__split_buffer<std::string> *))(*v7 + 80))(v7, &__p);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if (v30 == -1)
        break;
      v19 |= v30 != v27;
LABEL_60:
      if (++v28 < v25)
        v27 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 64))(a2, v28);
      if (v25 == v28)
        goto LABEL_65;
    }
    (*(void (**)(std::__split_buffer<std::string> *__return_ptr, _QWORD *, uint64_t))(*v7 + 72))(&__p, v7, v27);
    if (SHIBYTE(__p.__end_) < 0)
    {
      begin = __p.__begin_;
      operator delete(__p.__first_);
      if (!begin)
        goto LABEL_45;
LABEL_42:
      (*(void (**)(std::string *__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 72))(&v45, a2, v27);
      size = (_OWORD *)v46.__r_.__value_.__l.__size_;
      if (v46.__r_.__value_.__l.__size_ >= v46.__r_.__value_.__r.__words[2])
      {
        v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46.__r_.__value_.__l.__size_ - v46.__r_.__value_.__r.__words[0]) >> 3);
        v36 = v35 + 1;
        if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556
           * ((uint64_t)(v46.__r_.__value_.__r.__words[2] - v46.__r_.__value_.__r.__words[0]) >> 3) > v36)
          v36 = 0x5555555555555556
              * ((uint64_t)(v46.__r_.__value_.__r.__words[2] - v46.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v46.__r_.__value_.__r.__words[2] - v46.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v37 = 0xAAAAAAAAAAAAAAALL;
        else
          v37 = v36;
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__r_.__value_.__r.__words[2];
        if (v37)
          v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>((uint64_t)&v46.__r_.__value_.__r.__words[2], v37);
        else
          v38 = 0;
        v39 = v38 + v35;
        __p.__first_ = v38;
        __p.__begin_ = v39;
        __p.__end_cap_.__value_ = &v38[v37];
        v40 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        v39->__r_.__value_.__r.__words[2] = v45.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        memset(&v45, 0, sizeof(v45));
        __p.__end_ = v39 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v46, &__p);
        v41 = v46.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&__p);
        v46.__r_.__value_.__l.__size_ = v41;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        {
          first = (std::__split_buffer<std::string>::pointer)v45.__r_.__value_.__r.__words[0];
LABEL_58:
          operator delete(first);
        }
      }
      else
      {
        v32 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(_QWORD *)(v46.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
        *size = v32;
        v46.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
      }
    }
    else
    {
      if (HIBYTE(__p.__end_))
        goto LABEL_42;
LABEL_45:
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 72))(&__p, a2, v27);
      (*(void (**)(_QWORD *, std::__split_buffer<std::string> *, uint64_t))(*v7 + 24))(v7, &__p, v27);
      if (SHIBYTE(__p.__end_) < 0)
      {
        first = __p.__first_;
        goto LABEL_58;
      }
    }
    v29 = 0;
    goto LABEL_60;
  }
  v29 = 1;
LABEL_65:
  if (v44)
    *(_BYTE *)v44 = v19 & 1;
  if ((v29 & 1) != 0)
  {
    v23 = (*(uint64_t (**)(fst *))(*(_QWORD *)this + 16))(this);
    __p.__first_ = &v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_32:
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    return (_QWORD *)v23;
  }
  else
  {
    v43 = v46.__r_.__value_.__l.__size_;
    for (i = v46.__r_.__value_.__r.__words[0]; i != v43; i += 24)
      (*(void (**)(_QWORD *, std::string::size_type))(*v7 + 32))(v7, i);
    __p.__first_ = &v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  return v7;
}

void sub_22BDEDDE0(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, uint64_t a9, void **__pa, uint64_t a11, std::__split_buffer<std::string> *a12, void *a13)
{
  uint64_t v13;

  __pa = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&__pa);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<fst::internal::SymbolTableImpl>::shared_ptr[abi:ne180100]<fst::internal::SymbolTableImpl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24F656850;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22BDEDF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<fst::internal::SymbolTableImpl>::reset[abi:ne180100]((fst::internal::SymbolTableImpl **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<fst::internal::SymbolTableImpl *,std::shared_ptr<fst::internal::SymbolTableImpl>::__shared_ptr_default_delete<fst::internal::SymbolTableImpl,fst::internal::SymbolTableImpl>,std::allocator<fst::internal::SymbolTableImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2FB328);
}

fst::internal::SymbolTableImpl *std::__shared_ptr_pointer<fst::internal::SymbolTableImpl *,std::shared_ptr<fst::internal::SymbolTableImpl>::__shared_ptr_default_delete<fst::internal::SymbolTableImpl,fst::internal::SymbolTableImpl>,std::allocator<fst::internal::SymbolTableImpl>>::__on_zero_shared(uint64_t a1)
{
  fst::internal::SymbolTableImpl *result;

  result = *(fst::internal::SymbolTableImpl **)(a1 + 24);
  if (result)
  {
    fst::internal::SymbolTableImpl::~SymbolTableImpl(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::internal::SymbolTableImpl *,std::shared_ptr<fst::internal::SymbolTableImpl>::__shared_ptr_default_delete<fst::internal::SymbolTableImpl,fst::internal::SymbolTableImpl>,std::allocator<fst::internal::SymbolTableImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

fst::internal::SymbolTableImpl *std::unique_ptr<fst::internal::SymbolTableImpl>::reset[abi:ne180100](fst::internal::SymbolTableImpl **a1, fst::internal::SymbolTableImpl *a2)
{
  fst::internal::SymbolTableImpl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    fst::internal::SymbolTableImpl::~SymbolTableImpl(result);
    JUMPOUT(0x22E2FB328);
  }
  return result;
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<long long>::vector((_QWORD *)this + 5, 0x10uLL);
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  for (*((_QWORD *)this + 8) = v2 - v3 - 1; v3 != v2; ++v3)
    *v3 = *(_QWORD *)this;
  return this;
}

void sub_22BDEE0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this, const fst::internal::DenseSymbolMap *a2)
{
  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 8), *((__int128 **)a2 + 1), *((__int128 **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)this + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  return this;
}

void sub_22BDEE178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t fst::internal::DenseSymbolMap::InsertOrFind(fst::internal::DenseSymbolMap *this, __int128 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *i;
  __int128 *v23;

  v4 = (uint64_t *)((char *)this + 8);
  v5 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  if ((float)((float)(unint64_t)(v5 >> 3) * 0.75) <= (float)(0xAAAAAAAAAAAAAAABLL
                                                                   * ((uint64_t)(*((_QWORD *)this + 2)
                                                                              - *((_QWORD *)this + 1)) >> 3)))
    fst::internal::DenseSymbolMap::Rehash(this, v5 >> 2);
  v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, (uint64_t)a2);
  v7 = *((_QWORD *)this + 8);
  v8 = *((_QWORD *)this + 5);
  v9 = v6 & v7;
  v10 = *(_QWORD *)(v8 + 8 * (v6 & v7));
  v12 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 1);
  v23 = a2;
  if (v10 != *(_QWORD *)this)
  {
    v16 = *((_BYTE *)a2 + 23);
    if (v16 >= 0)
      v17 = *((unsigned __int8 *)a2 + 23);
    else
      v17 = *((_QWORD *)a2 + 1);
    if (v16 < 0)
      a2 = *(__int128 **)a2;
    do
    {
      v18 = (unsigned __int8 *)(v11 + 24 * v10);
      v19 = v18[23];
      if ((v19 & 0x80u) == 0)
        v20 = v18[23];
      else
        v20 = *((_QWORD *)v18 + 1);
      if (v20 == v17)
      {
        if ((v19 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v18, a2, *((_QWORD *)v18 + 1)))
            return v10;
        }
        else
        {
          if (!v18[23])
            return v10;
          for (i = a2; *v18 == *(unsigned __int8 *)i; i = (__int128 *)((char *)i + 1))
          {
            ++v18;
            if (!--v19)
              return v10;
          }
        }
      }
      v9 = (v9 + 1) & v7;
      v10 = *(_QWORD *)(v8 + 8 * v9);
    }
    while (v10 != v12);
  }
  v14 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v11) >> 3);
  *(_QWORD *)(v8 + 8 * v9) = v10;
  if (v14 >= v13)
  {
    v15 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v4, v23);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v23);
    v15 = v14 + 24;
  }
  *((_QWORD *)this + 2) = v15;
  return v10;
}

void fst::internal::DenseSymbolMap::Rehash(fst::internal::DenseSymbolMap *this, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string __p;

  std::vector<long long>::resize((uint64_t)this + 40, a2);
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  for (*((_QWORD *)this + 8) = v3 - v4 - 1; v4 != v3; ++v4)
    *v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v5)
  {
    v6 = 0;
    do
    {
      v7 = (__int128 *)(v5 + 24 * v6);
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v8 = *v7;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
      }
      v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, (uint64_t)&__p);
      v10 = *((_QWORD *)this + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v10 & v9;
      v12 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v12 + 8 * (v10 & v9)) != *(_QWORD *)this)
      {
        do
          v11 = *((_QWORD *)this + 8) & (v11 + 1);
        while (*(_QWORD *)(v12 + 8 * v11) != *(_QWORD *)this);
      }
      *(_QWORD *)(v12 + 8 * v11) = v6++;
      v5 = *((_QWORD *)this + 1);
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v5) >> 3));
  }
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t fst::internal::DenseSymbolMap::Find(uint64_t *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *i;

  v2 = (_BYTE *)a2;
  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), a2);
  v5 = a1[8];
  v6 = a1[5];
  v7 = *a1;
  v8 = v4 & v5;
  v9 = *(_QWORD *)(v6 + 8 * (v4 & v5));
  if (v9 != *a1)
  {
    v11 = a1[1];
    v12 = v2[23];
    if (v12 >= 0)
      v13 = v2[23];
    else
      v13 = *((_QWORD *)v2 + 1);
    if (v12 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v14 = (unsigned __int8 *)(v11 + 24 * v9);
      v15 = v14[23];
      if ((v15 & 0x80u) == 0)
        v16 = v14[23];
      else
        v16 = *((_QWORD *)v14 + 1);
      if (v16 == v13)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v14, v2, *((_QWORD *)v14 + 1)))
            return v9;
        }
        else
        {
          if (!v14[23])
            return v9;
          for (i = v2; *v14 == *i; ++i)
          {
            ++v14;
            if (!--v15)
              return v9;
          }
        }
      }
      v8 = (v8 + 1) & v5;
      v9 = *(_QWORD *)(v6 + 8 * v8);
    }
    while (v9 != v7);
  }
  return v7;
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void fst::internal::DenseSymbolMap::RemoveSymbol(fst::internal::DenseSymbolMap *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v6, (__int128 *)(*((_QWORD *)this + 1) + 24 * a2 + 24), *((__int128 **)this + 2), *((_QWORD *)this + 1) + 24 * a2);
  v4 = v3;
  v5 = *((_QWORD *)this + 2);
  if (v5 != v3)
  {
    do
    {
      if (*(char *)(v5 - 1) < 0)
        operator delete(*(void **)(v5 - 24));
      v5 -= 24;
    }
    while (v5 != v4);
  }
  *((_QWORD *)this + 2) = v4;
  fst::internal::DenseSymbolMap::Rehash(this, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
}

uint64_t fst::internal::SymbolTableImpl::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t NthKey;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  char v32;
  uint64_t v33;
  BOOL v34;

  v33 = a3;
  if (a3 == -1)
    return -1;
  v6 = fst::internal::DenseSymbolMap::InsertOrFind((fst::internal::DenseSymbolMap *)(a1 + 40), (__int128 *)a2);
  if ((v7 & 1) != 0)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) - 1 == a3
      && *(_QWORD *)(a1 + 32) == a3)
    {
      *(_QWORD *)(a1 + 32) = a3 + 1;
      v9 = a3;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(uint64_t **)(a1 + 120);
      if ((unint64_t)v11 >= v10)
      {
        v20 = *(uint64_t **)(a1 + 112);
        v21 = v11 - v20;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        v22 = v10 - (_QWORD)v20;
        v23 = (uint64_t)(v10 - (_QWORD)v20) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 128, v24);
          v20 = *(uint64_t **)(a1 + 112);
          v11 = *(uint64_t **)(a1 + 120);
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = a3;
        v12 = v26 + 1;
        while (v11 != v20)
        {
          v28 = *--v11;
          *--v26 = v28;
        }
        *(_QWORD *)(a1 + 112) = v26;
        *(_QWORD *)(a1 + 120) = v12;
        *(_QWORD *)(a1 + 128) = v27;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = a3;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a1 + 120) = v12;
      v29 = -1 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
      __p[0] = &v33;
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 136), &v33, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5] = v29;
      v9 = v33;
    }
    if (v9 >= *(_QWORD *)(a1 + 24))
      *(_QWORD *)(a1 + 24) = v9 + 1;
    *(_BYTE *)(a1 + 160) = 0;
  }
  else
  {
    NthKey = fst::internal::SymbolTableImpl::GetNthKey((fst::internal::SymbolTableImpl *)a1, v6);
    if (NthKey == a3)
    {
      return a3;
    }
    else
    {
      v9 = NthKey;
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        LogMessage::LogMessage(&v34, (uint64_t)__p);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SymbolTable::AddSymbol: symbol = ", 33);
        v14 = *(char *)(a2 + 23);
        if (v14 >= 0)
          v15 = a2;
        else
          v15 = *(_QWORD *)a2;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(a2 + 23);
        else
          v16 = *(_QWORD *)(a2 + 8);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" already in symbol_map_ with key = ", 35);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" but supplied new key = ", 24);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" (ignoring new key)", 19);
        LogMessage::~LogMessage((LogMessage *)&v34);
        if (v32 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return v9;
}

void sub_22BDEE8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::internal::SymbolTableImpl::MaybeRecomputeCheckSum(fst::internal::SymbolTableImpl *this)
{
  std::mutex *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  std::string *v15;
  void **v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void **v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  int v33;
  int v34;
  std::string *v35;
  fst::internal::SymbolTableImpl *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void **v45;
  int v46;
  unsigned __int8 v47;
  uint64_t v48;
  char v49;
  char v50;
  int v51;
  int v52;
  int v53;
  std::string *v54;
  fst::internal::SymbolTableImpl *v55;
  fst::internal::SymbolTableImpl *v56;
  BOOL v57;
  void **v58;
  std::mutex *v59;
  void *__p;
  int v61;
  unsigned __int8 v62;
  void *v63[2];
  char v64;
  std::string v65;
  void *v66;
  char v67;
  _BYTE v68[152];
  int v69;
  std::string v70;
  int v71;
  std::string v72;

  v2 = (std::mutex *)((char *)this + 216);
  std::mutex::lock((std::mutex *)((char *)this + 216));
  v3 = *((unsigned __int8 *)this + 160);
  std::mutex::unlock(v2);
  if (!v3)
  {
    std::mutex::lock(v2);
    if (!*((_BYTE *)this + 160))
    {
      v59 = v2;
      fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v71);
      v5 = *((_QWORD *)this + 6);
      v4 = *((_QWORD *)this + 7);
      if (v4 != v5)
      {
        v6 = 0;
        do
        {
          v7 = (char *)(v5 + 24 * v6);
          if (v7[23] < 0)
          {
            v8 = *((unsigned int *)v7 + 2);
            v7 = *(char **)v7;
          }
          else
          {
            v8 = v7[23];
          }
          if ((int)v8 >= 1)
          {
            do
            {
              v10 = *v7++;
              v9 = v10;
              v11 = v71++;
              v12 = -v11 < 0;
              v13 = -v11 & 0x1F;
              v14 = v11 & 0x1F;
              if (!v12)
                v14 = -v13;
              if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v15 = &v72;
              else
                v15 = (std::string *)v72.__r_.__value_.__r.__words[0];
              v15->__r_.__value_.__s.__data_[v14] ^= v9;
              --v8;
            }
            while (v8);
            v5 = *((_QWORD *)this + 6);
            v4 = *((_QWORD *)this + 7);
          }
          ++v71;
          ++v6;
        }
        while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3));
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v65, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
      else
        v65 = v72;
      v16 = (void **)((char *)this + 168);
      if (*((char *)this + 191) < 0)
        operator delete(*v16);
      *(_OWORD *)v16 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
      *((_QWORD *)this + 23) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
      fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v69);
      if (*((uint64_t *)this + 4) >= 1)
      {
        v17 = 0;
        v18 = *MEMORY[0x24BEDB800];
        v19 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v20 = MEMORY[0x24BEDB848] + 16;
        do
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v65);
          v21 = *((_QWORD *)this + 6) + 24 * v17;
          v22 = *(char *)(v21 + 23);
          if (v22 >= 0)
            v23 = *((_QWORD *)this + 6) + 24 * v17;
          else
            v23 = *(_QWORD *)v21;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(v21 + 23);
          else
            v24 = *(_QWORD *)(v21 + 8);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, v23, v24);
          LOBYTE(v63[0]) = 9;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v63, 1);
          std::ostream::operator<<();
          std::stringbuf::str();
          if (v64 >= 0)
            v26 = v63;
          else
            v26 = (void **)v63[0];
          std::stringbuf::str();
          v27 = v62;
          v28 = v62;
          if ((v62 & 0x80u) != 0)
            v27 = v61;
          if (v27 >= 1)
          {
            v29 = v27;
            do
            {
              v31 = *(_BYTE *)v26;
              v26 = (void **)((char *)v26 + 1);
              v30 = v31;
              v32 = v69++;
              v12 = -v32 < 0;
              v33 = -v32 & 0x1F;
              v34 = v32 & 0x1F;
              if (!v12)
                v34 = -v33;
              if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v35 = &v70;
              else
                v35 = (std::string *)v70.__r_.__value_.__r.__words[0];
              v35->__r_.__value_.__s.__data_[v34] ^= v30;
              --v29;
            }
            while (v29);
            v28 = v62;
          }
          if ((v28 & 0x80) != 0)
            operator delete(__p);
          if (v64 < 0)
            operator delete(v63[0]);
          v65.__r_.__value_.__r.__words[0] = v18;
          *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = v19;
          v65.__r_.__value_.__l.__size_ = v20;
          if (v67 < 0)
            operator delete(v66);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x22E2FB2D4](v68);
          ++v17;
        }
        while (v17 < *((_QWORD *)this + 4));
      }
      v36 = (fst::internal::SymbolTableImpl *)*((_QWORD *)this + 17);
      if (v36 != (fst::internal::SymbolTableImpl *)((char *)this + 144))
      {
        v37 = *MEMORY[0x24BEDB800];
        v38 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v39 = MEMORY[0x24BEDB848] + 16;
        do
        {
          if (*((_QWORD *)v36 + 4) >= *((_QWORD *)this + 4))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v65);
            v40 = *((_QWORD *)this + 6) + 24 * *((_QWORD *)v36 + 5);
            v41 = *(char *)(v40 + 23);
            if (v41 >= 0)
              v42 = *((_QWORD *)this + 6) + 24 * *((_QWORD *)v36 + 5);
            else
              v42 = *(_QWORD *)v40;
            if (v41 >= 0)
              v43 = *(unsigned __int8 *)(v40 + 23);
            else
              v43 = *(_QWORD *)(v40 + 8);
            v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, v42, v43);
            LOBYTE(v63[0]) = 9;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v63, 1);
            std::ostream::operator<<();
            std::stringbuf::str();
            if (v64 >= 0)
              v45 = v63;
            else
              v45 = (void **)v63[0];
            std::stringbuf::str();
            v46 = v62;
            v47 = v62;
            if ((v62 & 0x80u) != 0)
              v46 = v61;
            if (v46 >= 1)
            {
              v48 = v46;
              do
              {
                v50 = *(_BYTE *)v45;
                v45 = (void **)((char *)v45 + 1);
                v49 = v50;
                v51 = v69++;
                v12 = -v51 < 0;
                v52 = -v51 & 0x1F;
                v53 = v51 & 0x1F;
                if (!v12)
                  v53 = -v52;
                if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v54 = &v70;
                else
                  v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
                v54->__r_.__value_.__s.__data_[v53] ^= v49;
                --v48;
              }
              while (v48);
              v47 = v62;
            }
            if ((v47 & 0x80) != 0)
              operator delete(__p);
            if (v64 < 0)
              operator delete(v63[0]);
            v65.__r_.__value_.__r.__words[0] = v37;
            *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + *(_QWORD *)(v37 - 24)) = v38;
            v65.__r_.__value_.__l.__size_ = v39;
            if (v67 < 0)
              operator delete(v66);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x22E2FB2D4](v68);
          }
          v55 = (fst::internal::SymbolTableImpl *)*((_QWORD *)v36 + 1);
          if (v55)
          {
            do
            {
              v56 = v55;
              v55 = *(fst::internal::SymbolTableImpl **)v55;
            }
            while (v55);
          }
          else
          {
            do
            {
              v56 = (fst::internal::SymbolTableImpl *)*((_QWORD *)v36 + 2);
              v57 = *(_QWORD *)v56 == (_QWORD)v36;
              v36 = v56;
            }
            while (!v57);
          }
          v36 = v56;
        }
        while (v56 != (fst::internal::SymbolTableImpl *)((char *)this + 144));
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      {
        v2 = v59;
        std::string::__init_copy_ctor_external(&v65, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
      }
      else
      {
        v65 = v70;
        v2 = v59;
      }
      v58 = (void **)((char *)this + 192);
      if (*((char *)this + 215) < 0)
        operator delete(*v58);
      *(_OWORD *)v58 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
      *((_QWORD *)this + 26) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
      *((_BYTE *)this + 160) = 1;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
    }
    std::mutex::unlock(v2);
  }
}

void sub_22BDEEE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 121) < 0)
    operator delete(*(void **)(v20 - 144));
  if (*(char *)(v20 - 89) < 0)
    operator delete(*(void **)(v20 - 112));
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_22BDEEFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x22E2FB2D4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2FB2D4](a1 + 112);
  return a1;
}

unint64_t fst::internal::SymbolTableImpl::GetNthKey(fst::internal::SymbolTableImpl *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if ((a2 & 0x8000000000000000) != 0)
    return -1;
  v3 = *((_QWORD *)this + 6);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v3) >> 3) <= a2)
    return -1;
  if (*((_QWORD *)this + 4) <= (int64_t)a2)
  {
    v4 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, v3 + 24 * a2);
    a2 = v4;
    if (v4 != -1)
    {
      v5 = *((_QWORD *)this + 4);
      v6 = __OFSUB__(v4, v5);
      v7 = v4 - v5;
      if (v7 < 0 == v6)
        return *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v7);
    }
  }
  return a2;
}

void fst::internal::SymbolTableImpl::RemoveSymbol(fst::internal::SymbolTableImpl *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  fst::internal::SymbolTableImpl *v12;
  uint64_t v13;
  fst::internal::SymbolTableImpl *v14;
  fst::internal::SymbolTableImpl *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  int64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v4 = a2;
    if (*((_QWORD *)this + 4) > a2)
      goto LABEL_14;
  }
  v5 = (uint64_t *)((char *)this + 144);
  v6 = (_QWORD *)*((_QWORD *)this + 18);
  if (v6)
  {
    v7 = (uint64_t **)((char *)this + 136);
    v8 = (uint64_t *)((char *)this + 144);
    do
    {
      v9 = v6[4];
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = v6;
      else
        v11 = v6 + 1;
      if (!v10)
        v8 = v6;
      v6 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v5 && v8[4] <= a2)
    {
      v4 = v8[5];
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__remove_node_pointer(v7, v8);
      operator delete(v8);
      if ((v4 & 0x8000000000000000) == 0)
      {
LABEL_14:
        if (v4 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3))
        {
          fst::internal::DenseSymbolMap::RemoveSymbol((fst::internal::SymbolTableImpl *)((char *)this + 40), v4);
          v12 = (fst::internal::SymbolTableImpl *)*((_QWORD *)this + 17);
          if (v12 != (fst::internal::SymbolTableImpl *)((char *)this + 144))
          {
            do
            {
              v13 = *((_QWORD *)v12 + 5);
              if (v13 > v4)
                *((_QWORD *)v12 + 5) = v13 - 1;
              v14 = (fst::internal::SymbolTableImpl *)*((_QWORD *)v12 + 1);
              if (v14)
              {
                do
                {
                  v15 = v14;
                  v14 = *(fst::internal::SymbolTableImpl **)v14;
                }
                while (v14);
              }
              else
              {
                do
                {
                  v15 = (fst::internal::SymbolTableImpl *)*((_QWORD *)v12 + 2);
                  v16 = *(_QWORD *)v15 == (_QWORD)v12;
                  v12 = v15;
                }
                while (!v16);
              }
              v12 = v15;
            }
            while (v15 != (fst::internal::SymbolTableImpl *)((char *)this + 144));
          }
          v17 = *((_QWORD *)this + 4);
          if (a2 < 0 || v17 <= a2)
          {
            v27 = *((_QWORD *)this + 14);
            v26 = *((_QWORD *)this + 15);
            v28 = (v26 - v27) >> 3;
            if (v4 - v17 < (unint64_t)(v28 - 1))
            {
              v29 = ~v4 + v17 + v28;
              v30 = (_QWORD *)(v27 - 8 * v17 + 8 * v4 + 8);
              do
              {
                *(v30 - 1) = *v30;
                ++v30;
                --v29;
              }
              while (v29);
            }
            *((_QWORD *)this + 15) = v26 - 8;
          }
          else
          {
            v31 = a2 + 1;
            if (a2 + 1 < v17)
            {
              v18 = a2;
              do
              {
                v32 = &v31;
                std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 17, &v31, (uint64_t)&std::piecewise_construct, &v32)[5] = v18;
                v18 = v31++;
              }
              while (v31 < *((_QWORD *)this + 4));
            }
            v19 = (_QWORD *)((char *)this + 112);
            std::vector<long long>::resize((uint64_t)this + 112, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3) - a2);
            v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
            v21 = *((_QWORD *)this + 4);
            if (v20 >= v21)
            {
              v22 = (_QWORD *)*v19;
              v23 = *v19 - 8 * a2;
              do
              {
                *(_QWORD *)(v23 + 8 * v20 - 8) = v22[v20 - v21];
                v21 = *((_QWORD *)this + 4);
                v10 = v20-- <= v21;
              }
              while (!v10);
            }
            if (v21 - 1 > a2)
            {
              v24 = (_QWORD *)*v19;
              v25 = a2;
              do
                *v24++ = ++v25;
              while (v25 < *((_QWORD *)this + 4) - 1);
            }
            *((_QWORD *)this + 4) = a2;
          }
          if (*((_QWORD *)this + 3) - 1 == a2)
            *((_QWORD *)this + 3) = a2;
        }
      }
    }
  }
}

BOOL fst::internal::SymbolTableImpl::Write(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *__p[2];
  char v14;
  BOOL v15;

  LODWORD(__p[0]) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  LODWORD(__p[0]) = v4;
  std::ostream::write();
  std::ostream::write();
  __p[0] = *(void **)(a1 + 24);
  std::ostream::write();
  v5 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  v6 = v5 / 24;
  __p[0] = (void *)(v5 / 24);
  std::ostream::write();
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = 0;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = (void *)v8;
      if (v8 >= v9)
        v10 = *(void **)(*(_QWORD *)(a1 + 112) - 8 * v9 + 8 * v8);
      std::ostream::write();
      std::ostream::write();
      __p[0] = v10;
      std::ostream::write();
      ++v8;
      v7 += 24;
    }
    while (v6 != v8);
  }
  std::ostream::flush();
  v11 = *(_DWORD *)((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5;
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SymbolTable::Write: Write failed", 32);
    LogMessage::~LogMessage((LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  return v11 == 0;
}

void sub_22BDEF5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  LogMessage::~LogMessage((LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::SymbolTable::AddTable(fst::SymbolTable *this, const fst::SymbolTable *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  fst::SymbolTable::MutateCheck(this);
  v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
  v5 = (*(uint64_t (**)(const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0);
  if (v4)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)this + 1);
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 72))(__p, a2, v6);
      fst::internal::SymbolTableImpl::AddSymbol(v8, (uint64_t)__p, *(_QWORD *)(v8 + 24));
      if (v10 < 0)
        operator delete(__p[0]);
      if (++v7 < v4)
        v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 64))(a2, v7);
    }
    while (v4 != v7);
  }
}

void sub_22BDEF6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SymbolTable::MutateCheck(fst::SymbolTable *this)
{
  uint64_t v1;
  const fst::internal::SymbolTableImpl **v2;
  std::string *v3;

  v1 = *((_QWORD *)this + 2);
  if (!v1 || *(_QWORD *)(v1 + 8))
  {
    v2 = (const fst::internal::SymbolTableImpl **)((char *)this + 8);
    v3 = (std::string *)operator new();
    fst::internal::SymbolTableImpl::SymbolTableImpl(v3, *v2);
    std::shared_ptr<fst::internal::SymbolTableImpl>::reset[abi:ne180100]<fst::internal::SymbolTableImpl,void>(v2, (uint64_t)v3);
  }
}

void sub_22BDEF754(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2FB328](v1, 0x1032C403CA07A62);
  _Unwind_Resume(a1);
}

BOOL fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  _BOOL4 v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  char v28;
  void *v29;
  char v30;
  uint64_t v31;

  v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a3 + 16);
  v20 = v3;
  if (v3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
    if (v6)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      v11 = (void *)*MEMORY[0x24BEDB800];
      v22 = *(void **)(MEMORY[0x24BEDB800] + 24);
      v21 = (void *)(MEMORY[0x24BEDB848] + 16);
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
        v13 = v8 >= 0 || *(_BYTE *)a3 != 0;
        if (((v13 | v9) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
          LogMessage::LogMessage((BOOL *)&v23, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Negative symbol table entry when not allowed", 44);
          LogMessage::~LogMessage((LogMessage *)&v23);
          if ((char)v26 < 0)
            operator delete(__p[0]);
          v9 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(__p, a1, v8);
        if ((v26 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        if ((v26 & 0x80u) == 0)
          v15 = v26;
        else
          v15 = (uint64_t)__p[1];
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v14, v15);
        v17 = (_BYTE *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0)
          v17 = *(_BYTE **)(a3 + 8);
        LOBYTE(v23) = *v17;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v23, 1);
        v18 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(v23) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v23, 1);
        if ((char)v26 < 0)
          operator delete(__p[0]);
        std::stringbuf::str();
        std::stringbuf::str();
        std::ostream::write();
        if (v24 < 0)
          operator delete(v23);
        if ((char)v26 < 0)
          operator delete(__p[0]);
        v27[0] = v11;
        *(void **)((char *)v27 + *((_QWORD *)v11 - 3)) = v22;
        v27[1] = v21;
        if (v30 < 0)
          operator delete(v29);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x22E2FB2D4](&v31);
        if (++v10 < v6)
          v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v10);
      }
      while (v6 != v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "ERROR");
    LogMessage::LogMessage((BOOL *)__p, (uint64_t)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Missing required field separator", 32);
    LogMessage::~LogMessage((LogMessage *)__p);
    if (v28 < 0)
      operator delete(v27[0]);
  }
  return v20 != 0;
}

void sub_22BDEFA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  LogMessage::~LogMessage((LogMessage *)&a21);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::CompatSymbols(fst *this, const fst::SymbolTable *a2, const fst::SymbolTable *a3)
{
  _BOOL8 result;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  BOOL v18;

  if (!FLAGS_fst_compat_symbols)
    return 1;
  result = 1;
  if (!this || !a2)
    return result;
  v6 = (int)a3;
  v7 = (unsigned __int8 *)(*(uint64_t (**)(fst *))(*(_QWORD *)this + 88))(this);
  v8 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 88))(a2);
  v9 = v7[23];
  if ((v9 & 0x80u) == 0)
    v10 = v7[23];
  else
    v10 = *((_QWORD *)v7 + 1);
  v11 = *(unsigned __int8 *)(v8 + 23);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v8 + 8);
  if (v10 != v11)
    goto LABEL_20;
  if (v12 >= 0)
    v13 = (unsigned __int8 *)v8;
  else
    v13 = *(unsigned __int8 **)v8;
  if ((v9 & 0x80) != 0)
  {
    result = memcmp(*(const void **)v7, v13, *((_QWORD *)v7 + 1)) == 0;
    if (result)
      return result;
    goto LABEL_22;
  }
  if (!v7[23])
    return 1;
  result = 1;
  while (*v7 == *v13)
  {
    ++v7;
    ++v13;
    if (!--v9)
      return result;
  }
LABEL_20:
  result = 0;
LABEL_22:
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
    LogMessage::LogMessage(&v18, (uint64_t)__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"CompatSymbols: Symbol table checksums do not match. ", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Table sizes are ", 16);
    (*(void (**)(fst *))(*(_QWORD *)this + 120))(this);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" and ", 5);
    (*(void (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v18);
    if (v17 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_22BDEFCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SymbolTable::~SymbolTable(fst::SymbolTable *this)
{
  *(_QWORD *)this = &off_24F6568C8;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24F6568C8;
  std::shared_ptr<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x22E2FB328);
}

_QWORD *fst::SymbolTable::Copy(fst::SymbolTable *this)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (_QWORD *)operator new();
  v4 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  *result = &off_24F6568C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  fst::SymbolTable::MutateCheck((fst::SymbolTable *)a1);
  return fst::internal::SymbolTableImpl::AddSymbol(a1[1], a2, a3);
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t *a1, uint64_t a2)
{
  fst::SymbolTable::MutateCheck((fst::SymbolTable *)a1);
  return fst::internal::SymbolTableImpl::AddSymbol(a1[1], a2, *(_QWORD *)(a1[1] + 24));
}

uint64_t fst::SymbolTable::AvailableKey(fst::SymbolTable *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t fst::SymbolTable::CheckSum(fst::SymbolTable *this)
{
  fst::internal::SymbolTableImpl *v1;

  v1 = (fst::internal::SymbolTableImpl *)*((_QWORD *)this + 1);
  fst::internal::SymbolTableImpl::MaybeRecomputeCheckSum(v1);
  return (uint64_t)v1 + 168;
}

unint64_t fst::SymbolTable::GetNthKey(fst::internal::SymbolTableImpl **this, unint64_t a2)
{
  return fst::internal::SymbolTableImpl::GetNthKey(this[1], a2);
}

void fst::SymbolTable::Find(fst::internal::SymbolTableImpl **this@<X0>, int64_t a2@<X1>, std::string *a3@<X8>)
{
  fst::internal::SymbolTableImpl::Find(this[1], a2, a3);
}

uint64_t fst::SymbolTable::Find(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  result = fst::internal::DenseSymbolMap::Find(v2 + 5, a2);
  if (result != -1)
  {
    v4 = v2[4];
    v5 = __OFSUB__(result, v4);
    v6 = result - v4;
    if (v6 < 0 == v5)
      return *(_QWORD *)(v2[14] + 8 * v6);
  }
  return result;
}

uint64_t fst::SymbolTable::LabeledCheckSum(fst::SymbolTable *this)
{
  fst::internal::SymbolTableImpl *v1;

  v1 = (fst::internal::SymbolTableImpl *)*((_QWORD *)this + 1);
  fst::internal::SymbolTableImpl::MaybeRecomputeCheckSum(v1);
  return (uint64_t)v1 + 192;
}

BOOL fst::SymbolTable::Member(fst::internal::SymbolTableImpl **this, int64_t a2)
{
  return fst::internal::SymbolTableImpl::Member(this[1], a2);
}

BOOL fst::SymbolTable::Member(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::internal::DenseSymbolMap::Find(v2 + 5, a2);
  if (v3 == -1)
    return 0;
  v4 = v2[4];
  v5 = __OFSUB__(v3, v4);
  v6 = v3 - v4;
  return v6 < 0 != v5 || *(_QWORD *)(v2[14] + 8 * v6) != -1;
}

uint64_t fst::SymbolTable::Name(fst::SymbolTable *this)
{
  return *((_QWORD *)this + 1);
}

unint64_t fst::SymbolTable::NumSymbols(fst::SymbolTable *this)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) - *(_QWORD *)(*((_QWORD *)this + 1) + 48)) >> 3);
}

void fst::SymbolTable::RemoveSymbol(fst::internal::SymbolTableImpl **this, uint64_t a2)
{
  fst::SymbolTable::MutateCheck((fst::SymbolTable *)this);
  fst::internal::SymbolTableImpl::RemoveSymbol(this[1], a2);
}

std::string *fst::SymbolTable::SetName(std::string **a1, const std::string *a2)
{
  fst::SymbolTable::MutateCheck((fst::SymbolTable *)a1);
  return std::string::operator=(a1[1], a2);
}

BOOL fst::SymbolTable::Write(uint64_t a1, _QWORD *a2)
{
  return fst::internal::SymbolTableImpl::Write(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::SymbolTable::Write(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  BOOL v12;
  uint64_t v13;
  _BYTE v14[408];
  _QWORD v15[20];

  v15[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v13);
  if (*(_DWORD *)&v14[*(_QWORD *)(v13 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage(&v12, (uint64_t)__p);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SymbolTable::Write: Can't open file ", 36);
    v5 = *(char *)(a2 + 23);
    if (v5 >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    LogMessage::~LogMessage((LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    v8 = 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 144))(a1, &v13);
  }
  v13 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v14[*(_QWORD *)(v13 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x22E2FB1B4](v14);
  std::ostream::~ostream();
  MEMORY[0x22E2FB2D4](v15);
  return v8;
}

void sub_22BDF0120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::ofstream::~ofstream(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  void *v11;
  char v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  _BYTE v16[408];
  _QWORD v17[20];

  v17[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v15);
  if (*(_DWORD *)&v16[*(_QWORD *)(v15 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage(&v14, (uint64_t)&__p);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"SymbolTable::WriteText: Can't open file ", 40);
    v5 = *(char *)(a2 + 23);
    if (v5 >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    LogMessage::~LogMessage((LogMessage *)&v14);
    if (v12 < 0)
      operator delete(__p);
    v8 = 0;
  }
  else
  {
    LOBYTE(__p) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)FLAGS_fst_field_separator);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)a1 + 160))(a1, &v15, &__p);
    if (v13 < 0)
      operator delete(v11);
  }
  v15 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v16[*(_QWORD *)(v15 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x22E2FB1B4](v16);
  std::ostream::~ostream();
  MEMORY[0x22E2FB2D4](v17);
  return v8;
}

void sub_22BDF02DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a19 < 0)
    operator delete(__p);
  std::ofstream::~ofstream(&a24);
  _Unwind_Resume(a1);
}

void fst::internal::DenseSymbolMap::~DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

fst::CheckSummer *fst::CheckSummer::CheckSummer(fst::CheckSummer *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::string::resize((std::string *)((char *)this + 8), 0x20uLL, 0);
  return this;
}

void sub_22BDF03C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<fst::internal::SymbolTableImpl>::reset[abi:ne180100]<fst::internal::SymbolTableImpl,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<fst::internal::SymbolTableImpl>::shared_ptr[abi:ne180100]<fst::internal::SymbolTableImpl,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

std::string *fst::internal::SymbolTableImpl::SymbolTableImpl(std::string *this, const fst::internal::SymbolTableImpl *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 24);
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2], (const fst::internal::SymbolTableImpl *)((char *)a2 + 40));
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&this[4].__r_.__value_.__r.__words[2], *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3);
  std::map<long long,long long>::map[abi:ne180100]((uint64_t *)&this[5].__r_.__value_.__r.__words[2], (uint64_t)a2 + 136);
  this[6].__r_.__value_.__s.__data_[16] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  this[9].__r_.__value_.__r.__words[0] = 850045863;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[2] = 0u;
  this[11].__r_.__value_.__l.__size_ = 0;
  return this;
}

void sub_22BDF0518(_Unwind_Exception *a1)
{
  uint64_t v1;
  fst::internal::DenseSymbolMap *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
  }
  fst::internal::DenseSymbolMap::~DenseSymbolMap(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22BDF0598(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void fst::internal::SymbolTableImpl::Find(fst::internal::SymbolTableImpl *this@<X0>, int64_t a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  int64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  if (a2 < 0 || *((_QWORD *)this + 4) <= a2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v3)
      goto LABEL_17;
    v4 = (_QWORD *)((char *)this + 144);
    do
    {
      v5 = v3[4];
      v6 = v5 < a2;
      if (v5 >= a2)
        v7 = v3;
      else
        v7 = v3 + 1;
      if (!v6)
        v4 = v3;
      v3 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v4 == (_QWORD *)((char *)this + 144))
      goto LABEL_17;
    if (v4[4] > a2)
      goto LABEL_17;
    a2 = v4[5];
    if (a2 < 0)
      goto LABEL_17;
  }
  v8 = *((_QWORD *)this + 6);
  if (a2 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v8) >> 3))
  {
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    v9 = (__int128 *)(v8 + 24 * a2);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
    }
  }
}

BOOL fst::internal::SymbolTableImpl::Member(fst::internal::SymbolTableImpl *this, int64_t a2)
{
  _BOOL8 v2;
  std::string v4;

  fst::internal::SymbolTableImpl::Find(this, a2, &v4);
  if ((SHIBYTE(v4.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return SHIBYTE(v4.__r_.__value_.__r.__words[2]) != 0;
  v2 = v4.__r_.__value_.__l.__size_ != 0;
  operator delete(v4.__r_.__value_.__l.__data_);
  return v2;
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22BDF09C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22BDF0A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReplaceStackPrefix<int,int>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22BDF0AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22BDF0B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_22BDF10CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_22BDF11E0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t CMDPOSLog(void)
{
  if (CMDPOSLog(void)::onceToken != -1)
    dispatch_once(&CMDPOSLog(void)::onceToken, &__block_literal_global_7);
  return CMDPOSLog(void)::signpostLog;
}

os_log_t ___Z9CMDPOSLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.SpeechRecognitionCore", "CMDPLogs");
  CMDPOSLog(void)::signpostLog = (uint64_t)result;
  return result;
}

uint64_t fst::FstHeader::Write()
{
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return 1;
}

unint64_t fst::ComposeProperties(unint64_t this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (a2 | this) & 4;
  v3 = a2 & this;
  v4 = a2 & this & 0x2802010000 | v2 | 0x10000000000;
  if ((a2 & this & 0x2000000) != 0)
    v4 |= a2 & this & 0x40000;
  v5 = v3 & 0x280A800000 | v2 | 0x10000010000;
  if ((v3 & 0x2000000) != 0)
    v5 |= v3 & 0x140000;
  if ((v3 & 0x10000) != 0)
    return v5;
  else
    return v4;
}

unint64_t fst::DeterminizeProperties(unint64_t this, int a2, int a3)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if ((this & 0x10000) != 0
    || ((this & 0x2000000) == 0 ? (v3 = a2 ^ 1) : (v3 = 0), (v4 = 0x10000000000, (v3 & 1) == 0) && a3))
  {
    v4 = 0x10000040000;
  }
  v5 = (this >> 25) & 1;
  v6 = this & 0x800000;
  if ((v5 & a3) == 0)
    v6 = 0;
  v7 = this & ((uint64_t)(this << 23) >> 63) & 0x405000000 | this & 0x142800010004 | this & ((int)((_DWORD)this << 15) >> 31) & 0xA000000 | v6 | v4;
  if ((v5 & a2) != 0)
    return v7 | 0x2000000;
  else
    return v7;
}

uint64_t fst::ReplaceProperties(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, char a6, int a7, int a8, char a9, char a10, unsigned __int8 a11)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v11 = *a1;
  v12 = a1[1];
  if (*a1 == v12)
    return 0x956A5A950000;
  v13 = 0;
  v14 = *a1;
  do
  {
    v15 = *v14++;
    v13 |= v15 & 4;
  }
  while (v14 != v12);
  v16 = 0x50000000000;
  if (!a8)
    v16 = 0;
  v17 = *a1;
  do
  {
    v18 = *v17++;
    v16 &= v18;
  }
  while (v17 != v12);
  if (v16 == 0x50000000000)
  {
    v19 = 0;
    LOBYTE(v20) = 1;
    v21 = *a1;
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = v23 & 0x20000;
      if (!a7)
        v24 = 0;
      v19 |= v22 & 0x608505680000 | v24;
      v20 = ((v22 & 0x100000000000) != 0) & v20;
    }
    while (v21 != v12);
    v25 = v20 == 0;
    v26 = 0x50000000000;
    if (!v25)
      v26 = 0x150000000000;
    v13 |= v11[a2] & 0x1000000000 | v19 | v26;
  }
  v27 = a3 ^ 1;
  v28 = v12 - v11;
  v29 = (a3 | a4) ^ 1;
  v30 = (a3 ^ 1) & a4;
  LOBYTE(v31) = a7 ^ 1;
  if (v28 <= 1)
    v32 = 1;
  else
    v32 = v28;
  LOBYTE(v33) = 1;
  v34 = (unint64_t *)v11;
  v35 = a2;
  LOBYTE(v36) = 1;
  do
  {
    v37 = *v34++;
    v31 = BYTE2(v37) & 1 & v31;
    v38 = (v37 >> 18) & 1;
    v39 = (v37 >> 25) & 1;
    v29 &= v39;
    v36 = ((v37 & 0x800000000) != 0) & v36;
    v33 = ((v37 & 0x200000000) != 0) & v33;
    if (v35)
      v40 = v39;
    else
      v40 = 1;
    v30 &= v40 & v38;
    --v35;
    --v32;
  }
  while (v32);
  if (v31)
    v13 |= 0x10000uLL;
  if (v30)
    v13 |= 0x40000uLL;
  if (v29)
    v13 |= 0x2000000uLL;
  if (v36)
    v13 |= 0x800000000uLL;
  if (v33)
    v13 |= 0x200000000uLL;
  v41 = v11[a2] & 0x2000000000 | v13;
  if ((((v27 | a11) & a9) & a4) != 0)
    v41 |= 0x10000000uLL;
  if (((a6 & a10) & (a5 ^ 1 | a11)) != 0)
    return v41 | 0x40000000;
  else
    return v41;
}

unint64_t fst::RelabelProperties(unint64_t this)
{
  return this & 0xFFFF00000007;
}

unint64_t fst::ReverseProperties(unint64_t this, int a2)
{
  uint64_t v2;

  v2 = 0xC00E05430007;
  if (a2)
    v2 = 0xC00F05430007;
  return v2 & this;
}

unint64_t fst::ReweightProperties(unint64_t this)
{
  return this & 0x3BFCFFFF0007;
}

unint64_t fst::RmEpsilonProperties(unint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 176160768;
  if ((this & 0x10000) == 0)
    v2 = 0x800000;
  v3 = v2 | this & 0x2800010004;
  if (!a2)
    v3 |= this & 0x4000000000 | 3;
  if ((a2 & ((this & 0x10000000000) == 0)) != 0)
    v4 = 0;
  else
    v4 = this & 0x20000;
  return v3 | v4;
}

unint64_t fst::ShortestPathProperties(unint64_t this, int a2)
{
  uint64_t v2;

  v2 = 0x852800000000;
  if (a2)
    v2 = 0x812800000000;
  return v2 | this;
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x24BDBB7C0](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x24BDBBBE8](theSet, theString);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x24BDBBC00](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x24BDBBC08](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x24BDBBC20](theSetIdentifier);
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
  MEMORY[0x24BDBBC28](theSet);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x24BDBBC30](theSet, theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x24BDBBC50](theSet, theOtherSet);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x24BDBBF48](allocator, localeIdentifier);
}

CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale)
{
  return (CFLocaleRef)MEMORY[0x24BDBBF68](allocator, locale);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x24BDBBF78](locale);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x24BDBC4A8](theString, appendedString);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x24BDBC510](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x24BDBC520](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC540](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x24BDBC578](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x24BDBC5B0](alloc, str, range.location, range.length);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x24BDBC5E0](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x24BDBC618](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC660](length, *(_QWORD *)&encoding);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x24BDBC6C8](theString, locale);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x24BDBC6F8](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x24BDBC710](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x24BDBC718](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
  MEMORY[0x24BDBC728](tokenizer, string, range.location, range.length);
}

uint64_t EARCSpeechRecognitionTokenGetConfidence()
{
  return MEMORY[0x24BE2E698]();
}

uint64_t EARCSpeechRecognitionTokenGetEnd()
{
  return MEMORY[0x24BE2E6A0]();
}

uint64_t EARCSpeechRecognitionTokenGetSilenceStart()
{
  return MEMORY[0x24BE2E6A8]();
}

uint64_t EARCSpeechRecognitionTokenGetStart()
{
  return MEMORY[0x24BE2E6B0]();
}

uint64_t EARCSpeechRecognitionTokenGetTokenName()
{
  return MEMORY[0x24BE2E6B8]();
}

uint64_t EARCSpeechRecognitionTokenHasSpaceAfter()
{
  return MEMORY[0x24BE2E6C0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

uint64_t RXEngineTypeForLocaleIdentifier()
{
  return MEMORY[0x24BEAFF98]();
}

uint64_t RXIsLocaleWithNoSpaceInPostITN()
{
  return MEMORY[0x24BEAFFB0]();
}

uint64_t RXLocalesSupportingSpellingMode()
{
  return MEMORY[0x24BEAFFF0]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF18]();
}

{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF78]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24F6524F0();
}

void operator delete(void *__p)
{
  off_24F6524F8(__p);
}

uint64_t operator delete()
{
  return off_24F652500();
}

uint64_t operator new[]()
{
  return off_24F652508();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24F652510(__sz);
}

uint64_t operator new()
{
  return off_24F652518();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADC60](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t random(void)
{
  return MEMORY[0x24BDAFA48]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

