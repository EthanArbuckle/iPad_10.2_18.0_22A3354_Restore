void XlChartAxisParent::~XlChartAxisParent(XlChartAxisParent *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartBinaryReader::scanTextForObjectType(XlChartBinaryReader *this, __int16 *a2, __int16 *a3)
{
  XlHeader *v6;
  uint64_t v7;
  XlParserVisitor *v8;
  XlChartObjectLink *v9;

  v6 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v6);
  if (XlChartBinaryReader::nextSibling(this, v6)
    && (XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167)),
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((_BYTE *)this + 444)),
        v6->var1 == 4147))
  {
    v7 = 0;
    while (XlChartBinaryReader::nextSibling(this, v6))
    {
      v8 = (XlParserVisitor *)*((_QWORD *)this + 167);
      if (v6->var1 == 4135)
      {
        XlParserVisitor::skipHeader(v8);
        v9 = (XlChartObjectLink *)operator new(0x18uLL);
        XlChartObjectLink::XlChartObjectLink(v9, v6);
        (*(void (**)(_QWORD, XlChartObjectLink *))(**((_QWORD **)this + 167) + 2088))(*((_QWORD *)this + 167), v9);
        v7 = *((unsigned int *)v9 + 4);
        if (a2)
          *a2 = *((_WORD *)v9 + 10);
        if (a3)
          *a3 = *((_WORD *)v9 + 11);
        (*(void (**)(XlChartObjectLink *))(*(_QWORD *)v9 + 8))(v9);
      }
      else
      {
        XlParserVisitor::seekNextRecord((uint64_t)v8);
      }
    }
  }
  else
  {
    v7 = 0;
  }
  MEMORY[0x22E2DD408](v6, 0x1000C4087442A64);
  return v7;
}

void sub_22A1FEF34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartObjectLink::XlChartObjectLink(XlChartObjectLink *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A8A60;
  v2[2] = 0;
}

void XlChartObjectLink::~XlChartObjectLink(XlChartObjectLink *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartSiIndex::XlChartSiIndex(XlChartSiIndex *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8F28;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartSiIndex::~XlChartSiIndex(XlChartSiIndex *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1FF1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1FF360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1FF6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  v44 = v41;

  XlChartTextFrame::~XlChartTextFrame((XlChartTextFrame *)&a10);
  XlChartParent::~XlChartParent((XlChartParent *)&a37);

  _Unwind_Resume(a1);
}

void sub_22A1FF8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void XlChartParent::XlChartParent(XlChartParent *this)
{
  uint64_t v2;

  XlChartFrameType::XlChartFrameType((XlChartFrameType *)this);
  XlChartShtProps::XlChartShtProps((XlChartShtProps *)(v2 + 88));
  *(_QWORD *)this = &off_24F3A98C8;
  *((_QWORD *)this + 11) = &unk_24F3A98E8;
  XlString::XlString((XlString *)((char *)this + 120));
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 28) = _D0;
  *((_DWORD *)this + 58) = 65537;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 264) = 0;
}

void sub_22A1FF964(_Unwind_Exception *a1)
{
  XlChartFrameType *v1;
  uint64_t v2;

  TSURectWithOriginAndSize(v2);
  XlChartFrameType::~XlChartFrameType(v1);
  _Unwind_Resume(a1);
}

void XlChartFrameType::XlChartFrameType(XlChartFrameType *this)
{
  this->var0 = (void **)&off_24F3A9188;
  *(_OWORD *)&this->var1 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  *(_OWORD *)&this->var9 = 0u;
  *(_OWORD *)((char *)&this->var10 + 1) = 0u;
  *(_WORD *)&this->var13 = 257;
  this->var15 = 0;
  this->var16 = 0;
}

void XlChartShtProps::XlChartShtProps(XlChartShtProps *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4164, 4, 0);
  *(_QWORD *)v1 = &off_24F3A8EE8;
  *(_WORD *)(v1 + 16) = 1;
  *(_DWORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 24) = 0;
}

void XlChartBinaryReader::read(XlChartBinaryReader *this, XlChartParent *a2)
{
  uint64_t v4;
  int v5;
  XlHeader *v6;
  uint64_t v7;
  XlRecord *v8;
  uint64_t v9;
  XlRecord *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  XlHeader *v15;
  XlChartShtProps *v16;

  XlChartBinaryReader::readFbi((XlParserVisitor **)this, *((unsigned int *)this + 386), a2);
  v4 = *((_QWORD *)this + 246);
  if (((*((_QWORD *)this + 247) - v4) & 0x3FFFFFFFCLL) != 0)
  {
    v5 = 0;
    do
    {
      XlChartBinaryReader::readFbi((XlParserVisitor **)this, *(unsigned int *)(v4 + 4 * (unsigned __int16)v5++), a2);
      v4 = *((_QWORD *)this + 246);
    }
    while (((unint64_t)(*((_QWORD *)this + 247) - v4) >> 2) > (unsigned __int16)v5);
  }
  v6 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v6);
  if (*((_DWORD *)this + 387) != -1)
  {
    v7 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 16))(v7, *((unsigned int *)this + 387), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((_BYTE *)this + 444));
    v8 = (XlRecord *)operator new(0x18uLL);
    XlRecord::XlRecord(v8, v6);
    *(_QWORD *)v8 = &off_24F3AB418;
    *((_QWORD *)v8 + 2) = 0;
    (*(void (**)(_QWORD, XlRecord *))(**((_QWORD **)this + 167) + 2128))(*((_QWORD *)this + 167), v8);
    v9 = *((_QWORD *)v8 + 2);
    if (v9)
      XlString::operator=((XlString *)((char *)a2 + 120), v9);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((_BYTE *)this + 444));
    v10 = (XlRecord *)operator new(0x18uLL);
    XlRecord::XlRecord(v10, v6);
    *(_QWORD *)v10 = &off_24F3AB458;
    *((_BYTE *)v10 + 16) = 0;
    (*(void (**)(_QWORD, XlRecord *))(**((_QWORD **)this + 167) + 2120))(*((_QWORD *)this + 167), v10);
    *((_BYTE *)a2 + 264) = *((_BYTE *)v10 + 16);
    (*(void (**)(XlRecord *))(*(_QWORD *)v10 + 8))(v10);
    (*(void (**)(XlRecord *))(*(_QWORD *)v8 + 8))(v8);
  }
  v11 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((unsigned int *)this + 388), 0);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((_BYTE *)this + 444));
  v12 = (unsigned int *)operator new(0x20uLL);
  XlChartChart::XlChartChart((XlChartChart *)v12, v6);
  (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 167) + 1936))(*((_QWORD *)this + 167), v12);
  *((float *)a2 + 2) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v12[6]);
  *((float *)a2 + 3) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v12[7]);
  *((float *)a2 + 4) = CsMath::convertFixedToFloat((CsMath *)v12[4]);
  *((float *)a2 + 5) = CsMath::convertFixedToFloat((CsMath *)v12[5]);
  *((_QWORD *)a2 + 28) = *((_QWORD *)this + 241);
  *((_DWORD *)a2 + 58) = *((_DWORD *)this + 484);
  v13 = *((unsigned int *)this + 394);
  if ((int)v13 >= 1)
    XlChartBinaryReader::readFrameFormatting((XlParserVisitor **)this, (XlChartFrameType *)a2, v13);
  if (*((int *)this + 414) >= 1)
  {
    v14 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 16))(v14, *((unsigned int *)this + 414), 0);
    v15 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v15);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v15, *((_BYTE *)this + 444));
    v16 = (XlChartShtProps *)operator new(0x20uLL);
    XlChartShtProps::XlChartShtProps(v16, v15);
    (*(void (**)(_QWORD, XlChartShtProps *))(**((_QWORD **)this + 167) + 2264))(*((_QWORD *)this + 167), v16);
    *((_WORD *)a2 + 52) = *((_WORD *)v16 + 8);
    *((_DWORD *)a2 + 27) = *((_DWORD *)v16 + 5);
    (*(void (**)(XlChartShtProps *))(*(_QWORD *)v16 + 8))(v16);
    MEMORY[0x22E2DD408](v15, 0x1000C4087442A64);
  }
  (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1FFD24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  operator delete(v4);
  if (v3)
    MEMORY[0x22E2DD408](v3, 0x1000C4087442A64);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::readFbi(XlParserVisitor **this, uint64_t a2, XlChartParent *a3)
{
  XlHeader *v6;
  uint64_t v7;
  XlChartFBI *v8;
  XlChartFBI *v9;

  v6 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v6);
  if ((_DWORD)a2 == -1)
  {
    if (!v6)
      return;
  }
  else
  {
    v7 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, a2, 0);
    while (1)
    {
      XlParserVisitor::getHeader(this[167], v6, *((_BYTE *)this + 444));
      if (((unsigned __int16)v6->var1 | 8) != 0x1068)
        break;
      v9 = 0;
      v8 = (XlChartFBI *)operator new(0x20uLL);
      XlChartFBI::XlChartFBI(v8, v6);
      v9 = v8;
      (*(void (**)(XlParserVisitor *, XlChartFBI *))(*(_QWORD *)this[167] + 2000))(this[167], v8);
      XlChartParent::addFontBasis(a3, &v9);
      if (v9)
        (*(void (**)(XlChartFBI *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  MEMORY[0x22E2DD408](v6, 0x1000C4087442A64);
}

void sub_22A1FFF30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartFBI::XlChartFBI(XlChartFBI *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A87E0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(XlParserVisitor *a1, _WORD *a2)
{
  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[9] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[10] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[11] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[12] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

{
  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[9] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[10] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[11] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

{
  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[9] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[10] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[11] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[12] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[13] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[14] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[15] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  a2[16] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

{
  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  a2[9] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  a2[10] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  a2[11] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

void XlChartParent::addFontBasis(XlChartParent *this, XlChartFBI **a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v2 = (uint64_t)*a2;
  if (*a2)
  {
    v5 = *((_QWORD *)this + 30);
    v6 = (_QWORD *)*((_QWORD *)this + 31);
    v7 = (unint64_t)v6 - v5;
    v8 = ((unint64_t)v6 - v5) >> 3;
    if ((_DWORD)v8)
    {
      v9 = 0;
      while (*(unsigned __int16 *)(*(_QWORD *)(v5 + 8 * v9) + 24) != *(unsigned __int16 *)(v2 + 24))
      {
        if (v8 <= ++v9)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v10 = *((_QWORD *)this + 32);
      if ((unint64_t)v6 >= v10)
      {
        v12 = (v10 - v5) >> 3;
        if (2 * (int)v12 <= (v8 + 1))
          v13 = v8 + 1;
        else
          v13 = 2 * v12;
        if (v12 >= 0x7FFFFFFF)
          v14 = 0xFFFFFFFFLL;
        else
          v14 = v13;
        if ((_DWORD)v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 256, v14);
          v17 = v16;
          v2 = (uint64_t)*a2;
        }
        else
        {
          v15 = 0;
          v17 = 0;
        }
        v18 = &v15[v7 & 0x7FFFFFFF8];
        v19 = &v15[8 * v17];
        *(_QWORD *)v18 = v2;
        v11 = v18 + 8;
        v21 = (char *)*((_QWORD *)this + 30);
        v20 = (char *)*((_QWORD *)this + 31);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v18 - 1) = v22;
            v18 -= 8;
          }
          while (v20 != v21);
          v20 = (char *)*((_QWORD *)this + 30);
        }
        *((_QWORD *)this + 30) = v18;
        *((_QWORD *)this + 31) = v11;
        *((_QWORD *)this + 32) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v6 = v2;
        v11 = v6 + 1;
      }
      *((_QWORD *)this + 31) = v11;
      *a2 = 0;
    }
  }
}

void XlChartShtProps::XlChartShtProps(XlChartShtProps *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8EE8;
  *(_WORD *)(v2 + 16) = 1;
  *(_DWORD *)(v2 + 20) = 0;
  *(_BYTE *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartShtProps *a2)
{
  uint64_t v4;
  uint64_t (*v5)(void);

  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  v4 = **((_QWORD **)this + 2);
  if (*((_DWORD *)a2 + 2) == 3)
    v5 = *(uint64_t (**)(void))(v4 + 64);
  else
    v5 = *(uint64_t (**)(void))(v4 + 80);
  *((_DWORD *)a2 + 5) = v5();
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlChartShtProps::~XlChartShtProps(XlChartShtProps *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartChart::~XlChartChart(XlChartChart *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A200398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A20063C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A200850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A20094C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2009F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A200A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A200B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A200EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A201148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A201264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlChartArea::isCategoryPercentage(XlChartArea *this)
{
  return (*((unsigned __int16 *)this + 8) >> 1) & 1;
}

uint64_t XlChartBinaryReader::getSeriesCount(XlChartBinaryReader *this)
{
  return (unsigned __int16)(-13107 * ((*((_DWORD *)this + 446) - *((_DWORD *)this + 444)) >> 2));
}

void XlChartBinaryReader::read(XlChartBinaryReader *this, unsigned int a2, XlChartDataSeries **a3, int a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _WORD *v11;
  uint64_t v12;
  XlHeader *v13;
  int v14;
  XlChartDataSeries *v15;
  uint64_t v16;
  XlHeader *v17;
  uint64_t Series;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  XlChartDataSeries **v22;

  v8 = *((_QWORD *)this + 222);
  v9 = (unsigned int *)(v8 + 20 * a2);
  v11 = (_WORD *)v9 + 9;
  v10 = *((unsigned __int16 *)v9 + 9);
  if (*((_WORD *)v9 + 9) && v10 <= (unsigned __int16)(-13107 * ((*((_DWORD *)this + 446) - v8) >> 2)))
    v12 = v8 + 20 * (v10 - 1);
  else
    v12 = 0;
  v13 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v13);
  v14 = *(_DWORD *)(v8 + 20 * a2 + 8);
  switch(v14)
  {
    case 2:
      v22 = a3;
      v13->var1 = 4171;
      v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 83);
      v17 = (XlHeader *)(v16 + 200);
      XlRecord::setHeader((XlHeader *)(v16 + 200), v13);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, (unsigned __int16)(*v11 - 1));
      *(_WORD *)(v16 + 16) = a2;
      if (v12)
        *(_WORD *)(v16 + 20) = *(_WORD *)(v12 + 16);
      Series = XlChartBinaryReader::readSeries(this, (XlChartDataSeries *)v16, *v9, a4);
      if ((int)Series >= 1)
      {
        v19 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, Series, 0);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v13, *((_BYTE *)this + 444));
        XlRecord::setHeader(v17, v13);
        (*(void (**)(_QWORD, XlHeader *))(**((_QWORD **)this + 167) + 2200))(*((_QWORD *)this + 167), v17);
      }
      goto LABEL_19;
    case 1:
      v22 = a3;
      v13->var1 = 4187;
      v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 65);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, (unsigned __int16)(*v11 - 1));
      XlRecord::setHeader((XlHeader *)(v16 + 200), v13);
      *(_WORD *)(v16 + 16) = a2;
      *(_DWORD *)(v16 + 240) = *(_DWORD *)(v8 + 20 * a2 + 12);
      if (v12)
        *(_WORD *)(v16 + 20) = *(_WORD *)(v12 + 16);
      v20 = XlChartBinaryReader::readSeries(this, (XlChartDataSeries *)v16, *v9, a4);
      if ((int)v20 >= 1)
      {
        v21 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, v20, 0);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v13, *((_BYTE *)this + 444));
        XlRecord::setHeader((XlHeader *)(v16 + 200), v13);
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 167) + 2192))(*((_QWORD *)this + 167), v16 + 200);
      }
LABEL_19:
      *v22 = (XlChartDataSeries *)v16;
      goto LABEL_20;
    case 0:
      v15 = (XlChartDataSeries *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 62);
      *a3 = v15;
      *((_WORD *)v15 + 8) = a2;
      *((_WORD *)v15 + 10) = *(_WORD *)(v8 + 20 * a2 + 16);
      XlChartBinaryReader::readSeries(this, v15, *v9, a4);
      break;
  }
  if (v13)
LABEL_20:
    JUMPOUT(0x22E2DD408);
}

void sub_22A201788(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartDataSeries::XlChartDataSeries(XlChartDataSeries *this)
{
  *(_QWORD *)this = &off_24F3A90B8;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
}

uint64_t XlChartBinaryReader::readSeries(XlChartBinaryReader *this, XlChartDataSeries *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  XlHeader *v9;
  XlChartSeries *v10;
  uint64_t v11;
  int var1;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  XlChartSeriesFormat *v22;
  uint64_t v23;
  XlChartSeriesFormat *v24;
  uint64_t v25;
  XlChartSeriesText *v26;
  OcText *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  XlChartBinaryReader *v31;
  unsigned int v32;
  uint64_t v33;
  XlChartBinaryReader *v34;
  XlChartBinaryReader *v35;
  BOOL v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;

  v8 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, a3, 0);
  *((_WORD *)this + 936) = 0;
  v9 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v9);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v9, *((_BYTE *)this + 444));
  v10 = (XlChartSeries *)operator new(0x28uLL);
  XlChartSeries::XlChartSeries(v10, v9);
  (*(void (**)(_QWORD, XlChartSeries *))(**((_QWORD **)this + 167) + 2216))(*((_QWORD *)this + 167), v10);
  v11 = *((_QWORD *)a2 + 1);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)a2 + 1) = v10;
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v9, *((_BYTE *)this + 444));
  if (v9->var1 == 4147)
  {
    v38 = -1;
    while (1)
    {
      while (1)
      {
LABEL_5:
        if (!XlChartBinaryReader::nextSibling(this, v9))
          goto LABEL_65;
        var1 = v9->var1;
        if (var1 > 4170)
          break;
        if (var1 == 4102)
        {
          v19 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
          v13 = (unsigned __int16 *)operator new(0x18uLL);
          XlChartDataFormat::XlChartDataFormat((XlChartDataFormat *)v13, v9);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 167) + 1968))(*((_QWORD *)this + 167), v13);
          v21 = (__int16)v13[8];
          if (v21 < 0)
          {
            v24 = (XlChartSeriesFormat *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 79);
            v24->var23 = XlChartCatSerRange::isBetween((XlChartCatSerRange *)v13);
            v24->var11 = v13[10];
            v24->var12 = *((_WORD *)a2 + 8);
            v24->var9 = v21;
            XlChartBinaryReader::mapSeriesFormat(this, v24);
            XlChartDataSeries::takeDefaultFormat(a2, v24);
          }
          else
          {
            v39 = (__int16)v13[8];
            v40 = &v39;
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 235, &v39, (uint64_t)&std::piecewise_construct, &v40)+ 8) = v20;
            XlChartDataSeries::addCustomFormat(a2, v21);
            if (a4)
            {
              v22 = (XlChartSeriesFormat *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 79);
              v22->var23 = XlChartCatSerRange::isBetween((XlChartCatSerRange *)v13);
              v22->var11 = v13[10];
              v22->var12 = *((_WORD *)a2 + 8);
              v22->var9 = v21;
              XlChartBinaryReader::mapSeriesFormat(this, v22);
              XlChartDataSeries::takeCachedCustomFormat(a2, v22);
            }
          }
          goto LABEL_28;
        }
        if (var1 == 4163)
        {
          v13 = (unsigned __int16 *)operator new(0x18uLL);
          XlChartLegendXn::XlChartLegendXn((XlChartLegendXn *)v13, v9);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 167) + 2048))(*((_QWORD *)this + 167), v13);
          v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 87);
          *(_WORD *)(v14 + 216) = v13[8];
          *(_BYTE *)(v14 + 218) = XlChartChartFormat::isVaried((XlChartChartFormat *)v13);
          *(_BYTE *)(v14 + 219) = XlChartLegendXn::isLabel((XlChartLegendXn *)v13);
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v9, *((_BYTE *)this + 444));
          if (v9->var1 == 4147)
          {
            while (XlChartBinaryReader::nextSibling(this, v9))
            {
              if (v9->var1 == 4133)
              {
                v15 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
                v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
                XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, (XlChartTextFrame *)v14, v16, 1);
              }
              else
              {
                XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
              }
            }
          }
          else
          {
            v23 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 4294967292, 1);
          }
          XlChartDataSeries::takeCustomLegend(a2, v14);
LABEL_25:
          if (v13)
LABEL_28:
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v13 + 8))(v13);
        }
        else
        {
LABEL_52:
          XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
        }
      }
      if (var1 != 4177)
      {
        if (var1 == 4171 || var1 == 4187)
        {
          v25 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
        goto LABEL_52;
      }
      LODWORD(v40) = 0;
      v17 = (unsigned __int16 *)XlChartBinaryReader::mapDataLink((uint64_t)this, &v40);
      v13 = v17;
      switch((int)v40)
      {
        case 0:
          if (!v17 || (*((_DWORD *)v17 + 2) - 1) > 1)
            goto LABEL_63;
          if (*((int *)this + 498) < 1)
            v18 = 0;
          else
            v18 = XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 0, *((unsigned __int16 *)a2 + 8));
          if (XlChartBinaryReader::nextSibling(this, v9) && v9->var1 == 4109)
          {
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            v26 = (XlChartSeriesText *)operator new(0x20uLL);
            XlChartSeriesText::XlChartSeriesText(v26, v9);
            (*(void (**)(_QWORD, XlChartSeriesText *))(**((_QWORD **)this + 167) + 2232))(*((_QWORD *)this + 167), v26);
            v27 = (OcText *)operator new(0x30uLL);
            OcText::OcText(v27);
            v28 = *((_QWORD *)v26 + 2);
            if (v28)
              OcText::operator=((uint64_t)v27, v28 + 8);
            v29 = (uint64_t *)operator new(0x40uLL);
            *((_WORD *)v29 + 4) = -1;
            *v29 = (uint64_t)&off_24F3AB4D8;
            OcText::OcText((OcText *)(v29 + 2));
            v30 = (*(uint64_t (**)(uint64_t *))(*v29 + 48))(v29);
            OcText::operator=(v30, (uint64_t)v27);
            XlChartLinkedData::takeEnteredData((uint64_t)v13, 0, v29);
            (*((void (**)(OcText *))v27->var0 + 1))(v27);
            goto LABEL_62;
          }
          if ((v18 & 1) == 0 && !v13[12])
          {
            v26 = (XlChartSeriesText *)v13;
            v13 = 0;
LABEL_62:
            (*(void (**)(XlChartSeriesText *))(*(_QWORD *)v26 + 8))(v26);
          }
LABEL_63:
          XlChartDataSeries::takeTitleLink(a2, (XlChartLinkedData *)v13);
          break;
        case 1:
          if (v17
            && (*((_DWORD *)v17 + 2) || *((int *)this + 498) >= 1)
            && (XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 1u, *((unsigned __int16 *)a2 + 8)) & 1) == 0&& *((_DWORD *)v13 + 2) == 1)
          {
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v13 + 8))(v13);
            v13 = 0;
          }
          XlChartCategoryAxis::takeRange((uint64_t)a2, (uint64_t)v13);
          goto LABEL_5;
        case 2:
          if (v17
            && (*((_DWORD *)v17 + 2) || *((int *)this + 498) >= 1)
            && (XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 2u, *((unsigned __int16 *)a2 + 8)) & 1) == 0&& *((_DWORD *)v13 + 2) == 1)
          {
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v13 + 8))(v13);
            v13 = 0;
          }
          XlChartCategoryAxis::takeAlignment((uint64_t)a2, (uint64_t)v13);
          goto LABEL_5;
        case 3:
          if (v17
            && *((_DWORD *)v17 + 2)
            && (XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 3u, *((unsigned __int16 *)a2 + 8)) & 1) == 0&& *((_DWORD *)v13 + 2) == 1)
          {
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v13 + 8))(v13);
            v13 = 0;
          }
          XlChartCategoryAxis::takeCategorySpec((uint64_t)a2, (uint64_t)v13);
          goto LABEL_5;
        default:
          goto LABEL_25;
      }
    }
  }
  v38 = -1;
LABEL_65:
  v31 = (XlChartBinaryReader *)*((_QWORD *)this + 228);
  if (v31 != (XlChartBinaryReader *)((char *)this + 1832))
  {
    do
    {
      v32 = *((_DWORD *)v31 + 7);
      if (*((unsigned __int16 *)a2 + 8) == HIWORD(v32))
      {
        XlChartDataSeries::addCustomLabel(a2, (unsigned __int16)*((_DWORD *)v31 + 7));
        if (a4)
        {
          v33 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 61);
          *(_WORD *)(v33 + 220) = HIWORD(v32);
          *(_DWORD *)(v33 + 216) = (unsigned __int16)v32;
          (*(void (**)(XlChartBinaryReader *, uint64_t))(*(_QWORD *)this + 752))(this, v33);
          XlChartDataSeries::takeCachedCustomLabel(a2, v33);
        }
      }
      v34 = (XlChartBinaryReader *)*((_QWORD *)v31 + 1);
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = *(XlChartBinaryReader **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (XlChartBinaryReader *)*((_QWORD *)v31 + 2);
          v36 = *(_QWORD *)v35 == (_QWORD)v31;
          v31 = v35;
        }
        while (!v36);
      }
      v31 = v35;
    }
    while (v35 != (XlChartBinaryReader *)((char *)this + 1832));
  }
  MEMORY[0x22E2DD408](v9, 0x1000C4087442A64);
  return v38;
}

void sub_22A201FC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartSeries::XlChartSeries(XlChartSeries *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8DA8;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlChartBinaryReader::mapDataLink(uint64_t a1, _DWORD *a2)
{
  XlHeader *v4;
  __int16 *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;

  v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*(XlParserVisitor **)(a1 + 1336), v4, *(_BYTE *)(a1 + 444));
  if (v4->var1 == 4177)
  {
    v5 = (__int16 *)operator new(0x28uLL);
    XlChartAI::XlChartAI((XlChartAI *)v5, v4);
    if (*(_DWORD *)(a1 + 1392) == 0x8000)
      *((_BYTE *)v5 + 14) = 1;
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 1336) + 1816))(*(_QWORD *)(a1 + 1336), v5);
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1328) + 16))(*(_QWORD *)(a1 + 1328), 70);
    v7 = *((_DWORD *)v5 + 5);
    *a2 = *((_DWORD *)v5 + 4);
    *(_DWORD *)(v6 + 8) = v7;
    *(_BYTE *)(v6 + 28) = XlChartAI::isCustomNumberFormat((XlChartAI *)v5) ^ 1;
    *(_WORD *)(v6 + 26) = v5[16];
    if (v5[17] >= 1)
    {
      v8 = (unsigned __int8 *)XlChartAI::giveParsedFormula((XlChartAI *)v5);
      XlChartLinkedData::takeFormula(v6, v8, v5[17]);
    }
    (*(void (**)(__int16 *))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*(_QWORD *)(a1 + 1336));
    v6 = 0;
  }
  MEMORY[0x22E2DD408](v4, 0x1000C4087442A64);
  return v6;
}

void sub_22A2023D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartAI::XlChartAI(XlChartAI *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A8260;
  v2[2] = 0;
  v2[3] = 0;
  *(_QWORD *)((char *)v2 + 30) = 0;
}

uint64_t XlChartParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  int v7;
  size_t v8;
  void *v9;
  _DWORD *exception;
  int v12;
  int v13;

  XlParserVisitor::beginRead((XlParserVisitor *)a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 36) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 34) = v4;
  if (v4 < 1 || *(_BYTE *)(a2 + 14) == 1)
    return XlParserVisitor::endRead(a1, a2);
  v6 = *(_DWORD *)(a2 + 8) + *(_DWORD *)(a1 + 72);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v8 = (v6 - v7);
  v13 = v8;
  if (v8 < *(__int16 *)(a2 + 34))
  {
    exception = __cxa_allocate_exception(4uLL);
    v12 = 3002;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(4uLL);
    v12 = 1011;
LABEL_12:
    *exception = v12;
  }
  if (v6 != v7)
  {
    v9 = operator new[](v8);
    *(_QWORD *)(a1 + 24) = v9;
    (*(void (**)(_QWORD, void *, int *))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), v9, &v13);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return XlParserVisitor::endRead(a1, a2);
}

{
  unsigned int v4;
  unsigned int v5;
  size_t v6;
  void *v7;
  _DWORD *exception;
  int v10;

  XlParserVisitor::beginRead((XlParserVisitor *)a1);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 24) = v4;
  v5 = v4 >> 3;
  if ((v4 & 7) != 0)
    v6 = v5 + 1;
  else
    v6 = v5;
  v10 = v6;
  if (*(_QWORD *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  v7 = operator new[](v6);
  *(_QWORD *)(a1 + 24) = v7;
  (*(void (**)(_QWORD, void *, int *))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), v7, &v10);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  return XlParserVisitor::endRead(a1, a2);
}

void XlChartLinkedData::XlChartLinkedData(XlChartLinkedData *this)
{
  *(_QWORD *)this = &off_24F3A91B8;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = -65536;
  *((_BYTE *)this + 28) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
}

uint64_t XlChartAI::isCustomNumberFormat(XlChartAI *this)
{
  return *((_WORD *)this + 18) & 1;
}

void XlChartAI::~XlChartAI(XlChartAI *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A8260;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A8260;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
}

void XlChartLinkedData::~XlChartLinkedData(XlChartLinkedData *this)
{
  XlChartLinkedData::~XlChartLinkedData(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  XlChartLinkedData *v3;
  uint64_t v4;
  XlChartLinkedData *v5;
  XlChartLinkedData *v6;
  BOOL v7;

  *(_QWORD *)this = &off_24F3A91B8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  v3 = (XlChartLinkedData *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 2) = 0;
  if (v3 != (XlChartLinkedData *)((char *)this + 40))
  {
    do
    {
      v4 = *((_QWORD *)v3 + 5);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = (XlChartLinkedData *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(XlChartLinkedData **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (XlChartLinkedData *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (XlChartLinkedData *)((char *)this + 40));
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

uint64_t XlChartDataSeries::takeTitleLink(XlChartDataSeries *this, XlChartLinkedData *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 18);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 18) = a2;
  return result;
}

uint64_t XlChartAI::giveParsedFormula(XlChartAI *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  return v1;
}

uint64_t XlChartLinkedData::takeFormula(uint64_t this, unsigned __int8 *a2, __int16 a3)
{
  *(_QWORD *)(this + 16) = a2;
  *(_WORD *)(this + 24) = a3;
  return this;
}

uint64_t XlChartBinaryReader::mineEnteredData(XlParserVisitor **this, XlChartLinkedData *a2, unsigned int a3, int a4)
{
  uint64_t *v7;
  uint64_t *v8;
  XlHeader *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned __int16 *v15;
  XlNumberFP *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  __int16 *v22;
  XlNumberFP *v23;
  __int16 v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  OcText *v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int *v46;
  XlHeader *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  int var1;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  XlBlank *v56;
  OcText *v57;
  uint64_t *v58;
  uint64_t v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  int v69;
  char v70;
  int v71;
  char v72;
  unsigned int v73;
  BOOL v74;
  uint64_t *v76[2];
  uint64_t v77;
  unsigned __int16 v78;
  __int16 v79;
  uint64_t *v80;

  if (*((int *)this + 498) < 1)
  {
    v46 = (int *)this + a3;
    if (v46[410] >= 1)
    {
      v47 = (XlHeader *)operator new(8uLL);
      XlHeader::XlHeader(v47);
      v48 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
      v50 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v50 + 16))(v50, v46[410], 0);
      v51 = 0;
      do
      {
        XlParserVisitor::getHeader(this[167], v47, *((_BYTE *)this + 444));
        var1 = v47->var1;
        switch(var1)
        {
          case 513:
            v56 = (XlBlank *)operator new(0x18uLL);
            XlBlank::XlBlank(v56, v47);
            (*(void (**)(XlParserVisitor *, XlBlank *))(*(_QWORD *)this[167] + 24))(this[167], v56);
            if (*((__int16 *)v56 + 9) == a4)
            {
              v57 = (OcText *)operator new(0x30uLL);
              OcText::OcText(v57);
              OcText::allocBuffer(v57, 1u, 1);
              v58 = (uint64_t *)operator new(0x40uLL);
              *((_WORD *)v58 + 4) = -1;
              *v58 = (uint64_t)&off_24F3AB4D8;
              OcText::OcText((OcText *)(v58 + 2));
              v59 = (*(uint64_t (**)(uint64_t *))(*v58 + 48))(v58);
              OcText::operator=(v59, (uint64_t)v57);
              XlChartLinkedData::takeEnteredData((uint64_t)a2, *((unsigned __int16 *)v56 + 8), v58);
              (*((void (**)(OcText *))v57->var0 + 1))(v57);
              v51 = 1;
            }
            (*(void (**)(XlBlank *))(*(_QWORD *)v56 + 8))(v56);
            break;
          case 515:
            XlNumberFP::XlNumberFP((XlNumberFP *)v76, v47);
            (*(void (**)(XlParserVisitor *, uint64_t **))(*(_QWORD *)this[167] + 344))(this[167], v76);
            if (v79 == a4)
            {
              v60 = operator new(0x18uLL);
              v61 = v77;
              v60[4] = -1;
              *(_QWORD *)v60 = &off_24F3AB550;
              *((_QWORD *)v60 + 2) = v61;
              XlChartLinkedData::takeEnteredData((uint64_t)a2, v78, (uint64_t *)v60);
              v51 = 1;
            }
            break;
          case 516:
            XlLabel::XlLabel((XlLabel *)v76, v47);
            (*(void (**)(XlParserVisitor *, uint64_t **))(*(_QWORD *)this[167] + 312))(this[167], v76);
            if (v79 == a4 && v77)
            {
              v53 = (uint64_t *)operator new(0x40uLL);
              *((_WORD *)v53 + 4) = -1;
              *v53 = (uint64_t)&off_24F3AB4D8;
              OcText::OcText((OcText *)(v53 + 2));
              v54 = v77;
              v55 = (*(uint64_t (**)(uint64_t *))(*v53 + 48))(v53);
              OcText::operator=(v55, v54 + 8);
              XlChartLinkedData::takeEnteredData((uint64_t)a2, v78, v53);
              v51 = 1;
            }
            XlLabel::~XlLabel((XlLabel *)v76);
            break;
          default:
            XlParserVisitor::seekNextRecord((uint64_t)this[167]);
            break;
        }
        v62 = (unsigned __int16)v47->var1;
      }
      while (v62 != 4197 && v62 != 10);
      v63 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v63 + 16))(v63, v49, 0);
      MEMORY[0x22E2DD408](v47, 0x1000C4087442A64);
      v64 = v51 & 1;
      return v64 & 1;
    }
LABEL_132:
    v64 = 0;
    return v64 & 1;
  }
  if (a3 == 3 && !*((_BYTE *)this + 1996))
    goto LABEL_132;
  v7 = (uint64_t *)operator new(0x18uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  v76[0] = v7;
  v8 = (uint64_t *)operator new(0x18uLL);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v80 = v8;
  v9 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v9);
  v10 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v11 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((unsigned int *)this + 498), 0);
  v74 = 0;
  v71 = 2 * a4;
  v72 = 0;
  v68 = a4 + 1;
  v69 = (2 * (unsigned __int16)a4) | 1;
  while (1)
  {
    XlParserVisitor::getHeader(this[167], v9, *((_BYTE *)this + 444));
    v12 = v9->var1;
    if (v12 <= 4178)
      break;
    if (v12 == 4179)
    {
      v15 = (unsigned __int16 *)operator new(0x20uLL);
      XlChartRowSel::XlChartRowSel((XlChartRowSel *)v15, v9);
      (*(void (**)(XlParserVisitor *, unsigned __int16 *))(*(_QWORD *)this[167] + 2352))(this[167], v15);
      XlChartColSel::getSelectedColumnIndices((uint64_t)v15, (uint64_t)v76[0]);
      goto LABEL_31;
    }
    if (v12 == 4180)
    {
      v15 = (unsigned __int16 *)operator new(0x20uLL);
      XlChartColSel::XlChartColSel((XlChartColSel *)v15, v9);
      (*(void (**)(XlParserVisitor *, unsigned __int16 *))(*(_QWORD *)this[167] + 2344))(this[167], v15);
      XlChartColSel::getSelectedColumnIndices((uint64_t)v15, (uint64_t)v80);
LABEL_31:
      if (!v15)
        goto LABEL_107;
      goto LABEL_32;
    }
    if (v12 != 4181)
      goto LABEL_29;
    v15 = (unsigned __int16 *)operator new(0x18uLL);
    XlChartDataProp::XlChartDataProp((XlChartDataProp *)v15, v9);
    (*(void (**)(XlParserVisitor *, unsigned __int16 *))(*(_QWORD *)this[167] + 2368))(this[167], v15);
    v74 = v15[8] == 1;
LABEL_32:
    (*(void (**)(unsigned __int16 *))(*(_QWORD *)v15 + 8))(v15);
LABEL_107:
    v45 = (unsigned __int16)v9->var1;
    if (v45 == 4148 || v45 == 10)
    {
      v65 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      v64 = v70;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v65 + 16))(v65, v73, 0);
      v30 = 0;
      goto LABEL_134;
    }
  }
  v13 = (v12 - 513) > 3 || v12 == 514;
  if (v13 && (v12 - 3) >= 2)
  {
LABEL_29:
    XlParserVisitor::seekNextRecord((uint64_t)this[167]);
    goto LABEL_107;
  }
  if (*v76[0] == v76[0][1] || *v80 == v80[1])
  {
    v66 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v66 + 16))(v66, v73, 0);
    v64 = 0;
    v30 = 1;
    goto LABEL_134;
  }
  v14 = (unsigned __int16)v9->var1;
  if (v14 > 0x202)
  {
    if (v14 == 516)
      goto LABEL_26;
    if (v14 != 515)
      goto LABEL_33;
LABEL_24:
    v16 = (XlNumberFP *)operator new(0x20uLL);
    XlNumberFP::XlNumberFP(v16, v9);
    if (v16)
    else
      v17 = 0;
    v19 = (*(uint64_t (**)(XlParserVisitor *, unsigned __int16 *))(*(_QWORD *)this[167] + 344))(this[167], v17);
    goto LABEL_39;
  }
  if (v14 == 3)
    goto LABEL_24;
  if (v14 == 4)
  {
LABEL_26:
    v16 = (XlNumberFP *)operator new(0x20uLL);
    XlLabel::XlLabel(v16, v9);
    if (v16)
    else
      v17 = 0;
    v19 = (*(uint64_t (**)(XlParserVisitor *, unsigned __int16 *))(*(_QWORD *)this[167] + 312))(this[167], v17);
LABEL_39:
    v20 = v17 + 12;
    v21 = v17 + 13;
    v22 = (__int16 *)(v17 + 14);
    goto LABEL_42;
  }
LABEL_33:
  v16 = (XlNumberFP *)operator new(0x18uLL);
  XlBlank::XlBlank(v16, v9);
  if (v16)
  else
    v18 = 0;
  v19 = (*(uint64_t (**)(XlParserVisitor *, unsigned __int16 *))(*(_QWORD *)this[167] + 24))(this[167], v18);
  v20 = v18 + 8;
  v21 = v18 + 9;
  v22 = (__int16 *)(v18 + 10);
LABEL_42:
  v23 = v16;
  v24 = *v22;
  v25 = *v21;
  v26 = *v20;
  v27 = XlChartBinaryReader::mapMSGraphIndex(v19, v26, v76[0]);
  v28 = v27;
  v29 = XlChartBinaryReader::mapMSGraphIndex(v27, v25, v80);
  v30 = 3;
  if (v28 < 0 || v29 < 0)
    goto LABEL_103;
  if (a3 == 2)
  {
    if (v74)
    {
      v30 = 0;
      if ((__int16)v25 >= 1 && !v26)
        goto LABEL_71;
      goto LABEL_103;
    }
    v30 = 0;
    if ((_WORD)v25 || !v26)
      goto LABEL_103;
    goto LABEL_81;
  }
  if (a3 != 1)
  {
    if (a3 != 3)
    {
      if (a3)
      {
        v33 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 16))(v33, v73, 0);
        v70 = 0;
        v30 = 1;
      }
      else if (v74)
      {
        v30 = 0;
        if (!(_WORD)v25 && v68 == v26)
          goto LABEL_82;
      }
      else
      {
        v30 = 0;
        if (!v26 && v68 == (__int16)v25)
          goto LABEL_82;
      }
      goto LABEL_103;
    }
    if (!*((_BYTE *)this + 1996))
      goto LABEL_101;
    if (v74)
    {
      v30 = 0;
      if ((__int16)v25 >= 1 && v26 - 1 == v69)
        goto LABEL_71;
      goto LABEL_103;
    }
    v30 = 0;
    if (!v26 || (__int16)v25 - 1 != v69)
      goto LABEL_103;
    goto LABEL_81;
  }
  if (!v74)
  {
    v32 = (__int16)v25 - 1;
    if (*((_BYTE *)this + 1996))
    {
      if (v32 != v71)
        goto LABEL_101;
    }
    else if (v32 != a4)
    {
      goto LABEL_101;
    }
    if (!v26)
    {
LABEL_101:
      v30 = 0;
      goto LABEL_103;
    }
LABEL_81:
    v30 = v28 - 1;
    goto LABEL_82;
  }
  v31 = v26 - 1;
  if (*((_BYTE *)this + 1996))
  {
    if (v31 != v71)
      goto LABEL_101;
  }
  else if (v31 != a4)
  {
    goto LABEL_101;
  }
  if ((__int16)v25 <= 0)
    goto LABEL_101;
LABEL_71:
  v30 = v29 - 1;
LABEL_82:
  v34 = (unsigned __int16)v9->var1;
  if (v34 > 0x202)
  {
    if (v34 == 516)
      goto LABEL_90;
    if (v34 != 515)
      goto LABEL_92;
    goto LABEL_88;
  }
  if (v34 == 3)
  {
LABEL_88:
    if (v23)
    else
      v35 = 0;
    v38 = (char *)operator new(0x18uLL);
    v41 = v35[2];
    *((_WORD *)v38 + 4) = -1;
    *(_QWORD *)v38 = &off_24F3AB550;
    *((_QWORD *)v38 + 2) = v41;
    goto LABEL_99;
  }
  if (v34 != 4)
  {
LABEL_92:
    v37 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v37);
    OcText::allocBuffer(v37, 1u, 1);
    v38 = (char *)operator new(0x40uLL);
    *((_WORD *)v38 + 4) = -1;
    *(_QWORD *)v38 = &off_24F3AB4D8;
    OcText::OcText((OcText *)(v38 + 16));
    v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 48))(v39);
    OcText::operator=(v40, (uint64_t)v37);
    goto LABEL_98;
  }
LABEL_90:
  if (v23)
  else
    v36 = 0;
  if (!v36[2])
    goto LABEL_101;
  v37 = (OcText *)operator new(0x30uLL);
  OcText::OcText(v37);
  v37->var1 = 1;
  OcText::operator=((uint64_t)v37, v36[2] + 8);
  v38 = (char *)operator new(0x40uLL);
  *((_WORD *)v38 + 4) = -1;
  *(_QWORD *)v38 = &off_24F3AB4D8;
  OcText::OcText((OcText *)(v38 + 16));
  v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v42 + 48))(v42);
  OcText::operator=(v43, (uint64_t)v37);
LABEL_98:
  (*((void (**)(OcText *))v37->var0 + 1))(v37);
LABEL_99:
  *((_WORD *)v38 + 4) = v24;
  XlChartLinkedData::takeEnteredData((uint64_t)a2, v30, (uint64_t *)v38);
  if (a3)
  {
    v30 = 0;
    v72 = 1;
  }
  else
  {
    v44 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 16))(v44, v73, 0);
    v30 = 1;
    v72 = 1;
    v70 = 1;
  }
LABEL_103:
  if (v23)
    (*(void (**)(XlNumberFP *))(*(_QWORD *)v23 + 8))(v23);
  if (!v30 || v30 == 3)
    goto LABEL_107;
  v64 = v70;
LABEL_134:
  MEMORY[0x22E2DD408](v9, 0x1000C4087442A64);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr((uint64_t *)&v80);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr((uint64_t *)v76);
  if (!v30)
    v64 = v72 & 1;
  return v64 & 1;
}

void sub_22A203320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  operator delete(v21);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  MEMORY[0x22E2DD408](v18, 0x1000C4087442A64);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr(&a18);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr(&a14);
  _Unwind_Resume(a1);
}

uint64_t **XlChartLinkedData::takeEnteredData(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t **result;
  unsigned int v9;
  unsigned int *v10;

  v9 = a2;
  v4 = (uint64_t **)(a1 + 32);
  v5 = *(uint64_t **)(a1 + 40);
  if (!v5)
    goto LABEL_10;
  while (1)
  {
    v6 = *((_DWORD *)v5 + 8);
    if (v6 <= a2)
      break;
LABEL_5:
    v5 = (uint64_t *)*v5;
    if (!v5)
      goto LABEL_10;
  }
  if (v6 < a2)
  {
    ++v5;
    goto LABEL_5;
  }
  v10 = &v9;
  v7 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v9, (uint64_t)&std::piecewise_construct, &v10)[5];
  if (v7)
    (*(void (**)(uint64_t *))(*v7 + 8))(v7);
  v10 = &v9;
  std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v9, (uint64_t)&std::piecewise_construct, &v10)[5] = 0;
LABEL_10:
  v10 = &v9;
  result = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v9, (uint64_t)&std::piecewise_construct, &v10);
  result[5] = a3;
  return result;
}

uint64_t XlChartEnteredText::getTextReference(XlChartEnteredText *this)
{
  return (uint64_t)this + 16;
}

void XlBlank::~XlBlank(XlBlank *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartCategoryAxis::takeRange(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 152) = a2;
  return result;
}

void XlLabel::XlLabel(XlLabel *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ACB20;
  v2[2] = 0;
  *(_QWORD *)((char *)v2 + 22) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlLabel *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  char v9;
  XlString *v10;
  _DWORD *exception;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (*((_WORD *)a2 + 6) == 4)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v6 = **((_QWORD **)this + 2);
  if (*((_WORD *)a2 + 6) == 4)
  {
    v7 = (*(uint64_t (**)(void))(v6 + 64))();
  }
  else
  {
    v7 = (*(uint64_t (**)(void))(v6 + 72))();
    if (v7 < 0)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 3002;
    }
  }
  if (v7)
  {
    v8 = *((unsigned __int8 *)a2 + 14);
    if (v8 > 8 || v8 == 1)
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    else
      v9 = 0;
    v10 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v10);
    *((_QWORD *)this + 4) = v10;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)v7, v9, v5 + v4, v10);
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A2038BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlLabel::~XlLabel(XlLabel *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACB20;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACB20;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartCategoryAxis::takeAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 160);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 160) = a2;
  return result;
}

uint64_t XlChartCategoryAxis::takeCategorySpec(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 168);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 168) = a2;
  return result;
}

void XlChartDataFormat::XlChartDataFormat(XlChartDataFormat *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A86E0;
  v2[2] = 0;
}

void XlChartSeriesFormat::XlChartSeriesFormat(XlChartSeriesFormat *this)
{
  this->var0 = (void **)&off_24F3A99D0;
  *(_OWORD *)&this->var1 = 0u;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  *(_QWORD *)&this->var7 = 0;
  *(_QWORD *)&this->var9 = 0xFFFFFFFFLL;
  this->var12 = 0;
  *(_QWORD *)&this->var13 = 0;
  *(_QWORD *)&this->var16 = 0;
}

uint64_t XlChartCatSerRange::isBetween(XlChartCatSerRange *this)
{
  return *((_WORD *)this + 11) & 1;
}

uint64_t XlChartBinaryReader::mapSeriesFormat(XlChartBinaryReader *this, XlChartSeriesFormat *a2)
{
  XlHeader *v4;
  int var1;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  XlChartSeriesFormat *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  int v15;
  XlChartPicF *v16;
  unsigned int v17;
  unsigned int *v19[2];
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;

  v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((_BYTE *)this + 444));
  if (v4->var1 == 4147)
  {
    *((_DWORD *)this + 485) = -1;
    while (XlChartBinaryReader::nextSibling(this, v4))
    {
      var1 = v4->var1;
      if (var1 > 4188)
      {
        switch(var1)
        {
          case 4189:
            v12 = (unsigned __int16 *)operator new(0x18uLL);
            XlChartSerFmt::XlChartSerFmt((XlChartSerFmt *)v12, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 167) + 2208))(*((_QWORD *)this + 167), v12);
            a2->var22 = XlChartArea::isStacked((XlChartArea *)v12);
            a2->var15 = XlChartArea::isCategoryPercentage((XlChartArea *)v12);
            a2->var16 = XlChartAttachedLabel::isShowLabPct((XlChartAttachedLabel *)v12);
            if (v12)
LABEL_24:
              (*(void (**)(unsigned __int16 *))(*(_QWORD *)v12 + 8))(v12);
            break;
          case 4191:
            XlChartShape::XlChartShape((XlChartShape *)v19, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, unsigned int **))(**((_QWORD **)this + 167) + 2256))(*((_QWORD *)this + 167), v19);
            a2->var13 = v20;
            XlChartShape::~XlChartShape((XlChartShape *)v19);
            break;
          case 4198:
            if (a2->var9 < 0)
            {
              v13 = *((unsigned __int16 *)this + 936);
              v23 = v13 | (a2->var12 << 16);
              *((_WORD *)this + 936) = v13 + 1;
              v14 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
              v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
              v19[0] = &v23;
              *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 231, &v23, (uint64_t)&std::piecewise_construct, v19)+ 8) = v15;
            }
            else
            {
              v23 = (unsigned __int16)a2->var9 | (a2->var12 << 16);
              v7 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
              v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
              v19[0] = &v23;
              *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 238, &v23, (uint64_t)&std::piecewise_construct, v19)+ 8) = v8;
            }
            XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
            v16 = (XlChartPicF *)operator new(0x28uLL);
            XlChartPicF::XlChartPicF(v16);
            XlChartBinaryReader::readPictureFormat(this, v16);
          default:
LABEL_17:
            XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
            break;
        }
      }
      else
      {
        switch(v4->var1)
        {
          case 0x1007:
            v6 = XlChartBinaryReader::mapLineProperties(this);
            EshDataModelVisitor::takeClientVisitor((uint64_t)a2, v6);
            break;
          case 0x1008:
            goto LABEL_17;
          case 0x1009:
            v10 = (XlChartSeriesFormat *)XlChartBinaryReader::mapMarkerProperties(this);
            XlChartPlot::takeChartSeriesFormat((XlChartPlot *)a2, v10);
            break;
          case 0x100A:
            v11 = XlChartBinaryReader::mapFillProperties(this);
            XlChartPlot::takeChartFormat((uint64_t)a2, v11);
            break;
          case 0x100B:
            v12 = (unsigned __int16 *)operator new(0x18uLL);
            XlChartPieFormat::XlChartPieFormat((XlChartPieFormat *)v12, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 167) + 2112))(*((_QWORD *)this + 167), v12);
            a2->var10 = v12[8];
            goto LABEL_24;
          case 0x100C:
            v12 = (unsigned __int16 *)operator new(0x18uLL);
            XlChartAttachedLabel::XlChartAttachedLabel((XlChartAttachedLabel *)v12, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 167) + 1848))(*((_QWORD *)this + 167), v12);
            a2->var17 = XlChartArea::isStacked((XlChartArea *)v12);
            a2->var18 = XlChartArea::isCategoryPercentage((XlChartArea *)v12);
            a2->var20 = XlChartAttachedLabel::isShowLabPct((XlChartAttachedLabel *)v12);
            a2->var14 = XlChartAttachedLabel::isSmoothedLine((XlChartAttachedLabel *)v12);
            a2->var19 = XlChartAttachedLabel::isShowLabel((XlChartAttachedLabel *)v12);
            a2->var21 = XlChartAttachedLabel::isShowBubbleSizes((XlChartAttachedLabel *)v12);
            if (v12)
              goto LABEL_24;
            break;
          default:
            if (var1 != 2212)
              goto LABEL_17;
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((_BYTE *)this + 444));
            XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v19, v4);
            (*(void (**)(_QWORD, unsigned int **))(**((_QWORD **)this + 167) + 2392))(*((_QWORD *)this + 167), v19);
            if (v22)
            {
              if (v22 == 1)
              {
                v9 = v21;
                a2->var8 = v21;
                if (v9)
                  a2->var6 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v19);
              }
            }
            else
            {
              v17 = v21;
              a2->var7 = v21;
              if (v17)
                a2->var5 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v19);
            }
            XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)v19);
            break;
        }
      }
    }
  }
  return MEMORY[0x22E2DD408](v4, 0x1000C4087442A64);
}

void sub_22A203ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)va);
  MEMORY[0x22E2DD408](v3, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartShape::XlChartShape(XlChartShape *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8EA8;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChartDataSeries::takeDefaultFormat(XlChartDataSeries *this, XlChartSeriesFormat *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a2)
  {
    v6 = *((_QWORD *)this + 5);
    v4 = (char *)this + 40;
    v5 = v6;
    v7 = (_QWORD *)*((_QWORD *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *((_QWORD *)this + 3);
      v10 = (unint64_t)v7 - v9;
      v11 = (v5 - v9) >> 3;
      v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1)
        v12 = (v10 >> 3) + 1;
      if (v11 >= 0x7FFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        v16 = v15;
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = &v14[v10 & 0x7FFFFFFF8];
      v18 = &v14[8 * v16];
      *(_QWORD *)v17 = a2;
      v8 = v17 + 8;
      v20 = (char *)*((_QWORD *)this + 3);
      v19 = (char *)*((_QWORD *)this + 4);
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*((_QWORD *)this + 3);
      }
      *((_QWORD *)this + 3) = v17;
      *((_QWORD *)this + 4) = v8;
      *((_QWORD *)this + 5) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 4) = v8;
  }
}

void XlChartDataFormat::~XlChartDataFormat(XlChartDataFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A204274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlChartTextFrame::XlChartTextFrame(XlChartTextFrame *this)
{
  uint64_t v1;

  XlChartFrameType::XlChartFrameType((XlChartFrameType *)this);
  *(_QWORD *)v1 = &off_24F3A7708;
  *(_QWORD *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 96) = 255;
  *(_QWORD *)(v1 + 106) = 0;
  *(_QWORD *)(v1 + 98) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 120) = xmmword_22A4C1730;
  *(_DWORD *)(v1 + 136) = 0;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_QWORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 184) = 5111807;
  *(_QWORD *)(v1 + 188) = 0;
  *(_QWORD *)(v1 + 194) = 0;
  *(_BYTE *)(v1 + 202) = 1;
  *(_QWORD *)(v1 + 208) = 0;
}

XlParserVisitor **XlChartBinaryReader::read(XlParserVisitor **this, XlChartTextFrame *a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)((char *)this + ((uint64_t)((unint64_t)*((unsigned int *)a2 + 54) << 48) >> 46) + 1580);
  if ((v2 & 0x80000000) == 0)
    return (XlParserVisitor **)XlChartBinaryReader::readTextFrame(this, a2, v2, 1);
  return this;
}

void sub_22A2043CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A204454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2046A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void XlChartTextFrame::~XlChartTextFrame(XlChartTextFrame *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_24F3A7708;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 13) = 0;
  v3 = *((_QWORD *)this + 26);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 26) = 0;
  v4 = *((_QWORD *)this + 11);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 11) = 0;
  v5 = *((_QWORD *)this + 14);
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C8077774924);
  *((_QWORD *)this + 14) = 0;
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    *((_QWORD *)this + 19) = v6;
    operator delete(v6);
  }
  XlChartFrameType::~XlChartFrameType((XlChartFrameType *)this);
}

{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x22E2DD408);
}

void XlChartFrameType::~XlChartFrameType(XlChartFrameType *this)
{
  XlChartLineStyle *var9;
  XlChartFillStyle *var10;
  XlChartPicF *var11;
  char *var15;

  this->var0 = (void **)&off_24F3A9188;
  var9 = this->var9;
  if (var9)
    (*((void (**)(XlChartLineStyle *))var9->var0 + 1))(var9);
  this->var9 = 0;
  var10 = this->var10;
  if (var10)
    (*((void (**)(XlChartFillStyle *))var10->var0 + 1))(var10);
  this->var10 = 0;
  var11 = this->var11;
  if (var11)
    (*((void (**)(XlChartPicF *))var11->var0 + 1))(var11);
  this->var11 = 0;
  var15 = this->var15;
  if (var15)
    MEMORY[0x22E2DD3F0](var15, 0x1000C8077774924);
  this->var15 = 0;
}

{
  XlChartFrameType::~XlChartFrameType(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartBinaryReader::readTextFrame(XlParserVisitor **this, XlChartTextFrame *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  XlHeader *v9;
  XlParserVisitor *v10;
  char v11;
  char *v12;
  char isShowLabelPercent;
  char v14;
  int v15;
  int Rotation;
  __int16 v17;
  int v18;
  int var1;
  uint64_t v20;
  uint64_t v21;
  XlParserVisitor *v22;
  __int16 *v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  OcText *v29;
  uint64_t v30;
  __int16 v32;
  int v33;
  int v34;

  v8 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, a3, 0);
  v9 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v9);
  XlParserVisitor::getHeader(this[167], v9, *((_BYTE *)this + 444));
  if (v9->var1 == 2132)
  {
    XlParserVisitor::seekNextRecord((uint64_t)this[167]);
    XlParserVisitor::getHeader(this[167], v9, *((_BYTE *)this + 444));
  }
  v10 = this[167];
  if (*((_BYTE *)v10 + 100))
  {
    *((_QWORD *)a2 + 21) = *(_QWORD *)((char *)v10 + 92);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  *((_BYTE *)a2 + 201) = v11;
  v12 = (char *)operator new(0x38uLL);
  XlChartText::XlChartText((XlChartText *)v12, v9);
  (*(void (**)(XlParserVisitor *, char *))(*(_QWORD *)this[167] + 2288))(this[167], v12);
  *(float32x4_t *)((char *)a2 + 8) = vcvtq_f32_s32(*(int32x4_t *)(v12 + 20));
  *((_QWORD *)a2 + 15) = *((_QWORD *)v12 + 6);
  *((_BYTE *)a2 + 189) = XlChartText::isAutoBackground((XlChartText *)v12);
  *((_DWORD *)a2 + 32) = *((_DWORD *)v12 + 11);
  *((_WORD *)a2 + 93) = *((_WORD *)v12 + 18);
  *((_BYTE *)a2 + 188) = XlChartLegend::isAutoPosition((XlChartLegend *)v12);
  *((_BYTE *)a2 + 190) = XlChartLegend::isAutoYPos((XlChartLegend *)v12);
  *((_BYTE *)a2 + 191) = XlChartText::isGenerated((XlChartText *)v12);
  *((_BYTE *)a2 + 192) = XlChartLegend::isVertical((XlChartLegend *)v12);
  *((_BYTE *)a2 + 193) = XlChartText::isDeleted((XlChartText *)v12);
  *((_BYTE *)a2 + 195) = XlChartText::isShowKey((XlChartText *)v12);
  *((_BYTE *)a2 + 196) = XlChartLegend::isAutoXPos((XlChartLegend *)v12);
  if ((XlChartLegend::isAutoXPos((XlChartLegend *)v12) & 1) != 0)
  {
    isShowLabelPercent = 0;
  }
  else if ((XlChartText::isShowLabel((XlChartText *)v12) & 1) != 0)
  {
    isShowLabelPercent = 1;
  }
  else
  {
    isShowLabelPercent = XlChartText::isShowLabelPercent((XlChartText *)v12);
  }
  *((_BYTE *)a2 + 197) = isShowLabelPercent;
  if ((XlChartText::isShowPercent((XlChartText *)v12) & 1) != 0)
    v14 = 1;
  else
    v14 = XlChartText::isShowLabelPercent((XlChartText *)v12);
  *((_BYTE *)a2 + 199) = v14;
  *((_BYTE *)a2 + 200) = XlChartText::isShowBubbleSizes((XlChartText *)v12);
  *((_DWORD *)a2 + 34) = XlChartText::getDataLabelPlacement((XlChartText *)v12);
  v15 = *((__int16 *)v12 + 19);
  if (v15 > 90)
    LOWORD(v15) = 90 - v15;
  *((_WORD *)a2 + 88) = v15;
  *((_BYTE *)a2 + 194) = 0;
  Rotation = XlChartText::getRotation((XlChartText *)v12);
  switch(Rotation)
  {
    case 1:
      v17 = 0;
      *((_BYTE *)a2 + 194) = 1;
      goto LABEL_22;
    case 2:
      v17 = 90;
      goto LABEL_22;
    case 3:
      v17 = -90;
LABEL_22:
      *((_WORD *)a2 + 88) = v17;
      break;
  }
  v18 = *((_DWORD *)v12 + 4);
  *((_WORD *)a2 + 48) = 255;
  *((_WORD *)a2 + 49) = v18;
  *((_WORD *)a2 + 50) = BYTE1(v18);
  *((_WORD *)a2 + 51) = BYTE2(v18);
  XlParserVisitor::getHeader(this[167], v9, *((_BYTE *)this + 444));
  if (v9->var1 != 4147)
    goto LABEL_69;
  v32 = -1;
  while (XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v9))
  {
    var1 = v9->var1;
    if (var1 > 4174)
    {
      if (var1 != 4175)
      {
        if (var1 == 4176)
        {
          XlParserVisitor::skipHeader(this[167]);
          v23 = (__int16 *)operator new(0x20uLL);
          XlChartAlRuns::XlChartAlRuns((XlChartAlRuns *)v23, v9);
          (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 1824))(this[167], v23);
          if (v23[12])
          {
            v28 = 0;
            do
            {
              v34 = *(_DWORD *)XlChartAlRuns::getRichTextRun((XlChartAlRuns *)v23, (unsigned __int16)v28);
              XlChartTextFrame::pushTextRun(a2, &v34);
              ++v28;
            }
            while ((unsigned __int16)v23[12] > (unsigned __int16)v28);
          }
        }
        else
        {
          if (var1 != 4177)
            goto LABEL_49;
          XlParserVisitor::skipHeader(this[167]);
          v23 = (__int16 *)operator new(0x28uLL);
          XlChartAI::XlChartAI((XlChartAI *)v23, v9);
          if (*((_DWORD *)this + 348) == 0x8000)
            *((_BYTE *)v23 + 14) = 1;
          (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 1816))(this[167], v23);
          *((_DWORD *)a2 + 33) = *((_DWORD *)v23 + 5);
          *((_BYTE *)a2 + 202) = XlChartAI::isCustomNumberFormat((XlChartAI *)v23) ^ 1;
          *((_WORD *)a2 + 92) = v23[16];
          v24 = v23[17];
          *((_WORD *)a2 + 89) = v23[17];
          if (v24 >= 1)
            *((_QWORD *)a2 + 13) = XlChartAI::giveParsedFormula((XlChartAI *)v23);
        }
        goto LABEL_64;
      }
      v22 = this[167];
      if (a4)
      {
        XlParserVisitor::skipHeader(v22);
        v23 = (__int16 *)operator new(0x28uLL);
        XlChartPos::XlChartPos((XlChartPos *)v23, v9);
        (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 2152))(this[167], v23);
        *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)v23 + 1);
        goto LABEL_64;
      }
LABEL_50:
      XlParserVisitor::seekNextRecord((uint64_t)v22);
    }
    else
    {
      if (var1 <= 4108)
      {
        if (var1 > 2212)
        {
          if (var1 == 2213)
          {
            v23 = (__int16 *)operator new(0x20uLL);
            XlChartTextPropsStream::XlChartTextPropsStream((XlChartTextPropsStream *)v23, v9);
            XlParserVisitor::skipHeader(this[167]);
            (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 2376))(this[167], v23);
            v27 = *((_DWORD *)v23 + 6);
            if (!v27)
              goto LABEL_64;
LABEL_55:
            *((_DWORD *)a2 + 45) = v27;
            *((_QWORD *)a2 + 14) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v23);
            goto LABEL_64;
          }
          if (var1 != 2214)
            goto LABEL_49;
          v23 = (__int16 *)operator new(0x20uLL);
          XlChartRichTextPropsStream::XlChartRichTextPropsStream((XlChartRichTextPropsStream *)v23, v9);
          XlParserVisitor::skipHeader(this[167]);
          (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 2384))(this[167], v23);
          v27 = *((_DWORD *)v23 + 6);
          if (v27)
            goto LABEL_55;
        }
        else if (var1 == 2155)
        {
          v23 = (__int16 *)operator new(0x20uLL);
          XlChartCustomLabel::XlChartCustomLabel((XlChartCustomLabel *)v23, v9);
          XlParserVisitor::skipHeader(this[167]);
          (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 2336))(this[167], v23);
          v26 = *((_BYTE *)v23 + 24);
          *((_BYTE *)a2 + 196) = (v26 & 4) != 0;
          *((_BYTE *)a2 + 197) = (v26 & 2) != 0;
          *((_BYTE *)a2 + 198) = v26 & 1;
          *((_BYTE *)a2 + 199) = (v26 & 8) != 0;
          *((_BYTE *)a2 + 200) = (v26 & 0x10) != 0;
          *((_QWORD *)a2 + 26) = *((_QWORD *)v23 + 2);
          *((_QWORD *)v23 + 2) = 0;
        }
        else
        {
          if (var1 != 2212)
            goto LABEL_49;
          v23 = (__int16 *)operator new(0x28uLL);
          XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v23, v9);
          XlParserVisitor::skipHeader(this[167]);
          (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 2392))(this[167], v23);
          v25 = *((_DWORD *)v23 + 6);
          if (v25)
          {
            *((_DWORD *)a2 + 20) = v25;
            *((_QWORD *)a2 + 9) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v23);
          }
        }
      }
      else
      {
        if (var1 == 4146)
        {
          v20 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
          XlChartBinaryReader::readFrameFormatting(this, (XlChartFrameType *)a2, v21);
        }
        if (var1 != 4109)
        {
          if (var1 == 4134)
          {
            XlParserVisitor::skipHeader(this[167]);
            v23 = (__int16 *)operator new(0x18uLL);
            XlChartFontX::XlChartFontX((XlChartFontX *)v23, v9);
            (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 2008))(this[167], v23);
            v32 = v23[8];
            goto LABEL_64;
          }
LABEL_49:
          v22 = this[167];
          goto LABEL_50;
        }
        XlParserVisitor::skipHeader(this[167]);
        v23 = (__int16 *)operator new(0x20uLL);
        XlChartSeriesText::XlChartSeriesText((XlChartSeriesText *)v23, v9);
        (*(void (**)(XlParserVisitor *, __int16 *))(*(_QWORD *)this[167] + 2232))(this[167], v23);
        if (*((_QWORD *)v23 + 2))
        {
          v29 = (OcText *)operator new(0x30uLL);
          OcText::OcText(v29);
          OcText::operator=((uint64_t)v29, *((_QWORD *)v23 + 2) + 8);
          v30 = *((_QWORD *)a2 + 11);
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          *((_QWORD *)a2 + 11) = v29;
        }
      }
LABEL_64:
      (*(void (**)(__int16 *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  if (((*((_DWORD *)a2 + 38) - *((_DWORD *)a2 + 36)) & 0x3FFFC) == 0 && (v32 & 0x8000) == 0)
  {
    LOWORD(v33) = 0;
    HIWORD(v33) = v32;
    XlChartTextFrame::pushTextRun(a2, &v33);
  }
  if (v12)
LABEL_69:
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  return MEMORY[0x22E2DD408](v9, 0x1000C4087442A64);
}

void sub_22A205024(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  operator delete(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (!v1)
      goto LABEL_6;
  }
  else if (!v1)
  {
    goto LABEL_6;
  }
  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
LABEL_6:
  _Unwind_Resume(a1);
}

void XlChartText::XlChartText(XlChartText *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8FA8;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t XlChartText::isAutoBackground(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 7) & 1;
}

uint64_t XlChartLegend::isAutoPosition(XlChartLegend *this)
{
  return *((_WORD *)this + 20) & 1;
}

uint64_t XlChartLegend::isAutoYPos(XlChartLegend *this)
{
  return (*((unsigned __int16 *)this + 20) >> 3) & 1;
}

uint64_t XlChartText::isGenerated(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 5) & 1;
}

uint64_t XlChartLegend::isVertical(XlChartLegend *this)
{
  return (*((unsigned __int16 *)this + 20) >> 4) & 1;
}

uint64_t XlChartText::isDeleted(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 6) & 1;
}

uint64_t XlChartText::isShowKey(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 1) & 1;
}

uint64_t XlChartLegend::isAutoXPos(XlChartLegend *this)
{
  return (*((unsigned __int16 *)this + 20) >> 2) & 1;
}

uint64_t XlChartText::isShowLabel(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 14) & 1;
}

uint64_t XlChartText::isShowLabelPercent(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 11) & 1;
}

uint64_t XlChartText::isShowPercent(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 12) & 1;
}

uint64_t XlChartText::isShowBubbleSizes(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 13) & 1;
}

uint64_t XlChartText::getDataLabelPlacement(XlChartText *this)
{
  return *((_WORD *)this + 21) & 0xF;
}

uint64_t XlChartText::getRotation(XlChartText *this)
{
  return *((_BYTE *)this + 41) & 7;
}

void XlChartPos::XlChartPos(XlChartPos *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8BA8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

void XlChartPos::~XlChartPos(XlChartPos *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartFontX::XlChartFontX(XlChartFontX *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8820;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartFontX::~XlChartFontX(XlChartFontX *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartText::~XlChartText(XlChartText *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A205630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2056CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A205758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A205800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A205944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2059D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A205A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A205AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A205B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A205D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A205E18(_Unwind_Exception *a1, XlChartFrameType *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  XlChartFrameType::~XlChartFrameType((XlChartFrameType *)&a10);
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::read(XlParserVisitor **this, XlChartPlotFrame *a2)
{
  uint64_t v4;
  XlHeader *v5;
  char *v6;

  v4 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, *((unsigned int *)this + 399), 0);
  v5 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v5);
  XlParserVisitor::getHeader(this[167], v5, *((_BYTE *)this + 444));
  v6 = (char *)operator new(0x28uLL);
  XlChartAxisParent::XlChartAxisParent((XlChartAxisParent *)v6, v5);
  (*(void (**)(XlParserVisitor *, char *))(*(_QWORD *)this[167] + 1888))(this[167], v6);
  *(float32x4_t *)((char *)a2 + 8) = vcvtq_f32_s32(*(int32x4_t *)(v6 + 20));
  XlChartBinaryReader::scanAxisParent((uint64_t)this, (uint64_t)(this + 208));
}

void XlChartBinaryReader::scanAxisParent(uint64_t a1, uint64_t a2)
{
  XlHeader *v4;
  uint64_t v5;
  int v6;
  int v7;
  int var1;
  XlChartAxis *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  int v26;

  *(_QWORD *)a2 = -1;
  *(_QWORD *)(a2 + 8) = -1;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 40) = -1;
  *(_DWORD *)(a2 + 48) = -1;
  *(_DWORD *)(a1 + 1660) = -1;
  v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*(XlParserVisitor **)(a1 + 1336), v4, *(_BYTE *)(a1 + 444));
  if (v4->var1 != 4147)
LABEL_42:
    JUMPOUT(0x22E2DD408);
  while (1)
  {
    while (1)
    {
      if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)a1, v4))
        goto LABEL_42;
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v7 = v6;
      var1 = v4->var1;
      if (var1 > 4132)
        break;
      if (var1 == 4116)
      {
        v14 = *(char **)(a2 + 24);
        v13 = *(_QWORD *)(a2 + 32);
        if ((unint64_t)v14 >= v13)
        {
          v16 = *(char **)(a2 + 16);
          v17 = v14 - v16;
          v18 = (unint64_t)(v14 - v16) >> 2;
          v19 = (v13 - (unint64_t)v16) >> 2;
          if (2 * (int)v19 <= (v18 + 1))
            v20 = v18 + 1;
          else
            v20 = 2 * v19;
          if (v19 >= 0x7FFFFFFF)
            v21 = 0xFFFFFFFFLL;
          else
            v21 = v20;
          if ((_DWORD)v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(a2 + 32, v21);
            v24 = v23;
            v16 = *(char **)(a2 + 16);
            v14 = *(char **)(a2 + 24);
          }
          else
          {
            v22 = 0;
            v24 = 0;
          }
          v25 = &v22[v17 & 0x3FFFFFFFCLL];
          *(_DWORD *)v25 = v7;
          v15 = v25 + 4;
          while (v14 != v16)
          {
            v26 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          *(_QWORD *)(a2 + 16) = v25;
          *(_QWORD *)(a2 + 24) = v15;
          *(_QWORD *)(a2 + 32) = &v22[4 * v24];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v14 = v6;
          v15 = v14 + 4;
        }
        *(_QWORD *)(a2 + 24) = v15;
LABEL_41:
        XlParserVisitor::seekNextRecord(*(_QWORD *)(a1 + 1336));
      }
      else
      {
        if (var1 != 4125)
          goto LABEL_41;
        XlParserVisitor::skipHeader(*(XlParserVisitor **)(a1 + 1336));
        v9 = (XlChartAxis *)operator new(0x18uLL);
        XlChartAxis::XlChartAxis(v9, v4);
        (*(void (**)(_QWORD, XlChartAxis *))(**(_QWORD **)(a1 + 1336) + 1864))(*(_QWORD *)(a1 + 1336), v9);
        v10 = *((_DWORD *)v9 + 4);
        if (v10)
        {
          if (v10 == 1)
          {
            *(_DWORD *)(a2 + 4) = v7;
          }
          else if (v10 == 2)
          {
            *(_DWORD *)(a2 + 8) = v7;
          }
        }
        else
        {
          *(_DWORD *)a2 = v7;
        }
        (*(void (**)(XlChartAxis *))(*(_QWORD *)v9 + 8))(v9);
      }
    }
    if (var1 == 4133)
    {
      v11 = XlChartBinaryReader::scanTextForObjectType((XlChartBinaryReader *)a1, 0, 0);
      switch(v11)
      {
        case 2:
          *(_DWORD *)(a2 + 44) = v7;
          break;
        case 3:
          *(_DWORD *)(a2 + 40) = v7;
          break;
        case 7:
          *(_DWORD *)(a2 + 48) = v7;
          break;
      }
    }
    else
    {
      if (var1 != 4149)
      {
        if (var1 == 4175)
          *(_DWORD *)(a1 + 1660) = v6;
        goto LABEL_41;
      }
      XlParserVisitor::seekNextRecord(*(_QWORD *)(a1 + 1336));
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    }
  }
}

void sub_22A2063E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(exception_object);
}

void XlChartAxis::XlChartAxis(XlChartAxis *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A83E0;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChartAxis::~XlChartAxis(XlChartAxis *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartBinaryReader::readFrameFormatting(XlParserVisitor **this, XlChartFrameType *a2, uint64_t a3)
{
  uint64_t v6;
  XlHeader *v7;
  XlChartFrame *v8;
  int var1;
  XlChartLineStyle *v10;
  uint64_t v11;
  XlChartPicF *v12;
  XlChartShapePropsStream *v13;
  unsigned int v14;
  XlChartFillStyle *v15;

  v6 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, a3, 0);
  v7 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v7);
  XlParserVisitor::getHeader(this[167], v7, *((_BYTE *)this + 444));
  v8 = (XlChartFrame *)operator new(0x18uLL);
  XlChartFrame::XlChartFrame(v8, v7);
  (*(void (**)(XlParserVisitor *, XlChartFrame *))(*(_QWORD *)this[167] + 2016))(this[167], v8);
  a2->var12 = *((_DWORD *)v8 + 4) == 4;
  a2->var13 = XlChartBar::isStacked(v8);
  a2->var14 = XlChartBar::isTranspose(v8);
  XlParserVisitor::getHeader(this[167], v7, *((_BYTE *)this + 444));
  if (v7->var1 != 4147)
  {
LABEL_17:
    (*(void (**)(XlChartFrame *))(*(_QWORD *)v8 + 8))(v8);
    goto LABEL_18;
  }
  *((_DWORD *)this + 485) = -1;
  while (1)
  {
    while (1)
    {
      if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v7))
      {
        if (v8)
          goto LABEL_17;
LABEL_18:
        JUMPOUT(0x22E2DD408);
      }
      var1 = v7->var1;
      if (var1 <= 4105)
        break;
      if (var1 == 4106)
      {
        v15 = (XlChartFillStyle *)XlChartBinaryReader::mapFillProperties((XlChartBinaryReader *)this);
        XlChartFrameType::takeAreaFillStyle(a2, v15);
      }
      else
      {
        if (var1 == 4198)
        {
          v11 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
          *((_DWORD *)this + 485) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          XlParserVisitor::seekNextRecord((uint64_t)this[167]);
          v12 = (XlChartPicF *)operator new(0x28uLL);
          XlChartPicF::XlChartPicF(v12);
          XlChartBinaryReader::readPictureFormat((XlChartBinaryReader *)this, v12);
        }
LABEL_15:
        XlParserVisitor::seekNextRecord((uint64_t)this[167]);
      }
    }
    if (var1 == 2212)
    {
      v13 = (XlChartShapePropsStream *)operator new(0x28uLL);
      XlChartShapePropsStream::XlChartShapePropsStream(v13, v7);
      XlParserVisitor::skipHeader(this[167]);
      (*(void (**)(XlParserVisitor *, XlChartShapePropsStream *))(*(_QWORD *)this[167] + 2392))(this[167], v13);
      v14 = *((_DWORD *)v13 + 6);
      if (v14)
      {
        a2->var16 = v14;
        a2->var15 = (char *)XlChartRichTextPropsStream::giveXmlStream(v13);
      }
      (*(void (**)(XlChartShapePropsStream *))(*(_QWORD *)v13 + 8))(v13);
    }
    else
    {
      if (var1 != 4103)
        goto LABEL_15;
      v10 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)this);
      XlChartFrameType::takeBorderStyle(a2, v10);
    }
  }
}

void sub_22A206760(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartFrame::XlChartFrame(XlChartFrame *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8860;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
}

uint64_t XlChartBar::isStacked(XlChartBar *this)
{
  return (*((unsigned __int16 *)this + 10) >> 1) & 1;
}

uint64_t XlChartBar::isTranspose(XlChartBar *this)
{
  return *((_WORD *)this + 10) & 1;
}

uint64_t XlChartBinaryReader::mapLineProperties(XlChartBinaryReader *this)
{
  XlHeader *v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int var1;
  XlChartDTLineFormat *v10;
  uint64_t v11;

  v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((_BYTE *)this + 444));
  if (v2->var1 == 4103)
  {
    v3 = (char *)operator new(0x20uLL);
    XlChartLineFormat::XlChartLineFormat((XlChartLineFormat *)v3, v2);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 69);
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 2064))(*((_QWORD *)this + 167), v3);
    v5 = *((_DWORD *)v3 + 4);
    *(_WORD *)(v4 + 8) = 255;
    *(_WORD *)(v4 + 10) = v5;
    *(_WORD *)(v4 + 12) = BYTE1(v5);
    *(_WORD *)(v4 + 14) = BYTE2(v5);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 20);
    *(_BYTE *)(v4 + 26) = XlChart3D::isPerspective((XlChart3D *)v3);
    *(_WORD *)(v4 + 24) = *((_WORD *)v3 + 15);
    *(_BYTE *)(v4 + 27) = XlChart3D::is3DScaling((XlChart3D *)v3);
    *(_BYTE *)(v4 + 28) = (v3[28] & 8) != 0;
    v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    while (XlChartBinaryReader::nextSibling(this, v2))
    {
      var1 = (unsigned __int16)v2->var1;
      if (var1 == 2249)
      {
        v10 = (XlChartDTLineFormat *)operator new(0x20uLL);
        XlChartDTLineFormat::XlChartDTLineFormat(v10, v2);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        (*(void (**)(_QWORD, XlChartDTLineFormat *))(**((_QWORD **)this + 167) + 2072))(*((_QWORD *)this + 167), v10);
        *(_DWORD *)(v4 + 32) = *((_DWORD *)v10 + 6);
        *(_DWORD *)(v4 + 36) = *((_DWORD *)v10 + 5);
        (*(void (**)(XlChartDTLineFormat *))(*(_QWORD *)v10 + 8))(v10);
      }
      else
      {
        if (var1 == 4103 || var1 == 4129)
          break;
        XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
      }
    }
    v11 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, v7, 0);
    if (v3)
      (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*((_QWORD *)this + 167));
    v4 = 0;
  }
  MEMORY[0x22E2DD408](v2, 0x1000C4087442A64);
  return v4;
}

void sub_22A206AEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
    {
LABEL_8:
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      if (!v1)
LABEL_5:
        _Unwind_Resume(exception_object);
LABEL_4:
      MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
      goto LABEL_5;
    }
  }
  else if (v2)
  {
    goto LABEL_8;
  }
  if (!v1)
    goto LABEL_5;
  goto LABEL_4;
}

void XlChartLineFormat::XlChartLineFormat(XlChartLineFormat *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A89E0;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlChart3D::isPerspective(XlChart3D *this)
{
  return this->var8 & 1;
}

uint64_t XlChart3D::is3DScaling(XlChart3D *this)
{
  return ((unsigned __int16)this->var8 >> 2) & 1;
}

void XlChartLineFormat::~XlChartLineFormat(XlChartLineFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartBinaryReader::mapFillProperties(XlChartBinaryReader *this)
{
  XlHeader *v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((_BYTE *)this + 444));
  if (v2->var1 == 4106)
  {
    v3 = (char *)operator new(0x20uLL);
    XlChartAreaFormat::XlChartAreaFormat((XlChartAreaFormat *)v3, v2);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 66);
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 1840))(*((_QWORD *)this + 167), v3);
    v5 = *((_DWORD *)v3 + 4);
    v6 = *((_DWORD *)v3 + 5);
    *(_WORD *)(v4 + 10) = v5;
    *(_WORD *)(v4 + 8) = 255;
    *(_WORD *)(v4 + 12) = BYTE1(v5);
    *(_WORD *)(v4 + 14) = BYTE2(v5);
    *(_WORD *)(v4 + 16) = 255;
    *(_WORD *)(v4 + 18) = v6;
    *(_WORD *)(v4 + 20) = BYTE1(v6);
    *(_WORD *)(v4 + 22) = BYTE2(v6);
    *(_WORD *)(v4 + 24) = *((_WORD *)v3 + 12);
    *(_BYTE *)(v4 + 30) = XlChartAreaFormat::isInvertNegative((XlChartAreaFormat *)v3);
    *(_BYTE *)(v4 + 31) = XlChartAreaFormat::isAuto((XlChartAreaFormat *)v3);
    *(_DWORD *)(v4 + 26) = *(_DWORD *)(v3 + 26);
    *(_BYTE *)(v4 + 32) = XlChartAreaFormat::isShadow((XlChartAreaFormat *)v3);
    (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*((_QWORD *)this + 167));
    v4 = 0;
  }
  MEMORY[0x22E2DD408](v2, 0x1000C4087442A64);
  return v4;
}

void sub_22A206E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartAreaFormat::XlChartAreaFormat(XlChartAreaFormat *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A8320;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlChartAreaFormat::isInvertNegative(XlChartAreaFormat *this)
{
  return (*((unsigned __int16 *)this + 15) >> 1) & 1;
}

uint64_t XlChartAreaFormat::isAuto(XlChartAreaFormat *this)
{
  return *((_WORD *)this + 15) & 1;
}

uint64_t XlChartAreaFormat::isShadow(XlChartAreaFormat *this)
{
  return (*((unsigned __int16 *)this + 15) >> 2) & 1;
}

void XlChartAreaFormat::~XlChartAreaFormat(XlChartAreaFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

XlChartFillStyle *XlChartFrameType::takeAreaFillStyle(XlChartFrameType *this, XlChartFillStyle *a2)
{
  XlChartFillStyle *result;

  result = this->var10;
  if (result)
    result = (XlChartFillStyle *)(*((uint64_t (**)(XlChartFillStyle *))result->var0 + 1))(result);
  this->var10 = a2;
  return result;
}

void XlChartFrame::~XlChartFrame(XlChartFrame *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A2070E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2071A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A207590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A207D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL XlChartBinaryReader::hasAxis(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a1 + 1664;
  v4 = 1720;
  if (a2)
    v3 = a1 + 1720;
  else
    v4 = 1664;
  switch(a3)
  {
    case 2:
      v5 = *(_DWORD *)(v3 + 8);
      return v5 > 0;
    case 1:
      v5 = *(_DWORD *)(v3 + 4);
      return v5 > 0;
    case 0:
      v5 = *(_DWORD *)(a1 + v4);
      return v5 > 0;
  }
  return 0;
}

uint64_t XlChartBinaryReader::read(uint64_t result, int a2, int a3, XlChartPlotAxis **a4)
{
  XlChartPlotAxis **v4;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  XlHeader *v13;
  XlChartAxis *v14;
  uint64_t v15;
  int v16;
  int v17;
  XlChartAxCext *v18;
  XlChartAxis *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  XlChartValueAxis *v23;
  int v24;
  uint64_t v25;
  int var1;
  XlChartTick *v27;
  XlChartValueAxis *v28;
  uint64_t v29;
  XlChartPicF *v30;
  XlChartPlotAxis *v31;
  XlChartValueRange *v32;
  XlChartPlotAxis *v33;
  XlChartAxisLineFormat *v34;
  XlChartPlotAxis *v35;
  XlChartSeriesFormat *v36;
  unsigned __int16 *v37;
  XlRecord *v38;
  const void *v39;
  XlChartAxCext *v40;
  void *v41;
  XlChartPlotAxis *v42;
  unsigned int v43;
  XlChartPlotAxis *v44;
  XlChartLineStyle *v45;
  XlChartPlotAxis *v46;
  XlChartLineStyle *v47;
  XlChartPlotAxis *v48;
  XlChartFillStyle *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  XlChartPlotAxis *v53;
  XlChartPicF *v54;
  uint64_t v55;
  XlChartPlotAxis *v56;
  unsigned int v57;
  XlChartPlotAxis *v58;
  unsigned int v59;
  XlChartPlotAxis *v60;
  unsigned int v61;
  XlChartTextFrame *v63;
  int v64;
  unsigned int v65;
  const void **v66;
  int v67;
  int v68;
  XlChartAxis *v69;
  _BYTE v70[16];
  unsigned __int16 v71;
  unsigned int v72;
  int v73;

  v4 = a4;
  v7 = result;
  v8 = (unsigned int *)(result + 1664);
  if (a2)
    v8 = (unsigned int *)(result + 1720);
  if (a3)
  {
    if (a3 == 1)
    {
      v9 = v8 + 11;
      ++v8;
    }
    else
    {
      if (a3 != 2)
      {
        *a4 = 0;
        return result;
      }
      v9 = v8 + 12;
      v8 += 2;
    }
  }
  else
  {
    v9 = v8 + 10;
  }
  v10 = *v8;
  v11 = *v9;
  *a4 = 0;
  if ((int)v10 >= 1)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 624))(result);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, v10, 0);
    v13 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v13);
    XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
    v14 = (XlChartAxis *)operator new(0x18uLL);
    XlChartAxis::XlChartAxis(v14, v13);
    v69 = v14;
    (*(void (**)(_QWORD, XlChartAxis *))(**(_QWORD **)(v7 + 1336) + 1864))(*(_QWORD *)(v7 + 1336), v14);
    XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
    if (v13->var1 == 4147)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 624))(v7);
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      v66 = (const void **)v4;
      v16 = 3;
      *(_DWORD *)(v7 + 1940) = -1;
      while (1)
      {
        if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v7, v13))
        {
          v19 = v14;
          switch(v16)
          {
            case 0:
              goto LABEL_31;
            case 1:
              goto LABEL_35;
            case 2:
              v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 1328) + 16))(*(_QWORD *)(v7 + 1328), 63);
              v4 = (XlChartPlotAxis **)v66;
              v68 = 0;
              v64 = 1;
              goto LABEL_36;
            case 3:
              v21 = *((_DWORD *)v14 + 4);
              if (v21 == 1)
              {
LABEL_35:
                v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 1328) + 16))(*(_QWORD *)(v7 + 1328), 60);
                v4 = (XlChartPlotAxis **)v66;
                v64 = 0;
                v68 = 1;
LABEL_36:
                v24 = 0;
                *v4 = (XlChartPlotAxis *)v20;
                v67 = 1;
              }
              else
              {
                if (v21)
                {
LABEL_113:
                  (*(void (**)(XlChartAxis *))(*(_QWORD *)v19 + 8))(v19);
LABEL_114:
                  JUMPOUT(0x22E2DD408);
                }
LABEL_31:
                v4 = (XlChartPlotAxis **)v66;
                *v66 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 1328) + 16))(*(_QWORD *)(v7 + 1328), 84);
                if (a3 == 1 && ((*(_QWORD *)(v7 + 1952) - *(_QWORD *)(v7 + 1944)) >> 2) > (a2 != 0))
                {
                  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 624))(v7);
                  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(unsigned int *)(*(_QWORD *)(v7 + 1944) + 4 * (a2 != 0)), 0);
                  XlChartBinaryReader::readAxisDisplayUnit((XlChartBinaryReader *)v7, v23);
                }
                v67 = 0;
                v68 = 0;
                v64 = 0;
                v24 = 1;
              }
              v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 624))(v7);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 16))(v25, v65, 0);
              break;
            default:
              v19 = v14;
              if (v14)
                goto LABEL_113;
              goto LABEL_114;
          }
          while (1)
          {
            while (1)
            {
LABEL_38:
              if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v7, v13))
                goto LABEL_102;
              var1 = v13->var1;
              if (var1 <= 4125)
                break;
              if (var1 > 4173)
              {
                if (var1 == 4174)
                {
                  XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                  XlChartiFmt::XlChartiFmt((XlChartiFmt *)v70, v13);
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 1336) + 2032))(*(_QWORD *)(v7 + 1336), v70);
                  XlChartPlotAxis::setNumberFormatIndex(*v4, v71);
                  XlChartiFmt::~XlChartiFmt((XlChartiFmt *)v70);
                  continue;
                }
                if (var1 != 4194)
                {
                  if (var1 == 4198)
                  {
                    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 624))(v7);
                    *(_DWORD *)(v7 + 1940) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
                    XlParserVisitor::seekNextRecord(*(_QWORD *)(v7 + 1336));
                    v30 = (XlChartPicF *)operator new(0x28uLL);
                    XlChartPicF::XlChartPicF(v30);
                    XlChartBinaryReader::readPictureFormat((XlChartBinaryReader *)v7, v30);
                  }
LABEL_78:
                  XlParserVisitor::seekNextRecord(*(_QWORD *)(v7 + 1336));
                  continue;
                }
                if (!v67)
                  goto LABEL_78;
                XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                v40 = (XlChartAxCext *)operator new(0x28uLL);
                XlChartAxCext::XlChartAxCext(v40, v13);
                (*(void (**)(_QWORD, XlChartAxCext *))(**(_QWORD **)(v7 + 1336) + 1872))(*(_QWORD *)(v7 + 1336), v40);
                v41 = *v4;
                if (v64)
                {
                  if (v41)
                  XlChartDateAxis::takeDateSpec((XlChartDateAxis *)v41, v40);
                }
                else
                {
                  if (v41)
                  XlChartCategoryAxis::takeCategorySpec((uint64_t)v41, (uint64_t)v40);
                }
              }
              else
              {
                switch(v13->var1)
                {
                  case 0x101E:
                    XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                    v27 = (XlChartTick *)operator new(0x30uLL);
                    XlChartTick::XlChartTick(v27, v13);
                    (*(void (**)(_QWORD, XlChartTick *))(**(_QWORD **)(v7 + 1336) + 2296))(*(_QWORD *)(v7 + 1336), v27);
                    XlChartPlotAxis::takeTicks(*v4, v27);
                    continue;
                  case 0x101F:
                    if (!v24)
                      goto LABEL_78;
                    XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                    v32 = (XlChartValueRange *)operator new(0x40uLL);
                    XlChartValueRange::XlChartValueRange(v32, v13);
                    (*(void (**)(_QWORD, XlChartValueRange *))(**(_QWORD **)(v7 + 1336) + 2312))(*(_QWORD *)(v7 + 1336), v32);
                    v33 = *v4;
                    if (*v4)
                    goto LABEL_60;
                  case 0x1020:
                    if ((v24 & 1) != 0)
                      goto LABEL_78;
                    XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                    v32 = (XlChartValueRange *)operator new(0x18uLL);
                    XlChartCatSerRange::XlChartCatSerRange(v32, v13);
                    (*(void (**)(_QWORD, XlChartValueRange *))(**(_QWORD **)(v7 + 1336) + 1928))(*(_QWORD *)(v7 + 1336), v32);
                    v33 = *v4;
                    if (*v4)
LABEL_60:
                    XlChartCategoryAxis::takeRange((uint64_t)v33, (uint64_t)v32);
                    continue;
                  case 0x1021:
                    XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                    v34 = (XlChartAxisLineFormat *)operator new(0x18uLL);
                    XlChartAxisLineFormat::XlChartAxisLineFormat(v34, v13);
                    (*(void (**)(_QWORD, XlChartAxisLineFormat *))(**(_QWORD **)(v7 + 1336) + 1880))(*(_QWORD *)(v7 + 1336), v34);
                    switch(*((_DWORD *)v34 + 4))
                    {
                      case 0:
                        v35 = *v4;
                        v36 = (XlChartSeriesFormat *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartPlot::takeChartSeriesFormat((XlChartPlot *)v35, v36);
                        goto LABEL_94;
                      case 1:
                        v44 = *v4;
                        v45 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartPlot::takeDropLineFormat((XlChartPlot *)v44, v45);
                        goto LABEL_94;
                      case 2:
                        v46 = *v4;
                        v47 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartFrameType::takeBorderStyle((XlChartFrameType *)v46, v47);
                        goto LABEL_94;
                      case 3:
                        v48 = *v4;
                        v49 = (XlChartFillStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartFrameType::takeAreaFillStyle((XlChartFrameType *)v48, v49);
                        v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 624))(v7);
                        v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
                        break;
                      default:
                        goto LABEL_94;
                    }
                    break;
                  case 0x1026:
                    XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                    v37 = (unsigned __int16 *)operator new(0x18uLL);
                    XlChartFontX::XlChartFontX((XlChartFontX *)v37, v13);
                    (*(void (**)(_QWORD, unsigned __int16 *))(**(_QWORD **)(v7 + 1336) + 2008))(*(_QWORD *)(v7 + 1336), v37);
                    XlChartPlotAxis::setFontIndex(*v4, v37[8]);
                    (*(void (**)(unsigned __int16 *))(*(_QWORD *)v37 + 8))(v37);
                    continue;
                  default:
                    goto LABEL_78;
                }
                while (XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v7, v13))
                {
                  v52 = (unsigned __int16)v13->var1;
                  if (v52 == 4106)
                  {
                    v53 = *v4;
                    v54 = (XlChartPicF *)XlChartBinaryReader::mapFillProperties((XlChartBinaryReader *)v7);
                    XlChartFrameType::takePictureFormat((XlChartFrameType *)v53, v54);
                  }
                  else
                  {
                    if (v52 == 4129)
                      break;
                    XlParserVisitor::seekNextRecord(*(_QWORD *)(v7 + 1336));
                  }
                }
                v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 624))(v7);
                (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v55 + 16))(v55, v51, 0);
                if (v34)
LABEL_94:
                  (*(void (**)(XlChartAxisLineFormat *))(*(_QWORD *)v34 + 8))(v34);
              }
            }
            if (var1 > 2211)
            {
              if (var1 == 2212)
              {
                XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v70, v13);
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 1336) + 2392))(*(_QWORD *)(v7 + 1336), v70);
                switch(v73)
                {
                  case 0:
                    v42 = *v4;
                    v43 = v72;
                    (*v4)->var17 = v72;
                    if (v43)
                      v42->var10 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    break;
                  case 1:
                    v56 = *v4;
                    v57 = v72;
                    (*v4)->var18 = v72;
                    if (v57)
                      v56->var11 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    break;
                  case 2:
                    v58 = *v4;
                    v59 = v72;
                    (*v4)->var19 = v72;
                    if (v59)
                      v58->var12 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    break;
                  case 3:
                    v60 = *v4;
                    v61 = v72;
                    (*v4)->var20 = v72;
                    if (v61)
                      v60->var13 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    break;
                  default:
                    break;
                }
                XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)v70);
              }
              else
              {
                if (var1 != 2213)
                  goto LABEL_78;
                XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
                XlChartTextPropsStream::XlChartTextPropsStream((XlChartTextPropsStream *)v70, v13);
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 1336) + 2376))(*(_QWORD *)(v7 + 1336), v70);
                if (v72)
                {
                  v31 = *v4;
                  (*v4)->var21 = v72;
                  v31->var14 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                }
                XlChartTextPropsStream::~XlChartTextPropsStream((XlChartTextPropsStream *)v70);
              }
            }
            else
            {
              if (var1 != 2134)
              {
                if (var1 == 2135 && v24)
                {
                  XlChartBinaryReader::readAxisDisplayUnit((XlChartBinaryReader *)v7, v28);
                  goto LABEL_38;
                }
                goto LABEL_78;
              }
              if (!v68)
                goto LABEL_78;
              XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
              v38 = (XlRecord *)operator new(0x18uLL);
              XlRecord::XlRecord(v38, v13);
              *(_QWORD *)v38 = &off_24F3AB498;
              *((_DWORD *)v38 + 4) = 1;
              *((_WORD *)v38 + 10) = 0;
              (*(void (**)(_QWORD, XlRecord *))(**(_QWORD **)(v7 + 1336) + 2328))(*(_QWORD *)(v7 + 1336), v38);
              v39 = *v4;
              if (*v4)
              XlChartCategoryAxis::takeAlignment((uint64_t)v39, (uint64_t)v38);
            }
          }
        }
        v17 = v13->var1;
        switch(v17)
        {
          case 4127:
            goto LABEL_23;
          case 4128:
            if (v16 == 3)
              v16 = 1;
LABEL_23:
            if (v16 == 3)
              v16 = 0;
LABEL_25:
            XlParserVisitor::seekNextRecord(*(_QWORD *)(v7 + 1336));
            break;
          case 4194:
            XlParserVisitor::getHeader(*(XlParserVisitor **)(v7 + 1336), v13, *(_BYTE *)(v7 + 444));
            v18 = (XlChartAxCext *)operator new(0x28uLL);
            XlChartAxCext::XlChartAxCext(v18, v13);
            (*(void (**)(_QWORD, XlChartAxCext *))(**(_QWORD **)(v7 + 1336) + 1872))(*(_QWORD *)(v7 + 1336), v18);
            if (XlChartAxCext::isDateAxis(v18))
              v16 = 2;
            else
              v16 = 1;
            if (v18)
              (*(void (**)(XlChartAxCext *))(*(_QWORD *)v18 + 8))(v18);
            break;
          default:
            goto LABEL_25;
        }
      }
    }
LABEL_102:
    result = (uint64_t)v69;
    if (v69)
      result = (*(uint64_t (**)(XlChartAxis *))(*(_QWORD *)v69 + 8))(v69);
    v11 = v11;
    if (v13)
      result = MEMORY[0x22E2DD408](v13, 0x1000C4087442A64);
  }
  if ((int)v11 >= 1 && *v4 != 0)
  {
    v63 = (XlChartTextFrame *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 1328) + 16))(*(_QWORD *)(v7 + 1328), 81);
    XlChartBinaryReader::readTextFrame((XlParserVisitor **)v7, v63, v11, 1);
    return XlChartPlot::takeChartFormat((uint64_t)*v4, (uint64_t)v63);
  }
  return result;
}

void sub_22A2089BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (v14)
    MEMORY[0x22E2DD408](v14, 0x1000C4087442A64);
  _Unwind_Resume(exception_object);
}

void XlChartAxCext::XlChartAxCext(XlChartAxCext *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A83A0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 239;
}

uint64_t XlChartAxCext::isDateAxis(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 4) & 1;
}

void XlChartAxCext::~XlChartAxCext(XlChartAxCext *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartCategoryAxis::XlChartCategoryAxis(XlChartCategoryAxis *this)
{
  _QWORD *v1;

  XlChartPlotAxis::XlChartPlotAxis((XlChartPlotAxis *)this);
  *v1 = &off_24F3A9068;
  v1[20] = 0;
  v1[21] = 0;
  v1[19] = 0;
}

void XlChartPlotAxis::XlChartPlotAxis(XlChartPlotAxis *this)
{
  this->var0 = (void **)off_24F3A9980;
  this->var1 = 0;
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  *(_OWORD *)&this->var6 = 0u;
  *(_OWORD *)&this->var8 = 0u;
  *(_OWORD *)&this->var10 = 0u;
  *(_OWORD *)&this->var12 = 0u;
  *(_OWORD *)&this->var14 = 0u;
  *(_OWORD *)&this->var18 = 0u;
  *(_WORD *)&this->var22 = 0;
}

void XlChartCatSerRange::XlChartCatSerRange(XlChartCatSerRange *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A8520;
  v2[2] = 0x1000100010000;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartCatSerRange *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlChartTick::XlChartTick(XlChartTick *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3A8FE8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 36) = 0;
  *(_QWORD *)(v2 + 28) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartTick *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (*((_DWORD *)a2 + 2) >= 0x1Eu)
  {
    *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
    *((_WORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

XlChartTick *XlChartPlotAxis::takeTicks(XlChartPlotAxis *this, XlChartTick *a2)
{
  XlChartTick *result;

  result = this->var9;
  if (result)
    result = (XlChartTick *)(*(uint64_t (**)(XlChartTick *))(*(_QWORD *)result + 8))(result);
  this->var9 = a2;
  return result;
}

uint64_t XlChartCategoryAxis::getType(XlChartCategoryAxis *this)
{
  return 1;
}

void sub_22A2090EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A209278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlChartCatSerRange::isReverse(XlChartCatSerRange *this)
{
  return (*((unsigned __int16 *)this + 11) >> 2) & 1;
}

uint64_t XlChartAxCext::isAutoMax(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 1) & 1;
}

uint64_t XlChartAxCext::isAutoMin(XlChartAxCext *this)
{
  return *((_WORD *)this + 16) & 1;
}

void sub_22A2093F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A209488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A209520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t XlChartTick::isAutoRotation(XlChartTick *this)
{
  return (*((unsigned __int16 *)this + 11) >> 5) & 1;
}

void sub_22A209640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A209718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A209850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A209910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void XlChartCategoryAxis::~XlChartCategoryAxis(XlChartPlotAxis *this)
{
  XlChartCategoryAxis::~XlChartCategoryAxis(this);
  JUMPOUT(0x22E2DD408);
}

{
  void **var0;
  uint64_t v3;
  XlChartTextFrame *var2;

  this->var0 = (void **)&off_24F3A9068;
  var0 = this[1].var0;
  if (var0)
    (*((void (**)(void **))*var0 + 1))(var0);
  this[1].var0 = 0;
  v3 = *(_QWORD *)&this[1].var1;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)&this[1].var1 = 0;
  var2 = this[1].var2;
  if (var2)
    (*(void (**)(XlChartTextFrame *))(*(_QWORD *)var2 + 8))(var2);
  this[1].var2 = 0;
  XlChartPlotAxis::~XlChartPlotAxis(this);
}

void XlChartCatSerRange::~XlChartCatSerRange(XlChartCatSerRange *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartPlotAxis::~XlChartPlotAxis(XlChartPlotAxis *this)
{
  XlChartTextFrame *var2;
  XlChartLineStyle *var3;
  XlChartLineStyle *var4;
  XlChartLineStyle *var5;
  XlChartLineStyle *var6;
  XlChartFillStyle *var7;
  XlChartTick *var9;
  char *var10;
  char *var11;
  char *var12;
  char *var13;
  char *var14;
  XlChartPicF *var8;

  this->var0 = (void **)off_24F3A9980;
  var2 = this->var2;
  if (var2)
    (*(void (**)(XlChartTextFrame *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
  var3 = this->var3;
  if (var3)
    (*((void (**)(XlChartLineStyle *))var3->var0 + 1))(var3);
  this->var3 = 0;
  var4 = this->var4;
  if (var4)
    (*((void (**)(XlChartLineStyle *))var4->var0 + 1))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    (*((void (**)(XlChartLineStyle *))var5->var0 + 1))(var5);
  this->var5 = 0;
  var6 = this->var6;
  if (var6)
    (*((void (**)(XlChartLineStyle *))var6->var0 + 1))(var6);
  this->var6 = 0;
  var7 = this->var7;
  if (var7)
    (*((void (**)(XlChartFillStyle *))var7->var0 + 1))(var7);
  this->var7 = 0;
  var9 = this->var9;
  if (var9)
    (*(void (**)(XlChartTick *))(*(_QWORD *)var9 + 8))(var9);
  this->var9 = 0;
  var10 = this->var10;
  if (var10)
    MEMORY[0x22E2DD3F0](var10, 0x1000C8077774924);
  this->var10 = 0;
  var11 = this->var11;
  if (var11)
    MEMORY[0x22E2DD3F0](var11, 0x1000C8077774924);
  this->var11 = 0;
  var12 = this->var12;
  if (var12)
    MEMORY[0x22E2DD3F0](var12, 0x1000C8077774924);
  this->var12 = 0;
  var13 = this->var13;
  if (var13)
    MEMORY[0x22E2DD3F0](var13, 0x1000C8077774924);
  this->var13 = 0;
  var14 = this->var14;
  if (var14)
    MEMORY[0x22E2DD3F0](var14, 0x1000C8077774924);
  this->var14 = 0;
  var8 = this->var8;
  if (var8)
    (*((void (**)(XlChartPicF *))var8->var0 + 1))(var8);
  this->var8 = 0;
}

void XlChartTick::~XlChartTick(XlChartTick *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartValueAxis::XlChartValueAxis(XlChartValueAxis *this)
{
  _QWORD *v1;

  XlChartPlotAxis::XlChartPlotAxis((XlChartPlotAxis *)this);
  *v1 = &off_24F3A9A08;
  v1[20] = 0;
  v1[21] = 0;
  v1[19] = 0;
}

void XlChartValueRange::XlChartValueRange(XlChartValueRange *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A9028;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 56) = 31;
}

void XlChartAxisLineFormat::XlChartAxisLineFormat(XlChartAxisLineFormat *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8420;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChartAxisLineFormat::~XlChartAxisLineFormat(XlChartAxisLineFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartSeriesText::XlChartSeriesText(XlChartSeriesText *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8DE8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 26) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartSeriesText *a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;
  XlString *v8;
  _DWORD *exception;

  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  if (v4)
  {
    v5 = v4;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    if (*((_QWORD *)this + 4))
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 3002;
    }
    v7 = v6;
    v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((_QWORD *)this + 4) = v8;
    XlStringParser::parse((XlChartParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5, v7, *((_DWORD *)a2 + 2) + *((_DWORD *)this + 18), v8);
    XlChartSeriesText::takeText((uint64_t)a2, *((XlString **)this + 4));
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A209ED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlChartSeriesText::takeText(uint64_t this, XlString *a2)
{
  int v2;

  *(_QWORD *)(this + 16) = a2;
  if (a2)
    v2 = *((_DWORD *)a2 + 6);
  else
    LOBYTE(v2) = 0;
  *(_BYTE *)(this + 26) = v2;
  return this;
}

void XlChartSeriesText::~XlChartSeriesText(XlChartSeriesText *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A8DE8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A8DE8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

uint64_t XlChartValueAxis::getType(XlChartValueAxis *this)
{
  return 0;
}

void sub_22A20A15C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t XlChartValueRange::isAutoMax(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 1) & 1;
}

uint64_t XlChartValueRange::isLogScale(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 5) & 1;
}

uint64_t XlChartValueRange::isAutoMin(XlChartValueRange *this)
{
  return *((_WORD *)this + 28) & 1;
}

uint64_t XlChartValueRange::isAutoMajor(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 2) & 1;
}

uint64_t XlChartValueRange::isAutoMinor(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 3) & 1;
}

uint64_t XlChartValueRange::isAutoCross(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 4) & 1;
}

uint64_t XlChartValueRange::isReverse(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 6) & 1;
}

void sub_22A20A338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A20A554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A20A620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20A6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A20A950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void XlChartValueAxis::~XlChartValueAxis(XlChartPlotAxis *this)
{
  XlChartValueAxis::~XlChartValueAxis(this);
  JUMPOUT(0x22E2DD408);
}

{
  void **var0;
  uint64_t v3;
  XlChartTextFrame *var2;

  this->var0 = (void **)&off_24F3A9A08;
  var0 = this[1].var0;
  if (var0)
    (*((void (**)(void **))*var0 + 1))(var0);
  this[1].var0 = 0;
  v3 = *(_QWORD *)&this[1].var1;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)&this[1].var1 = 0;
  var2 = this[1].var2;
  if (var2)
    (*(void (**)(XlChartTextFrame *))(*(_QWORD *)var2 + 8))(var2);
  this[1].var2 = 0;
  XlChartPlotAxis::~XlChartPlotAxis(this);
}

void XlChartValueRange::~XlChartValueRange(XlChartValueRange *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartLineStyle::~XlChartLineStyle(XlChartLineStyle *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartBinaryReader::getPlotCount(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = 1744;
  if (!a2)
    v2 = 1688;
  v3 = 1736;
  v4 = *(_DWORD *)(a1 + v2);
  if (!a2)
    v3 = 1680;
  return (unsigned __int16)((v4 - *(_DWORD *)(a1 + v3)) >> 2);
}

uint64_t XlChartBinaryReader::read(uint64_t result, int a2, unsigned int a3, XlChartPlot **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  XlHeader *v10;
  XlChartChartLine *v11;
  XlChartChartFormat *v12;
  XlChart3D *v13;
  int var1;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  XlHeader *v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  XlChartLineStyle *v28;
  XlChartPlot *v29;
  XlChartPlot *v30;
  int v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  int v42;
  XlChartPlot *v43;
  XlChartPlot *v44;
  XlChartPlot *v45;
  int v46;
  int v47;
  int v48;
  XlChartDefaultText *v49;
  int v50;
  XlChartTextFrame *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _BYTE v55[24];
  int v56;
  int v57;

  *a4 = 0;
  *(_QWORD *)(result + 1624) = *(_QWORD *)(result + 1616);
  *(_DWORD *)(result + 1612) = -1;
  v4 = 1736;
  if (!a2)
    v4 = 1680;
  v5 = *(unsigned int *)(*(_QWORD *)(result + v4) + 4 * a3);
  if ((_DWORD)v5 != -1)
  {
    v8 = result;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 624))(result);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, v5, 0);
    v10 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v10);
    XlParserVisitor::getHeader(*(XlParserVisitor **)(v8 + 1336), v10, *(_BYTE *)(v8 + 444));
    v11 = (XlChartChartLine *)operator new(0x18uLL);
    XlChartChartLine::XlChartChartLine(v11);
    v12 = (XlChartChartFormat *)operator new(0x18uLL);
    XlChartChartFormat::XlChartChartFormat(v12, v10);
    (*(void (**)(_QWORD, XlChartChartFormat *))(**(_QWORD **)(v8 + 1336) + 1944))(*(_QWORD *)(v8 + 1336), v12);
    v13 = (XlChart3D *)operator new(0x20uLL);
    XlChart3D::XlChart3D(v13);
    result = XlParserVisitor::getHeader(*(XlParserVisitor **)(v8 + 1336), v10, *(_BYTE *)(v8 + 444));
    if (v10->var1 != 4147)
      goto LABEL_74;
    v54 = 0;
    while (XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v8, v10))
    {
      var1 = v10->var1;
      if (var1 > 4153)
      {
        switch(v10->var1)
        {
          case 0x103A:
            XlRecord::setHeader((XlHeader *)v13, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            v54 = 1;
            (*(void (**)(_QWORD, XlChart3D *))(**(_QWORD **)(v8 + 1336) + 1808))(*(_QWORD *)(v8 + 1336), v13);
            continue;
          case 0x103B:
          case 0x103C:
            goto LABEL_57;
          case 0x103D:
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 624))(v8);
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
            v22 = v21;
            v23 = *(char **)(v8 + 1624);
            v24 = *(_QWORD *)(v8 + 1632);
            if ((unint64_t)v23 >= v24)
            {
              v32 = *(char **)(v8 + 1616);
              v33 = v23 - v32;
              v34 = (unint64_t)(v23 - v32) >> 2;
              v35 = (v24 - (unint64_t)v32) >> 2;
              if (2 * (int)v35 <= (v34 + 1))
                v36 = v34 + 1;
              else
                v36 = 2 * v35;
              if (v35 >= 0x7FFFFFFF)
                v37 = 0xFFFFFFFFLL;
              else
                v37 = v36;
              if ((_DWORD)v37)
              {
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v8 + 1632, v37);
                v40 = v39;
                v23 = *(char **)(v8 + 1624);
                v32 = *(char **)(v8 + 1616);
              }
              else
              {
                v38 = 0;
                v40 = 0;
              }
              v41 = &v38[v33 & 0x3FFFFFFFCLL];
              *(_DWORD *)v41 = v22;
              v25 = v41 + 4;
              while (v23 != v32)
              {
                v42 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v41 - 1) = v42;
                v41 -= 4;
              }
              *(_QWORD *)(v8 + 1616) = v41;
              *(_QWORD *)(v8 + 1624) = v25;
              *(_QWORD *)(v8 + 1632) = &v38[4 * v40];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v23 = v21;
              v25 = v23 + 4;
            }
            *(_QWORD *)(v8 + 1624) = v25;
            goto LABEL_57;
          case 0x103E:
            v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 77);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 2160))(*(_QWORD *)(v8 + 1336), v19 + 18);
            goto LABEL_32;
          case 0x103F:
            v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 80);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 2280))(*(_QWORD *)(v8 + 1336), v19 + 18);
            goto LABEL_32;
          case 0x1040:
            v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 76);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 2168))(*(_QWORD *)(v8 + 1336), v19 + 18);
            goto LABEL_32;
          default:
            if (var1 == 4193)
            {
              v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 74);
              XlRecord::setHeader(v19 + 18, v10);
              XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
              (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 1912))(*(_QWORD *)(v8 + 1336), v19 + 18);
LABEL_32:
              *a4 = (XlChartPlot *)v19;
            }
            else
            {
LABEL_57:
              XlParserVisitor::seekNextRecord(*(_QWORD *)(v8 + 1336));
            }
            break;
        }
      }
      else
      {
        switch(v10->var1)
        {
          case 0x1015:
            v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 624))(v8);
            *(_DWORD *)(v8 + 1612) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
            goto LABEL_57;
          case 0x1016:
          case 0x101D:
          case 0x101E:
          case 0x101F:
          case 0x1020:
          case 0x1021:
          case 0x1022:
          case 0x1023:
            goto LABEL_57;
          case 0x1017:
            v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 59);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 1896))(*(_QWORD *)(v8 + 1336), v19 + 18);
            goto LABEL_32;
          case 0x1018:
            v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 68);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 2056))(*(_QWORD *)(v8 + 1336), v19 + 18);
            goto LABEL_32;
          case 0x1019:
            v26 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 73);
            XlRecord::setHeader((XlHeader *)(v26 + 144), v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1336) + 2104))(*(_QWORD *)(v8 + 1336), v26 + 144);
            if (XlChartBar::isStacked((XlChartBar *)(v26 + 144)))
              *(_BYTE *)(v26 + 143) = 1;
            *a4 = (XlChartPlot *)v26;
            continue;
          case 0x101A:
            v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 58);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 1832))(*(_QWORD *)(v8 + 1336), v19 + 18);
            goto LABEL_32;
          case 0x101B:
            v19 = (XlHeader *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 78);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlHeader *))(**(_QWORD **)(v8 + 1336) + 2184))(*(_QWORD *)(v8 + 1336), v19 + 18);
            goto LABEL_32;
          case 0x101C:
            XlRecord::setHeader((XlHeader *)v11, v10);
            XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
            (*(void (**)(_QWORD, XlChartChartLine *))(**(_QWORD **)(v8 + 1336) + 1952))(*(_QWORD *)(v8 + 1336), v11);
            if (*a4)
            {
              v27 = XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v8);
              v28 = (XlChartLineStyle *)v27;
              switch(*((_DWORD *)v11 + 4))
              {
                case 0:
                  v29 = *a4;
                  *((_BYTE *)v29 + 140) = 1;
                  XlChartPlot::takeDropLineFormat(v29, v28);
                  break;
                case 1:
                  v43 = *a4;
                  *((_BYTE *)v43 + 141) = 1;
                  XlChartFrameType::takeBorderStyle((XlChartFrameType *)v43, v28);
                  break;
                case 2:
                  v44 = *a4;
                  *((_BYTE *)v44 + 142) = 1;
                  XlChartFrameType::takeAreaFillStyle((XlChartFrameType *)v44, (XlChartFillStyle *)v28);
                  break;
                case 3:
                  v45 = *a4;
                  *((_BYTE *)v45 + 143) = 1;
                  XlChartFrameType::takePictureFormat((XlChartFrameType *)v45, (XlChartPicF *)v28);
                  break;
                default:
                  if (v27)
                    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
                  break;
              }
            }
            continue;
          case 0x1024:
            if (*a4)
            {
              XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
              v49 = (XlChartDefaultText *)operator new(0x18uLL);
              XlChartDefaultText::XlChartDefaultText(v49, v10);
              (*(void (**)(_QWORD, XlChartDefaultText *))(**(_QWORD **)(v8 + 1336) + 1976))(*(_QWORD *)(v8 + 1336), v49);
              v50 = *((_DWORD *)v49 + 4);
              v51 = (XlChartTextFrame *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 81);
              v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 624))(v8);
              v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
              XlChartBinaryReader::readTextFrame((XlParserVisitor **)v8, v51, v53, 1);
              XlChartPlot::takeDefaultText(*a4, (uint64_t)v51, v50);
              (*(void (**)(XlChartDefaultText *))(*(_QWORD *)v49 + 8))(v49);
            }
            continue;
          default:
            if (var1 == 2212)
            {
              XlParserVisitor::getHeader(*(XlParserVisitor **)(v8 + 1336), v10, *(_BYTE *)(v8 + 444));
              XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v55, v10);
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 1336) + 2392))(*(_QWORD *)(v8 + 1336), v55);
              v30 = *a4;
              if (*a4)
              {
                switch(v57)
                {
                  case 0:
                    v31 = v56;
                    *((_DWORD *)v30 + 24) = v56;
                    if (v31)
                      *((_QWORD *)v30 + 8) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    break;
                  case 1:
                    v46 = v56;
                    *((_DWORD *)v30 + 25) = v56;
                    if (v46)
                      *((_QWORD *)v30 + 9) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    break;
                  case 2:
                    v47 = v56;
                    *((_DWORD *)v30 + 27) = v56;
                    if (v47)
                      *((_QWORD *)v30 + 11) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    break;
                  case 3:
                    v48 = v56;
                    *((_DWORD *)v30 + 26) = v56;
                    if (v48)
                      *((_QWORD *)v30 + 10) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    break;
                  default:
                    break;
                }
              }
              XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)v55);
            }
            else
            {
              if (var1 != 4102)
                goto LABEL_57;
              v16 = (char *)operator new(0x18uLL);
              XlChartDataFormat::XlChartDataFormat((XlChartDataFormat *)v16, v10);
              XlParserVisitor::skipHeader(*(XlParserVisitor **)(v8 + 1336));
              (*(void (**)(_QWORD, char *))(**(_QWORD **)(v8 + 1336) + 1968))(*(_QWORD *)(v8 + 1336), v16);
              if ((*((__int16 *)v16 + 8) & 0x80000000) == 0 && *a4)
              {
                v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 1328) + 16))(*(_QWORD *)(v8 + 1328), 79);
                *(_BYTE *)(v17 + 89) = XlChartCatSerRange::isBetween((XlChartCatSerRange *)v16);
                HIDWORD(v18) = *(_DWORD *)(v16 + 18);
                LODWORD(v18) = HIDWORD(v18);
                *(_DWORD *)(v17 + 70) = v18 >> 16;
                XlChartBinaryReader::mapSeriesFormat((XlChartBinaryReader *)v8, (XlChartSeriesFormat *)v17);
                XlChartPlot::takeChartSeriesFormat(*a4, (XlChartSeriesFormat *)v17);
              }
              (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
            }
            break;
        }
      }
    }
    result = (uint64_t)*a4;
    if (*a4)
    {
      if ((v54 & 1) != 0)
      {
        EshDataModelVisitor::takeClientVisitor(result, (uint64_t)v13);
      }
      else if (v13)
      {
        (*((void (**)(XlChart3D *))v13->var0 + 1))(v13);
      }
      result = XlChartPlot::takeChartFormat((uint64_t)*a4, (uint64_t)v12);
      *((_DWORD *)*a4 + 34) = a2;
      if (!v11)
        goto LABEL_80;
    }
    else
    {
LABEL_74:
      if (v13)
        result = (*((uint64_t (**)(XlChart3D *))v13->var0 + 1))(v13);
      if (v12)
        result = (*(uint64_t (**)(XlChartChartFormat *))(*(_QWORD *)v12 + 8))(v12);
      if (!v11)
        goto LABEL_80;
    }
    result = (*(uint64_t (**)(XlChartChartLine *))(*(_QWORD *)v11 + 8))(v11);
LABEL_80:
    if (v10)
      return MEMORY[0x22E2DD408](v10, 0x1000C4087442A64);
  }
  return result;
}

void sub_22A20B594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)va);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (a5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
    if (!v7)
    {
LABEL_5:
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if (!v7)
  {
    goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v6)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_6:
  MEMORY[0x22E2DD408](v6, 0x1000C4087442A64);
  goto LABEL_7;
}

void XlChartChartLine::XlChartChartLine(XlChartChartLine *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this);
  *(_QWORD *)v1 = &off_24F3A85E0;
  *(_DWORD *)(v1 + 16) = 0;
}

void XlRecord::XlRecord(XlRecord *this)
{
  *(_QWORD *)this = off_24F3AD590;
  XlHeader::XlHeader((XlHeader *)this + 1);
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 14) = 0;
}

void XlChartChartFormat::XlChartChartFormat(XlChartChartFormat *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A85A0;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChart3D::XlChart3D(XlChart3D *this)
{
  uint64_t v1;

  XlRecord::XlRecord((XlRecord *)this, 4154, 14, 0);
  *(_QWORD *)v1 = &off_24F3A8208;
  *(_QWORD *)(v1 + 16) = 0x64001E001E0014;
  *(_DWORD *)(v1 + 24) = 6553700;
  *(_WORD *)(v1 + 28) = 23;
}

void XlChartBarPlot::XlChartBarPlot(XlChartBarPlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartBar::XlChartBar((XlChartBar *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A92B8;
  *((_QWORD *)this + 18) = &unk_24F3A92E0;
}

void sub_22A20B910(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartPlot::XlChartPlot(XlChartPlot *this)
{
  *(_QWORD *)this = off_24F3A9948;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
}

void XlChartBar::XlChartBar(XlChartBar *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4119, 6, 0);
  *(_QWORD *)v1 = &off_24F3A84A0;
  *(_DWORD *)(v1 + 16) = 3276800;
  *(_WORD *)(v1 + 20) = 0;
}

XlHeader *XlRecord::setHeader(XlHeader *this, XlHeader *a2)
{
  this[1] = *a2;
  return this;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartBar *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlChart3D::~XlChart3D(XlChart3D *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartChartLine::~XlChartChartLine(XlChartChartLine *this)
{
  JUMPOUT(0x22E2DD408);
}

BOOL XlChartBinaryReader::hasLegend(XlChartBinaryReader *this)
{
  return *((_DWORD *)this + 403) > 0;
}

void sub_22A20BB0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20BF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t XlChartBarPlot::getChartType(XlChartBarPlot *this)
{
  return 0;
}

void sub_22A20C0EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20C290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20C310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20C3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t XlChartBar::isCategoryPercentage(XlChartBar *this)
{
  return (*((unsigned __int16 *)this + 10) >> 2) & 1;
}

void sub_22A20C488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t XlChartChartFormat::isVaried(XlChartChartFormat *this)
{
  return *((_WORD *)this + 9) & 1;
}

uint64_t XlChartDataSeries::getSeriesType(XlChartDataSeries *this)
{
  return 0;
}

void sub_22A20C954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A20CB50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20CC24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, EDValue a13)
{
  void *v13;
  void *v14;
  void *v16;

  v16 = v14;

  _Unwind_Resume(a1);
}

void sub_22A20D128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20D1D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20D248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20D348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL XlChartLinkedData::hasEnteredData(XlChartLinkedData *this)
{
  return *((_DWORD *)this + 12) != 0;
}

void sub_22A20D3E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20D498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20D51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20D5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CsData::CsData(CsData *this)
{
  this->var0 = 0;
  this->var1 = 0;
}

uint64_t XlChartEnteredNumber::isNumber(XlChartEnteredNumber *this)
{
  return 1;
}

double XlChartEnteredNumber::getNumber(XlChartEnteredNumber *this)
{
  return *((double *)this + 2);
}

uint64_t EDValue::operator=(uint64_t a1, int *a2)
{
  void *v4;
  int v5;
  const char *v6;

  if (a2 != (int *)a1)
  {
    if (*(_DWORD *)a1 == 3)
    {
      v4 = *(void **)(a1 + 8);
      if (v4)
        free(v4);
    }
    v5 = *a2;
    *(_DWORD *)a1 = *a2;
    switch(v5)
    {
      case 0:
        goto LABEL_10;
      case 1:
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        break;
      case 2:
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        break;
      case 3:
        v6 = (const char *)*((_QWORD *)a2 + 1);
        if (v6)
          *(_QWORD *)(a1 + 8) = strdup(v6);
        else
LABEL_10:
          *(_QWORD *)(a1 + 8) = 0;
        break;
      case 5:
        *(_DWORD *)(a1 + 8) = a2[2];
        break;
      case 6:
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        break;
      default:
        return a1;
    }
  }
  return a1;
}

void EDValue::~EDValue(EDValue *this)
{
  char *string;

  if (this->type == 3)
  {
    string = this->var0.string;
    if (string)
      free(string);
  }
}

uint64_t XlChartEnteredText::isNumber(XlChartEnteredText *this)
{
  return 0;
}

uint64_t XlChartEnteredText::isText(XlChartEnteredText *this)
{
  return 1;
}

uint64_t XlChartEnteredText::getText(XlChartEnteredText *this)
{
  return (uint64_t)this + 16;
}

void sub_22A20D968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A20D9F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20DA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A20DC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *XlChartBinaryReader::setDefaultFormat(uint64_t *this, int a2, int a3)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;

  v3 = this;
  v4 = a3 | (a2 << 16);
  v8 = v4;
  v5 = this[232];
  if (v5)
  {
    this += 231;
    do
    {
      v6 = *(_DWORD *)(v5 + 28);
      if (v4 >= v6)
      {
        if (v6 >= v4)
        {
          v9 = &v8;
          this = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this, &v8, (uint64_t)&std::piecewise_construct, &v9);
          v7 = *((_DWORD *)this + 8);
          goto LABEL_9;
        }
        v5 += 8;
      }
      v5 = *(_QWORD *)v5;
    }
    while (v5);
  }
  v7 = -1;
LABEL_9:
  *((_DWORD *)v3 + 485) = v7;
  return this;
}

void sub_22A20DE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A20E0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A20E1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A20E3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20E4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20E594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A20E6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A20E844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A20EA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20EB50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20EF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A20F0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20F18C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A20F218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20F298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartBarPlot::~XlChartBarPlot(XlChartBarPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void XlChartPlot::~XlChartPlot(XlChartPlot *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  *(_QWORD *)this = off_24F3A9948;
  v3 = *((_QWORD *)this + 14);
  v2 = *((_QWORD *)this + 15);
  if ((((_DWORD)v2 - (_DWORD)v3) & 0xFFFF0) != 0)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v3 + v4);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v3 = *((_QWORD *)this + 14);
        v2 = *((_QWORD *)this + 15);
      }
      ++v5;
      v4 += 16;
    }
    while (v5 < (unsigned __int16)((v2 - v3) >> 4));
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 1) = 0;
  v8 = *((_QWORD *)this + 2);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 2) = 0;
  v9 = *((_QWORD *)this + 3);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 3) = 0;
  v10 = *((_QWORD *)this + 4);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 4) = 0;
  v11 = *((_QWORD *)this + 5);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 5) = 0;
  v12 = *((_QWORD *)this + 6);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 6) = 0;
  v13 = *((_QWORD *)this + 7);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *((_QWORD *)this + 7) = 0;
  v14 = *((_QWORD *)this + 8);
  if (v14)
    MEMORY[0x22E2DD3F0](v14, 0x1000C8077774924);
  *((_QWORD *)this + 8) = 0;
  v15 = *((_QWORD *)this + 9);
  if (v15)
    MEMORY[0x22E2DD3F0](v15, 0x1000C8077774924);
  *((_QWORD *)this + 9) = 0;
  v16 = *((_QWORD *)this + 10);
  if (v16)
    MEMORY[0x22E2DD3F0](v16, 0x1000C8077774924);
  *((_QWORD *)this + 10) = 0;
  v17 = *((_QWORD *)this + 11);
  if (v17)
    MEMORY[0x22E2DD3F0](v17, 0x1000C8077774924);
  *((_QWORD *)this + 11) = 0;
  v18 = (void *)*((_QWORD *)this + 14);
  if (v18)
  {
    *((_QWORD *)this + 15) = v18;
    operator delete(v18);
  }
}

void XlChartChartFormat::~XlChartChartFormat(XlChartChartFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartFillStyle::~XlChartFillStyle(XlChartFillStyle *this)
{
  JUMPOUT(0x22E2DD408);
}

BOOL XlChartBinaryReader::hasTitle(XlChartBinaryReader *this)
{
  return *((_DWORD *)this + 402) > 0;
}

uint64_t XlChartBinaryReader::read(uint64_t this, XlChartTextFrame *a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(this + 1608);
  if ((int)v2 >= 1)
    return XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, a2, v2, 1);
  return this;
}

void XlChartParent::~XlChartParent(XlChartParent *this)
{
  char *v2;
  _QWORD *v3;
  char *v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24F3A98C8;
  *((_QWORD *)this + 11) = &unk_24F3A98E8;
  v2 = (char *)this + 88;
  v4 = (char *)this + 240;
  v3 = (_QWORD *)*((_QWORD *)this + 30);
  if (((*((_QWORD *)v4 + 1) - (_QWORD)v3) & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    do
    {
      v6 = v5;
      v7 = v3[v5];
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v3 = (_QWORD *)*((_QWORD *)this + 30);
      }
      v3[v6] = 0;
      v5 = v6 + 1;
      v3 = (_QWORD *)*((_QWORD *)this + 30);
    }
    while (((*((_QWORD *)this + 31) - (_QWORD)v3) >> 3) > (unsigned __int16)(v6 + 1));
  }
  if (v3)
  {
    *((_QWORD *)this + 31) = v3;
    operator delete(v3);
  }
  XlString::~XlString((XlString *)((char *)this + 120));
  TSURectWithOriginAndSize(v2);
  XlChartFrameType::~XlChartFrameType((XlChartFrameType *)this);
}

{
  XlChartParent::~XlChartParent(this);
  JUMPOUT(0x22E2DD408);
}

void XlChartFBI::~XlChartFBI(XlChartFBI *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A20F714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHBState;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void XlChartDataSeries::~XlChartDataSeries(XlChartDataSeries *this)
{
  XlChartDataSeries::~XlChartDataSeries(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  *(_QWORD *)this = &off_24F3A90B8;
  v2 = *((_QWORD *)this + 18);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 18) = 0;
  v3 = *((_QWORD *)this + 19);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 19) = 0;
  v4 = *((_QWORD *)this + 20);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 20) = 0;
  v5 = *((_QWORD *)this + 21);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 21) = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
  v7 = *((_QWORD *)this + 22);
  if (((*((_DWORD *)this + 46) - (_DWORD)v7) & 0x7FFF8) != 0)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v7 = *((_QWORD *)this + 22);
      }
      *(_QWORD *)(v7 + 8 * v8++) = 0;
      v7 = *((_QWORD *)this + 22);
    }
    while (v8 < (unsigned __int16)((*((_DWORD *)this + 46) - v7) >> 3));
  }
  *((_QWORD *)this + 23) = v7;
  v10 = *((_QWORD *)this + 3);
  if (((*((_DWORD *)this + 8) - (_DWORD)v10) & 0x7FFF8) != 0)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v10 + 8 * v11);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v10 = *((_QWORD *)this + 3);
      }
      *(_QWORD *)(v10 + 8 * v11++) = 0;
      v10 = *((_QWORD *)this + 3);
    }
    while (v11 < (unsigned __int16)((*((_DWORD *)this + 8) - v10) >> 3));
  }
  *((_QWORD *)this + 4) = v10;
  v13 = *((_QWORD *)this + 6);
  if (((*((_DWORD *)this + 14) - (_DWORD)v13) & 0x7FFF8) != 0)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(v13 + 8 * v14);
      if (v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v13 = *((_QWORD *)this + 6);
      }
      *(_QWORD *)(v13 + 8 * v14++) = 0;
      v13 = *((_QWORD *)this + 6);
    }
    while (v14 < (unsigned __int16)((*((_DWORD *)this + 14) - v13) >> 3));
  }
  *((_QWORD *)this + 7) = v13;
  v16 = *((_QWORD *)this + 9);
  if (((*((_DWORD *)this + 20) - (_DWORD)v16) & 0x7FFF8) != 0)
  {
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(v16 + 8 * v17);
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v16 = *((_QWORD *)this + 9);
      }
      *(_QWORD *)(v16 + 8 * v17++) = 0;
      v16 = *((_QWORD *)this + 9);
    }
    while (v17 < (unsigned __int16)((*((_DWORD *)this + 20) - v16) >> 3));
  }
  *((_QWORD *)this + 10) = v16;
  v19 = (void *)*((_QWORD *)this + 22);
  if (v19)
  {
    *((_QWORD *)this + 23) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 15);
  if (v20)
  {
    *((_QWORD *)this + 16) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 12);
  if (v21)
  {
    *((_QWORD *)this + 13) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 9);
  if (v22)
  {
    *((_QWORD *)this + 10) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 6);
  if (v23)
  {
    *((_QWORD *)this + 7) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 3);
  if (v24)
  {
    *((_QWORD *)this + 4) = v24;
    operator delete(v24);
  }
}

void XlChartEnteredNumber::~XlChartEnteredNumber(XlChartEnteredNumber *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartEnteredText::~XlChartEnteredText(XlChartEnteredText *this)
{
  *(_QWORD *)this = &off_24F3AB4D8;
  OcText::~OcText((OcText *)((char *)this + 16));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3AB4D8;
  OcText::~OcText((OcText *)((char *)this + 16));
}

void XlChartSeries::~XlChartSeries(XlChartSeries *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartSeriesFormat::~XlChartSeriesFormat(XlChartSeriesFormat *this)
{
  XlChartSeriesFormat::~XlChartSeriesFormat(this);
  JUMPOUT(0x22E2DD408);
}

{
  XlChartLineStyle *var1;
  XlChartFillStyle *var2;
  XlChartMarkerStyle *var3;
  XlChartPicF *var4;
  char *var5;
  char *var6;

  this->var0 = (void **)&off_24F3A99D0;
  var1 = this->var1;
  if (var1)
    (*((void (**)(XlChartLineStyle *))var1->var0 + 1))(var1);
  this->var1 = 0;
  var2 = this->var2;
  if (var2)
    (*((void (**)(XlChartFillStyle *))var2->var0 + 1))(var2);
  this->var2 = 0;
  var3 = this->var3;
  if (var3)
    (*((void (**)(XlChartMarkerStyle *))var3->var0 + 1))(var3);
  this->var3 = 0;
  var4 = this->var4;
  if (var4)
    (*((void (**)(XlChartPicF *))var4->var0 + 1))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    MEMORY[0x22E2DD3F0](var5, 0x1000C8077774924);
  this->var5 = 0;
  var6 = this->var6;
  if (var6)
    MEMORY[0x22E2DD3F0](var6, 0x1000C8077774924);
  this->var6 = 0;
}

void sub_22A20FB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHDDataValuesCollection;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

double XlChartBinaryReader::closeChart(XlChartBinaryReader *this)
{
  XlSubstreamProperties *v1;

  v1 = (XlChartBinaryReader *)((char *)this + 1376);
  XlSubstreamProperties::operator=((uint64_t)this + 1136, (uint64_t)this + 1376);
  return XlSubstreamProperties::setDefault(v1);
}

void sub_22A20FCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A20FD68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A20FE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_22A210078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A210158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A210474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A210520()
{
  JUMPOUT(0x22A210504);
}

void sub_22A210528()
{
  JUMPOUT(0x22A210508);
}

void sub_22A2105CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2108B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgArea3DBuffer(unsigned __int16 *a1, unsigned int *a2, int *a3, int *a4, int *a5, int *a6)
{
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  return extractDataFromPtgArea3DBuffer(a1, a2, a3, &v10, a4, &v9, a5, &v8, a6, &v7);
}

void sub_22A210A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A210B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A210CE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A210ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A210FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A211198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A211258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A21133C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t xlSectionForNumberWithFormatting(double a1, EDString *a2, EDWorkbook *a3)
{
  EDString *v5;
  EDWorkbook *v6;
  uint64_t v7;
  _BYTE v9[40];

  v5 = a2;
  v6 = a3;
  XlFormatProcessor::XlFormatProcessor((XlFormatProcessor *)v9);
  if (v6)
    v9[8] = -[EDWorkbook legacyDateBase](v6, "legacyDateBase") != 0;
  v7 = xlSectionForNumberWithFormattingUsingProcessor(a1, v5, (XlFormatProcessor *)v9);
  XlFormatProcessor::~XlFormatProcessor((XlFormatProcessor *)v9);

  return v7;
}

void sub_22A2113E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlFormatProcessor::XlFormatProcessor(XlFormatProcessor *this)
{
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t xlSectionForNumberWithFormattingUsingProcessor(double a1, EDString *a2, XlFormatProcessor *a3)
{
  EDString *v5;
  EDString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  XlFormatInfo *FormatInfo;
  int NumericalSection;
  OcText v13;

  v5 = a2;
  v6 = v5;
  if (v5)
  {
    -[EDString string](v5, "string");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = 0;
    if (a3 && v7)
    {
      OcText::OcText(&v13);
      -[EDString string](v6, "string");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "copyToOcText:", &v13);

      FormatInfo = (XlFormatInfo *)XlFormatProcessor::getFormatInfo(a3, &v13);
      if (FormatInfo)
      {
        NumericalSection = XlFormatProcessor::getNumericalSection(a3, a1, FormatInfo);
        if (NumericalSection < 0
          || (unsigned __int16)((*((_DWORD *)FormatInfo + 4) - *((_DWORD *)FormatInfo + 2)) >> 3) <= (unsigned __int16)NumericalSection)
        {
          v8 = 0;
        }
        else
        {
          v8 = XlFormatInfo::removeSection(FormatInfo, (unsigned __int16)NumericalSection);
        }
        XlFormatInfo::~XlFormatInfo(FormatInfo);
        MEMORY[0x22E2DD408]();
      }
      else
      {
        v8 = 0;
      }
      OcText::~OcText(&v13);
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_22A21153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  OcText::~OcText((OcText *)&a9);

  _Unwind_Resume(a1);
}

void sub_22A21163C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A211730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlFormatProcessor::getFormatInfo(XlFormatProcessor *this, OcText *a2)
{
  XlFormatInfo *v4;
  char *v5;
  XlFormatParser *v6;
  XlFormatSection *v7;
  XlFmtPtg *i;
  int v9;
  XlFormatSection *v10;
  XlFmtPtg *v11;
  uint64_t result;

  v4 = (XlFormatInfo *)operator new(0x20uLL);
  XlFormatInfo::XlFormatInfo(v4);
  *((_QWORD *)this + 3) = v4;
  v5 = (char *)this + 24;
  v6 = *(XlFormatParser **)this;
  if (!*(_QWORD *)this)
  {
    v6 = (XlFormatParser *)operator new(0x20uLL);
    XlFormatParser::XlFormatParser(v6);
    *(_QWORD *)this = v6;
  }
  XlFormatParser::setFormat(v6, a2);
  v7 = (XlFormatSection *)operator new(0x60uLL);
  XlFormatSection::XlFormatSection(v7);
  *((_QWORD *)this + 4) = v7;
  XlFormatInfo::takeSection(*((XlFormatInfo **)this + 3), v7);
  for (i = (XlFmtPtg *)XlFormatParser::nextToken(*(XlFormatParser **)this);
        i;
        i = (XlFmtPtg *)XlFormatParser::nextToken(*(XlFormatParser **)this))
  {
    v9 = *(_DWORD *)i;
    XlFormatSection::takeToken(*((XlFormatSection **)this + 4), i);
    if (v9 == 67)
    {
      v10 = (XlFormatSection *)operator new(0x60uLL);
      XlFormatSection::XlFormatSection(v10);
      *((_QWORD *)this + 4) = v10;
      XlFormatInfo::takeSection(*((XlFormatInfo **)this + 3), v10);
      if (((*(_DWORD *)(*(_QWORD *)v5 + 16) - *(_DWORD *)(*(_QWORD *)v5 + 8)) & 0x7FFF8) == 0x20)
        *(_BYTE *)(*((_QWORD *)this + 4) + 1) = 1;
    }
  }
  v11 = (XlFmtPtg *)operator new(0x18uLL);
  XlFmtPtg::XlFmtPtg((uint64_t)v11, 67);
  XlFormatSection::takeToken(*((XlFormatSection **)this + 4), v11);
  result = *(_QWORD *)v5;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

void sub_22A211880(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFormatInfo::XlFormatInfo(XlFormatInfo *this)
{
  *(_WORD *)this = -1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
}

void XlFormatParser::XlFormatParser(XlFormatParser *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 2) = 0;
}

XlFmtPtg *XlFormatParser::setFormat(XlFormatParser *this, OcText *a2)
{
  XlFmtPtg *result;
  _DWORD *exception;

  *(_QWORD *)this = a2;
  result = XlFormatParser::reset(this);
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return result;
}

XlFmtPtg *XlFormatParser::reset(XlFormatParser *this)
{
  uint64_t v2;
  XlFmtPtg *result;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  result = (XlFmtPtg *)*((_QWORD *)this + 2);
  if (result)
  {
    XlFmtPtg::~XlFmtPtg(result);
    result = (XlFmtPtg *)MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 28) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

void XlFormatSection::XlFormatSection(XlFormatSection *this)
{
  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = 256;
  *(_DWORD *)((char *)this + 10) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 22) = 0;
  *((_WORD *)this + 15) = -1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 64) = 0;
  *(_DWORD *)((char *)this + 66) = -1;
  *((_WORD *)this + 35) = -1;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
}

uint64_t XlFormatParser::nextToken(XlFormatParser *this)
{
  XlFmtPtg *v2;
  unsigned int Character;
  unsigned int v4;
  int AlphaToken;
  uint64_t result;
  XlFmtPtg *v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *exception;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 16) > *((_DWORD *)this + 6))
  {
    v2 = (XlFmtPtg *)operator new(0x18uLL);
    XlFmtPtg::XlFmtPtg(v2);
    *((_QWORD *)this + 2) = v2;
    Character = OcText::getCharacter(*(OcText **)this, *((_DWORD *)this + 6));
    v4 = Character;
    if (Character <= 0x7F)
    {
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * Character + 60) & 0x100) != 0)
        goto LABEL_5;
    }
    else if (__maskrune(Character, 0x100uLL))
    {
LABEL_5:
      AlphaToken = XlFormatParser::readAlphaToken(this, *((XlFmtPtg **)this + 2));
      goto LABEL_6;
    }
    if (v4 <= 0xFF && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v4 + 60) & 0x400) != 0)
    {
      v7 = (XlFmtPtg *)*((_QWORD *)this + 2);
      if (v4 == 48)
      {
        *(_DWORD *)v7 = 40;
        *((_QWORD *)v7 + 2) = 0x4048000000000000;
        goto LABEL_7;
      }
      AlphaToken = XlFormatParser::readDigitToken(this, v7);
    }
    else
    {
      switch(v4)
      {
        case '[':
          AlphaToken = XlFormatParser::readBracketToken(this, *((XlFmtPtg **)this + 2));
          break;
        case '.':
          AlphaToken = XlFormatParser::readPeriodToken(this, *((XlFmtPtg **)this + 2));
          break;
        case '"':
          AlphaToken = XlFormatParser::readTextToken(this, *((XlFmtPtg **)this + 2));
          break;
        default:
          if (v4 <= 0x7F)
            v8 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v4 + 60) & 0x4000;
          else
            v8 = __maskrune(v4, 0x4000uLL);
          if (v8)
          {
            v9 = *((_QWORD *)this + 2);
            v10 = 59;
          }
          else
          {
            switch(v4)
            {
              case '#':
                v9 = *((_QWORD *)this + 2);
                v10 = 41;
                break;
              case '$':
                v9 = *((_QWORD *)this + 2);
                *(_QWORD *)(v9 + 16) = 0x4042000000000000;
                v10 = 51;
                break;
              case '%':
                v9 = *((_QWORD *)this + 2);
                v10 = 44;
                break;
              case '&':
              case '\'':
              case '.':
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
              case '<':
              case '=':
              case '>':
                goto LABEL_46;
              case '(':
                v9 = *((_QWORD *)this + 2);
                v10 = 55;
                break;
              case ')':
                v9 = *((_QWORD *)this + 2);
                v10 = 56;
                break;
              case '*':
                v13 = *((_DWORD *)this + 6) + 1;
                *((_DWORD *)this + 6) = v13;
                v14 = *((_QWORD *)this + 2);
                *(double *)(v14 + 16) = (double)OcText::getCharacter(*(OcText **)this, v13);
                v9 = *((_QWORD *)this + 2);
                v10 = 57;
                break;
              case '+':
                v9 = *((_QWORD *)this + 2);
                v10 = 53;
                break;
              case ',':
                v9 = *((_QWORD *)this + 2);
                v10 = 45;
                break;
              case '-':
                v9 = *((_QWORD *)this + 2);
                v10 = 52;
                break;
              case '/':
                v9 = *((_QWORD *)this + 2);
                v10 = 54;
                break;
              case ':':
                v9 = *((_QWORD *)this + 2);
                v10 = 58;
                break;
              case ';':
                v9 = *((_QWORD *)this + 2);
                v10 = 67;
                break;
              case '?':
                v9 = *((_QWORD *)this + 2);
                v10 = 42;
                break;
              case '@':
                v9 = *((_QWORD *)this + 2);
                v10 = 50;
                break;
              default:
                if (v4 == 92)
                {
                  v15 = *((_DWORD *)this + 6) + 1;
                  *((_DWORD *)this + 6) = v15;
                  v16 = *((_QWORD *)this + 2);
                  *(double *)(v16 + 16) = (double)OcText::getCharacter(*(OcText **)this, v15);
                  v9 = *((_QWORD *)this + 2);
                  v10 = 62;
                }
                else
                {
                  if (v4 != 95)
                  {
LABEL_46:
                    exception = __cxa_allocate_exception(4uLL);
                    *exception = 3002;
                  }
                  v11 = *((_DWORD *)this + 6) + 1;
                  *((_DWORD *)this + 6) = v11;
                  v12 = *((_QWORD *)this + 2);
                  *(double *)(v12 + 16) = (double)OcText::getCharacter(*(OcText **)this, v11);
                  v9 = *((_QWORD *)this + 2);
                  v10 = 61;
                }
                break;
            }
          }
          *(_DWORD *)v9 = v10;
          goto LABEL_7;
      }
    }
LABEL_6:
    *((_DWORD *)this + 6) = AlphaToken + *((_DWORD *)this + 6) - 1;
LABEL_7:
    ++*((_DWORD *)this + 6);
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    return result;
  }
  return 0;
}

void sub_22A211D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFmtPtg::XlFmtPtg(XlFmtPtg *this)
{
  *(_DWORD *)this = 255;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t XlFormatParser::readAlphaToken(XlFormatParser *this, XlFmtPtg *a2)
{
  unsigned int v4;
  int Character;
  unsigned int v6;
  int v7;
  unsigned int v8;
  __int16 v9;
  unsigned int v10;
  OcText *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  OcText *v16;
  int v17;
  int v18;
  unsigned int v19;
  __int16 v20;
  OcText *v21;
  int v22;
  int v23;
  unsigned int v24;
  __int16 v25;
  OcText *v26;
  int v27;
  int v28;
  unsigned int v29;
  __int16 v30;
  OcText *v31;
  int v32;
  OcText *v33;
  int v34;
  OcText *v35;
  int v36;
  unsigned int v37;
  int v38;
  OcText *v39;
  int v40;
  OcText *v41;
  OcText *v42;
  OcText *v44;
  int v45;
  unsigned int v46;
  int v47;
  OcText *v48;
  int v49;
  OcText *v50;
  unsigned int v51;
  int v52;
  int v53;
  OcText *v54;
  int v55;
  _DWORD *exception;

  v4 = *((_DWORD *)this + 6);
  *(_DWORD *)a2 = 255;
  Character = OcText::getCharacter(*(OcText **)this, v4);
  if (Character != 121)
  {
    v6 = Character;
    if (Character == 100)
    {
      LOWORD(v7) = 0;
      *((_BYTE *)this + 28) = 1;
      v8 = v4 + 1;
      do
      {
        v9 = v7;
        v10 = v8;
        v7 = (__int16)(v7 + 1);
        v11 = *(OcText **)this;
        if (*(_QWORD *)this && v11->var3 <= v8)
          break;
        v12 = OcText::getCharacter(v11, v8);
        v8 = v10 + 1;
      }
      while (v12 == 100);
      switch(v9)
      {
        case 2:
          v13 = 17;
          goto LABEL_65;
        case 1:
          v13 = 16;
          goto LABEL_65;
        case 0:
          v13 = 15;
LABEL_65:
          *(_DWORD *)a2 = v13;
          return (unsigned __int16)(v10 - *((_WORD *)this + 12));
      }
      if (v7 >= 4)
      {
        v13 = 18;
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    if ((Character & 0xFFFFFFDF) == 0x4D)
    {
      LOWORD(v23) = 0;
      *((_BYTE *)this + 28) = 1;
      v24 = v4 + 1;
      do
      {
        v25 = v23;
        v10 = v24;
        v23 = (__int16)(v23 + 1);
        v26 = *(OcText **)this;
        if (*(_QWORD *)this && v26->var3 <= v24)
          break;
        v27 = OcText::getCharacter(v26, v24);
        v24 = v10 + 1;
      }
      while ((v27 & 0xFFFFFFDF) == 0x4D);
      switch(v25)
      {
        case 0:
          v13 = 23;
          goto LABEL_65;
        case 1:
          v13 = 24;
          goto LABEL_65;
        case 2:
          v13 = 25;
          goto LABEL_65;
        case 3:
          break;
        case 4:
          v13 = 27;
          goto LABEL_65;
        default:
          if (v23 < 6)
            goto LABEL_108;
          break;
      }
      v13 = 26;
      goto LABEL_65;
    }
    if ((Character & 0xFFFFFFDF) == 0x48)
    {
      LOWORD(v18) = 0;
      *((_BYTE *)this + 28) = 1;
      v19 = v4 + 1;
      do
      {
        v20 = v18;
        v10 = v19;
        v18 = (__int16)(v18 + 1);
        v21 = *(OcText **)this;
        if (*(_QWORD *)this && v21->var3 <= v19)
          break;
        v22 = OcText::getCharacter(v21, v19);
        v19 = v10 + 1;
      }
      while ((v22 & 0xFFFFFFDF) == 0x48);
      if (!v20)
      {
        v13 = 21;
        goto LABEL_65;
      }
      if (v18 >= 2)
      {
        v13 = 22;
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    if (Character == 115)
    {
      LOWORD(v28) = 0;
      *((_BYTE *)this + 28) = 1;
      v29 = v4 + 1;
      do
      {
        v30 = v28;
        v10 = v29;
        v28 = (__int16)(v28 + 1);
        v31 = *(OcText **)this;
        if (*(_QWORD *)this && v31->var3 <= v29)
          break;
        v32 = OcText::getCharacter(v31, v29);
        v29 = v10 + 1;
      }
      while (v32 == 115);
      if (!v30)
      {
        v13 = 31;
        goto LABEL_65;
      }
      if (v28 >= 2)
      {
        v13 = 32;
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    if ((Character & 0xFFDF) == 0x41)
    {
      v33 = *(OcText **)this;
      if (!*(_QWORD *)this || v33->var3 > v4 + 2)
      {
        if (OcText::getCharacter(v33, v4) == 65
          && OcText::getCharacter(*(OcText **)this, v4 + 1) == 47
          && OcText::getCharacter(*(OcText **)this, v4 + 2) == 80)
        {
          *((_BYTE *)this + 28) = 1;
          LOWORD(v10) = v4 + 3;
          v13 = 39;
          goto LABEL_65;
        }
        if (OcText::getCharacter(*(OcText **)this, v4) == 97
          && OcText::getCharacter(*(OcText **)this, v4 + 1) == 47
          && OcText::getCharacter(*(OcText **)this, v4 + 2) == 112)
        {
          *((_BYTE *)this + 28) = 1;
          LOWORD(v10) = v4 + 3;
          v13 = 38;
          goto LABEL_65;
        }
        v35 = *(OcText **)this;
        if (!*(_QWORD *)this || v35->var3 > v4 + 4)
        {
          if (OcText::getCharacter(v35, v4) == 65
            && OcText::getCharacter(*(OcText **)this, v4 + 1) == 77
            && OcText::getCharacter(*(OcText **)this, v4 + 2) == 47
            && OcText::getCharacter(*(OcText **)this, v4 + 3) == 80
            && OcText::getCharacter(*(OcText **)this, v4 + 4) == 77)
          {
            *((_BYTE *)this + 28) = 1;
            LOWORD(v10) = v4 + 5;
            v13 = 36;
            goto LABEL_65;
          }
          if (OcText::getCharacter(*(OcText **)this, v4) == 97
            && OcText::getCharacter(*(OcText **)this, v4 + 1) == 109
            && OcText::getCharacter(*(OcText **)this, v4 + 2) == 47
            && OcText::getCharacter(*(OcText **)this, v4 + 3) == 112)
          {
            LOWORD(v10) = v4;
            if (OcText::getCharacter(*(OcText **)this, v4 + 4) == 109)
            {
              *((_BYTE *)this + 28) = 1;
              LOWORD(v10) = v4 + 5;
              v13 = 37;
              goto LABEL_65;
            }
            goto LABEL_108;
          }
        }
      }
LABEL_107:
      LOWORD(v10) = v4;
      goto LABEL_108;
    }
    if (Character > 100)
    {
      switch(Character)
      {
        case 'e':
          v10 = v4 + 1;
          v44 = *(OcText **)this;
          if (!*(_QWORD *)this || v44->var3 > v10)
          {
            if (OcText::getCharacter(v44, v4 + 1) == 45)
            {
              LOWORD(v10) = v4 + 2;
              v13 = 47;
              goto LABEL_65;
            }
            if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 43)
            {
              LOWORD(v10) = v4 + 2;
              v13 = 48;
              goto LABEL_65;
            }
            if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 101)
            {
              v51 = v4 + 2;
              v52 = 1;
              do
              {
                v53 = v52;
                v10 = v51;
                v54 = *(OcText **)this;
                if (*(_QWORD *)this && v54->var3 <= v51)
                  break;
                v55 = OcText::getCharacter(v54, v51);
                v51 = v10 + 1;
                v52 = v53 + 1;
              }
              while (v55 == 101);
              if ((_WORD)v53)
              {
                v13 = 69;
                goto LABEL_65;
              }
            }
          }
          v13 = 68;
          goto LABEL_65;
        case 'g':
          v45 = 0;
          v46 = v4 + 1;
          do
          {
            v47 = v45;
            v10 = v46;
            v48 = *(OcText **)this;
            if (*(_QWORD *)this && v48->var3 <= v46)
              break;
            v49 = OcText::getCharacter(v48, v46);
            v46 = v10 + 1;
            v45 = v47 + 1;
          }
          while (v49 == 103);
          if ((unsigned __int16)v47 == 1)
            v13 = 71;
          else
            v13 = 72;
          goto LABEL_65;
        case 'r':
          v36 = 0;
          v37 = v4 + 1;
          do
          {
            v38 = v36;
            v10 = v37;
            v39 = *(OcText **)this;
            if (*(_QWORD *)this && v39->var3 <= v37)
              break;
            v40 = OcText::getCharacter(v39, v37);
            v37 = v10 + 1;
            v36 = v38 + 1;
          }
          while (v40 == 114);
          if ((_WORD)v38)
            v13 = 74;
          else
            v13 = 73;
          goto LABEL_65;
      }
    }
    else
    {
      switch(Character)
      {
        case 'E':
          v10 = v4 + 1;
          v41 = *(OcText **)this;
          if (!*(_QWORD *)this || v41->var3 > v10)
          {
            if (OcText::getCharacter(v41, v4 + 1) == 45)
            {
              LOWORD(v10) = v4 + 2;
              v13 = 46;
              goto LABEL_65;
            }
            if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 43)
            {
              LOWORD(v10) = v4 + 2;
              v13 = 49;
              goto LABEL_65;
            }
          }
          goto LABEL_108;
        case 'G':
          v42 = *(OcText **)this;
          if ((!*(_QWORD *)this || v42->var3 > v4 + 6)
            && OcText::getCharacter(v42, v4) == 71
            && OcText::getCharacter(*(OcText **)this, v4 + 1) == 101
            && OcText::getCharacter(*(OcText **)this, v4 + 2) == 110
            && OcText::getCharacter(*(OcText **)this, v4 + 3) == 101
            && OcText::getCharacter(*(OcText **)this, v4 + 4) == 114
            && OcText::getCharacter(*(OcText **)this, v4 + 5) == 97)
          {
            LOWORD(v10) = v4;
            if (OcText::getCharacter(*(OcText **)this, v4 + 6) == 108)
            {
              LOWORD(v10) = v4 + 7;
              v13 = 63;
              goto LABEL_65;
            }
            goto LABEL_108;
          }
          goto LABEL_107;
        case 'O':
          *((_QWORD *)a2 + 2) = 0x4048000000000000;
          v34 = 40;
          goto LABEL_127;
      }
    }
    if ((Character & 0xFFDF) == 0x42)
    {
      v10 = v4 + 1;
      v50 = *(OcText **)this;
      if (!*(_QWORD *)this || v50->var3 > v10)
      {
        if (OcText::getCharacter(v50, v4 + 1) == 49)
        {
          LOWORD(v10) = v4 + 2;
          v13 = 76;
        }
        else if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 50)
        {
          LOWORD(v10) = v4 + 2;
          v13 = 75;
        }
        else
        {
          *((double *)a2 + 2) = (double)v6;
          v13 = 62;
        }
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    *((double *)a2 + 2) = (double)Character;
    v34 = 62;
LABEL_127:
    *(_DWORD *)a2 = v34;
    LOWORD(v10) = v4 + 1;
    return (unsigned __int16)(v10 - *((_WORD *)this + 12));
  }
  LOWORD(v14) = 0;
  *((_BYTE *)this + 28) = 1;
  v15 = v4 + 1;
  do
  {
    v10 = v15;
    v14 = (__int16)(v14 + 1);
    v16 = *(OcText **)this;
    if (*(_QWORD *)this && v16->var3 <= v15)
      break;
    v17 = OcText::getCharacter(v16, v15);
    v15 = v10 + 1;
  }
  while (v17 == 121);
  if (v14 == 2)
  {
    v13 = 19;
    goto LABEL_65;
  }
  if (v14 >= 4)
  {
    v13 = 20;
    goto LABEL_65;
  }
LABEL_108:
  if (*(_DWORD *)a2 == 255)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  return (unsigned __int16)(v10 - *((_WORD *)this + 12));
}

void XlFormatSection::takeToken(XlFormatSection *this, XlFmtPtg *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned __int16 v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  double v28;

  if (!a2)
    return;
  v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= 8u)
  {
    *((_BYTE *)this + 10) = 1;
    if (v4 == 8)
      v4 = (int)*((double *)a2 + 2);
    *((_WORD *)this + 21) = v4;
    goto LABEL_26;
  }
  v5 = v4 - 9;
  if (v4 - 9 <= 5)
  {
    v6 = 1;
    *((_BYTE *)this + 11) = 1;
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 11) = 0;
    switch(v5)
    {
      case 0u:
        v6 = 5;
        break;
      case 1u:
        v6 = 3;
        break;
      case 2u:
        v6 = 6;
        break;
      case 3u:
        v6 = 2;
        break;
      case 5u:
        v6 = 4;
        break;
      default:
        break;
    }
    *((_DWORD *)this + 11) = v6;
    goto LABEL_26;
  }
  if (v4 - 15 > 0x18)
  {
    if (v4 - 40 <= 9)
    {
      *((_BYTE *)this + 12) = 1;
      switch(v4)
      {
        case '+':
          ++*((_WORD *)this + 13);
          goto LABEL_50;
        case ',':
          *((_BYTE *)this + 5) = 1;
          goto LABEL_26;
        case '-':
          *((_BYTE *)this + 13) = 1;
          v24 = *((unsigned __int16 *)this + 34);
          if ((v24 & 0x8000) != 0)
            goto LABEL_51;
          v25 = (*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3;
          if (v24 + 1 != (_DWORD)v25 && *((__int16 *)this + 35) + 1 != (_DWORD)v25)
            goto LABEL_51;
          *((_WORD *)this + 35) = v25;
          break;
        case '.':
        case '/':
        case '0':
        case '1':
          *((_BYTE *)this + 3) = 1;
          goto LABEL_26;
        default:
          if (v4 - 40 > 2)
            goto LABEL_26;
          *((_BYTE *)this + 7) = 1;
          if (*((_BYTE *)this + 3))
          {
            ++*((_WORD *)this + 19);
          }
          else if (*((_WORD *)this + 13) || *((_BYTE *)this + 4))
          {
            ++*((_WORD *)this + 16);
            if (v4 == 40)
              ++*((_WORD *)this + 17);
          }
          else
          {
            ++*((_WORD *)this + 18);
          }
LABEL_50:
          *((_WORD *)this + 34) = (*((_DWORD *)this + 20) - *((_DWORD *)this + 18)) >> 3;
LABEL_51:
          *((_WORD *)this + 35) = -1;
          break;
      }
    }
    goto LABEL_26;
  }
  *((_BYTE *)this + 2) = 1;
  if (v4 >= 0x24)
  {
    *((_BYTE *)this + 6) = 1;
    goto LABEL_26;
  }
  if (v4 < 0x15 || v4 - 25 <= 3)
  {
LABEL_63:
    *((_WORD *)this + 33) = -1;
    goto LABEL_26;
  }
  if (v4 >= 0x21)
  {
    v7 = v4 - 32;
    if (*((unsigned __int16 *)this + 14) < v7)
      *((_WORD *)this + 14) = v7;
    goto LABEL_63;
  }
  if (v4 <= 0x1D && ((1 << v4) & 0x20600000) != 0)
  {
    *((_WORD *)this + 33) = -1;
    *((_BYTE *)this + 64) = 1;
    goto LABEL_26;
  }
  if (v4 - 23 <= 1)
  {
    *((_WORD *)this + 33) = -1;
    if (*((_BYTE *)this + 64))
    {
      if (v4 == 23)
        v26 = 65;
      else
        v26 = 66;
      *(_DWORD *)a2 = v26;
      *((_BYTE *)this + 64) = 0;
    }
    else
    {
      *((_WORD *)this + 33) = (*((_DWORD *)this + 20) - *((_DWORD *)this + 18)) >> 3;
    }
    goto LABEL_26;
  }
  if (v4 - 31 <= 1)
  {
    *((_BYTE *)this + 64) = 1;
    if ((*((__int16 *)this + 33) & 0x80000000) == 0)
    {
      v27 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * *((unsigned __int16 *)this + 33));
      v28 = 2.0;
      if (*(_DWORD *)v27 == 23)
        v28 = 1.0;
      *(double *)(v27 + 16) = v28;
      *(_DWORD *)v27 = 28;
      goto LABEL_63;
    }
  }
LABEL_26:
  v8 = *((_QWORD *)this + 11);
  v9 = (_QWORD *)*((_QWORD *)this + 10);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)this + 9);
    v12 = (unint64_t)v9 - v11;
    v13 = (v8 - v11) >> 3;
    v14 = 2 * v13;
    if (2 * (int)v13 <= (v12 >> 3) + 1)
      v14 = (v12 >> 3) + 1;
    if (v13 >= 0x7FFFFFFF)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = v14;
    if ((_DWORD)v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 88, v15);
      v18 = v17;
    }
    else
    {
      v16 = 0;
      v18 = 0;
    }
    v19 = &v16[v12 & 0x7FFFFFFF8];
    v20 = &v16[8 * v18];
    *(_QWORD *)v19 = a2;
    v10 = v19 + 8;
    v22 = (char *)*((_QWORD *)this + 9);
    v21 = (char *)*((_QWORD *)this + 10);
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 9) = v19;
    *((_QWORD *)this + 10) = v10;
    *((_QWORD *)this + 11) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  *((_QWORD *)this + 10) = v10;
}

void sub_22A212AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlFmtPtg::XlFmtPtg(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void XlFmtPtg::~XlFmtPtg(XlFmtPtg *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
}

uint64_t XlFormatProcessor::getNumericalSection(XlFormatProcessor *this, double a2, XlFormatInfo *a3)
{
  _BYTE **v5;
  unint64_t v6;
  __int16 v7;
  _BYTE *v8;
  XlFormatSection **v9;
  uint64_t v10;
  _BOOL4 hasCondition;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  XlFormatSection *v19;
  uint64_t v20;
  uint64_t v21;

  if (!a3)
    return -1;
  v5 = (_BYTE **)*((_QWORD *)a3 + 1);
  v6 = *((_QWORD *)a3 + 2) - (_QWORD)v5;
  v7 = -1;
  switch((unsigned __int16)(v6 >> 3))
  {
    case 0u:
      return v7;
    case 1u:
      if ((v6 & 0x7FFFFFFF8) == 0)
        goto LABEL_54;
      v8 = *v5;
      v7 = v8[1];
      if (v8[1])
      {
        v7 = 0;
        *v8 = 1;
      }
      return v7;
    case 2u:
      hasCondition = XlFormatInfo::hasCondition(a3);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *((_QWORD *)a3 + 2) - v12;
      if (hasCondition)
      {
        if ((v13 & 0x7FFFFFFF8) != 0)
          return (__int16)(XlFormatSection::isConditionMet(*(XlFormatSection **)v12, a2) ^ 1);
LABEL_54:
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      if ((v13 & 0x7FFFFFFF0) == 0)
        goto LABEL_54;
      v7 = 0;
      if (a2 >= 0.0)
        return v7;
      v20 = *(_QWORD *)(v12 + 8);
      if (*(_BYTE *)(v20 + 1))
        return v7;
      *(_BYTE *)(v20 + 9) = 0;
      return 1;
    case 3u:
      v14 = XlFormatInfo::hasCondition(a3);
      v15 = *((_QWORD *)a3 + 1);
      v16 = (unint64_t)(*((_QWORD *)a3 + 2) - v15) >> 3;
      if (!v14)
      {
        if (v16 <= 2)
          goto LABEL_54;
        if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 1))
        {
          if (a2 >= 0.0)
            return 0;
        }
        else
        {
          if (a2 > 0.0)
            return 0;
          if (a2 >= 0.0)
            return 2;
        }
LABEL_50:
        *(_BYTE *)(*(_QWORD *)(v15 + 8) + 9) = 0;
        return 1;
      }
      if (!(_DWORD)v16)
        goto LABEL_54;
      if (*(_BYTE *)(*(_QWORD *)v15 + 11))
      {
        if ((XlFormatSection::isConditionMet(*(XlFormatSection **)v15, a2) & 1) == 0)
        {
          v17 = *((_QWORD *)a3 + 1);
          v18 = (unint64_t)(*((_QWORD *)a3 + 2) - v17) >> 3;
          if (v18 <= 1)
            goto LABEL_54;
          v19 = *(XlFormatSection **)(v17 + 8);
          if (!*((_BYTE *)v19 + 11))
          {
            if (v18 <= 2)
              goto LABEL_54;
            if (*(_BYTE *)(*(_QWORD *)(v17 + 16) + 1))
              return 1;
            if (a2 < 0.0)
            {
              *((_BYTE *)v19 + 9) = 0;
              return 1;
            }
            return 2;
          }
          goto LABEL_42;
        }
        return 0;
      }
      if (a2 > 0.0)
        return 0;
      if (v16 <= 1)
        goto LABEL_54;
      v19 = *(XlFormatSection **)(v15 + 8);
LABEL_42:
      if ((XlFormatSection::isConditionMet(v19, a2) & 1) != 0)
        return 1;
      v21 = *((_QWORD *)a3 + 1);
      if (((unint64_t)(*((_QWORD *)a3 + 2) - v21) >> 3) <= 2)
        goto LABEL_54;
      if (*(_BYTE *)(*(_QWORD *)(v21 + 16) + 1))
        return -1;
      else
        return 2;
    default:
      if (XlFormatInfo::hasCondition(a3))
      {
        v9 = (XlFormatSection **)*((_QWORD *)a3 + 1);
        if (((*((_QWORD *)a3 + 2) - (_QWORD)v9) & 0x7FFFFFFF8) == 0)
          goto LABEL_54;
        if ((XlFormatSection::isConditionMet(*v9, a2) & 1) == 0)
        {
          v10 = *((_QWORD *)a3 + 1);
          if (((*((_QWORD *)a3 + 2) - v10) & 0x7FFFFFFF0) == 0)
            goto LABEL_54;
          if (XlFormatSection::isConditionMet(*(XlFormatSection **)(v10 + 8), a2))
            return 1;
          else
            return 2;
        }
        return 0;
      }
      if (a2 > 0.0)
        return 0;
      if (a2 >= 0.0)
        return 2;
      v15 = *((_QWORD *)a3 + 1);
      if (((*((_QWORD *)a3 + 2) - v15) & 0x7FFFFFFF0) == 0)
        goto LABEL_54;
      goto LABEL_50;
  }
}

uint64_t XlFormatInfo::removeSection(XlFormatInfo *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    return 0;
  result = *(_QWORD *)(v2 + 8 * a2);
  *(_QWORD *)(v2 + 8 * a2) = 0;
  return result;
}

void XlFormatInfo::~XlFormatInfo(XlFormatInfo *this)
{
  void *v2;

  XlFormatInfo::reset(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

_QWORD *XlFormatInfo::reset(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  *(_WORD *)this = -1;
  v2 = this[1];
  if (((this[2] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        XlFormatSection::~XlFormatSection((XlFormatSection *)this);
        this = (_QWORD *)MEMORY[0x22E2DD408]();
        v2 = v1[1];
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = v1[1];
    }
    while (v3 < ((unint64_t)(v1[2] - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

void XlFormatProcessor::~XlFormatProcessor(XlFormatParser **this)
{
  XlFormatParser *v2;
  XlFormatInfo *v3;
  XlDateTimeFormat *v4;

  v2 = *this;
  if (v2)
  {
    XlFormatParser::~XlFormatParser(v2);
    MEMORY[0x22E2DD408]();
  }
  *this = 0;
  v3 = this[3];
  if (v3)
  {
    XlFormatInfo::~XlFormatInfo(v3);
    MEMORY[0x22E2DD408]();
  }
  this[3] = 0;
  v4 = this[2];
  if (v4)
  {
    XlDateTimeFormat::~XlDateTimeFormat(v4);
    MEMORY[0x22E2DD408]();
  }
  this[2] = 0;
}

void XlFormatParser::~XlFormatParser(XlFormatParser *this)
{
  XlFormatParser::reset(this);
}

void XlFormatSection::~XlFormatSection(XlFormatSection *this)
{
  uint64_t v2;
  unint64_t v3;
  XlFmtPtg *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 9);
  if (((*((_QWORD *)this + 10) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      v4 = *(XlFmtPtg **)(v2 + 8 * v3);
      if (v4)
      {
        XlFmtPtg::~XlFmtPtg(v4);
        MEMORY[0x22E2DD408]();
        v2 = *((_QWORD *)this + 9);
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = *((_QWORD *)this + 9);
    }
    while (v3 < ((unint64_t)(*((_QWORD *)this + 10) - v2) >> 3));
  }
  *((_QWORD *)this + 10) = v2;
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 7) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
}

void sub_22A2131F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A213354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2133F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A21350C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2135C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A213670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A213748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A213974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, EDValue a11)
{
  void *v11;
  void *v12;
  void *v13;
  EDValue *v14;

  EDValue::~EDValue(v14);
  _Unwind_Resume(a1);
}

void sub_22A213A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A213B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A213C28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A213E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A21413C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDReferenceIterator;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A214214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2143A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A214504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A214674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A214720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A214DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A214E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2150E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A21552C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A215674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21571C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2158B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A215F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,EDValue a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_22A216140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EDValue::EDValue(EDValue *this, const EDValue *a2)
{
  int type;
  char *string;

  type = a2->type;
  this->type = a2->type;
  switch(type)
  {
    case 0:
      goto LABEL_6;
    case 1:
      this->var0.BOOLean = a2->var0.BOOLean;
      break;
    case 2:
      this->var0.stringIndex = a2->var0.stringIndex;
      break;
    case 3:
      string = a2->var0.string;
      if (string)
        this->var0.stringIndex = (unint64_t)strdup(string);
      else
LABEL_6:
        this->var0.stringIndex = 0;
      break;
    case 5:
      this->var0.error = a2->var0.error;
      break;
    case 6:
      this->var0.stringIndex = a2->var0.stringIndex;
      break;
    default:
      return;
  }
}

void sub_22A216280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A217390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

double EDValue::numberValue(EDValue *this)
{
  return this->var0.number;
}

void sub_22A217A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A217DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void XlChartSerParent::XlChartSerParent(XlChartSerParent *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8E28;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartSerParent::~XlChartSerParent(XlChartSerParent *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartSerAuxErrBar::XlChartSerAuxErrBar(XlChartSerAuxErrBar *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8CE8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 28) = 0;
  *(_BYTE *)(v2 + 36) = 0;
}

void XlChartSerAuxErrBar::~XlChartSerAuxErrBar(XlChartSerAuxErrBar *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartErrorBar::XlChartErrorBar(XlChartErrorBar *this)
{
  _QWORD *v2;

  XlChartDataSeries::XlChartDataSeries(this);
  *v2 = &off_24F3A9378;
  XlChartSerAuxErrBar::XlChartSerAuxErrBar((XlChartSerAuxErrBar *)(v2 + 25));
  *((_DWORD *)this + 60) = 1;
}

void sub_22A218024(_Unwind_Exception *a1)
{
  XlChartDataSeries *v1;

  XlChartDataSeries::~XlChartDataSeries(v1);
  _Unwind_Resume(a1);
}

void XlChartSerAuxErrBar::XlChartSerAuxErrBar(XlChartSerAuxErrBar *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4187, 14, 0);
  *(_QWORD *)v1 = &off_24F3A8CE8;
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 28) = 0;
  *(_BYTE *)(v1 + 36) = 0;
}

uint64_t XlChartErrorBar::setParentSeriesIndex(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 18) = a2;
  return this;
}

void XlChartPieFormat::XlChartPieFormat(XlChartPieFormat *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8B28;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartPieFormat::~XlChartPieFormat(XlChartPieFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartBinaryReader::mapMarkerProperties(XlChartBinaryReader *this)
{
  XlHeader *v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((_BYTE *)this + 444));
  if (v2->var1 == 4105)
  {
    v3 = operator new(0x28uLL);
    XlChartMarkerFormat::XlChartMarkerFormat((XlChartMarkerFormat *)v3, v2);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 71);
    (*(void (**)(_QWORD, _DWORD *))(**((_QWORD **)this + 167) + 2080))(*((_QWORD *)this + 167), v3);
    v5 = v3[4];
    v6 = v3[5];
    *(_WORD *)(v4 + 22) = v5;
    *(_WORD *)(v4 + 20) = 255;
    *(_WORD *)(v4 + 24) = BYTE1(v5);
    *(_WORD *)(v4 + 26) = BYTE2(v5);
    *(_WORD *)(v4 + 12) = 255;
    *(_WORD *)(v4 + 14) = v6;
    *(_WORD *)(v4 + 16) = BYTE1(v6);
    *(_WORD *)(v4 + 18) = BYTE2(v6);
    *(_DWORD *)(v4 + 8) = v3[6];
    *(_DWORD *)(v4 + 28) = v3[9];
    *(_BYTE *)(v4 + 36) = XlChartMarkerFormat::isNoBackground((XlChartMarkerFormat *)v3) ^ 1;
    *(_BYTE *)(v4 + 37) = XlChartMarkerFormat::isNoForeground((XlChartMarkerFormat *)v3) ^ 1;
    *(_BYTE *)(v4 + 38) = XlChart3D::isPerspective((XlChart3D *)v3);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)((char *)v3 + 30);
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*((_QWORD *)this + 167));
    v4 = 0;
  }
  MEMORY[0x22E2DD408](v2, 0x1000C4087442A64);
  return v4;
}

void sub_22A218250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartMarkerFormat::XlChartMarkerFormat(XlChartMarkerFormat *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8A20;
  *(_DWORD *)(v2 + 36) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
}

uint64_t XlChartMarkerFormat::isNoBackground(XlChartMarkerFormat *this)
{
  return (*((unsigned __int16 *)this + 14) >> 4) & 1;
}

uint64_t XlChartMarkerFormat::isNoForeground(XlChartMarkerFormat *this)
{
  return (*((unsigned __int16 *)this + 14) >> 5) & 1;
}

void XlChartMarkerFormat::~XlChartMarkerFormat(XlChartMarkerFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartScatterPlot::XlChartScatterPlot(XlChartScatterPlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartScatter::XlChartScatter((XlChartScatter *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A80D8;
  *((_QWORD *)this + 18) = &unk_24F3A8100;
}

void sub_22A21845C(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartScatter::XlChartScatter(XlChartScatter *this)
{
  _QWORD *v1;

  XlRecord::XlRecord(this, 4123, 6, 0);
  *v1 = &off_24F3A8CA8;
  v1[2] = 0x100000064;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartScatter *a2)
{
  XlParserVisitor::beginRead(this);
  if (*((_DWORD *)a2 + 2) >= 6u)
  {
    *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
    *((_DWORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
    *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartScatterPlot::getChartType(XlChartScatterPlot *this)
{
  return 5;
}

void sub_22A218588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A218690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2187F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2189C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A218AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A218C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A218CDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlChartErrorBar::getSeriesType(XlChartErrorBar *this)
{
  return 1;
}

void sub_22A218FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t XlChartErrorBar::getParentSeriesIndex(XlChartErrorBar *this)
{
  return *((unsigned __int16 *)this + 9);
}

void sub_22A2190C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A219164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A219238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2192CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A21947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2195C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A219624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2196AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartScatterPlot::~XlChartScatterPlot(XlChartScatterPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void XlChartMarkerStyle::~XlChartMarkerStyle(XlChartMarkerStyle *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartErrorBar::~XlChartErrorBar(XlChartErrorBar *this)
{
  *(_QWORD *)this = &off_24F3A9378;
  XlChartSerAuxErrBar::~XlChartSerAuxErrBar((XlChartErrorBar *)((char *)this + 200));
  XlChartDataSeries::~XlChartDataSeries(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3A9378;
  XlChartSerAuxErrBar::~XlChartSerAuxErrBar((XlChartErrorBar *)((char *)this + 200));
  XlChartDataSeries::~XlChartDataSeries(this);
}

void sub_22A219860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2198C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2199D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A219C08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A219CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A219D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A219E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::handleChartSubstream(XlChartBinaryReader *this, int a2)
{
  char *v4;
  unint64_t v5;
  _DWORD *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;

  v4 = (char *)*((_QWORD *)this + 170);
  v5 = *((_QWORD *)this + 171);
  if ((unint64_t)v4 >= v5)
  {
    v7 = (char *)*((_QWORD *)this + 169);
    v8 = v4 - v7;
    v9 = (unint64_t)(v4 - v7) >> 2;
    v10 = (v5 - (unint64_t)v7) >> 2;
    if (2 * (int)v10 <= (v9 + 1))
      v11 = v9 + 1;
    else
      v11 = 2 * v10;
    if (v10 >= 0x7FFFFFFF)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = v11;
    if ((_DWORD)v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 1368, v12);
      v15 = v14;
      v4 = (char *)*((_QWORD *)this + 170);
      v7 = (char *)*((_QWORD *)this + 169);
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = &v13[v8 & 0x3FFFFFFFCLL];
    v17 = &v13[4 * v15];
    *(_DWORD *)v16 = a2;
    v6 = v16 + 4;
    while (v4 != v7)
    {
      v18 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((_QWORD *)this + 169) = v16;
    *((_QWORD *)this + 170) = v6;
    *((_QWORD *)this + 171) = v17;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v4 = a2;
    v6 = v4 + 4;
  }
  *((_QWORD *)this + 170) = v6;
  return 0;
}

XlChartPlotAxis *XlChartPlotAxis::setFontIndex(XlChartPlotAxis *this, unsigned __int16 a2)
{
  this->var22 = 1;
  this->var15 = a2;
  return this;
}

void EshCalloutRule::EshCalloutRule(EshCalloutRule *this)
{
  uint64_t v1;

  EshAtom::EshAtom(this, 0xF017u, 0);
  *(_QWORD *)v1 = &off_24F39E620;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t EshCalloutRule::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 80))(v3, a1);
}

void PptAnimRotationBehaviorAtom::PptAnimRotationBehaviorAtom(PptAnimRotationBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5D70;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5E18;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
}

uint64_t PptAnimRotationBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 864))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimRotationBehaviorAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 45) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((float *)a2 + 12) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    || (*((float *)a2 + 13) = (float)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    || (*((float *)a2 + 14) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshShadow::getShadowType(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x200u);
}

void PptAnimRotationBehaviorAtom::~PptAnimRotationBehaviorAtom(PptAnimRotationBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshCalloutRule::~EshCalloutRule(EshCalloutRule *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlSupBook::setEncodedName(uint64_t this, XlString *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_BYTE *)(this + 55))
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_QWORD *)(v3 + 16) = a2;
  return this;
}

uint64_t XlLink::getTotalOperandCount(XlLink *this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 6);
  v2 = (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3;
  if (v1 <= v2)
    return v2;
  else
    return v1;
}

void sub_22A21A530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

XlString *XlString::setString(XlString *this, const char *__s)
{
  XlString *v3;
  int v4;

  if (__s)
  {
    v3 = this;
    v4 = strlen(__s);
    this = (XlString *)OcText::copyBuffer((OcText *)((char *)v3 + 8), (const unsigned __int8 *)__s, v4 + 1);
    *((_DWORD *)v3 + 6) = v4;
    *((_DWORD *)v3 + 4) = 2;
  }
  return this;
}

uint64_t XlGraphicsInfo::takeOLEName(XlGraphicsInfo *this, XlString *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 16) = a2;
  return result;
}

void sub_22A21A6C0(void *a1)
{
  void *v1;
  void *v2;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A21A690);
}

void sub_22A21A6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void PptExitAnimationInfoAtom::PptExitAnimationInfoAtom(PptExitAnimationInfoAtom *this, const EshHeader *a2)
{
  _QWORD *v2;

  PptAnimationInfoAtom::PptAnimationInfoAtom(this, a2);
  *v2 = &off_24F3B5340;
  v2[4] = &unk_24F3B53E8;
}

void PptExitAnimationInfoAtom::~PptExitAnimationInfoAtom(PptExitAnimationInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t SsrwOOMemStream::readSInt32(SsrwOOMemStream *this)
{
  uint64_t v1;
  uint64_t result;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  result = CsLeReadSInt32((unsigned int *)(**((_QWORD **)this + 1) + v1));
  *((_DWORD *)this + 5) += 4;
  return result;
}

void sub_22A21A88C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21AA28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21AB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void XlPhoneticRun::XlPhoneticRun(XlPhoneticRun *this)
{
  *(_QWORD *)this = &off_24F3AD218;
  *((_DWORD *)this + 2) = -1;
  *((_WORD *)this + 6) = -1;
}

void XlPhoneticInfo::appendRun(XlPhoneticInfo *this, XlPhoneticRun *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 11);
  v4 = (char *)this + 88;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 9);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 9);
    v19 = (char *)*((_QWORD *)this + 10);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 9) = v17;
    *((_QWORD *)this + 10) = v8;
    *((_QWORD *)this + 11) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 10) = v8;
}

void XlPhoneticRun::~XlPhoneticRun(XlPhoneticRun *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlEshGroup::takeClientAnchor(uint64_t this, XlEshClientAnchor *a2)
{
  _DWORD *exception;

  if (*(_QWORD *)(this + 368))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1010;
  }
  *(_QWORD *)(this + 368) = a2;
  return this;
}

uint64_t XlEshGroup::takeClientData(uint64_t this, XlEshClientData *a2)
{
  _DWORD *exception;

  if (*(_QWORD *)(this + 376))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1010;
  }
  *(_QWORD *)(this + 376) = a2;
  return this;
}

void sub_22A21AE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A21AF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A21AFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A21B090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21B138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21B220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EshConnectorRule::EshConnectorRule(EshConnectorRule *this)
{
  _QWORD *v1;

  EshAtom::EshAtom(this, 0xF012u, 1u);
  *v1 = &off_24F39E848;
  *(_QWORD *)((char *)v1 + 28) = 0;
  *(_QWORD *)((char *)v1 + 44) = 0;
  *(_QWORD *)((char *)v1 + 36) = 0;
}

uint64_t EshConnectorRule::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 96))(v3, a1);
}

void XlMsoDrawingSelection::XlMsoDrawingSelection(XlMsoDrawingSelection *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACDE0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 28) = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v6;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v6 = a2[2];
  if (v6)
  {
    a2[2] = XlParserVisitor::getDataAndContinues((XlParserVisitor *)a1, &v6, -1) - *(_DWORD *)(a1 + 72);
    v4 = v6;
  }
  else
  {
    v4 = 0;
  }
  XlChartGelFrame::setBinaryData((XlChartGelFrame *)a2, *(unsigned __int8 **)(a1 + 24), v4);
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void XlMsoDrawingSelection::~XlMsoDrawingSelection(XlMsoDrawingSelection *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACDE0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACDE0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

void EshConnectorRule::~EshConnectorRule(EshConnectorRule *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A21B6E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21B920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void XlNote::XlNote(XlNote *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ACEE0;
  v2[2] = 0;
  v2[3] = 0;
  *(_QWORD *)((char *)v2 + 31) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlNote *a2)
{
  int v4;
  int v5;
  XlString *v6;
  int v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  void (*v14)(void);
  _DWORD *exception;
  XlString *v17;
  unsigned int v19;
  int v20;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) < 9u)
  {
    *((_BYTE *)a2 + 38) = 1;
    *((_WORD *)a2 + 18) = 0;
    XlChartPlot::takeChartFormat((uint64_t)a2, 0);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
    v20 = v7;
    if (v7)
    {
      v8 = v7;
      v9 = operator new[]((v7 + 1));
      *((_QWORD *)this + 3) = v9;
      v9[v8] = 0;
      if (v8 > 0x800)
      {
        v10 = 0;
        v19 = 2048;
        while (1)
        {
          (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3) + v10, &v19);
          v11 = v19;
          v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
          v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
          if (v12 != 28)
            break;
          v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
          v14 = *(void (**)(void))(**((_QWORD **)this + 2) + 16);
          if (v13 != -1)
          {
            v14();
            break;
          }
          v10 += v11;
          v14();
          v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
          if (v8 < v19 || v10 > v8 - v19)
          {
            exception = __cxa_allocate_exception(4uLL);
            *exception = 3002;
          }
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4294967292, 1);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), &v20);
      }
    }
    v17 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v17);
    *((_QWORD *)this + 4) = v17;
    XlString::takeString((uint64_t)v17, *((char **)this + 3), v20 + 1, v20, 1252);
    *((_QWORD *)this + 3) = 0;
    XlChartPlot::takeChartSeriesFormat(a2, *((XlChartSeriesFormat **)this + 4));
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)a2 + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2))
                        - *((_DWORD *)this + 18);
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    v5 = *((_DWORD *)a2 + 2);
    *((_BYTE *)a2 + 38) = ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2)) & 2) != 0;
    *((_WORD *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    v6 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v6);
    *((_QWORD *)this + 4) = v6;
    if (*((_DWORD *)a2 + 2) >= 0xBu)
    {
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5 + v4, v6);
      v6 = (XlString *)*((_QWORD *)this + 4);
    }
    XlChartPlot::takeChartFormat((uint64_t)a2, (uint64_t)v6);
    *((_QWORD *)this + 4) = 0;
    XlChartPlot::takeChartSeriesFormat(a2, 0);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A21BC74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlNote::~XlNote(XlNote *this)
{
  XlNote::~XlNote(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3ACEE0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
}

void XlDVal::XlDVal(XlDVal *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABFE0;
  *(_WORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 18) = 0;
  *(_QWORD *)(v2 + 28) = 0;
  *(_QWORD *)(v2 + 20) = 0;
}

void XlDV::XlDV(XlDV *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABFA0;
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 22) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_QWORD *)(v2 + 104) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDV *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  XlString *v8;
  int v9;
  XlString *v10;
  XlString *v11;
  XlString *v12;
  XlSxFmla *v13;
  XlSxFmla *v14;
  int v15;
  int v16;
  XlRef *v17;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 4) = v7 & 0xF;
  *((_DWORD *)a2 + 5) = (v7 >> 4) & 7;
  *((_BYTE *)a2 + 24) = (v7 & 0x80) != 0;
  *((_BYTE *)a2 + 25) = BYTE1(v7) & 1;
  *((_BYTE *)a2 + 26) = (v7 & 0x200) != 0;
  *((_BYTE *)a2 + 27) = v7 >> 10;
  *((_BYTE *)a2 + 28) = (v7 & 0x40000) != 0;
  *((_BYTE *)a2 + 29) = (v7 & 0x80000) != 0;
  *((_DWORD *)a2 + 8) = ((v7 >> 20) & 0xF) + 1;
  v8 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v8);
  v9 = v5 + v4;
  *((_QWORD *)this + 4) = v8;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v8);
  XlChartFrameType::takeBorderStyle((XlChartFrameType *)a2, *((XlChartLineStyle **)this + 4));
  *((_QWORD *)this + 4) = 0;
  v10 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v10);
  *((_QWORD *)this + 4) = v10;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v10);
  XlChartFrameType::takeAreaFillStyle((XlChartFrameType *)a2, *((XlChartFillStyle **)this + 4));
  *((_QWORD *)this + 4) = 0;
  v11 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v11);
  *((_QWORD *)this + 4) = v11;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v11);
  XlChartFrameType::takePictureFormat((XlChartFrameType *)a2, *((XlChartPicF **)this + 4));
  *((_QWORD *)this + 4) = 0;
  v12 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v12);
  *((_QWORD *)this + 4) = v12;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v12);
  XlChartPlotAxis::takePictureFormat((XlChartPlotAxis *)a2, *((XlChartPicF **)this + 4));
  *((_QWORD *)this + 4) = 0;
  v13 = (XlSxFmla *)operator new(0x20uLL);
  XlSxFmla::XlSxFmla(v13, 249, 0, *((_BYTE *)a2 + 14));
  (*(void (**)(XlParserVisitor *, XlSxFmla *))(*(_QWORD *)this + 1104))(this, v13);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (unsigned __int16)(*((_WORD *)v13 + 8) + 4), 1);
  *((_DWORD *)v13 + 2) = (unsigned __int16)(*((_WORD *)v13 + 8) + 4);
  XlChartPlotAxis::takeTicks((XlChartPlotAxis *)a2, (XlChartTick *)v13);
  v14 = (XlSxFmla *)operator new(0x20uLL);
  XlSxFmla::XlSxFmla(v14, 249, 0, *((_BYTE *)a2 + 14));
  (*(void (**)(XlParserVisitor *, XlSxFmla *))(*(_QWORD *)this + 1104))(this, v14);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (unsigned __int16)(*((_WORD *)v14 + 8) + 4), 1);
  *((_DWORD *)v14 + 2) = (unsigned __int16)(*((_WORD *)v14 + 8) + 4);
  XlDocRoute::setBookTitle(a2, (XlString *)v14);
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (v15)
  {
    v16 = v15;
    do
    {
      v17 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v17, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v17);
      XlDV::appendRef(a2, v17);
      --v16;
    }
    while (v16);
  }
  *((_DWORD *)this + 18) = v6;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A21C170(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

XlChartPicF *XlChartPlotAxis::takePictureFormat(XlChartPlotAxis *this, XlChartPicF *a2)
{
  XlChartPicF *result;

  result = this->var8;
  if (result)
    result = (XlChartPicF *)(*((uint64_t (**)(XlChartPicF *))result->var0 + 1))(result);
  this->var8 = a2;
  return result;
}

void XlSxFmla::XlSxFmla(XlSxFmla *this, __int16 a2, int a3, char a4)
{
  uint64_t v4;

  XlRecord::XlRecord(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_24F3AE3F0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxFmla *a2)
{
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int16 v7[2];

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *(_DWORD *)v7 = v4;
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (v4)
  {
    v5 = (unsigned __int8 *)operator new[](v4);
    (*(void (**)(_QWORD, unsigned __int8 *, unsigned __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v5, v7);
    XlObjProj::setVbProj(a2, v5, v7[0]);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlObjProj::setVbProj(XlObjProj *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 3) = a2;
  *((_WORD *)this + 8) = a3;
  return result;
}

void XlDV::appendRef(XlDV *this, XlRef *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 13);
  v4 = (char *)this + 104;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 11);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 11);
    v19 = (char *)*((_QWORD *)this + 12);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 11) = v17;
    *((_QWORD *)this + 12) = v8;
    *((_QWORD *)this + 13) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 12) = v8;
}

void sub_22A21C4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A21C55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void XlDVal::~XlDVal(XlDVal *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlDV::~XlDV(XlDV *this)
{
  XlDV::~XlDV(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_24F3ABFA0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 5) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 6) = 0;
  v4 = *((_QWORD *)this + 7);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 8) = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 9) = 0;
  v7 = *((_QWORD *)this + 10);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 10) = 0;
  XlDV::clearRefs((uint64_t)this);
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 12) = v8;
    operator delete(v8);
  }
}

void XlSxFmla::~XlSxFmla(XlSxFmla *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AE3F0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AE3F0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
}

uint64_t XlDV::clearRefs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 88);
  v3 = *(_QWORD *)(this + 96);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C400EA6A39BLL);
        v2 = *(_QWORD *)(v1 + 88);
        v3 = *(_QWORD *)(v1 + 96);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(_QWORD *)(v1 + 96) = v2;
  return this;
}

void XlSheetTab::XlSheetTab(XlSheetTab *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADFB8;
  *(_DWORD *)(v2 + 16) = 20;
  *(_WORD *)(v2 + 20) = 0;
}

void sub_22A21CEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A21CFFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *OCCXmlStreamer::createUsingInputFile(OCCStreamer *a1, _DWORD *a2, uint64_t a3, SsrwOORootStorage **a4)
{
  uint64_t v5;
  const char *v6;
  _QWORD *result;
  FILE *v8;
  __sFILE *v9;

  v8 = 0;
  v9 = 0;
  *a2 = 8001;
  if (OCCStreamer::openInputFile(a1, (char *)&v8, &v9, a4)
    && (result = OCCXmlStreamer::createUsingRootStorage((OCCStreamer *)v9, a2, v5, v6)) != 0)
  {
    result[5] = v8;
  }
  else
  {
    if (v9)
    {
      SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)v9);
      MEMORY[0x22E2DD408]();
    }
    result = &v8->_p;
    if (v8)
    {
      fclose(v8);
      return 0;
    }
  }
  return result;
}

uint64_t OCCStreamer::openInputFile(OCCStreamer *this, char *a2, __sFILE **a3, SsrwOORootStorage **a4)
{
  uint64_t result;
  SsrwOORootStorage *v7;

  result = (uint64_t)fopen((const char *)this, "rb");
  *(_QWORD *)a2 = result;
  if (result)
  {
    v7 = (SsrwOORootStorage *)operator new();
    SsrwOORootStorage::SsrwOORootStorage(v7);
    *a3 = (__sFILE *)v7;
    SsrwOORootStorage::openInStream(v7, *(_QWORD *)a2, 0);
    return 1;
  }
  return result;
}

void sub_22A21D10C(void *a1)
{
  FILE **v1;
  SsrwOORootStorage **v2;
  uint64_t v3;

  MEMORY[0x22E2DD408](v3, 0x1020C400B9F2F10);
  __cxa_begin_catch(a1);
  if (*v2)
  {
    SsrwOORootStorage::~SsrwOORootStorage(*v2);
    MEMORY[0x22E2DD408]();
  }
  *v2 = 0;
  fclose(*v1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x22A21D0FCLL);
}

void sub_22A21D270(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  id v13;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x22A21D230);
  }

  _Unwind_Resume(a1);
}

void sub_22A21D3B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21D6F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf, uint64_t a11, uint64_t a12)
{
  __break(1u);
}

void sub_22A21D81C()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A21D7E8);
}

void sub_22A21D82C()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x22A21D834);
  JUMPOUT(0x22A21D838);
}

void sub_22A21DA5C(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  void *v3;
  id v5;

  if (a2 == 1)
  {
    v5 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A21DDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A21E0D8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  id v12;

  if (a2 == 1)
  {
    v12 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A21E52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A21E74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A21E7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A21E850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21E8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A21E9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21EC34()
{
  __break(1u);
}

void sub_22A21ED14()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A21ED20);
}

void sub_22A21EDFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A21EEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A21F0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A21F324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A21F4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A21F5AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A21F668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A21F88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A21F9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A21FB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A21FDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

_xmlNode *CXFirstChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlNode *v5;

  v5 = CXFirstChild(a1);
  pTCXmlCheckName(v5, a2, a3);
  return v5;
}

BOOL CXNodeHasName(_xmlNode *a1, CXNamespace *a2, xmlChar *str2)
{
  return a1 && xmlStrEqual(a1->name, str2) && -[CXNamespace containsNode:](a2, "containsNode:", a1);
}

void sub_22A21FF28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredUnsignedLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlAttr *result;

  result = CXFindAttribute(a1, a2, a3);
  if (result)
    return (_xmlAttr *)CXUnsignedLongValue(result);
  return result;
}

unint64_t CXUnsignedLongValue(_xmlAttr *a1)
{
  _xmlNode *children;
  xmlChar *String;
  char v3;
  unint64_t v5;

  children = a1->children;
  if (!children || children->next || children->type - 3 > 1)
  {
    String = xmlNodeListGetString(a1->doc, children, 1);
    v3 = 0;
  }
  else
  {
    String = children->content;
    v3 = 1;
  }
  v5 = 0;
  if (String)
    sfaxmlXmlCharToUnsignedLong((const char *)String, &v5);
  if ((v3 & 1) == 0)
    ((void (*)(xmlChar *))*MEMORY[0x24BEDE758])(String);
  return v5;
}

uint64_t sfaxmlXmlCharToUnsignedLong(const char *a1, unint64_t *a2)
{
  unint64_t v4;
  char *__endptr;

  __endptr = 0;
  v4 = strtoul(a1, &__endptr, 10);
  if (*__endptr || !*a1)
    return 0;
  *a2 = v4;
  return 1;
}

_xmlNode *CXNextSibling(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlNode *v5;

  v5 = CXNextSibling(a1);
  pTCXmlCheckName(v5, a2, a3);
  return v5;
}

void sub_22A220170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t xmlStringHash(const xmlChar *a1)
{
  const xmlChar *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = xmlStrlen(a1);
  if (v2 >= 0x11)
  {
    v6 = 0;
    v4 = v2;
    do
      v4 = 257 * v4 + v1[v6++];
    while ((_DWORD)v6 != 8);
    v7 = -8;
    do
      v4 = 257 * v4 + v1[v2 + v7++];
    while ((_DWORD)v7);
  }
  else if (v2)
  {
    v3 = v2;
    v4 = v2;
    do
    {
      v5 = *v1++;
      v4 = 257 * v4 + v5;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  return ((v4 << v2) + v4);
}

uint64_t xmlStringIsEqual(const xmlChar *a1, const xmlChar *a2)
{
  return xmlStrEqual(a1, a2);
}

void sub_22A2205C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2206E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A220750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2207C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A220850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2208D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A220964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A220A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A220AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A220B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A220BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A220D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A220DA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A220E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A220EDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A22104C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A221114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A2211BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A22143C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A221AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

BOOL CXOptionalStringAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, NSString **a4)
{
  _xmlAttr *v5;

  v5 = CXFindAttribute(a1, a2, a3);
  if (v5)
    *a4 = (NSString *)(id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithValueOfXmlAttribute:", v5);
  return v5 != 0;
}

void sub_22A221C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A221E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A222878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A222A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A223118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A22326C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A2233D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A223484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL sfaxmlGetNSStringAnyNsProp(const xmlNode *a1, const xmlChar *a2, _QWORD *a3)
{
  xmlChar *Prop;
  xmlChar *v5;
  _BOOL8 v6;
  id v7;
  id v9;

  Prop = xmlGetProp(a1, a2);
  if (!Prop)
    return 0;
  v5 = Prop;
  v9 = 0;
  v6 = sfaxmlXmlCharToNSString((uint64_t)Prop, &v9);
  v7 = v9;
  ((void (*)(xmlChar *))*MEMORY[0x24BEDE758])(v5);
  if (v6)
    *a3 = objc_retainAutorelease(v7);

  return v6;
}

void sub_22A2235D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sfaxmlXmlCharToNSString(uint64_t a1, _QWORD *a2)
{
  id v3;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;
  return v3 != 0;
}

void sub_22A223A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A224270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A225B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_22A226D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A228568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A228A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sfaxmlGetBoolAnyNsProp(const xmlNode *a1, const xmlChar *a2, _BYTE *a3)
{
  xmlChar *Prop;
  xmlChar *v5;
  uint64_t v6;
  char v8;

  Prop = xmlGetProp(a1, a2);
  if (!Prop)
    return 0;
  v5 = Prop;
  v8 = 0;
  v6 = sfaxmlXmlCharToBool(Prop, &v8);
  ((void (*)(xmlChar *))*MEMORY[0x24BEDE758])(v5);
  if ((_DWORD)v6)
    *a3 = v8;
  return v6;
}

void sub_22A228B54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A229A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A229D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A22A010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A22A780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A22AA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A22ABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A22B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A22BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t SFUXmlReaderIORead(void *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, "readToBuffer:size:", a2, a3);
  if (v3 >= 0x80000000)
  {
    v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "int SFUXmlReaderIORead(void *, char *, int)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/sf/SFUDataRepresentation.m"), 486, 0, "Overflow in SFUXmlReaderIORead");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return v3;
}

void sub_22A22BF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A22C524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A22C62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A22C6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A22C7D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A22C858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A22CB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A22CEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_22A22D080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A22D4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

BOOL sfaxmlNsEqual(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (!(a1 | a2))
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return xmlStrEqual(*(const xmlChar **)(a1 + 16), *(const xmlChar **)(a2 + 16)) != 0;
  }
  return result;
}

void sub_22A22D5C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A22D728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A22E058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A22E374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A22E7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, char a17)
{
  void *v17;
  char *v18;
  void *v19;

  do
  {
    v19 = (void *)*((_QWORD *)v18 - 1);
    v18 -= 8;

  }
  while (v18 != &a17);

  _Unwind_Resume(a1);
}

void sub_22A22EABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A22EF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v4;

  _Unwind_Resume(a1);
}

void sub_22A22F294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A22F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A22FD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A22FFD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A230418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_22A230550()
{
  void *v0;

  JUMPOUT(0x22A230518);
}

void sub_22A230560()
{
  void *v0;

  JUMPOUT(0x22A230538);
}

void sub_22A2306AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A230A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = v1;
  v8 = *(void **)(v5 - 200);
  v7 = *(void **)(v5 - 192);
  v9 = *(void **)(v5 - 120);

  _Unwind_Resume(a1);
}

void sub_22A230C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A230D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A230E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A231008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A231530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A231C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A231E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredBoolAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlAttr *result;

  result = CXFindAttribute(a1, a2, a3);
  if (result)
    return (_xmlAttr *)CXBoolValue(result);
  return result;
}

void sub_22A232218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23252C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A232670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A232780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A232994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A232A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A232D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A233100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, id a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t SFUXmlReaderIOClose(void *a1)
{
  objc_msgSend(a1, "close");

  return 0;
}

void sub_22A23410C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A234428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A2344A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A2345CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A234640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2346F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A234C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A234F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A2353B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2356C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A2361D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A236490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A236530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2368A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, id a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_22A236E6C()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  JUMPOUT(0x22A236F40);
}

void sub_22A236E78()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  JUMPOUT(0x22A236F98);
}

void sub_22A236ED8()
{
  JUMPOUT(0x22A236F48);
}

void sub_22A236EE0()
{
  JUMPOUT(0x22A236F50);
}

void sub_22A236F20()
{
  JUMPOUT(0x22A236F9CLL);
}

void sub_22A236F2C()
{
  JUMPOUT(0x22A236FA8);
}

void sub_22A236F58()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  JUMPOUT(0x22A236F98);
}

void sub_22A236F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A237080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A237224()
{
  objc_end_catch();
  JUMPOUT(0x22A23722CLL);
}

void sub_22A237480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A237570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23771C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id OAVReadComposite(NSString *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v15;

  -[NSString componentsSeparatedByString:](a1, "componentsSeparatedByString:", CFSTR(";"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "count");
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", v2);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      objc_msgSend(v1, "objectAtIndex:", i);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "componentsSeparatedByString:", CFSTR(":"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v5, "count") == 2)
      {
        objc_msgSend(v5, "objectAtIndex:", 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "stringByTrimmingCharactersInSet:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v5, "objectAtIndex:", 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "stringByTrimmingCharactersInSet:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v11, "hasPrefix:", CFSTR("\""))
          && objc_msgSend(v11, "hasSuffix:", CFSTR("\""))
          && (unint64_t)objc_msgSend(v11, "length") >= 2)
        {
          objc_msgSend(v11, "substringWithRange:", 1, objc_msgSend(v11, "length") - 2);
          v12 = objc_claimAutoreleasedReturnValue();

          v13 = (void *)v12;
        }
        else
        {
          v13 = v11;
        }
        objc_msgSend(v15, "setObject:forKey:", v13, v8);

      }
    }
  }

  return v15;
}

void sub_22A237940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2379F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A237AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2380B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

float OAVReadLength(NSString *a1)
{
  NSString *v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  float v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v12;
  double v13;

  v1 = a1;
  v13 = 0.0;
  v12 = 0;
  CXSplitValueAndUnit(v1, &v13, &v12);
  switch(v12)
  {
    case 0:
    case 10:
      v2 = v13;
      v3 = 0.75;
      goto LABEL_6;
    case 6:
      v7 = v13;
      goto LABEL_12;
    case 7:
      v2 = v13;
      v3 = 72.0;
LABEL_6:
      v7 = v2 * v3;
      goto LABEL_12;
    case 8:
      v8 = v13;
      v9 = 360000.0;
      goto LABEL_9;
    case 9:
      v8 = v13;
      v9 = 36000.0;
LABEL_9:
      v10 = v8 * v9;
      goto LABEL_11;
    case 12:
      v10 = v13;
LABEL_11:
      v7 = v10 / 12700.0;
LABEL_12:
      v6 = v7;
      break;
    default:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float OAVReadLength(NSString *__strong)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 65, 0, "Unhandled case");

      v6 = 0.0;
      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      break;
  }

  return v6;
}

void sub_22A238354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A23847C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A238878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A238B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A238BDC(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void sub_22A238C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float OAVReadFraction(NSString *a1)
{
  NSString *v1;
  double v2;
  float v3;
  void *v4;
  void *v5;
  int v7;
  double v8;

  v1 = a1;
  v8 = 0.0;
  v7 = 0;
  CXSplitValueAndUnit(v1, &v8, &v7);
  if (v7)
  {
    if (v7 == 1)
    {
      v2 = v8 * 0.0000152587891;
    }
    else
    {
      if (v7 != 13)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float OAVReadFraction(NSString *__strong)");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 84, 0, "Unhandled case");

        v3 = 0.0;
        +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
        goto LABEL_9;
      }
      v2 = v8 / 100.0;
    }
  }
  else
  {
    v2 = v8;
  }
  v3 = v2;
LABEL_9:

  return v3;
}

void sub_22A238DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A238F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A2390B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A239208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A239464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A239534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2396E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23998C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A239BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A239D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A239DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A239EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23A094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A23A168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23A21C(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void sub_22A23A2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23A3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A23A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A23A90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A23ACE4(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void sub_22A23AF28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A23B0D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23B388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A23B6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A23B894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A23B9D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A23BA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23BBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCPPackagePart;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A23BDF4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  id v15;

  if (a2 == 1)
  {
    v15 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x22A23BDACLL);
  }

  _Unwind_Resume(a1);
}

void sub_22A23BFB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A23C040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23C0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A23C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A23C800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23C980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23CAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23CC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL CXOptionalUnsignedLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, unint64_t *a4)
{
  _xmlAttr *v5;
  _xmlAttr *v6;

  v5 = CXFindAttribute(a1, a2, a3);
  v6 = v5;
  if (v5)
    *a4 = CXUnsignedLongValue(v5);
  return v6 != 0;
}

void sub_22A23CE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A23D114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL CXOptionalDoubleAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, double *a4)
{
  _xmlAttr *v5;
  _xmlAttr *v6;

  v5 = CXFindAttribute(a1, a2, a3);
  v6 = v5;
  if (v5)
    *a4 = CXDoubleValue(v5);
  return v6 != 0;
}

double CXDoubleValue(_xmlAttr *a1)
{
  _xmlNode *children;
  xmlChar *String;
  char v3;
  double v5;

  v5 = 0.0;
  children = a1->children;
  if (!children || children->next || children->type - 3 > 1)
  {
    String = xmlNodeListGetString(a1->doc, children, 1);
    v3 = 0;
    if (!String)
      goto LABEL_8;
    goto LABEL_7;
  }
  String = children->content;
  v3 = 1;
  if (String)
LABEL_7:
    sfaxmlXmlCharToDouble((uint64_t)String, &v5);
LABEL_8:
  if ((v3 & 1) == 0)
    ((void (*)(xmlChar *))*MEMORY[0x24BEDE758])(String);
  return v5;
}

uint64_t sfaxmlXmlCharToDouble(uint64_t a1, double *a2)
{
  const char *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _BOOL8 v7;
  const char *v8;
  size_t v9;
  unint64_t v10;
  double v11;
  unint64_t v13;
  char *v14;

  v3 = (const char *)(a1 - 1);
  v4 = MEMORY[0x24BDAC740];
  do
  {
    v5 = v3[1];
    if ((v5 & 0x80000000) != 0)
      v6 = __maskrune(v3[1], 0x4000uLL);
    else
      v6 = *(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000;
    ++v3;
  }
  while (v6);
  v7 = v5 == 43;
  if (v5 == 43)
    v8 = v3 + 1;
  else
    v8 = v3;
  v9 = strlen(v8);
  if (v9 >= 3)
  {
    v10 = v9;
    if (!strncasecmp(v8, "NAN", 3uLL))
    {
      v13 = 0x7FF8000000000000;
    }
    else if (!strncasecmp(v8, "INF", 3uLL))
    {
      v13 = 0x7FF0000000000000;
    }
    else
    {
      if (v10 < 4 || strncasecmp(v8, "-INF", 4uLL))
        goto LABEL_14;
      v13 = 0xFFF0000000000000;
    }
    v11 = *(double *)&v13;
    goto LABEL_22;
  }
LABEL_14:
  v14 = 0;
  v11 = strtod(v8, &v14);
  if (*v14 || !v3[v7])
    return 0;
LABEL_22:
  *a2 = v11;
  return 1;
}

void sub_22A23D454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23D534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23D5E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23D6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23D894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23DB20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A23DBEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23DC88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A23DD44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A23DE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A23E40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A23E4C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23E650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23E6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23E78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23E83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t CXCountChildren(_xmlNode *a1, CXNamespace *a2, xmlChar *str1)
{
  _xmlNode *children;
  uint64_t v6;

  children = a1->children;
  if (!children)
    return 0;
  v6 = 0;
  do
  {
    if (children->type == XML_ELEMENT_NODE && xmlStrEqual(str1, children->name))
      v6 = v6 + -[CXNamespace containsNode:](a2, "containsNode:", children);
    children = children->next;
  }
  while (children);
  return v6;
}

void sub_22A23E9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23EDD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23EF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A23F110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A23F1F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23F2EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A23F474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A23F5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23F7A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A23F95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A23FA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A23FB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23FCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_22A23FDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A23FF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A240004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A240820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A240C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A240EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A240F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A241108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A241254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A2414C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A2415FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A241650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2416C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A241BE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  __break(1u);
}

void sub_22A241D48()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A241D10);
}

void sub_22A241DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A24225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A24261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A242750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2427A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A242A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A242AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A242D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A242F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_22A24316C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A24356C()
{
  __break(1u);
}

void sub_22A24368C()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A24365CLL);
}

void sub_22A2439B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A243E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A2440E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2442B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2443B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A244554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v14;

  _Unwind_Resume(a1);
}

void sub_22A2445C8()
{
  JUMPOUT(0x22A2445B4);
}

void sub_22A2445D0()
{
  JUMPOUT(0x22A2445B8);
}

void sub_22A2446E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A244828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A244A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  _Unwind_Resume(a1);
}

void sub_22A244B44()
{
  JUMPOUT(0x22A244AF8);
}

void sub_22A244B54()
{
  JUMPOUT(0x22A244B00);
}

void sub_22A244B64()
{
  JUMPOUT(0x22A244B08);
}

void sub_22A244B74()
{
  JUMPOUT(0x22A244B10);
}

void sub_22A244B80()
{
  JUMPOUT(0x22A244B18);
}

void sub_22A244B8C()
{
  JUMPOUT(0x22A244B20);
}

void sub_22A244B98()
{
  JUMPOUT(0x22A244B28);
}

void sub_22A244BA4()
{
  JUMPOUT(0x22A244B30);
}

void sub_22A244BB0()
{
  JUMPOUT(0x22A244B34);
}

void sub_22A245014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,void *a41,void *a42,void *a43,void *a44)
{
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  v47 = *(void **)(v45 - 200);
  v46 = *(void **)(v45 - 192);
  v49 = *(void **)(v45 - 216);
  v48 = *(void **)(v45 - 208);

  _Unwind_Resume(a1);
}

void sub_22A24513C()
{
  JUMPOUT(0x22A245094);
}

void sub_22A24514C()
{
  JUMPOUT(0x22A24509CLL);
}

void sub_22A24515C()
{
  JUMPOUT(0x22A2450A4);
}

void sub_22A24516C()
{
  JUMPOUT(0x22A2450ACLL);
}

void sub_22A24517C()
{
  JUMPOUT(0x22A2450B4);
}

void sub_22A24518C()
{
  JUMPOUT(0x22A2450BCLL);
}

void sub_22A24519C()
{
  JUMPOUT(0x22A2450C4);
}

void sub_22A2451AC()
{
  JUMPOUT(0x22A2450CCLL);
}

void sub_22A2451BC()
{
  JUMPOUT(0x22A2450D4);
}

void sub_22A2451CC()
{
  JUMPOUT(0x22A2450DCLL);
}

void sub_22A2451DC()
{
  JUMPOUT(0x22A2450E0);
}

void sub_22A2451EC()
{
  JUMPOUT(0x22A2450E4);
}

void sub_22A2451FC()
{
  JUMPOUT(0x22A2450ECLL);
}

void sub_22A24520C()
{
  JUMPOUT(0x22A2450F0);
}

void sub_22A245218()
{
  JUMPOUT(0x22A2450F8);
}

void sub_22A245224()
{
  JUMPOUT(0x22A2450FCLL);
}

void sub_22A245230()
{
  JUMPOUT(0x22A245104);
}

void sub_22A24523C()
{
  JUMPOUT(0x22A24510CLL);
}

void sub_22A245248()
{
  JUMPOUT(0x22A245114);
}

void sub_22A245254()
{
  JUMPOUT(0x22A24511CLL);
}

void sub_22A245260()
{
  JUMPOUT(0x22A245124);
}

void sub_22A24526C()
{
  JUMPOUT(0x22A245128);
}

void sub_22A245278()
{
  JUMPOUT(0x22A24512CLL);
}

void sub_22A2453CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v16;

  if (a2 == 1)
  {
    v16 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x22A245388);
  }

  _Unwind_Resume(a1);
}

void sub_22A24614C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_22A246478()
{
  void *v0;

  objc_end_catch();

  JUMPOUT(0x22A246484);
}

void sub_22A24664C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2466E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A246748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2467C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A246888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A246938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A246A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A246B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A246CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A247344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A247554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A247A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A247C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A247EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A24801C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A248094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2481AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A248540(_Unwind_Exception *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(a1);
    v10 = objc_opt_class();
    TSUSpecificCast(v10, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (!v11
      || (objc_msgSend(v11, "name"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          v14 = (void *)*MEMORY[0x24BDBCA98],
          v13,
          v12,
          v13 != v14))
    {
      +[TCMessageContext reportWarningException:](TCMessageContext, "reportWarningException:", v9);
    }

    objc_end_catch();
    JUMPOUT(0x22A248490);
  }

  _Unwind_Resume(a1);
}

void sub_22A2486AC()
{
  void *v0;
  void *v1;

  objc_end_catch();
  JUMPOUT(0x22A24860CLL);
}

void sub_22A2487B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A248860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A248C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A248E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A248F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A24903C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2495EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A2498F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A249A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t CXDefaultUnsignedLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4)
{
  _xmlAttr *v5;

  v5 = CXFindAttribute(a1, a2, a3);
  if (v5)
    return CXUnsignedLongValue(v5);
  else
    return a4;
}

void sub_22A249EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A24A014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24A140()
{
  JUMPOUT(0x22A24A148);
}

uint64_t SFUOpen(void *a1, int a2, unsigned int a3)
{
  uint64_t v4;

  v4 = open((const char *)objc_msgSend(a1, "fileSystemRepresentation"), a2, a3);
  if ((_DWORD)v4 == -1)
    objc_msgSend(MEMORY[0x24BDBCE88], "sfu_errnoRaise:format:", CFSTR("SFUOpenError"), CFSTR("Could not open %@"), a1);
  return v4;
}

uint64_t SFUDup(uint64_t a1)
{
  uint64_t v2;

  v2 = dup(a1);
  if ((_DWORD)v2 == -1)
    objc_msgSend(MEMORY[0x24BDBCE88], "sfu_errnoRaise:format:", CFSTR("SFUDupError"), CFSTR("Could not dup %d"), a1);
  return v2;
}

void sub_22A24A5E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A24A788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A24A89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A24AAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A24AC2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A24AE60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_22A24B0B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A24B1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24B29C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24B468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A24B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A24B9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A24BAEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24BB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A24BF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_22A24C0B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24C250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setDoubleStrikethrough(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 0x800uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFBF | ((a2 & 1) << 6);
  return this;
}

unsigned __int16 *WrdListLevelFormat::reset(WrdListLevelFormat *this)
{
  unsigned __int16 *result;

  this->var3 = 0;
  this->var4 = 0;
  *(_QWORD *)&this->var5 = 0;
  this->var7 = 0;
  *(_QWORD *)&this->var9 = 0;
  this->var11 = 0;
  *((_BYTE *)this + 80) &= 0xE0u;
  *(_WORD *)&this->var18 = 0;
  *(_QWORD *)this->var8 = 0;
  this->var8[8] = 0;
  (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)this->var1 + 16))(this->var1);
  (*((void (**)(WrdCharacterProperties *))this->var2->var0 + 2))(this->var2);
  result = this->var12;
  if (result)
    result = (unsigned __int16 *)MEMORY[0x22E2DD3F0](result, 0x1000C80BDFB0063);
  this->var12 = 0;
  return result;
}

void sub_22A24C530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WrdTableCellDescriptor::getShadingReference(WrdTableCellDescriptor *this)
{
  char *v1;
  int v2;

  v2 = *((_DWORD *)this + 2);
  v1 = (char *)this + 8;
  *(_DWORD *)v1 = v2 | 1;
  return *((_QWORD *)v1 + 1);
}

WrdTableProperties *WrdTableProperties::setCantSplit(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x80000u;
  *((_BYTE *)this + 386) = a2;
  return this;
}

void sub_22A24CA40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A24CADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A24CD68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A24CEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlHLink::XlHLink(XlHLink *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3AC920;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 3;
  *(_WORD *)(v2 + 28) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 58) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHLink *a2)
{
  XlRef *v4;
  int v5;
  unsigned int var0;
  __int16 v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  XlString *v14;
  int v15;
  unsigned __int16 v16;
  int v17;
  XlString *v18;
  int v19;
  unsigned __int16 v20;
  XlStringParser *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned __int16 v27;
  int v28;
  XlString *v29;
  XlString *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  XlString *v35;

  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  var0 = a2->var1.var0;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea((XlDConRef *)a2, v4);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v8 = v7;
  v9 = var0 + v5;
  a2->var4 = (v7 & 2) != 0;
  a2->var5 = HIBYTE(v7) & 1;
  if ((v7 & 0x14) != 0)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
    if (v10)
    {
      v11 = v10 - 1;
      v12 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v10 - 1), 1);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + v12 > v9
        && a2->var1.var0 != 8228)
      {
        v13 = 3779;
LABEL_30:
        ChLogFunction("Failure to parse XlHLink", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", v13);
        return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
      }
      v14 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v14);
      *((_QWORD *)this + 4) = v14;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v11, 1, v9, v14);
      XlChartFrameType::takeBorderStyle((XlChartFrameType *)a2, *((XlChartLineStyle **)this + 4));
      *((_QWORD *)this + 4) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    }
  }
  if (v8 < 0)
  {
    v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
    if (v15)
    {
      v16 = v15 - 1;
      v17 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v15 - 1), 1);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + v17 > v9
        && a2->var1.var0 != 8228)
      {
        v13 = 3805;
        goto LABEL_30;
      }
      v18 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v18);
      *((_QWORD *)this + 4) = v18;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v16, 1, v9, v18);
      XlChartFrameType::takeAreaFillStyle((XlChartFrameType *)a2, *((XlChartFillStyle **)this + 4));
      *((_QWORD *)this + 4) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    }
  }
  if ((v8 & 1) == 0)
  {
    XlHLink::setType(a2, 3);
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  if (a2->var5)
  {
    XlHLink::setType(a2, 2);
    v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
    if (!v19)
      return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
    v20 = v19 - 1;
    v21 = (XlParserVisitor *)((char *)this + 8);
    v22 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v19 - 1), 1);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + v22 > v9
      && a2->var1.var0 != 8228)
    {
      v13 = 3837;
      goto LABEL_30;
    }
LABEL_32:
    v29 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v29);
    *((_QWORD *)this + 4) = v29;
    XlStringParser::parse(v21, *((SsrwOOStream **)this + 2), v20, 1, v9, v29);
    XlChartFrameType::takePictureFormat((XlChartFrameType *)a2, *((XlChartPicF **)this + 4));
    *((_QWORD *)this + 4) = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  if (v23 == 51680)
  {
    XlHLink::setType(a2, 0);
    v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
    if (!v24)
      return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
    v20 = ((unsigned __int16)v24 >> 1) - 1;
    v21 = (XlParserVisitor *)((char *)this + 8);
    v25 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v20, 1);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + v25 > v9
      && a2->var1.var0 != 8228)
    {
      v13 = 3874;
      goto LABEL_30;
    }
    goto LABEL_32;
  }
  XlHLink::setType(a2, 1);
  a2->var11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  if (v26)
  {
    v27 = v26 - 1;
    v28 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v26 - 1), 0);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + v28 > v9
      && a2->var1.var0 != 8228)
    {
      v13 = 3904;
      goto LABEL_30;
    }
    v30 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v30);
    *((_QWORD *)this + 4) = v30;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v27, 0, v9, v30);
    XlChartPlotAxis::takePictureFormat((XlChartPlotAxis *)a2, *((XlChartPicF **)this + 4));
    *((_QWORD *)this + 4) = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  if (v9 == (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)))
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2)))
    {
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
      if ((_DWORD)v31)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v31, 1);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
        v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
        (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
        v33 = v32 >> 1;
        v34 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v33, 1);
        if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + v34 <= v9
          || a2->var1.var0 == 8228)
        {
          v35 = (XlString *)operator new(0x68uLL);
          XlString::XlString(v35);
          *((_QWORD *)this + 4) = v35;
          XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v33, 1, v9, v35);
          *((_QWORD *)this + 4) = 0;
        }
      }
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A24D68C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlDConRef::setConsolidationArea(XlDConRef *this, XlRef *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD408](result, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 2) = a2;
  return result;
}

XlString *XlHLink::setType(XlHLink *this, int a2)
{
  this->var3 = a2;
  return XlHLink::resetExtendedContent(this);
}

XlString *XlHLink::resetExtendedContent(XlHLink *this)
{
  XlString *var9;
  XlString *result;

  var9 = this->var9;
  if (var9)
    (*(void (**)(XlString *))(*(_QWORD *)var9 + 8))(var9);
  this->var9 = 0;
  result = this->var10;
  if (result)
    result = (XlString *)(*(uint64_t (**)(XlString *))(*(_QWORD *)result + 8))(result);
  this->var10 = 0;
  this->var11 = 0;
  return result;
}

void sub_22A24D90C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void XlHLink::~XlHLink(XlHLink *this)
{
  XlHLink::~XlHLink(this);
  JUMPOUT(0x22E2DD408);
}

{
  XlRef *var2;
  XlString *var6;
  XlString *var7;
  XlString *var8;

  this->var0 = (void **)&off_24F3AC920;
  var2 = this->var2;
  if (var2)
    MEMORY[0x22E2DD408](var2, 0x1000C400EA6A39BLL);
  this->var2 = 0;
  var6 = this->var6;
  if (var6)
    (*(void (**)(XlString *))(*(_QWORD *)var6 + 8))(var6);
  this->var6 = 0;
  var7 = this->var7;
  if (var7)
    (*(void (**)(XlString *))(*(_QWORD *)var7 + 8))(var7);
  this->var7 = 0;
  var8 = this->var8;
  if (var8)
    (*(void (**)(XlString *))(*(_QWORD *)var8 + 8))(var8);
  this->var8 = 0;
  XlHLink::resetExtendedContent(this);
}

void XlChartSerFmt::XlChartSerFmt(XlChartSerFmt *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8D68;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlChartArea::isStacked(XlChartArea *this)
{
  return *((_WORD *)this + 8) & 1;
}

uint64_t XlChartAttachedLabel::isShowLabPct(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 2) & 1;
}

void XlChartSerFmt::~XlChartSerFmt(XlChartSerFmt *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartiFmt::XlChartiFmt(XlChartiFmt *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A88E0;
  *(_WORD *)(v2 + 16) = 0;
}

XlChartPlotAxis *XlChartPlotAxis::setNumberFormatIndex(XlChartPlotAxis *this, unsigned __int16 a2)
{
  this->var23 = 1;
  this->var16 = a2;
  return this;
}

void sub_22A24DDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v13;

  _Unwind_Resume(a1);
}

uint64_t XlFormatParser::readPeriodToken(XlFormatParser *this, XlFmtPtg *a2)
{
  int v4;
  unsigned int v5;
  OcText *v6;
  OcText *v7;
  OcText *v8;
  int Character;
  int v10;

  v4 = *((_DWORD *)this + 6);
  v5 = v4 + 1;
  v6 = *(OcText **)this;
  if (v6 && *((_BYTE *)this + 28) && v6->var3 > v5 && OcText::getCharacter(v6, v4 + 1) == 48)
  {
    v5 = v4 + 2;
    v7 = *(OcText **)this;
    if (*(_QWORD *)this && v7->var3 <= v5 || OcText::getCharacter(v7, v4 + 2) != 48)
    {
      v10 = 33;
    }
    else
    {
      v5 = v4 + 3;
      v8 = *(OcText **)this;
      if (*(_QWORD *)this && v8->var3 <= v5)
      {
        v10 = 34;
      }
      else
      {
        Character = OcText::getCharacter(v8, v4 + 3);
        if (Character == 48)
          v10 = 35;
        else
          v10 = 34;
        if (Character == 48)
          LOWORD(v5) = v4 + 4;
      }
    }
  }
  else
  {
    v10 = 43;
  }
  *(_DWORD *)a2 = v10;
  return (unsigned __int16)(v5 - *((_WORD *)this + 12));
}

void sub_22A24E0E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24E35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A24E384(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x22A24E2F0);
}

void sub_22A24E3A0(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  if (!v1)
    JUMPOUT(0x22A24E2F0);
  JUMPOUT(0x22A24E2E8);
}

void sub_22A24E3B8(void *a1)
{
  uint64_t v1;
  void *v2;

  objc_begin_catch(a1);
  if (!v1)
    JUMPOUT(0x22A24E2F0);
  JUMPOUT(0x22A24E2E8);
}

void sub_22A24E3CC()
{
  JUMPOUT(0x22A24E3D4);
}

void XlScenProtect::XlScenProtect(XlScenProtect *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADE78;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlObjProtect::XlObjProtect(XlObjProtect *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD020;
  *(_BYTE *)(v2 + 16) = 0;
}

void sub_22A24E540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void PptAnimScaleBehaviorAtom::PptAnimScaleBehaviorAtom(PptAnimScaleBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BE5A8;
  *(_QWORD *)(v2 + 32) = &unk_24F3BE650;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 72) = 1;
}

uint64_t PptAnimScaleBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 904))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimScaleBehaviorAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 73) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  *((float *)a2 + 12) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((float *)a2 + 13) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    goto LABEL_6;
  *((float *)a2 + 16) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((float *)a2 + 17) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 20
    || (*((float *)a2 + 14) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1)),
        *((float *)a2 + 15) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 28)
    || (*((_BYTE *)a2 + 72) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 32))
  {
LABEL_6:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A24EA10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PptAnimScaleBehaviorAtom::~PptAnimScaleBehaviorAtom(PptAnimScaleBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptTextBlockStylingMac11Atom::PptTextBlockStylingMac11Atom(PptTextBlockStylingMac11Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6640;
  *(_QWORD *)(v2 + 32) = &unk_24F3B66E8;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStylingMac11Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v3 + 952))(v3, a1, 0);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStylingMac11Atom *a2, uint64_t a3)
{
  unsigned int DataLength;
  unsigned int v7;
  PptCharStyleMac11 *v8;
  int v9;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  if ((_DWORD)a3)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a3, 1);
  DataLength = EshRecord::getDataLength(a2);
  if (DataLength >= 8)
  {
    v7 = DataLength;
    while (1)
    {
      v8 = PptTextBlockStylingMac11Atom::addNewStyle(a2);
      v9 = PptParserVisitor::parseMac11(this, v8);
      if (!v9)
        break;
      v7 -= v9;
      if (v7 < 8)
        return 1;
    }
    PptTextBlockStylingMac11Atom::removeStyle(a2, v8);
    PptParserVisitor::endRead(this, a2);
  }
  return 1;
}

PptCharStyleMac11 *PptTextBlockStylingMac11Atom::addNewStyle(PptTextBlockStylingMac11Atom *this)
{
  PptCharStyleMac11 *v2;
  unint64_t v3;
  PptCharStyleMac11 **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  PptCharStyleMac11 **v14;
  char *v15;
  char *v16;
  char *v17;
  PptCharStyleMac11 *v18;

  v2 = (PptCharStyleMac11 *)operator new(0x10uLL);
  PptCharStyleMac11::PptCharStyleMac11(v2);
  v3 = *((_QWORD *)this + 8);
  v4 = (PptCharStyleMac11 **)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (PptCharStyleMac11 **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = (PptCharStyleMac11 *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A24EC88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void PptCharStyleMac11::PptCharStyleMac11(PptCharStyleMac11 *this)
{
  *(_QWORD *)this = &off_24F3BDFA0;
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
}

uint64_t PptParserVisitor::parseMac11(PptParserVisitor *this, PptCharStyleMac11 *a2)
{
  int v4;
  int v5;
  unsigned int v6;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v5 = v4;
  if ((v4 & 0x10000000) != 0)
  {
    *((_DWORD *)a2 + 3) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
    *((_BYTE *)a2 + 8) = 1;
    v6 = 8;
    if ((v5 & 0x8000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 4;
  if ((v4 & 0x8000000) != 0)
LABEL_5:
    v6 += (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)) + 4;
LABEL_6:
  if ((v5 & 0xE7FFFFFF) != 0)
    return 0;
  else
    return v6;
}

BOOL PptTextBlockStylingMac11Atom::removeStyle(PptTextBlockStylingMac11Atom *this, const PptCharStyleMac11 *a2)
{
  const PptCharStyleMac11 **v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  const PptCharStyleMac11 **v7;
  const PptCharStyleMac11 *v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (const PptCharStyleMac11 **)*((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7) - (_QWORD)v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return 0;
  if (*v2 != a2)
  {
    v5 = 0;
    v6 = (v3 >> 3);
    v7 = v2 + 1;
    while (v6 - 1 != v5)
    {
      v8 = v7[v5++];
      if (v8 == a2)
      {
        v9 = v5 < v6;
        goto LABEL_9;
      }
    }
    return 0;
  }
  v5 = 0;
  v9 = 1;
LABEL_9:
  (*(void (**)(const PptCharStyleMac11 *))(*(_QWORD *)a2 + 8))(a2);
  v10 = *((_QWORD *)this + 6);
  if (v5 >= ((unint64_t)(*((_QWORD *)this + 7) - v10) >> 3))
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(v10 + 8 * v5) = 0;
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)this + 6) + 8 * v5;
  v13 = v11 - (v12 + 8);
  if (v11 != v12 + 8)
    memmove((void *)v12, (const void *)(v12 + 8), v11 - (v12 + 8));
  *((_QWORD *)this + 7) = v12 + v13;
  return v9;
}

void PptCharStyleMac11::~PptCharStyleMac11(PptCharStyleMac11 *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptTextMasterStyleMac11Atom::PptTextMasterStyleMac11Atom(PptTextMasterStyleMac11Atom *this, const EshHeader *a2)
{
  _QWORD *v2;

  PptTextBlockStylingMac11Atom::PptTextBlockStylingMac11Atom(this, a2);
  *v2 = &off_24F3B6830;
  v2[4] = &unk_24F3B68D8;
}

uint64_t PptTextMasterStyleMac11Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 960))(v3, a1);
}

uint64_t PptParserVisitor::visit(_QWORD **a1, uint64_t a2)
{
  *(_WORD *)(a2 + 72) = (*(uint64_t (**)(_QWORD *))(*a1[1] + 80))(a1[1]);
  return ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[119])(a1, a2, 2);
}

void PptTextDefaultStyleMac11Atom::PptTextDefaultStyleMac11Atom(PptTextDefaultStyleMac11Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6738;
  *(_QWORD *)(v2 + 32) = &unk_24F3B67E0;
  PptCharStyleMac11::PptCharStyleMac11((PptCharStyleMac11 *)(v2 + 48));
}

uint64_t PptTextDefaultStyleMac11Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 968))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultStyleMac11Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EshRecord::getDataLength(a2);
  if (!PptParserVisitor::parseMac11(this, (PptTextDefaultStyleMac11Atom *)((char *)a2 + 48)))
    PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A24F0EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom(PptTextBlockStylingMac11Atom *this)
{
  PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom(this);
  JUMPOUT(0x22E2DD408);
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F3B6640;
  *((_QWORD *)this + 4) = &unk_24F3B66E8;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (((v3 - (_QWORD)v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      v5 = v2[v4];
      if (v5)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v5 + 8))(v2[v4]);
        v2 = (_QWORD *)*((_QWORD *)this + 6);
        v3 = *((_QWORD *)this + 7);
      }
      if (v4 >= ((unint64_t)(v3 - (_QWORD)v2) >> 3))
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      v2[v4++] = 0;
      v2 = (_QWORD *)*((_QWORD *)this + 6);
      v3 = *((_QWORD *)this + 7);
    }
    while (v4 < ((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

void PptTextMasterStyleMac11Atom::~PptTextMasterStyleMac11Atom(PptTextMasterStyleMac11Atom *this)
{
  PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom(this);
  JUMPOUT(0x22E2DD408);
}

void PptTextDefaultStyleMac11Atom::~PptTextDefaultStyleMac11Atom(PptTextDefaultStyleMac11Atom *this)
{
  *(_QWORD *)this = &off_24F3B6738;
  *((_QWORD *)this + 4) = &unk_24F3B67E0;
  PptCharStyleMac11::~PptCharStyleMac11((PptTextDefaultStyleMac11Atom *)((char *)this + 48));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B6738;
  *((_QWORD *)this + 4) = &unk_24F3B67E0;
  PptCharStyleMac11::~PptCharStyleMac11((PptTextDefaultStyleMac11Atom *)((char *)this + 48));
}

uint64_t WrdCharacterProperties::setFontIndexForSymbol(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x10;
  *(_WORD *)(result + 232) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setSymbolCharacter(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x20;
  *(_WORD *)(result + 244) = a2;
  return result;
}

void sub_22A24F334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A24F3A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A24F4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A24F5F4(void *a1, int a2)
{
  unsigned int *v3;
  void *v4;

  if (a2 == 3)
  {
    v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v4, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A24F5CCLL);
}

void sub_22A24F678(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A24F5CCLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A24F870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A24F9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A24FB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2500BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A2501DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A25028C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2509B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A250CF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A250E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A250F1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A251118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A2512B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A251398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A251814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A251AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A251C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A251D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A251EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A251F40()
{
  JUMPOUT(0x22A251F2CLL);
}

void sub_22A251FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2522D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A252590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A252818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A252D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A252E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A253130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2531F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::setRevisionMark(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x40uLL;
  *(_DWORD *)(result + 224) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setIndexToAuthorIDOfRevisionEdit(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x80000000000000uLL;
  this->var61 = a2;
  return this;
}

uint64_t WrdCharacterProperties::getRevisionEditReference(WrdCharacterProperties *this)
{
  char *v1;
  unsigned int v2;
  unint64_t v3;

  v2 = *((_DWORD *)&this->var2 + 2);
  v1 = (char *)&this->var2 + 8;
  v3 = v2 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | 0x2000000000;
  *(_DWORD *)v1 = v2;
  *((_WORD *)v1 + 2) = WORD2(v3);
  return *((_QWORD *)v1 + 11);
}

uint64_t WrdCharacterProperties::setIndexToStringsForReasons(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x8000;
  *(_WORD *)(result + 310) = a2;
  return result;
}

void sub_22A253370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A25355C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::setRevisionMarkDelete(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 8uLL;
  *(_DWORD *)(result + 220) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setIndexToAuthorIDOfRevisionDelete(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x4000;
  *(_WORD *)(result + 306) = a2;
  return result;
}

uint64_t WrdCharacterProperties::getRevisionDeleteReference(WrdCharacterProperties *this)
{
  char *v1;
  unsigned int v2;
  unint64_t v3;

  v2 = *((_DWORD *)&this->var2 + 2);
  v1 = (char *)&this->var2 + 8;
  v3 = v2 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | 0x4000000000;
  *(_DWORD *)v1 = v2;
  *((_WORD *)v1 + 2) = WORD2(v3);
  return *((_QWORD *)v1 + 12);
}

uint64_t WrdCharacterProperties::setIndexToStringsForReasonsOfDeletion(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x10000;
  *(_WORD *)(result + 312) = a2;
  return result;
}

void sub_22A253680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshStroke::isBlipSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C5u);
}

uint64_t EshStroke::getBlipId(EshStroke *this)
{
  return *((unsigned __int16 *)EshOpt::getProperty((uint64_t)this->var2, 0x1C5u) + 4);
}

uint64_t EshStroke::isBlipNameSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C6u);
}

uint64_t EshStroke::isColor2Set(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C2u);
}

uint64_t EshContentProperties::getWrdInline(EshContentProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x53Fu);
}

uint64_t EshContentProperties::getAllowOverlap(EshContentProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x3B6u);
}

void XlScenMan::XlScenMan(XlScenMan *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADE38;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlScenMan *a2)
{
  int v4;
  int v5;
  XlRef *v6;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 11) = v4;
  if (v4)
  {
    v5 = v4;
    do
    {
      v6 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v6, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v6);
      XlCrn::appendOperand(a2, (XlOper *)v6);
      --v5;
    }
    while (v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A253C20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlScenMan::~XlScenMan(XlScenMan *this)
{
  XlScenMan::~XlScenMan(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3ADE38;
  XlRangeProtection::clearRanges((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t XlRangeProtection::clearRanges(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  v3 = *(_QWORD *)(this + 32);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C400EA6A39BLL);
        v2 = *(_QWORD *)(v1 + 24);
        v3 = *(_QWORD *)(v1 + 32);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(_QWORD *)(v1 + 32) = v2;
  return this;
}

void PptTextBookmarkAtom::PptTextBookmarkAtom(PptTextBookmarkAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB350;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB3F8;
}

uint64_t PptTextBookmarkAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 712))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBookmarkAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextBookmarkAtom::~PptTextBookmarkAtom(PptTextBookmarkAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A253F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A253FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A254048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CGColorRef TSUCGColorCreatePatternWithImageAndTransform(CGImage *a1, __int128 *a2)
{
  CGPattern *v2;
  CGColorSpace *Pattern;
  CGColorRef v4;
  CGFloat v6[2];

  v6[1] = *(CGFloat *)MEMORY[0x24BDAC8D0];
  v2 = TSUCGPatternCreateWithImageAndTransform(a1, a2);
  Pattern = CGColorSpaceCreatePattern(0);
  v6[0] = 1.0;
  v4 = CGColorCreateWithPattern(Pattern, v2, v6);
  CGColorSpaceRelease(Pattern);
  CGPatternRelease(v2);
  return v4;
}

CGPatternRef TSUCGPatternCreateWithImageAndTransform(CGImageRef image, __int128 *a2)
{
  uint64_t v4;
  CGFloat v5;
  CGFloat v6;
  size_t Width;
  size_t Height;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGAffineTransform v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CGRect v17;

  if (!image)
  {
    v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGPatternRef TSUCGPatternCreateWithImageAndTransform(CGImageRef, const CGAffineTransform *)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUColorUtils.m"), 244, 0, "can't create an image pattern without an image");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  CGImageRetain(image);
  v5 = *MEMORY[0x24BDBEFB0];
  v6 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
  Width = CGImageGetWidth(image);
  Height = CGImageGetHeight(image);
  if (a2)
  {
    v9 = a2[1];
    v14 = *a2;
    v15 = v9;
    v10 = a2[2];
  }
  else
  {
    v11 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
    v14 = *MEMORY[0x24BDBD8B8];
    v15 = v11;
    v10 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
  }
  v16 = v10;
  v17.size.height = (double)Height;
  v17.size.width = (double)Width;
  *(_OWORD *)&v13.a = v14;
  *(_OWORD *)&v13.c = v15;
  *(_OWORD *)&v13.tx = v10;
  v17.origin.x = v5;
  v17.origin.y = v6;
  return CGPatternCreate(image, v17, &v13, (double)Width, v17.size.height, kCGPatternTilingConstantSpacing, 1, &TSUCGPatternCreateWithImageAndTransform_sCallbacks);
}

void TSUDrawImageAtOriginInContext(CGImage *a1, CGContext *a2)
{
  CGFloat v4;
  CGFloat v5;
  CGFloat Width;
  CGRect v7;

  v4 = *MEMORY[0x24BDBEFB0];
  v5 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
  Width = (double)CGImageGetWidth(a1);
  v7.size.height = (double)CGImageGetHeight(a1);
  v7.origin.x = v4;
  v7.origin.y = v5;
  v7.size.width = Width;
  CGContextDrawImage(a2, v7, a1);
}

uint64_t EshStroke::getDefaultMiterLimit(EshStroke *this)
{
  return 0x80000;
}

void sub_22A254334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2546AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A254854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A254AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A254BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A254C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A254DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A254E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A255094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A255228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A255478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptAnimIterateDataAtom::PptAnimIterateDataAtom(PptAnimIterateDataAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BEA80;
  *(_QWORD *)(v2 + 32) = &unk_24F3BEB28;
}

uint64_t PptAnimIterateDataAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 992))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimIterateDataAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimIterateDataAtom::~PptAnimIterateDataAtom(PptAnimIterateDataAtom *this)
{
  *(_QWORD *)this = &off_24F3BEA80;
  *((_QWORD *)this + 4) = &unk_24F3BEB28;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BEA80;
  *((_QWORD *)this + 4) = &unk_24F3BEB28;
}

void sub_22A25568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A255800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A255A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A255F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2562E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A256514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2567D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A256924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2569B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A256A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A256A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A256E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_22A256FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A257090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2570E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25719C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A257364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A257558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float convertRgbToHsl(float result, float a2, float a3, float *a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v12;
  float v13;

  if (result >= a2)
    v6 = a2;
  else
    v6 = result;
  if (result >= a2)
    v7 = result;
  else
    v7 = a2;
  if (v6 >= a3)
    v8 = a3;
  else
    v8 = v6;
  if (v7 < a3)
    v7 = a3;
  v9 = v7 - v8;
  *a6 = (float)(v7 + v8) * 0.5;
  if ((float)(v7 - v8) == 0.0)
  {
    *a4 = 0.0;
    *a5 = 0.0;
  }
  else
  {
    *a5 = 0.0;
    v10 = *a6;
    if (*a6 > 0.0 && v10 < 1.0)
    {
      if (v10 >= 0.5)
        v12 = (float)(v10 * -2.0) + 2.0;
      else
        v12 = v10 + v10;
      *a5 = v9 / v12;
    }
    *a4 = 0.0;
    if (v9 > 0.0)
    {
      v13 = 0.0;
      if (v7 == result && v7 != a2)
        v13 = (float)((float)(a2 - a3) / v9) + 0.0;
      if (v7 == a2 && v7 != a3)
        v13 = (float)((float)((float)(a3 - result) / v9) + 2.0) + v13;
      if (v7 == a3 && v7 != result)
        v13 = (float)((float)((float)(result - a2) / v9) + 4.0) + v13;
      result = v13 * 60.0;
      *a4 = v13 * 60.0;
    }
  }
  return result;
}

float *convertHslToRgb(float a1, float a2, float a3, float *result, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  float v11;
  float v12;
  double v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  double v22;
  double v23;

  if (a3 == 0.0)
  {
    *a6 = 0.0;
    *a5 = 0.0;
    *result = 0.0;
    return result;
  }
  if (a2 == 0.0)
  {
    *a6 = a3;
    *a5 = a3;
    *result = a3;
    return result;
  }
  v6 = a1 / 360.0;
  v7 = (float)(a2 + a3) - (float)(a3 * a2);
  v8 = (a2 + 1.0) * a3;
  if (a3 <= 0.5)
    v7 = v8;
  v9 = -(v7 - a3 * 2.0);
  v10 = v6;
  v11 = v6 + 0.333333333;
  if (v11 < 0.0)
    v11 = v11 + 1.0;
  if (v11 <= 1.0)
    v12 = v11;
  else
    v12 = v11 + -1.0;
  v13 = v12;
  if (v12 * 6.0 < 1.0)
  {
    v14 = v9 + (float)(v12 * (float)(v7 - v9)) * 6.0;
LABEL_17:
    v15 = v14;
    goto LABEL_18;
  }
  v15 = v7;
  if (v13 + v13 >= 1.0)
  {
    v15 = v9;
    if (v13 * 3.0 < 2.0)
    {
      v14 = v9 + (0.666666667 - v13) * (float)(v7 - v9) * 6.0;
      goto LABEL_17;
    }
  }
LABEL_18:
  *result = v15;
  if (v6 < 0.0)
    v6 = v6 + 1.0;
  if (v6 <= 1.0)
    v16 = v6;
  else
    v16 = v6 + -1.0;
  v17 = v16;
  if (v16 * 6.0 < 1.0)
  {
    v18 = v9 + (float)(v16 * (float)(v7 - v9)) * 6.0;
LABEL_28:
    v19 = v18;
    goto LABEL_29;
  }
  v19 = v7;
  if (v17 + v17 >= 1.0)
  {
    v19 = v9;
    if (v17 * 3.0 < 2.0)
    {
      v18 = v9 + (0.666666667 - v17) * (float)(v7 - v9) * 6.0;
      goto LABEL_28;
    }
  }
LABEL_29:
  *a5 = v19;
  v20 = v10 + -0.333333333;
  if (v20 < 0.0)
    v20 = v20 + 1.0;
  if (v20 <= 1.0)
    v21 = v20;
  else
    v21 = v20 + -1.0;
  v22 = v21;
  if (v21 * 6.0 < 1.0)
  {
    v23 = v9 + (float)(v21 * (float)(v7 - v9)) * 6.0;
LABEL_39:
    v7 = v23;
    goto LABEL_40;
  }
  if (v22 + v22 < 1.0)
  {
LABEL_40:
    *a6 = v7;
    return result;
  }
  if (v22 * 3.0 < 2.0)
  {
    v23 = v9 + (0.666666667 - v22) * (float)(v7 - v9) * 6.0;
    goto LABEL_39;
  }
  *a6 = v9;
  return result;
}

void sub_22A2579FC()
{
  JUMPOUT(0x22A257A0CLL);
}

void sub_22A257A64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A257C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A257CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A257D7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A257DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A257EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A257FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2580C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A258734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  _Unwind_Resume(a1);
}

void sub_22A258A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A258E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, id a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_22A2590D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A259508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A2597A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A25987C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A259DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_22A259F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A25A0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A25A314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A25A3D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25A584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25A624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25A768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A25A8C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getDropCapReference(WrdParagraphProperties *this)
{
  *((_QWORD *)this + 2) |= 0x200uLL;
  return *((_QWORD *)this + 6);
}

WrdParagraphProperties *WrdParagraphProperties::setPageBreakBefore(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x2000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFDF | (32 * (a2 & 1));
  return this;
}

uint64_t WrdCharacterProperties::setShadow(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x100uLL;
  *(_DWORD *)(result + 196) = a2;
  return result;
}

void WrdEshGroup::WrdEshGroup(WrdEshGroup *this)
{
  _QWORD *v1;

  EshGroup::EshGroup(this);
  *v1 = &off_24F3B2F98;
  v1[34] = &unk_24F3B3048;
  v1[46] = 0;
  v1[47] = 0;
}

uint64_t EshTablePropVal<EshComputedRect>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1);
  else
    return 1;
}

uint64_t sub_22A25A9CC()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedRect>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  EshComputedValue *v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::resize((uint64_t *)(a2 + 8), *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = (EshComputedValue *)EshBasicTablePropVal<EshComputedRect>::operator[](a2, v6);
      EshPropValParserVisitor::parseElement(a1, v7);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A25AAAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshPropValParserVisitor::parseElement(uint64_t a1, EshComputedValue *a2)
{
  EshPropValParserVisitor::parseValue(a1, a2, *(unsigned __int16 *)(a1 + 20) >> 2);
  EshPropValParserVisitor::parseValue(a1, a2 + 1, *(unsigned __int16 *)(a1 + 20) >> 2);
  EshPropValParserVisitor::parseValue(a1, a2 + 2, *(unsigned __int16 *)(a1 + 20) >> 2);
  return EshPropValParserVisitor::parseValue(a1, a2 + 3, *(unsigned __int16 *)(a1 + 20) >> 2);
}

double EshShapeProperties::setCoordBottom(EshShapeProperties *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x143u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShadow::getDefaultColor(EshShadow *this, EshColor *a2)
{
  return EshColor::rgb(128, 128, 128, (uint64_t)this);
}

void sub_22A25ACB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t EshGroup::getContentPropertiesReference(EshGroup *this)
{
  return (uint64_t)this + 288;
}

void WrdEshGroup::~WrdEshGroup(WrdEshGroup *this)
{
  WrdEshGroup::~WrdEshGroup(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3B2F98;
  *((_QWORD *)this + 34) = &unk_24F3B3048;
  v2 = *((_QWORD *)this + 46);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 46) = 0;
  v3 = *((_QWORD *)this + 47);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 47) = 0;
  EshGroup::~EshGroup(this);
}

void sub_22A25AF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A25B01C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_22A25B08C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25B134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A25B1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptDateTimeMCAtom::PptDateTimeMCAtom(PptDateTimeMCAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6E78;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6F20;
}

uint64_t PptDateTimeMCAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 80))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptDateTimeMCAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 5))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 3u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptDateTimeMCAtom::~PptDateTimeMCAtom(PptDateTimeMCAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshShapeImageData::getOLEID(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x10Bu);
}

WrdTableProperties *WrdTableProperties::setTableHeader(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x100000u;
  *((_BYTE *)this + 387) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setEmbossed(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x200uLL;
  *(_DWORD *)(result + 200) = a2;
  return result;
}

uint64_t EshRawPropVal::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  else
    return 1;
}

uint64_t EshPropValParserVisitor::visit(EshPropValParserVisitor *this, EshRawPropVal *a2)
{
  int v5;

  EshDataTablePropVal<unsigned char>::resize((uint64_t)a2, *((_DWORD *)this + 4));
  v5 = *((_DWORD *)this + 4);
  (*(void (**)(_QWORD, _QWORD, int *))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), *((_QWORD *)a2 + 1), &v5);
  return 1;
}

void *EshDataTablePropVal<unsigned char>::resize(uint64_t a1, unsigned int a2)
{
  void *result;
  _DWORD *exception;

  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  *(_DWORD *)(a1 + 16) = a2;
  result = operator new[](a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void EshRawPropVal::~EshRawPropVal(EshRawPropVal *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24F39F1D0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24F39F1D0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

uint64_t WrdCharacterProperties::setHyphenationRule(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x4000000000000uLL;
  *(_DWORD *)(result + 144) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setHyphenationChangeCharacter(WrdCharacterProperties *this, unsigned __int8 a2)
{
  *(_QWORD *)&this->var2 |= 0x8000000000000uLL;
  this->var108 = a2;
  return this;
}

void sub_22A25B848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t WrdTableProperties::setWidthOfInvisibleCellAfterUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x40000uLL;
  *(_DWORD *)(result + 144) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setWidthOfInvisibleCellAfter(WrdTableProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x1000000000000000uLL;
  *((_WORD *)this + 171) = a2;
  return this;
}

double WrdTapParser::setBorderBasedOnFlags(WrdTapParser *this, char a2, const WrdBorder *a3, WrdTableCellDescriptor *a4)
{
  uint64_t RightBorderReference;
  double result;
  uint64_t BottomBorderReference;
  uint64_t LeftBorderReference;
  uint64_t TopBorderReference;
  uint64_t DiagonalDownBorderReference;
  uint64_t DiagonalUpBorderReference;

  if ((a2 & 8) != 0)
  {
    RightBorderReference = WrdTableCellDescriptor::getRightBorderReference(a4);
    result = WrdBorder::operator=(RightBorderReference, (uint64_t)a3);
    if ((a2 & 4) == 0)
    {
LABEL_3:
      if ((a2 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a2 & 4) == 0)
  {
    goto LABEL_3;
  }
  BottomBorderReference = WrdTableCellDescriptor::getBottomBorderReference(a4);
  result = WrdBorder::operator=(BottomBorderReference, (uint64_t)a3);
  if ((a2 & 2) == 0)
  {
LABEL_4:
    if ((a2 & 1) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  LeftBorderReference = WrdTableCellDescriptor::getLeftBorderReference(a4);
  result = WrdBorder::operator=(LeftBorderReference, (uint64_t)a3);
  if ((a2 & 1) == 0)
  {
LABEL_5:
    if ((a2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  TopBorderReference = WrdTableCellDescriptor::getTopBorderReference(a4);
  result = WrdBorder::operator=(TopBorderReference, (uint64_t)a3);
  if ((a2 & 0x10) == 0)
  {
LABEL_6:
    if ((a2 & 0x20) == 0)
      return result;
LABEL_13:
    DiagonalUpBorderReference = WrdTableCellDescriptor::getDiagonalUpBorderReference(a4);
    return WrdBorder::operator=(DiagonalUpBorderReference, (uint64_t)a3);
  }
LABEL_12:
  DiagonalDownBorderReference = WrdTableCellDescriptor::getDiagonalDownBorderReference(a4);
  result = WrdBorder::operator=(DiagonalDownBorderReference, (uint64_t)a3);
  if ((a2 & 0x20) != 0)
    goto LABEL_13;
  return result;
}

void sub_22A25BB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

int *WrdCharacterProperties::setHighlightColor97(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 24);
  result = (int *)(a1 + 24);
  *result = v3 | 0x80000;
  result[33] = a2;
  return result;
}

int *WrdCharacterProperties::setHighlighted(WrdCharacterProperties *this, char a2)
{
  int *result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (int *)&this->var2 + 2;
  *result = v3 | 0x100000;
  result[79] = result[79] & 0xFFEFFFFF | ((a2 & 1) << 20);
  return result;
}

uint64_t WrdTableProperties::setTableAlignment(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x40000000000uLL;
  *(_DWORD *)(result + 240) = a2;
  return result;
}

void PptExHyperlinkExtraAtom::PptExHyperlinkExtraAtom(PptExHyperlinkExtraAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B7D98;
  *(_QWORD *)(v2 + 32) = &unk_24F3B7E40;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptExHyperlinkExtraAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 104))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExHyperlinkExtraAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExHyperlinkExtraAtom::~PptExHyperlinkExtraAtom(PptExHyperlinkExtraAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlSheetProtection::XlSheetProtection(XlSheetProtection *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADF78;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 26) = 1;
  *(_BYTE *)(v2 + 30) = 1;
}

uint64_t WrdTableProperties::getTableAutoformatLookSpecifierReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 8uLL;
  return *((_QWORD *)this + 4);
}

uint64_t EshContentProperties::getWrapDistanceTop(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x385u);
}

uint64_t EshContentProperties::getWrapDistanceBottom(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x387u);
}

void sub_22A25C338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A25C49C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlHorizPageBreaks::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 752))(a2, a1);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChart3D *a2)
{
  XlParserVisitor::beginRead(this);
  a2->var2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartBinaryReader::read(uint64_t this, XlChartLegendFrame *a2)
{
  XlParserVisitor **v3;
  XlHeader *v4;
  uint64_t v5;
  int32x4_t *v6;
  int var1;
  XlChartPos *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(int *)(this + 1612) >= 1)
  {
    v3 = (XlParserVisitor **)this;
    v4 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v4);
    v5 = (*((uint64_t (**)(XlParserVisitor **))*v3 + 78))(v3);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((unsigned int *)v3 + 403), 0);
    XlParserVisitor::getHeader(v3[167], v4, *((_BYTE *)v3 + 444));
    v6 = (int32x4_t *)operator new(0x30uLL);
    XlChartLegend::XlChartLegend((XlChartLegend *)v6, v4);
    (*(void (**)(XlParserVisitor *, int32x4_t *))(*(_QWORD *)v3[167] + 2040))(v3[167], v6);
    XlParserVisitor::getHeader(v3[167], v4, *((_BYTE *)v3 + 444));
    if (v4->var1 == 4147)
    {
      while (XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v3, v4))
      {
        var1 = v4->var1;
        switch(var1)
        {
          case 4133:
            v9 = (*((uint64_t (**)(XlParserVisitor **))*v3 + 78))(v3);
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            XlChartBinaryReader::readTextFrame(v3, (XlChartTextFrame *)a2, v10, 0);
            break;
          case 4146:
            v11 = (*((uint64_t (**)(XlParserVisitor **))*v3 + 78))(v3);
            v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
            XlChartBinaryReader::readFrameFormatting(v3, (XlChartFrameType *)a2, v12);
          case 4175:
            XlParserVisitor::skipHeader(v3[167]);
            v8 = (XlChartPos *)operator new(0x28uLL);
            XlChartPos::XlChartPos(v8, v4);
            (*(void (**)(XlParserVisitor *, XlChartPos *))(*(_QWORD *)v3[167] + 2152))(v3[167], v8);
            *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)v8 + 1);
            *((_BYTE *)a2 + 236) = *((unsigned __int16 *)v8 + 17) == 2;
            (*(void (**)(XlChartPos *))(*(_QWORD *)v8 + 8))(v8);
            break;
          default:
            XlParserVisitor::seekNextRecord((uint64_t)v3[167]);
            break;
        }
      }
    }
    *(int8x16_t *)((char *)a2 + 8) = vextq_s8((int8x16_t)vcvtq_f32_s32(v6[1]), (int8x16_t)vcvtq_f32_u32((uint32x4_t)v6[1]), 8uLL);
    *((_QWORD *)a2 + 27) = v6[2].i64[0];
    *((_BYTE *)a2 + 232) = XlChartLegend::isVertical((XlChartLegend *)v6);
    *((_BYTE *)a2 + 233) = XlChartLegend::isAutoPosition((XlChartLegend *)v6);
    *((_BYTE *)a2 + 234) = XlChartLegend::isAutoXPos((XlChartLegend *)v6);
    *((_BYTE *)a2 + 235) = XlChartLegend::isAutoYPos((XlChartLegend *)v6);
    (*(void (**)(int32x4_t *))(v6->i64[0] + 8))(v6);
    JUMPOUT(0x22E2DD408);
  }
  return this;
}

void sub_22A25C820(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void sub_22A25C8A4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  operator delete(v2);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    if (!v0)
      JUMPOUT(0x22A25C884);
    JUMPOUT(0x22A25C86CLL);
  }
  JUMPOUT(0x22A25C868);
}

void sub_22A25C8BC()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A25C8CCLL);
  JUMPOUT(0x22A25C868);
}

void XlChartLegend::XlChartLegend(XlChartLegend *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8920;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 40) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartLegend *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlChartLegend::~XlChartLegend(XlChartLegend *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A25CAE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A25CBCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A25CC90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A25CD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t XlChart3D::isCluster(XlChart3D *this)
{
  return ((unsigned __int16)this->var8 >> 1) & 1;
}

void sub_22A25CFFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t chdShapeTypeFromXlShapeTypeEnum(int a1)
{
  int v1;
  unsigned int v2;
  int v3;
  unsigned int v4;

  if (a1 == 512)
    v1 = 5;
  else
    v1 = a1 == 257;
  if (a1 == 513)
    v2 = 2;
  else
    v2 = v1;
  if (a1 == 256)
    v3 = 4;
  else
    v3 = 0;
  if (a1 == 1)
    v4 = 3;
  else
    v4 = v3;
  if (a1 <= 256)
    return v4;
  else
    return v2;
}

void sub_22A25D174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgRef3DBuffer(unsigned __int16 *result, unsigned int *a2, int *a3, int *a4)
{
  *a2 = -1;
  *a3 = -1;
  *a4 = -1;
  if (result)
  {
    *a2 = *result;
    *a3 = result[1];
    *a4 = *((unsigned __int8 *)result + 4);
  }
  return result;
}

void sub_22A25D250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SsrwOOStorage::getChildType(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  uint64_t result;

  LODWORD(result) = getChildType((uint64_t)this->var0, a2);
  if (result >= 3)
    return 0;
  else
    return result;
}

uint64_t getChildType(uint64_t result, const unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t *TOC;
  int Type;
  uint64_t v6;

  v6 = 0;
  if (result)
  {
    v3 = result;
    result = 0;
    if (a2)
    {
      if (*(_QWORD *)v3)
      {
        if (!*a2 || (*(_DWORD *)(v3 + 32) | 2) != 2)
          return 0;
        TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)v3);
        result = tocGetEntryAtIndex(TOC, *(_DWORD *)(v3 + 8));
        if (!result)
          return result;
        if (!tocFindChildEntry(TOC, result, a2, &v6))
        {
          result = v6;
          if (v6)
          {
            Type = directoryGetType(v6);
            if (Type == 2)
              return 2;
            else
              return Type == 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_22A25DA4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25DAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25E05C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A25E218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A25E2B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25E330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25E3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25E440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A25E5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A25E988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A25EB2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A25EF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A25F188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25F3C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A25F5AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25F7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A25FBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A25FE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A25FF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A260024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2600CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26016C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A26025C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A260474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A26053C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A260674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A2608E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v4;

  _Unwind_Resume(a1);
}

void sub_22A260A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A260CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A260F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2610FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A261264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_22A261690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A2618F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A261A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A261EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{

  _Unwind_Resume(a1);
}

void sub_22A2620D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A262364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A2624B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A262674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2627E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2628B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A262AB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A262C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A262D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A262EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A262FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26314C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2631B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26321C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2633D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A263448()
{
  void *v0;

  JUMPOUT(0x22A263430);
}

void sub_22A26345C()
{
  void *v0;

  JUMPOUT(0x22A263434);
}

void sub_22A263468()
{
  JUMPOUT(0x22A263434);
}

void sub_22A263524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A263614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2636AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A263738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26379C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A26392C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_22A263A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A263AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A263B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A263DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A263E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A264024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A2641FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2642C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A264498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2645C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A26485C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A2649E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A264BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void XlChartDataSeries::takeCachedCustomFormat(XlChartDataSeries *this, XlChartSeriesFormat *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a2)
  {
    v6 = *((_QWORD *)this + 8);
    v4 = (char *)this + 64;
    v5 = v6;
    v7 = (_QWORD *)*((_QWORD *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *((_QWORD *)this + 6);
      v10 = (unint64_t)v7 - v9;
      v11 = (v5 - v9) >> 3;
      v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1)
        v12 = (v10 >> 3) + 1;
      if (v11 >= 0x7FFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        v16 = v15;
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = &v14[v10 & 0x7FFFFFFF8];
      v18 = &v14[8 * v16];
      *(_QWORD *)v17 = a2;
      v8 = v17 + 8;
      v20 = (char *)*((_QWORD *)this + 6);
      v19 = (char *)*((_QWORD *)this + 7);
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*((_QWORD *)this + 6);
      }
      *((_QWORD *)this + 6) = v17;
      *((_QWORD *)this + 7) = v8;
      *((_QWORD *)this + 8) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 7) = v8;
  }
}

void sub_22A264FDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A265058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2650EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *XlChartBinaryReader::setDataPointFormat(uint64_t *this, int a2, int a3)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;

  v3 = this;
  v4 = a3 | (a2 << 16);
  v8 = v4;
  v5 = this[239];
  if (v5)
  {
    this += 238;
    do
    {
      v6 = *(_DWORD *)(v5 + 28);
      if (v4 >= v6)
      {
        if (v6 >= v4)
        {
          v9 = &v8;
          this = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this, &v8, (uint64_t)&std::piecewise_construct, &v9);
          v7 = *((_DWORD *)this + 8);
          goto LABEL_9;
        }
        v5 += 8;
      }
      v5 = *(_QWORD *)v5;
    }
    while (v5);
  }
  v7 = -1;
LABEL_9:
  *((_DWORD *)v3 + 485) = v7;
  return this;
}

void XlChartAlRuns::XlChartAlRuns(XlChartAlRuns *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A82A0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(unsigned __int8 **this, XlChartAlRuns *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v7;

  XlParserVisitor::beginRead((XlParserVisitor *)this);
  v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this[2] + 80))(this[2]);
  v5 = *((_DWORD *)a2 + 2) + *((_DWORD *)this + 18);
  v7 = v5 - (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this[2] + 40))(this[2]);
  XlParserVisitor::getDataAndContinues((XlParserVisitor *)this, &v7);
  XlChartAlRuns::takeRichTextRuns((uint64_t)a2, this[3], v7, v4);
  this[3] = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::getDataAndContinues(XlParserVisitor *this, unsigned int *a2)
{
  return XlParserVisitor::getDataAndContinues(this, a2, -1);
}

uint64_t XlChartAlRuns::getRichTextRun(XlChartAlRuns *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;
  int v5;

  if (*((unsigned __int16 *)this + 12) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v5 = 1004;
    goto LABEL_6;
  }
  v2 = *((_QWORD *)this + 2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v5 = 1003;
LABEL_6:
    *exception = v5;
  }
  return v2 + 4 * a2;
}

void XlChartAlRuns::~XlChartAlRuns(XlChartAlRuns *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A82A0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A82A0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
}

void sub_22A265498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlFormatParser::readTextToken(XlFormatParser *this, XlFmtPtg *a2)
{
  int v4;
  OcText *v5;
  __int16 v6;
  OcText *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  OcText *v11;
  int Character;
  uint64_t v13;
  int v14;
  const unsigned __int8 *v15;
  char isSingleByteEncoding;
  uint64_t v17;

  v4 = *((_DWORD *)this + 6);
  v5 = (OcText *)operator new(0x30uLL);
  OcText::OcText(v5);
  v6 = v4 + 1;
  *((_QWORD *)this + 1) = v5;
  v7 = *(OcText **)this;
  v5->var1 = *(_DWORD *)(*(_QWORD *)this + 8);
  if (v7->var3 > v4 + 1)
  {
    if (OcText::getCharacter(v7, v4 + 1) == 34)
    {
      v6 = v4 + 2;
      v5 = (OcText *)*((_QWORD *)this + 1);
    }
    else
    {
      v8 = 1;
      do
      {
        v9 = v8;
        v10 = v4 + v8 + 1;
        v11 = *(OcText **)this;
        if (*(_QWORD *)this && v11->var3 <= v10)
          break;
        Character = OcText::getCharacter(v11, v10);
        v8 = v9 + 1;
      }
      while (Character != 34);
      v6 = v4 + v9 + 2;
      v5 = (OcText *)*((_QWORD *)this + 1);
      if (v9)
      {
        v13 = *(_QWORD *)(*(_QWORD *)this + 24);
        v14 = *((_DWORD *)this + 6) + 1;
        v15 = (const unsigned __int8 *)(v13
                                      + (v14 << (OcText::isSingleByteEncoding(*(_DWORD *)(*(_QWORD *)this + 8)) ^ 1)));
        isSingleByteEncoding = OcText::isSingleByteEncoding(*(_DWORD *)(*(_QWORD *)this + 8));
        OcText::copyBuffer(v5, v15, v9 << (isSingleByteEncoding ^ 1));
        v5 = (OcText *)*((_QWORD *)this + 1);
        v5->var3 = v9;
      }
    }
  }
  *(_DWORD *)a2 = 60;
  v17 = *((_QWORD *)a2 + 1);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)this + 1) = 0;
  return (unsigned __int16)(v6 - *((_WORD *)this + 12));
}

void sub_22A265644(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OcText::setCharacter(OcText *this, unsigned int a2, __int16 a3)
{
  uint64_t result;
  char *var5;
  _DWORD *exception;
  int v9;

  result = OcText::isSingleByteEncoding(this->var1);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(4uLL);
    v9 = 8005;
LABEL_7:
    *exception = v9;
  }
  var5 = this->var5;
  if (!var5 || this->var3 <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v9 = 1004;
    goto LABEL_7;
  }
  *(_WORD *)&var5[2 * a2] = a3;
  return result;
}

BOOL XlFormatInfo::hasCondition(XlFormatInfo *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2) - v1;
  if ((v2 & 0x7FFFFFFF8) == 0)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)v1 + 11))
    return 1;
  v4 = (v2 >> 3);
  v5 = 1;
  do
  {
    v6 = v5;
    if (v4 == v5)
      break;
    ++v5;
  }
  while (!*(_BYTE *)(*(_QWORD *)(v1 + 8 * v6) + 11));
  return v6 < v4;
}

void sub_22A265850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlChartAttachedLabel::XlChartAttachedLabel(XlChartAttachedLabel *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8360;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartAttachedLabel *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartAttachedLabel::isSmoothedLine(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 3) & 1;
}

uint64_t XlChartAttachedLabel::isShowLabel(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 4) & 1;
}

uint64_t XlChartAttachedLabel::isShowBubbleSizes(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 5) & 1;
}

void XlChartAttachedLabel::~XlChartAttachedLabel(XlChartAttachedLabel *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartBinaryReader::read(uint64_t **this, XlChartTextFrame *a2)
{
  uint64_t *v4;
  unsigned int v6;
  unsigned int *v7;

  v6 = *((unsigned __int16 *)a2 + 108) | (*((unsigned __int16 *)a2 + 110) << 16);
  v7 = &v6;
  v4 = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 228, &v6, (uint64_t)&std::piecewise_construct, &v7);
  return XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, a2, *((unsigned int *)v4 + 8), 1);
}

void XlChartDataSeries::takeCachedCustomLabel(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a2)
  {
    v6 = a1[11];
    v4 = (uint64_t)(a1 + 11);
    v5 = v6;
    v7 = *(_QWORD **)(v4 - 8);
    if ((unint64_t)v7 >= v6)
    {
      v9 = a1[9];
      v10 = (unint64_t)v7 - v9;
      v11 = (v5 - v9) >> 3;
      v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1)
        v12 = (v10 >> 3) + 1;
      if (v11 >= 0x7FFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
        v16 = v15;
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = &v14[v10 & 0x7FFFFFFF8];
      v18 = &v14[8 * v16];
      *(_QWORD *)v17 = a2;
      v8 = v17 + 8;
      v20 = (char *)a1[9];
      v19 = (char *)a1[10];
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)a1[9];
      }
      a1[9] = v17;
      a1[10] = v8;
      a1[11] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    a1[10] = v8;
  }
}

void XlChartPiePlot::XlChartPiePlot(XlChartPiePlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartPie::XlChartPie((XlChartPie *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A9518;
  *((_QWORD *)this + 18) = &unk_24F3A9540;
}

void sub_22A265AC0(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartPie::XlChartPie(XlChartPie *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4121, 6, 0);
  *(_QWORD *)v1 = &off_24F3A8AE8;
  *(_DWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 20) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartPie *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (*((_DWORD *)a2 + 2) >= 6u)
    *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartPiePlot::getChartType(XlChartPiePlot *this)
{
  return 2;
}

void sub_22A265BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A265D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A265DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A265EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2660CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2661B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartPiePlot::~XlChartPiePlot(XlChartPiePlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void XlChartCustomLabelText::~XlChartCustomLabelText(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t XlTxo::setFormula(XlTxo *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 6) = a2;
  *((_WORD *)this + 21) = a3;
  return result;
}

void sub_22A266588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2666E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2669B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A266AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A266B30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A266BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A266C58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A266D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A267060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A267120()
{
  JUMPOUT(0x22A267110);
}

void sub_22A2676A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_22A2678F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A267968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A267DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_22A267F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A268040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2680C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2681B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A268304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A268434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A268660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A26875C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A2688A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A268BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A268D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A268E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A269158(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  void *v7;

  MEMORY[0x22E2DD408](v3, 0x10F3C4088E9AD0ALL);
  if (a2 == 2)
  {
    v6 = objc_begin_catch(a1);
    v7 = (void *)MEMORY[0x24BDBCE70];
    objc_msgSend(v6, "name");
    objc_msgSend(v6, "reason");
    objc_msgSend(v7, "dictionaryWithObjectsAndKeys:", CFSTR("EFSemanticException"));
    objc_end_catch();
    JUMPOUT(0x22A269068);
  }
  objc_begin_catch(a1);
  *(_QWORD *)(v2 + 16) = 0;
  objc_exception_rethrow();
}

void sub_22A26924C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void EFLexer::EFLexer(EFLexer *this, const char *a2)
{
  _QWORD *v2;

  ELexer::ELexer(this, a2);
  *v2 = &unk_24F3B1810;
}

void ELexer::ELexer(ELexer *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;

  v4 = yyFlexLexer::yyFlexLexer((uint64_t)this, 0, 0);
  *(_QWORD *)v4 = off_24F3A7E20;
  *(_DWORD *)(v4 + 28) = 1;
  *(_QWORD *)(v4 + 576) = a2;
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)this + 72));
  std::stringbuf::basic_stringbuf[abi:ne180100](v5, &__p, 8);
  *((_QWORD *)this + 73) = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = operator new();
  v7 = (void *)*((_QWORD *)this + 73);
  v8 = MEMORY[0x24BEDB820];
  *(_QWORD *)(v6 + 16) = MEMORY[0x24BEDB820] + 64;
  *(_QWORD *)v6 = v8 + 24;
  *(_QWORD *)(v6 + 8) = 0;
  std::ios_base::init((std::ios_base *)(v6 + 16), v7);
  *(_QWORD *)(v6 + 152) = 0;
  *(_DWORD *)(v6 + 160) = -1;
  *((_QWORD *)this + 74) = v6;
  v9 = operator new();
  v10 = MEMORY[0x24BEDB828];
  *(_QWORD *)(v9 + 8) = MEMORY[0x24BEDB828] + 64;
  *(_QWORD *)v9 = v10 + 24;
  std::ios_base::init((std::ios_base *)(v9 + 8), 0);
  *(_QWORD *)(v9 + 144) = 0;
  *(_DWORD *)(v9 + 152) = -1;
  *((_QWORD *)this + 75) = v9;
  (*(void (**)(ELexer *, _QWORD, uint64_t))(*(_QWORD *)this + 72))(this, *((_QWORD *)this + 74), v9);
}

void sub_22A2693E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  yyFlexLexer *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v16;
  MEMORY[0x22E2DD3CC](v18);
  MEMORY[0x22E2DD408](v17, 0x10B1C40C9CB012ALL);
  yyFlexLexer::~yyFlexLexer(v15);
  _Unwind_Resume(a1);
}

void yyFlexLexer::yy_flush_buffer(yyFlexLexer *this, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    *(_QWORD *)(a2 + 32) = 0;
    **(_BYTE **)(a2 + 8) = 0;
    *(_BYTE *)(*(_QWORD *)(a2 + 8) + 1) = 0;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 48) = 1;
    *(_DWORD *)(a2 + 64) = 0;
    v2 = *((_QWORD *)this + 54);
    if (v2)
      v2 = *(_QWORD *)(v2 + 8 * *((_QWORD *)this + 52));
    if (v2 == a2)
      yyFlexLexer::yy_load_buffer_state(this);
  }
}

void yyFlexLexer::yy_switch_to_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  yyFlexLexer::yyensure_buffer_stack((yyFlexLexer *)a1);
  v4 = *(_QWORD *)(a1 + 432);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 416);
    v6 = *(_QWORD *)(v4 + 8 * v5);
    if (v6 != a2)
    {
      if (v6)
      {
        **(_BYTE **)(a1 + 392) = *(_BYTE *)(a1 + 376);
        v4 = *(_QWORD *)(a1 + 432);
        v5 = *(_QWORD *)(a1 + 416);
        v7 = *(_QWORD *)(a1 + 384);
        *(_QWORD *)(*(_QWORD *)(v4 + 8 * v5) + 16) = *(_QWORD *)(a1 + 392);
        *(_QWORD *)(*(_QWORD *)(v4 + 8 * v5) + 32) = v7;
      }
      *(_QWORD *)(v4 + 8 * v5) = a2;
      yyFlexLexer::yy_load_buffer_state((yyFlexLexer *)a1);
      *(_DWORD *)(a1 + 408) = 1;
    }
  }
}

double yyFlexLexer::yyensure_buffer_stack(yyFlexLexer *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  double result;
  _QWORD *v8;

  v2 = (void *)*((_QWORD *)this + 54);
  if (v2)
  {
    v3 = *((_QWORD *)this + 53);
    if (*((_QWORD *)this + 52) >= (unint64_t)(v3 - 1))
    {
      v4 = v3 + 8;
      v5 = (char *)malloc_type_realloc(v2, 8 * (v3 + 8), 0xA7BF72DAuLL);
      *((_QWORD *)this + 54) = v5;
      if (!v5)
      {
        (*(void (**)(yyFlexLexer *, const char *))(*(_QWORD *)this + 112))(this, "out of dynamic memory in yyensure_buffer_stack()");
        v5 = (char *)*((_QWORD *)this + 54);
      }
      v6 = &v5[8 * *((_QWORD *)this + 53)];
      result = 0.0;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *(_OWORD *)v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_QWORD *)this + 53) = v4;
    }
  }
  else
  {
    v8 = malloc_type_malloc(8uLL, 0xCCAAE399uLL);
    *((_QWORD *)this + 54) = v8;
    if (!v8)
    {
      (*(void (**)(yyFlexLexer *, const char *))(*(_QWORD *)this + 112))(this, "out of dynamic memory in yyensure_buffer_stack()");
      v8 = (_QWORD *)*((_QWORD *)this + 54);
    }
    *v8 = 0;
    result = 0.0;
    *((_OWORD *)this + 26) = xmmword_22A4BF960;
  }
  return result;
}

uint64_t yyparse(EFormula *a1)
{
  int v1;
  EFRefTok *v2;
  unint64_t v3;
  char *v4;
  __int16 *v5;
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  char *v12;
  int v13;
  int v14;
  EFormula *v15;
  _QWORD *mYylex;
  __int128 v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  unsigned int v24;
  unsigned int v25;
  EFRefTok *v26;
  uint64_t v27;
  void *v28;
  EFormula *v29;
  int v30;
  _WORD *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  id v36;
  EFormula *v37;
  uint64_t v38;
  EFormula *v39;
  char v40;
  int v41;
  id v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  EFTableData *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  EFormula *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  void *v67;
  void *v68;
  int v69;
  int v70;
  uint64_t v71;
  const unsigned __int16 *v72;
  unint64_t v73;
  double v74;
  double *v75;
  id v76;
  __int16 v77;
  int v78;
  void *v79;
  uint64_t v80;
  NSString *v81;
  unsigned int type;
  void *v83;
  __int16 v84;
  EFormula *v85;
  id v86;
  const __CFString *v87;
  __int16 v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  void *v92;
  int v93;
  EFormula *v94;
  NSMutableArray *v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  int v99;
  id v100;
  void *v101;
  int v102;
  uint64_t v103;
  id v104;
  void *v105;
  __int16 v106;
  int v107;
  id v108;
  void *v109;
  __int16 v110;
  int v111;
  EFormula *v112;
  id v113;
  __int16 v114;
  unint64_t v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  void *v119;
  void *v120;
  int v121;
  unsigned __int8 v122;
  __int16 v123;
  __int16 v124;
  void *v125;
  __int16 v126;
  _WORD *v127;
  id v128;
  EFTableData *v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  __int16 v137;
  char v138;
  const EFRefTok *v139;
  id v140;
  EFTableData *v141;
  uint64_t v142;
  __int16 v143;
  __int16 v144;
  uint64_t v145;
  void *v146;
  unsigned __int8 v147;
  const EFRefTok *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  void *v152;
  __int16 v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  id v157;
  EFormula *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  __int16 v164;
  EFormula *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  char *v172;
  uint64_t v173;
  id v174;
  _DWORD *v175;
  void *v176;
  id v177;
  int v178;
  void *v179;
  id v180;
  double v181;
  __int16 *v182;
  int v183;
  int v184;
  uint64_t v185;
  EFRefTok *v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  NSString *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  size_t v195;
  char *v196;
  unint64_t v197;
  NSString *v198;
  NSString *v199;
  unsigned int v200;
  BOOL v201;
  uint64_t v202;
  int v204;
  const char *v205;
  void *v206;
  NSString *v207;
  void *v208;
  const char *v209;
  NSString *v210;
  NSString *v211;
  __int16 *v212;
  id *v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v218;
  uint64_t v219;
  __int16 *v220;
  char *v221;
  unint64_t v222;
  void *v223;
  int v224;
  int v225;
  int v226;
  id v227;
  EFormula *v228;
  EFormula *v229;
  int v230;
  void *__src;
  int v232[2];
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  int v238;
  EFRefTok v239;
  _BYTE v240[400];
  _BYTE v241[128];
  uint64_t v242;

  v229 = (EFormula *)MEMORY[0x24BDAC7A8](a1);
  v232[1] = 0;
  v225 = 0;
  v1 = 0;
  v242 = *MEMORY[0x24BDAC8D0];
  v2 = &v239;
  v3 = 200;
  __src = &v239;
  v4 = v240;
  v5 = (__int16 *)v240;
  v232[0] = -2;
  while (2)
  {
    *(_WORD *)v4 = v1;
    if (&v5[v3 - 1] <= (__int16 *)v4)
    {
      if (v3 >> 5 > 0xC34
        || (2 * v3 >= 0x186A0 ? (v6 = 100000) : (v6 = 2 * v3),
            (v7 = (__int16 *)malloc_type_malloc(42 * v6 + 39, 0x4C849250uLL)) == 0))
      {
        v190 = v241;
LABEL_252:
        v191 = (NSString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "memory exhausted");
        v25 = 0;
        v229->mErrMsg = v191;
        v192 = 2;
        goto LABEL_302;
      }
      v8 = v7;
      v9 = (v4 - (char *)v5) >> 1;
      v10 = v9 + 1;
      memcpy(v7, v5, 2 * (v9 + 1));
      v11 = v6;
      v12 = (char *)&v8[20 * ((2 * (int)v6 + 39) / 0x28u)];
      memcpy(v12, __src, 40 * (v9 + 1));
      if (v5 != (__int16 *)v240)
        free(v5);
      v4 = (char *)&v8[v9];
      v2 = (EFRefTok *)&v12[40 * v10 - 40];
      if (v11 <= v10)
      {
        v25 = 0;
        v192 = 1;
        v190 = v241;
        v5 = v8;
        goto LABEL_302;
      }
      __src = v12;
      v5 = v8;
      v3 = v11;
    }
    v13 = yypact[v1];
    if (v13 == -189)
      goto LABEL_31;
    v14 = v232[0];
    if (v232[0] == -2)
    {
      v15 = v229;
      v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v229->mYylex + 64))(v229->mYylex);
      mYylex = v15->mYylex;
      v227 = (id)mYylex[65];
      v17 = *((_OWORD *)mYylex + 34);
      v235 = *((_OWORD *)mYylex + 33);
      v236 = v17;
    }
    if (v14 < 1)
    {
      *(_QWORD *)v232 = 0;
    }
    else
    {
      v232[0] = v14;
      v18 = v14 > 0x130 ? 2 : yytranslate[v14];
      v232[1] = v18;
    }
    v19 = (v232[1] + v13);
    if (v19 > 0x14F || v232[1] != yycheck[v19])
    {
LABEL_31:
      v24 = yydefact[v1];
      if (!yydefact[v1])
        goto LABEL_253;
    }
    else
    {
      v20 = yytable[v19];
      if (v20 > 0)
      {
        if ((_DWORD)v19 != 44)
        {
          v21 = v225 - 1;
          if (!v225)
            v21 = 0;
          v225 = v21;
          if (v232[0])
            v22 = -2;
          else
            v22 = 0;
          v232[0] = v22;
          *(_QWORD *)&v2[2].type = v227;
          v2 += 2;
          v23 = v236;
          *(_OWORD *)v2->data = v235;
          *(_OWORD *)&v2[1].dataSize = v23;
          goto LABEL_250;
        }
        v25 = 0;
        v192 = 0;
        goto LABEL_301;
      }
      if (!yytable[v19])
      {
LABEL_253:
        if (v225 == 3)
        {
          if (v232[0] <= 0)
          {
            v190 = v241;
            if (!v232[0])
            {
              v25 = 0;
              v192 = 1;
              goto LABEL_307;
            }
          }
          else
          {
            v232[0] = -2;
            v190 = v241;
            if ((v232[1] - 51) <= 0x25 && ((1 << (LOBYTE(v232[1]) - 51)) & 0x3D2059F6CFLL) != 0)
            {

              v232[0] = -2;
            }
          }
        }
        else if (v225)
        {
          v190 = v241;
        }
        else
        {
          v193 = yysyntax_error(0, v1, v232[0]);
          v194 = v193;
          v190 = v241;
          if ((unint64_t)v193 < 0x81)
          {
            v197 = 128;
          }
          else
          {
            if (v193 < 0)
              v195 = -1;
            else
              v195 = 2 * v193;
            v196 = (char *)malloc_type_malloc(v195, 0x7E5807D3uLL);
            v197 = 128;
            if (v196)
            {
              v197 = v195;
              v190 = v196;
            }
          }
          if (v194 - 1 >= v197)
          {
            v199 = (NSString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "syntax error");
            v229->mErrMsg = v199;
            if (v194)
              goto LABEL_252;
          }
          else
          {
            yysyntax_error(v190, v1, v232[0]);
            v198 = (NSString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v190);
            v229->mErrMsg = v198;
          }
        }
        while (v4 != (char *)v5)
        {
          v200 = yystos[v1] - 51;
          v201 = v200 > 0x25;
          v202 = (1 << v200) & 0x3D2059F6CFLL;
          if (!v201 && v202 != 0)

          v2 -= 2;
          v204 = *((__int16 *)v4 - 1);
          v4 -= 2;
          v1 = v204;
        }
        v25 = 0;
        v192 = 1;
        v4 = (char *)v5;
        goto LABEL_302;
      }
      v24 = -v20;
    }
    v25 = yyr2[v24];
    v26 = &v2[-2 * yyr2[v24]];
    v27 = *(_QWORD *)&v26[2].type;
    v28 = (void *)*(unsigned __int16 *)v26[2].data;
    v29 = (EFormula *)*(unsigned __int16 *)&v26[2].data[2];
    v30 = *(unsigned __int16 *)&v26[2].data[4];
    LODWORD(v31) = *(unsigned __int16 *)&v26[2].data[6];
    v32 = *(_DWORD *)&v26[2].data[8];
    v33 = *(_OWORD *)&v26[3].type;
    v238 = *(_DWORD *)&v26[3].data[8];
    v237 = v33;
    switch(v24)
    {
      case 2u:
        v27 = *(_QWORD *)&v2->type;
        v76 = *(id *)&v2->type;
        v224 = (int)v31;
        v228 = v29;
        v77 = v30;
        v78 = v32;
        -[EFormula setFormula:](v229, "setFormula:", v76);
        v32 = v78;
        LOWORD(v30) = v77;
        LOWORD(v29) = (_WORD)v228;
        goto LABEL_209;
      case 3u:
      case 0x2Au:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 16;
        goto LABEL_122;
      case 4u:
      case 0x14u:
      case 0x16u:
      case 0x19u:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x2Bu:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x5Fu:
      case 0x65u:
      case 0x66u:
      case 0x6Cu:
        goto LABEL_33;
      case 5u:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 11;
        goto LABEL_122;
      case 6u:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 14;
        goto LABEL_122;
      case 7u:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 9;
        goto LABEL_122;
      case 8u:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 10;
        goto LABEL_122;
      case 9u:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 13;
        goto LABEL_122;
      case 0xAu:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 12;
        goto LABEL_122;
      case 0xBu:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 8;
        goto LABEL_122;
      case 0xCu:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 3;
        goto LABEL_122;
      case 0xDu:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 4;
        goto LABEL_122;
      case 0xEu:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 5;
        goto LABEL_122;
      case 0xFu:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 6;
        goto LABEL_122;
      case 0x10u:
        v35 = *(void **)&v2[-6].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
        v38 = 7;
        goto LABEL_122;
      case 0x11u:
        v226 = v32;
        v230 = v30;
        v27 = *(_QWORD *)&v2[-2].type;
        if (!v27)
          v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
        v79 = (void *)v27;
        v80 = 20;
        goto LABEL_108;
      case 0x12u:
        v226 = v32;
        v230 = v30;
        v27 = *(_QWORD *)&v2->type;
        if (!*(_QWORD *)&v2->type)
          v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
        v79 = (void *)v27;
        v80 = 19;
        goto LABEL_108;
      case 0x13u:
        v226 = v32;
        v230 = v30;
        v27 = *(_QWORD *)&v2->type;
        if (!*(_QWORD *)&v2->type)
          v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
        v79 = (void *)v27;
        v80 = 18;
LABEL_108:
        objc_msgSend(v79, "addToken:extendedDataLength:", v80, 0);
        goto LABEL_244;
      case 0x15u:
        v81 = *(NSString **)&v2[-2].type;
        goto LABEL_220;
      case 0x17u:
        v43 = *(double *)&v2[-2].type;
        goto LABEL_218;
      case 0x18u:
        type = v2[-2].type;
        v230 = v30;
        v41 = v32;
        v42 = intTokens(v229, type);
        goto LABEL_221;
      case 0x1Au:
        v226 = v32;
        v230 = v30;
        v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
        if (objc_msgSend(*(id *)&v2[-2].type, "compare:", CFSTR("#NULL!")))
        {
          if (objc_msgSend(*(id *)&v2[-2].type, "compare:", CFSTR("#DIV/0!")))
          {
            if (objc_msgSend(*(id *)&v2[-2].type, "compare:", CFSTR("#VALUE!")))
            {
              if (objc_msgSend(*(id *)&v2[-2].type, "compare:", CFSTR("#REF!")))
              {
                if (objc_msgSend(*(id *)&v2[-2].type, "compare:", CFSTR("#NAME?")))
                {
                  if (objc_msgSend(*(id *)&v2[-2].type, "compare:", CFSTR("#NUM!")))
                  {
                    objc_msgSend(*(id *)&v2[-2].type, "compare:", CFSTR("#N/A"));
                    v83 = (void *)v27;
                    v84 = 42;
                  }
                  else
                  {
                    v83 = (void *)v27;
                    v84 = 36;
                  }
                }
                else
                {
                  v83 = (void *)v27;
                  v84 = 29;
                }
              }
              else
              {
                v83 = (void *)v27;
                v84 = 23;
              }
            }
            else
            {
              v83 = (void *)v27;
              v84 = 15;
            }
          }
          else
          {
            v83 = (void *)v27;
            v84 = 7;
          }
        }
        else
        {
          v83 = (void *)v27;
          v84 = 0;
        }
        addErrorToken(v83, v84);
        goto LABEL_244;
      case 0x1Bu:
      case 0x5Au:
        goto LABEL_191;
      case 0x1Cu:
      case 0x4Cu:
        goto LABEL_204;
      case 0x1Du:
        v27 = v27 & 0xFFFFFFFF00000000 | 0x11;
        goto LABEL_246;
      case 0x1Eu:
        v27 = v27 & 0xFFFFFFFF00000000 | 0xF;
        goto LABEL_246;
      case 0x1Fu:
        v38 = v2[-2].type;
        v35 = *(void **)&v2[-4].type;
        v36 = *(id *)&v2->type;
        v37 = v229;
LABEL_122:
        v230 = v30;
        v41 = v32;
        v42 = operatorTokens(v37, v38, v35, v36);
        goto LABEL_221;
      case 0x24u:
      case 0x73u:
        v39 = v229;
        v40 = 1;
        goto LABEL_42;
      case 0x25u:
        v85 = v229;
        v230 = v30;
        v226 = v32;
        v86 = -[EFormula formulaHelper](v229, "formulaHelper");
        v87 = CFSTR("TRUE");
        goto LABEL_125;
      case 0x26u:
      case 0x74u:
        v39 = v229;
        v40 = 0;
LABEL_42:
        v230 = v30;
        v41 = v32;
        v42 = BOOLTokens(v39, v40);
        goto LABEL_221;
      case 0x27u:
        v85 = v229;
        v230 = v30;
        v226 = v32;
        v86 = -[EFormula formulaHelper](v229, "formulaHelper");
        v87 = CFSTR("FALSE");
LABEL_125:
        v88 = objc_msgSend(v86, "resolveFunctionName:", v87);
        v224 = (int)v31;
        v89 = (__int16)v28;
        v28 = (void *)v3;
        v90 = v88;
        v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v85, "formulaClass"));
        v91 = v90;
        v3 = (unint64_t)v28;
        LOWORD(v28) = v89;
        LOWORD(v31) = v224;
        addFunction((void *)v27, v91, 0);
        goto LABEL_188;
      case 0x29u:
        v92 = *(void **)&v2[-4].type;
        v230 = v30;
        v93 = v32;
        objc_msgSend(v92, "addToken:extendedDataLength:", 21, 0);
        v32 = v93;
        LOWORD(v30) = v230;
        v27 = *(_QWORD *)&v2[-4].type;
        goto LABEL_246;
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x4Bu:
        v27 = *(_QWORD *)&v2[-2].type;
        goto LABEL_35;
      case 0x31u:
        v226 = v32;
        v224 = (int)v31;
        v230 = v30;
        v222 = v3;
        v223 = v28;
        v94 = v229;
        v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
        v95 = *(NSMutableArray **)&v2[-4].type;
        v221 = (char *)-[NSMutableArray count](v95, "count");
        v96 = *(_QWORD *)&v2[-8].type;
        v97 = objc_msgSend(-[EFormula formulaHelper](v94, "formulaHelper"), "resolveFunctionName:", v96);
        if (v97 == 255)
        {
          v233 = -1;
          v234 = -1;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "workbook"), "resources"), "links"), "addOrEquivalentExternalAddInName:linkReferenceIndex:nameIndex:", v96, &v234, &v233);
          v98 = objc_msgSend((id)v27, "addToken:extendedDataLength:", 57, 6);
          *(_WORD *)v98 = v234;
          *(_DWORD *)(v98 + 2) = (unsigned __int16)v233;
          ++v221;
        }
        v99 = XlArgumentCountForFunction(v97);
        v100 = args(v95);
        v101 = v100;
        v228 = v29;
        LODWORD(v220) = v97;
        if (v100)
        {
          if (objc_msgSend(v100, "tokenCount"))
          {
            v102 = objc_msgSend(v101, "tokenTypeAtIndex:", 0);
            if (v99 <= 0 && v221 == (char *)1 && v102 == 22)
            {
              v103 = -1;
LABEL_229:
              v3 = v222;

              if (v99 == -1)
                addVariableFunction((void *)v27, (__int16)v220, (uint64_t)&v221[v103]);
              else
                addFunction((void *)v27, (__int16)v220, (uint64_t)v221);
              goto LABEL_198;
            }
          }
        }
        if (v99 < 0 || v99 == (_DWORD)v221)
        {
          v182 = v5;
          v183 = objc_msgSend(v101, "tokenCount");
          if (v183)
          {
            v184 = v183;
            v185 = 0;
            do
            {
              objc_msgSend((id)v27, "copyTokenAtIndex:fromFormula:", v185, v101);
              v185 = (v185 + 1);
            }
            while (v184 != (_DWORD)v185);
          }
          v103 = 0;
          v5 = v182;
          goto LABEL_229;
        }
        v210 = (NSString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Invalid number of parameters for function!");
        v229->mErrMsg = v210;

        goto LABEL_300;
      case 0x32u:
        v27 = *(_QWORD *)&v2[-6].type;
        if (!v27)
          goto LABEL_246;
        v224 = (int)v31;
        v223 = v28;
        v28 = (void *)v3;
        v104 = *(id *)&v2->type;
        if (*(_QWORD *)&v2->type)
        {
          v105 = (void *)v27;
          v106 = v30;
          v107 = v32;
          objc_msgSend(v105, "addObject:", *(_QWORD *)&v2->type);

          v32 = v107;
          LOWORD(v30) = v106;
          v27 = *(_QWORD *)&v2[-6].type;
        }
        goto LABEL_141;
      case 0x33u:
        v27 = *(_QWORD *)&v2[-4].type;
        if (!v27)
          goto LABEL_246;
        v224 = (int)v31;
        v223 = v28;
        v28 = (void *)v3;
        v108 = *(id *)&v2->type;
        if (*(_QWORD *)&v2->type)
        {
          v109 = (void *)v27;
          v110 = v30;
          v111 = v32;
          objc_msgSend(v109, "addObject:", *(_QWORD *)&v2->type);

          v32 = v111;
          LOWORD(v30) = v110;
          v27 = *(_QWORD *)&v2[-4].type;
        }
LABEL_141:
        v3 = (unint64_t)v28;
        LOWORD(v28) = (_WORD)v223;
        goto LABEL_209;
      case 0x34u:
      case 0x35u:
      case 0x6Au:
        v228 = v29;
        v230 = v30;
        LODWORD(v29) = v32;
        v27 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithObjects:", *(_QWORD *)&v2->type, 0);

        goto LABEL_143;
      case 0x36u:
        v228 = v29;
        v230 = v30;
        LODWORD(v29) = v32;
        v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
        objc_msgSend((id)v27, "addToken:extendedDataLength:", 22, 0);
LABEL_143:
        v32 = (int)v29;
        LOWORD(v30) = v230;
        LOWORD(v29) = (_WORD)v228;
        goto LABEL_246;
      case 0x3Cu:
        v230 = v30;
        v41 = v32;
        v42 = refTokens(v229, v2);
        goto LABEL_221;
      case 0x3Du:
        v112 = v229;
        v228 = v29;
        v230 = v30;
        LODWORD(v29) = v32;
        v113 = refTokens(v229, v2 - 6);
        v42 = operatorTokens(v112, 17, v113, *(void **)&v2->type);
        goto LABEL_146;
      case 0x3Eu:
        LOWORD(v28) = 0;
        v30 = *(_DWORD *)&v2[-10].data[8] | (LOBYTE(v2[-9].dataSize) << 14);
        LODWORD(v31) = *(_DWORD *)&v2[-2].data[8] | (LOBYTE(v2[-1].dataSize) << 14);
        LOWORD(v29) = -1;
        goto LABEL_155;
      case 0x3Fu:
        LOWORD(v28) = LOWORD(v2[-10].type) - 1;
        LOWORD(v29) = LOWORD(v2[-2].type) - 1;
        LOWORD(v30) = 0x8000;
        LOWORD(v31) = -32513;
        goto LABEL_155;
      case 0x40u:
        LODWORD(v28) = v2[-9].type;
        LODWORD(v29) = v2[-1].type;
        if (BYTE1(v2[-9].dataSize))
          LOWORD(v30) = 0x8000;
        else
          LOWORD(v30) = 0;
        if (BYTE1(v2[-1].dataSize))
          LOWORD(v31) = 0x8000;
        else
          LOWORD(v31) = 255;
LABEL_155:
        v27 = 0x800000025;
        goto LABEL_246;
      case 0x41u:
        LOWORD(v28) = *(_WORD *)v2[-6].data;
        LOWORD(v29) = *(_WORD *)v2->data;
        LOWORD(v30) = *(_WORD *)&v2[-6].data[2];
        v27 = 0x800000025;
        LOWORD(v31) = *(_WORD *)&v2->data[2];
        goto LABEL_246;
      case 0x42u:
        v27 = *(_QWORD *)&v2->type;
        LOWORD(v28) = *(_WORD *)v2->data;
        LOWORD(v29) = *(_WORD *)&v2->data[2];
        LOWORD(v30) = *(_WORD *)&v2->data[4];
        LOWORD(v31) = *(_WORD *)&v2->data[6];
        v32 = *(_DWORD *)&v2->data[8];
        goto LABEL_246;
      case 0x43u:
        v226 = v32;
        v114 = v30;
        v115 = objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "resolveName:", *(_QWORD *)&v2[-2].type);
        if (v115 != -1)
        {
          LOWORD(v28) = v115;
          v27 = 0x400000023;
          LOWORD(v30) = v114;
          v29 = (EFormula *)(v115 >> 16);
          goto LABEL_245;
        }
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "Column followed by no TOK_COLON or TOK_LPAREN.";
        goto LABEL_299;
      case 0x44u:
        LODWORD(v28) = v2[-1].type;
        if ((int)v28 < 500001 && *(int *)&v2[-2].data[8] < 500001)
        {
          LOWORD(v29) = *(_DWORD *)&v2[-2].data[8] | (unsigned __int16)(BYTE1(v2[-1].dataSize) << 15) | (LOBYTE(v2[-1].dataSize) << 14);
          v27 = 0x400000024;
          goto LABEL_246;
        }
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "Reference out of bounds!";
        goto LABEL_299;
      case 0x45u:
        v116 = *(_QWORD *)&v2[-7].dataSize;
        if (v116 != -1)
          goto LABEL_201;
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "label! but label is not a sheet name.";
        goto LABEL_299;
      case 0x46u:
        v223 = v28;
        v28 = (void *)v3;
        v55 = *(_QWORD *)&v2[-2].data[8];
        if (v55 != -1)
        {
          v226 = v32;
          v230 = v30;
          v56 = *(_QWORD *)&v2[-9].dataSize;
          if (v56 == -1 || v2[-9].data[4])
            goto LABEL_168;
          v58 = *(_QWORD *)&v2[-4].data[8];
          v57 = v229;
          goto LABEL_237;
        }
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "\"sheet!label\" but label is not a local name.";
        goto LABEL_299;
      case 0x47u:
        if (*(_QWORD *)&v2[-7].dataSize != -1)
          goto LABEL_33;
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "\"label!...\" but label is not a sheet name.";
        goto LABEL_299;
      case 0x48u:
        v224 = (int)v31;
        v117 = (__int16)v28;
        v28 = (void *)v3;
        v118 = *(_QWORD *)&v2[-2].data[8];
        if (v118 != -1)
          goto LABEL_208;
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "simple \"label\" but label is not a local name.";
        goto LABEL_299;
      case 0x49u:
        if (*(_QWORD *)&v2[-15].dataSize == -1 || *(_QWORD *)&v2[-7].dataSize == -1)
        {
          v208 = (void *)MEMORY[0x24BDD17C8];
          v209 = "\"label:label!...\" but one of label is not a sheet name.";
        }
        else
        {
          if (v2->type)
          {
            v44 = *(_QWORD *)&v2[-16].type;
            v45 = *(_QWORD *)&v2[-8].type;
            v228 = v29;
            v230 = v30;
            LODWORD(v29) = v32;
            v42 = link3DTokens(v229, -[EFormula resolveFirstSheet:lastSheet:](v229, "resolveFirstSheet:lastSheet:", v44, v45), v2);
LABEL_146:
            v32 = (int)v29;
            LOWORD(v30) = v230;
            LOWORD(v29) = (_WORD)v228;
LABEL_222:
            v27 = (uint64_t)v42;
            goto LABEL_246;
          }
LABEL_285:
          v208 = (void *)MEMORY[0x24BDD17C8];
          v209 = "3d reference not supported.";
        }
        goto LABEL_299;
      case 0x4Au:
        v27 = *(_QWORD *)&v2[-2].type;
        goto LABEL_246;
      case 0x4Du:
        if (!*(_QWORD *)&v2[-2].type)
        {
LABEL_33:
          v27 = *(_QWORD *)&v2->type;
          goto LABEL_246;
        }
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "should not have table name at all!";
        goto LABEL_299;
      case 0x4Eu:
        if (*(_DWORD *)v2[-4].data == 278)
        {
          v222 = v3;
          v119 = *(void **)&v2[-3].dataSize;
          v221 = *(char **)&v2[-4].data[8];
          v230 = v30;
          v226 = v32;
          v120 = (void *)objc_msgSend(v119, "tableRange");
          v223 = v28;
          v28 = v120;
          v121 = objc_msgSend(v120, "firstRow");
          v219 = objc_msgSend(v119, "headerRowCount") + v121;
          LOWORD(v121) = objc_msgSend(v28, "lastRow");
          LOWORD(v119) = v121 - objc_msgSend(v119, "totalsRowCount");
          v122 = objc_msgSend(v28, "firstColumn");
          v220 = v5;
          v224 = (int)v31;
          v123 = (__int16)v29;
          v124 = v122 | 0xC000;
          v125 = v28;
          LOWORD(v28) = (_WORD)v223;
          v126 = objc_msgSend(v125, "lastColumn") | 0xC000;
          v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
          v127 = (_WORD *)objc_msgSend((id)v27, "addToken:extendedDataLength:", 59, 10);
          v32 = v226;
          LOWORD(v30) = v230;
          *v127 = (_WORD)v221;
          v127[1] = v219;
          v127[2] = (_WORD)v119;
          v3 = v222;
          v127[3] = v124;
          LOWORD(v29) = v123;
          LOWORD(v31) = v224;
          v127[4] = v126;
          v5 = v220;
          goto LABEL_246;
        }
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "type must be TOK_TABLE_NAME";
        goto LABEL_299;
      case 0x4Fu:
        v226 = v32;
        v230 = v30;
        v222 = v3;
        if (!*(_QWORD *)&v2[-6].type)
        {
          v234 = -1;
          v128 = -[EFormula resolveTable:sheetIndex:](v229, "resolveTable:sheetIndex:", "", &v234);
          *(_QWORD *)&v2[-5].dataSize = v128;
          *(_QWORD *)&v2[-6].data[8] = v234;
          if (!v128)
            goto LABEL_298;
        }
        v224 = (int)v31;
        v228 = v29;
        v223 = v28;
        v129 = -[EFTableData initWith:]([EFTableData alloc], "initWith:", &v2[-6]);
        v130 = -[EFTableData reference](v129, "reference");
        v131 = -[EFTableData table](v129, "table");
        v132 = -[EFTableData ptgData](v129, "ptgData");
        v133 = objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "resolveTableColumn:columnName:", v131, *(_QWORD *)&v2[-2].type);
        if (v133 == -1)
          goto LABEL_287;
        v134 = v133;
        v135 = objc_msgSend(v130, "firstRow");
        v220 = v5;
        *(_WORD *)(v132 + 2) = objc_msgSend(v131, "headerRowCount") + v135;
        v136 = objc_msgSend(v130, "lastRow");
        v137 = v136 - objc_msgSend(v131, "totalsRowCount");
        v5 = v220;
        *(_WORD *)(v132 + 4) = v137;
        *(_WORD *)(v132 + 6) = v134 + objc_msgSend(v130, "firstColumn");
        v138 = objc_msgSend(v130, "firstColumn");
        *(_BYTE *)(v132 + 7) = -64;
        *(_WORD *)(v132 + 8) = (v134 + v138) | 0xC000;
        v139 = -[EFTableData refTok](v129, "refTok");
        v27 = (uint64_t)refTokens(v229, v139);

        goto LABEL_197;
      case 0x50u:
        v226 = v32;
        v230 = v30;
        v222 = v3;
        if (*(_QWORD *)&v2[-6].type
          || (v234 = -1,
              v140 = -[EFormula resolveTable:sheetIndex:](v229, "resolveTable:sheetIndex:", "", &v234),
              *(_QWORD *)&v2[-5].dataSize = v140,
              *(_QWORD *)&v2[-6].data[8] = v234,
              v140))
        {
          v141 = -[EFTableData initWith:]([EFTableData alloc], "initWith:", &v2[-6]);
          v142 = -[EFTableData reference](v141, "reference");
          v228 = v29;
          v143 = (__int16)v31;
          v144 = (__int16)v28;
          v28 = (void *)v142;
          v145 = -[EFTableData ptgData](v141, "ptgData");
          -[EFTableData makeup:with:](v141, "makeup:with:", *(_QWORD *)&v2[-2].type, objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "rowNumber"));
          *(_WORD *)(v145 + 6) = objc_msgSend(v28, "firstColumn");
          v146 = v28;
          LOWORD(v28) = v144;
          LOWORD(v31) = v143;
          LOWORD(v29) = (_WORD)v228;
          v147 = objc_msgSend(v146, "lastColumn");
          *(_BYTE *)(v145 + 7) = -64;
          *(_WORD *)(v145 + 8) = v147 | 0xC000;
          v148 = -[EFTableData refTok](v141, "refTok");
          v27 = (uint64_t)refTokens(v229, v148);

LABEL_185:
          v3 = v222;
LABEL_244:
          LOWORD(v30) = v230;
          goto LABEL_245;
        }
LABEL_298:
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "cell is not in a table!";
        goto LABEL_299;
      case 0x51u:
        v226 = v32;
        v230 = v30;
        v222 = v3;
        v220 = v5;
        if (!*(_QWORD *)&v2[-2].type)
        {
          v234 = -1;
          v46 = -[EFormula resolveTable:sheetIndex:](v229, "resolveTable:sheetIndex:", "", &v234);
          *(_QWORD *)&v2[-1].dataSize = v46;
          *(_QWORD *)&v2[-2].data[8] = v234;
          if (!v46)
          {
            v206 = (void *)MEMORY[0x24BDD17C8];
            v205 = "cell is not in a table!";
            goto LABEL_283;
          }
        }
        v47 = -[EFTableData initWith:]([EFTableData alloc], "initWith:", &v2[-2]);
        v48 = -[EFTableData reference](v47, "reference");
        v223 = v28;
        v28 = (void *)v48;
        v49 = -[EFTableData table](v47, "table");
        v228 = v29;
        v29 = (EFormula *)v49;
        v50 = -[EFTableData ptgData](v47, "ptgData");
        v224 = (int)v31;
        v31 = (_WORD *)v50;
        v51 = objc_msgSend(v28, "firstRow");
        v31[1] = -[EFormula headerRowCount](v29, "headerRowCount") + v51;
        v52 = objc_msgSend(v28, "lastRow");
        v53 = v29;
        LOWORD(v29) = (_WORD)v228;
        v31[2] = v52 - objc_msgSend(v53, "totalsRowCount");
        v31[3] = objc_msgSend(v28, "firstColumn");
        v54 = v28;
        LOWORD(v28) = (_WORD)v223;
        v31[4] = objc_msgSend(v54, "lastColumn");
        LOWORD(v31) = v224;
        -[EFormula setTableData:](v229, "setTableData:", v47);

        v5 = v220;
        goto LABEL_185;
      case 0x52u:
        v228 = v29;
        v29 = v229;
        v230 = v30;
        v226 = v32;
        v149 = objc_msgSend(-[EFormula tableData](v229, "tableData"), "ptgData");
        *(_BYTE *)(v149 + 7) = -64;
        *(_BYTE *)(v149 + 9) = -64;
        v27 = (uint64_t)refTokens(v29, (const EFRefTok *)objc_msgSend(-[EFormula tableData](v29, "tableData"), "refTok"));
        v150 = v29;
        LOWORD(v29) = (_WORD)v228;
        objc_msgSend(v150, "setTableData:", 0);
        goto LABEL_188;
      case 0x58u:
        v228 = v29;
        v29 = v229;
        v230 = v30;
        v226 = v32;
        v151 = objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "rowNumber");
        v152 = v29;
        LOWORD(v29) = (_WORD)v228;
        v224 = (int)v31;
        v153 = (__int16)v28;
        v28 = (void *)v3;
        v154 = v151;
        v155 = (void *)objc_msgSend(v152, "tableData");
        v156 = v154;
        v3 = (unint64_t)v28;
        LOWORD(v28) = v153;
        LOWORD(v31) = v224;
        objc_msgSend(v155, "makeup:with:", *(_QWORD *)&v2[-2].type, v156);
LABEL_188:
        v32 = v226;
        LOWORD(v30) = v230;
        goto LABEL_246;
      case 0x59u:
        if (*(_QWORD *)&v2[-2].type)
        {
          v157 = *(id *)&v2->type;
          v218 = *(_QWORD *)&v2[-2].type;
          v27 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@"), v218, v157);
          *(_QWORD *)&v2[-2].type = v27;
LABEL_35:
          LOWORD(v28) = *(_WORD *)v2[-2].data;
          LOWORD(v29) = *(_WORD *)&v2[-2].data[2];
          LOWORD(v30) = *(_WORD *)&v2[-2].data[4];
          LOWORD(v31) = *(_WORD *)&v2[-2].data[6];
          v32 = *(_DWORD *)&v2[-2].data[8];
          v34 = *(_OWORD *)&v2[-1].type;
          v238 = *(_DWORD *)&v2[-1].data[8];
          v237 = v34;
        }
        else
        {
LABEL_191:
          v27 = *(_QWORD *)&v2->type;
          LOWORD(v28) = *(_WORD *)v2->data;
          LOWORD(v29) = *(_WORD *)&v2->data[2];
          LOWORD(v30) = *(_WORD *)&v2->data[4];
          LOWORD(v31) = *(_WORD *)&v2->data[6];
          v32 = *(_DWORD *)&v2->data[8];
          v237 = *(_OWORD *)&v2[1].type;
          v238 = *(_DWORD *)&v2[1].data[8];
        }
        goto LABEL_246;
      case 0x5Bu:
        v226 = v32;
        v224 = (int)v31;
        v228 = v29;
        v230 = v30;
        v222 = v3;
        v223 = v28;
        v158 = v229;
        v221 = (char *)objc_msgSend(-[EFormula tableData](v229, "tableData"), "table");
        v159 = (void *)objc_msgSend(-[EFormula tableData](v158, "tableData"), "reference");
        v160 = objc_msgSend(-[EFormula tableData](v158, "tableData"), "ptgData");
        v161 = *(_QWORD *)&v2[-2].type;
        v162 = -[EFormula formulaHelper](v158, "formulaHelper");
        v163 = objc_msgSend(v162, "resolveTableColumn:columnName:", v221, v161);
        if (v163 != -1)
        {
          v164 = v163;
          *(_WORD *)(v160 + 6) = v163 + objc_msgSend(v159, "firstColumn");
          *(_WORD *)(v160 + 8) = v164 + objc_msgSend(v159, "firstColumn");
LABEL_197:
          v3 = v222;
LABEL_198:
          LOWORD(v28) = (_WORD)v223;
          LOWORD(v30) = v230;
          LOWORD(v29) = (_WORD)v228;
          goto LABEL_199;
        }
LABEL_287:
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "column name in a table could not be resolved!";
LABEL_299:
        v211 = (NSString *)objc_msgSend(v208, "stringWithUTF8String:", v209);
        v229->mErrMsg = v211;
        goto LABEL_300;
      case 0x5Cu:
        v226 = v32;
        v224 = (int)v31;
        v228 = v29;
        v230 = v30;
        v222 = v3;
        v223 = v28;
        v165 = v229;
        v166 = objc_msgSend(-[EFormula tableData](v229, "tableData"), "table");
        v221 = (char *)objc_msgSend(-[EFormula tableData](v165, "tableData"), "reference");
        v167 = objc_msgSend(-[EFormula tableData](v165, "tableData"), "ptgData");
        v168 = objc_msgSend(-[EFormula formulaHelper](v165, "formulaHelper"), "resolveTableColumn:columnName:", v166, *(_QWORD *)&v2[-10].type);
        if (v168 != -1)
        {
          v169 = v168;
          v220 = v5;
          v170 = objc_msgSend(-[EFormula formulaHelper](v165, "formulaHelper"), "resolveTableColumn:columnName:", v166, *(_QWORD *)&v2[-2].type);
          if (v170 == -1)
          {
            v206 = (void *)MEMORY[0x24BDD17C8];
            v205 = "column name in a table could not be resolved!";
            goto LABEL_283;
          }
          v171 = v170;
          v172 = v221;
          *(_WORD *)(v167 + 6) = v169 + objc_msgSend(v221, "firstColumn");
          *(_WORD *)(v167 + 8) = v171 + objc_msgSend(v172, "firstColumn");
          v5 = v220;
          goto LABEL_197;
        }
        v165->mErrMsg = (NSString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "column name in a table could not be resolved!");
LABEL_300:
        v192 = 1;
LABEL_301:
        v190 = v241;
        goto LABEL_302;
      case 0x5Du:
        v116 = *(_QWORD *)&v2[-2].type;
        if (v116 == -1)
          goto LABEL_285;
LABEL_201:
        if (!v2->type)
          goto LABEL_285;
        v230 = v30;
        v41 = v32;
        v42 = link3DTokens(v229, v116, v2);
        goto LABEL_221;
      case 0x5Eu:
        v223 = v28;
        v28 = (void *)v3;
        v55 = *(_QWORD *)&v2->data[8];
        if (v55 != -1)
        {
          v226 = v32;
          v230 = v30;
          v56 = *(_QWORD *)&v2[-2].type;
          if (v56 == -1)
          {
LABEL_168:
            v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
            *(_DWORD *)objc_msgSend((id)v27, "addToken:extendedDataLength:", 35, 4) = v55;
LABEL_238:
            v3 = (unint64_t)v28;
            LOWORD(v28) = (_WORD)v223;
            goto LABEL_244;
          }
          v57 = v229;
          LOWORD(v58) = v55;
LABEL_237:
          v27 = (uint64_t)sheetNameTokens(v57, v56, v58);
          goto LABEL_238;
        }
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "TOK_NAME has to be a local name.";
        goto LABEL_299;
      case 0x60u:
        if (*(_QWORD *)&v2[-10].type)
          goto LABEL_286;
LABEL_204:
        v27 = 0;
        goto LABEL_246;
      case 0x61u:
        v27 = *(_QWORD *)&v2[-8].type;
        goto LABEL_246;
      case 0x62u:
        v27 = *(_QWORD *)&v2[1].dataSize;
        goto LABEL_246;
      case 0x63u:
        v173 = *(_QWORD *)&v2[-4].type;
        v174 = *(id *)&v2->type;
        v230 = v30;
        v41 = v32;
        v42 = -[EFormula resolveFirstSheet:lastSheet:](v229, "resolveFirstSheet:lastSheet:", v173, v174);
        goto LABEL_221;
      case 0x64u:
        v224 = (int)v31;
        v117 = (__int16)v28;
        v28 = (void *)v3;
        v118 = *(_QWORD *)&v2->data[8];
        if (v118 != -1)
        {
LABEL_208:
          v228 = v29;
          v230 = v30;
          LODWORD(v29) = v32;
          v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
          v175 = (_DWORD *)objc_msgSend((id)v27, "addToken:extendedDataLength:", 35, 4);
          v32 = (int)v29;
          LOWORD(v30) = v230;
          LOWORD(v29) = (_WORD)v228;
          *v175 = v118;
          v3 = (unint64_t)v28;
          LOWORD(v28) = v117;
LABEL_209:
          LOWORD(v31) = v224;
          goto LABEL_246;
        }
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "\"extbook!TOK_NAME\" where TOK_NAME has to be a local name.";
        goto LABEL_299;
      case 0x67u:
        if (!*(_QWORD *)&v2[-6].type)
          goto LABEL_246;
LABEL_286:
        v208 = (void *)MEMORY[0x24BDD17C8];
        v209 = "External book reference not supported!";
        goto LABEL_299;
      case 0x68u:
        v226 = v32;
        v230 = v30;
        v220 = v5;
        v27 = (uint64_t)objc_alloc_init(-[EFormula formulaClass](v229, "formulaClass"));
        LODWORD(v234) = 0;
        v221 = (char *)objc_msgSend(*(id *)&v2[-6].type, "count");
        v223 = v28;
        v224 = (int)v31;
        if (!v221)
        {
          objc_msgSend((id)v27, "addArrayWithCol:andRow:", 0xFFFFFFFFLL, 0xFFFFFFFFLL);
          goto LABEL_232;
        }
        v222 = v3;
        v59 = 0;
        v60 = 0;
        v228 = v29;
LABEL_58:
        v61 = (void *)objc_msgSend(*(id *)&v2[-6].type, "objectAtIndex:", v59);
        v62 = objc_msgSend(v61, "tokenCount");
        if (v62 >= 1)
        {
          v63 = 0;
          do
          {
            if (objc_msgSend(v61, "tokenTypeAtIndex:", v63) == 23)
              objc_msgSend(v61, "extendedDataForTokenAtIndex:extendedDataIndex:length:", v63, 0, &v234);
            v63 = (v63 + 1);
          }
          while (v62 != (_DWORD)v63);
        }
        if (!v60)
        {
          v60 = v62;
          LOWORD(v29) = (_WORD)v228;
LABEL_67:
          if ((char *)++v59 == v221)
          {
            v64 = v221;
            objc_msgSend((id)v27, "addArrayWithCol:andRow:", (v60 - 1), ((_DWORD)v221 - 1));
            v3 = v222;
            if (v64)
            {
              v65 = 0;
              v66 = 0;
              do
              {
                v67 = *(void **)&v2[-6].type;
                v219 = v65;
                v68 = (void *)objc_msgSend(v67, "objectAtIndex:");
                v69 = objc_msgSend(v68, "tokenCount");
                if (v69 >= 1)
                {
                  v70 = v69;
                  v71 = 0;
                  do
                  {
                    switch(objc_msgSend(v68, "tokenTypeAtIndex:", v71))
                    {
                      case 0x17u:
                        v72 = (const unsigned __int16 *)objc_msgSend(v68, "extendedDataForTokenAtIndex:extendedDataIndex:length:", v71, 0, &v234);
                        if (addUnicodeStringToArray((void *)v27, v72 + 2, *(__int16 *)v72, v66 + v71))
                          break;
                        v205 = "String too long!";
                        goto LABEL_282;
                      case 0x1Du:
                        addBoolToArray((void *)v27, *(_BYTE *)objc_msgSend(v68, "extendedDataForTokenAtIndex:extendedDataIndex:length:", v71, 0, &v234) != 0, v66 + v71);
                        break;
                      case 0x1Eu:
                        LOWORD(v73) = *(_WORD *)objc_msgSend(v68, "extendedDataForTokenAtIndex:extendedDataIndex:length:", v71, 0, &v234);
                        v74 = (double)v73;
                        goto LABEL_81;
                      case 0x1Fu:
                        v75 = (double *)objc_msgSend(v68, "extendedDataForTokenAtIndex:extendedDataIndex:length:", v71, 0, &v234);
                        if (v75)
                          v74 = *v75;
                        else
                          v74 = 0.0;
LABEL_81:
                        addNumberToArray((void *)v27, v66 + v71, v74);
                        break;
                      default:
                        addErrorToArrayAtIndex((void *)v27, v66 + v71);
                        break;
                    }
                    v71 = (v71 + 1);
                  }
                  while (v70 != (_DWORD)v71);
                  v66 += v71;
                  v3 = v222;
                  LOWORD(v29) = (_WORD)v228;
                }
                v65 = v219 + 1;
              }
              while ((char *)(v219 + 1) != v221);
            }
LABEL_232:

            v5 = v220;
            LOWORD(v28) = (_WORD)v223;
            LOWORD(v30) = v230;
LABEL_199:
            LOWORD(v31) = v224;
LABEL_245:
            v32 = v226;
LABEL_246:
            v186 = &v2[-2 * v25];
            *(_QWORD *)&v186[2].type = v27;
            v2 = v186 + 2;
            v4 -= 2 * v25;
            *(_WORD *)v2->data = (_WORD)v28;
            *(_WORD *)&v2->data[2] = (_WORD)v29;
            *(_WORD *)&v2->data[4] = v30;
            *(_WORD *)&v2->data[6] = (_WORD)v31;
            *(_DWORD *)&v2->data[8] = v32;
            v187 = v237;
            *(_DWORD *)&v2[1].data[8] = v238;
            *(_OWORD *)&v2[1].type = v187;
            v188 = yyr1[v24] - 50;
            v189 = (*(__int16 *)v4 + yypgoto[v188]);
            if (v189 <= 0x14F && yycheck[v189] == *(_WORD *)v4)
              v20 = yytable[v189];
            else
              v20 = yydefgoto[v188];
LABEL_250:
            v4 += 2;
            v1 = v20;
            continue;
          }
          goto LABEL_58;
        }
        LOWORD(v29) = (_WORD)v228;
        if (v60 == v62)
          goto LABEL_67;
        v205 = "Array Colums are not same!";
LABEL_282:
        v206 = (void *)MEMORY[0x24BDD17C8];
LABEL_283:
        v207 = (NSString *)objc_msgSend(v206, "stringWithUTF8String:", v205);
        v229->mErrMsg = v207;
        v192 = 1;
        v190 = v241;
        v5 = v220;
LABEL_302:
        if (v232[0] != -2
          && v232[0]
          && (v232[1] - 51) <= 0x25
          && ((1 << (LOBYTE(v232[1]) - 51)) & 0x3D2059F6CFLL) != 0)
        {

        }
LABEL_307:
        v212 = (__int16 *)&v4[-2 * v25];
        if (v212 != v5)
        {
          v213 = (id *)&v2[-2 * v25];
          do
          {
            v214 = yystos[*v212] - 51;
            v201 = v214 > 0x25;
            v215 = (1 << v214) & 0x3D2059F6CFLL;
            if (!v201 && v215 != 0)

            v213 -= 5;
            --v212;
          }
          while (v212 != v5);
        }
        if (v5 != (__int16 *)v240)
          free(v5);
        if (v190 != v241)
          free(v190);
        return v192;
      case 0x69u:
        v176 = *(void **)&v2[-6].type;
        v177 = *(id *)&v2->type;
        v230 = v30;
        v178 = v32;
        objc_msgSend(v176, "addObject:", v177);
        goto LABEL_214;
      case 0x6Bu:
        v179 = *(void **)&v2[-6].type;
        v180 = *(id *)&v2->type;
        v230 = v30;
        v178 = v32;
        objc_msgSend(v179, "copyTokenAtIndex:fromFormula:", 0, v180);
LABEL_214:

        v32 = v178;
        LOWORD(v30) = v230;
        v27 = *(_QWORD *)&v2[-6].type;
        goto LABEL_246;
      case 0x6Du:
      case 0x6Fu:
        v43 = *(double *)&v2->type;
        goto LABEL_218;
      case 0x6Eu:
        v181 = *(double *)&v2->type;
        goto LABEL_217;
      case 0x70u:
      case 0x72u:
        v43 = (double)*(unint64_t *)&v2->type;
        goto LABEL_218;
      case 0x71u:
        v181 = (double)*(unint64_t *)&v2->type;
LABEL_217:
        v43 = -v181;
LABEL_218:
        v230 = v30;
        v41 = v32;
        v42 = numberTokens(v229, v43);
        goto LABEL_221;
      case 0x75u:
        v81 = *(NSString **)&v2->type;
LABEL_220:
        v230 = v30;
        v41 = v32;
        v42 = strTokens(v229, v81);
LABEL_221:
        v32 = v41;
        LOWORD(v30) = v230;
        goto LABEL_222;
      default:
        goto LABEL_246;
    }
  }
}

uint64_t EFLexer::yylex(EFLexer *this)
{
  __int16 *v1;
  std::ios_base *v3;
  std::ios_base *v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  char *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE **v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int next_buffer;
  int v25;
  int previous_state;
  _QWORD *v27;
  __int16 *v28;
  uint64_t result;
  int v30;
  int v31;
  const char *v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  char v50;
  char v51;
  uint64_t v52;

  if (!*((_DWORD *)this + 100))
  {
    *((_DWORD *)this + 100) = 1;
    if (!*((_DWORD *)this + 101))
      *((_DWORD *)this + 101) = 1;
    v3 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 6) - 24) + 48);
    if ((v3->__rdstate_ & 5) != 0)
    {
      v3->__rdbuf_ = *(void **)(MEMORY[0x24BEDB1D0] + *(_QWORD *)(*MEMORY[0x24BEDB1D0] - 24) + 40);
      std::ios_base::clear(v3, 0);
    }
    v4 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 27) - 24) + 216);
    if ((v4->__rdstate_ & 5) != 0)
    {
      v4->__rdbuf_ = *(void **)(MEMORY[0x24BEDB318] + *(_QWORD *)(*MEMORY[0x24BEDB318] - 24) + 40);
      std::ios_base::clear(v4, 0);
    }
    v5 = *((_QWORD *)this + 54);
    if (!v5 || !*(_QWORD *)(v5 + 8 * *((_QWORD *)this + 52)))
    {
      v6 = yyFlexLexer::yyensure_buffer_stack(this);
      *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52)) = (*(uint64_t (**)(EFLexer *, char *, uint64_t, double))(*(_QWORD *)this + 32))(this, (char *)this + 48, 0x4000, v6);
    }
    yyFlexLexer::yy_load_buffer_state(this);
  }
  v7 = (_QWORD *)((char *)this + 392);
  v8 = (char *)this + 448;
LABEL_13:
  v9 = (unsigned __int8 *)*((_QWORD *)this + 49);
  *v9 = *((_BYTE *)this + 376);
  v10 = *((_DWORD *)this + 101);
  v11 = v9;
  do
  {
LABEL_14:
    v12 = yy_ec[*v11];
    if (yy_accept[v10])
    {
      *((_DWORD *)this + 110) = v10;
      *((_QWORD *)this + 56) = v11;
    }
    v13 = v10;
    v14 = yy_base[v10] + v12;
    if (v10 != (__int16)yy_chk[v14])
    {
      do
      {
        v13 = yy_def[v13];
        if (v13 >= 673)
          v12 = *((unsigned __int8 *)&yy_meta + v12);
        v14 = yy_base[v13] + v12;
      }
      while (yy_chk[v14] != (unsigned __int16)v13);
    }
    v10 = yy_nxt[v14];
    ++v11;
  }
  while (v10 != 672);
  v15 = *((_DWORD *)this + 110);
  v16 = (_BYTE **)v8;
  while (2)
  {
    v17 = *v16;
    v18 = (__int16)yy_accept[v15];
    *((_QWORD *)this + 1) = v9;
    *((_QWORD *)this + 2) = v17 - v9;
    *((_BYTE *)this + 376) = *v17;
    *v17 = 0;
    *((_QWORD *)this + 49) = v17;
LABEL_23:
    switch(v18)
    {
      case 0:
        *v17 = *((_BYTE *)this + 376);
        v15 = *((_DWORD *)this + 110);
        v16 = (_BYTE **)((char *)this + 448);
        continue;
      case 1:
        return 258;
      case 2:
        return 259;
      case 3:
        return 262;
      case 4:
        return 263;
      case 5:
        return 297;
      case 6:
        return 296;
      case 7:
        return 299;
      case 8:
        return 298;
      case 9:
        return 300;
      case 10:
        return 301;
      case 11:
        return 304;
      case 12:
        return 265;
      case 13:
        return 264;
      case 14:
        return 266;
      case 15:
        return 295;
      case 16:
        return 294;
      case 17:
        return 292;
      case 18:
        return 291;
      case 19:
        return 289;
      case 20:
        return 290;
      case 21:
        return 293;
      case 22:
        return 269;
      case 23:
        yyFlexLexer::yy_push_state(this, 1);
        return 260;
      case 24:
        v30 = *((_DWORD *)this + 8);
        v31 = v30 - 1;
        *((_DWORD *)this + 8) = v30 - 1;
        if (v30 <= 0)
        {
          (*(void (**)(EFLexer *, const char *))(*(_QWORD *)this + 112))(this, "start-condition stack underflow");
          v31 = *((_DWORD *)this + 8);
        }
        *((_DWORD *)this + 101) = (2 * *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v31)) | 1;
        return 261;
      case 25:
        *((_QWORD *)this + 65) = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *((_QWORD *)this + 1));
        return 280;
      case 26:
        v32 = (const char *)*((_QWORD *)this + 1);
        goto LABEL_103;
      case 27:
        v33 = (const char *)*((_QWORD *)this + 1);
        v34 = atol(v33);
        if (v34 >> 16)
        {
          v32 = v33;
LABEL_103:
          *((double *)this + 65) = atof(v32);
          return 284;
        }
        else
        {
          *((_QWORD *)this + 65) = v34;
          return 282;
        }
      case 28:
        return 267;
      case 29:
        return 268;
      case 30:
        *((_QWORD *)this + 65) = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *((_QWORD *)this + 1));
        *((_DWORD *)this + 132) = 274;
        v51 = 0;
        result = isCellName(*((const char **)this + 1), (unsigned int *)this + 134, (BOOL *)this + 544, (unsigned int *)this + 135, (BOOL *)this + 545, *((EFormula **)this + 70));
        if ((_DWORD)result)
          goto LABEL_96;
        v35 = objc_msgSend(*((id *)this + 70), "resolveName:", *((_QWORD *)this + 1));
        v52 = v35;
        if (v35 != -1)
        {
          *((_QWORD *)this + 67) = v35;
          *((_DWORD *)this + 132) = 275;
          v36 = objc_msgSend(*((id *)this + 70), "resolveSheet:isCurrentSheet:", *((_QWORD *)this + 1), &v51);
          if (v36 != -1)
          {
            *((_QWORD *)this + 68) = v36;
            result = 279;
LABEL_96:
            *((_DWORD *)this + 132) = result;
            return result;
          }
          *((_QWORD *)this + 68) = -1;
          return 279;
        }
        v46 = objc_msgSend(*((id *)this + 70), "resolveTable:sheetIndex:", *((_QWORD *)this + 1), &v52);
        if (v46)
        {
          *((_QWORD *)this + 68) = v46;
          *((_QWORD *)this + 67) = v52;
          result = 278;
          goto LABEL_96;
        }
        v47 = objc_msgSend(*((id *)this + 70), "resolveSheet:isCurrentSheet:", *((_QWORD *)this + 1), &v51);
        if (v47 != -1)
        {
          *((_QWORD *)this + 68) = v47;
          *((_BYTE *)this + 552) = v51;
          *((_DWORD *)this + 132) = 277;
          *((_QWORD *)this + 67) = -1;
          return 279;
        }
        return 274;
      case 31:
        goto LABEL_87;
      case 32:
        yyFlexLexer::yy_push_state(this, 2);
        v37 = (void *)MEMORY[0x24BDD17C8];
        v38 = *((_QWORD *)this + 1) + 1;
        goto LABEL_88;
      case 33:
        v39 = *((_DWORD *)this + 8);
        v40 = v39 - 1;
        *((_DWORD *)this + 8) = v39 - 1;
        if (v39 <= 0)
        {
          (*(void (**)(EFLexer *, const char *))(*(_QWORD *)this + 112))(this, "start-condition stack underflow");
          v40 = *((_DWORD *)this + 8);
        }
        *((_DWORD *)this + 101) = (2 * *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v40)) | 1;
LABEL_87:
        v37 = (void *)MEMORY[0x24BDD17C8];
        v38 = *((_QWORD *)this + 1);
LABEL_88:
        *((_QWORD *)this + 65) = objc_msgSend(v37, "stringWithUTF8String:", v38);
        result = 274;
        goto LABEL_96;
      case 34:
        v41 = *((_DWORD *)this + 8);
        v42 = v41 - 1;
        *((_DWORD *)this + 8) = v41 - 1;
        if (v41 <= 0)
        {
          (*(void (**)(EFLexer *, const char *))(*(_QWORD *)this + 112))(this, "start-condition stack underflow");
          v42 = *((_DWORD *)this + 8);
        }
        *((_DWORD *)this + 101) = (2 * *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v42)) | 1;
        v43 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "virtual int EFLexer::yylex()");
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v43, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Formula/EFLexer.lmm"), 363, 0, "table column name error: single quote ' as an escape symbol followed by white space \"\\x%x\"", **((char **)this + 1));
        +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
        return 270;
      case 35:
        yyFlexLexer::yy_push_state(this, 3);
        return 272;
      case 36:
        *((_QWORD *)this + 65) = atoi((const char *)(*((_QWORD *)this + 1) + 1));
        return 283;
      case 37:
        *((_QWORD *)this + 65) = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *((_QWORD *)this + 1));
        v50 = 0;
        *((_QWORD *)this + 68) = objc_msgSend(*((id *)this + 70), "resolveSheet:isCurrentSheet:", *((_QWORD *)this + 1), &v50);
        *((_BYTE *)this + 552) = v50;
        result = 277;
        goto LABEL_96;
      case 38:
        v44 = *((_DWORD *)this + 8);
        v45 = v44 - 1;
        *((_DWORD *)this + 8) = v44 - 1;
        if (v44 <= 0)
        {
          (*(void (**)(EFLexer *, const char *))(*(_QWORD *)this + 112))(this, "start-condition stack underflow");
          v45 = *((_DWORD *)this + 8);
        }
        *((_DWORD *)this + 101) = (2 * *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v45)) | 1;
        return 273;
      case 39:
        *((_QWORD *)this + 65) = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", *((_QWORD *)this + 1) + 1, strlen(*((const char **)this + 1)) - 2, 4);
        return 281;
      case 40:
        *((_QWORD *)this + 65) = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *((_QWORD *)this + 1));
        return 285;
      case 41:
        return 270;
      case 42:
        v27 = v7;
        v28 = v1;
        (*(void (**)(EFLexer *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, *((_QWORD *)this + 1), *((_QWORD *)this + 2));
        goto LABEL_43;
      case 43:
        v19 = *((_QWORD *)this + 1);
        *v17 = *((_BYTE *)this + 376);
        v20 = *((_QWORD *)this + 54);
        v21 = *((_QWORD *)this + 52);
        v22 = *(_QWORD *)(v20 + 8 * v21);
        if (*(_DWORD *)(v22 + 64))
        {
          v23 = *((_QWORD *)this + 48);
        }
        else
        {
          v23 = *(_QWORD *)(v22 + 32);
          *((_QWORD *)this + 48) = v23;
          *(_QWORD *)v22 = *(_QWORD *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 6) - 24) + 88);
          v22 = *(_QWORD *)(v20 + 8 * v21);
          *(_DWORD *)(v22 + 64) = 1;
        }
        v49 = v7;
        if (*v7 <= (unint64_t)(*(_QWORD *)(v22 + 8) + v23))
        {
          *((_QWORD *)this + 49) = *((_QWORD *)this + 1) + ~(_DWORD)v19 + (int)v17;
          previous_state = yyFlexLexer::yy_get_previous_state(this);
          v10 = yyFlexLexer::yy_try_NUL_trans(this, previous_state);
          v9 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if (!v10)
          {
            v15 = *((_DWORD *)this + 110);
            v16 = (_BYTE **)((char *)this + 448);
            v7 = v49;
            v1 = &jpt_22A26B4E4;
            continue;
          }
          v7 = v49;
          v11 = (unsigned __int8 *)(*v49 + 1);
          *v49 = v11;
          v8 = (char *)this + 448;
          v1 = &jpt_22A26B4E4;
          goto LABEL_14;
        }
        v48 = v9;
        next_buffer = yyFlexLexer::yy_get_next_buffer(this);
        if (next_buffer != 1)
        {
          v1 = &jpt_22A26B4E4;
          if (!next_buffer)
          {
            *((_QWORD *)this + 49) = *((_QWORD *)this + 1) + ~(_DWORD)v19 + (int)v17;
            v10 = yyFlexLexer::yy_get_previous_state(this);
            v1 = &jpt_22A26B4E4;
            v11 = (unsigned __int8 *)*((_QWORD *)this + 49);
            v9 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v7 = v49;
            v8 = (char *)this + 448;
            goto LABEL_14;
          }
          v7 = v49;
          v8 = (char *)this + 448;
          if (next_buffer != 2)
            goto LABEL_13;
          *((_QWORD *)this + 49) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52)) + 8)
                                 + *((_QWORD *)this + 48);
          v15 = yyFlexLexer::yy_get_previous_state(this);
          v1 = &jpt_22A26B4E4;
          v7 = v49;
          v9 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v16 = (_BYTE **)v49;
          continue;
        }
        *((_DWORD *)this + 102) = 0;
        if ((*(unsigned int (**)(EFLexer *))(*(_QWORD *)this + 88))(this))
        {
          *((_QWORD *)this + 49) = *((_QWORD *)this + 1);
          v25 = *((_DWORD *)this + 101);
          if (v25 >= 1)
            --v25;
          v18 = (v25 >> 1) + 44;
          v7 = v49;
          v1 = &jpt_22A26B4E4;
          v9 = v48;
          goto LABEL_23;
        }
        v7 = v49;
        v8 = (char *)this + 448;
        v1 = &jpt_22A26B4E4;
        if (!*((_DWORD *)this + 102))
        {
          (*(void (**)(EFLexer *, char *))(*(_QWORD *)this + 56))(this, (char *)this + 48);
          v1 = &jpt_22A26B4E4;
          v7 = v49;
        }
        goto LABEL_13;
      case 44:
      case 45:
      case 46:
      case 47:
        return 0;
      default:
        v27 = v7;
        v28 = v1;
        (*(void (**)(EFLexer *, const char *))(*(_QWORD *)this + 112))(this, "fatal flex scanner internal error--no action found");
LABEL_43:
        v1 = v28;
        v7 = v27;
        v8 = (char *)this + 448;
        goto LABEL_13;
    }
  }
}

uint64_t yyFlexLexer::yy_get_next_buffer(yyFlexLexer *this)
{
  uint64_t v2;
  _BYTE *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  char *v15;
  void *v16;
  int v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52));
  v3 = *(_BYTE **)(v2 + 8);
  v4 = (char *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 49) > (unint64_t)&v3[*((_QWORD *)this + 48) + 1])
  {
    (*(void (**)(yyFlexLexer *, const char *))(*(_QWORD *)this + 112))(this, "fatal flex scanner internal error--end of buffer missed");
    v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52));
  }
  v5 = *((_QWORD *)this + 49);
  v6 = *((_QWORD *)this + 1);
  if (!*(_DWORD *)(v2 + 60))
  {
    if (v5 - v6 == 1)
      return 1;
    else
      return 2;
  }
  v7 = ~(_DWORD)v6;
  v8 = v7 + v5;
  if (v7 + (int)v5 >= 1)
  {
    v9 = v7 + v5;
    do
    {
      v10 = *v4++;
      *v3++ = v10;
      --v9;
    }
    while (v9);
    v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52));
  }
  if (*(_DWORD *)(v2 + 64) == 2)
  {
    *((_QWORD *)this + 48) = 0;
    *(_QWORD *)(v2 + 32) = 0;
LABEL_28:
    if (v8)
    {
      v20 = 0;
      v11 = 2;
      *(_DWORD *)(v2 + 64) = 2;
    }
    else
    {
      (*(void (**)(yyFlexLexer *, char *))(*(_QWORD *)this + 56))(this, (char *)this + 48);
      v20 = *((_QWORD *)this + 48);
      v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52));
      v11 = 1;
    }
    goto LABEL_31;
  }
  v12 = ~v8;
  v13 = *(_DWORD *)(v2 + 24);
  v14 = v13 + ~v8;
  if (!v14)
  {
    v15 = (char *)*((_QWORD *)this + 49);
    while (1)
    {
      v16 = *(void **)(v2 + 8);
      if (!*(_DWORD *)(v2 + 40))
        break;
      v17 = 2 * v13;
      *(_DWORD *)(v2 + 24) = v17;
      v18 = (char *)malloc_type_realloc(v16, v17 + 2, 0xA7BF72DAuLL);
      *(_QWORD *)(v2 + 8) = v18;
      if (!v18)
        goto LABEL_19;
LABEL_20:
      v15 = &v18[(int)v15 - (int)v16];
      *((_QWORD *)this + 49) = v15;
      v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52));
      v13 = *(_DWORD *)(v2 + 24);
      v14 = v13 + v12;
      if (v13 + v12)
        goto LABEL_21;
    }
    *(_QWORD *)(v2 + 8) = 0;
LABEL_19:
    (*(void (**)(yyFlexLexer *, const char *))(*(_QWORD *)this + 112))(this, "fatal error - scanner input buffer overflow");
    v18 = *(char **)(v2 + 8);
    goto LABEL_20;
  }
LABEL_21:
  if (v14 >= 0x2000)
    v19 = 0x2000;
  else
    v19 = v14;
  v20 = (*(uint64_t (**)(yyFlexLexer *, _QWORD, uint64_t))(*(_QWORD *)this + 96))(this, *(_QWORD *)(v2 + 8) + v8, v19);
  *((_QWORD *)this + 48) = v20;
  if ((v20 & 0x80000000) != 0)
  {
    (*(void (**)(yyFlexLexer *, const char *))(*(_QWORD *)this + 112))(this, "input in flex scanner failed");
    v20 = *((_QWORD *)this + 48);
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52));
  *(_QWORD *)(v2 + 32) = v20;
  if (!v20)
    goto LABEL_28;
  v11 = 0;
LABEL_31:
  v21 = v20 + v8;
  if (v21 > *(int *)(v2 + 24))
  {
    v22 = v21 + (v20 >> 1);
    v23 = malloc_type_realloc(*(void **)(v2 + 8), v22, 0xA7BF72DAuLL);
    v24 = *((_QWORD *)this + 54);
    v25 = *((_QWORD *)this + 52);
    *(_QWORD *)(*(_QWORD *)(v24 + 8 * v25) + 8) = v23;
    v2 = *(_QWORD *)(v24 + 8 * v25);
    if (!*(_QWORD *)(v2 + 8))
    {
      (*(void (**)(yyFlexLexer *, const char *))(*(_QWORD *)this + 112))(this, "out of dynamic memory in yy_get_next_buffer()");
      v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52));
    }
    *(_DWORD *)(v2 + 24) = v22 - 2;
    v21 = *((_QWORD *)this + 48) + v8;
  }
  *((_QWORD *)this + 48) = v21;
  *(_BYTE *)(*(_QWORD *)(v2 + 8) + v21) = 0;
  *(_BYTE *)(*((_QWORD *)this + 48)
           + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52)) + 8)
           + 1) = 0;
  *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 54) + 8 * *((_QWORD *)this + 52)) + 8);
  return v11;
}

uint64_t yyFlexLexer::LexerInput(yyFlexLexer *this, char *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 48);
  if ((*((_BYTE *)this + *(_QWORD *)(*((_QWORD *)this + 6) - 24) + 80) & 7) != 0)
    return 0;
  std::istream::read();
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 1) != 0)
    return -1;
  else
    return *((_QWORD *)this + 7);
}

uint64_t yyFlexLexer::yy_get_previous_state(yyFlexLexer *this)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 101);
  v2 = (_BYTE *)*((_QWORD *)this + 1);
  v3 = (_BYTE *)*((_QWORD *)this + 49);
  if (v2 < v3)
  {
    do
    {
      if (*v2)
        v4 = yy_ec[*v2];
      else
        v4 = 1u;
      if (yy_accept[(int)v1])
      {
        *((_DWORD *)this + 110) = v1;
        *((_QWORD *)this + 56) = v2;
      }
      v5 = (int)v1;
      v6 = yy_base[(int)v1] + v4;
      if ((_DWORD)v1 != (__int16)yy_chk[v6])
      {
        do
        {
          v5 = yy_def[v5];
          if (v5 >= 673)
            v4 = *((unsigned __int8 *)&yy_meta + v4);
          v6 = yy_base[v5] + v4;
        }
        while (yy_chk[v6] != (unsigned __int16)v5);
      }
      v1 = yy_nxt[v6];
      ++v2;
    }
    while (v2 != v3);
  }
  return v1;
}

id intTokens(EFormula *a1, unsigned int a2)
{
  id v3;
  id v4;

  v3 = objc_alloc_init(-[EFormula formulaClass](a1, "formulaClass"));
  v4 = v3;
  if (HIWORD(a2))
    addNumberOperand(v3, (double)a2);
  else
    addIntOperand(v3, a2);
  return v4;
}

uint64_t yyFlexLexer::yywrap(yyFlexLexer *this)
{
  return 1;
}

id operatorTokens(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  int v8;
  int v9;
  uint64_t v10;

  v7 = a3;
  if (a3)
  {
    if (!a4)
      goto LABEL_9;
  }
  else
  {
    v7 = objc_alloc_init((Class)objc_msgSend(a1, "formulaClass"));
    if (!a4)
      goto LABEL_9;
  }
  v8 = objc_msgSend(a4, "tokenCount");
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    do
    {
      objc_msgSend(a3, "copyTokenAtIndex:fromFormula:", v10, a4);
      v10 = (v10 + 1);
    }
    while (v9 != (_DWORD)v10);
  }

LABEL_9:
  objc_msgSend(v7, "addToken:extendedDataLength:", a2, 0);
  return v7;
}

void sub_22A26C304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EFLexer::~EFLexer(EFLexer *this)
{
  ELexer::~ELexer(this);
  JUMPOUT(0x22E2DD408);
}

void ELexer::~ELexer(ELexer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24F3A7E20;
  v2 = *((_QWORD *)this + 74);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 75);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 73);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  yyFlexLexer::~yyFlexLexer(this);
}

void yyFlexLexer::yy_delete_buffer(uint64_t a1, void **a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 432);
    if (v3)
      v4 = *(void ***)(v3 + 8 * *(_QWORD *)(a1 + 416));
    else
      v4 = 0;
    if (v4 == a2)
      *(_QWORD *)(v3 + 8 * *(_QWORD *)(a1 + 416)) = 0;
    if (*((_DWORD *)a2 + 10))
      free(a2[1]);
    free(a2);
  }
}

void yyFlexLexer::~yyFlexLexer(yyFlexLexer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24F3B1788;
  v2 = *((_QWORD *)this + 57);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  free(*((void **)this + 5));
  v3 = *((_QWORD *)this + 54);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8 * *((_QWORD *)this + 52));
  else
    v4 = 0;
  (*(void (**)(yyFlexLexer *, uint64_t))(*(_QWORD *)this + 40))(this, v4);
  free(*((void **)this + 54));
  std::ostream::~ostream();
  std::istream::~istream();
}

{
  yyFlexLexer::~yyFlexLexer(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A26C568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26C630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A26C770(_Unwind_Exception *a1, CsString *a2)
{
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t XlFunctionIdForName(const unsigned __int16 *a1)
{
  const unsigned __int16 *ItemWithFunctionName;

  ItemWithFunctionName = findItemWithFunctionName(a1);
  if (ItemWithFunctionName)
    return (__int16)*ItemWithFunctionName;
  else
    return 255;
}

const unsigned __int16 *findItemWithFunctionName(const unsigned __int16 *result)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  size_t v5;
  const __int32 *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  size_t v10;
  const __int32 *v11;
  _BYTE v12[12];
  _BYTE __key[4];
  __int32 v14[22];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = (unsigned __int16 *)result;
    v2 = _ChWcslen(result);
    MEMORY[0x24BDAC7A8](v2);
    v4 = &v12[-((v3 + 19) & 0xFFFFFFFFFFFFFFF0)];
    bzero(v4, v5);
    v6 = ChCHAR2ToWchar(v4, v1);
    if (wcslen(v6) <= 0x13)
    {
      if ((_XlSortedByName & 1) == 0)
      {
        memcpy(&XlFunctionTableByName, &XlFunctionTableById, 0x597CuLL);
        qsort(&XlFunctionTableByName, 0xF9uLL, 0x5CuLL, (int (__cdecl *)(const void *, const void *))_XlFunctionTableItemCompareByName);
        _XlSortedByName = 1;
      }
      v7 = _ChWcslen(v1);
      MEMORY[0x24BDAC7A8](v7);
      v9 = &v12[-((v8 + 19) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v9, v10);
      v11 = ChCHAR2ToWchar(v9, v1);
      wcscpy(v14, v11);
      return (const unsigned __int16 *)bsearch(__key, &XlFunctionTableByName, 0xF9uLL, 0x5CuLL, (int (__cdecl *)(const void *, const void *))_XlFunctionTableItemCompareByName);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _XlFunctionTableItemCompareByName(const __int32 *a1, const __int32 *a2)
{
  return wcscmp(a1 + 1, a2 + 1);
}

uint64_t XlArgumentCountForFunction(__int16 a1)
{
  _WORD *v1;
  _WORD __key[46];

  __key[0] = a1;
  v1 = bsearch(__key, &XlFunctionTableById, 0xF9uLL, 0x5CuLL, (int (__cdecl *)(const void *, const void *))_XlFunctionTableItemCompareById);
  if (v1)
    return (__int16)v1[42];
  else
    return -1;
}

uint64_t _XlFunctionTableItemCompareById(__int16 *a1, __int16 *a2)
{
  return (*a1 - *a2);
}

void sub_22A26CBA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptAnimColorBehaviorAtom::PptAnimColorBehaviorAtom(PptAnimColorBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5898;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5940;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
}

uint64_t PptAnimColorBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 856))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimColorBehaviorAtom *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = v5;
  *((_DWORD *)a2 + 13) = v6;
  *((_DWORD *)a2 + 14) = v7;
  *((_DWORD *)a2 + 15) = v8;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 16) = v9;
  *((_DWORD *)a2 + 17) = v10;
  *((_DWORD *)a2 + 18) = v11;
  *((_DWORD *)a2 + 19) = v12;
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 20) = v13;
  *((_DWORD *)a2 + 21) = v14;
  *((_DWORD *)a2 + 22) = v15;
  *((_DWORD *)a2 + 23) = v16;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 52)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimMotionBehaviorAtom::PptAnimMotionBehaviorAtom(PptAnimMotionBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5B80;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5C28;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimMotionBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 912))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimMotionBehaviorAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 45) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  *((float *)a2 + 12) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((float *)a2 + 13) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((float *)a2 + 14) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((float *)a2 + 15) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((float *)a2 + 16) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((float *)a2 + 16) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 17) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 32)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimColorBehaviorAtom::~PptAnimColorBehaviorAtom(PptAnimColorBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimMotionBehaviorAtom::~PptAnimMotionBehaviorAtom(PptAnimMotionBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

WrdShading *WrdCharacterProperties::getShadingReference(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 |= 0x400000uLL;
  return this->var6;
}

uint64_t EshTablePropVal<float>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
  else
    return 1;
}

uint64_t sub_22A26D204()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<float>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  float *v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<float,ChAllocator<float>>::resize(a2 + 8, *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = (float *)EshBasicTablePropVal<int>::operator[](a2, v6);
      EshPropValParserVisitor::parseElement((EshPropValParserVisitor *)a1, v7);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A26D2E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

void EshPropValParserVisitor::parseElement(EshPropValParserVisitor *this, float *a2)
{
  EshFixedPointUtil *v3;
  _DWORD *exception;

  if (*((_WORD *)this + 10) != 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  v3 = (EshFixedPointUtil *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *a2 = EshFixedPointUtil::toFloat(v3);
}

uint64_t EshTablePropVal<EshHandle>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a1);
  else
    return 1;
}

uint64_t sub_22A26D39C()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshHandle>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  uint64_t v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<EshHandle,ChAllocator<EshHandle>>::resize((uint64_t *)(a2 + 8), *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = EshBasicTablePropVal<EshHandle>::operator[](a2, v6);
      EshPropValParserVisitor::parseElement(a1, v7);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A26D47C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshHandle>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (-252645135 * ((unint64_t)(*(_QWORD *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return v2 + 68 * a2;
}

uint64_t EshPropValParserVisitor::parseValuePair(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a4)
  {
    v9 = (uint64_t *)(a2 + 16 * a3 + 4);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
    v11 = 1;
    v12 = 4;
    LODWORD(v13) = v10 - 256;
    v14 = 2;
    if (v10 <= 0xFF)
    {
      LODWORD(v13) = v10 - 3;
      v14 = 3;
    }
    if (v10 >= 3)
      v12 = v14;
    else
      LODWORD(v13) = v10;
    if (a5)
      v13 = v13;
    else
      v13 = v10;
    if (a5)
      v11 = v12;
    *v9 = v11 | (v13 << 32);
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
    v16 = 1;
    v17 = 4;
    LODWORD(v18) = result - 256;
    v19 = 2;
    if (result <= 0xFF)
    {
      LODWORD(v18) = result - 3;
      v19 = 3;
    }
    if ((int)result >= 3)
      v17 = v19;
    else
      LODWORD(v18) = result;
    if (a6)
      v18 = v18;
    else
      v18 = result;
    if (a6)
      v16 = v17;
    v9[1] = v16 | (v18 << 32);
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  }
  return result;
}

uint64_t EshTablePropVal<EshFormula>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
  else
    return 1;
}

uint64_t sub_22A26D7D4()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshFormula>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  _DWORD *v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<EshFormula,ChAllocator<EshFormula>>::resize((uint64_t *)(a2 + 8), *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = (_DWORD *)EshBasicTablePropVal<EshFormula>::operator[](a2, v6);
      EshPropValParserVisitor::parseElement(a1, v7);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A26D8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshPropValParserVisitor::parseElement(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t i;
  uint64_t result;
  _DWORD *exception;

  if (*(_WORD *)(a1 + 20) != 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  *a2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v4 = (uint64_t)(a2 + 1);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  for (i = 0; i != 3; ++i)
  {
    result = EshPropValParserVisitor::parseFormulaArgument(a1, v4, ((v5 >> i) & 0x20) == 0);
    v4 += 8;
  }
  return result;
}

uint64_t EshPropValParserVisitor::parseFormulaArgument(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v6;
  __int16 v7;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  if (!a3)
  {
    if ((result & 0xFF80) == 0x400)
    {
      *(_DWORD *)a2 = 3;
      v7 = result - 1024;
    }
    else
    {
      v7 = result - 327;
      if ((result - 327) > 9)
      {
        v6 = 4;
        goto LABEL_9;
      }
      *(_DWORD *)a2 = 2;
    }
    *(_WORD *)(a2 + 4) = v7;
    return result;
  }
  v6 = 1;
LABEL_9:
  *(_DWORD *)a2 = v6;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

void sub_22A26DB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *EshGeometryProperties::generateImpliedPath(int a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *result;

  v5 = a3 + 8;
  if (a2 == 3)
  {
    std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 4u);
    *(_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
    v9 = (_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
    v10 = ((a1 - 2) / 6) | 0x100000000;
    goto LABEL_15;
  }
  if (a2 != 2)
  {
    if (!a2)
    {
      std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 3u);
      *(_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
      if (a1 >= 2)
        v6 = a1 - 2;
      else
        v6 = a1 - 1;
      v7 = (_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
      v8 = (unsigned __int16)(v6 >> 1);
      goto LABEL_10;
    }
    std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 4u);
    *(_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
    if (a1 >= 2)
      v12 = a1 - 2;
    else
      v12 = a1 - 1;
    v9 = (_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
    v10 = (unsigned __int16)(v12 >> 1);
LABEL_15:
    *v9 = v10;
    *(_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 2u) = 0x300000001;
    v11 = 3;
    goto LABEL_16;
  }
  std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 3u);
  *(_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
  v7 = (_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
  v8 = ((a1 - 2) / 6) | 0x100000000;
LABEL_10:
  *v7 = v8;
  v11 = 2;
LABEL_16:
  result = (_QWORD *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, v11);
  *result = 0x400000001;
  return result;
}

void EshTablePropVal<float>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F378;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void EshTablePropVal<EshHandle>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F418;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

WrdCharacterProperties *WrdCharacterProperties::setCharacterScale(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x100000000000uLL;
  this->var60 = a2;
  return this;
}

uint64_t WrdCharacterProperties::setStrikethrough(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x80uLL;
  *(_DWORD *)(result + 180) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setOutline(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x10uLL;
  *(_DWORD *)(result + 176) = a2;
  return result;
}

CsString *WrdBinaryReader::read(WrdBinaryReader *this, WrdPictureFilename *a2)
{
  int v4;
  CsString *v5;
  int v6;
  CsString *result;
  uint64_t v8;
  unsigned __int16 v9;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 120) + 64))(*(_QWORD *)(*((_QWORD *)this + 4) + 120));
  v5 = (CsString *)((char *)a2 + 8);
  *((_DWORD *)a2 + 6) = 0;
  bzero(*((void **)a2 + 2), 2 * *((unsigned int *)a2 + 7));
  v6 = v4 + 1;
  result = CsString::reserve(v5, v4 + 1);
  if (v4)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 4) + 120);
    do
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      result = CsString::append(v5, v9);
      --v4;
    }
    while (v4);
  }
  *((_DWORD *)this + 153) += v6;
  *((_DWORD *)this + 154) -= v6;
  return result;
}

void sub_22A26E058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A26E1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartLinePlot::XlChartLinePlot(XlChartLinePlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartLine::XlChartLine((XlChartLine *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A9420;
  *((_QWORD *)this + 18) = &unk_24F3A9448;
}

void sub_22A26E2A4(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartLine::XlChartLine(XlChartLine *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4120, 2, 0);
  *(_QWORD *)v1 = &off_24F3A89A0;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartLine *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A26E3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t XlChartLinePlot::getChartType(XlChartLinePlot *this)
{
  return 1;
}

void sub_22A26E4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A26E634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A26E714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void XlChartLinePlot::~XlChartLinePlot(XlChartLinePlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_22A26E804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setNoLineNumbering(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x10000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFBF | ((a2 & 1) << 6);
  return this;
}

void sub_22A26E908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TSUFlushableObjectInfo::compareFlushingOrder(TSUFlushableObjectInfo *this, const TSUFlushableObjectInfo *a2)
{
  int var3;
  int v3;
  int var1;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  float v11;
  float v12;

  if (this == a2)
    return 0;
  var3 = this->var3;
  v3 = a2->var3;
  if (var3 > v3)
    return -1;
  if (var3 < v3)
    return 1;
  var1 = this->var1;
  v5 = 1.0;
  if (var1 == 1)
    v6 = 1.5;
  else
    v6 = 1.0;
  if (!var1)
    v6 = 2.0;
  if (!this->var2)
    v6 = v6 * 1.5;
  v7 = a2->var1;
  if (v7 == 1)
    v5 = 1.5;
  if (!v7)
    v5 = 2.0;
  if (!a2->var2)
    v5 = v5 * 1.5;
  v8 = v6 * (float)this->var4[1];
  v9 = v5 * (float)a2->var4[1];
  if (v8 < v9)
    return -1;
  if (v8 > v9)
    return 1;
  v11 = v6 * (float)this->var4[0];
  v12 = v5 * (float)a2->var4[0];
  if (v11 >= v12)
    return v11 > v12;
  else
    return -1;
}

uint64_t WrdStyleSheet::getPredefinedStyleInfoReference(uint64_t a1, unsigned int a2)
{
  return a1 + 2 * a2 + 48;
}

void sub_22A26EB1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A26EE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A26EFDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26F0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A26F14C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26F1C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26F2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A26F354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26F55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A26FAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A26FBC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26FC10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A26FCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A26FE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A26FF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A2700B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A270220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A270390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A270450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A270550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A270778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A270954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A270BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2710E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A271234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2712C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A271368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A27142C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2714E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2715AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A271740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A271AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_22A271BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t setBoolValueForEDCell(uint64_t result, char a2)
{
  void *v2;
  void *v3;

  if (result)
  {
    if (*(_DWORD *)result >> 29 == 1)
    {
      if ((*(_DWORD *)result & 0x10000000) != 0)
        *(_BYTE *)(result + 12) = a2;
      else
        *(_BYTE *)(result + 8) = a2;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void setBoolValueForEDCell(EDCellHeader *, BOOL)");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 193, 0, "Invalid Cell Type!");

      return +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
  }
  return result;
}

void sub_22A271CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setBiDi(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x100000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFEFFFF | ((a2 & 1) << 16);
  return this;
}

void sub_22A271DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void PptTextDefaultStyle10Atom::PptTextDefaultStyle10Atom(PptTextDefaultStyle10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BDA40;
  *(_QWORD *)(v2 + 32) = &unk_24F3BDAE8;
  PptCharProperty10::PptCharProperty10((PptCharProperty10 *)(v2 + 48));
}

uint64_t PptTextDefaultStyle10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 344))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultStyle10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EshRecord::getEndOffset(a2);
  PptParserVisitor::parseCharProperty10(this, (PptTextDefaultStyle10Atom *)((char *)a2 + 48));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextDefaultStyle10Atom::~PptTextDefaultStyle10Atom(PptTextDefaultStyle10Atom *this)
{
  *(_QWORD *)this = &off_24F3BDA40;
  *((_QWORD *)this + 4) = &unk_24F3BDAE8;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BDA40;
  *((_QWORD *)this + 4) = &unk_24F3BDAE8;
}

void sub_22A272100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WrdBorder *WrdCharacterProperties::getBorderReference(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 |= 0x40000000000000uLL;
  return this->var7;
}

WrdParagraphProperties *WrdParagraphProperties::setLocked(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x80000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFEFF | ((a2 & 1) << 8);
  return this;
}

void sub_22A272294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PptFontEmbedDataAtom::PptFontEmbedDataAtom(PptFontEmbedDataAtom *this, const EshHeader *a2)
{
  _QWORD *v2;

  PptBinaryDataAtom::PptBinaryDataAtom(this, a2);
  *v2 = &off_24F3B8938;
  v2[4] = &unk_24F3B89F0;
}

uint64_t PptFontEmbedDataAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 112))(v3, a1);
}

uint64_t PptParserVisitor::visit(uint64_t a1, EshRecord *a2)
{
  uint64_t v3;
  int Offset;

  v3 = a1;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*(_QWORD *)(v3 + 24));
  LODWORD(v3) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 40))(*(_QWORD *)(v3 + 8));
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(EshRecord *, _QWORD))(*(_QWORD *)a2 + 160))(a2, (v3 - Offset - 8));
  return 1;
}

void PptFontEmbedDataAtom::~PptFontEmbedDataAtom(PptFontEmbedDataAtom *this)
{
  PptBinaryDataAtom::~PptBinaryDataAtom(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t WrdCharacterProperties::setRightToLeft(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x4000000000uLL;
  *(_DWORD *)(result + 228) = a2;
  return result;
}

uint64_t WrdParagraphProperties::resetStylableProperties(WrdParagraphProperties *this)
{
  __int16 v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  __int16 v7;
  uint64_t result;

  v2 = *((_WORD *)this + 12);
  v3 = *((_QWORD *)this + 2);
  v4 = (unsigned int *)((char *)this + 294);
  v5 = *(_DWORD *)((char *)this + 294);
  v6 = *((_DWORD *)this + 61);
  v7 = *((_WORD *)this + 146);
  result = (*(uint64_t (**)(WrdParagraphProperties *))(*(_QWORD *)this + 16))(this);
  if ((v3 & 2) != 0)
  {
    *((_QWORD *)this + 2) |= 2uLL;
    *v4 = *v4 & 0xFFFFFFFE | v5 & 1;
    if ((v3 & 4) == 0)
    {
LABEL_3:
      if ((v3 & 0x1000000000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_3;
  }
  *((_QWORD *)this + 2) |= 4uLL;
  *v4 = *v4 & 0xFFFFFFFD | (2 * ((v5 >> 1) & 1));
  if ((v3 & 0x1000000000000) == 0)
  {
LABEL_4:
    if ((v3 & 0x2000000000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  *((_QWORD *)this + 2) |= 0x1000000000000uLL;
  *((_DWORD *)this + 61) = v6;
  if ((v3 & 0x2000000000000) == 0)
  {
LABEL_5:
    if ((v3 & 0x4000000000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  *((_QWORD *)this + 2) |= 0x2000000000000uLL;
  *v4 = *v4 & 0xFFEFFFFF | (((v5 >> 20) & 1) << 20);
  if ((v3 & 0x4000000000000) == 0)
  {
LABEL_6:
    if ((v3 & 0x8000000000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  *((_QWORD *)this + 2) |= 0x4000000000000uLL;
  *v4 = *v4 & 0xFFDFFFFF | (((v5 >> 21) & 1) << 21);
  if ((v3 & 0x8000000000000) == 0)
  {
LABEL_7:
    if ((v2 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  *((_QWORD *)this + 2) |= 0x8000000000000uLL;
  *v4 = *v4 & 0xFFBFFFFF | (((v5 >> 22) & 1) << 22);
  if ((v2 & 0x200) == 0)
  {
LABEL_8:
    if ((v2 & 0x400) == 0)
      return result;
    goto LABEL_9;
  }
LABEL_17:
  *((_WORD *)this + 12) |= 0x200u;
  *v4 = *v4 & 0xFBFFFFFF | (((v5 >> 26) & 1) << 26);
  if ((v2 & 0x400) == 0)
    return result;
LABEL_9:
  *((_WORD *)this + 12) |= 0x400u;
  *((_WORD *)this + 146) = v7;
  return result;
}

uint64_t WrdChpParser::applyCMajoritySPRM(WrdChpParser *this, WrdCharacterProperties *a2, WrdCharacterProperties *a3, unsigned __int16 *a4, const unsigned __int8 *a5, unsigned int a6)
{
  uint64_t v12;
  _QWORD *v13;
  unsigned __int16 v14;
  int v15;
  unsigned __int16 v16;
  const unsigned __int8 *v17;
  WrdCharacterProperties *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int16 v36;
  unsigned __int16 v37;

  v12 = (*((uint64_t (**)(WrdCharacterProperties *))a2->var0 + 3))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  v13 = operator new(0x10uLL);
  *v13 = 0;
  v13[1] = 0;
  if ((unsigned __int16)((_WORD)a5 - (_WORD)a4) < a6)
    a6 = (unsigned __int16)((_WORD)a5 - (_WORD)a4);
  if (a6)
  {
    v14 = 0;
    do
    {
      v37 = 0;
      WrdPropertyParser::parseSPRM(a4, (unint64_t)a5, &v37, (uint64_t)v13);
      v15 = 0;
      v16 = v37;
      v17 = (const unsigned __int8 *)a4 + v37;
      v36 = 0;
      if (*(_DWORD *)v13 == 2)
      {
        WrdChpParser::applySprm(this, v12, 0, v13, v17, a5, &v36);
        v15 = v36;
      }
      a4 = (unsigned __int16 *)&v17[v15];
      v14 += v15 + v16;
    }
    while (a6 > v14);
  }
  if (a3)
  {
    v18 = 0;
  }
  else
  {
    v18 = (WrdCharacterProperties *)(*((uint64_t (**)(WrdCharacterProperties *))a2->var0 + 3))(a2);
    (*((void (**)(WrdCharacterProperties *))v18->var0 + 2))(v18);
    a3 = v18;
  }
  v19 = *(_DWORD *)(v12 + 168);
  if (v19 == a3->var23)
  {
    WrdCharacterProperties::clearBold(a2);
    WrdCharacterProperties::clearBold(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 2) != 0)
  {
    WrdCharacterProperties::setBold((uint64_t)a2, v19);
    v20 = WrdCharacterProperties::resolveToAbsolute(a3->var23, *(_DWORD *)(v12 + 168));
    WrdCharacterProperties::setBold((uint64_t)a3, v20);
  }
  v21 = *(_DWORD *)(v12 + 172);
  if (v21 == a3->var24)
  {
    WrdCharacterProperties::clearItalic(a2);
    WrdCharacterProperties::clearItalic(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 4) != 0)
  {
    WrdCharacterProperties::setItalic((uint64_t)a2, v21);
    v22 = WrdCharacterProperties::resolveToAbsolute(a3->var24, *(_DWORD *)(v12 + 172));
    WrdCharacterProperties::setItalic((uint64_t)a3, v22);
  }
  v23 = *(_DWORD *)(v12 + 180);
  if (v23 == a3->var26)
  {
    WrdCharacterProperties::clearStrikethrough(a2);
    WrdCharacterProperties::clearStrikethrough(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x80) != 0)
  {
    WrdCharacterProperties::setStrikethrough((uint64_t)a2, v23);
    v24 = WrdCharacterProperties::resolveToAbsolute(a3->var26, *(_DWORD *)(v12 + 180));
    WrdCharacterProperties::setStrikethrough((uint64_t)a3, v24);
  }
  v25 = *(_DWORD *)(v12 + 176);
  if (v25 == a3->var25)
  {
    WrdCharacterProperties::clearOutline(a2);
    WrdCharacterProperties::clearOutline(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x10) != 0)
  {
    WrdCharacterProperties::setOutline((uint64_t)a2, v25);
    v26 = WrdCharacterProperties::resolveToAbsolute(a3->var25, *(_DWORD *)(v12 + 176));
    WrdCharacterProperties::setOutline((uint64_t)a3, v26);
  }
  v27 = *(_DWORD *)(v12 + 196);
  if (v27 == a3->var30)
  {
    WrdCharacterProperties::clearShadow(a2);
    WrdCharacterProperties::clearShadow(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x100) != 0)
  {
    WrdCharacterProperties::setShadow((uint64_t)a2, v27);
    v28 = WrdCharacterProperties::resolveToAbsolute(a3->var30, *(_DWORD *)(v12 + 196));
    WrdCharacterProperties::setShadow((uint64_t)a3, v28);
  }
  v29 = *(_DWORD *)(v12 + 184);
  if (v29 == a3->var27)
  {
    WrdCharacterProperties::clearSmallCaps(a2);
    WrdCharacterProperties::clearSmallCaps(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x10000000) != 0)
  {
    WrdCharacterProperties::setSmallCaps((uint64_t)a2, v29);
    v30 = WrdCharacterProperties::resolveToAbsolute(a3->var27, *(_DWORD *)(v12 + 184));
    WrdCharacterProperties::setSmallCaps((uint64_t)a3, v30);
  }
  v31 = *(_DWORD *)(v12 + 188);
  if (v31 == a3->var28)
  {
    WrdCharacterProperties::clearCaps(a2);
    WrdCharacterProperties::clearCaps(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x20000000) != 0)
  {
    WrdCharacterProperties::setCaps((uint64_t)a2, v31);
    v32 = WrdCharacterProperties::resolveToAbsolute(a3->var28, *(_DWORD *)(v12 + 188));
    WrdCharacterProperties::setCaps((uint64_t)a3, v32);
  }
  if (*(unsigned __int16 *)(v12 + 248) == a3->var43)
  {
    WrdCharacterProperties::clearFontIndexForASCIIText(a2);
    WrdCharacterProperties::clearFontIndexForASCIIText(a3);
  }
  if (*(unsigned __int16 *)(v12 + 252) == a3->var45)
  {
    WrdCharacterProperties::clearFontIndexForOtherText(a2);
    WrdCharacterProperties::clearFontIndexForOtherText(a3);
  }
  if (*(unsigned __int16 *)(v12 + 312) == a3->var62)
  {
    WrdCharacterProperties::clearFontSize(a2);
    WrdCharacterProperties::clearFontSize(a3);
  }
  v33 = *(_DWORD *)(v12 + 140);
  if (v33 == a3->var16)
  {
    WrdCharacterProperties::clearUnderline(a2);
    WrdCharacterProperties::clearUnderline(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x100000) != 0)
  {
    WrdCharacterProperties::setUnderline((uint64_t)a2, v33);
    WrdCharacterProperties::setUnderline((uint64_t)a3, *(_DWORD *)(v12 + 140));
  }
  if (*(unsigned __int16 *)(v12 + 30) == *((unsigned __int16 *)&a3->var2 + 7)
    && *(unsigned __int16 *)(v12 + 32) == a3->var3.var0
    && *(unsigned __int16 *)(v12 + 34) == a3->var3.var1
    && *(unsigned __int16 *)(v12 + 36) == a3->var3.var2)
  {
    WrdCharacterProperties::clearColor(a2);
    WrdCharacterProperties::clearColor(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x10000) != 0)
  {
    *(_QWORD *)WrdCharacterProperties::getColorReference(a2) = *(_QWORD *)(v12 + 30);
    *(_QWORD *)WrdCharacterProperties::getColorReference(a3) = *(_QWORD *)(v12 + 30);
  }
  v34 = *(_DWORD *)(v12 + 128);
  if (v34 == a3->var13)
  {
    WrdCharacterProperties::clearColor97(a2);
    WrdCharacterProperties::clearColor97(a3);
  }
  else if ((*(_QWORD *)(v12 + 16) & 0x20000) != 0)
  {
    WrdCharacterProperties::setColor97((uint64_t)a2, v34);
    WrdCharacterProperties::setColor97((uint64_t)a3, *(_DWORD *)(v12 + 128));
  }
  if (v18)
    (*((void (**)(WrdCharacterProperties *))v18->var0 + 1))(v18);
  if (v13)
    MEMORY[0x22E2DD408](v13, 0x1000C4099076E91);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

void sub_22A272ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22A272B68()
{
  __cxa_end_catch();
  JUMPOUT(0x22A272B04);
}

void sub_22A272B78()
{
  JUMPOUT(0x22A272B04);
}

WrdCharacterProperties *WrdCharacterProperties::clearBold(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~2uLL;
  this->var23 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearItalic(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~4uLL;
  this->var24 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearStrikethrough(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x80uLL;
  this->var26 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearOutline(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x10uLL;
  this->var25 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearShadow(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x100uLL;
  this->var30 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearSmallCaps(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x10000000uLL;
  this->var27 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearCaps(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x20000000uLL;
  this->var28 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearFontSize(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x1000uLL;
  this->var62 = 20;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearUnderline(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x100000uLL;
  this->var16 = 0;
  return this;
}

uint64_t WrdCharacterProperties::clearColor(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x10000uLL;
  return WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var2 + 14);
}

WrdCharacterProperties *WrdCharacterProperties::clearColor97(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x20000uLL;
  this->var13 = 0;
  return this;
}

uint64_t WrdPropertyParser::parseSPRM(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 8) = result;
  *(_WORD *)(a2 + 10) = result & 0x1FF;
  *(_BYTE *)(a2 + 12) = (result & 0x200) != 0;
  *(_DWORD *)a2 = (result >> 10) & 7;
  *(_DWORD *)(a2 + 4) = result >> 13;
  *(_BYTE *)(a2 + 13) = 0;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableTopCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x80u;
  *((_WORD *)this + 181) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableTopCellSpacingUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x8000000uLL;
  *(_DWORD *)(result + 180) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableLeftCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x100u;
  *((_WORD *)this + 182) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableBottomCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x200u;
  *((_WORD *)this + 183) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableRightCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x400u;
  *((_WORD *)this + 184) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableRightCellSpacingUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x40000000uLL;
  *(_DWORD *)(result + 192) = a2;
  return result;
}

uint64_t WrdTableProperties::setVerticalPosition(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x8000000000uLL;
  *(_DWORD *)(result + 228) = a2;
  return result;
}

uint64_t WrdTableProperties::setHorizontalPosition(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x10000000000uLL;
  *(_DWORD *)(result + 232) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setAbsoluteVerticalPosition(WrdTableProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x400000000000uLL;
  *((_DWORD *)this + 77) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setLeftDistanceFromText(WrdTableProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x800000000000uLL;
  *((_DWORD *)this + 78) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setRightDistanceFromText(WrdTableProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x2000000000000uLL;
  *((_DWORD *)this + 80) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setPageSetupLinePitch(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x400000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFBFFFF | ((a2 & 1) << 18);
  return this;
}

void PptAnimChartBuildAtom::PptAnimChartBuildAtom(PptAnimChartBuildAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B55B0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5658;
}

uint64_t PptAnimChartBuildAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 936))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimChartBuildAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_BYTE *)a2 + 52) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimChartBuildAtom::~PptAnimChartBuildAtom(PptAnimChartBuildAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

char *SsrwOOStream::readCsData(SsrwOOStream *this, CsData *a2, unsigned int a3)
{
  char *result;
  _DWORD *exception;
  unsigned int v8;

  v8 = a3;
  result = CsData::setLength(a2, a3);
  if (a3)
  {
    result = (char *)(*((uint64_t (**)(SsrwOOStream *, char *, unsigned int *))this->var0 + 7))(this, a2->var1, &v8);
    if (v8 != a2->var0)
    {
      CsData::setLength(a2, 0);
      exception = __cxa_allocate_exception(4uLL);
      *exception = 19;
    }
  }
  return result;
}

char *CsData::setLength(CsData *this, unsigned int a2)
{
  char *var1;
  char *result;

  var1 = this->var1;
  if (var1)
    MEMORY[0x22E2DD3F0](var1, 0x1000C8077774924);
  this->var1 = 0;
  this->var0 = a2;
  if (a2)
    result = (char *)operator new[](a2);
  else
    result = 0;
  this->var1 = result;
  return result;
}

uint64_t **EshOpt::takeDataProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t *v6;
  unsigned int v7;
  CsData *v8;
  uint64_t **result;
  unsigned int v10;
  unsigned int *v11;

  v6 = *(uint64_t **)(a1 + 40);
  if (!v6)
    goto LABEL_9;
  while (1)
  {
    v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2)
      break;
LABEL_5:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_9;
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_5;
  }
  v10 = a2;
  v11 = &v10;
  v8 = (CsData *)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)[5];
  if (v8)
  {
    CsData::~CsData(v8);
    MEMORY[0x22E2DD408]();
  }
LABEL_9:
  v10 = a2;
  v11 = &v10;
  result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11);
  result[5] = a3;
  result[6] = 0;
  return result;
}

CsData **ChAutoPtr<CsData>::~ChAutoPtr(CsData **a1)
{
  CsData *v2;

  v2 = *a1;
  if (v2)
  {
    CsData::~CsData(v2);
    MEMORY[0x22E2DD408]();
  }
  *a1 = 0;
  return a1;
}

uint64_t *EshShapeImageData::getQuicktimeData(EshShapeImageData *this)
{
  return *EshOpt::getProperty(*((_QWORD *)this + 2) + 64, 0x112u);
}

void CsData::~CsData(CsData *this)
{
  char *var1;

  var1 = this->var1;
  if (var1)
    MEMORY[0x22E2DD3F0](var1, 0x1000C8077774924);
  this->var1 = 0;
}

uint64_t EshPath::getPathType(EshPath *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x144u);
}

void sub_22A2736A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A273840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartPicF::XlChartPicF(XlChartPicF *this)
{
  uint64_t v1;

  XlRecord::XlRecord((XlRecord *)this, 4156, 14, 0);
  *(_QWORD *)v1 = &off_24F3A8AA0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v1 + 32) = 1;
  *(_BYTE *)(v1 + 36) = 0;
}

void XlChartBinaryReader::readPictureFormat(XlChartBinaryReader *this, XlChartPicF *a2)
{
  XlHeader *v4;
  int var1;
  uint64_t v7;
  int RecordDataOffset;

  v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((_BYTE *)this + 444));
  while (1)
  {
    var1 = (unsigned __int16)v4->var1;
    if (var1 != 60 && var1 != 4198)
      break;
    XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((_BYTE *)this + 444));
  }
  if (var1 == 4147)
  {
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((_BYTE *)this + 444));
    (*(void (**)(_QWORD, XlChartPicF *))(**((_QWORD **)this + 167) + 2096))(*((_QWORD *)this + 167), a2);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((_BYTE *)this + 444));
  }
  else
  {
    v7 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
    RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 16))(v7, -RecordDataOffset, 1);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A2739A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(exception_object);
}

void XlChartDateAxis::XlChartDateAxis(XlChartDateAxis *this)
{
  _QWORD *v1;

  XlChartCategoryAxis::XlChartCategoryAxis(this);
  *v1 = &off_24F3A9100;
  v1[22] = 0;
}

uint64_t XlChartDateAxis::takeDateSpec(XlChartDateAxis *this, XlChartAxCext *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 22);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 22) = a2;
  return result;
}

uint64_t XlChartDateAxis::getType(XlChartDateAxis *this)
{
  return 2;
}

void sub_22A273BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t XlChartAxCext::isAutoMajor(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 2) & 1;
}

uint64_t XlChartAxCext::isAutoMinor(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 3) & 1;
}

void XlChartDateAxis::~XlChartDateAxis(XlChartPlotAxis *this)
{
  XlChartLineStyle *var3;

  this->var0 = (void **)&off_24F3A9100;
  var3 = this[1].var3;
  if (var3)
    (*((void (**)(XlChartLineStyle *))var3->var0 + 1))(var3);
  this[1].var3 = 0;
  XlChartCategoryAxis::~XlChartCategoryAxis(this);
  JUMPOUT(0x22E2DD408);
}

{
  XlChartLineStyle *var3;

  this->var0 = (void **)&off_24F3A9100;
  var3 = this[1].var3;
  if (var3)
    (*((void (**)(XlChartLineStyle *))var3->var0 + 1))(var3);
  this[1].var3 = 0;
  XlChartCategoryAxis::~XlChartCategoryAxis(this);
}

void sub_22A273E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void XlChartGelFrame::XlChartGelFrame(XlChartGelFrame *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A88A0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 28) = 0;
}

uint64_t XlChartParserVisitor::visit(unsigned __int8 **this, XlChartGelFrame *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int DataAndContinues;
  unsigned __int8 *v8;
  unsigned int v10;

  XlParserVisitor::beginRead((XlParserVisitor *)this);
  v10 = *((_DWORD *)a2 + 2);
  v4 = v10;
  this[3] = 0;
  if ((_DWORD)v4)
  {
    if (*((_BYTE *)a2 + 28))
    {
      v5 = 0;
      do
      {
        do
        {
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)this[2] + 16))(this[2], v4, 1);
          v5 += v4;
          v6 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this[2] + 72))(this[2]);
          v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this[2] + 80))(this[2]);
        }
        while (v6 == 4198);
      }
      while ((unsigned __int16)v6 == 60);
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)this[2] + 16))(this[2], 4294967292, 1);
      v10 = v5;
      DataAndContinues = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this[2] + 40))(this[2]);
    }
    else
    {
      DataAndContinues = XlParserVisitor::getDataAndContinues((XlParserVisitor *)this, &v10, 4198);
      v5 = v10;
    }
    *((_DWORD *)a2 + 2) = DataAndContinues - *((_DWORD *)this + 18);
    v8 = this[3];
  }
  else
  {
    v5 = 0;
    v8 = 0;
  }
  XlChartGelFrame::setBinaryData(a2, v8, v5);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlBinaryReader::getEshReader(XlBinaryReader *this)
{
  return (uint64_t)this + 40;
}

void XlChartGelFrame::~XlChartGelFrame(XlChartGelFrame *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A88A0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A88A0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x22E2DD408);
}

void XlChartPicF::~XlChartPicF(XlChartPicF *this)
{
  JUMPOUT(0x22E2DD408);
}

_xmlAttr *CXFindAttribute(_xmlNode *a1, xmlChar *str2)
{
  _xmlAttr *i;
  const xmlChar *name;

  if (!a1)
    return 0;
  for (i = a1->properties; i; i = i->next)
  {
    name = i->name;
    if (name && xmlStrEqual(name, str2))
      break;
  }
  return i;
}

void sub_22A2741D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_22A274404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A2745A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A274768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A27488C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A274998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A274F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A2752C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_22A2753E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A27554C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A2756F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A2760FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, void *a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;

  if (a2 == 1)
  {
    v25 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x22A276048);
  }

  _Unwind_Resume(a1);
}

void sub_22A2764E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A2766D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v7;

  _Unwind_Resume(a1);
}

void sub_22A276770()
{
  JUMPOUT(0x22A27675CLL);
}

void sub_22A276938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A276A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A276D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A276FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A277160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A277230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2773DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A277498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2777EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A277848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A277ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A2780B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A278424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A27848C()
{
  JUMPOUT(0x22A278480);
}

void sub_22A278504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2787EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A278B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A278EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A279158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A279260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A27932C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A2794A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A279CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A279F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27A26C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27A9A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_xmlNode *CXFindRequiredChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlNode *v4;

  v4 = pCXFindChild(a1, a2, a3);
  if (!v4)
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("TCXmlException"), CFSTR("Could not find node: %s"), a3);
  return v4;
}

void sub_22A27B100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A27B3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27B54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27B634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A27B6C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27B724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27B798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A27B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A27B878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A27B9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27BAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27BD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A27C24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27C3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A27C4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27C56C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27C770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A27C8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A27C964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27CAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A27CBCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_xmlNode *CXFirstChildNamed(_xmlNode *a1, xmlChar *str1)
{
  _xmlNode *i;

  if (!a1)
    return 0;
  for (i = a1->children; i; i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE && xmlStrEqual(str1, i->name))
      break;
  }
  return i;
}

void sub_22A27D530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, EDValue a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A27D830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27D8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A27DD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27DFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A27E220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A27E394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A27E420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A27E4BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27E534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27E5C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27E660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id link3DTokens(EFormula *a1, __int16 a2, const EFRefTok *a3)
{
  id v5;
  id v6;

  v5 = objc_alloc_init(-[EFormula formulaClass](a1, "formulaClass"));
  v6 = v5;
  if (a3->type == 37)
  {
    addArea3DOperandWithSheet(v5, 1, a2, *(_WORD *)a3->data, *(_WORD *)&a3->data[2], *(_WORD *)&a3->data[4], *(_WORD *)&a3->data[6]);
  }
  else if (a3->type == 36)
  {
    addRef3DOperandWithSheet(v5, 1, a2, *(_WORD *)a3->data, *(_WORD *)&a3->data[2], 0);
  }
  return v6;
}

void sub_22A27E870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A27E950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A27EB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A27EC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  void *v9;
  void *v10;
  void *v11;

  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_22A27EDA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

_xmlNode *CXNextSiblingNamed(_xmlNode *a1, xmlChar *str1)
{
  _xmlNode *i;

  if (!a1)
    return 0;
  for (i = a1->next; i; i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE && xmlStrEqual(str1, i->name))
      break;
  }
  return i;
}

void sub_22A27EF30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A27F1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A27F370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_22A27F4EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A27FE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A28030C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A280474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A280644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A280798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A280998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A280A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A280E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A280F20()
{
  JUMPOUT(0x22A280F14);
}

void sub_22A280FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A281354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A2814E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28158C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2818DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A281A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A281B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A281C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A281CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A281FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A28215C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2822E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void PptTextDefaultStyle9Atom::PptTextDefaultStyle9Atom(PptTextDefaultStyle9Atom *this, const EshHeader *a2)
{
  uint64_t v3;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(_BYTE *)(v3 + 44) = 0;
  *(_QWORD *)v3 = &off_24F3BD850;
  *(_QWORD *)(v3 + 32) = &unk_24F3BD8F8;
  PptCharProperty9::PptCharProperty9((PptCharProperty9 *)(v3 + 46));
  PptParaProperty9::PptParaProperty9((PptParaProperty9 *)this + 4);
}

uint64_t PptTextDefaultStyle9Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 336))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptParaProperty9 *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*(_DWORD *)&a2[1].var1 + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EshRecord::getEndOffset((EshRecord *)a2);
  PptParserVisitor::parseCharProperty9(this, (PptCharProperty9 *)&a2[3].var3.var1);
  PptParserVisitor::parseParaProperty9(this, a2 + 4);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptTextDefaultStyle9Atom::~PptTextDefaultStyle9Atom(PptTextDefaultStyle9Atom *this)
{
  *(_QWORD *)this = &off_24F3BD850;
  *((_QWORD *)this + 4) = &unk_24F3BD8F8;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BD850;
  *((_QWORD *)this + 4) = &unk_24F3BD8F8;
}

uint64_t XlFormatParser::readBracketToken(XlFormatParser *this, XlFmtPtg *a2)
{
  int v4;
  unsigned int v5;
  unsigned int Character;
  int v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  unsigned __int16 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  OcText *v28;
  OcText *v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  OcText *v35;
  uint64_t v36;
  int v37;
  const unsigned __int8 *v38;
  char isSingleByteEncoding;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *exception;
  unsigned int v45;
  __int16 v46;
  char v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)this + 6);
  v5 = v4 + 1;
  Character = OcText::getCharacter(*(OcText **)this, v4 + 1);
  v7 = Character;
  if (Character <= 0x7F)
  {
    if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * Character + 60) & 0x100) != 0)
      goto LABEL_3;
  }
  else if (__maskrune(Character, 0x100uLL))
  {
LABEL_3:
    switch(v7)
    {
      case 's':
        v11 = 0;
        *((_BYTE *)this + 28) = 1;
        v5 = v4 + 2;
        do
        {
          ++v11;
          v12 = OcText::getCharacter(*(OcText **)this, v5++);
        }
        while (v12 == 115);
        *((double *)a2 + 2) = (double)v11;
        v10 = 30;
        goto LABEL_110;
      case 'm':
        v13 = 0;
        *((_BYTE *)this + 28) = 1;
        v5 = v4 + 2;
        do
        {
          ++v13;
          v14 = OcText::getCharacter(*(OcText **)this, v5++);
        }
        while (v14 == 109);
        *((double *)a2 + 2) = (double)v13;
        v10 = 28;
        goto LABEL_110;
      case 'h':
        v8 = 0;
        *((_BYTE *)this + 28) = 1;
        v5 = v4 + 2;
        do
        {
          ++v8;
          v9 = OcText::getCharacter(*(OcText **)this, v5++);
        }
        while (v9 == 104);
        *((double *)a2 + 2) = (double)v8;
        v10 = 29;
        goto LABEL_110;
    }
    v15 = OcText::getCharacter(*(OcText **)this, v4 + 1);
    v16 = OcText::getCharacter(*(OcText **)this, v4 + 2);
    v17 = OcText::getCharacter(*(OcText **)this, v4 + 3);
    v18 = v15 & 0xFFFFFFDF;
    v19 = v16 & 0xFFFFFFDF;
    v20 = (v15 & 0xFFFFFFDF) == 0x42 && v19 == 76;
    v21 = v20;
    v22 = v17 & 0xFFFFFFDF;
    if (v20 && v22 == 65)
    {
      v10 = 0;
      LOWORD(v5) = v4 + 7;
LABEL_110:
      *(_DWORD *)a2 = v10;
      return (unsigned __int16)(v5 - *((_DWORD *)this + 6));
    }
    if (v22 != 85)
      v21 = 0;
    if (v21 == 1)
    {
      LOWORD(v5) = v4 + 6;
      v10 = 4;
      goto LABEL_110;
    }
    if ((v15 | 0x20) == 0x63)
    {
      if (v19 == 89 && v22 == 65)
      {
        LOWORD(v5) = v4 + 6;
        v10 = 7;
        goto LABEL_110;
      }
      if (v15 == 67 && v16 == 111 && v17 == 108)
      {
        v48 = OcText::getCharacter(*(OcText **)this, v4 + 6);
        v49 = 0;
        LOWORD(v5) = v4 + 7;
        v45 = OcText::getCharacter(*(OcText **)this, v4 + 7);
        v46 = 8;
        if (v45 != 93)
        {
          if (v45 > 0xFF || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v45 + 60) & 0x400) == 0)
            goto LABEL_79;
          v49 = v45;
          v46 = 9;
        }
        LOWORD(v5) = v4 + v46;
        *(_DWORD *)a2 = 8;
LABEL_79:
        *((double *)a2 + 2) = atof(&v48);
        goto LABEL_80;
      }
    }
    else
    {
      if (v18 == 71 && v19 == 82 && v22 == 69)
      {
        LOWORD(v5) = v4 + 7;
        v10 = 3;
        goto LABEL_110;
      }
      if (v18 == 77 && v19 == 65 && v22 == 71)
      {
        LOWORD(v5) = v4 + 9;
        v10 = 6;
        goto LABEL_110;
      }
      if (v18 == 82 && v19 == 69 && v22 == 68)
      {
        LOWORD(v5) = v4 + 5;
        v10 = 2;
        goto LABEL_110;
      }
      if (v18 == 87 && v19 == 72 && v22 == 73)
      {
        LOWORD(v5) = v4 + 7;
        v10 = 1;
        goto LABEL_110;
      }
      if (v18 == 89 && v19 == 69 && v22 == 76)
      {
        LOWORD(v5) = v4 + 8;
        v10 = 5;
        goto LABEL_110;
      }
    }
    if (v7 != 93)
    {
      do
        ++v5;
      while (OcText::getCharacter(*(OcText **)this, v5) != 93);
    }
LABEL_36:
    LOWORD(v5) = v5 + 1;
    v10 = 59;
    goto LABEL_110;
  }
  if (v7 > 60)
  {
    switch(v7)
    {
      case '=':
        v5 = v4 + 2;
        v25 = 12;
        break;
      case '>':
        v5 = v4 + 2;
        v26 = OcText::getCharacter(*(OcText **)this, v4 + 2);
        if (v26 <= 0xFF)
          v27 = (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v26 + 60) >> 10) & 1;
        else
          LOBYTE(v27) = 0;
        v25 = 14;
        if (v26 != 45 && (v27 & 1) == 0)
        {
          if (v26 != 61)
            goto LABEL_81;
          v5 = v4 + 3;
          v25 = 11;
        }
        break;
      case ']':
        goto LABEL_36;
      default:
        do
LABEL_35:
          ++v5;
        while (OcText::getCharacter(*(OcText **)this, v5) != 93);
        goto LABEL_36;
    }
LABEL_72:
    *(_DWORD *)a2 = v25;
    v41 = OcText::getCharacter(*(OcText **)this, v5);
    if (v41 == 93)
    {
      v42 = 0;
    }
    else
    {
      v43 = 0;
      do
      {
        if (v43 == 63)
          goto LABEL_81;
        v42 = v43 + 1;
        *(&v48 + v43) = v41;
        v41 = OcText::getCharacter(*(OcText **)this, v5 + v43 + 1);
        v43 = v42;
      }
      while (v41 != 93);
      LOWORD(v5) = v5 + v42;
    }
    *(&v48 + v42) = 0;
    LOWORD(v5) = v5 + 1;
    goto LABEL_79;
  }
  if (v7 != 36)
  {
    if (v7 != 60)
      goto LABEL_35;
    v5 = v4 + 2;
    v23 = OcText::getCharacter(*(OcText **)this, v4 + 2);
    if (v23 <= 0xFF)
      v24 = (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v23 + 60) >> 10) & 1;
    else
      LOBYTE(v24) = 0;
    v25 = 13;
    if (v23 != 45 && (v24 & 1) == 0)
    {
      if (v23 == 62)
      {
        v5 = v4 + 3;
        v25 = 9;
      }
      else
      {
        if (v23 != 61)
          goto LABEL_81;
        v5 = v4 + 3;
        v25 = 10;
      }
    }
    goto LABEL_72;
  }
  v28 = (OcText *)operator new(0x30uLL);
  OcText::OcText(v28);
  *((_QWORD *)this + 1) = v28;
  v29 = *(OcText **)this;
  v28->var1 = *(_DWORD *)(*(_QWORD *)this + 8);
  v30 = OcText::getCharacter(v29, v4 + 2);
  if (v30 == 93)
  {
    v31 = 0;
    LOWORD(v5) = v4 + 3;
LABEL_65:
    *((_QWORD *)a2 + 2) = 0x4042000000000000;
    v34 = 51;
    goto LABEL_66;
  }
  v32 = v30;
  v31 = 0;
  do
    v33 = v4 + 3 + v31++;
  while (OcText::getCharacter(*(OcText **)this, v33) != 93);
  LOWORD(v5) = v4 + v31 + 3;
  if (v32 != 45)
    goto LABEL_65;
  v34 = 78;
LABEL_66:
  *(_DWORD *)a2 = v34;
  v35 = (OcText *)*((_QWORD *)this + 1);
  if (v31)
  {
    v36 = *(_QWORD *)(*(_QWORD *)this + 24);
    v37 = *((_DWORD *)this + 6) + 2;
    v38 = (const unsigned __int8 *)(v36
                                  + (v37 << (OcText::isSingleByteEncoding(*(_DWORD *)(*(_QWORD *)this + 8)) ^ 1)));
    isSingleByteEncoding = OcText::isSingleByteEncoding(*(_DWORD *)(*(_QWORD *)this + 8));
    OcText::copyBuffer(v35, v38, v31 << (isSingleByteEncoding ^ 1));
    v35 = (OcText *)*((_QWORD *)this + 1);
    v35->var3 = v31;
  }
  v40 = *((_QWORD *)a2 + 1);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  *((_QWORD *)a2 + 1) = v35;
  *((_QWORD *)this + 1) = 0;
LABEL_80:
  if (*(_DWORD *)a2 == 255)
  {
LABEL_81:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  return (unsigned __int16)(v5 - *((_DWORD *)this + 6));
}

void sub_22A282B3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PptExWaveAudioEmbeddedAtom::PptExWaveAudioEmbeddedAtom(PptExWaveAudioEmbeddedAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8840;
  *(_QWORD *)(v2 + 32) = &unk_24F3B88E8;
  *(_QWORD *)(v2 + 48) = 0xE8D8000000000000;
}

uint64_t PptExWaveAudioEmbeddedAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 608))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExWaveAudioEmbeddedAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A28301C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void PptExWaveAudioEmbeddedAtom::~PptExWaveAudioEmbeddedAtom(PptExWaveAudioEmbeddedAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

char *XlCf::takeSecondFmla(XlCf *this, char *a2, signed __int16 a3)
{
  char *result;

  result = this->var8;
  if (result)
    result = (char *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  this->var8 = a2;
  this->var5 = a3;
  return result;
}

XlCell *XlCell::setBoolean(XlCell *this, BOOL a2)
{
  XlCell *v3;

  v3 = this;
  this->var9 = 0;
  this->var7 = 255;
  this->var5 = 0.0;
  if (this->var10)
  {
    this = (XlCell *)this->var6;
    if (this)
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
  }
  v3->var6 = 0;
  v3->var10 = 0;
  v3->var4 = 2;
  v3->var9 = a2;
  return this;
}

void XlAutoFilterInfo::XlAutoFilterInfo(XlAutoFilterInfo *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AB7A0;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlAutoFilterInfo::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 464))(a2, a1);
}

void XlAutoFilterInfo::~XlAutoFilterInfo(XlAutoFilterInfo *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t WrdTableProperties::getShadingReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x10uLL;
  return *((_QWORD *)this + 6);
}

void sub_22A283628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A283820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A283DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A283ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A284080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A2844BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

double TSURectWithCenterAndSize(double a1, double a2, double a3)
{
  return a1 - a3 * 0.5;
}

void sub_22A284970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A284CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A284DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A284EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A285110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2851A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2852E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A285640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2857A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A285874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A285FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A2860F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float ODIHRangeVector::minDistanceTo(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  float v7;

  v3 = (unint64_t)(a2[1] - *a2) >> 3;
  if (((a1[1] - *a1) >> 3) < v3)
    LODWORD(v3) = (a1[1] - *a1) >> 3;
  if (!(_DWORD)v3)
    return 0.0;
  v4 = 0;
  v5 = 8 * v3;
  result = 0.0;
  do
  {
    v7 = *(float *)(*a1 + v4) + (float)(*(float *)(*a1 + v4 + 4) * 0.5);
    v2 = *a2;
    if ((float)((float)(*(float *)(v2 + v4) - (float)(*(float *)(v2 + v4 + 4) * 0.5)) - v7) < result || v4 == 0)
      result = (float)(*(float *)(v2 + v4) - (float)(*(float *)(v2 + v4 + 4) * 0.5)) - v7;
    v4 += 8;
  }
  while (v5 != v4);
  return result;
}

_QWORD *ODIHRangeVector::operator+=(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  void *v15;
  void *v16;
  float *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v4 = (char *)*a1;
  v5 = (char *)a1[1];
  v6 = (unint64_t)&v5[-*a1] >> 3;
  v8 = *a2;
  v7 = a2[1];
  v9 = (unint64_t)(v7 - *a2) >> 3;
  if (v6 >= v9)
    v10 = (unint64_t)(v7 - *a2) >> 3;
  else
    v10 = (unint64_t)&v5[-*a1] >> 3;
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(float *)&v4[v11] - (float)(*(float *)&v4[v11 + 4] * 0.5);
      v14 = *(float *)(v8 + v11) + (float)(*(float *)(v8 + v11 + 4) * 0.5);
      if (v14 < v13)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ODIHRangeVector &ODIHRangeVector::operator+=(const ODIHRangeVector &)");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Diagrams/Importer/ODIHierarchy.mm");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 88, 0, "Incorrect range structure");

        +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
        v4 = (char *)*a1;
        v5 = (char *)a1[1];
        v8 = *a2;
        v7 = a2[1];
      }
      v17 = (float *)&v4[v11];
      *v17 = (float)(v13 + v14) * 0.5;
      v17[1] = v14 - v13;
      ++v12;
      v6 = (unint64_t)(v5 - v4) >> 3;
      v9 = (unint64_t)(v7 - v8) >> 3;
      if (v6 >= v9)
        v18 = v9;
      else
        v18 = v6;
      v11 += 8;
    }
    while (v12 < v18);
  }
  if (v6 < v9)
  {
    v19 = a1 + 2;
    v20 = v6;
    do
    {
      if ((unint64_t)v5 >= *v19)
      {
        v21 = (unint64_t)&v5[-*a1];
        v22 = (*v19 - *a1) >> 3;
        v23 = 2 * v22;
        if (2 * (int)v22 <= (v21 >> 3) + 1)
          v23 = (v21 >> 3) + 1;
        if (v22 >= 0x7FFFFFFF)
          v24 = 0xFFFFFFFFLL;
        else
          v24 = v23;
        if ((_DWORD)v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 2), v24);
          v27 = v26;
        }
        else
        {
          v25 = 0;
          v27 = 0;
        }
        v28 = &v25[v21 & 0x7FFFFFFF8];
        *(_QWORD *)v28 = *(_QWORD *)(v8 + 8 * v20);
        v5 = v28 + 8;
        v30 = (char *)*a1;
        v29 = (char *)a1[1];
        if (v29 != (char *)*a1)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *((_QWORD *)v28 - 1) = v31;
            v28 -= 8;
          }
          while (v29 != v30);
          v29 = (char *)*a1;
        }
        *a1 = v28;
        a1[1] = v5;
        a1[2] = &v25[8 * v27];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v5 = *(_QWORD *)(v8 + 8 * v20);
        v5 += 8;
      }
      a1[1] = v5;
      ++v20;
      v8 = *a2;
    }
    while (v20 < ((unint64_t)(a2[1] - *a2) >> 3));
  }
  return a1;
}

void sub_22A2863D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float ODIHRangeVector::boundingRange(float **this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  unint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v10;

  v1 = **this;
  v2 = (*this)[1] * 0.5;
  v3 = v1 - v2;
  v4 = v1 + v2;
  v5 = (char *)this[1] - (char *)*this;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v6 = (v5 >> 3);
    v7 = *this + 1;
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7 * 0.5;
      if (v3 >= (float)(v8 - v9))
        v3 = v8 - v9;
      v10 = v8 + v9;
      if (v4 < v10)
        v4 = v10;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return (float)(v4 + v3) * 0.5;
}

void sub_22A2865E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2866F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A286798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A286F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_22A287264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t WrdTableCellDescriptor::setTopPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  *(_DWORD *)result = v3 | 0x1000000;
  *(_WORD *)(result + 108) = a2;
  return result;
}

int *WrdTableCellDescriptor::setTopPaddingUnit(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  *result = v3 | 0x8000;
  result[19] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setLeftPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  *(_DWORD *)result = v3 | 0x800000;
  *(_WORD *)(result + 106) = a2;
  return result;
}

int *WrdTableCellDescriptor::setLeftPaddingUnit(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  *result = v3 | 0x4000;
  result[18] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setRightPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  *(_DWORD *)result = v3 | 0x4000000;
  *(_WORD *)(result + 112) = a2;
  return result;
}

int *WrdTableCellDescriptor::setRightPaddingUnit(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  *result = v3 | 0x20000;
  result[21] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setBottomPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  *(_DWORD *)result = v3 | 0x2000000;
  *(_WORD *)(result + 110) = a2;
  return result;
}

int *WrdTableCellDescriptor::setBottomPaddingUnit(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  *result = v3 | 0x10000;
  result[20] = a2;
  return result;
}

void XlExternName::XlExternName(XlExternName *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC3A0;
  *(_WORD *)(v2 + 22) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 28) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 20) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExternName *a2)
{
  int v4;
  int16x8_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  XlString *v9;
  char v10;
  int ContentType;
  unsigned int v12;
  void *v13;
  __int16 v14;
  unsigned __int16 v15;
  int v16;
  XlOper *v17;
  XlOper *v19;
  unsigned __int16 v20[2];

  v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 16) = v6 & 1;
  v5.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 17) = vmovn_s16(v5).u32[0];
  *((_WORD *)a2 + 11) = (v6 >> 5) & 0x3FF;
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 28) = v7;
  if (v7)
  {
    v8 = v7;
    v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((_QWORD *)this + 4) = v9;
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v10, v4, *((XlString **)this + 4));
    XlChartPlot::takeDropLineFormat(a2, *((XlChartLineStyle **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  ContentType = XlExternName::getContentType(a2);
  if (ContentType == 1)
  {
    if (!*((_BYTE *)a2 + 19)
      && v4 - (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) >= 3)
    {
      *((_WORD *)a2 + 28) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2))
                          + 1;
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
      *((_WORD *)a2 + 29) = v14 + 1;
      v15 = *((_WORD *)a2 + 28) * (v14 + 1);
      if (v15)
      {
        v16 = 0;
        do
        {
          v17 = (XlOper *)operator new(0x20uLL);
          XlOper::XlOper(v17);
          v19 = v17;
          (*(void (**)(XlParserVisitor *, XlOper *))(*(_QWORD *)this + 1584))(this, v17);
          XlExternName::appendOperand(a2, v19);
          v19 = 0;
          ChAutoPtr<XlOper>::~ChAutoPtr(&v19);
          ++v16;
        }
        while ((unsigned __int16)v16 < v15);
      }
    }
  }
  else if (!ContentType)
  {
    v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    *(_DWORD *)v20 = v12;
    if (v12)
    {
      v13 = operator new[](v12);
      *((_QWORD *)this + 3) = v13;
      (*(void (**)(_QWORD, void *, unsigned __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v13, v20);
      XlExternName::setNameDefinition(a2, *((unsigned __int8 **)this + 3), v20[0]);
      *((_QWORD *)this + 3) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A2878DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlExternName::getContentType(XlExternName *this)
{
  if (!*((_BYTE *)this + 17)
    && !*((_BYTE *)this + 18)
    && !*((_BYTE *)this + 19)
    && !*((_BYTE *)this + 20)
    && !*((_WORD *)this + 11))
  {
    return 0;
  }
  if (*((_BYTE *)this + 16))
    return 3;
  if (!*((_BYTE *)this + 20))
    return 1;
  if (*((_BYTE *)this + 19))
    return 3;
  return 2;
}

uint64_t XlExternName::setNameDefinition(XlExternName *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 6) = a2;
  *((_WORD *)this + 20) = a3;
  return result;
}

void XlSxExt::appendODBC(XlSxExt *this, XlSxString *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 9);
  v4 = (char *)this + 72;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 7);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 7);
    v19 = (char *)*((_QWORD *)this + 8);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 7) = v17;
    *((_QWORD *)this + 8) = v8;
    *((_QWORD *)this + 9) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 8) = v8;
}

uint64_t XlLink::getExternalName(XlLink *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 7);
  if (((unint64_t)(*((_QWORD *)this + 8) - v2) >> 3) <= a2
    || (result = *(_QWORD *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return result;
}

void XlChartLegendXn::XlChartLegendXn(XlChartLegendXn *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8960;
  *(_DWORD *)(v2 + 16) = 0;
}

uint64_t XlChartLegendXn::isLabel(XlChartLegendXn *this)
{
  return (*((unsigned __int16 *)this + 9) >> 1) & 1;
}

void XlChartDataSeries::takeCustomLegend(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a2)
  {
    v6 = a1[24];
    v4 = (uint64_t)(a1 + 24);
    v5 = v6;
    v7 = *(_QWORD **)(v4 - 8);
    if ((unint64_t)v7 >= v6)
    {
      v9 = a1[22];
      v10 = (unint64_t)v7 - v9;
      v11 = (v5 - v9) >> 3;
      v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1)
        v12 = (v10 >> 3) + 1;
      if (v11 >= 0x7FFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
        v16 = v15;
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = &v14[v10 & 0x7FFFFFFF8];
      v18 = &v14[8 * v16];
      *(_QWORD *)v17 = a2;
      v8 = v17 + 8;
      v20 = (char *)a1[22];
      v19 = (char *)a1[23];
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)a1[22];
      }
      a1[22] = v17;
      a1[23] = v8;
      a1[24] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    a1[23] = v8;
  }
}

void XlChartLegendXn::~XlChartLegendXn(XlChartLegendXn *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartPlot::takeDefaultText(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v8 = a1[16];
  v6 = (uint64_t)(a1 + 16);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = a1[14];
    v12 = v9 - v11;
    v13 = (v9 - v11) >> 4;
    v14 = (v7 - v11) >> 4;
    if (2 * (int)v14 <= (v13 + 1))
      v15 = v13 + 1;
    else
      v15 = 2 * v14;
    if (v14 >= 0x7FFFFFFF)
      v16 = 0xFFFFFFFFLL;
    else
      v16 = v15;
    if ((_DWORD)v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v6, v16);
      v19 = v18;
    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    v20 = &v17[v12 & 0xFFFFFFFF0];
    v21 = &v17[16 * v19];
    *(_QWORD *)v20 = a2;
    *((_DWORD *)v20 + 2) = a3;
    v10 = v20 + 16;
    v23 = (char *)a1[14];
    v22 = (char *)a1[15];
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v22 - 1);
        v20 -= 16;
        v22 -= 16;
      }
      while (v22 != v23);
      v22 = (char *)a1[14];
    }
    a1[14] = v20;
    a1[15] = v10;
    a1[16] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_QWORD *)v9 = a2;
    *(_DWORD *)(v9 + 8) = a3;
    v10 = (char *)(v9 + 16);
  }
  a1[15] = v10;
}

void sub_22A287E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A287ED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartCustomLegend::~XlChartCustomLegend(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x22E2DD408);
}

void XlExternName::~XlExternName(XlExternName *this)
{
  XlExternName::~XlExternName(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_24F3AC3A0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 20) = 0;
  XlExternName::clearOperands(this);
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
}

_QWORD *XlExternName::clearOperands(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[8];
  v3 = this[9];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        XlOper::~XlOper((XlOper *)this);
        this = (_QWORD *)MEMORY[0x22E2DD408]();
        v2 = v1[8];
        v3 = v1[9];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[9] = v2;
  return this;
}

void sub_22A28843C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartTrendLine::XlChartTrendLine(XlChartTrendLine *this)
{
  uint64_t v2;

  XlChartDataSeries::XlChartDataSeries(this);
  XlChartSerAuxTrend::XlChartSerAuxTrend((XlChartSerAuxTrend *)(v2 + 200));
  *(_QWORD *)this = &off_24F3A97C0;
  *((_QWORD *)this + 25) = &unk_24F3A97F8;
}

void sub_22A288498(_Unwind_Exception *a1)
{
  XlChartDataSeries *v1;

  XlChartDataSeries::~XlChartDataSeries(v1);
  _Unwind_Resume(a1);
}

void XlChartSerAuxTrend::XlChartSerAuxTrend(XlChartSerAuxTrend *this)
{
  _QWORD *v1;

  XlRecord::XlRecord(this, 4171, 28, 0);
  *v1 = &off_24F3A8D28;
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = 0;
  *(_QWORD *)((char *)v1 + 39) = 0;
}

uint64_t XlChartTrendLine::setParentSeriesIndex(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 18) = a2;
  return this;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartSerAuxTrend *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 44) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((double *)a2 + 2) = (*(double (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 46) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((double *)a2 + 3) = (*(double (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  *((double *)a2 + 4) = (*(double (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartTrendLine::getSeriesType(XlChartTrendLine *this)
{
  return 2;
}

void sub_22A288800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t XlChartTrendLine::getParentSeriesIndex(XlChartTrendLine *this)
{
  return *((unsigned __int16 *)this + 9);
}

void sub_22A288B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A288C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A288C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A288D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A288E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void XlChartTrendLine::~XlChartTrendLine(XlChartTrendLine *this)
{
  TSURectWithOriginAndSize((char *)this + 200);
  XlChartDataSeries::~XlChartDataSeries(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 200);
  XlChartDataSeries::~XlChartDataSeries(this);
}

void sub_22A288F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A289160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2892A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A289480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_xmlNode *CXRequiredLongChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  return CXRequiredLongChild(a1, a2, a3, 0);
}

void sub_22A2895F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A2898A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setInnerTableCell(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x2000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFEFFFFF | ((a2 & 1) << 20);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setInnerTableTrailerParagraph(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x4000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFDFFFFF | ((a2 & 1) << 21);
  return this;
}

void sub_22A289AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A289C58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A289D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A289EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A28A144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A28A320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28A60C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A28A754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28A900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A28AAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A28AD14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A28AE98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28AF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A28B0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  void *v9;
  void *v10;
  void *v11;

  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_22A28B170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A28B304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A28B554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28B67C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A28B77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A28B830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A28B8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A28BB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::clearFontIndexForASCIIText(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x2000uLL;
  this->var43 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearFontIndexForOtherText(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 &= ~0x8000uLL;
  this->var45 = 0;
  return this;
}

uint64_t WrdCharacterProperties::resolveToAbsolute(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if ((_DWORD)result)
    v2 = 129;
  else
    v2 = 1;
  if ((_DWORD)result == 1)
    v2 = 0;
  if (a2 != 129)
    v2 = a2;
  if (a2 == 128)
    return result;
  else
    return v2;
}

void WrdCharacterProperties::clearListNumberRevisionAttributes(WrdCharacterProperties *this)
{
  unsigned int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = (unsigned int *)&this->var2 + 2;
  v2 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  *((_DWORD *)this + 85) &= ~0x1000000u;
  v2 &= 0xFFFD7FFFFFFFuLL;
  *((_DWORD *)&this->var2 + 2) = v2;
  *((_WORD *)&this->var2 + 6) = WORD2(v2);
  (*((void (**)(WrdDateTime *))this->var10->var0 + 3))(this->var10);
  v3 = *v1;
  v4 = (v3 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *v1 = v3;
  *((_WORD *)v1 + 2) = WORD2(v4);
  *((_WORD *)v1 + 152) = 0;
  v1[10] = 0;
  bzero(*((void **)v1 + 4), 2 * v1[11]);
}

WrdTableProperties *WrdTableProperties::setAbsoluteHorizontalPosition(WrdTableProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x200000000000uLL;
  *((_DWORD *)this + 76) = a2;
  return this;
}

uint64_t EshPath::getStrokeOK(EshPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x17Cu);
}

WrdParagraphProperties *WrdParagraphProperties::setRevisionMark(WrdParagraphProperties *this, char a2)
{
  *((_WORD *)this + 12) |= 0x200u;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFBFFFFFF | ((a2 & 1) << 26);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAuthorIDForRevision(WrdParagraphProperties *this, __int16 a2)
{
  *((_WORD *)this + 12) |= 0x400u;
  *((_WORD *)this + 146) = a2;
  return this;
}

uint64_t WrdParagraphProperties::getDttmRevisionMarkReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0xA00u;
  return *((_QWORD *)this + 14);
}

void sub_22A28BF0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28BFC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28C10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A28C224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A28C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, id a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_22A28C894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_22A28CB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A28CCB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void OAVReadIntPair(NSString *a1, int *a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;

  -[NSString componentsSeparatedByString:](a1, "componentsSeparatedByString:", CFSTR(","));
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "count"))
  {
    objc_msgSend(v7, "objectAtIndex:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *a2 = objc_msgSend(v5, "intValue");

    if ((unint64_t)objc_msgSend(v7, "count") >= 2)
    {
      objc_msgSend(v7, "objectAtIndex:", 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *a3 = objc_msgSend(v6, "intValue");

    }
  }

}

void sub_22A28CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

float OAVReadAngle(NSString *a1)
{
  NSString *v1;
  double v2;
  void *v3;
  void *v4;
  float v5;
  double v6;
  double v7;
  int v9;
  double v10;

  v1 = a1;
  v10 = 0.0;
  v9 = 0;
  CXSplitValueAndUnit(v1, &v10, &v9);
  switch(v9)
  {
    case 0:
    case 3:
      v2 = v10;
      goto LABEL_8;
    case 1:
    case 2:
      v2 = v10 * 0.0000152587891;
      goto LABEL_8;
    case 4:
      v6 = v10 * 180.0;
      v7 = 3.14159265;
      goto LABEL_7;
    case 5:
      v6 = v10 * 9.0;
      v7 = 10.0;
LABEL_7:
      v2 = v6 / v7;
LABEL_8:
      v5 = v2;
      break;
    default:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float OAVReadAngle(NSString *__strong)");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 39, 0, "Unhandled case");

      v5 = 0.0;
      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      break;
  }

  return v5;
}

void sub_22A28CEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void OAVReadLengthPair(NSString *a1, float *a2, float *a3)
{
  void *v5;
  void *v6;
  void *v7;
  NSString *v8;
  NSString *v9;
  NSString *v10;

  v10 = a1;
  -[NSString componentsSeparatedByString:](v10, "componentsSeparatedByString:", CFSTR(","));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count") != 2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void OAVReadLengthPair(NSString *__strong, float *, float *)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 102, 0, "Bad input");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v5, "objectAtIndex:", 0);
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  *a2 = OAVReadLength(v8);

  objc_msgSend(v5, "objectAtIndex:", 1);
  v9 = (NSString *)objc_claimAutoreleasedReturnValue();
  *a3 = OAVReadLength(v9);

}

void sub_22A28D02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A28D4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_22A28D610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28D6A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28D91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A28D9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28DAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void XlFileSharing::XlFileSharing(XlFileSharing *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC4E0;
  *(_BYTE *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 18) = 0;
  *(_QWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFileSharing *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  XlString *v8;
  char v9;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2)) & 1;
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 10) = v6;
  if (v6)
  {
    v7 = v6;
    v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((_QWORD *)this + 4) = v8;
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v9, v5 + v4, *((XlString **)this + 4));
    XlChartPlot::takeChartSeriesFormat(a2, *((XlChartSeriesFormat **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A28DC28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFileSharing::~XlFileSharing(XlFileSharing *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC4E0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC4E0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
}

void sub_22A28DDE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_22A28DEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor(WrdAnnotationReferenceDescriptor *this)
{
  *(_QWORD *)this = &off_24F3B25B0;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_DWORD *)this + 8) = -1;
  *((_WORD *)this + 18) = 0;
}

uint64_t WrdAnnotationReferenceDescriptorTable::getDescriptor(WrdAnnotationReferenceDescriptorTable *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || *((unsigned __int16 *)this + 8) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return v2 + 40 * a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdAnnotationReferenceDescriptor *a2)
{
  unsigned int v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *exception;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 6) = 0;
  bzero(*((void **)a2 + 2), 2 * *((unsigned int *)a2 + 7));
  CsString::reserve((CsString *)((char *)a2 + 8), v4 + 1);
  v5 = (_WORD *)*((_QWORD *)a2 + 2);
  if (!v5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 2001;
  }
  if (v4)
  {
    v6 = v4;
    do
    {
      *v5++ = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
      --v6;
    }
    while (v6);
  }
  CsString::setCount((CsString *)((char *)a2 + 8), v4);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2 * ((WrdAnnotationReferenceDescriptor::s_unNumberOfCharactersForAuthor + ~(_WORD)v4) & 0x7FFFu), 1);
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 4, 1);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 8) = result;
  return result;
}

void WrdAnnotation::WrdAnnotation(WrdAnnotation *this, WrdAnnotationReferenceDescriptor *a2, WrdDateTime *a3)
{
  this->var0 = (void **)&off_24F3B2538;
  *(_QWORD *)&this->var1 = 0;
  this->var3 = 0;
  this->var4 = a2;
  this->var5 = a3;
}

uint64_t WrdAnnotationReferenceDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  const CsString *v3;
  CsString *v4;

  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  v3 = (const CsString *)(a2 + 8);
  v4 = (CsString *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  CsString::append(v4, v3);
  return a1;
}

void XlFormatInfo::takeSection(XlFormatInfo *this, XlFormatSection *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a2)
  {
    v6 = *((_QWORD *)this + 3);
    v4 = (char *)this + 24;
    v5 = v6;
    v7 = (_QWORD *)*((_QWORD *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *((_QWORD *)this + 1);
      v10 = (unint64_t)v7 - v9;
      v11 = (v5 - v9) >> 3;
      v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1)
        v12 = (v10 >> 3) + 1;
      if (v11 >= 0x7FFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        v16 = v15;
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = &v14[v10 & 0x7FFFFFFF8];
      v18 = &v14[8 * v16];
      *(_QWORD *)v17 = a2;
      v8 = v17 + 8;
      v20 = (char *)*((_QWORD *)this + 1);
      v19 = (char *)*((_QWORD *)this + 2);
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*((_QWORD *)this + 1);
      }
      *((_QWORD *)this + 1) = v17;
      *((_QWORD *)this + 2) = v8;
      *((_QWORD *)this + 3) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 2) = v8;
  }
}

void WrdStringTable::appendString(WrdStringTable *this, const unsigned __int16 *a2, unsigned int a3)
{
  CsString *v6;
  unint64_t v7;
  CsString **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  CsString **v18;
  char *v19;
  char *v20;
  char *v21;
  CsString *v22;

  v6 = (CsString *)operator new(0x18uLL);
  CsString::CsString(v6);
  CsString::append(v6, a2, a3);
  v7 = *((_QWORD *)this + 3);
  v8 = (CsString **)*((_QWORD *)this + 2);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *((_QWORD *)this + 1);
    v11 = (unint64_t)v8 - v10;
    v12 = (v7 - v10) >> 3;
    v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1)
      v13 = (v11 >> 3) + 1;
    if (v12 >= 0x7FFFFFFF)
      v14 = 0xFFFFFFFFLL;
    else
      v14 = v13;
    if ((_DWORD)v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v14);
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = (CsString **)&v15[v11 & 0x7FFFFFFF8];
    v19 = &v15[8 * v17];
    *v18 = v6;
    v9 = v18 + 1;
    v21 = (char *)*((_QWORD *)this + 1);
    v20 = (char *)*((_QWORD *)this + 2);
    if (v20 != v21)
    {
      do
      {
        v22 = (CsString *)*((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v18;
    *((_QWORD *)this + 2) = v9;
    *((_QWORD *)this + 3) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 2) = v9;
}

void sub_22A28E2B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_22A28E58C(void *a1, WrdCharacterTextRun *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  int v13;
  unsigned int *v15;
  void *v16;

  v12 = v11;
  v13 = (int)a2;

  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a10);
  if (v13 == 3)
  {
    v15 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v15);
    __cxa_end_catch();
  }
  else
  {
    v16 = __cxa_begin_catch(a1);
    if (v13 == 2)
      objc_msgSend(v16, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A28E568);
}

void sub_22A28E658(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  void *v3;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A28E568);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdAnnotationTable::getAnnotationAtMainTextCP(WrdAnnotationTable *this, int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned __int16 v7;

  v3 = *((_QWORD *)this + 1);
  v4 = (unint64_t)(*((_QWORD *)this + 2) - v3) >> 3;
  if (!(_DWORD)v4)
    return 0;
  result = *(_QWORD *)v3;
  if (*(_DWORD *)(*(_QWORD *)v3 + 8) != a2)
  {
    v7 = 0;
    while (v4 > ++v7)
    {
      v6 = v7;
      result = *(_QWORD *)(v3 + 8 * v7);
      if (*(_DWORD *)(result + 8) == a2)
        goto LABEL_7;
    }
    return 0;
  }
  v6 = 0;
LABEL_7:
  *a3 = v6;
  return result;
}

void sub_22A28E878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A28E918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WrdAnnotation::~WrdAnnotation(WrdAnnotation *this)
{
  WrdAnnotation::~WrdAnnotation(this);
  JUMPOUT(0x22E2DD408);
}

{
  WrdAnnotationReferenceDescriptor *var4;
  WrdDateTime *var5;

  this->var0 = (void **)&off_24F3B2538;
  var4 = this->var4;
  if (var4)
    (*(void (**)(WrdAnnotationReferenceDescriptor *))(*(_QWORD *)var4 + 8))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    (*((void (**)(WrdDateTime *))var5->var0 + 1))(var5);
  this->var5 = 0;
}

void WrdAnnotationReferenceDescriptor::~WrdAnnotationReferenceDescriptor(WrdAnnotationReferenceDescriptor *this)
{
  *(_QWORD *)this = &off_24F3B25B0;
  CsString::~CsString((CsString *)((char *)this + 8));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B25B0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

void XlArray::XlArray(XlArray *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3AB6B0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 40) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlArray *a2)
{
  XlRef *v4;
  char v5;
  unsigned int v7;

  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlArray::setCellRange(a2, v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 40) = v5 & 1;
  *((_BYTE *)a2 + 41) = (v5 & 2) != 0;
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 21) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v7 = *((_DWORD *)this + 20) - *((_DWORD *)this + 21) - 18;
  LODWORD(v4) = XlParserVisitor::getDataAndContinues(this, &v7, -1);
  XlArray::setFormula(a2, *((unsigned __int8 **)this + 3), v7);
  *((_DWORD *)a2 + 2) = (_DWORD)v4 - *((_DWORD *)this + 18);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

{
  XlRef *v4;
  XlRef *v5;
  _QWORD *v6;
  __int16 v7;

  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  v5 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v5, 0);
  v6 = operator new(0x10uLL);
  *v6 = 0;
  v6[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v6);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v6);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v5);
  XlArray::setCellRange(a2, v5);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlRevisionMove::takeDestRef((XlRevisionMove *)a2, v4);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  XlRevisionMove::setSourceTabIndex((uint64_t)a2, v7);
  *((_DWORD *)a2 + 11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

{
  XlRef *v4;
  _QWORD *v5;

  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  v5 = operator new(0x10uLL);
  *v5 = 0;
  v5[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v5);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v5);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlArray::setCellRange(a2, v4);
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A28EB98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22A28EC30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A28ECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void XlArray::~XlArray(XlArray *this)
{
  XlArray::~XlArray(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3AB6B0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    MEMORY[0x22E2DD408](v3, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 3) = 0;
}

void XlChartDTLineFormat::XlChartDTLineFormat(XlChartDTLineFormat *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A87A0;
  *(_QWORD *)(v2 + 16) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v2 + 24) = 1065353216;
}

void XlChartDTLineFormat::~XlChartDTLineFormat(XlChartDTLineFormat *this)
{
  JUMPOUT(0x22E2DD408);
}

_DWORD *XlStringExtractor::markHashTableAsCorrupted(XlStringExtractor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  _DWORD *result;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v4 = v2 - 8;
    v3 = v5;
    if (v5)
    {
      v6 = 16 * v3;
      do
      {
        v7 = *(_QWORD *)(v4 + v6);
        if (v7)
          MEMORY[0x22E2DD3F0](v7, 0x1000C8052888210);
        *(_QWORD *)(v4 + v6) = 0;
        v6 -= 16;
      }
      while (v6);
    }
    MEMORY[0x22E2DD3F0](v4 - 8, 0x1010C8057418832);
  }
  *((_QWORD *)this + 3) = 0;
  v8 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 37) = 1;
  *((_DWORD *)this + 38) = v8;
  v9 = (char *)operator new[](0x20uLL);
  *(_OWORD *)v9 = xmmword_22A4CA060;
  *((_QWORD *)v9 + 3) = 0;
  *((_WORD *)v9 + 10) = 0;
  *((_DWORD *)v9 + 4) = 0;
  result = v9 + 16;
  *((_QWORD *)this + 3) = result;
  *result = **((_DWORD **)this + 17);
  return result;
}

uint64_t XlParserVisitor::currentRecordLocation(XlParserVisitor *this)
{
  int v1;

  if (!*((_BYTE *)this + 100))
    return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) - 4;
  v1 = *((_DWORD *)this + 21);
  if (v1 < 0)
    return 0xFFFFFFFFLL;
  else
    return v1;
}

void XlBinaryReader::findCellAHome(XlBinaryReader *this, XlRowBlock *a2, int a3)
{
  XlCell **v6;
  uint64_t v7;
  unsigned int v8;
  XlCell *v9;
  unsigned int var1;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  XlCell *v16;
  XlCellRow *v17;
  XlCellRow *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (XlCell **)*((_QWORD *)this + 52);
  v7 = *((_QWORD *)this + 53);
  do
  {
    if (((v7 - (_QWORD)v6) & 0x7FFFFFFF8) == 0)
      break;
    if (((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) & 0x7FFFFFFF8) != 0)
    {
      v8 = 0;
      while (1)
      {
        v9 = v6[v8];
        if (v9)
        {
          var1 = v9->var1;
          if (var1 >= XlRowBlock::getMinRow(a2))
          {
            v11 = v9->var1;
            if (v11 <= XlRowBlock::getMaxRow(a2))
            {
              XlRowBlock::takeCell(a2, v9);
              v12 = *((_QWORD *)this + 53);
              v13 = *((_QWORD *)this + 52) + 8 * v8;
              v14 = v12 - (v13 + 8);
              if (v12 != v13 + 8)
                memmove((void *)v13, (const void *)(v13 + 8), v12 - (v13 + 8));
              *((_QWORD *)this + 53) = v13 + v14;
              --v8;
            }
          }
        }
        ++v8;
        v6 = (XlCell **)*((_QWORD *)this + 52);
        v15 = (*((_QWORD *)this + 53) - (_QWORD)v6) >> 3;
        if (v8 >= v15)
          break;
        if (((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) & 0x7FFFFFFF8) == 0)
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      LODWORD(v15) = 1;
    }
    if (!(_DWORD)v15)
      break;
    if (!a3)
      break;
    v16 = *v6;
    if (!*v6)
      break;
    v17 = (XlCellRow *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 5);
    if (v17)
    {
      v18 = v17;
      v19 = *((_QWORD *)v17 + 1);
      *(_WORD *)(v19 + 8) = v16->var1;
      *(_DWORD *)(v19 + 10) = 983295;
      *(_BYTE *)(v19 + 19) = 1;
      XlCellRow::takeCell(v17, v16);
      v21 = *((_QWORD *)this + 52);
      v20 = *((_QWORD *)this + 53);
      v22 = v20 - (v21 + 8);
      if (v20 != v21 + 8)
        memmove(*((void **)this + 52), (const void *)(v21 + 8), v20 - (v21 + 8));
      *((_QWORD *)this + 53) = v21 + v22;
      XlRowBlock::takeRow(a2, v18);
    }
    v6 = (XlCell **)*((_QWORD *)this + 52);
    v7 = *((_QWORD *)this + 53);
  }
  while (((v7 - (_QWORD)v6) & 0x7FFFFFFF8) != 0);
}

void sub_22A28F180(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setRightIndentCharacterUnits(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x10000000000000uLL;
  *((_WORD *)this + 140) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLeftIndentCharacterUnits(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x20000000000000uLL;
  *((_WORD *)this + 141) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setFirstLineIndentCharacterUnits(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x40000000000000uLL;
  *((_WORD *)this + 142) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLineSpaceBefore(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x80000000000000uLL;
  *((_WORD *)this + 143) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLineSpaceAfter(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x100000000000000uLL;
  *((_WORD *)this + 144) = a2;
  return this;
}

uint64_t **EshOpt::takeBlipRecordProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t **result;
  unsigned int v10;
  unsigned int *v11;

  v6 = *(uint64_t **)(a1 + 40);
  if (!v6)
    goto LABEL_10;
  while (1)
  {
    v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2)
      break;
LABEL_5:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_10;
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_5;
  }
  v10 = a2;
  v11 = &v10;
  if (!*((_BYTE *)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)+ 40))
  {
    v10 = a2;
    v11 = &v10;
    v8 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)[6];
    if (v8)
      (*(void (**)(uint64_t *))(*v8 + 8))(v8);
  }
LABEL_10:
  v10 = a2;
  v11 = &v10;
  result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11);
  result[5] = 0;
  result[6] = a3;
  return result;
}

uint64_t *EshFill::getBlipRecordReference(EshFill *this)
{
  return EshOpt::getProperty((uint64_t)this->var2, 0x186u)[1];
}

void XlChartAxisAlignment::~XlChartAxisAlignment(XlChartAxisAlignment *this)
{
  JUMPOUT(0x22E2DD408);
}

unsigned __int16 *WrdCharacterProperties::getUnderlineColorReference(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 |= 0x20000000000000uLL;
  return &this->var3.var3;
}

WrdParagraphProperties *WrdParagraphProperties::setNoOverlapAllowed(WrdParagraphProperties *this, char a2)
{
  *((_WORD *)this + 12) |= 2u;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFDFFFFFF | ((a2 & 1) << 25);
  return this;
}

WrdTableProperties *WrdTableProperties::setDoNotAllowOverlap(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x800000u;
  *((_BYTE *)this + 390) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setLineBreak(uint64_t a1, int a2)
{
  uint64_t result;
  int v3;
  __int16 v4;

  v3 = *(_DWORD *)(a1 + 24);
  result = a1 + 24;
  v4 = *(_WORD *)(result + 4);
  *(_DWORD *)result = v3;
  *(_WORD *)(result + 4) = v4 | 0x100;
  *(_DWORD *)(result + 136) = a2;
  return result;
}

OcBinaryData *WrdBinaryReader::read(OcBinaryData *result, uint64_t a2)
{
  SsrwOOStream *v2;
  OcBinaryData *v3;
  OcBinaryData *v4;
  unsigned int v5;

  v2 = *(SsrwOOStream **)(*(_QWORD *)&result->var6 + 120);
  if (v2)
  {
    v3 = result;
    v4 = (OcBinaryData *)(a2 + 8);
    v5 = (*((uint64_t (**)(_QWORD))v2->var0 + 4))(*(_QWORD *)(*(_QWORD *)&result->var6 + 120));
    return OcBinaryData::setDataInfo(v4, v2, v5, *((_DWORD *)&v3[12].var6 + 1), v3[12].var7);
  }
  return result;
}

void sub_22A28F6C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A28FC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A28FEFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29016C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A290318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A290540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2906E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlOleSize::XlOleSize(XlOleSize *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AD060;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, XlDConRef *a2)
{
  XlRef *v4;

  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t, XlRef *))(*(_QWORD *)a1 + 1504))(a1, v4);
  XlDConRef::setConsolidationArea(a2, v4);
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void sub_22A2907AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double XlDocumentProperties::setOleSize(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 102) = 1;
  return XlRef::operator=(a1 + 92, *(_QWORD *)(a2 + 16));
}

void XlOleSize::~XlOleSize(XlOleSize *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AD060;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 2) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AD060;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

void sub_22A290A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setWordWrap(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x400000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFF7FF | ((a2 & 1) << 11);
  return this;
}

void PptPrintOptions::PptPrintOptions(PptPrintOptions *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BA188;
  *(_QWORD *)(v2 + 32) = &unk_24F3BA230;
  *(_WORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 58) = 0;
}

uint64_t PptPrintOptions::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 632))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptPrintOptions *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 1
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 2)
    || (*((_BYTE *)a2 + 56) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 3)
    || (*((_BYTE *)a2 + 57) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_BYTE *)a2 + 58) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptPrintOptions::~PptPrintOptions(PptPrintOptions *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A290E84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A290F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *yyFlexLexer::yy_push_state(_DWORD *this, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t)this;
  v4 = this[9];
  if (this[8] >= v4)
  {
    v5 = v4 + 25;
    this[9] = v5;
    v6 = (void *)*((_QWORD *)this + 5);
    this = v6 ? malloc_type_realloc(v6, 4 * v5, 0xA7BF72DAuLL) : malloc_type_malloc(4 * v5, 0xCCAAE399uLL);
    *(_QWORD *)(v3 + 40) = this;
    if (!this)
      this = (_DWORD *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v3 + 112))(v3, "out of memory expanding start-condition stack");
  }
  v7 = *(_DWORD *)(v3 + 404);
  if (v7 >= 1)
    --v7;
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(_DWORD *)(v8 + 4 * v9) = v7 >> 1;
  *(_DWORD *)(v3 + 404) = (2 * a2) | 1;
  return this;
}

uint64_t yyFlexLexer::LexerOutput(yyFlexLexer *this, const char *a2)
{
  return std::ostream::write();
}

uint64_t yysyntax_error(char *a1, int a2, unsigned int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  int v27;
  char *i;
  int v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35[64];
  const char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = yypact[a2];
  if (v3 >= -188)
  {
    if (a3 > 0x130)
      v5 = 2;
    else
      v5 = yytranslate[a3];
    v7 = yytname[v5];
    v8 = yytnamerr(0, v7);
    v38 = 0u;
    v37 = 0u;
    v36 = v7;
    strcpy(v35, "syntax error, unexpected %s");
    v9 = -v3 & (v3 >> 31);
    if (336 - v3 >= 50)
      v10 = 50;
    else
      v10 = 336 - v3;
    if (v9 < v10)
    {
      v11 = 0;
      v12 = &v35[27];
      v13 = v9;
      v14 = v3;
      v15 = v10;
      v16 = ", expecting %s";
      v17 = 1;
      v34 = v8;
      v18 = v8;
      while (1)
      {
        if (v13 != 1 && (_DWORD)v13 == yycheck[v13 + v14])
        {
          if (v17 == 5)
          {
            v35[27] = 0;
            v17 = 1;
            v18 = v34;
            goto LABEL_24;
          }
          v19 = yytname[v13];
          (&v36)[v17] = v19;
          v20 = yytnamerr(0, v19);
          v21 = __CFADD__(v20, v18);
          v18 += v20;
          v22 = v21;
          --v12;
          do
          {
            v23 = *(unsigned __int8 *)v16++;
            *++v12 = v23;
          }
          while (v23);
          ++v17;
          v11 |= v22;
          v16 = " or %s";
        }
        if (++v13 >= v15)
          goto LABEL_24;
      }
    }
    v11 = 0;
    v17 = 1;
    v18 = v8;
LABEL_24:
    v24 = 0;
    while (v35[v24++])
      ;
    v6 = v18 + v24 - 1;
    if (v11 | (v6 < v18))
      return -1;
    if (!a1)
      return v6;
    v27 = 0;
    for (i = v35; ; i += v32)
    {
      v29 = *i;
      *a1 = v29;
      if (v29 != 37)
        break;
      if (i[1] != 115 || v27 >= v17)
        goto LABEL_38;
      v33 = v27 + 1;
      v31 = yytnamerr(a1, (&v36)[v27]);
      v32 = 2;
      v27 = v33;
LABEL_40:
      a1 += v31;
    }
    if (!v29)
      return v6;
LABEL_38:
    v31 = 1;
    v32 = 1;
    goto LABEL_40;
  }
  return 0;
}

uint64_t yytnamerr(char *a1, const char *a2)
{
  uint64_t v2;
  const char *v3;
  const char *i;
  int v5;
  int v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  int v11;

  if (*a2 != 34)
  {
LABEL_13:
    v10 = 0;
    if (a1)
    {
      do
      {
        v11 = a2[v10];
        a1[v10++] = v11;
      }
      while (v11);
    }
    else
    {
      while (a2[v10++])
        ;
    }
    return v10 - 1;
  }
  v2 = 0;
  v3 = a2;
  for (i = a2; ; v3 = i)
  {
    v6 = *++i;
    v5 = v6;
    v7 = v6;
    if (v6 > 91)
    {
      if (v5 == 92)
      {
        v9 = *((unsigned __int8 *)v3 + 2);
        v8 = v3 + 2;
        if (v9 != 92)
          goto LABEL_13;
        v7 = 92;
        i = v8;
      }
      goto LABEL_10;
    }
    if (v5 == 34)
      break;
    if (v5 == 39 || v5 == 44)
      goto LABEL_13;
LABEL_10:
    if (a1)
      a1[v2] = v7;
    ++v2;
  }
  if (a1)
    a1[v2] = 0;
  return v2;
}

void sub_22A29145C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2918BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_22A291CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A291F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A292004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A292234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v3;

  _Unwind_Resume(a1);
}

void sub_22A2925F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A292788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A292B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A2933D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A293620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A293720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2937A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A293828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2938A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A293970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A293A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A293AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A293BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A293C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A293EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2940E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void PptOEShapeAtom::PptOEShapeAtom(PptOEShapeAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B9CA8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9D50;
}

uint64_t PptOEShapeAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 200))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptOEShapeAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptOEShapeAtom::~PptOEShapeAtom(PptOEShapeAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A294564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, id a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A2948E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v2;

  _Unwind_Resume(a1);
}

void sub_22A294D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A29511C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2954D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A295610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2956C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A29581C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A295894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2959E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A295AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A295B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A295C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlChartSurfacePlot::XlChartSurfacePlot(XlChartSurfacePlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartSurface::XlChartSurface((XlChartSurface *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A9738;
  *((_QWORD *)this + 18) = &unk_24F3A9760;
}

void sub_22A295D0C(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartSurface::XlChartSurface(XlChartSurface *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4159, 2, 0);
  *(_QWORD *)v1 = &off_24F3A8F68;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartSurface *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartSurfacePlot::getChartType(XlChartSurfacePlot *this)
{
  return 8;
}

void sub_22A295E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A295EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartSurfacePlot::~XlChartSurfacePlot(XlChartSurfacePlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_22A29611C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A296210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A296294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A296364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A296ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A296BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void sub_22A296C30()
{
  void *v0;

  JUMPOUT(0x22A296C1CLL);
}

void sub_22A296C3C()
{
  JUMPOUT(0x22A296C1CLL);
}

void sub_22A296C44()
{
  JUMPOUT(0x22A296C20);
}

void sub_22A296CF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A296D64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A296ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A296FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A297090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A29715C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A297278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A297384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A297540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2975A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29760C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2976F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

BOOL XlFormula::getBooleanResult(XlFormula *this)
{
  return *((_BYTE *)this + 26) != 0;
}

void XlImData::XlImData(XlImData *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC9E0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 1;
  *(_BYTE *)(v2 + 36) = 0;
}

void XlImData::~XlImData(XlImData *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC9E0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC9E0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

void XlChartRadarPlot::XlChartRadarPlot(XlChartRadarPlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartRadar::XlChartRadar((XlChartRadar *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A96B0;
  *((_QWORD *)this + 18) = &unk_24F3A96D8;
}

void sub_22A297A28(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartRadar::XlChartRadar(XlChartRadar *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4158, 2, 0);
  *(_QWORD *)v1 = &off_24F3A8BE8;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartRadar *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartRadarPlot::getChartType(XlChartRadarPlot *this)
{
  return 6;
}

void XlChartRadarPlot::~XlChartRadarPlot(XlChartRadarPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_22A297B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setUseParagraphStylesProperties(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 1uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFE | a2 & 1;
  return this;
}

uint64_t WrdParagraphProperties::getBorderBarReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x80u;
  return *((_QWORD *)this + 12);
}

void sub_22A297D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t EshStroke::getColor2(EshStroke *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x1C2u);
}

uint64_t WrdParagraphProperties::setBorderCode(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x8000uLL;
  *(_DWORD *)(result + 148) = a2;
  return result;
}

void sub_22A298020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2981D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A2985C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A29871C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_22A2987C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A298888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A298918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A298A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A298AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A298C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A298DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A298EF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2993E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A2995B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2997DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_22A299CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A299DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A299ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A299F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A29A0B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A29A2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_22A29A3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t setStyleForEDCell(EDCellHeader *a1, EDStyle *a2, EDResources *a3)
{
  EDStyle *v5;
  EDResources *v6;
  EDResources *v7;
  void *v8;
  uint64_t v9;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    -[EDResources styles](v6, "styles");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "addOrEquivalentObject:", v5);

    a1->var1 = v9;
  }
  else
  {
    v9 = -1;
  }

  return v9;
}

void sub_22A29A440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A29A4D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29A594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29A648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29A6B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A29A76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t styleIndexForEDRowInfo(EDRowInfo *a1)
{
  if (!a1)
    return -1;
  if (a1->var0 == -1)
    return -1;
  return a1->var0;
}

void sub_22A29A808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double TSUMix(double a1, double a2, double a3)
{
  return a1 + (a2 - a1) * a3;
}

void sub_22A29AA90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A29ABF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29ACDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29ADC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void PptComment10Atom::PptComment10Atom(PptComment10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BEC70;
  *(_QWORD *)(v2 + 32) = &unk_24F3BED18;
  *(_WORD *)(v2 + 60) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 55) = 0;
}

uint64_t PptComment10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 1008))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptComment10Atom *a2)
{
  SsrwOOStream *v4;
  SsrwOOStream *v5;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *(_QWORD *)((char *)a2 + 52) = OcParser::parseSystemTimeFromStream(*((OcParser **)this + 1), v4);
  *((_WORD *)a2 + 30) = (_WORD)v5;
  OcParser::parsePointI4FromStream(*((OcParser **)this + 1), v5, &v7);
  *((_QWORD *)a2 + 8) = v7;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptComment10Atom::~PptComment10Atom(PptComment10Atom *this)
{
  *(_QWORD *)this = &off_24F3BEC70;
  *((_QWORD *)this + 4) = &unk_24F3BED18;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BEC70;
  *((_QWORD *)this + 4) = &unk_24F3BED18;
}

void XlHLinkToolTip::XlHLinkToolTip(XlHLinkToolTip *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *v2 = &off_24F3AC960;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHLinkToolTip *a2)
{
  XlRef *v4;
  unsigned int var0;
  int v6;
  unsigned int v7;
  unsigned int v8;
  XlString *v9;
  _DWORD *exception;

  if (a2->var1.var0 <= 9)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  var0 = a2->var1.var0;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v7 = a2->var1.var0;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea((XlDConRef *)a2, v4);
  v8 = var0 - 10;
  if (v8)
  {
    v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((_QWORD *)this + 4) = v9;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8 >> 1, 1, v7 + v6, v9);
    XlChartPlot::takeChartSeriesFormat((XlChartPlot *)a2, *((XlChartSeriesFormat **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A29B0E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22A29B180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void XlHLinkToolTip::~XlHLinkToolTip(XlHLinkToolTip *this)
{
  XlHLinkToolTip::~XlHLinkToolTip(this);
  JUMPOUT(0x22E2DD408);
}

{
  XlRef *var2;
  XlString *var3;

  this->var0 = (void **)&off_24F3AC960;
  var2 = this->var2;
  if (var2)
    MEMORY[0x22E2DD408](var2, 0x1000C400EA6A39BLL);
  this->var2 = 0;
  var3 = this->var3;
  if (var3)
    (*(void (**)(XlString *))(*(_QWORD *)var3 + 8))(var3);
  this->var3 = 0;
}

void sub_22A29B370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A29B4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A29B884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A29C40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A29C4F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29C67C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A29C828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A29CA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A29CB68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29CC04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29CEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29CF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29D1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29D324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29D52C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A29DB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_22A29DD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A29DE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void XlTable::XlTable(XlTable *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3AE970;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTable *a2)
{
  XlRef *v4;
  char v5;

  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea((XlDConRef *)a2, v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 24) = v5 & 1;
  *((_BYTE *)a2 + 25) = (v5 & 2) != 0;
  *((_BYTE *)a2 + 26) = (v5 & 4) != 0;
  *((_BYTE *)a2 + 27) = (v5 & 8) != 0;
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A29DFE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlTable::~XlTable(XlTable *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AE970;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AE970;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 2) = 0;
}

void sub_22A29E0D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29E15C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A29E1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlSxIDStm::XlSxIDStm(XlSxIDStm *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE4B0;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlSxIDStm::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1128))(a2, a1);
}

void XlSxVs::XlSxVs(XlSxVs *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE8B0;
  *(_DWORD *)(v2 + 16) = 1;
}

uint64_t XlSxVs::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1264))(a2, a1);
}

void XlDConRef::XlDConRef(XlDConRef *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABDA0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
}

uint64_t XlDConRef::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 568))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDConRef *a2)
{
  int v4;
  int v5;
  XlRef *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  unsigned int v9;
  char v10;
  XlString *v11;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  v6 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v6, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v6);
  XlDConRef::setConsolidationArea(a2, v6);
  v7 = **((_QWORD **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u)
    v8 = *(uint64_t (**)(void))(v7 + 64);
  else
    v8 = *(uint64_t (**)(void))(v7 + 80);
  v9 = v8();
  *((_WORD *)a2 + 12) = v9;
  if (v9)
  {
    if (*((unsigned __int8 *)a2 + 14) < 9u)
      v10 = 0;
    else
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v11 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v11);
    *((_QWORD *)this + 4) = v11;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v10, v5 + v4, v11);
    XlChartPlot::takeDropLineFormat(a2, *((XlChartLineStyle **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A29E60C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlGenericRecord::XlGenericRecord(XlGenericRecord *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC760;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 16) = *(_WORD *)(v2 + 12);
  *(_WORD *)(v2 + 12) = 0;
}

uint64_t XlGenericRecord::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
}

void XlPivotInfo::~XlPivotInfo(void **this)
{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

void XlDConRef::~XlDConRef(XlDConRef *this)
{
  XlDConRef::~XlDConRef(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3ABDA0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 4) = 0;
}

void XlSxVs::~XlSxVs(XlSxVs *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlSxIDStm::~XlSxIDStm(XlSxIDStm *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A29E828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A29EA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A29EB40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29ED98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A29F0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A29F1F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29F52C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_22A29F90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A29FA20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29FB20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A29FD4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A29FE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlChartCustomLabel::XlChartCustomLabel(XlChartCustomLabel *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8660;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartCustomLabel *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  XlString *v9;
  _DWORD *exception;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  XlParserVisitor::beginRead(this);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 12, 1);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (v6 >= 0x100)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  v7 = v6;
  if (v6)
  {
    if (*((unsigned __int8 *)a2 + 14) < 9u)
      v8 = 0;
    else
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((_QWORD *)this + 4) = v9;
    XlStringParser::parse((XlChartParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v5 + v4, v9);
    XlChartCustomLabel::takeSeparatorText((uint64_t)a2, *((XlString **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A2A0008(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartCustomLabel::~XlChartCustomLabel(XlChartCustomLabel *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A8660;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A8660;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void sub_22A2A04E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A0794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A0820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A0954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A0B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t categoryForType(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 21:
    case 25:
      result = 2;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 33:
    case 34:
    case 65:
    case 66:
    case 97:
    case 98:
      result = 1;
      break;
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 44:
    case 45:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 64:
    case 67:
    case 68:
    case 69:
    case 70:
    case 74:
    case 75:
    case 76:
    case 77:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 96:
    case 99:
    case 100:
    case 101:
    case 102:
    case 106:
    case 107:
    case 108:
    case 109:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
      return result;
    default:
      result = 3;
      break;
  }
  return result;
}

void sub_22A2A0CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A0E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlChartAreaPlot::XlChartAreaPlot(XlChartAreaPlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartArea::XlChartArea((XlChartArea *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A9230;
  *((_QWORD *)this + 18) = &unk_24F3A9258;
}

void sub_22A2A0E70(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartArea::XlChartArea(XlChartArea *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4122, 2, 0);
  *(_QWORD *)v1 = &off_24F3A82E0;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartArea *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartAreaPlot::getChartType(XlChartAreaPlot *this)
{
  return 4;
}

void sub_22A2A0F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A1020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void XlChartAreaPlot::~XlChartAreaPlot(XlChartAreaPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

uint64_t XlParserVisitor::seekCurrentRecord(uint64_t this)
{
  if (!*(_BYTE *)(this + 100))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(this + 16) + 16))(*(_QWORD *)(this + 16), 4294967292, 1);
  if ((*(_DWORD *)(this + 84) & 0x80000000) == 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 16) + 16))(*(_QWORD *)(this + 16));
  return this;
}

void sub_22A2A1124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptTextMasterStyle10Atom::PptTextMasterStyle10Atom(PptTextMasterStyle10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BD948;
  *(_QWORD *)(v2 + 32) = &unk_24F3BD9F0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextMasterStyle10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 352))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextMasterStyle10Atom *a2)
{
  int v4;
  int v5;
  int v6;
  PptCharProperty10 *v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EshRecord::getEndOffset(a2);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if (v4 >= 1)
  {
    v5 = v4;
    LOWORD(v6) = 0;
    do
    {
      v7 = PptTextMasterStyle10Atom::addLevel(a2);
      PptParserVisitor::parseCharProperty10(this, v7);
      v6 = (__int16)(v6 + 1);
    }
    while (v6 < v5);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

PptCharProperty10 *PptTextMasterStyle10Atom::addLevel(PptTextMasterStyle10Atom *this)
{
  PptCharProperty10 *v2;
  unint64_t v3;
  PptCharProperty10 **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  PptCharProperty10 **v14;
  char *v15;
  char *v16;
  char *v17;
  PptCharProperty10 *v18;

  v2 = (PptCharProperty10 *)operator new();
  PptCharProperty10::PptCharProperty10(v2);
  v3 = *((_QWORD *)this + 8);
  v4 = (PptCharProperty10 **)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (PptCharProperty10 **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = (PptCharProperty10 *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A2A1378(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C404F21501ELL);
  _Unwind_Resume(a1);
}

void PptTextMasterStyle10Atom::~PptTextMasterStyle10Atom(PptTextMasterStyle10Atom *this)
{
  PptTextMasterStyle10Atom::~PptTextMasterStyle10Atom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3BD948;
  *((_QWORD *)this + 4) = &unk_24F3BD9F0;
  PptTextMasterStyle10Atom::cleanup((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextMasterStyle10Atom::cleanup(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  if (((*(_QWORD *)(this + 56) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      v4 = v3;
      this = *(_QWORD *)(v2 + 8 * v3);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C404F21501ELL);
        v2 = *(_QWORD *)(v1 + 48);
      }
      *(_QWORD *)(v2 + 8 * v4) = 0;
      *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v4) = 0;
      v3 = v4 + 1;
      v2 = *(_QWORD *)(v1 + 48);
    }
    while (((unint64_t)(*(_QWORD *)(v1 + 56) - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  *(_QWORD *)(v1 + 56) = v2;
  return this;
}

uint64_t EshShadow::getSoftness(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2) + 128, 0x21Cu);
}

SsrwOOStorage *ChAutoPtr<SsrwOOStorage>::setValue(SsrwOOStorage **a1, SsrwOOStorage *a2)
{
  SsrwOOStorage *result;

  result = *a1;
  if (result != a2)
  {
    if (result)
    {
      SsrwOOStorage::~SsrwOOStorage(result);
      result = (SsrwOOStorage *)MEMORY[0x22E2DD408]();
    }
    *a1 = a2;
  }
  return result;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartPicF *a2)
{
  XlParserVisitor::beginRead(this);
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  a2->var4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  a2->var5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var2 = (*(double (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A2A162C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A1744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2A19E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2A1BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void PptExControlAtom::PptExControlAtom(PptExControlAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B7AB0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B7B58;
}

uint64_t PptExControlAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 544))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExControlAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExControlAtom::~PptExControlAtom(PptExControlAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

_QWORD *EshPathParamTable::clone(EshPathParamTable *this)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39D578;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_22A2A1D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeParams(EshPath *this, EshPathParamTable *a2)
{
  return EshOpt::takeComplexProperty((uint64_t)this->var2, 0x145u, (uint64_t *)a2);
}

WrdParagraphProperties *WrdParagraphProperties::resetListProperties(WrdParagraphProperties *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v1 = 0;
  *((_QWORD *)this + 2) &= ~0x100uLL;
  *((_DWORD *)this + 34) = 0;
  v2 = *((_QWORD *)this + 25);
  v3 = *((_QWORD *)this + 26);
  v4 = *((_QWORD *)this + 27);
  do
  {
    *(_WORD *)(v2 + v1) = 0;
    *(_WORD *)(v3 + v1) = 0;
    *(_WORD *)(v4 + v1) = 0;
    v1 += 2;
  }
  while (v1 != 128);
  v5 = *((_QWORD *)this + 2);
  v6 = *((_WORD *)this + 12);
  *((_WORD *)this + 71) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_WORD *)this + 142) = 0;
  *((_QWORD *)this + 2) = v5 & 0x78FFFFFFFFFFFE7;
  *((_WORD *)this + 12) = v6 & 0xFFFE;
  *((_BYTE *)this + 300) = 9;
  return this;
}

void sub_22A2A1E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WrdTableProperties *WrdTableProperties::setBottomDistanceFromText(WrdTableProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x4000000000000uLL;
  *((_DWORD *)this + 81) = a2;
  return this;
}

void sub_22A2A1F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WrdBookmark::setExtraData(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    if (*(unsigned __int16 *)(this + 40) > a2)
      *(_BYTE *)(v3 + a2) = a3;
  }
  return this;
}

void sub_22A2A2140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A2A2360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationTable::getAnnotationForBookmark(WrdAnnotationTable *this, int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned __int16 v7;

  v3 = *((_QWORD *)this + 1);
  v4 = (unint64_t)(*((_QWORD *)this + 2) - v3) >> 3;
  if (!(_DWORD)v4)
    return 0;
  result = *(_QWORD *)v3;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 32) != a2)
  {
    v7 = 0;
    while (v4 > ++v7)
    {
      v6 = v7;
      result = *(_QWORD *)(v3 + 8 * v7);
      if (*(_DWORD *)(*(_QWORD *)(result + 24) + 32) == a2)
        goto LABEL_7;
    }
    return 0;
  }
  v6 = 0;
LABEL_7:
  *a3 = v6;
  return result;
}

void sub_22A2A24B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A2A2580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A2668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshTextPath::getAlign(EshTextPath *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xC2u);
}

void sub_22A2A2758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A281C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double NSNonNegativeSizeRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX - fabs(a3) * 0.5;
}

uint64_t WrdTableProperties::getDiagonalDownBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x800uLL;
  return *((_QWORD *)this + 13);
}

uint64_t WrdTableProperties::getDiagonalUpBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x1000uLL;
  return *((_QWORD *)this + 14);
}

uint64_t **WrdStyle::takeTableProps(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *i;
  unsigned int v7;
  uint64_t *v8;
  uint64_t **result;
  _DWORD *exception;
  unsigned int v11;
  unsigned int *v12;

  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v5 = (uint64_t **)(a1 + 128);
  for (i = *(uint64_t **)(a1 + 136); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 8);
    if (v7 <= a2)
    {
      if (v7 >= a2)
      {
        v11 = a2;
        v12 = &v11;
        v8 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 128), &v11, (uint64_t)&std::piecewise_construct, &v12)[5];
        if (v8)
          (*(void (**)(uint64_t *))(*v8 + 8))(v8);
        v11 = a2;
        v12 = &v11;
        std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
        break;
      }
      ++i;
    }
  }
  v11 = a2;
  v12 = &v11;
  result = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12);
  result[5] = a3;
  return result;
}

uint64_t **WrdStyle::takeCharProps(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *i;
  unsigned int v7;
  uint64_t *v8;
  uint64_t **result;
  _DWORD *exception;
  unsigned int v11;
  unsigned int *v12;

  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v5 = (uint64_t **)(a1 + 104);
  for (i = *(uint64_t **)(a1 + 112); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 8);
    if (v7 <= a2)
    {
      if (v7 >= a2)
      {
        v11 = a2;
        v12 = &v11;
        v8 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), &v11, (uint64_t)&std::piecewise_construct, &v12)[5];
        if (v8)
          (*(void (**)(uint64_t *))(*v8 + 8))(v8);
        v11 = a2;
        v12 = &v11;
        std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
        break;
      }
      ++i;
    }
  }
  v11 = a2;
  v12 = &v11;
  result = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12);
  result[5] = a3;
  return result;
}

uint64_t *WrdStyle::getCharPropsReference(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v3;
  _DWORD *exception;
  unsigned int v6;
  unsigned int *v7;

  if (*(_DWORD *)(a1 + 152) != 3 || (v2 = *(uint64_t **)(a1 + 112)) == 0)
  {
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  while (1)
  {
    v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3)
      break;
LABEL_6:
    v2 = (uint64_t *)*v2;
    if (!v2)
      goto LABEL_7;
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  v6 = a2;
  v7 = &v6;
  return std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), &v6, (uint64_t)&std::piecewise_construct, &v7)[5];
}

uint64_t WrdStyle::getTableProps(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  _DWORD *exception;
  uint64_t *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t **v11;

  if (*(_DWORD *)(a1 + 152) != 3)
    goto LABEL_8;
  v4 = *(uint64_t **)(a1 + 136);
  v2 = (uint64_t *)(a1 + 136);
  v3 = v4;
  if (!v4)
    goto LABEL_8;
  v5 = v3;
  while (1)
  {
    v6 = *((_DWORD *)v5 + 8);
    if (a2 >= v6)
      break;
LABEL_7:
    v5 = (uint64_t *)*v5;
    if (!v5)
      goto LABEL_8;
  }
  if (v6 < a2)
  {
    ++v5;
    goto LABEL_7;
  }
  v8 = v2;
  do
  {
    v9 = *((_DWORD *)v3 + 8);
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = (uint64_t **)v3;
    else
      v11 = (uint64_t **)(v3 + 1);
    if (v10)
      v8 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v8 == v2 || *((_DWORD *)v8 + 8) > a2)
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return v8[5];
}

void sub_22A2A2CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **ChAutoPtr<ChStack<XlPtg *>>::~ChAutoPtr(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  if (v2)
  {
    v3 = ChStack<XlPtg *>::~ChStack(v2);
    MEMORY[0x22E2DD408](v3, 0x1080C40E1DA5700);
  }
  *a1 = 0;
  return a1;
}

unsigned __int16 *extractDataFromPtgAreaBuffer(unsigned __int16 *a1, int *a2, int *a3, int *a4, int *a5)
{
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;

  return extractDataFromPtgAreaBuffer(a1, a2, &v9, a3, &v8, a4, &v7, a5, &v6);
}

uint64_t SsrwOOMemStream::readString16(uint64_t this, unsigned int *a2, unsigned __int16 *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v6 = this;
    v7 = 0;
    while (1)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 128))(v6);
      a3[v7] = this;
      if (!(_DWORD)this)
        break;
      if (v4 == ++v7)
      {
        a3[v4] = 0;
        goto LABEL_8;
      }
    }
    LODWORD(v4) = v7 + 1;
  }
LABEL_8:
  *a2 = v4;
  return this;
}

uint64_t SsrwOOMemStream::readChar16(SsrwOOMemStream *this)
{
  uint64_t v1;
  uint64_t result;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  result = CsLeReadUInt16((unsigned __int16 *)(**((_QWORD **)this + 1) + v1));
  *((_DWORD *)this + 5) += 2;
  return result;
}

void PptLinkedSlide10Atom::PptLinkedSlide10Atom(PptLinkedSlide10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BF050;
  *(_QWORD *)(v2 + 32) = &unk_24F3BF0F8;
}

uint64_t PptLinkedSlide10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 1032))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptLinkedSlide10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptLinkedShape10Atom::PptLinkedShape10Atom(PptLinkedShape10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BEE60;
  *(_QWORD *)(v2 + 32) = &unk_24F3BEF08;
}

uint64_t PptLinkedShape10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 1024))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptLinkedShape10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptLinkedSlide10Atom::~PptLinkedSlide10Atom(PptLinkedSlide10Atom *this)
{
  *(_QWORD *)this = &off_24F3BF050;
  *((_QWORD *)this + 4) = &unk_24F3BF0F8;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BF050;
  *((_QWORD *)this + 4) = &unk_24F3BF0F8;
}

void PptLinkedShape10Atom::~PptLinkedShape10Atom(PptLinkedShape10Atom *this)
{
  *(_QWORD *)this = &off_24F3BEE60;
  *((_QWORD *)this + 4) = &unk_24F3BEF08;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BEE60;
  *((_QWORD *)this + 4) = &unk_24F3BEF08;
}

void sub_22A2A327C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WrdParser::parse(SsrwOOStream **this, WrdAnnotationDateTimeTable *a2)
{
  uint64_t started;
  int v5;
  WrdDateTime *v6;

  if (*((unsigned __int16 *)this + 116) >= 0x70u)
  {
    started = WrdParser::startFCLCB((WrdParser *)this, 0x70u);
    if (HIDWORD(started))
    {
      v5 = (unsigned __int16)(HIDWORD(started) / 0x12);
      if ((unsigned __int16)(HIDWORD(started) / 0x12))
      {
        do
        {
          v6 = (WrdDateTime *)operator new(0x18uLL);
          WrdDateTime::WrdDateTime(v6);
          WrdBaseParser::parseStream((WrdBaseParser *)this, v6, this[16]);
          (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))this[16]->var0 + 2))(this[16], 14, 1);
          XlFormatInfo::takeSection(a2, (XlFormatSection *)v6);
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      WrdAnnotationDateTimeTable::clear(a2);
    }
  }
}

void sub_22A2A3364(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationDateTimeTable::getDateTime(WrdAnnotationDateTimeTable *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return *(_QWORD *)(v2 + 8 * a2);
}

void ChLogF(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  FILE *v9;
  char *v11;
  char *v12;
  tm *v13;
  size_t v14;
  size_t v15;
  time_t v16;
  char __str[22];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = (FILE *)g_pFile;
  if (g_pFile)
  {
    v11 = (char *)malloc_type_malloc(0x1F4uLL, 0x25C4A5A8uLL);
    if (v11)
    {
      v12 = v11;
      v16 = 0;
      time(&v16);
      v13 = localtime(&v16);
      snprintf(__str, 0x16uLL, "%02d/%02d/%04d-%02d:%02d:%02d; ",
        v13->tm_mday,
        v13->tm_mon,
        v13->tm_year + 1900,
        v13->tm_hour,
        v13->tm_min,
        v13->tm_sec);
      v14 = strlen(__str);
      fwrite(__str, 1uLL, v14, v9);
      vsnprintf(v12, 0x1F4uLL, a1, &a9);
      v15 = strlen(v12);
      fwrite(v12, 1uLL, v15, v9);
      fflush(v9);
      free(v12);
    }
  }
}

void sub_22A2A3C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A2A3D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A3E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2A3F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlOper::XlOper(XlOper *this)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 7) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
}

void XlParserVisitor::visit(XlParserVisitor *this, XlOper *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  XlString *v10;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *(_DWORD *)a2 = v4;
  switch(v4)
  {
    case 1:
      *((double *)a2 + 1) = (*(double (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
      return;
    case 2:
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
      v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
      if (v6 == 1)
        v8 = 512;
      else
        v8 = 256;
      if (v5)
      {
        v9 = v7;
        v10 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v10);
        *((_QWORD *)this + 4) = v10;
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5, v6, v9 + v8, v10);
        XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
        *((_QWORD *)this + 4) = 0;
      }
      return;
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    case 4:
      *((_BYTE *)a2 + 24) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2)) != 0;
      goto LABEL_13;
    case 8:
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      goto LABEL_13;
    default:
      if (v4 != 16)
        return;
      *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
LABEL_13:
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      return;
  }
}

void sub_22A2A4148(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlExternName::appendOperand(XlExternName *this, XlOper *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 10);
  v4 = (char *)this + 80;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 8);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 8);
    v19 = (char *)*((_QWORD *)this + 9);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 8) = v17;
    *((_QWORD *)this + 9) = v8;
    *((_QWORD *)this + 10) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 9) = v8;
}

XlOper **ChAutoPtr<XlOper>::~ChAutoPtr(XlOper **a1)
{
  XlOper *v2;

  v2 = *a1;
  if (v2)
  {
    XlOper::~XlOper(v2);
    MEMORY[0x22E2DD408]();
  }
  *a1 = 0;
  return a1;
}

uint64_t XlBaseFormulaTable::remove(XlBaseFormulaTable *this, int a2, int a3)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = XlBaseFormulaTable::locate(this, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    v6 = *((_QWORD *)this + 1);
    v7 = result;
    v8 = *(_QWORD *)(v6 + 8 * result);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v6 = *((_QWORD *)this + 1);
    }
    *(_QWORD *)(v6 + 8 * v7) = 0;
    v9 = *((_QWORD *)this + 4);
    result = *(_QWORD *)(v9 + 8 * v7);
    if (result)
    {
      result = MEMORY[0x22E2DD408](result, 0x1000C4052888210);
      v9 = *((_QWORD *)this + 4);
    }
    *(_QWORD *)(v9 + 8 * v7) = 0;
    if (*((_DWORD *)this + 16) > v5)
      *((_DWORD *)this + 16) = v5;
  }
  return result;
}

void XlOper::~XlOper(XlOper *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void sub_22A2A43D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A4478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A44DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshPath::getLimoX(EshPath *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x153u);
}

uint64_t EshPath::getLimoY(EshPath *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x154u);
}

uint64_t XlChartParserVisitor::visit(SsrwOOStream **this, XlChartPivotTableReference *a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;
  XlString *v8;
  SsrwOOStream *v9;
  uint64_t v10;
  _DWORD *exception;

  XlParserVisitor::beginRead((XlParserVisitor *)this);
  (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))this[2]->var0 + 2))(this[2], 2, 1);
  (*((void (**)(SsrwOOStream *))this[2]->var0 + 12))(this[2]);
  v4 = (*((uint64_t (**)(SsrwOOStream *))this[2]->var0 + 8))(this[2]);
  if (v4)
  {
    v5 = v4;
    v6 = (*((uint64_t (**)(SsrwOOStream *))this[2]->var0 + 8))(this[2]);
    if (this[4])
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 3002;
    }
    v7 = v6;
    v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    this[4] = (SsrwOOStream *)v8;
    XlStringParser::parse((XlStringParser *)(this + 1), this[2], v5, v7, *((_DWORD *)a2 + 2) + *((_DWORD *)this + 18), v8);
    v9 = this[4];
    v10 = *((_QWORD *)a2 + 2);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *((_QWORD *)a2 + 2) = v9;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A2A4644(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartPivotChartAppearance::~XlChartPivotChartAppearance(XlChartPivotChartAppearance *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartPivotTableReference::~XlChartPivotTableReference(XlChartPivotTableReference *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AB418;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AB418;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void sub_22A2A4868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A4A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A2A4ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A4D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlChartRadarAreaPlot::XlChartRadarAreaPlot(XlChartRadarAreaPlot *this)
{
  uint64_t v2;

  XlChartPlot::XlChartPlot(this);
  XlChartRadarArea::XlChartRadarArea((XlChartRadarArea *)(v2 + 144));
  *(_QWORD *)this = &off_24F3A9628;
  *((_QWORD *)this + 18) = &unk_24F3A9650;
}

void sub_22A2A4DF4(_Unwind_Exception *a1)
{
  XlChartPlot *v1;

  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartRadarArea::XlChartRadarArea(XlChartRadarArea *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 4160, 2, 0);
  *(_QWORD *)v1 = &off_24F3A8C28;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartRadarArea *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartRadarAreaPlot::getChartType(XlChartRadarAreaPlot *this)
{
  return 7;
}

void XlChartRadarAreaPlot::~XlChartRadarAreaPlot(XlChartRadarAreaPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x22E2DD408);
}

{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_22A2A525C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A5464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A2A55CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  void *v9;
  void *v10;
  void *v11;

  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_22A2A5728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A5854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptTextBlockStyling11Atom::PptTextBlockStyling11Atom(PptTextBlockStyling11Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BDB38;
  *(_QWORD *)(v2 + 32) = &unk_24F3BDBE0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStyling11Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 328))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStyling11Atom *a2)
{
  unsigned int v4;
  int DataLength;
  unsigned int v6;
  PptSpecialInfo11 *v7;
  __int16 v8;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  DataLength = EshRecord::getDataLength(a2);
  v6 = DataLength + v4;
  if (v4 < DataLength + v4)
  {
    do
    {
      v7 = PptTextBlockStyling11Atom::addStyle(a2);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 4 > v6)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 4003;
      }
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
      PptParserVisitor::parseSpecialInfo11(this, v7, v8, v6);
    }
    while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) < v6);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

PptSpecialInfo11 *PptTextBlockStyling11Atom::addStyle(PptTextBlockStyling11Atom *this)
{
  PptSpecialInfo11 *v2;
  unint64_t v3;
  PptSpecialInfo11 **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  PptSpecialInfo11 **v14;
  char *v15;
  char *v16;
  char *v17;
  PptSpecialInfo11 *v18;

  v2 = (PptSpecialInfo11 *)operator new();
  PptSpecialInfo11::PptSpecialInfo11(v2);
  v3 = *((_QWORD *)this + 8);
  v4 = (PptSpecialInfo11 **)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (PptSpecialInfo11 **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = (PptSpecialInfo11 *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A2A5B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1020C408CB94CA5);
  _Unwind_Resume(a1);
}

void PptSpecialInfo11::PptSpecialInfo11(PptSpecialInfo11 *this)
{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void PptTextBlockStyling11Atom::~PptTextBlockStyling11Atom(PptTextBlockStyling11Atom *this)
{
  PptTextBlockStyling11Atom::~PptTextBlockStyling11Atom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3BDB38;
  *((_QWORD *)this + 4) = &unk_24F3BDBE0;
  PptTextBlockStyling11Atom::reset(this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

_QWORD *PptTextBlockStyling11Atom::reset(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = this;
  v2 = this[6];
  v3 = this + 6;
  v4 = this[7] - v2;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = (v4 >> 3);
    do
    {
      v7 = v1[6];
      v8 = v1[7] - v7;
      if (v5 >= (v8 >> 3))
        goto LABEL_10;
      this = *(_QWORD **)(v7 + 8 * v5);
      if (this)
      {
        PptSpecialInfo11::~PptSpecialInfo11((PptSpecialInfo11 *)this);
        this = (_QWORD *)MEMORY[0x22E2DD408]();
        v7 = v1[6];
        v8 = v1[7] - v7;
      }
      if (v5 >= (v8 >> 3))
LABEL_10:
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v7 + 8 * v5++) = 0;
    }
    while (v6 != v5);
    v2 = *v3;
  }
  v1[7] = v2;
  return this;
}

void sub_22A2A5D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A5E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A5FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A2A6164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A62F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A6494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void XlChartBinaryReader::readAxisDisplayUnit(XlChartBinaryReader *this, XlChartValueAxis *a2)
{
  XlHeader *v4;
  XlRecord *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  XlChartTextFrame *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((_BYTE *)this + 444));
  v5 = (XlRecord *)operator new(0x18uLL);
  XlRecord::XlRecord(v5, v4);
  *(_QWORD *)v5 = &off_24F3AB5B0;
  *((_DWORD *)v5 + 4) = 0;
  *((_BYTE *)v5 + 20) = 0;
  (*(void (**)(_QWORD, XlRecord *))(**((_QWORD **)this + 167) + 2320))(*((_QWORD *)this + 167), v5);
  XlChartCategoryAxis::takeAlignment((uint64_t)a2, (uint64_t)v5);
  v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v8 = 1;
  do
  {
    v9 = v8;
    if ((XlChartBinaryReader::nextSibling(this, v4) & 1) == 0)
      break;
    if (v4->var1 == 4133)
    {
      v11 = (XlChartTextFrame *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 81);
      v12 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, v11, v13, 1);
      XlChartCategoryAxis::takeCategorySpec((uint64_t)a2, (uint64_t)v11);
LABEL_7:
      JUMPOUT(0x22E2DD408);
    }
    XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
    v8 = 0;
  }
  while ((v9 & 1) != 0);
  v10 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, v7, 0);
  goto LABEL_7;
}

void sub_22A2A6678(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartAxisDisplayUnit::~XlChartAxisDisplayUnit(XlChartAxisDisplayUnit *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A2A68D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlScenario::XlScenario(XlScenario *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADDF8;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 19) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlScenario *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  XlString *v10;
  char v11;
  XlString *v12;
  unsigned int v13;
  char v14;
  XlString *v15;
  int v16;
  __int16 v17;
  __int16 v18;
  unint64_t v19;
  char *v20;
  _WORD *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  __int16 v32;
  int v33;
  XlString *v34;
  SsrwOOStream *v35;
  unsigned int v36;
  int v37;
  __int16 v38;
  __int16 v39;
  unint64_t v40;
  char *v41;
  _WORD *v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  __int16 v53;

  v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 8) = v5;
  *((_BYTE *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2)) & 1;
  *((_BYTE *)a2 + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2)) & 1;
  *((_BYTE *)a2 + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 21) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 22) = v6;
  v7 = *((unsigned __int8 *)a2 + 20);
  if (!*((_BYTE *)a2 + 20))
  {
    v9 = v6;
    if (!v6)
      goto LABEL_12;
    goto LABEL_8;
  }
  if (*((unsigned __int8 *)a2 + 14) < 9u)
    v8 = 0;
  else
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v10 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v10);
  *((_QWORD *)this + 4) = v10;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v4, v10);
  XlChartPlot::takeChartSeriesFormat(a2, *((XlChartSeriesFormat **)this + 4));
  *((_QWORD *)this + 4) = 0;
  v9 = *((unsigned __int8 *)a2 + 22);
  if (*((_BYTE *)a2 + 22))
  {
LABEL_8:
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    if (*((unsigned __int8 *)a2 + 14) < 9u)
      v11 = 0;
    else
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v12 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v12);
    *((_QWORD *)this + 4) = v12;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v11, v4, v12);
    XlChartFrameType::takeBorderStyle((XlChartFrameType *)a2, *((XlChartLineStyle **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
LABEL_12:
  v13 = *((unsigned __int8 *)a2 + 21);
  if (*((_BYTE *)a2 + 21))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    if (*((unsigned __int8 *)a2 + 14) < 9u)
      v14 = 0;
    else
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v15 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v15);
    *((_QWORD *)this + 4) = v15;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v13, v14, v4, v15);
    XlChartPlot::takeDropLineFormat(a2, *((XlChartLineStyle **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  if (v5 >= 1)
  {
    v16 = 0;
    *((_QWORD *)a2 + 7) = *((_QWORD *)a2 + 6);
    do
    {
      v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v18 = v17;
      v20 = (char *)*((_QWORD *)a2 + 7);
      v19 = *((_QWORD *)a2 + 8);
      if ((unint64_t)v20 >= v19)
      {
        v22 = (char *)*((_QWORD *)a2 + 6);
        v23 = v20 - v22;
        v24 = (unint64_t)(v20 - v22) >> 1;
        v25 = (v19 - (unint64_t)v22) >> 1;
        if (2 * (int)v25 <= (v24 + 1))
          v26 = v24 + 1;
        else
          v26 = 2 * v25;
        if (v25 >= 0x7FFFFFFF)
          v27 = 0xFFFFFFFFLL;
        else
          v27 = v26;
        if ((_DWORD)v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 64, v27);
          v30 = v29;
          v22 = (char *)*((_QWORD *)a2 + 6);
          v20 = (char *)*((_QWORD *)a2 + 7);
        }
        else
        {
          v28 = 0;
          v30 = 0;
        }
        v31 = &v28[v23 & 0x1FFFFFFFELL];
        *(_WORD *)v31 = v18;
        v21 = v31 + 2;
        while (v20 != v22)
        {
          v32 = *((_WORD *)v20 - 1);
          v20 -= 2;
          *((_WORD *)v31 - 1) = v32;
          v31 -= 2;
        }
        *((_QWORD *)a2 + 6) = v31;
        *((_QWORD *)a2 + 7) = v21;
        *((_QWORD *)a2 + 8) = &v28[2 * v30];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_WORD *)v20 = v17;
        v21 = v20 + 2;
      }
      *((_QWORD *)a2 + 7) = v21;
      ++v16;
    }
    while (2 * (unsigned __int16)v5 > (__int16)v16);
    LOWORD(v33) = 0;
    do
    {
      v34 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v34);
      *((_QWORD *)this + 4) = v34;
      v35 = (SsrwOOStream *)*((_QWORD *)this + 2);
      if (*((unsigned __int8 *)a2 + 14) < 9u)
      {
        v36 = (*((uint64_t (**)(_QWORD))v35->var0 + 8))(*((_QWORD *)this + 2));
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v36, 0, v4, *((XlString **)this + 4));
      }
      else
      {
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v35, v4, v34);
      }
      XlPhoneticInfo::appendRun(a2, *((XlPhoneticRun **)this + 4));
      *((_QWORD *)this + 4) = 0;
      v33 = (__int16)(v33 + 1);
    }
    while (v33 < v5);
    LOWORD(v37) = 0;
    *((_QWORD *)a2 + 13) = *((_QWORD *)a2 + 12);
    do
    {
      v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v39 = v38;
      v41 = (char *)*((_QWORD *)a2 + 13);
      v40 = *((_QWORD *)a2 + 14);
      if ((unint64_t)v41 >= v40)
      {
        v43 = (char *)*((_QWORD *)a2 + 12);
        v44 = v41 - v43;
        v45 = (unint64_t)(v41 - v43) >> 1;
        v46 = (v40 - (unint64_t)v43) >> 1;
        if (2 * (int)v46 <= (v45 + 1))
          v47 = v45 + 1;
        else
          v47 = 2 * v46;
        if (v46 >= 0x7FFFFFFF)
          v48 = 0xFFFFFFFFLL;
        else
          v48 = v47;
        if ((_DWORD)v48)
        {
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 112, v48);
          v51 = v50;
          v43 = (char *)*((_QWORD *)a2 + 12);
          v41 = (char *)*((_QWORD *)a2 + 13);
        }
        else
        {
          v49 = 0;
          v51 = 0;
        }
        v52 = &v49[v44 & 0x1FFFFFFFELL];
        *(_WORD *)v52 = v39;
        v42 = v52 + 2;
        while (v41 != v43)
        {
          v53 = *((_WORD *)v41 - 1);
          v41 -= 2;
          *((_WORD *)v52 - 1) = v53;
          v52 -= 2;
        }
        *((_QWORD *)a2 + 12) = v52;
        *((_QWORD *)a2 + 13) = v42;
        *((_QWORD *)a2 + 14) = &v49[2 * v51];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_WORD *)v41 = v38;
        v42 = v41 + 2;
      }
      *((_QWORD *)a2 + 13) = v42;
      v37 = (__int16)(v37 + 1);
    }
    while (v37 < v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A2A6EBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlScenario::~XlScenario(XlScenario *this)
{
  XlScenario::~XlScenario(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F3ADDF8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  XlPhoneticInfo::clearRuns(this);
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
}

void sub_22A2A747C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A2A768C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A7900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A2A7A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2A7B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A2A7F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t isFormulaCell(EDCellHeader *a1)
{
  return (HIBYTE(a1->var0) >> 4) & 1;
}

uint64_t setFormulaIndexForEDCell(uint64_t result, int a2)
{
  if (result)
  {
    if ((*(_BYTE *)(result + 3) & 0x10) != 0)
      *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t styleIndexForEDCell(const EDCellHeader *a1)
{
  if (!a1)
    return -1;
  if (a1->var1 == -1)
    return -1;
  return a1->var1;
}

_DWORD *errorValueForEDCell(_DWORD *result)
{
  void *v1;
  void *v2;

  if (result)
  {
    if (*result >> 29 == 5)
    {
      if ((*result & 0x10000000) != 0)
        return (_DWORD *)result[3];
      else
        return (_DWORD *)result[2];
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EDErrorValue errorValueForEDCell(const EDCellHeader *)");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v1, v2, 282, 0, "Invalid Cell Type!");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      return 0;
    }
  }
  return result;
}

void sub_22A2A85C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t handleExceptionForClientWithCallbacks(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;

  v5 = a1;
  objc_msgSend(v5, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqualToString:", kCMTopExceptionDocumentIsEncrypted);

  if ((v7 & 1) != 0)
  {
    v8 = 64257;
  }
  else
  {
    objc_msgSend(v5, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "reason");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog((NSString *)CFSTR("EXCEPTION %@: %@"), v9, v10);

    v8 = 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(a3 + 32))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v5, "getEntry");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "getMessageText");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = objc_alloc(MEMORY[0x24BDBCE70]);
      v14 = (void *)objc_msgSend(v13, "initWithObjectsAndKeys:", v12, *MEMORY[0x24BDD0FC8], 0);

    }
    else
    {
      v14 = 0;
    }
    v15 = objc_alloc(MEMORY[0x24BDD1540]);
    if (v7)
      v16 = 1;
    else
      v16 = 912;
    v17 = (void *)objc_msgSend(v15, "initWithDomain:code:userInfo:", CFSTR("OfficeImportErrorDomain"), v16, v14);
    (*(void (**)(uint64_t, void *))(a3 + 32))(a2, v17);

  }
  return v8;
}

void sub_22A2A8754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A89AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  OcBinaryData::~OcBinaryData((OcBinaryData *)&a10);
  _Unwind_Resume(a1);
}

void XlBinaryData::XlBinaryData(XlBinaryData *this)
{
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 8));
  *((_QWORD *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlBinaryData *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void (*v14)(void);
  BOOL v15;
  unsigned int v16;
  uint64_t result;
  unsigned int v18;
  _DWORD *exception;
  unsigned int var0;
  unsigned int v21;
  XlHeader v22;

  XlHeader::XlHeader(&v22);
  v4 = *((unsigned int *)a2 + 14);
  v21 = 0;
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_45:
    v7 = 0;
    goto LABEL_46;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v4, 0);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v22, *((_BYTE *)this + 1320));
  var0 = v22.var0;
  if ((unsigned __int16)v22.var1 <= 0xEAu)
  {
    if (v22.var1 == 60)
    {
LABEL_13:
      v5 = (v4 + 4);
      v6 = v22.var0;
      goto LABEL_19;
    }
    if (v22.var1 != 127 && v22.var1 != 233)
    {
LABEL_48:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1009;
    }
    v5 = (v4 + 12);
    v6 = v22.var0 - 8;
  }
  else
  {
    if ((unsigned __int16)v22.var1 <= 0x808u)
    {
      if ((unsigned __int16)v22.var1 - 235 >= 3)
        goto LABEL_48;
      goto LABEL_13;
    }
    if (v22.var1 == 2057)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), (*((_DWORD *)a2 + 4) + v4), 0);
      v21 = *((_DWORD *)a2 + 7);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 164) + 176))(*((_QWORD *)this + 164)) < v21)
        v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 176))(*((_QWORD *)this + 164));
      (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 164) + 56))(*((_QWORD *)this + 164), *((_QWORD *)a2 + 4), &v21);
      v7 = v21;
      goto LABEL_46;
    }
    if (v22.var1 != 2150)
    {
      if (v22.var1 != 4198)
        goto LABEL_48;
      goto LABEL_13;
    }
    v5 = (v4 + 18);
    v6 = v22.var0 - 14;
  }
  var0 = v6;
LABEL_19:
  if (*((_DWORD *)a2 + 4))
  {
    v8 = 0;
    do
    {
      if (!v6)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v22, *((_BYTE *)this + 1320));
        if (!(*(unsigned int (**)(XlBinaryReader *, _QWORD))(*(_QWORD *)this + 680))(this, (unsigned __int16)v22.var1))goto LABEL_45;
        if (v22.var1 == 2150)
          v6 = v22.var0 - 14;
        else
          v6 = v22.var0;
        if (v22.var1 == 2150)
          LODWORD(v5) = v5 + 18;
        else
          LODWORD(v5) = v5 + 4;
      }
      v9 = v6 + v8;
      v10 = *((_DWORD *)a2 + 4);
      v11 = v6 - (unsigned __int16)(v10 - v8);
      if (v6 + v8 > v10)
        v6 = (unsigned __int16)(v10 - v8);
      if (v9 <= v10)
        v12 = 0;
      else
        v12 = v11;
      var0 = v12;
      v5 = v6 + v5;
      v8 += v6;
      v6 = v12;
    }
    while (v8 < v10);
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v5, 0);
  v21 = *((_DWORD *)a2 + 7);
  if (!v21)
    goto LABEL_45;
  v7 = 0;
  v13 = var0;
  while (1)
  {
    if (!v13)
    {
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v22, *((_BYTE *)this + 1320));
      if (!(*(unsigned int (**)(XlBinaryReader *, _QWORD))(*(_QWORD *)this + 680))(this, (unsigned __int16)v22.var1))goto LABEL_46;
      v13 = v22.var0;
      var0 = v22.var0;
      if (v22.var1 == 2150)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), 14, 1);
        v13 = var0 - 14;
        var0 -= 14;
      }
    }
    v14 = *(void (**)(void))(**((_QWORD **)this + 164) + 56);
    if (v13 > v21)
      break;
    v14();
    v13 = 0;
    v7 += var0;
    v16 = v21 - var0;
    v15 = v21 == var0;
    var0 = 0;
    v21 = v16;
    if (v15)
      goto LABEL_46;
  }
  v14();
  v18 = v21;
  v21 = 0;
  v7 += v18;
LABEL_46:
  result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 8), v7);
  *((_DWORD *)a2 + 6) = v7;
  return result;
}

BOOL XlChartBinaryReader::isValidBinaryRecordType(XlChartBinaryReader *this, int a2)
{
  return a2 == 4198 || XlBinaryReader::isValidBinaryRecordType(this, a2);
}

BOOL XlBinaryReader::isValidBinaryRecordType(XlBinaryReader *this, int a2)
{
  return a2 == 235 || a2 == 60 || a2 == 2150;
}

void sub_22A2A8E40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A8E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2A8FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A2A9420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A2A95F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2A9670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2A9858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2A9AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A2A9CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2A9D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2A9E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2A9FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2AA264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_22A2AA410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A2AA6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

uint64_t EshPathCommand::paramsPerCommand(int a1)
{
  return EshPathCommand::m_commandPropsArray[6 * a1 + 4];
}

void sub_22A2AABB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2AACD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2AAEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2AAF84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2AB078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2AB120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A2AB204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A2AB328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A2AB3E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2AB4EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartChartLine *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

unsigned __int16 *extractDataFromPtgRefBuffer(unsigned __int16 *result, int *a2, int *a3)
{
  *a2 = -1;
  *a3 = -1;
  if (result)
  {
    *a2 = *result;
    *a3 = *((unsigned __int8 *)result + 2);
  }
  return result;
}

void PptEnvelopeData9Atom::PptEnvelopeData9Atom(PptEnvelopeData9Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BDEA8;
  *(_QWORD *)(v2 + 32) = &unk_24F3BDF50;
  OcMsoEnvelope::OcMsoEnvelope((OcMsoEnvelope *)(v2 + 48));
}

void OcMsoEnvelope::OcMsoEnvelope(OcMsoEnvelope *this)
{
  *(_BYTE *)this = 0;
  CsString::CsString((CsString *)this + 1);
  FromRecord::FromRecord((OcMsoEnvelope *)((char *)this + 48));
  CsString::CsString((CsString *)((char *)this + 128));
  CsString::CsString((CsString *)((char *)this + 160));
  CsString::CsString((CsString *)((char *)this + 184));
  OcContact::OcContact((OcMsoEnvelope *)((char *)this + 208));
  OcContact::OcContact((OcMsoEnvelope *)((char *)this + 232));
  OcContact::OcContact((OcMsoEnvelope *)((char *)this + 256));
  CsString::CsString((CsString *)((char *)this + 280));
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(int32x2_t *)((char *)this + 4) = vdup_n_s32(0x5AE980E0u);
  *((_DWORD *)this + 3) = 1525252320;
  *((_DWORD *)this + 38) = 1;
}

void sub_22A2AB700(_Unwind_Exception *a1)
{
  CsString *v1;
  CsString *v2;
  CsString *v3;
  CsString *v4;
  OcContactCollection *v5;
  CsString *v6;
  OcContactCollection *v7;
  OcContactCollection *v8;
  OcContactCollection *v9;

  v9 = v5;
  OcContactCollection::~OcContactCollection(v9);
  OcContactCollection::~OcContactCollection(v8);
  OcContactCollection::~OcContactCollection(v7);
  CsString::~CsString(v6);
  CsString::~CsString(v4);
  CsString::~CsString(v3);
  CsString::~CsString(v2 + 4);
  CsString::~CsString(v2 + 3);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void sub_22A2AB778()
{
  JUMPOUT(0x22A2AB750);
}

void sub_22A2AB780()
{
  JUMPOUT(0x22A2AB758);
}

void sub_22A2AB788()
{
  JUMPOUT(0x22A2AB768);
}

void FromRecord::FromRecord(FromRecord *this)
{
  CsString::CsString((CsString *)this + 1);
  CsString::CsString((CsString *)this + 2);
}

void sub_22A2AB7C4(_Unwind_Exception *a1)
{
  CsString *v1;

  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t PptEnvelopeData9Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 976))(v3, a1);
}

uint64_t PptParserVisitor::visit()
{
  return 1;
}

void PptEnvelopeData9Atom::~PptEnvelopeData9Atom(PptEnvelopeData9Atom *this)
{
  *(_QWORD *)this = &off_24F3BDEA8;
  *((_QWORD *)this + 4) = &unk_24F3BDF50;
  OcMsoEnvelope::~OcMsoEnvelope((PptEnvelopeData9Atom *)((char *)this + 48));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BDEA8;
  *((_QWORD *)this + 4) = &unk_24F3BDF50;
  OcMsoEnvelope::~OcMsoEnvelope((PptEnvelopeData9Atom *)((char *)this + 48));
}

void OcMsoEnvelope::~OcMsoEnvelope(OcMsoEnvelope *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {
    *((_QWORD *)this + 39) = v2;
    operator delete(v2);
  }
  CsString::~CsString((CsString *)((char *)this + 280));
  OcContactCollection::~OcContactCollection((OcMsoEnvelope *)((char *)this + 256));
  OcContactCollection::~OcContactCollection((OcMsoEnvelope *)((char *)this + 232));
  OcContactCollection::~OcContactCollection((OcMsoEnvelope *)((char *)this + 208));
  CsString::~CsString((CsString *)((char *)this + 184));
  CsString::~CsString((CsString *)((char *)this + 160));
  CsString::~CsString((CsString *)((char *)this + 128));
  CsString::~CsString((CsString *)this + 4);
  CsString::~CsString((CsString *)this + 3);
  CsString::~CsString((CsString *)this + 1);
}

void OcContactCollection::~OcContactCollection(OcContact ***this)
{
  OcContact **v2;
  OcContact **v3;
  unint64_t v5;

  v2 = *this;
  v3 = this[1];
  if ((((char *)v3 - (char *)v2) & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        OcContact::~OcContact(v2[v5]);
        MEMORY[0x22E2DD408]();
        (*this)[v5] = 0;
        v2 = *this;
        v3 = this[1];
      }
      ++v5;
    }
    while (v5 < ((unint64_t)((char *)v3 - (char *)v2) >> 3));
  }
  if (v2)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void sub_22A2ABA00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PptExLinkAtom::PptExLinkAtom(PptExLinkAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B7F88;
  *(_QWORD *)(v2 + 32) = &unk_24F3B8030;
}

uint64_t PptExLinkAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 560))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExLinkAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) & 1;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 1
    || (PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 3u),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
    || (*((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 4u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExLinkAtom::~PptExLinkAtom(PptExLinkAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A2ABC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor()
{
  uint64_t i;

  for (i = 0xC8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_0()
{
  uint64_t i;

  for (i = 0x88u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_1()
{
  uint64_t i;

  for (i = 0xD8u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[OAXBlipEffects(Private) duotoneTransferModeEnumMap]::duotoneTransferModeEnumStructs
                       + i));
}

void __cxx_global_array_dtor_2()
{
  uint64_t i;

  for (i = 0xBE8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_3()
{
  uint64_t i;

  for (i = 0xB8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_4()
{
  uint64_t i;

  for (i = 0xB8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_5()
{
  uint64_t i;

  for (i = 0x1B8u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&_ZZZ55__OAXColorTransform_Private__colorTransformTypeEnumMap_EUb_E29colorTransformTypeEnumStructs
                       + i));
}

void __cxx_global_array_dtor_6()
{
  uint64_t i;

  for (i = 0x138u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_7()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_8()
{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_9()
{
  uint64_t i;

  for (i = 0xBA8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_10()
{
  uint64_t i;

  for (i = 0x3D8u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_11()
{
  uint64_t i;

  for (i = 0xB8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_12()
{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_13()
{
  uint64_t i;

  for (i = 0x138u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_14()
{
  uint64_t i;

  for (i = 0x288u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_15()
{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_16()
{
  uint64_t i;

  for (i = 0x68u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_17()
{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_18()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_19()
{
  uint64_t i;

  for (i = 0x68u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_20()
{
  uint64_t i;

  for (i = 0xD8u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_21()
{
  uint64_t i;

  for (i = 0x78u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_22()
{
  uint64_t i;

  for (i = 0xA8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_23()
{
  uint64_t i;

  for (i = 0x128u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_24()
{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_25()
{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_26()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x78u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_27()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_28()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_29()
{
  uint64_t i;

  for (i = 0xC78u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_30()
{
  uint64_t i;

  for (i = 0x118u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_31()
{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_32()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0xA8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_33()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_34()
{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_35()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_36()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_37()
{
  uint64_t i;

  for (i = 0x88u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[WXOfficeArt relativeHorizontalPositionEnumMap]::sRelativeHorizontalPositionStructs
                       + i));
}

void __cxx_global_array_dtor_38()
{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x98u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_39()
{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_40()
{
  uint64_t i;

  for (i = 0x258u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_41()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_42()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_43()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_44()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_45()
{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_46()
{
  uint64_t i;

  for (i = 0x108u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_47()
{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_48()
{
  uint64_t i;

  for (i = 0x358u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_49()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_50()
{
  uint64_t i;

  for (i = 0xF8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_51()
{
  uint64_t i;

  for (i = 0x238u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_52()
{
  uint64_t i;

  for (i = 0x348u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_53()
{
  uint64_t i;

  for (i = 0x78u; i != -8; i -= 16)

}

{
  uint64_t i;

  for (i = 0xE8u; i != -8; i -= 16)

}

void sub_22A2AD058(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1080C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void sub_22A2ADD98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2ADE18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2ADF30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2ADFB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUFlushableObjectInfo::TSUFlushableObjectInfo(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    *(_DWORD *)(a1 + 8) = objc_msgSend(a2, "reloadCost");
  *(_DWORD *)(a1 + 12) = 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    *(_DWORD *)(a1 + 12) = objc_msgSend(a2, "flushCost");
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 1;
  return a1;
}

void std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(a1, *a2);
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__emplace_unique_key_args<TSUFlushableObjectInfo *,TSUFlushableObjectInfo * const&>(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 20);
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *(_DWORD *)(v5[4] + 20);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__erase_unique<TSUFlushableObjectInfo *>(uint64_t **a1, const TSUFlushableObjectInfo **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>(uint64_t a1, const TSUFlushableObjectInfo **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = TSUFlushableObjectInfo::compareFlushingOrder(*(TSUFlushableObjectInfo **)(v3 + 32), *a2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 != -1)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || TSUFlushableObjectInfo::compareFlushingOrder((TSUFlushableObjectInfo *)*a2, *(const TSUFlushableObjectInfo **)(v5 + 32)) == -1)
  {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__erase_unique<TSUFlushableObjectInfo *>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

_QWORD *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  BOOL v8;
  _QWORD *v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 20);
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3[4] + 20);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_DWORD *)(v6[4] + 20))
    return v2;
  return v6;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__emplace_unique_key_args<TSUFlushableObjectInfo *,TSUFlushableObjectInfo * const&>(uint64_t **a1, TSUFlushableObjectInfo **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__find_equal<TSUFlushableObjectInfo *>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__find_equal<TSUFlushableObjectInfo *>(uint64_t a1, _QWORD *a2, TSUFlushableObjectInfo **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (TSUFlushableObjectInfo::compareFlushingOrder(*a3, (const TSUFlushableObjectInfo *)v4[4]) != -1)
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (TSUFlushableObjectInfo::compareFlushingOrder((TSUFlushableObjectInfo *)v7[4], *a3) != -1)
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_22A2AEB30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_22A2AECB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t SFUBundle()
{
  if (SFUBundle_onceToken != -1)
    dispatch_once(&SFUBundle_onceToken, &__block_literal_global);
  return SFUBundle_sSFUBundle;
}

uint64_t TSUHashWithSeed(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  for (; a2; --a2)
  {
    v3 = *a1++;
    a3 = 0x100000001B3 * (a3 ^ v3);
  }
  return a3;
}

void sub_22A2AF754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void TSUSetCrashReporterInfovAndCrash(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = a2;
  v2 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tsu_initRedactedWithFormat:arguments:", v2, v6);
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v5 = 0;
  if (v4)
    asprintf(&v5, "%s", v4);

  _os_crash();
  __break(1u);
}

void TSUCrash(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TSUSetCrashReporterInfovAndCrash(a1, (uint64_t)&a9);
}

__CFDateFormatter *TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(const __CFAllocator *a1, void *a2, CFDateFormatterStyle a3, CFDateFormatterStyle a4)
{
  const __CFLocale *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const __CFLocale *v18;
  const __CFLocale *v19;
  __CFDateFormatter *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t k;
  uint64_t v46;
  __CFString *v47;
  void *v48;
  __CFString *v49;
  __CFString *v50;
  const __CFString *v51;
  uint64_t v52;
  const __CFString *v53;
  const __CFString *v54;
  BOOL v55;
  const __CFString *v56;
  __CFString *v57;
  uint64_t v59;
  CFDateFormatterStyle v60;
  CFDateFormatterStyle v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[128];
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CFDateFormatterRef TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(CFAllocatorRef, NSLocale *__strong, CFDateFormatterStyle, CFDateFormatterStyle)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 235, 1, "<rdar://problem/29112058>: Shouldn't be passed a locale of NULL");

    TSUCrash((uint64_t)"<rdar://problem/29112058>: Shouldn't be passed a locale of NULL", v10, v11, v12, v13, v14, v15, v16, v59);
  }
  if (+[OITSULocale localeIsAutoUpdating:](OITSULocale, "localeIsAutoUpdating:", v7)
    || (+[OITSULocale currentLocale](OITSULocale, "currentLocale"),
        v17 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v17, "gregorianCalendarLocale"),
        v18 = (const __CFLocale *)objc_claimAutoreleasedReturnValue(),
        v18,
        v17,
        v7 == v18))
  {
    v20 = CFDateFormatterCreate(a1, v7, a3, a4);
  }
  else
  {
    TSULocaleNSLocaleWithHarmonizedNumberingSystem(v7);
    v19 = (const __CFLocale *)objc_claimAutoreleasedReturnValue();

    v60 = a3;
    v20 = CFDateFormatterCreate(a1, v19, a3, a4);
    -[__CFLocale localeIdentifier](v19, "localeIdentifier");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols_onceToken != -1)
      dispatch_once(&TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols_onceToken, &__block_literal_global_2);
    objc_msgSend((id)sDateFormatterCldrLock, "lock");
    objc_msgSend((id)sDateFormatterCldrSymbolsCache, "objectForKeyedSubscript:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = a4;
    v62 = v21;
    if (!v22)
    {
      v23 = (void *)sDateFormatterCldrSymbolsCache;
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setObject:forKeyedSubscript:", v22, v21);
      SFUBundle();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSULocaleStructuredDictionary dictionaryWithContentsOfFileForLocale:inDirectory:inBundle:](OITSULocaleStructuredDictionary, "dictionaryWithContentsOfFileForLocale:inDirectory:inBundle:", v19, CFSTR("DateFormatterSymbols"), v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (v25
        || (+[OITSULocaleStructuredDictionary dateFormatterSymbolsFallbackDictionary](OITSULocaleStructuredDictionary, "dateFormatterSymbolsFallbackDictionary"), (v25 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
      {
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v26 = (id)sDateFormatterCldrOverridingKeys;
        v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v71, v77, 16);
        if (v27)
        {
          v28 = v27;
          v29 = *(_QWORD *)v72;
          do
          {
            for (i = 0; i != v28; ++i)
            {
              if (*(_QWORD *)v72 != v29)
                objc_enumerationMutation(v26);
              v31 = *(_QWORD *)(*((_QWORD *)&v71 + 1) + 8 * i);
              v32 = objc_msgSend(v25, "objectForKey:locale:", v31, v19);
              if (v32)
                objc_msgSend(v22, "setObject:forKeyedSubscript:", v32, v31);
            }
            v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v71, v77, 16);
          }
          while (v28);
        }

        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v33 = (id)sDateFormatterCldrOverridingFormatKeys;
        v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
        if (v34)
        {
          v35 = v34;
          v36 = *(_QWORD *)v68;
          do
          {
            for (j = 0; j != v35; ++j)
            {
              if (*(_QWORD *)v68 != v36)
                objc_enumerationMutation(v33);
              v38 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * j);
              objc_msgSend(v25, "objectForKey:locale:", v38, v19);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              if (v39)
                objc_msgSend(v22, "setObject:forKeyedSubscript:", v39, v38);

            }
            v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
          }
          while (v35);
        }

        v21 = v62;
      }
    }
    objc_msgSend((id)sDateFormatterCldrLock, "unlock");
    objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("months.format.narrow"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    if (v40)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v41 = (id)sDateFormatterCldrOverridingKeys;
      v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
      if (v42)
      {
        v43 = v42;
        v44 = *(_QWORD *)v64;
        do
        {
          for (k = 0; k != v43; ++k)
          {
            if (*(_QWORD *)v64 != v44)
              objc_enumerationMutation(v41);
            v46 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * k);
            objc_msgSend((id)sDateFormatterCldrOverridingKeys, "objectForKeyedSubscript:", v46);
            v47 = (__CFString *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "objectForKeyedSubscript:", v46);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            CFDateFormatterSetProperty(v20, v47, v48);

          }
          v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
        }
        while (v43);
      }

      if ((unint64_t)(v60 - 1) > 3)
      {
        v49 = 0;
      }
      else
      {
        objc_msgSend(v22, "objectForKeyedSubscript:", off_24F39A760[v60 - 1]);
        v49 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      v21 = v62;
      v50 = 0;
      v51 = CFSTR("timeFormats.short");
      switch(v61)
      {
        case kCFDateFormatterNoStyle:
          goto LABEL_48;
        case kCFDateFormatterShortStyle:
          goto LABEL_47;
        case kCFDateFormatterMediumStyle:
          v51 = CFSTR("timeFormats.medium");
          goto LABEL_47;
        case kCFDateFormatterLongStyle:
          v51 = CFSTR("timeFormats.long");
          goto LABEL_47;
        case kCFDateFormatterFullStyle:
          v51 = CFSTR("timeFormats.full");
          goto LABEL_47;
        default:
          if (CFSTR("timeFormats.short"))
          {
LABEL_47:
            objc_msgSend(v22, "objectForKeyedSubscript:", v51);
            v50 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v50 = 0;
          }
LABEL_48:
          if (!objc_msgSend(v62, "rangeOfString:", CFSTR("ar"))
            && -[__CFString tsu_containsSubstring:](v49, "tsu_containsSubstring:", CFSTR("\u200F"))
            && -[__CFString characterAtIndex:](v49, "characterAtIndex:", 0) != 8207)
          {
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\u200F%@"), v49);
            v52 = objc_claimAutoreleasedReturnValue();

            v49 = (__CFString *)v52;
          }
          v53 = &stru_24F3BFFF8;
          if (v49)
            v54 = v49;
          else
            v54 = &stru_24F3BFFF8;
          if (v49)
            v55 = v50 == 0;
          else
            v55 = 1;
          v56 = CFSTR(" ");
          if (v55)
            v56 = &stru_24F3BFFF8;
          if (v50)
            v53 = v50;
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@%@"), v54, v56, v53);
          v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
          CFDateFormatterSetFormat(v20, v57);

          break;
      }
    }

    v7 = v19;
  }

  return v20;
}

id TSUGetGMTTimeZone()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v0 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
  if (!TSUGetGMTTimeZone_sGMTTimeZone)
  {
    objc_msgSend(MEMORY[0x24BDBCF38], "timeZoneForSecondsFromGMT:", 0);
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
    TSUGetGMTTimeZone_sGMTTimeZone = v1;

    v0 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
    if (!TSUGetGMTTimeZone_sGMTTimeZone)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSTimeZone *TSUGetGMTTimeZone(void)");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 599, 0, "GMTTimeZone() couldn't create time zone");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      v0 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
    }
  }
  return v0;
}

void sub_22A2B1510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSDictionary *TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(NSLocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 115, 0, "Unspecified locale no longer supported.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  SFUBundle();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localeIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[OITSULocale canonicalizeLocaleIdentifierWithLanguageScriptAndRegionOnly:](OITSULocale, "canonicalizeLocaleIdentifierWithLanguageScriptAndRegionOnly:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "pathForResource:ofType:inDirectory:", v6, CFSTR("plist"), CFSTR("DateTimeFormats"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    +[OITSULocale canonicalizeLocaleIdentifierWithLanguageOnly:](OITSULocale, "canonicalizeLocaleIdentifierWithLanguageOnly:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSULocale deducedScriptForLocale:](OITSULocale, "deducedScriptForLocale:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "localeIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = TSUDateComponentOrderingForLocale(v10);

    v12 = off_24F39A780[v11];
    if (!v9
      || (objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("generic-%@-%@-%@"), v8, v9, v12),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v4, "pathForResource:ofType:inDirectory:", v13, CFSTR("plist"), CFSTR("DateTimeFormats")),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v13,
          !v7))
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("generic-%@-%@"), v8, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "pathForResource:ofType:inDirectory:", v14, CFSTR("plist"), CFSTR("DateTimeFormats"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("fallback-%@"), v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "pathForResource:ofType:inDirectory:", v15, CFSTR("plist"), CFSTR("DateTimeFormats"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();

      }
    }

    if (!v7)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSDictionary *TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(NSLocale *__strong)");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 169, 0, "Unable to find path for plist containing date time formats!");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      v7 = 0;
    }
  }
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithContentsOfFile:", v7);
  v18 = objc_claimAutoreleasedReturnValue();

  return v18;
}

uint64_t TSUDateComponentOrderingForLocale(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (objc_class *)MEMORY[0x24BDBCEA0];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithLocaleIdentifier:", v2);

  objc_msgSend(MEMORY[0x24BDD1500], "dateFormatFromTemplate:options:locale:", CFSTR("yMd"), 0, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "rangeOfString:", CFSTR("y"));
  v6 = objc_msgSend(v4, "rangeOfString:", CFSTR("M"));
  v7 = objc_msgSend(v4, "rangeOfString:", CFSTR("d"));
  v8 = v7;
  if (v5 == 0x7FFFFFFFFFFFFFFFLL || v6 == 0x7FFFFFFFFFFFFFFFLL || v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSUDateComponentOrdering TSUDateComponentOrderingForLocale(NSString *__strong)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 730, 0, "Format Failed.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  v13 = 1;
  v14 = 4;
  if (v8 > v6)
    v14 = 5;
  if (v8 >= v5)
    v13 = v14;
  v15 = 2;
  if (v8 > v5)
    v15 = 3;
  if (v8 < v6)
    v15 = 0;
  if (v6 < v5)
    v16 = v15;
  else
    v16 = v13;

  return v16;
}

uint64_t TSUDateFormatterCopyFormatStringForDateAndTimeStyles(CFDateFormatterStyle a1, CFDateFormatterStyle a2, void *a3)
{
  void *v5;
  __CFDateFormatter *UsingHarmonizedSymbols;
  __CFDateFormatter *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;

  objc_msgSend(a3, "gregorianCalendarLocale");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  UsingHarmonizedSymbols = TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(0, v5, a1, kCFDateFormatterNoStyle);
  v7 = TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(0, v5, kCFDateFormatterNoStyle, a2);
  CFDateFormatterGetFormat(UsingHarmonizedSymbols);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  CFDateFormatterGetFormat(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = &stru_24F3BFFF8;
  if (objc_msgSend(v8, "length") && objc_msgSend(v9, "length"))
    v10 = CFSTR(" ");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@%@"), v8, v10, v9);
  v11 = objc_claimAutoreleasedReturnValue();
  CFRelease(UsingHarmonizedSymbols);
  CFRelease(v7);

  return v11;
}

id TSUDateFormatterStringFromDateWithFormat(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDateFormatterStringFromDateWithFormat(NSDate *__strong, NSString *__strong, OITSULocale *__strong)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 396, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  +[OITSUDateFormatter_FormatterCache dateFormatterStringFromDate:withFormat:locale:](OITSUDateFormatter_FormatterCache, "dateFormatterStringFromDate:withFormat:locale:", v5, v6, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id TSUShortestCompleteDateTimeFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *DateFormatFromTemplate;
  __CFString *v7;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUShortestCompleteDateTimeFormat(OITSULocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 404, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v1, "localeSpecificStorageForKey:", CFSTR("TSUShortestCompleteDateTimeFormat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    DateFormatFromTemplate = (__CFString *)CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("yMd"), 0, (CFLocaleRef)objc_msgSend(v1, "cfGregorianCalendarLocale"));
    v7 = (__CFString *)CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("jms"), 0, (CFLocaleRef)objc_msgSend(v1, "cfGregorianCalendarLocale"));
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ %@"), DateFormatFromTemplate, v7);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setLocaleSpecificStorage:forKey:", v4, CFSTR("TSUShortestCompleteDateTimeFormat"));

    objc_sync_exit(v5);
  }

  return v4;
}

void sub_22A2B1F40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUShortestCompleteTimeOnlyFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *DateFormatFromTemplate;
  void *v5;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUShortestCompleteTimeOnlyFormat(OITSULocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 427, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v1, "localeSpecificStorageForKey:", CFSTR("TSUShortestCompleteTimeOnlyFormat"));
  DateFormatFromTemplate = (void *)objc_claimAutoreleasedReturnValue();
  if (!DateFormatFromTemplate)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    DateFormatFromTemplate = (void *)CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("jms"), 0, (CFLocaleRef)objc_msgSend(v1, "cfGregorianCalendarLocale"));
    objc_msgSend(v1, "setLocaleSpecificStorage:forKey:", DateFormatFromTemplate, CFSTR("TSUShortestCompleteTimeOnlyFormat"));
    objc_sync_exit(v5);

  }
  return DateFormatFromTemplate;
}

void sub_22A2B2078(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUShortestCompleteDateOnlyFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *DateFormatFromTemplate;
  void *v5;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUShortestCompleteDateOnlyFormat(OITSULocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 445, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v1, "localeSpecificStorageForKey:", CFSTR("TSUShortestCompleteDateOnlyFormat"));
  DateFormatFromTemplate = (void *)objc_claimAutoreleasedReturnValue();
  if (!DateFormatFromTemplate)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    DateFormatFromTemplate = (void *)CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("yMd"), 0, (CFLocaleRef)objc_msgSend(v1, "cfGregorianCalendarLocale"));
    objc_msgSend(v1, "setLocaleSpecificStorage:forKey:", DateFormatFromTemplate, CFSTR("TSUShortestCompleteDateOnlyFormat"));
    objc_sync_exit(v5);

  }
  return DateFormatFromTemplate;
}

void sub_22A2B21AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultDateTimeFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDefaultDateTimeFormat(OITSULocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 522, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v1, "localeSpecificStorageForKey:", CFSTR("TSUDefaultDateTimeFormat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterShortStyle, kCFDateFormatterShortStyle, v1);
    objc_msgSend(v1, "setLocaleSpecificStorage:forKey:", v4, CFSTR("TSUDefaultDateTimeFormat"));
    objc_sync_exit(v5);

  }
  return v4;
}

void sub_22A2B22D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultDateOnlyShortFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDefaultDateOnlyShortFormat(OITSULocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 538, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v1, "localeSpecificStorageForKey:", CFSTR("TSUDefaultDateOnlyShortFormat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterShortStyle, kCFDateFormatterNoStyle, v1);
    +[OITSUDateFormatter supportedDateFormatsForLocale:](OITSUDateFormatter, "supportedDateFormatsForLocale:", v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "containsObject:", v4);

    if ((v7 & 1) == 0)
    {
      +[OITSUDateFormatter p_supportedDateFormatMatchingFormat:locale:](OITSUDateFormatter, "p_supportedDateFormatMatchingFormat:locale:", v4, v1);
      v8 = objc_claimAutoreleasedReturnValue();

      v4 = (void *)v8;
    }
    objc_msgSend(v1, "setLocaleSpecificStorage:forKey:", v4, CFSTR("TSUDefaultDateOnlyShortFormat"));
    objc_sync_exit(v5);

  }
  return v4;
}

void sub_22A2B243C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultDateOnlyMediumFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDefaultDateOnlyMediumFormat(OITSULocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 557, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v1, "localeSpecificStorageForKey:", CFSTR("TSUDefaultDateOnlyMediumFormat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterMediumStyle, kCFDateFormatterNoStyle, v1);
    +[OITSUDateFormatter supportedDateFormatsForLocale:](OITSUDateFormatter, "supportedDateFormatsForLocale:", v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "containsObject:", v4);

    if ((v7 & 1) == 0)
    {
      +[OITSUDateFormatter p_supportedDateFormatMatchingFormat:locale:](OITSUDateFormatter, "p_supportedDateFormatMatchingFormat:locale:", v4, v1);
      v8 = objc_claimAutoreleasedReturnValue();

      v4 = (void *)v8;
    }
    objc_msgSend(v1, "setLocaleSpecificStorage:forKey:", v4, CFSTR("TSUDefaultDateOnlyMediumFormat"));
    objc_sync_exit(v5);

  }
  return v4;
}

void sub_22A2B25A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultTimeOnlyShortFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDefaultTimeOnlyShortFormat(OITSULocale *__strong)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 576, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v1, "localeSpecificStorageForKey:", CFSTR("TSUDefaultTimeOnlyShortFormat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterNoStyle, kCFDateFormatterShortStyle, v1);
    +[OITSUDateFormatter supportedDateFormatsForLocale:](OITSUDateFormatter, "supportedDateFormatsForLocale:", v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "containsObject:", v4);

    if ((v7 & 1) == 0)
    {
      +[OITSUDateFormatter p_supportedTimeFormatMatchingFormat:locale:](OITSUDateFormatter, "p_supportedTimeFormatMatchingFormat:locale:", v4, v1);
      v8 = objc_claimAutoreleasedReturnValue();

      v4 = (void *)v8;
    }
    objc_msgSend(v1, "setLocaleSpecificStorage:forKey:", v4, CFSTR("TSUDefaultTimeOnlyShortFormat"));
    objc_sync_exit(v5);

  }
  return v4;
}

void sub_22A2B2714(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUCopyLocaleWithGregorianCalendarFromLocale(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  uint64_t v12;

  v1 = a1;
  v2 = (void *)MEMORY[0x24BDBCEA0];
  objc_msgSend(v1, "localeIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentsFromLocaleIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "mutableCopy");

  objc_msgSend(v5, "setObject:forKey:", *MEMORY[0x24BDBCA18], *MEMORY[0x24BDBD3C8]);
  if (!+[OITSULocale localeIsAutoUpdating:](OITSULocale, "localeIsAutoUpdating:", v1))
  {
    v6 = *MEMORY[0x24BDBCAF0];
    objc_msgSend(v1, "objectForKey:", *MEMORY[0x24BDBCAF0]);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    v9 = &stru_24F3BFFF8;
    if (v7)
      v9 = (__CFString *)v7;
    v10 = v9;

    objc_msgSend(v5, "setObject:forKey:", v10, v6);
  }
  objc_msgSend(MEMORY[0x24BDBCEA0], "localeIdentifierFromComponents:", v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEA0], "localeWithLocaleIdentifier:", v11);
  v12 = objc_claimAutoreleasedReturnValue();

  return v12;
}

uint64_t TSUGregorianUnitsPresentInFormatString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = 4 * (objc_msgSend(v1, "rangeOfString:", CFSTR("y")) != 0x7FFFFFFFFFFFFFFFLL);
  if (objc_msgSend(v1, "rangeOfString:", CFSTR("M")) != 0x7FFFFFFFFFFFFFFFLL
    || objc_msgSend(v1, "rangeOfString:", CFSTR("L")) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 |= 8uLL;
  }
  if (objc_msgSend(v1, "rangeOfString:", CFSTR("d")) != 0x7FFFFFFFFFFFFFFFLL)
    v2 |= 0x10uLL;
  if (objc_msgSend(v1, "rangeOfString:options:", CFSTR("h"), 1) != 0x7FFFFFFFFFFFFFFFLL
    || objc_msgSend(v1, "rangeOfString:options:", CFSTR("k"), 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 |= 0x20uLL;
  }
  if (objc_msgSend(v1, "rangeOfString:", CFSTR("m")) != 0x7FFFFFFFFFFFFFFFLL)
    v2 |= 0x40uLL;
  if (objc_msgSend(v1, "rangeOfString:", CFSTR("s")) != 0x7FFFFFFFFFFFFFFFLL)
    v2 |= 0x80uLL;

  return v2;
}

uint64_t TSUCreateDateWithGregorianUnitsSetToDefaultValue(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (objc_class *)MEMORY[0x24BDBCE48];
  v4 = a2;
  v5 = a1;
  v6 = [v3 alloc];
  v7 = *MEMORY[0x24BDBCA18];
  v8 = (void *)objc_msgSend(v6, "initWithCalendarIdentifier:", *MEMORY[0x24BDBCA18]);
  objc_msgSend(MEMORY[0x24BDBCF38], "timeZoneForSecondsFromGMT:", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTimeZone:", v9);

  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE48]), "initWithCalendarIdentifier:", v7);
  objc_msgSend(MEMORY[0x24BDBCF38], "defaultTimeZone");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setTimeZone:", v11);

  objc_msgSend(v8, "components:fromDate:", 252, v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "components:fromDate:", 252, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = TSUGregorianUnitsPresentInFormatString(v4);
  v16 = ~(_BYTE)v15;
  if ((v15 & 0x1C) == 0)
  {
    if (v15 < 0x20)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSDate *TSUCreateDateWithGregorianUnitsSetToDefaultValue(NSDate *__strong, NSString *__strong)");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 705, 0, "this line must not be reached");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      if ((v16 & 0x20) != 0)
        goto LABEL_24;
      goto LABEL_16;
    }
    if ((~(_BYTE)v15 & 4) != 0)
    {
      objc_msgSend(v12, "setYear:", objc_msgSend(v14, "year"));
      if ((~(_BYTE)v15 & 8) == 0)
      {
LABEL_14:
        if ((~(_BYTE)v15 & 0x10) == 0)
          goto LABEL_15;
LABEL_22:
        v20 = objc_msgSend(v14, "day");
        v19 = v12;
LABEL_23:
        objc_msgSend(v19, "setDay:", v20);
        if ((~(_BYTE)v15 & 0x20) != 0)
          goto LABEL_24;
LABEL_16:
        if ((v16 & 0x40) == 0)
          goto LABEL_17;
LABEL_25:
        objc_msgSend(v12, "setMinute:", 0);
        if ((v16 & 0x80) == 0)
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else if ((~(_BYTE)v15 & 8) == 0)
    {
      goto LABEL_14;
    }
    objc_msgSend(v12, "setMonth:", objc_msgSend(v14, "month"));
    if ((~(_BYTE)v15 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_22;
  }
  if ((~(_BYTE)v15 & 4) == 0)
  {
    if ((~(_BYTE)v15 & 8) == 0)
      goto LABEL_4;
LABEL_10:
    objc_msgSend(v12, "setMonth:", 1);
    if ((~(_BYTE)v15 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_11;
  }
  objc_msgSend(v12, "setYear:", objc_msgSend(v14, "year"));
  if ((~(_BYTE)v15 & 8) != 0)
    goto LABEL_10;
LABEL_4:
  if ((~(_BYTE)v15 & 0x10) != 0)
  {
LABEL_11:
    v19 = v12;
    v20 = 1;
    goto LABEL_23;
  }
LABEL_15:
  if ((~(_BYTE)v15 & 0x20) == 0)
    goto LABEL_16;
LABEL_24:
  objc_msgSend(v12, "setHour:", 0);
  if ((v16 & 0x40) != 0)
    goto LABEL_25;
LABEL_17:
  if (v16 < 0)
LABEL_18:
    objc_msgSend(v12, "setSecond:", 0);
LABEL_19:
  objc_msgSend(v8, "dateFromComponents:", v12);
  v21 = objc_claimAutoreleasedReturnValue();

  return v21;
}

uint64_t TSUCreateArrayOfDateFormatStringsForLocale(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(a1);
  objc_msgSend(v1, "objectForKey:", CFSTR("AcceptedDateFormats"));
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t TSUCreateArrayOfTimeFormatStringsForLocale(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(a1);
  objc_msgSend(v1, "objectForKey:", CFSTR("AcceptedTimeFormats"));
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t TSUCreateDateFromStringWithPreferredFormat(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  if (!v10)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSDate *TSUCreateDateFromStringWithPreferredFormat(NSString *__strong, OITSULocale *__strong, NSString *__strong, NSString *__autoreleasing *, BOOL)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 763, 0, "A locale is required here.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(v10, "dateParserLibrary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "checkoutDateParser");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "newDateFromString:preferredFormatString:successfulFormatString:tryAggressiveFormats:", v9, v11, a4, a5);
  objc_msgSend(v14, "returnDateParser:", v15);

  return v16;
}

void sub_22A2B2E40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2B31F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_22A2B37C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

__CFDateFormatter *p_createADateFormatter(void *a1)
{
  __CFDateFormatter *UsingHarmonizedSymbols;
  const __CFString *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  UsingHarmonizedSymbols = TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(0, a1, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetProperty(UsingHarmonizedSymbols, (CFStringRef)*MEMORY[0x24BDBD2D0], (CFTypeRef)*MEMORY[0x24BDBD268]);
  v2 = (const __CFString *)*MEMORY[0x24BDBD340];
  TSUGetGMTTimeZone();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  CFDateFormatterSetProperty(UsingHarmonizedSymbols, v2, v3);

  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc(MEMORY[0x24BDBCE48]);
  v6 = (void *)objc_msgSend(v5, "initWithCalendarIdentifier:", *MEMORY[0x24BDBCA18]);
  objc_msgSend(v6, "components:fromDate:", 4, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  TSUGetGMTTimeZone();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setTimeZone:", v8);

  objc_msgSend(v6, "dateFromComponents:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  CFDateFormatterSetProperty(UsingHarmonizedSymbols, (CFStringRef)*MEMORY[0x24BDBD2C0], v9);

  return UsingHarmonizedSymbols;
}

void sub_22A2B6F30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUDurationFormatterTimeIntervalFromStringWithCompactStyleStartUnit(void *a1, double *a2, _DWORD *a3, _DWORD *a4, int a5, void *a6)
{
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  char isKindOfClass;
  char v21;
  unint64_t v22;
  unsigned int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  int v34;
  int v35;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  void *v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  double v48;
  void *v50;
  uint64_t v51;
  unsigned int v52;
  int v54;
  double v55;
  char v56;

  v56 = 0;
  v10 = (void *)MEMORY[0x22E2DDB58]();
  v50 = a6;
  v11 = (void *)TSUDurationFormatterTokensFromString(a1, &v56, a6);
  v12 = v11;
  objc_autoreleasePoolPop(v10);
  if (!v11 || !objc_msgSend(v11, "count"))
  {
LABEL_40:

    return 0;
  }
  v55 = 0.0;
  v51 = objc_msgSend(v50, "decimalSeparator");
  if (a3)
    *a3 = 0;
  if (!v56)
  {
    if (a4)
      *a4 = 1;
    v22 = objc_msgSend(v11, "count");
    v23 = objc_msgSend(CFSTR("-"), "isEqual:", objc_msgSend(v11, "objectAtIndex:", 0));
    v24 = 0.0;
    if (v22 <= v23)
    {
      v30 = 0.0;
      v29 = 0.0;
      v28 = 0.0;
      v27 = 0.0;
    }
    else
    {
      v25 = 0;
      v52 = v23;
      v26 = v23;
      v27 = 0.0;
      v28 = 0.0;
      v29 = 0.0;
      v30 = 0.0;
      while (2)
      {
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", v26 + v25), "first"), "doubleValue");
        v32 = v31;
        v33 = (void *)objc_msgSend(v11, "objectAtIndex:", v26 + v25 + 1);
        v54 = 1;
        v34 = TSUDurationFormatterDurationUnitFromString(v33, &v54);
        if (a4 && !v25)
          *a4 = v54;
        switch(v34)
        {
          case 1:
            v27 = v32;
            goto LABEL_34;
          case 2:
            v24 = v32;
            goto LABEL_34;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_40;
          case 4:
            v30 = v32;
            goto LABEL_34;
          case 8:
            v29 = v32;
            goto LABEL_34;
          default:
            if (v34 == 16)
            {
              v28 = v32;
            }
            else
            {
              if (v34 != 32)
                goto LABEL_40;
              v55 = v32 / 1000.0;
            }
LABEL_34:
            if (a3)
              *a3 |= v34;
            v25 += 2;
            if (v26 + v25 < v22)
              continue;
            v23 = v52;
            break;
        }
        break;
      }
    }
    goto LABEL_91;
  }
  if (a4)
    *a4 = 0;
  v13 = objc_msgSend(v11, "count");
  v14 = v13;
  if (v13)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = v13 - 2;
    while (1)
    {
      v19 = (void *)objc_msgSend(v11, "objectAtIndex:", v15);
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((objc_msgSend(v19, "isEqual:", CFSTR(".")) & 1) != 0)
      {
        if (v18 != v15)
          goto LABEL_16;
      }
      else
      {
        v21 = objc_msgSend(v19, "isEqual:", v51);
        if (v18 != v15 || (v21 & 1) == 0)
          goto LABEL_16;
      }
      v16 = 1;
LABEL_16:
      v17 += isKindOfClass & 1;
      if (v14 == ++v15)
        goto LABEL_39;
    }
  }
  v17 = 0;
  v16 = 0;
LABEL_39:
  v35 = v17 - (v16 & 1);
  if (v35 > 5)
    goto LABEL_40;
  v37 = 5;
  v38 = a5;
  if (a5 <= 7)
  {
    if (a5 == 2)
    {
      v37 = 4;
    }
    else if (a5 == 4)
    {
      v37 = 3;
    }
  }
  else
  {
    switch(a5)
    {
      case 8:
        v37 = 2;
        break;
      case 16:
        v37 = 1;
        break;
      case 32:
        v37 = 0;
        break;
    }
  }
  if (!a5 || v17 > v37 + (v16 & 1u))
  {
    v46 = v35 - 1;
    if (v46 >= 5)
    {
      v47 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSUDurationFormatterTimeIntervalFromStringWithCompactStyleStartUnit(NSString *, NSTimeInterval *, TSUDurationUnits *, TSUDurationStyle *, TSUDurationUnits, OITSULocale *)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v47, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"), 668, 0, "Unexpected duration unit count!");
      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      v38 = 0;
      if (!v14)
        goto LABEL_89;
    }
    else
    {
      v38 = dword_22A4BCF9C[v46];
      if (!v14)
        goto LABEL_89;
    }
LABEL_56:
    v39 = 0;
    v40 = 0;
    v27 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0.0;
    v24 = 0.0;
    do
    {
      v41 = (void *)objc_msgSend(v11, "objectAtIndex:", v39);
      if ((objc_msgSend(CFSTR("-"), "isEqual:", v41) & 1) != 0)
      {
        v40 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend((id)objc_msgSend(v41, "first"), "doubleValue");
          v43 = v42;
          if (v39
            && ((objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", v39 - 1), "isEqual:", CFSTR(".")) & 1) != 0
             || objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", v39 - 1), "isEqual:", v51)))
          {
            v44 = objc_msgSend(v41, "second");
            TSUGetNumberValueAndTypeFromString((void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@"), v51, v44), (void *)objc_msgSend(v50, "locale"), (uint64_t)&v55, 0, 0, 0);
            if (a3)
              *a3 |= 0x20u;
          }
          else
          {
            switch(v38)
            {
              case 1:
                if (a3)
                  *a3 |= 1u;
                v38 = 2;
                v27 = v43;
                break;
              case 2:
                if (a3)
                  *a3 |= 2u;
                v38 = 4;
                v24 = v43;
                break;
              case 3:
              case 5:
              case 6:
              case 7:
                goto LABEL_72;
              case 4:
                if (a3)
                  *a3 |= 4u;
                v38 = 8;
                v30 = v43;
                break;
              case 8:
                if (a3)
                  *a3 |= 8u;
                v38 = 16;
                v29 = v43;
                break;
              default:
                if (v38 == 16)
                {
                  v38 = 0;
                  if (a3)
                    *a3 |= 0x10u;
                  v28 = v43;
                }
                else
                {
LABEL_72:
                  v45 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSUDurationFormatterTimeIntervalFromStringWithCompactStyleStartUnit(NSString *, NSTimeInterval *, TSUDurationUnits *, TSUDurationStyle *, TSUDurationUnits, OITSULocale *)");
                  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v45, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"), 716, 0, "Unexpected duration unit!");
                  +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
                }
                break;
            }
          }
        }
      }
      ++v39;
    }
    while (v14 != v39);
    goto LABEL_90;
  }
  if (v14)
    goto LABEL_56;
LABEL_89:
  v40 = 0;
  v24 = 0.0;
  v30 = 0.0;
  v29 = 0.0;
  v28 = 0.0;
  v27 = 0.0;
LABEL_90:
  v23 = v40 & 1;
LABEL_91:
  if (a2)
  {
    v48 = v28 + v24 * 86400.0 + v27 * 604800.0 + v30 * 3600.0 + v29 * 60.0 + v55;
    *a2 = v48;
    if (v23)
      *a2 = -v48;
  }

  return 1;
}

uint64_t durationStringsEqual(void *a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = a2;
  v3 = a1;
  if ((objc_msgSend(a1, "isEqualToString:", a2) & 1) != 0)
    return 1;
  if (objc_msgSend(v3, "rangeOfString:", CFSTR(" ")) != 0x7FFFFFFFFFFFFFFFLL)
    v3 = (void *)objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_24F3BFFF8);
  if (objc_msgSend(v2, "rangeOfString:", CFSTR(" ")) != 0x7FFFFFFFFFFFFFFFLL)
    v2 = (void *)objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_24F3BFFF8);
  return objc_msgSend(v3, "isEqualToString:", v2);
}

uint64_t TSUDurationFormatterDurationUnitFromString(void *a1, int *a2)
{
  id v4;
  uint64_t result;
  int v6;

  v4 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:](OITSUDurationLocaleSpecificStorage, "localeSpecificStorageForLocale:");
  if ((durationStringsEqual((void *)objc_msgSend(v4, "weekLongSingularString"), a1) & 1) != 0
    || durationStringsEqual((void *)objc_msgSend(v4, "weekLongPluralString"), a1))
  {
    result = 1;
    if (!a2)
      return result;
    goto LABEL_4;
  }
  if ((durationStringsEqual((void *)objc_msgSend(v4, "weekMediumSingularString"), a1) & 1) != 0
    || (durationStringsEqual((void *)objc_msgSend(v4, "weekMediumPluralString"), a1) & 1) != 0
    || durationStringsEqual((void *)objc_msgSend(v4, "weekShortString"), a1))
  {
    v6 = 1;
    result = 1;
    if (!a2)
      return result;
    goto LABEL_9;
  }
  if ((durationStringsEqual((void *)objc_msgSend(v4, "dayLongSingularString"), a1) & 1) == 0
    && !durationStringsEqual((void *)objc_msgSend(v4, "dayLongPluralString"), a1))
  {
    if ((durationStringsEqual((void *)objc_msgSend(v4, "dayMediumSingularString"), a1) & 1) != 0
      || (durationStringsEqual((void *)objc_msgSend(v4, "dayMediumPluralString"), a1) & 1) != 0
      || durationStringsEqual((void *)objc_msgSend(v4, "dayShortString"), a1))
    {
      result = 2;
      if (!a2)
        return result;
      goto LABEL_19;
    }
    if ((durationStringsEqual((void *)objc_msgSend(v4, "hourLongSingularString"), a1) & 1) != 0
      || durationStringsEqual((void *)objc_msgSend(v4, "hourLongPluralString"), a1))
    {
      result = 4;
      if (!a2)
        return result;
      goto LABEL_4;
    }
    if ((durationStringsEqual((void *)objc_msgSend(v4, "hourMediumSingularString"), a1) & 1) != 0
      || (durationStringsEqual((void *)objc_msgSend(v4, "hourMediumPluralString"), a1) & 1) != 0
      || durationStringsEqual((void *)objc_msgSend(v4, "hourShortString"), a1))
    {
      result = 4;
      if (!a2)
        return result;
      goto LABEL_19;
    }
    if ((durationStringsEqual((void *)objc_msgSend(v4, "minuteLongSingularString"), a1) & 1) != 0
      || durationStringsEqual((void *)objc_msgSend(v4, "minuteLongPluralString"), a1))
    {
      result = 8;
      if (!a2)
        return result;
      goto LABEL_4;
    }
    if ((durationStringsEqual((void *)objc_msgSend(v4, "minuteMediumSingularString"), a1) & 1) != 0
      || (durationStringsEqual((void *)objc_msgSend(v4, "minuteMediumPluralString"), a1) & 1) != 0
      || durationStringsEqual((void *)objc_msgSend(v4, "minuteShortString"), a1))
    {
      result = 8;
      if (!a2)
        return result;
      goto LABEL_19;
    }
    if ((durationStringsEqual((void *)objc_msgSend(v4, "secondLongSingularString"), a1) & 1) != 0
      || durationStringsEqual((void *)objc_msgSend(v4, "secondLongPluralString"), a1))
    {
      result = 16;
      if (!a2)
        return result;
      goto LABEL_4;
    }
    if ((durationStringsEqual((void *)objc_msgSend(v4, "secondMediumSingularString"), a1) & 1) != 0
      || (durationStringsEqual((void *)objc_msgSend(v4, "secondMediumPluralString"), a1) & 1) != 0
      || durationStringsEqual((void *)objc_msgSend(v4, "secondShortString"), a1))
    {
      result = 16;
      if (!a2)
        return result;
    }
    else
    {
      if ((durationStringsEqual((void *)objc_msgSend(v4, "millisecondLongSingularString"), a1) & 1) != 0
        || durationStringsEqual((void *)objc_msgSend(v4, "millisecondLongPluralString"), a1))
      {
        result = 32;
        if (!a2)
          return result;
LABEL_4:
        v6 = 2;
LABEL_9:
        *a2 = v6;
        return result;
      }
      result = durationStringsEqual((void *)objc_msgSend(v4, "millisecondShortString"), a1);
      if (!(_DWORD)result)
        return result;
      result = 32;
      if (!a2)
        return result;
    }
LABEL_19:
    v6 = 1;
    goto LABEL_9;
  }
  v6 = 2;
  result = 2;
  if (a2)
    goto LABEL_9;
  return result;
}

const __CFString *TSUDurationFormatterUnitString(int a1, int a2, double a3)
{
  id v6;
  const __CFString *result;

  if (!a2)
    return &stru_24F3BFFF8;
  v6 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:](OITSUDurationLocaleSpecificStorage, "localeSpecificStorageForLocale:");
  switch(a1)
  {
    case 1:
      if (a2 == 2)
      {
        if (a3 == 1.0)
          return (const __CFString *)objc_msgSend(v6, "weekLongSingularString");
        else
          return (const __CFString *)objc_msgSend(v6, "weekLongPluralString");
      }
      else
      {
        if (a2 != 1)
          return &stru_24F3BFFF8;
        return (const __CFString *)objc_msgSend(v6, "weekShortString");
      }
    case 2:
      if (a2 == 2)
      {
        if (a3 == 1.0)
          return (const __CFString *)objc_msgSend(v6, "dayLongSingularString");
        else
          return (const __CFString *)objc_msgSend(v6, "dayLongPluralString");
      }
      else
      {
        if (a2 != 1)
          return &stru_24F3BFFF8;
        return (const __CFString *)objc_msgSend(v6, "dayShortString");
      }
    case 3:
    case 5:
    case 6:
    case 7:
      return &stru_24F3BFFF8;
    case 4:
      if (a2 == 2)
      {
        if (a3 == 1.0)
          return (const __CFString *)objc_msgSend(v6, "hourLongSingularString");
        else
          return (const __CFString *)objc_msgSend(v6, "hourLongPluralString");
      }
      else
      {
        if (a2 != 1)
          return &stru_24F3BFFF8;
        return (const __CFString *)objc_msgSend(v6, "hourShortString");
      }
    case 8:
      if (a2 == 2)
      {
        if (a3 == 1.0)
          return (const __CFString *)objc_msgSend(v6, "minuteLongSingularString");
        else
          return (const __CFString *)objc_msgSend(v6, "minuteLongPluralString");
      }
      else
      {
        if (a2 != 1)
          return &stru_24F3BFFF8;
        return (const __CFString *)objc_msgSend(v6, "minuteShortString");
      }
    default:
      if (a1 == 16)
      {
        if (a2 == 2)
        {
          if (a3 == 1.0)
            result = (const __CFString *)objc_msgSend(v6, "secondLongSingularString");
          else
            result = (const __CFString *)objc_msgSend(v6, "secondLongPluralString");
        }
        else
        {
          if (a2 != 1)
            return &stru_24F3BFFF8;
          result = (const __CFString *)objc_msgSend(v6, "secondShortString");
        }
      }
      else
      {
        if (a1 != 32)
          return &stru_24F3BFFF8;
        if (a2 == 2)
        {
          if (a3 == 1.0)
            result = (const __CFString *)objc_msgSend(v6, "millisecondLongSingularString");
          else
            result = (const __CFString *)objc_msgSend(v6, "millisecondLongPluralString");
        }
        else
        {
          if (a2 != 1)
            return &stru_24F3BFFF8;
          result = (const __CFString *)objc_msgSend(v6, "millisecondShortString");
        }
      }
      break;
  }
  return result;
}

uint64_t TSUDurationFormatterTokensFromString(void *a1, _BYTE *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  int v37;
  char v38;
  int v40;
  uint64_t v41;
  void *v42;
  void *v43;
  int v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  _BYTE v59[128];
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v5 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:](OITSUDurationLocaleSpecificStorage, "localeSpecificStorageForLocale:");
  v6 = (void *)objc_msgSend(a1, "stringByTrimmingCharactersInSet:", objc_msgSend(v5, "whitespaceAndNewlineCharacterSet"));
  v7 = (void *)objc_msgSend(MEMORY[0x24BDD17A8], "scannerWithString:", v6);
  objc_msgSend(v7, "setCharactersToBeSkipped:", objc_msgSend(v5, "emptyCharacterSet"));
  v58 = 0;
  v42 = a3;
  v41 = objc_msgSend(a3, "decimalSeparator");
  v8 = 0;
  if ((objc_msgSend(v7, "isAtEnd") & 1) != 0)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_3;
  }
  v44 = 0;
  v10 = 0;
  v40 = 0;
  v12 = 0;
  v13 = -1;
  v43 = v6;
  do
  {
    if (!v8)
      v8 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v14 = objc_msgSend(v6, "characterAtIndex:", objc_msgSend(v7, "scanLocation"));
    if (!objc_msgSend((id)objc_msgSend(v5, "alphabeticCharacterSet"), "characterIsMember:", v14))
    {
      if ((v12 & 1) != 0)
      {
        if ((objc_msgSend((id)objc_msgSend(v5, "decimalDigitCharacterSet"), "characterIsMember:", v14) & 1) != 0)
        {
          if (!v13)
            return 0;
          v29 = objc_msgSend(v5, "decimalDigitCharacterSet");
LABEL_43:
          objc_msgSend(v7, "scanCharactersFromSet:intoString:", v29, &v58);
          v45 = 0.0;
          if (!TSUGetNumberValueAndTypeFromString(v58, (void *)objc_msgSend(v42, "locale"), (uint64_t)&v45, 0, 0, 0))return 0;
          v44 |= trunc(v45) != v45;
          v30 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:");
          objc_msgSend(v8, "addObject:", +[OITSUPair pairWithFirst:second:](OITSUPair, "pairWithFirst:second:", v30, v58));
          v13 = 0;
          goto LABEL_62;
        }
      }
      else if ((objc_msgSend((id)objc_msgSend(v5, "decimalDigitAndSeperatorsCharacterSet"), "characterIsMember:", v14) & 1) != 0)
      {
        if (!v13)
          return 0;
        v29 = objc_msgSend(v5, "decimalDigitAndSeperatorsCharacterSet");
        goto LABEL_43;
      }
      if (!objc_msgSend((id)objc_msgSend(v5, "minusSignCharacterSet"), "characterIsMember:", v14)
        || objc_msgSend(v8, "count"))
      {
        return 0;
      }
      objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "minusSignCharacterSet"), 0);
      objc_msgSend(v8, "addObject:", CFSTR("-"));
      v13 = 3;
      v40 = 1;
      goto LABEL_62;
    }
    if (((v12 | v10) & 1) != 0)
      return 0;
    v15 = objc_msgSend(v8, "count");
    result = 0;
    if (v13 == 3 || !v15)
      return result;
    objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "alphabeticCharacterSet"), &v58);
    if (v13 == 1)
    {
      if (!objc_msgSend((id)objc_msgSend(v5, "multiWordDurationUnitStrings"), "count"))
        goto LABEL_26;
      v17 = objc_msgSend(v8, "lastObject");
      v18 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ %@"), v17, v58);
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v19 = (void *)objc_msgSend(v5, "multiWordDurationUnitStrings");
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)v55;
LABEL_20:
        v23 = 0;
        while (1)
        {
          if (*(_QWORD *)v55 != v22)
            objc_enumerationMutation(v19);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * v23), "hasPrefix:", v18) & 1) != 0)
            break;
          if (v21 == ++v23)
          {
            v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
            if (v21)
              goto LABEL_20;
            goto LABEL_26;
          }
        }
      }
      else
      {
LABEL_26:
        result = objc_msgSend((id)objc_msgSend(v5, "fullStopDurationUnitStrings"), "count");
        if (!result)
          return result;
        v24 = objc_msgSend(v8, "lastObject");
        v18 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@"), v24, v58);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v25 = (void *)objc_msgSend(v5, "fullStopDurationUnitStrings");
        result = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
        if (!result)
          return result;
        v26 = result;
        v27 = *(_QWORD *)v51;
LABEL_29:
        v28 = 0;
        while (1)
        {
          if (*(_QWORD *)v51 != v27)
            objc_enumerationMutation(v25);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * v28), "hasPrefix:", v18))
            break;
          if (v26 == ++v28)
          {
            result = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
            v26 = result;
            if (result)
              goto LABEL_29;
            return result;
          }
        }
      }
      objc_msgSend(v8, "removeLastObject");
      v58 = v18;
    }
    if (objc_msgSend((id)objc_msgSend(v5, "fullStopDurationUnitStrings"), "count"))
    {
      v31 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@."), v58);
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v32 = (void *)objc_msgSend(v5, "fullStopDurationUnitStrings");
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v46, v59, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v47;
        while (2)
        {
          for (i = 0; i != v34; ++i)
          {
            if (*(_QWORD *)v47 != v35)
              objc_enumerationMutation(v32);
            if ((objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * i), "hasPrefix:", v31) & 1) != 0)
            {
              if (objc_msgSend(v7, "scanString:intoString:", CFSTR("."), 0))
                v58 = v31;
              goto LABEL_61;
            }
          }
          v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v46, v59, 16);
          if (v34)
            continue;
          break;
        }
      }
    }
LABEL_61:
    objc_msgSend(v8, "addObject:", v58);
    v13 = 1;
    v6 = v43;
LABEL_62:
    objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "whitespaceCharacterSet"), 0);
    v37 = objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "separatorPunctuationCharacterSet"), &v58);
    v38 = v37;
    if (v37)
    {
      if ((objc_msgSend(v8, "count") == 0) | v10 & 1)
        return 0;
      objc_msgSend(v8, "addObject:", v58);
      if ((objc_msgSend(v58, "isEqualToString:", CFSTR(".")) & 1) != 0)
      {
        v13 = 2;
        v10 = 1;
      }
      else
      {
        v10 = objc_msgSend(v58, "isEqualToString:", v41);
        v12 |= v10 ^ 1;
        v13 = 2;
      }
    }
    objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "whitespaceCharacterSet"), 0);
  }
  while (!objc_msgSend(v7, "isAtEnd"));
  v9 = v44;
  v11 = v40;
  if ((v38 & 1) != 0)
    return 0;
LABEL_3:
  if (a2)
    *a2 = (v10 | v12) & 1;
  if ((v12 & v9 & 1) != 0)
    return 0;
  if (((v12 | v10) & 1) != 0)
  {
    if (!(v12 & 1 | ((v10 & 1) == 0)))
      return 0;
  }
  else if (((v11 ^ ((objc_msgSend(v8, "count") & 1) == 0)) & 1) == 0)
  {
    return 0;
  }
  if ((v11 & 1) != 0 && (unint64_t)objc_msgSend(v8, "count") < 2)
    return 0;
  else
    return (uint64_t)v8;
}

uint64_t TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(void *a1, int a2, void *a3, double a4)
{
  id v4;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _OWORD *v30;
  _BOOL4 v31;
  int v32;
  double v33;
  double v34;
  double v35;
  int v36;
  double v37;
  int v38;
  _BOOL4 v39;
  double v40;
  double v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  char v55;
  int v56;
  __int16 v57;
  _OWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  const __CFString *v68;
  uint64_t v69;
  void *v70;
  uint64_t v72;
  id v73;
  void *v74;
  char v75;
  unsigned int v77;
  id v78;
  unsigned __int16 v79;
  int v80;
  _OWORD v81[6];
  uint64_t v82;

  v4 = a3;
  v82 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"), 963, 0, "invalid nil value for '%{public}s'", "locale");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    v4 = +[OITSULocale currentLocale](OITSULocale, "currentLocale");
  }
  v8 = objc_msgSend(a1, "length");
  v9 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithCapacity:", v8);
  v73 = v4;
  v10 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:](OITSUDurationLocaleSpecificStorage, "localeSpecificStorageForLocale:", v4);
  if (a4 < 0.0)
  {
    objc_msgSend(v9, "appendString:", CFSTR("-"));
    a4 = fabs(a4);
  }
  v74 = v9;
  if (!v8)
  {
    v36 = 0;
    v75 = 0;
    v11 = 0;
    v31 = 1;
    v37 = 2.22507386e-308;
    v34 = 2.22507386e-308;
    v33 = 2.22507386e-308;
    v35 = 2.22507386e-308;
    goto LABEL_51;
  }
  v75 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v78 = v10;
  do
  {
    v14 = objc_msgSend(a1, "characterAtIndex:", v12);
    v15 = v14;
    v16 = v12 + 1;
    if (v12 + 1 >= v8)
    {
      if ((_DWORD)v14 == 39)
        goto LABEL_45;
    }
    else
    {
      v17 = objc_msgSend(a1, "characterAtIndex:", v12 + 1);
      if ((_DWORD)v15 == 39)
      {
        if (v17 == 39)
        {
          objc_msgSend(v9, "appendString:", CFSTR("'"));
          v16 = v12 + 2;
          goto LABEL_45;
        }
        while (1)
        {
          v18 = objc_msgSend(a1, "characterAtIndex:", v16);
          v19 = v18;
          if (v16 + 1 >= v8)
            break;
          v20 = objc_msgSend(a1, "characterAtIndex:", v16 + 1);
          if (v19 != 39)
            goto LABEL_16;
          if (v20 != 39)
            goto LABEL_32;
          objc_msgSend(v9, "appendString:", CFSTR("'"));
          v16 += 2;
LABEL_17:
          if (v16 >= v8)
            goto LABEL_45;
        }
        if (v18 == 39)
        {
LABEL_32:
          ++v16;
          goto LABEL_45;
        }
LABEL_16:
        objc_msgSend(v9, "appendFormat:", CFSTR("%C"), v19);
        ++v16;
        goto LABEL_17;
      }
    }
    if (!objc_msgSend((id)objc_msgSend(v10, "specialDurationFormatCharacters"), "characterIsMember:", v15))
    {
      objc_msgSend(v9, "appendFormat:", CFSTR("%C"), v15);
      goto LABEL_45;
    }
    if ((v11 + 1) >= 7)
    {
      v21 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
      v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m");
      v23 = v21;
      v10 = v78;
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v23, v22, 1013, 0, "Too many placeholders in duration format string!");
      v9 = v74;
      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
    v24 = objc_msgSend(v9, "length");
    if (v16 >= v8)
    {
      v28 = 0;
      v27 = v11 + 1;
    }
    else
    {
      v25 = v8 - v12;
      v26 = 1;
      while (objc_msgSend(a1, "characterAtIndex:", v16) == (_DWORD)v15)
      {
        ++v26;
        if (v8 == ++v16)
        {
          v16 = v8;
          v26 = v25;
          break;
        }
      }
      v10 = v78;
      v27 = v11 + 1;
      v28 = 0;
      switch(v26)
      {
        case 1:
          break;
        case 2:
          v28 = 1;
          break;
        case 3:
          v28 = 2;
          break;
        case 5:
          v28 = 2;
          v75 = 1;
          break;
        default:
          v28 = 3;
          break;
      }
    }
    v29 = 0;
    switch((int)v15)
    {
      case 'd':
        v29 = 2;
        break;
      case 'e':
      case 'g':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
        break;
      case 'f':
        v29 = 32;
        break;
      case 'h':
        v29 = 4;
        break;
      case 'm':
        v29 = 8;
        break;
      default:
        v29 = v15 == 119;
        if ((_DWORD)v15 == 115)
          v29 = 16;
        break;
    }
    v30 = &v81[v11];
    *(_QWORD *)v30 = v24;
    v13 |= v29;
    *((_DWORD *)v30 + 2) = v29;
    *((_DWORD *)v30 + 3) = v28;
    v11 = v27;
LABEL_45:
    v12 = v16;
  }
  while (v16 < v8);
  v31 = (v13 & 1) == 0;
  if ((v13 & 1) != 0)
  {
    v33 = floor(a4 / 604800.0);
    a4 = a4 + v33 * -604800.0;
    v32 = 1;
    if ((v13 & 2) == 0)
      goto LABEL_55;
LABEL_48:
    v34 = floor(a4 / 86400.0);
    a4 = a4 + v34 * -86400.0;
    if ((v13 & 4) != 0)
      goto LABEL_49;
LABEL_56:
    v35 = 2.22507386e-308;
  }
  else
  {
    v32 = 0;
    v33 = 2.22507386e-308;
    if ((v13 & 2) != 0)
      goto LABEL_48;
LABEL_55:
    v34 = 2.22507386e-308;
    if ((v13 & 4) == 0)
      goto LABEL_56;
LABEL_49:
    v35 = floor(a4 / 3600.0);
    a4 = a4 + v35 * -3600.0;
  }
  v39 = (v13 & 8) == 0;
  if ((v13 & 8) != 0)
  {
    v37 = floor(a4 / 60.0);
    a4 = a4 + v37 * -60.0;
    if ((v13 & 0x10) == 0)
      goto LABEL_66;
LABEL_59:
    v41 = trunc(a4);
    a4 = a4 - v41;
    LOBYTE(v8) = v13;
    v42 = (v13 & 0x20) == 0;
    if ((v13 & 0x20) != 0)
      v40 = a4 * 1000.0;
    else
      v40 = 2.22507386e-308;
    v38 = 16;
    if (v42)
      v36 = 16;
    else
      v36 = 32;
    goto LABEL_74;
  }
  v37 = 2.22507386e-308;
  if ((v13 & 0x10) != 0)
    goto LABEL_59;
LABEL_66:
  if ((v13 & 0x20) != 0)
  {
    LOBYTE(v8) = v13;
    v38 = v13 & 0x20;
    v40 = a4 * 1000.0;
    v36 = 32;
    v41 = 2.22507386e-308;
    goto LABEL_74;
  }
  if ((v13 & 8) != 0)
  {
    LOBYTE(v8) = v13;
    v39 = 0;
    v38 = 0;
    v36 = 8;
    goto LABEL_53;
  }
  if ((v13 & 2) != 0)
    v36 = 2;
  else
    v36 = v32;
  LOBYTE(v8) = v13;
  if ((v13 & 4) == 0)
  {
LABEL_51:
    v38 = 0;
    goto LABEL_52;
  }
  v38 = 0;
  v36 = 4;
LABEL_52:
  v39 = 1;
LABEL_53:
  v40 = 2.22507386e-308;
  v41 = 2.22507386e-308;
LABEL_74:
  v80 = v11;
  if (a2)
  {
    switch(v36)
    {
      case 1:
        if (round(a4 / 604800.0) >= 1.0)
          v33 = v33 + 1.0;
        goto LABEL_106;
      case 2:
        if (round(a4 / 86400.0) >= 1.0)
          v34 = v34 + 1.0;
        goto LABEL_106;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_83;
      case 4:
        if (round(a4 / 3600.0) >= 1.0)
          v35 = v35 + 1.0;
        goto LABEL_106;
      case 8:
        if (round(a4 / 60.0) >= 1.0)
          v37 = v37 + 1.0;
        goto LABEL_106;
      default:
        if (v36 == 16)
        {
          if (round(a4) >= 1.0)
            v41 = v41 + 1.0;
          goto LABEL_106;
        }
        if (v36 == 32)
          goto LABEL_86;
LABEL_83:
        v43 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
        v44 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m");
        v45 = v43;
        v46 = 1159;
        break;
    }
  }
  else
  {
    switch(v36)
    {
      case 1:
        v33 = v33 + a4 / 604800.0;
        goto LABEL_106;
      case 2:
        v34 = v34 + a4 / 86400.0;
        goto LABEL_106;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_87;
      case 4:
        v35 = v35 + a4 / 3600.0;
        goto LABEL_106;
      case 8:
        v37 = v37 + a4 / 60.0;
        goto LABEL_106;
      default:
        if (v36 == 16)
        {
          v41 = v41 + a4;
          goto LABEL_106;
        }
        if (v36 == 32)
        {
LABEL_86:
          v40 = round(v40);
          goto LABEL_106;
        }
LABEL_87:
        v47 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
        v44 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m");
        v45 = v47;
        v46 = 1183;
        break;
    }
  }
  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v45, v44, v46, 0, "Unknown minimum unit!");
  v9 = v74;
  +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
LABEL_106:
  if (v31)
    v48 = 2;
  else
    v48 = 1;
  if ((v8 & 3) == 0)
    v48 = 4;
  if (v39)
    v49 = v38;
  else
    v49 = 8;
  if ((v8 & 7) != 0)
    v50 = v48;
  else
    v50 = v49;
  if (v50 != v36)
  {
    while (2)
    {
      switch(v36)
      {
        case 1:
          break;
        case 2:
          if (v34 >= 7.0)
          {
            v33 = v33 + 1.0;
            v36 = 1;
            v34 = 0.0;
            goto LABEL_132;
          }
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_125;
        case 4:
          if (v35 < 24.0)
            break;
          v34 = v34 + 1.0;
          v36 = 2;
          v35 = 0.0;
          goto LABEL_132;
        case 8:
          if (v37 < 60.0)
            break;
          v35 = v35 + 1.0;
          v36 = 4;
          v37 = 0.0;
          goto LABEL_132;
        default:
          if (v36 == 16)
          {
            if (v41 < 60.0)
              break;
            v37 = v37 + 1.0;
            v36 = 8;
            v41 = 0.0;
          }
          else if (v36 == 32)
          {
            if (v40 < 1000.0)
              break;
            v41 = v41 + 1.0;
            v36 = 16;
            v40 = 0.0;
          }
          else
          {
LABEL_125:
            v51 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
            +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v51, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"), 1247, 0, "Unknown unit!");
            v9 = v74;
            +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
          }
LABEL_132:
          if (v50 == v36)
            break;
          continue;
      }
      break;
    }
  }
  v52 = v73;
  v53 = v75;
  if (v80)
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    if (a2)
      v57 = 0;
    else
      v57 = kTSUNumberFormatterDecimalPlacesAsManyAsNecessary;
    v77 = a2 ^ 1;
    v79 = v57;
    do
    {
      v58 = &v81[v54];
      v59 = *(_QWORD *)v58;
      v61 = *((_DWORD *)v58 + 2);
      v60 = *((_DWORD *)v58 + 3);
      v62 = 0;
      v63 = v33;
      switch(v61)
      {
        case 1:
          break;
        case 2:
          v62 = 0;
          v63 = v34;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_143;
        case 4:
          v62 = 0;
          v63 = v35;
          break;
        case 8:
          v62 = 0;
          v63 = v37;
          break;
        default:
          if (v61 == 16)
          {
            v62 = 0;
            v63 = v41;
          }
          else if (v61 == 32)
          {
            v62 = 1;
            v63 = v40;
          }
          else
          {
LABEL_143:
            v64 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
            v52 = v73;
            v65 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m");
            v66 = v64;
            v53 = v75;
            +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v66, v65, 1284, 0, "Unknown duration unit!");
            v9 = v74;
            +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
            v62 = 0;
            v63 = 0.0;
          }
          break;
      }
      if ((v53 & (v63 == 0.0)) == 1 && v55 & 1 | (v54 + 1 != v80))
      {
        v67 = -1;
        ++v54;
      }
      else
      {
        switch(v60)
        {
          case 0:
            if (v62)
              v68 = CFSTR("000");
            else
              v68 = CFSTR("0");
            goto LABEL_157;
          case 1:
            if (v62)
              v68 = CFSTR("000");
            else
              v68 = CFSTR("00");
LABEL_157:
            LOBYTE(v72) = 0;
            v69 = objc_msgSend(v52, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", v68, v77, 0, v79, 0, 0, v63, v72);
            goto LABEL_160;
          case 2:
            LOBYTE(v72) = 0;
            v53 = v75;
            v69 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@"), objc_msgSend(v52, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", CFSTR("0"), v77, 0, v79, 0, 0, v63, v72), TSUDurationFormatterUnitString(v61, 1, v63));
            goto LABEL_160;
          case 3:
            LOBYTE(v72) = 0;
            v53 = v75;
            v69 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ %@"), objc_msgSend(v52, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", CFSTR("0"), v77, 0, v79, 0, 0, v63, v72), TSUDurationFormatterUnitString(v61, 2, v63));
LABEL_160:
            v70 = (void *)v69;
            break;
          default:
            v70 = 0;
            break;
        }
        objc_msgSend(v9, "insertString:atIndex:", v70, v59 + v56);
        v67 = objc_msgSend(v70, "length");
        ++v54;
        v55 = 1;
      }
      v56 += v67;
    }
    while (v54 != v80);
  }
  if ((v53 & 1) != 0)
    return objc_msgSend(v9, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet"));
  else
    return (uint64_t)v9;
}

uint64_t TSURegisterLocaleChangeObserver(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v3 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", *MEMORY[0x24BDBD3F0], 0, 0, a1);
  v4 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", *MEMORY[0x24BDBCA70], 0, 0, a1);
  return objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", v3, v4, 0);
}

void sub_22A2B976C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2B9808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2BB9B0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x22A2BB974);
}

void sub_22A2BBC60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSURemoveLocaleChangeObserver(void *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(a1);
        objc_msgSend(v2, "removeObserver:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void *TSULocaleCopyISOCurrencyCodes()
{
  return &unk_24F469EC8;
}

id TSULocaleNSLocaleWithHarmonizedNumberingSystem(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  const __CFString *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v1 = a1;
  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_msgSend(a1, "localeIdentifier");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(&unk_24F46A9D8, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(&unk_24F46A9D8);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v2, "hasPrefix:", v7)
          && objc_msgSend(v2, "rangeOfString:", CFSTR("numbers=")) == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend(v2, "rangeOfString:", CFSTR("@")) == 0x7FFFFFFFFFFFFFFFLL)
            v8 = CFSTR("@");
          else
            v8 = CFSTR(":");
          v1 = (void *)objc_msgSend(MEMORY[0x24BDBCEA0], "localeWithLocaleIdentifier:", objc_msgSend(v2, "stringByAppendingFormat:", CFSTR("%@numbers=%@"), v8, objc_msgSend(&unk_24F46A9D8, "objectForKeyedSubscript:", v7)));
          return v1;
        }
      }
      v4 = objc_msgSend(&unk_24F46A9D8, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  return v1;
}

id TSUNumberFormatStringFromDouble(int a1, unsigned __int16 a2, unsigned __int16 a3, char a4, __CFString *a5, uint64_t a6, uint64_t a7, void *a8, double a9, double a10, void *a11, uint64_t a12, unsigned __int8 a13, char a14, unsigned __int16 a15, unsigned __int16 a16, unsigned __int8 a17, char a18, __int16 a19, unsigned __int8 a20,unsigned __int16 a21,unsigned __int8 a22,unsigned int a23,void *a24)
{
  double v30;
  double v31;
  const __CFString *v32;
  void *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  id v42;
  uint64_t v43;
  void *v44;
  __CFString *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int16 v50;
  double v51;
  double v52;
  void *v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  void *v89;
  double v90;
  id v91;
  uint64_t v92;
  id v93;
  OITSUNumberFormat *v94;
  double v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 v102;
  void *v105;
  void *v106;

  v30 = a9;
  v102 = HIWORD(a12);
  if (__fpclassifyd(a9) == 3)
    v30 = 0.0;
  if ((a7 & 1) == 0)
  {
    a3 = TSUNumberOfDecimalPlacesInValue(v30);
    a2 = a3;
  }
  v31 = v30 * a10;
  if (a14)
  {
    v32 = CFSTR("#,##0");
    v33 = a24;
    v34 = v31;
    v35 = 1;
    v36 = 2;
    v37 = 2;
    v38 = 1;
LABEL_7:
    v39 = 0;
    return (id)objc_msgSend(v33, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", v32, v35, v36, v37, v38, v39, v34);
  }
  v35 = a15 ^ 1u;
  if (((a15 ^ 1) & 1) == 0 && (a15 & 0x100) == 0)
    return TSUNumberFormatterStringByUnescapingFormatString(a5);
  v41 = a4 | a13;
  if (BYTE1(a12) | a12 || (a16 & HIBYTE(a16) & 1) != 0 || a8)
  {
    if (a6)
    {
      v45 = a5;
      v46 = -[__CFString rangeOfString:](a5, "rangeOfString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%C"), 164));
      v47 = a17;
      if (v46 && (v48 = v46, v46 != 0x7FFFFFFFFFFFFFFFLL))
      {
        v49 = -[__CFString rangeOfCharacterFromSet:options:](a5, "rangeOfCharacterFromSet:options:", objc_msgSend(MEMORY[0x24BDD14A8], "characterSetWithCharactersInString:", CFSTR("0#")), 4);
        v35 = a15 ^ 1u;
        v41 = a4 | a13;
        if (v48 > v49)
        {
          v50 = objc_msgSend(+[OITSUNumberFormatter currencySymbolForCurrencyCode:](OITSUNumberFormatter, "currencySymbolForCurrencyCode:", a6, a15 ^ 1u), "length");
          v41 = a4 | a13;
          v35 = a15 ^ 1u;
          v102 = HIWORD(a12) + v50 - 1;
        }
      }
      else
      {
        v35 = a15 ^ 1u;
        v41 = a4 | a13;
      }
    }
    else
    {
      v47 = a17;
      v45 = a5;
    }
    v51 = trunc(v31);
    if ((a16 & HIBYTE(a16)) != 0)
      v52 = v51;
    else
      v52 = v31;
    LOBYTE(v99) = v41;
    v53 = (void *)objc_msgSend(a24, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", v45, v35, a3, a2, v47, a6, v52, v99);
    if (BYTE1(a12) | a12)
    {
      v54 = fabs(v52);
      if (v54 >= 1.0)
        v55 = (unint64_t)log10(v54) + 1;
      else
        v55 = 0;
      if (v55 <= BYTE2(a12))
        v56 = BYTE2(a12);
      else
        v56 = v55;
      if ((uint64_t)(a12 - v56) >= 1)
      {
        v57 = (void *)objc_msgSend(v53, "mutableCopy");
        v58 = TSUNumberOfDecimalPlacesInValue(v31);
        v59 = objc_msgSend(v53, "length");
        if (BYTE5(a12) == BYTE4(a12) && v58 == 0)
          v61 = v59 + ~(v56 + v102) + 1;
        else
          v61 = v59 + ~(v56 + v102);
        v62 = v58 - (BYTE5(a12) - BYTE4(a12));
        if (v62 <= 0)
          v63 = BYTE4(a12);
        else
          v63 = BYTE4(a12) - (_DWORD)v62;
        v64 = v61 + v63;
        if (v58 < BYTE5(a12))
          v65 = v64;
        else
          v65 = v59 + ~(v56 + v102);
        if ((_DWORD)v47 && (v66 = objc_msgSend(a24, "groupingSize")) != 0)
        {
          v67 = vcvtpd_s64_f64((double)v56 / (double)v66);
          if (v67 <= 1)
            v67 = 1;
          v68 = v67 - 1;
        }
        else
        {
          v68 = 0;
        }
        v69 = v65 - v68;
        if (v69 >= 0)
        {
          v70 = 0;
          do
          {
            if (v69 >= (int)objc_msgSend(v57, "length"))
              break;
            v71 = objc_msgSend(v57, "characterAtIndex:", v69);
            if (v71 == 48)
              ++v70;
            if ((v71 - 58) <= 0xFFFFFFF6)
              objc_msgSend(v57, "replaceCharactersInRange:withString:", v69, 1, CFSTR(" "));
            if ((uint64_t)(a12 - v56) <= v70)
              break;
            v72 = v69-- <= 0;
          }
          while (!v72);
        }
        v73 = BYTE1(a12) - BYTE3(a12);
        if (BYTE1(a12) <= (int)BYTE3(a12))
          goto LABEL_82;
        v74 = v102;
        if (v57)
        {
LABEL_77:
          v75 = objc_msgSend(v53, "length");
          v76 = BYTE3(a12) - v74 + v75 + 1;
          if (v76 + v73 <= objc_msgSend(v53, "length"))
          {
            v77 = v75 + v73 + BYTE3(a12) - v74;
            do
            {
              if (objc_msgSend(v57, "characterAtIndex:", v77) != 48)
                break;
              objc_msgSend(v57, "replaceCharactersInRange:withString:", v77, 1, CFSTR(" "));
              v72 = v77-- <= v76;
            }
            while (!v72);
          }
LABEL_82:
          v42 = v53;
          if (v57)
            v42 = v57;
          goto LABEL_84;
        }
LABEL_76:
        v57 = (void *)objc_msgSend(v53, "mutableCopy");
        goto LABEL_77;
      }
      v73 = BYTE1(a12) - BYTE3(a12);
      v42 = v53;
      if (v73 >= 1)
      {
        v74 = v102;
        goto LABEL_76;
      }
    }
    else
    {
      v42 = 0;
    }
LABEL_84:
    if (a8)
    {
      v106 = v53;
      if (v42)
        v78 = v42;
      else
        v78 = v53;
      v42 = (id)objc_msgSend(MEMORY[0x24BDD16A8], "string");
      v105 = (void *)objc_msgSend(MEMORY[0x24BDD14A8], "decimalDigitCharacterSet");
      v79 = objc_msgSend(v78, "length");
      v80 = objc_msgSend(a11, "firstIndex");
      if (v79 - 1 < 0)
      {
        v83 = 0;
      }
      else
      {
        v81 = v80;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        do
        {
          if (v81 == v84 && v81 != 0x7FFFFFFFFFFFFFFFLL)
          {
            objc_msgSend(v42, "insertString:atIndex:", objc_msgSend(a8, "objectAtIndex:", v83), 0);
            v81 = objc_msgSend(a11, "indexGreaterThanIndex:", v81);
            ++v83;
          }
          v85 = objc_msgSend(v78, "characterAtIndex:", --v79);
          v86 = objc_msgSend(v106, "characterAtIndex:", v79);
          objc_msgSend(v42, "insertString:atIndex:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%C"), v85), 0);
          if (v82 >= v102)
            v84 += objc_msgSend(v105, "characterIsMember:", v86);
          ++v82;
        }
        while (v79 > 0);
      }
      if (v83 >= (int)objc_msgSend(a8, "count"))
      {
        v87 = (a16 & HIBYTE(a16));
        v53 = v106;
      }
      else
      {
        v87 = (a16 & HIBYTE(a16));
        v53 = v106;
        if (objc_msgSend(a8, "count") > (unint64_t)v83)
        {
          v88 = v83;
          do
            objc_msgSend(v42, "insertString:atIndex:", objc_msgSend(a8, "objectAtIndex:", v88++), 0);
          while (v88 < objc_msgSend(a8, "count"));
        }
      }
    }
    else
    {
      v87 = (a16 & HIBYTE(a16));
    }
    if (!v87)
      return v42;
    if (v42)
      v89 = v42;
    else
      v89 = v53;
    v42 = (id)objc_msgSend(v89, "mutableCopy");
    v90 = fabs(v31);
    v43 = TSUNumberFormatFractionStringFromDouble(a23, a24, v90 - floor(v90));
    v44 = (void *)MEMORY[0x24BDD17C8];
    goto LABEL_110;
  }
  if (HIBYTE(a16) && (a16 & 1) == 0)
  {
    v42 = (id)objc_msgSend(TSUNumberFormatterStringByUnescapingFormatString(a5), "mutableCopy");
    if (a6)
      objc_msgSend(v42, "replaceOccurrencesOfString:withString:options:range:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%C"), 164), +[OITSUNumberFormatter currencySymbolForCurrencyCode:](OITSUNumberFormatter, "currencySymbolForCurrencyCode:", a6), 0, 0, objc_msgSend(v42, "length"));
    v43 = TSUNumberFormatFractionStringFromDouble(a23, a24, v31);
    v44 = (void *)MEMORY[0x24BDD17C8];
LABEL_110:
    objc_msgSend(v42, "replaceOccurrencesOfString:withString:options:range:", objc_msgSend(v44, "stringWithFormat:", CFSTR("%C"), (unsigned __int16)TSUCustomNumberFormatFractionReplacementCharacter), v43, 0, 0, objc_msgSend(v42, "length"));
    return v42;
  }
  if (a1 == 1)
  {
    if ((a18 & 1) == 0)
      goto LABEL_122;
    v91 = +[OITSUNumberFormatter defaultFormatStringForValueType:negativeStyle:](OITSUNumberFormatter, "defaultFormatStringForValueType:negativeStyle:", 0, 2);
    BYTE6(v101) = a22;
    WORD2(v101) = a21;
    BYTE2(v101) = a20;
    LOWORD(v101) = a19;
    HIBYTE(v100) = 1;
    BYTE6(v100) = a17;
    *(_DWORD *)((char *)&v100 + 2) = __PAIR32__(a16, a15);
    LOWORD(v100) = a13;
    v92 = TSUNumberFormatStringFromDouble(0, a2, a3, 0, v91, a6, a7, 0, v31, a10, a11, a12, v100, v101, a23, a24);

    v93 = +[OITSUNumberFormatter currencySymbolForCurrencyCode:](OITSUNumberFormatter, "currencySymbolForCurrencyCode:", a6);
    return (id)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@\t%@"), v93, v92);
  }
  else
  {
    if (a1 != 5)
    {
      if (a1 == 4)
        return (id)TSUNumberFormatFractionStringFromDouble(a23, a24, v31);
      if (!a1)
      {
        if ((_BYTE)a19)
        {
          if ((a15 & 1) == 0)
          {
            v95 = fabs(v31);
            if (v95 > 1.0e12
              || v95 < 0.0000001 && (v96 = __fpclassifyd(v31), v35 = a15 ^ 1u, v96 != 3))
            {
              v32 = CFSTR("0E0");
              v33 = a24;
              v34 = v31;
              v35 = 1;
              v36 = 0;
              v37 = 5;
              v38 = 0;
              goto LABEL_7;
            }
          }
        }
      }
LABEL_122:
      if (HIBYTE(a19) && (a15 & 1) == 0 && (v97 = v35, v98 = __fpclassifyd(v31), v35 = v97, v98 == 3))
      {
        v33 = a24;
        v34 = v31;
        v32 = a5;
        v35 = 1;
        v36 = 0;
        v37 = 0;
      }
      else
      {
        v36 = a3;
        v37 = a2;
        v33 = a24;
        v34 = v31;
        v32 = a5;
      }
      v38 = a17;
      v39 = a6;
      return (id)objc_msgSend(v33, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", v32, v35, v36, v37, v38, v39, v34);
    }
    v42 = TSUNumberFormatBaseStringFromDouble(a20, a21, a22, v31);
    if (v42)
      return v42;
    HIDWORD(v99) = -3;
    LOBYTE(v99) = 1;
    v94 = +[OITSUNumberFormat numberFormatWithValueType:formatString:decimalPlaces:currencyCode:useAccountingStyle:negativeStyle:showThousandsSeparator:fractionAccuracy:](OITSUNumberFormat, "numberFormatWithValueType:formatString:decimalPlaces:currencyCode:useAccountingStyle:negativeStyle:showThousandsSeparator:fractionAccuracy:", 0, 0, 0, +[OITSUNumberFormatter currentLocaleCurrencyCode](OITSUNumberFormatter, "currentLocaleCurrencyCode"), 0, 0, v99);
    -[OITSUNumberFormat setUseScientificFormattingAutomatically:](v94, "setUseScientificFormattingAutomatically:", 1);
    return -[OITSUNumberFormat stringFromDouble:locale:](v94, "stringFromDouble:locale:", a24, v31);
  }
}

uint64_t TSUNumberFormatFractionStringFromDouble(unsigned int a1, void *a2, double a3)
{
  void *v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  void *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  if (!TSUNumberFormatFractionStringFromDouble_sFractionFormatter)
  {
    v6 = (void *)objc_opt_class();
    objc_sync_enter(v6);
    if (!TSUNumberFormatFractionStringFromDouble_sFractionFormatter)
    {
      TSUNumberFormatFractionStringFromDouble_sFractionFormatter = objc_opt_new();
      objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "setMaximumFractionDigits:", 0);
      v7 = objc_msgSend(a2, "locale");
      objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "setLocale:", v7);
    }
    objc_sync_exit(v6);
  }
  v8 = fabs(a3);
  if (a3 >= 0.0)
    v9 = a3;
  else
    v9 = v8;
  if (a1 <= 0xFFFFFFFC)
  {
    v10 = (int)a1;
    v11 = (int)a1;
  }
  else
  {
    v10 = qword_22A4BCFC8[a1 + 3];
    v11 = 2;
  }
  v12 = 0;
  v13 = 0;
  v14 = floor(v9);
  v15 = v9 - v14;
  v16 = v10 + 1;
  v17 = 1.79769313e308;
  do
  {
    v18 = v15 * (double)v11;
    v19 = vabdd_f64(v15, round(v18) / (double)v11);
    v20 = llround(v18);
    if (v19 < v17)
    {
      v13 = v20;
      v12 = v11;
      v17 = v19;
    }
    ++v11;
  }
  while (v16 != v11);
  if (a1 >= 0xFFFFFFFD)
  {
    v21 = v12;
    if (v13)
    {
      v22 = v13;
      v23 = v12;
      do
      {
        v21 = v22;
        v22 = v23 % v22;
        v23 = v21;
      }
      while (v22);
    }
    if (v21 >= 2)
    {
      v13 /= v21;
      v12 /= v21;
    }
  }
  if (v13 == v12)
    v24 = 0;
  else
    v24 = v13;
  if (v13 == v12)
    v25 = v14 + 1.0;
  else
    v25 = v14;
  v26 = (void *)TSUNumberFormatFractionStringFromDouble_sFractionFormatter;
  objc_sync_enter((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter);
  objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "setLocale:", TSULocaleNSLocaleWithHarmonizedNumberingSystem((void *)objc_msgSend(a2, "locale")));
  if (v25 == 0.0)
  {
    v28 = 0;
    if (a3 < 0.0)
      v24 = -v24;
  }
  else
  {
    v27 = -v25;
    if (a3 >= 0.0)
      v27 = v25;
    v28 = objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "stringFromNumber:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v27));
  }
  if (v24)
  {
    v24 = objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "stringFromNumber:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v24));
    v29 = objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "stringFromNumber:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v12));
  }
  else
  {
    v29 = 0;
  }
  objc_sync_exit(v26);
  if (v28 && v24)
    return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ %@/%@"), v28, v24, v29);
  if (v28)
    return v28;
  if (v24)
    return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@/%@"), v24, v29, v31);
  return objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "stringFromNumber:", &unk_24F46A348);
}

void sub_22A2BF03C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *TSUNumberFormatBaseStringFromDouble(uint64_t a1, unsigned int a2, int a3, double a4)
{
  uint64_t v4;
  void *v6;
  char v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  int v24;
  __int16 v25;
  signed int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  if ((a1 - 37) <= 0xDBu)
  {
    v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUNumberFormatBaseStringFromDouble(double, UInt8, UInt16, BOOL)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUNumberFormat.m"), 1352, 0, "Trying to format a baseFormat cell with an illegal base number");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    return 0;
  }
  if (a4 > 9.22337204e18 || a4 < -9.22337204e18)
    return 0;
  v8 = a3;
  v11 = llround(a4);
  if (v11 >= 0)
    v12 = v11;
  else
    v12 = -v11;
  if (v11 < 0)
    v13 = a3;
  else
    v13 = 0;
  if (v11 < 0 && (a3 & 1) == 0)
  {
    if (a1 > 0x10 || ((1 << a1) & 0x10104) == 0)
    {
      v14 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSUNumberFormatBaseStringFromDouble(double, UInt8, UInt16, BOOL)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUNumberFormat.m"), 1374, 0, "Trying to display two's-complement for unsupported base %d", a1);
      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
    if ((unint64_t)v12 >= 0x80000001)
    {
      v15 = -32;
      v16 = 0x80000000;
      while (v15 != -50)
      {
        v17 = 2 * v16;
        --v15;
        v18 = v12 > (unint64_t)(2 * v16);
        v16 *= 2;
        if (!v18)
        {
          v19 = -v15;
          goto LABEL_27;
        }
      }
      return 0;
    }
    v17 = 0x80000000;
    v19 = 32;
LABEL_27:
    v12 = 2 * v17 - v12;
    LODWORD(v20) = (int)(log2((double)a1) * (double)a2);
    v20 = (int)v20 <= 32 ? 32 : v20;
    v18 = v20 > v19;
    v21 = v20 - v19;
    if (v18)
    {
      while (v17 <= 500000000000000)
      {
        v12 += 2 * v17;
        v17 *= 2;
        if (!--v21)
          goto LABEL_34;
      }
      return 0;
    }
  }
LABEL_34:
  v30 = v11;
  v6 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v22 = 1;
  do
  {
    if ((_DWORD)a1 == 26)
    {
      v23 = v12 / v22 % 26 + 65;
    }
    else if ((_DWORD)a1 == 1)
    {
      v23 = 49;
    }
    else
    {
      v24 = v12 / v22 % a1;
      if (v24 <= 9)
        v25 = 48;
      else
        v25 = 55;
      v23 = v25 + v24;
    }
    objc_msgSend(v6, "tsu_insertCharacter:atIndex:", v23, 0);
    v22 = ((_DWORD)a1 == 1) + v22 * a1;
  }
  while (v22 && v12 / v22 > 0);
  if (a2)
  {
    v26 = (a2 - objc_msgSend(v6, "length")) << 24;
    if (v26 >= 1)
    {
      v27 = v26 >> 24;
      if ((_DWORD)a1 == 26)
        v28 = 65;
      else
        v28 = 48;
      if (v27 <= 1)
        v29 = 1;
      else
        v29 = v27;
      do
      {
        objc_msgSend(v6, "tsu_insertCharacter:atIndex:", v28, 0);
        --v29;
      }
      while (v29);
    }
  }
  if ((v30 & 0x8000000000000000) == 0
    && (v8 & 1) == 0
    && v12 >= 0x80000000
    && objc_msgSend(v6, "characterAtIndex:", 0) != 48)
  {
    objc_msgSend(v6, "tsu_insertCharacter:atIndex:", 48, 0);
  }
  if (v13)
    objc_msgSend(v6, "tsu_insertCharacter:atIndex:", 45, 0);
  return v6;
}

__CFString *TSUNumberFormatterThreadDictionaryKeyForLocale(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (v1)
  {
    v2 = CFSTR("TSUNumberFormatterThreadDictionaryKey");
    if (!+[OITSULocale localeIsAutoUpdating:](OITSULocale, "localeIsAutoUpdating:", v1))
    {
      v3 = (void *)MEMORY[0x24BDD17C8];
      +[OITSULocale cacheKeyForLocale:](OITSULocale, "cacheKeyForLocale:", v1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "stringWithFormat:", CFSTR("%@-%@"), CFSTR("TSUNumberFormatterThreadDictionaryKey"), v4);
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v2 = CFSTR("TSUNumberFormatterThreadDictionaryKey");
  }

  return v2;
}

BOOL TSULocationInRanges(unint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v3 = a2;
  v4 = v3;
  if (v3 && (v5 = objc_msgSend(v3, "count")) != 0)
  {
    v6 = v5;
    objc_msgSend(v4, "objectAtIndex:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "rangeValue");
    v10 = v9;

    if (a1 < v8 || a1 - v8 >= v10)
    {
      v12 = 1;
      do
      {
        v13 = v12;
        if (v6 == v12)
          break;
        objc_msgSend(v4, "objectAtIndex:", v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "rangeValue");
        v17 = v16;

        v12 = v13 + 1;
      }
      while (a1 < v15 || a1 - v15 >= v17);
      v11 = v13 < v6;
    }
    else
    {
      v11 = 1;
    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void TSUNumberFormatterExtractStemAndTagFromStringWithSeparator(void *a1, void *a2, void *a3, _QWORD *a4, unint64_t *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  double v18;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  objc_msgSend(v9, "componentsSeparatedByString:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0.0;
  v17 = -999;
  if ((unint64_t)objc_msgSend(v12, "count") >= 2)
  {
    objc_msgSend(v12, "lastObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if ((TSUGetNumberValueAndTypeFromStringWithCurrencyCode(v13, 0, v11, (uint64_t)&v18, &v17, 0, 0) & 1) != 0)
    {
      v14 = v17;

      if (!v14)
      {
        v15 = objc_msgSend(v9, "rangeOfString:options:", v10, 4);
        if (a4)
        {
          objc_msgSend(v9, "substringToIndex:", v15);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
        if (a5)
        {
          v16 = vcvtmd_s64_f64(v18);
LABEL_13:
          *a5 = v16;
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else
    {

    }
  }
  if (a4)
    *a4 = objc_retainAutorelease(v9);
  if (a5)
  {
    v16 = 0;
    goto LABEL_13;
  }
LABEL_14:

}

uint64_t TSUGetNumberValueAndTypeFromString(void *a1, void *a2, uint64_t a3, int *a4, _QWORD *a5, uint64_t a6)
{
  return TSUGetNumberValueAndTypeFromStringWithCurrencyCode(a1, 0, a2, a3, a4, a5, a6);
}

void TSUNumberFormatterExtractBaseStemFromString(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v5 = a1;
  v6 = a2;
  if (a3)
  {
    v10 = 0;
    TSUNumberFormatterExtractStemAndTagFromStringWithSeparator(v5, CFSTR(" "), v6, &v10, 0);
    v7 = v10;
    if ((objc_msgSend(v5, "isEqualToString:", v7) & 1) != 0)
    {
      v8 = v5;
    }
    else
    {
      do
      {
        v8 = v7;

        v10 = v8;
        TSUNumberFormatterExtractStemAndTagFromStringWithSeparator(v8, CFSTR(" "), v6, &v10, 0);
        v7 = v10;

        v5 = v8;
      }
      while ((objc_msgSend(v8, "isEqualToString:", v7) & 1) == 0);
    }
    v9 = objc_retainAutorelease(v7);
    *a3 = v9;

    v5 = v8;
  }

}

__CFNumberFormatter *TSUHarmonizedCFNumberFormatterCreate(uint64_t a1, uint64_t a2)
{
  return +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", a1, a2);
}

uint64_t TSUNumberOfDecimalPlacesInValue(double a1)
{
  uint64_t v1;
  __CFNumberFormatter *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __CFNumberFormatter *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  double valuePtr;

  valuePtr = a1;
  if (floor(a1) == a1)
    return 0;
  v2 = (__CFNumberFormatter *)TSUNumberOfDecimalPlacesInValue_formatter;
  if (!TSUNumberOfDecimalPlacesInValue_formatter)
  {
    objc_opt_class();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v3);
    if (!TSUNumberOfDecimalPlacesInValue_formatter)
    {
      v4 = (void *)MEMORY[0x24BDBCEA0];
      objc_msgSend(MEMORY[0x24BDBCEA0], "canonicalLocaleIdentifierFromString:", CFSTR("en_US"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "localeWithLocaleIdentifier:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v7 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v6, 0);
      CFNumberFormatterSetFormat(v7, CFSTR("0"));
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      CFNumberFormatterSetProperty(v7, (CFNumberFormatterKey)*MEMORY[0x24BDBD4C0], v8);

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 0x7FFFFFFFLL);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      CFNumberFormatterSetProperty(v7, (CFNumberFormatterKey)*MEMORY[0x24BDBD4A8], v9);

      __dmb(0xBu);
      TSUNumberOfDecimalPlacesInValue_formatter = (uint64_t)v7;

    }
    objc_sync_exit(v3);

    v2 = (__CFNumberFormatter *)TSUNumberOfDecimalPlacesInValue_formatter;
  }
  v10 = (__CFString *)CFNumberFormatterCreateStringWithValue((CFAllocatorRef)*MEMORY[0x24BDBD240], v2, kCFNumberDoubleType, &valuePtr);
  v11 = -[__CFString rangeOfString:](v10, "rangeOfString:", CFSTR("."));
  if (v11 != 0x7FFFFFFFFFFFFFFFLL && v12 == 1)
    v1 = -[__CFString length](v10, "length") + ~v11;
  else
    v1 = 0;

  return v1;
}

void sub_22A2C0060(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *TSUNumberFormatterNumberingSystemForFormatter(__CFNumberFormatter *a1)
{
  id v2;
  CFLocaleRef Locale;
  void *v4;
  void *v5;
  __CFString *v6;
  __CFString *StringWithNumber;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = (id)sNumberingSystemForLocaleIdentifier;
  objc_sync_enter(v2);
  Locale = CFNumberFormatterGetLocale(a1);
  MEMORY[0x22E2DC76C](Locale);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)sNumberingSystemForLocaleIdentifier, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend((id)sNumberingSystemForLocaleIdentifier, "objectForKeyedSubscript:", v4);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    StringWithNumber = (__CFString *)CFNumberFormatterCreateStringWithNumber(0, a1, (CFNumberRef)&unk_24F46A378);
    v8 = -[__CFString length](StringWithNumber, "length");
    if (v8)
    {
      v9 = 0;
      while (1)
      {
        v10 = (void *)sNumberingSystemForZeroChar;
        -[__CFString substringWithRange:](StringWithNumber, "substringWithRange:", v9, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "objectForKey:", v11);
        v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (v6)
          break;
        if (v8 == ++v9)
        {
          v6 = CFSTR("latn");
          break;
        }
      }
    }
    else
    {
      v6 = CFSTR("latn");
    }
    objc_msgSend((id)sNumberingSystemForLocaleIdentifier, "setObject:forKeyedSubscript:", v6, v4);

  }
  objc_sync_exit(v2);

  return v6;
}

void sub_22A2C01C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUCurrencyCodesForLocale(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x24BDBCEB8];
  +[OITSUNumberFormatter userVisibleCurrencyCodes](OITSUNumberFormatter, "userVisibleCurrencyCodes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayWithArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x24BDBCAF0]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8 && (objc_msgSend(v7, "containsObject:", v8) & 1) == 0)
      objc_msgSend(v7, "insertObject:atIndex:", v8, 0);

  }
  if (v4 && (objc_msgSend(v7, "containsObject:", v4) & 1) == 0)
    objc_msgSend(v7, "insertObject:atIndex:", v4, 0);

  return v7;
}

id TSUCreateArrayOfDecimalFormattersForLocale(void *a1)
{
  id v1;
  id v2;
  __CFNumberFormatter *v3;
  const __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __CFNumberFormatter *v9;
  __CFString *v10;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v3 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v1, 1);
  v4 = (const __CFString *)*MEMORY[0x24BDBD470];
  CFNumberFormatterSetProperty(v3, (CFNumberFormatterKey)*MEMORY[0x24BDBD470], CFSTR("xyzzyqghbv&q"));
  objc_msgSend(v2, "addObject:", v3);

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", CFSTR("#,##0;- #,##0"),
                 CFSTR("#,##0;(#,##0)"),
                 CFSTR("#,##0;( #,##0)"),
                 0);
  v6 = objc_msgSend(v5, "count");
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v1, 0);
      objc_msgSend(v5, "objectAtIndex:", i);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      CFNumberFormatterSetFormat(v9, v10);

      CFNumberFormatterSetProperty(v9, v4, CFSTR("xyzzyqghbv&q"));
      objc_msgSend(v2, "addObject:", v9);

    }
  }

  return v2;
}

id TSUCreateArrayOfPercentageFormattersForLocale(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  __CFNumberFormatter *v4;
  const __CFString *v5;
  __CFNumberFormatter *v6;
  void *v7;
  void *v8;
  const __CFLocale *v9;
  __CFNumberFormatter *v10;

  v1 = (objc_class *)MEMORY[0x24BDBCEB8];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v2, 3);
  v5 = (const __CFString *)*MEMORY[0x24BDBD470];
  CFNumberFormatterSetProperty(v4, (CFNumberFormatterKey)*MEMORY[0x24BDBD470], CFSTR("xyzzyqghbv&q"));
  objc_msgSend(v3, "addObject:", v4);

  v6 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v2, 0);
  CFNumberFormatterSetFormat(v6, CFSTR("#,##0%"));
  CFNumberFormatterSetProperty(v6, v5, CFSTR("xyzzyqghbv&q"));
  objc_msgSend(v3, "addObject:", v6);

  v7 = (void *)MEMORY[0x24BDBCEA0];
  objc_msgSend(MEMORY[0x24BDBCEA0], "canonicalLocaleIdentifierFromString:", CFSTR("en_US"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localeWithLocaleIdentifier:", v8);
  v9 = (const __CFLocale *)objc_claimAutoreleasedReturnValue();

  v10 = CFNumberFormatterCreate(0, v9, kCFNumberFormatterPercentStyle);
  CFNumberFormatterSetProperty(v10, v5, CFSTR("xyzzyqghbv&q"));
  objc_msgSend(v3, "addObject:", v10);

  return v3;
}

id TSUCreateArrayOfScientificFormattersForLocale(void *a1)
{
  id v1;
  __CFNumberFormatter *v2;
  void *v3;
  char v4;
  __CFNumberFormatter *v5;
  void *v6;
  __CFNumberFormatter *v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v1, 4);
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x24BDBCB20]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "isEqualToString:", CFSTR("hi")))
  {

    goto LABEL_5;
  }
  v4 = -[__CFString isEqualToString:]((id)CFNumberFormatterGetFormat(v2), "isEqualToString:", CFSTR("#E0"));

  if ((v4 & 1) != 0)
  {
LABEL_5:
    v8 = v2;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v8, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  v5 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v1, 4);
  CFNumberFormatterSetFormat(v5, CFSTR("#E0"));
  v9[0] = v2;
  v9[1] = v5;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v9, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_6:
  return v6;
}

uint64_t TSUImprovedCFNumberFormatterGetValueFromString(__CFNumberFormatter *a1, void *a2, double *a3)
{
  __CFString *v5;
  __CFString *v6;
  uint64_t v7;
  CFIndex length;
  CFRange v10;

  v5 = a2;
  v6 = v5;
  v7 = 0;
  if (!a1)
    goto LABEL_9;
  if (!a3)
    goto LABEL_9;
  v10.location = 0;
  v10.length = -[__CFString length](v5, "length");
  v7 = 0;
  if (!CFNumberFormatterGetValueFromString(a1, v6, &v10, kCFNumberDoubleType, a3) || v10.location)
    goto LABEL_9;
  length = v10.length;
  if (length == -[__CFString length](v6, "length"))
  {
    if (__fpclassifyd(*a3) == 3)
      *a3 = 0.0;
    v7 = 1;
LABEL_9:
    if (!a3)
      goto LABEL_12;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_10:
  if (!(_DWORD)v7)
    *a3 = 0.0;
LABEL_12:

  return v7;
}

uint64_t TSUGetNumberValueAndTypeFromStringWithCurrencyCode(void *a1, void *a2, void *a3, uint64_t a4, int *a5, _QWORD *a6, uint64_t a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  __CFString *v25;
  __CFString *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  int v31;
  int v32;
  __CFString *v34;
  unint64_t v35;
  void *context;
  _QWORD *v37;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  if (v13)
  {
    v37 = a6;
    v16 = v13;
    objc_msgSend(MEMORY[0x24BDD14A8], "decimalDigitCharacterSet");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v16, "rangeOfCharacterFromSet:", v17);

    if (v18 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v19 = 0;
LABEL_31:

      goto LABEL_32;
    }
    context = (void *)MEMORY[0x22E2DDB58]();
    objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "stringByTrimmingCharactersInSet:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = objc_msgSend(v21, "length");
    v23 = v22;
    if (v22 > 0x3E8)
    {
      v29 = 0;
      v30 = context;
LABEL_27:
      objc_autoreleasePoolPop(v30);
      if (v23 < 0x3E9)
        v19 = v29;
      else
        v19 = 0;
      v16 = v21;
      goto LABEL_31;
    }
    v35 = v22;
    if (a5)
      *a5 = -999;
    +[OITSUNumberFormatter formatterForLocale:](OITSUNumberFormatter, "formatterForLocale:", v15);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (__CFString *)objc_msgSend(v21, "mutableCopy");
    CFStringTransform(v25, 0, (CFStringRef)*MEMORY[0x24BDBD608], 0);
    v34 = v25;
    v26 = v25;
    v27 = v24;
    +[OITSUNumberFormatter stringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand:](OITSUNumberFormatter, "stringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand:", v26);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    p_stripSingleSpaceNotSurroundedByDigits(v28, v15);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v24, "decimalFromString:value:formatString:", v21, a4, v37))
    {
      if (a5)
        *a5 = 0;
      v29 = 1;
LABEL_16:
      v23 = v35;
      v30 = context;
LABEL_26:

      goto LABEL_27;
    }
    if (objc_msgSend(v24, "currencyFromString:additionalCurrencyCode:value:formatString:currencyCode:", v21, v14, a4, v37, a7))
    {
      v29 = 1;
      if (a5)
        *a5 = 1;
      goto LABEL_16;
    }
    if (objc_msgSend(v24, "percentageFromString:value:formatString:", v21, a4, v37))
    {
      v23 = v35;
      if (a5)
      {
        v31 = 2;
LABEL_23:
        *a5 = v31;
      }
    }
    else
    {
      v32 = objc_msgSend(v24, "scientificFromString:value:formatString:", v21, a4, v37);
      v23 = v35;
      if (!v32)
      {
        if (objc_msgSend(v27, "fractionFromString:value:", v21, a4))
        {
          if (a5)
            *a5 = 4;
          v30 = context;
          if (v37)
            *v37 = 0;
          v29 = 1;
          goto LABEL_26;
        }
        v29 = 0;
        goto LABEL_25;
      }
      if (a5)
      {
        v31 = 3;
        goto LABEL_23;
      }
    }
    v29 = 1;
LABEL_25:
    v30 = context;
    goto LABEL_26;
  }
  v19 = 0;
LABEL_32:

  return v19;
}

id p_stripSingleSpaceNotSurroundedByDigits(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1;
  v4 = a2;
  +[OITSUNumberFormatter decimalSeparatorForLocale:](OITSUNumberFormatter, "decimalSeparatorForLocale:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[OITSUNumberFormatter groupingSeparatorForLocale:](OITSUNumberFormatter, "groupingSeparatorForLocale:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x24BDD1690];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@"), v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "characterSetWithCharactersInString:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD14A8], "decimalDigitCharacterSet");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "formUnionWithCharacterSet:", v10);

  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "length") - 2;
  if (v12 >= 1)
  {
    while (1)
    {
      if (objc_msgSend(v11, "characterAtIndex:", v12) != 32)
        goto LABEL_8;
      v13 = v12 - 1;
      v14 = objc_msgSend(v11, "characterAtIndex:", v12 - 1);
      v15 = objc_msgSend(v11, "characterAtIndex:", v12 + 1);
      if ((_DWORD)v14 != 32)
        break;
LABEL_9:
      v12 = v13 - 1;
      if (v13 <= 1)
        goto LABEL_10;
    }
    v16 = v15;
    if ((_DWORD)v15 != 32
      && (!objc_msgSend(v9, "characterIsMember:", v14)
       || (objc_msgSend(v9, "characterIsMember:", v16) & 1) == 0))
    {
      objc_msgSend(v11, "deleteCharactersInRange:", v12, 1);
    }
LABEL_8:
    v13 = v12;
    goto LABEL_9;
  }
LABEL_10:

  return v11;
}

const __CFString *TSUNumberFormatterStringFromValueType(unsigned int a1)
{
  if (a1 > 5)
    return CFSTR("unknown");
  else
    return off_24F39A948[a1];
}

const __CFString *TSUNumberFormatterStringFromNegativeStyle(unsigned int a1)
{
  if (a1 > 4)
    return CFSTR("unknown");
  else
    return off_24F39A978[a1];
}

__CFString *TSUNumberFormatterStringFromFractionAccuracy(uint64_t a1)
{
  if (a1 > 0xFFFFFFFC)
    return off_24F39A9A0[(int)a1 + 3];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("1/%d"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id TSUNumberFormatterStringByUnescapingFormatString(void *a1)
{
  id v1;
  unint64_t v2;
  void *v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithCapacity:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = objc_msgSend(v1, "characterAtIndex:", v4);
      v6 = v5;
      v7 = v4 + 1;
      if (v4 + 1 >= v2)
      {
        if (v5 != 39)
LABEL_16:
          objc_msgSend(v3, "appendFormat:", CFSTR("%C"), v6);
        ++v4;
        goto LABEL_18;
      }
      v8 = objc_msgSend(v1, "characterAtIndex:", v4 + 1);
      if (v6 != 39)
        goto LABEL_16;
      if (v8 != 39)
        break;
      objc_msgSend(v3, "appendString:", CFSTR("'"));
      v4 += 2;
LABEL_18:
      if (v4 >= v2)
        goto LABEL_19;
    }
    while (1)
    {
      v9 = objc_msgSend(v1, "characterAtIndex:", v7);
      v10 = v9;
      v4 = v7 + 1;
      if (v7 + 1 >= v2)
      {
        if (v9 == 39)
          goto LABEL_18;
      }
      else
      {
        v11 = objc_msgSend(v1, "characterAtIndex:", v7 + 1);
        if (v10 == 39)
        {
          if (v11 != 39)
            goto LABEL_18;
          objc_msgSend(v3, "appendString:", CFSTR("'"));
          v4 = v7 + 2;
          goto LABEL_13;
        }
      }
      objc_msgSend(v3, "appendFormat:", CFSTR("%C"), v10);
LABEL_13:
      v7 = v4;
      if (v4 >= v2)
        goto LABEL_18;
    }
  }
LABEL_19:

  return v3;
}

void TSUHarmonizedCFNumberFormatterSetCurrency(__CFNumberFormatter *a1, void *a2)
{
  __CFString *v3;
  void *v4;
  void *v5;
  CFComparisonResult v6;
  void *v7;
  id v8;

  if (a2)
  {
    v3 = a2;
    CFNumberFormatterGetLocale(a1);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    +[OITSUNumberFormatter currencySymbolForCurrencyCode:locale:](OITSUNumberFormatter, "currencySymbolForCurrencyCode:locale:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "copy");

    CFNumberFormatterSetProperty(a1, (CFNumberFormatterKey)*MEMORY[0x24BDBD458], v5);
    v6 = CFStringCompare(v3, CFSTR("CHF"), 0);

    if (v6 == kCFCompareEqualTo)
    {
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithInt:", 0);
      CFNumberFormatterSetProperty(a1, (CFNumberFormatterKey)*MEMORY[0x24BDBD538], v7);

    }
  }
}

void sub_22A2C35F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2C3964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_22A2C3A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_22A2C3CBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id p_newArrayOfCurrencyFormattersForCurrencyCode(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const void *v11;
  const __CFString *v12;
  __CFNumberFormatter *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  __CFString *v18;
  const __CFString *key;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v6, "count");
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", v8);
  if (v8 >= 1)
  {
    v10 = 0;
    key = (const __CFString *)*MEMORY[0x24BDBD4A0];
    v11 = (const void *)*MEMORY[0x24BDBD270];
    v12 = (const __CFString *)*MEMORY[0x24BDBD470];
    do
    {
      v13 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:style:](OITSUNumberFormatter, "createHarmonizedCFNumberFormatterWithLocale:style:", v5, 2);
      objc_msgSend(v6, "objectAtIndex:", v10);
      v14 = v9;
      v15 = v7;
      v16 = v6;
      v17 = v5;
      v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      CFNumberFormatterSetFormat(v13, v18);

      v5 = v17;
      v6 = v16;
      v7 = v15;
      v9 = v14;
      TSUHarmonizedCFNumberFormatterSetCurrency(v13, v7);
      CFNumberFormatterSetProperty(v13, key, v11);
      CFNumberFormatterSetProperty(v13, v12, CFSTR("xyzzyqghbv&q"));
      objc_msgSend(v14, "addObject:", v13);

      ++v10;
    }
    while (v8 != v10);
  }

  return v9;
}

void sub_22A2C4334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2C43E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2C4464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2C44E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *TSUSpecificCast(uint64_t a1, void *a2)
{
  if (!a2)
    return 0;
  if (objc_msgSend(a2, "isMemberOfClass:", a1))
    return a2;
  return 0;
}

void *TSUProtocolCast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  uint64_t *v14;

  v9 = a1;
  v13 = &a9;
  v14 = &a9;
  if (a1)
  {
    v10 = a2;
    if (a2)
    {
      while (1)
      {
        v11 = v14++;
        if ((objc_msgSend(v9, "conformsToProtocol:", *v11, v13) & 1) == 0)
          break;
        if (!--v10)
          return v9;
      }
      return 0;
    }
  }
  return v9;
}

uint64_t TSUCheckedDynamicCast(objc_class *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;

  v2 = a2;
  if (a2 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSUCheckedDynamicCast(Class, id<NSObject>)");
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUCast.m");
    v6 = (objc_class *)objc_opt_class();
    v7 = NSStringFromClass(v6);
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 135, 0, "Unexpected object type %@ in checked dynamic cast to %@", v7, NSStringFromClass(a1));
    +[OITSUAssertionHandler logBacktrace](OITSUAssertionHandler, "logBacktrace");
    return 0;
  }
  return v2;
}

id TokenizeVersionString(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("."));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v1, "count") >= 2)
  {
    objc_msgSend(v1, "valueForKey:", CFSTR("integerValue"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v3, "count") >= 3)
    {
      v4 = v3;
    }
    else
    {
      objc_msgSend(v3, "arrayByAddingObject:", &unk_24F46A390);
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    v2 = v4;

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void *TSUSoftLinkingLoadFramework(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *result;

  v4 = objc_msgSend(a2, "stringByAppendingString:", CFSTR(".framework"));
  if (a1)
    v5 = (void *)objc_msgSend((id)TSUPathForSystemFramework(objc_msgSend(a1, "stringByAppendingString:", CFSTR(".framework"))), "stringByAppendingPathComponent:", v4);
  else
    v5 = (void *)TSUPathForSystemFramework(v4);
  v6 = (void *)objc_msgSend(v5, "stringByAppendingPathComponent:", a2);
  v7 = v6;
  if (!v6 || (result = dlopen((const char *)objc_msgSend(v6, "fileSystemRepresentation"), 256)) == 0)
  {
    if ((objc_msgSend(a2, "isEqualToString:", CFSTR("Ubiquity")) & 1) == 0)
      NSLog((NSString *)CFSTR("NSSoftLinking - The %@ framework's library couldn't be loaded from %@."), a2, v7);
    return 0;
  }
  return result;
}

uint64_t TSUPathForSystemFramework(uint64_t a1)
{
  void *v2;
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v2 = (void *)objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  v4 = -[NSArray count](v3, "count");
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  while (1)
  {
    v7 = -[NSArray objectAtIndex:](v3, "objectAtIndex:", v6);
    v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("Frameworks")), "stringByAppendingPathComponent:", a1);
    if ((objc_msgSend(v2, "fileExistsAtPath:", v8) & 1) != 0)
      break;
    v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("PrivateFrameworks")), "stringByAppendingPathComponent:", a1);
    if (objc_msgSend(v2, "fileExistsAtPath:", v8))
      break;
    if (v5 == ++v6)
      return 0;
  }
  return v8;
}

void *TSUSoftLinkingGetFrameworkFunction(void *a1, void *a2, char *__symbol, void **a4)
{
  void *Framework;
  void *result;

  Framework = *a4;
  if (!*a4 && (Framework = TSUSoftLinkingLoadFramework(a1, a2), (*a4 = Framework) == 0)
    || (result = dlsym(Framework, __symbol)) == 0)
  {
    if ((objc_msgSend(a2, "isEqualToString:", CFSTR("Ubiquity")) & 1) == 0)
      NSLog((NSString *)CFSTR("NSSoftLinking - The function '%s' can't be found in the %@ framework."), __symbol, a2);
    return 0;
  }
  return result;
}

uint64_t TSUCFArrayDescription(const __CFArray *a1)
{
  OITSUDescription *v2;
  CFIndex v3;

  v2 = +[OITSUDescription descriptionWithCFType:format:](OITSUDescription, "descriptionWithCFType:format:", a1, CFSTR("; count=%ld"),
         CFArrayGetCount(a1));
  if (CFArrayGetCount(a1) >= 1)
  {
    v3 = 0;
    do
    {
      -[OITSUDescription addField:format:](v2, "addField:format:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("[%d]"), v3), CFSTR("%@"), CFArrayGetValueAtIndex(a1, v3));
      ++v3;
    }
    while (CFArrayGetCount(a1) > v3);
  }
  -[OITSUDescription setFieldOptionCommaSeparated](v2, "setFieldOptionCommaSeparated");
  return (uint64_t)-[OITSUDescription descriptionString](v2, "descriptionString");
}

const __CFString *TSUObjectReferenceDescription(void *a1)
{
  char isKindOfClass;
  void *v3;
  const char *ClassName;
  uint64_t v6;

  if (!a1)
    return CFSTR("<nil>");
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v3 = (void *)MEMORY[0x24BDD17C8];
  ClassName = object_getClassName(a1);
  if ((isKindOfClass & 1) != 0)
    return (const __CFString *)objc_msgSend(v3, "stringWithFormat:", CFSTR("(%s*)%p; count=%lu"),
                                 ClassName,
                                 a1,
                                 objc_msgSend(a1, "count"));
  else
    return (const __CFString *)objc_msgSend(v3, "stringWithFormat:", CFSTR("(%s*)%p"), ClassName, a1, v6);
}

uint64_t TSUSRGBColorSpace()
{
  if (TSUSRGBColorSpace_sSRGBDispatchOnce != -1)
    dispatch_once(&TSUSRGBColorSpace_sSRGBDispatchOnce, &__block_literal_global_6);
  return TSUSRGBColorSpace_sSRGBColorSpace;
}

uint64_t TSUP3ColorSpace()
{
  if (TSUP3ColorSpace_sP3DispatchOnce != -1)
    dispatch_once(&TSUP3ColorSpace_sP3DispatchOnce, &__block_literal_global_7);
  return TSUP3ColorSpace_sP3ColorSpace;
}

CGColorRef TSUCGColorCreateRandomRGB()
{
  double v0;
  double v1;
  double v2;

  v0 = TSURandom();
  v1 = TSURandom();
  v2 = TSURandom();
  return TSUCGColorCreateDeviceRGB(v0, v1, v2, 1.0);
}

CGColorRef TSUCreateCGColorFromHSBInColorSpace(CGColorSpace *a1, double a2, double a3, double a4, double a5)
{
  CGFloat components;
  double v8;
  double v9[3];

  v9[2] = *(double *)MEMORY[0x24BDAC8D0];
  v9[1] = a5;
  TSUHSBToRGB(&components, &v8, v9, a2, a3, a4);
  if (!a1)
  {
    if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1)
      dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
    a1 = (CGColorSpace *)TSUDeviceRGBColorSpace_sDeviceRGBColorSpace;
  }
  return CGColorCreate(a1, &components);
}

double *TSUHSBToRGB(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  BOOL v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v6 = a4 * 6.0;
  v7 = a4 == 1.0;
  v8 = 0.0;
  if (!v7)
    v8 = v6;
  v9 = (uint64_t)v8;
  v10 = v8 - (double)(uint64_t)v8;
  v11 = (1.0 - a5) * a6;
  v12 = (1.0 - a5 * v10) * a6;
  v13 = (1.0 - a5 * (1.0 - v10)) * a6;
  v14 = a6;
  v15 = v13;
  switch(v9)
  {
    case 0:
      goto LABEL_10;
    case 1:
      v14 = v12;
      v15 = a6;
      goto LABEL_10;
    case 2:
      v14 = v11;
      v15 = a6;
      v11 = v13;
      goto LABEL_10;
    case 3:
      v14 = v11;
      v15 = v12;
      goto LABEL_8;
    case 4:
      v14 = v13;
      v15 = v11;
LABEL_8:
      v11 = a6;
      goto LABEL_10;
    case 5:
      v14 = a6;
      v15 = v11;
      v11 = v12;
LABEL_10:
      *result = v14;
      *a2 = v15;
      *a3 = v11;
      break;
    default:
      return result;
  }
  return result;
}

CGColorRef TSUCreateCGColorFromHSB(double a1, double a2, double a3, double a4)
{
  return TSUCreateCGColorFromHSBInColorSpace(0, a1, a2, a3, a4);
}

double TSURGBToHSB(double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  BOOL v18;
  double v19;

  if (a4 < a5 || a4 < a6)
  {
    if (a5 >= a4)
      v7 = a4;
    else
      v7 = a5;
    if (a4 >= a6)
      v8 = a6;
    else
      v8 = a4;
    v9 = a5 < a4 || a5 < a6;
    if (v9)
      v10 = a6;
    else
      v10 = a5;
    if (v9)
      v11 = v7;
    else
      v11 = v8;
  }
  else
  {
    if (a5 >= a6)
      v11 = a6;
    else
      v11 = a5;
    v10 = a4;
  }
  v12 = 0.0;
  if (v10 <= 0.0)
  {
    v14 = 0.0;
  }
  else
  {
    v13 = v10 - v11;
    v14 = (v10 - v11) / v10;
    if (v14 != 0.0)
    {
      v15 = (v10 - a5) / v13;
      v16 = (v10 - a6) / v13;
      if (v10 == a4)
      {
        if (v11 == a5)
          v12 = v16 + 5.0;
        else
          v12 = 1.0 - v15;
      }
      else
      {
        v18 = v10 == a5;
        v19 = (v10 - a4) / v13;
        if (v18)
        {
          if (v11 == a6)
            v12 = v19 + 1.0;
          else
            v12 = 3.0 - v16;
        }
        else if (v11 == a4)
        {
          v12 = v15 + 3.0;
        }
        else
        {
          v12 = 5.0 - v19;
        }
      }
    }
  }
  *a3 = v10;
  result = v12 / 6.0;
  *a1 = v12 / 6.0;
  *a2 = v14;
  return result;
}

CGContext *TSUCreateRGBABitmapContext(int a1, double a2, CGFloat a3, CGFloat a4)
{
  CGContext *v8;
  CGAffineTransform v10;
  CGAffineTransform transform;

  if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1)
    dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
  v8 = CGBitmapContextCreate(0, (unint64_t)(a2 * a4), (unint64_t)(a3 * a4), 8uLL, (4 * (unint64_t)(a2 * a4) + 31) & 0xFFFFFFFFFFFFFFE0, (CGColorSpaceRef)TSUDeviceRGBColorSpace_sDeviceRGBColorSpace, 0x2002u);
  CGAffineTransformMakeScale(&transform, a4, a4);
  CGContextConcatCTM(v8, &transform);
  if (a1)
  {
    CGContextTranslateCTM(v8, 0.0, a3);
    CGAffineTransformMakeScale(&v10, 1.0, -1.0);
    CGContextConcatCTM(v8, &v10);
  }
  return v8;
}

unint64_t TSUBitmapGetAlignedBytesPerRow(uint64_t a1)
{
  return (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
}

double TSURandom()
{
  return (double)random() / 2147483650.0;
}

uint64_t p_chunkIndexForCharacterIndex(unint64_t a1, _QWORD *a2)
{
  _QWORD **v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  _QWORD *v7;

  v2 = (_QWORD **)a2[1];
  if (v2 != (_QWORD **)*a2)
  {
    v3 = ((uint64_t)v2 - *a2) >> 4;
    v2 = (_QWORD **)*a2;
    do
    {
      v4 = v3 >> 1;
      v5 = &v2[2 * (v3 >> 1)];
      v7 = *v5;
      v6 = v5 + 2;
      v3 += ~(v3 >> 1);
      if (v7[2] + *v7 <= a1)
        v2 = v6;
      else
        v3 = v4;
    }
    while (v3);
  }
  return ((uint64_t)v2 - *a2) >> 4;
}

void sub_22A2CEB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<TSUStringChunk>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::shared_ptr<TSUStringChunk>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<TSUStringChunk>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void sub_22A2CF43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::shared_ptr<TSUStringChunk>>::insert(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v36;
  __int128 v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  int64x2_t v41;
  char *v42;
  uint64_t v43;

  v4 = (uint64_t *)a2;
  v6 = a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if (v6 >= v7)
  {
    v9 = (uint64_t *)*a1;
    v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v11 = a2 - (_QWORD)v9;
    v12 = (a2 - (uint64_t)v9) >> 4;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v39 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v19 = (uint64_t *)&v15[16 * v12];
    v36 = v15;
    *(_QWORD *)&v37 = v19;
    *((_QWORD *)&v37 + 1) = v19;
    v38 = &v15[16 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v21 = 1;
        else
          v21 = v11 >> 3;
        v43 = v8;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v8, v21);
        v24 = v37;
        v25 = *((_QWORD *)&v37 + 1) - v37;
        if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
        {
          v30 = vdupq_n_s64(v37);
          v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          v26 = v25 >> 4;
          v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          v28 = 16 * v26;
          v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)v29 = *(_OWORD *)v24;
            v29 += 16;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          v30 = (int64x2_t)v37;
        }
        v31 = v38;
        v40 = v36;
        v36 = v22;
        *(_QWORD *)&v37 = &v22[16 * (v21 >> 2)];
        v41 = v30;
        *((_QWORD *)&v37 + 1) = v27;
        v38 = &v22[16 * v23];
        v42 = v31;
        std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer((uint64_t)&v40);
        v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
      }
      else
      {
        v20 = v12 + 2;
        if (v12 >= -1)
          v20 = v12 + 1;
        v19 -= 2 * (v20 >> 1);
        *(_QWORD *)&v37 = v19;
        *((_QWORD *)&v37 + 1) = v19;
      }
    }
    *v19 = *a3;
    v32 = a3[1];
    v19[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
    }
    *((_QWORD *)&v37 + 1) = v19 + 2;
    v4 = (uint64_t *)std::vector<std::shared_ptr<TSUStringChunk>>::__swap_out_circular_buffer(a1, &v36, v4);
    std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer((uint64_t)&v36);
  }
  else if (a2 == v6)
  {
    v16 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<TSUStringChunk>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    std::shared_ptr<TSUStringChunk>::operator=[abi:ne180100](v4, a3);
  }
  return v4;
}

void sub_22A2CF6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22A2CFBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<TSUStringChunk>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 16 * ((a3 - a2) >> 4);
      v8 = a2;
      do
      {
        std::shared_ptr<TSUStringChunk>::operator=[abi:ne180100](v8, (__int128 *)(v8 + v7));
        v8 += 16;
      }
      while (v8 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v8)
      v5 = std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100](v5 - 16);
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

void std::vector<std::shared_ptr<TSUStringChunk>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<TSUStringChunk>::shared_ptr[abi:ne180100]<TSUStringChunk,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24F39ABA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22A2CFDC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C401E2E008BLL);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<TSUStringChunk *,std::shared_ptr<TSUStringChunk>::__shared_ptr_default_delete<TSUStringChunk,TSUStringChunk>,std::allocator<TSUStringChunk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2DD408);
}

uint64_t std::__shared_ptr_pointer<TSUStringChunk *,std::shared_ptr<TSUStringChunk>::__shared_ptr_default_delete<TSUStringChunk,TSUStringChunk>,std::allocator<TSUStringChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x22E2DD408);
  return result;
}

void std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_22A2CFE8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<TSUStringChunk>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::shared_ptr<TSUStringChunk>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<TSUStringChunk>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<TSUStringChunk>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void _SFRSetLineWidth(CGContextRef c, CGFloat a2)
{
  CGAffineTransform v3;
  CGAffineTransform v4;

  if (a2 == 0.0)
  {
    NSLog((NSString *)CFSTR("BOGUS - lineWidth is 0."));
    CGContextGetCTM(&v3, c);
    CGAffineTransformInvert(&v4, &v3);
    a2 = v4.a + v4.c;
  }
  CGContextSetLineWidth(c, a2);
}

void *pBuildBezierPath(void *result, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  double *v5;

  v3 = result;
  switch(*(_DWORD *)a2)
  {
    case 0:
      result = (void *)objc_msgSend(result, "moveToPoint:", **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8));
      break;
    case 1:
      goto LABEL_4;
    case 2:
      v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void pBuildBezierPath(void *, const CGPathElement *)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUBezierPath.m"), 215, 0, "kCGPathElementAddQuadCurveToPoint not supported yet");
      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
LABEL_4:
      result = (void *)objc_msgSend(v3, "lineToPoint:", **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8));
      break;
    case 3:
      v5 = *(double **)(a2 + 8);
      result = (void *)objc_msgSend(result, "curveToPoint:controlPoint1:controlPoint2:", v5[4], v5[5], *v5, v5[1], v5[2], v5[3]);
      break;
    case 4:
      result = (void *)objc_msgSend(result, "closePath");
      break;
    default:
      return result;
  }
  return result;
}

void scanSpaceThenFloat(uint64_t a1, int *a2, _BYTE *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  char *v8;

  v5 = *a2;
  v6 = (const char *)(a1 + v5);
  if (*(_BYTE *)(a1 + v5) == 32)
  {
    do
    {
      v7 = a1 + v5++;
      *a2 = v5;
    }
    while (*(_BYTE *)(v7 + 1) == 32);
    v6 = (const char *)(a1 + v5);
  }
  v8 = 0;
  strtof(v6, &v8);
  if (v6 == v8)
    *a3 = 1;
  else
    *a2 += (_DWORD)v8 - (_DWORD)v6;
}

void addifclose(uint64_t a1, float *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  float v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[64];
  _BYTE v34[64];
  _OWORD v35[16];
  uint64_t v36;

  v4 = 0;
  v36 = *MEMORY[0x24BDAC8D0];
  v5 = *(double *)a1;
  v6 = *(double *)(a1 + 8);
  v7 = 0.0;
  v8 = v6;
  v9 = *(double *)a1;
  do
  {
    v10 = *(double *)(a1 + v4 + 16);
    v11 = *(double *)(a1 + v4 + 24);
    v7 = TSUDistance(v9, v8, v10, v11) + v7;
    v4 += 16;
    v8 = v11;
    v9 = v10;
  }
  while (v4 != 48);
  v12 = TSUDistance(v5, v6, *(double *)(a1 + 48), *(double *)(a1 + 56));
  if ((float)(v7 - v12) <= 0.1)
  {
    *a2 = *a2 + v7;
  }
  else
  {
    v13 = *(_OWORD *)(a1 + 16);
    v35[0] = *(_OWORD *)a1;
    v35[1] = v13;
    v14 = *(_OWORD *)(a1 + 48);
    v35[2] = *(_OWORD *)(a1 + 32);
    v35[3] = v14;
    v15 = 3;
    v16 = 1;
    __asm { FMOV            V0.2D, #0.5 }
    v22 = v35;
    do
    {
      v23 = 0;
      v24 = (float64x2_t)v35[4 * v16 - 4];
      do
      {
        v25 = (float64x2_t *)&v22[v23];
        v26 = v25[1];
        v25[4] = vmlaq_f64(vmulq_f64(v26, _Q0), _Q0, v24);
        ++v23;
        v24 = v26;
      }
      while (v15 != v23);
      ++v16;
      --v15;
      v22 += 4;
    }
    while (v16 != 4);
    v27 = 0;
    v28 = v35;
    do
    {
      v29 = *v28;
      v28 += 4;
      *(_OWORD *)&v34[v27] = v29;
      v27 += 16;
    }
    while (v27 != 64);
    v30 = v33;
    v31 = 3;
    v32 = 12;
    do
    {
      *v30++ = v35[v32];
      --v31;
      v32 -= 3;
    }
    while (v31 != -1);
    addifclose(v34, a2);
    addifclose(v33, a2);
  }
}

void sub_22A2D595C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5B8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5C30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5C84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5CDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5D30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5D84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5DD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5E9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D5F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D61E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D6980(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D69E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D6A48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D6AC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D6B30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D6BA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D6C18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2D6C78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUPreferredLocale()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x24BDBCEA0], "currentLocale");
  if (objc_msgSend((id)objc_msgSend(v0, "localeIdentifier"), "hasPrefix:", CFSTR("ars")))
    return objc_msgSend(MEMORY[0x24BDBCEA0], "localeWithLocaleIdentifier:", objc_msgSend((id)objc_msgSend(v0, "localeIdentifier"), "stringByReplacingOccurrencesOfString:withString:options:range:", CFSTR("ars"), CFSTR("ar"), 0, 0, 3));
  else
    return (uint64_t)v0;
}

BOOL TSUCGAffineTransformIsValid(double *a1)
{
  _BOOL8 result;

  if (!a1)
    return 1;
  result = 0;
  if (fabs(*a1) != INFINITY)
  {
    result = 0;
    if (fabs(a1[1]) != INFINITY)
    {
      result = 0;
      if (fabs(a1[2]) != INFINITY)
      {
        result = 0;
        if (fabs(a1[3]) != INFINITY)
        {
          result = 0;
          if (fabs(a1[4]) != INFINITY)
            return fabs(a1[5]) != INFINITY;
        }
      }
    }
  }
  return result;
}

uint64_t TSUNotifyCGAssertionAvoided()
{
  uint64_t v0;

  v0 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSUNotifyCGAssertionAvoided(void)");
  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v0, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUSafeCGWrappers.m"), 86, 0, "A CG call was elided because of an invalid parameter.");
  return +[OITSUAssertionHandler logBacktrace](OITSUAssertionHandler, "logBacktrace");
}

void CGPathMoveToPointSafe(CGPath *a1, CGAffineTransform *a2, double a3, double a4)
{
  BOOL IsValid;
  double v9;
  BOOL v11;

  IsValid = TSUCGAffineTransformIsValid(&a2->a);
  v9 = fabs(a3);
  v11 = fabs(a4) == INFINITY || v9 == INFINITY;
  if (v11 || !IsValid)
    TSUNotifyCGAssertionAvoided();
  else
    CGPathMoveToPoint(a1, a2, a3, a4);
}

void CGPathAddLineToPointSafe(CGPath *a1, CGAffineTransform *a2, double a3, double a4)
{
  BOOL IsValid;
  double v9;
  BOOL v11;

  IsValid = TSUCGAffineTransformIsValid(&a2->a);
  v9 = fabs(a3);
  v11 = fabs(a4) == INFINITY || v9 == INFINITY;
  if (v11 || !IsValid)
    TSUNotifyCGAssertionAvoided();
  else
    CGPathAddLineToPoint(a1, a2, a3, a4);
}

void CGPathAddArcToPointSafe(CGPath *a1, CGAffineTransform *a2, double a3, double a4, double a5, double a6, CGFloat a7)
{
  BOOL IsValid;
  double v15;
  double v16;
  double v17;
  BOOL v23;

  IsValid = TSUCGAffineTransformIsValid(&a2->a);
  v15 = fabs(a3);
  v16 = fabs(a4);
  v17 = fabs(a5);
  v23 = fabs(a6) == INFINITY || v17 == INFINITY || v16 == INFINITY || v15 == INFINITY;
  if (v23 || !IsValid)
    TSUNotifyCGAssertionAvoided();
  else
    CGPathAddArcToPoint(a1, a2, a3, a4, a5, a6, a7);
}

void CGPathAddRectSafe(CGPath *a1, CGAffineTransform *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGRect v12;

  if (TSUCGAffineTransformIsValid(&a2->a))
  {
    v12.origin.x = a3;
    v12.origin.y = a4;
    v12.size.width = a5;
    v12.size.height = a6;
    CGPathAddRect(a1, a2, v12);
  }
  else
  {
    TSUNotifyCGAssertionAvoided();
  }
}

void sub_22A2D843C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void std::vector<_NSRange>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<_NSRange>::__append((void **)a1, a2 - v2);
  }
}

char *std::vector<_NSRange>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v28 = v20 + 16;
    v4 = (char *)std::vector<_NSRange>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_22A2D9884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL p_sortFunction(_NSRange a1, _NSRange a2)
{
  if (a1.location == a2.location)
    return a2.location + a2.length < a1.location + a1.length;
  else
    return a1.location < a2.location;
}

void std::vector<_NSRange>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::vector<_NSRange>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,false>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v19 = *((_QWORD *)a2 - 2);
        v20 = *((_QWORD *)a2 - 1);
        v21 = a2 - 16;
        if ((*a3)(v19, v20, *(_QWORD *)v9, *((_QWORD *)v9 + 1)))
        {
          v23 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v21;
          *(_OWORD *)v21 = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v9, (_QWORD *)v9 + 2, (_QWORD *)a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v9, (_QWORD *)v9 + 2, (_QWORD *)v9 + 4, (_QWORD *)a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v9, (_QWORD *)v9 + 2, (_QWORD *)v9 + 4, (_QWORD *)v9 + 6, (_QWORD *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)v9, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[16 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(&v9[16 * (v13 >> 1)], v9, (_QWORD *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v9, &v9[16 * (v13 >> 1)], (_QWORD *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((_QWORD *)v9 + 2, (_QWORD *)v15 - 2, (_QWORD *)a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((_QWORD *)v9 + 4, &v9[16 * v14 + 16], (_QWORD *)a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((_QWORD *)v15 - 2, v15, &v9[16 * v14 + 16], a3);
            v22 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(*((_QWORD *)v9 - 2), *((_QWORD *)v9 - 1), *(_QWORD *)v9, *((_QWORD *)v9 + 1)) & 1) == 0)
          {
            v9 = (char *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>(v9, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v16 = (char *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>((uint64_t *)v9, (uint64_t *)a2, a3);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v9, v16, a3);
          v9 = v16 + 16;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v16 + 16, a2, a3))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,_NSRange*>(v9, a2, a2, a3);
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)result;
      do
      {
        v9 = v5;
        result = (*a3)(v8[2], v8[3], *v8, v8[1]);
        if ((_DWORD)result)
        {
          v10 = *v9;
          v11 = v8[3];
          v12 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v4 + v12 + 16) = *(_OWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v10, v11, *(_QWORD *)((char *)v4 + v12 - 16), *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 16;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 16);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v10;
          v13[1] = v11;
        }
        v5 = v9 + 2;
        v7 += 16;
        v8 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      do
      {
        v7 = v5;
        result = (*a3)(v4[2], v4[3], *v4, v4[1]);
        if ((_DWORD)result)
        {
          v8 = *v7;
          v9 = v4[3];
          v10 = v7;
          do
          {
            v11 = v10 - 1;
            *v10 = *(v10 - 1);
            result = (*a3)(v8, v9, *((_QWORD *)v10 - 4), *((_QWORD *)v10 - 3));
            v10 = v11;
          }
          while ((result & 1) != 0);
          *v11 = v8;
          v11[1] = v9;
        }
        v5 = v7 + 2;
        v4 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = (*a4)(*a2, a2[1], *a1, a1[1]);
  result = (*a4)(*a3, a3[1], *a2, a2[1]);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (!(*a4)(*a2, a2[1], *a1, a1[1]))
      return 1;
    v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (!(*a4)(*a3, a3[1], *a2, a2[1]))
      return 1;
    v14 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v14;
    return 2;
  }
  v10 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v10;
  return 1;
}

_QWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>(_QWORD *a1, _OWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;

  v4 = a2;
  v6 = *a1;
  v7 = a1[1];
  if (((*a3)(*a1, v7, *((_QWORD *)a2 - 2), *((_QWORD *)a2 - 1)) & 1) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[2];
      v10 = v8[3];
      v8 += 2;
    }
    while (((*a3)(v6, v7, v9, v10) & 1) == 0);
  }
  else
  {
    v11 = a1 + 2;
    do
    {
      v8 = v11;
      if (v11 >= (_QWORD *)v4)
        break;
      v12 = (*a3)(v6, v7, *v11, v11[1]);
      v11 = v8 + 2;
    }
    while (!v12);
  }
  if (v8 < (_QWORD *)v4)
  {
    do
    {
      v13 = *((_QWORD *)v4 - 2);
      v14 = *((_QWORD *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v13, v14) & 1) != 0);
  }
  while (v8 < (_QWORD *)v4)
  {
    v20 = *(_OWORD *)v8;
    *(_OWORD *)v8 = *v4;
    *v4 = v20;
    do
    {
      v15 = v8[2];
      v16 = v8[3];
      v8 += 2;
    }
    while (!(*a3)(v6, v7, v15, v16));
    do
    {
      v17 = *((_QWORD *)v4 - 2);
      v18 = *((_QWORD *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v17, v18) & 1) != 0);
  }
  if (v8 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
  *(v8 - 2) = v6;
  *(v8 - 1) = v7;
  return v8;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *result;

  v6 = 0;
  v7 = *a1;
  v8 = a1[1];
  do
  {
    v9 = (*a3)(a1[v6 + 2], a1[v6 + 3], v7, v8);
    v6 += 2;
  }
  while ((v9 & 1) != 0);
  v10 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v10 >= a2)
        break;
      v13 = *(a2 - 2);
      v14 = *(a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v13, v14, v7, v8) & 1) == 0);
  }
  else
  {
    do
    {
      v11 = *(a2 - 2);
      v12 = *(a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v11, v12, v7, v8));
  }
  v15 = &a1[v6];
  if (v10 < a2)
  {
    v16 = a2;
    do
    {
      v17 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v17;
      do
      {
        v18 = v15[2];
        v19 = v15[3];
        v15 += 2;
      }
      while (((*a3)(v18, v19, v7, v8) & 1) != 0);
      do
      {
        v20 = *(v16 - 2);
        v21 = *(v16 - 1);
        v16 -= 2;
      }
      while (!(*a3)(v20, v21, v7, v8));
    }
    while (v15 < v16);
  }
  result = v15 - 2;
  if (v15 - 2 != a1)
    *(_OWORD *)a1 = *(_OWORD *)result;
  *(v15 - 2) = v7;
  *(v15 - 1) = v8;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 16;
      if ((*a3)(*((_QWORD *)a2 - 2), *((_QWORD *)a2 - 1), *(_QWORD *)a1, *((_QWORD *)a1 + 1)))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, (_QWORD *)a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, a3);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(_QWORD *)v11, *((_QWORD *)v11 + 1), *(_QWORD *)v10, *((_QWORD *)v10 + 1)))
    {
      v14 = *(_QWORD *)v11;
      v15 = *((_QWORD *)v11 + 1);
      v16 = v12;
      while (1)
      {
        v17 = &a1[v16];
        *(_OWORD *)&a1[v16 + 48] = *(_OWORD *)&a1[v16 + 32];
        if (v16 == -32)
          break;
        v16 -= 16;
        if (((*a3)(v14, v15, *((_QWORD *)v17 + 2), *((_QWORD *)v17 + 3)) & 1) == 0)
        {
          v18 = &a1[v16 + 48];
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *((_QWORD *)v18 + 1) = v15;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, a2, a3, a5);
  if ((*a5)(*a4, a4[1], *a3, a3[1]))
  {
    v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if ((*a5)(*a3, a3[1], *a2, a2[1]))
    {
      v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      if ((*a5)(*a2, a2[1], *a1, a1[1]))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))*a6)(*a5, a5[1], *a4, a4[1], v12))
  {
    v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((*a6)(*a4, a4[1], *a3, a3[1]))
    {
      v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((*a6)(*a3, a3[1], *a2, a2[1]))
      {
        v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((*a6)(*a2, a2[1], *a1, a1[1]))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,_NSRange*>(char *a1, char *a2, char *a3, uint64_t (**a4)(_QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v21;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(*(_QWORD *)v14, *((_QWORD *)v14 + 1), *(_QWORD *)a1, *((_QWORD *)a1 + 1)))
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 16;
      do
      {
        v21 = *(_OWORD *)a1;
        v18 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v17 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v9 = ((uint64_t)a4 - result) >> 3;
      v10 = v9 + 1;
      v11 = (_QWORD *)(result + 16 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3 && (*a2)(*v11, v11[1], v11[2], v11[3]))
      {
        v11 += 2;
        v10 = v12;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))*a2)(*v11, v11[1], *v5, v5[1]);
      if ((result & 1) == 0)
      {
        v13 = *v5;
        v14 = v5[1];
        do
        {
          v15 = v11;
          *(_OWORD *)v5 = *(_OWORD *)v11;
          if (v17 < v10)
            break;
          v16 = (2 * v10) | 1;
          v11 = (_QWORD *)(v6 + 16 * v16);
          if (2 * v10 + 2 < a3)
          {
            if ((*a2)(*v11, v11[1], v11[2], v11[3]))
            {
              v11 += 2;
              v16 = 2 * v10 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))*a2)(*v11, v11[1], v13, v14);
          v5 = v15;
          v10 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v13;
        v15[1] = v14;
      }
    }
  }
  return result;
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(_OWORD *a1, unsigned int (**a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*a2)(*(_QWORD *)&a1[v6 + 1], *((_QWORD *)&a1[v6 + 1] + 1), *(_QWORD *)&a1[v6 + 2], *((_QWORD *)&a1[v6 + 2] + 1)))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD, _QWORD, uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = (_QWORD *)(result + 16 * (v4 >> 1));
    v10 = (_OWORD *)(a2 - 16);
    result = (*a3)(*v9, v9[1], *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v11 = *(_QWORD *)(a2 - 16);
      v12 = *(_QWORD *)(a2 - 8);
      do
      {
        v13 = v9;
        *v10 = *(_OWORD *)v9;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (_QWORD *)(v7 + 16 * v8);
        result = (*a3)(*v9, v9[1], v11, v12);
        v10 = v13;
      }
      while ((result & 1) != 0);
      *v13 = v11;
      v13[1] = v12;
    }
  }
  return result;
}

uint64_t MOFullMethodName(uint64_t a1, const char *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = objc_opt_class();
  v5 = (void *)MEMORY[0x24BDD17C8];
  if (v4 == a1)
    return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("+[%@ %@]"), a1, NSStringFromSelector(a2));
  v6 = objc_opt_class();
  return objc_msgSend(v5, "stringWithFormat:", CFSTR("-[%@ %@]"), v6, NSStringFromSelector(a2));
}

CFDataRef _createASCIIData(const __CFString *a1, UInt8 a2, CFIndex a3, CFIndex a4)
{
  const char *CStringPtr;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  CFRange v12;

  CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  if (CStringPtr)
    return CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&CStringPtr[a3], a4, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  if (a4 < 1)
    return 0;
  Mutable = CFDataCreateMutable(0, a4);
  CFDataSetLength(Mutable, a4);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v12.location = a3;
  v12.length = a4;
  if (a4 != CFStringGetBytes(a1, v12, 0x600u, a2, 0, MutableBytePtr, a4, 0))
    NSLog((NSString *)CFSTR("*** %s: Unexpected string conversion error"), "NSData *_createASCIIData(CFStringRef, UInt8, CFRange)");
  return Mutable;
}

void sub_22A2DC35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

{

}

void sub_22A2DCD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2DDA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2DDC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_22A2DDD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2DDE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2DDFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_22A2DE0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2DE1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2DE314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TSUImageSourceOrientation(CGImageSource *a1)
{
  CFDictionaryRef v1;
  int v2;
  uint64_t result;

  v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  v2 = objc_msgSend((id)-[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x24BDD9698]), "intValue");

  result = 0;
  if ((v2 - 1) <= 7)
    return TSUImageSourceOrientation___orientationMapping[v2 - 1];
  return result;
}

void sub_22A2DED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

BOOL TSUCGImageIsEmpty(CGImage *a1)
{
  CGContext *v2;
  _OWORD data[4];
  uint64_t v5;
  CGRect v6;

  v5 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  memset(data, 0, sizeof(data));
  v2 = CGBitmapContextCreateWithData(data, 1uLL, 1uLL, 8uLL, 1uLL, 0, 7u, 0, 0);
  v6.origin.x = 0.0;
  v6.origin.y = 0.0;
  v6.size.width = 1.0;
  v6.size.height = 1.0;
  CGContextDrawImage(v2, v6, a1);
  CFRelease(v2);
  return LOBYTE(data[0]) == 0;
}

void TSUSplitRectIntoSlices(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CGSize v21;
  CGPoint v22;
  CGRect remainder;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect slice;
  CGRect v28;
  CGRect v29;
  uint64_t v30;
  CGRect v31;

  v30 = *MEMORY[0x24BDAC8D0];
  v21 = *(CGSize *)(MEMORY[0x24BDBF070] + 16);
  v22 = (CGPoint)*MEMORY[0x24BDBF070];
  remainder.origin = v22;
  remainder.size = v21;
  slice.origin = v22;
  slice.size = v21;
  v28.origin = v22;
  v28.size = v21;
  v29.origin = v22;
  v29.size = v21;
  v24.origin = v22;
  v24.size = v21;
  v25.origin = v22;
  v25.size = v21;
  v26.origin = v22;
  v26.size = v21;
  CGRectDivide(*(CGRect *)&a2, &slice, &remainder, a8, CGRectMinYEdge);
  CGRectDivide(remainder, &v29, &v28, a9, CGRectMaxYEdge);
  remainder.origin = v22;
  remainder.size = v21;
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.width = a4;
  v31.size.height = a5;
  CGRectDivide(v31, &v24, &remainder, a6, CGRectMinXEdge);
  CGRectDivide(remainder, &v26, &v25, a7, CGRectMaxXEdge);
  v17 = 0;
  v18 = a1 + 16;
  do
  {
    v19 = 0;
    v20 = v18;
    do
    {
      *(CGRect *)(v20 - 16) = CGRectIntersection(*(CGRect *)((char *)&slice + v19), *(&v24 + v17));
      v20 += 96;
      v19 += 32;
    }
    while (v19 != 96);
    ++v17;
    v18 += 32;
  }
  while (v17 != 3);
}

UIImage *CGImagePNGRepresentationWithProperties(uint64_t a1)
{
  UIImage *result;
  UIImage *v2;
  NSData *v3;

  result = (UIImage *)objc_msgSend(objc_alloc(MEMORY[0x24BDF6AC8]), "initWithCGImage:", a1);
  if (result)
  {
    v2 = result;
    v3 = UIImagePNGRepresentation(result);

    return (UIImage *)v3;
  }
  return result;
}

UIImage *CGImageJPEGRepresentation(uint64_t a1, CGFloat a2)
{
  UIImage *result;
  UIImage *v4;
  NSData *v5;

  result = (UIImage *)objc_msgSend(objc_alloc(MEMORY[0x24BDF6AC8]), "initWithCGImage:", a1);
  if (result)
  {
    v4 = result;
    v5 = UIImageJPEGRepresentation(result, a2);

    return (UIImage *)v5;
  }
  return result;
}

__CFData *CGImageTIFFRepresentation(CGImage *a1)
{
  __CFData *v2;
  CGImageDestination *v3;
  _BOOL4 v4;

  v2 = (__CFData *)objc_msgSend(MEMORY[0x24BDBCEC8], "data");
  v3 = CGImageDestinationCreateWithData(v2, (CFStringRef)objc_msgSend((id)*MEMORY[0x24BDF85D0], "identifier"), 1uLL, 0);
  CGImageDestinationAddImage(v3, a1, 0);
  v4 = CGImageDestinationFinalize(v3);
  if (v3)
    CFRelease(v3);
  if (v4)
    return v2;
  else
    return 0;
}

double TSURectWithSize()
{
  return 0.0;
}

BOOL TSUNearlyEqualPoints(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;

  v4 = vabdd_f64(a1, a3) < 0.01;
  return vabdd_f64(a2, a4) < 0.01 && v4;
}

BOOL TSUCollinearPoints(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return fabs((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1)) < 8.90029543e-308;
}

double TSUPointOnCurve(float64x2_t *a1, double a2)
{
  double result;

  __asm { FMOV            V5.2D, #3.0 }
  *(_QWORD *)&result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[1], _Q5), a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(*a1, 1.0 - a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[2], _Q5), a2), a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(a1[3], a2), a2), a2);
  return result;
}

double TSUSubtractPoints(double a1, double a2, double a3)
{
  return a1 - a3;
}

double TSUMultiplyRectScalar(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v9;
  CGRect v11;

  v9 = a1;
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v11.origin.x = v9;
    v11.origin.y = a2;
    v11.size.width = a3;
    v11.size.height = a4;
    if (!CGRectIsNull(v11))
      return v9 * a5;
  }
  return v9;
}

double TSUPointLength(double a1, double a2)
{
  return sqrt(a2 * a2 + a1 * a1);
}

double TSUDistance(double a1, double a2, double a3, double a4)
{
  return sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
}

double TSUDotPoints(double a1, double a2, double a3, double a4)
{
  return a2 * a4 + a1 * a3;
}

void TSUNormalizeAngleInDegrees(double a1)
{
  fmod(a1 + 360.0, 360.0);
}

double TSUCeilSize(double a1)
{
  return ceil(a1);
}

uint64_t TSUCustomFormatTokenIdentifierCharacterForTokenType(unsigned int a1)
{
  uint64_t v2;

  if (a1 < 7)
    return (unsigned __int16)aSidcptf[a1];
  v2 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "unichar TSUCustomFormatTokenIdentifierCharacterForTokenType(TSUCustomNumberFormatTokenType)");
  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUCustomFormatTokenizer.m"), 352, 0, "Invalid custom number format token type!");
  +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  return 83;
}

void sub_22A2E27C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_22A2E5158(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t SFUDeriveAes128Key(uint64_t a1, unint64_t a2, unsigned int a3, char *a4, uint64_t a5, void *a6, size_t a7)
{
  BOOL v7;
  BOOL v10;
  int v11;
  unsigned int v14;
  uint64_t v19;
  char *v20;

  if (a4)
    v7 = a5 == 16;
  else
    v7 = 0;
  v10 = v7 && a1 != 0 && a3 >= 0x3E8 && HIDWORD(a2) == 0;
  v11 = !v10;
  if (v10)
  {
    v14 = a5;
    v19 = a7 + 4;
    if (a7 + 4 <= 0x14)
      v19 = 20;
    v20 = (char *)malloc_type_calloc(1uLL, v19 + 40, 0x7C2FD18uLL);
    sfu_pbkdf2((uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *))hmacsha1, 20, a1, a2, a6, a7, a3, a4, v14, v20);
    free(v20);
  }
  return v11 ^ 1u;
}

void hmacsha1(const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
  CCHmac(0, key, keyLength, data, dataLength, macOut);
}

void TSUEllipseParametricAngleWithPolarAngle(double a1, double a2, double a3)
{
  double v5;
  double i;
  uint64_t v7;
  __double2 v8;
  double j;
  uint64_t v10;

  if (a2 != 0.0 && a3 != 0.0)
  {
    v5 = a1;
    for (i = 0.0; v5 >= 360.0; v5 = v5 + -360.0)
      i = i + 1.0;
    for (; v5 < 0.0; v5 = v5 + 360.0)
      i = i + -1.0;
    if (v5 < 0.0 || v5 >= 360.0)
    {
      v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSUEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUBezierPathAdditions.m"), 37, 0, "Angle out of range");
      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
    if (v5 / 90.0 - floor(v5 / 90.0) >= 0.01 && ceil(v5 / 90.0) - v5 / 90.0 >= 0.01)
    {
      v8 = __sincos_stret(v5 * 3.14159265 / 180.0);
      for (j = atan2(v8.__sinval / a3, v8.__cosval / a2) * 180.0 / 3.14159265; j < 0.0; j = j + 360.0)
        ;
      for (; j >= 360.0; j = j + -360.0)
        ;
      if (j < 0.0 || j >= 360.0)
      {
        v10 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSUEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)");
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUBezierPathAdditions.m"), 55, 0, "Angle out of range");
        +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      }
    }
  }
}

void sub_22A2E80F0()
{
  __break(1u);
}

void sub_22A2E817C()
{
  objc_end_catch();
  JUMPOUT(0x22A2E814CLL);
}

void sub_22A2E84A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "-[OISFUDataRepresentation readIntoData:]");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/sf/SFUDataRepresentation.m"), 263, 0, "Caught exception trying to read storage into NSMutableData: %@");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    objc_msgSend(v9, "setLength:", v10);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22A2E8658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2E8708(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SFUCGDataProviderGetBytes(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "readToBuffer:size:", a2, a3);
}

uint64_t SFUCGDataProviderSkipForward(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = objc_msgSend(a1, "offset");
  objc_msgSend(a1, "seekToOffset:", v4 + a2);
  return objc_msgSend(a1, "offset") - v4;
}

uint64_t SFUCGDataProviderRewind(void *a1, const char *a2)
{
  return objc_msgSend(a1, "seekToOffset:", 0);
}

void SFUCGDataProviderReleaseInfo(void *a1)
{
  objc_msgSend(a1, "closeLocalStream");

}

void sub_22A2E8D78(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22A2E9018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2E9348(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

FILE *SFUFileOpen(void *a1, const char *a2)
{
  FILE *v3;

  v3 = fopen((const char *)objc_msgSend(a1, "fileSystemRepresentation"), a2);
  if (!v3)
    objc_msgSend(MEMORY[0x24BDBCE88], "sfu_errnoRaise:format:", CFSTR("SFUFileOpenError"), CFSTR("Could not open %@"), a1);
  return v3;
}

void sub_22A2EA218(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22A2EA6E0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  void *v3;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    free(v3);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22A2EACD0(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  free(v1);
  objc_exception_rethrow();
}

void sub_22A2EACE4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_22A2EB9FC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_22A2EBA1C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x22A2EB9A0);
}

void sub_22A2EBAB8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_22A2EBAD8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x22A2EBA8CLL);
}

void sub_22A2EBC38(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_22A2EBD10(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    if (TSUErrorCat_init_token != -1)
      dispatch_once(&TSUErrorCat_init_token, &__block_literal_global_14);
    objc_end_catch();
  }
  JUMPOUT(0x22A2EBCE0);
}

void sub_22A2EC328(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x22A2EC2D4);
  }
  _Unwind_Resume(a1);
}

void sub_22A2EC6FC(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_22A2ED230(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x22A2ED1BCLL);
}

void sub_22A2ED7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2EE080(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (!a2)
    _Unwind_Resume(v2);
  JUMPOUT(0x22A2EE12CLL);
}

void sub_22A2EE090()
{
  _Unwind_Exception *v0;

  objc_end_catch();
  _Unwind_Resume(v0);
}

void sub_22A2EE0A8(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x22A2EE128);
  }
  _Unwind_Resume(v2);
}

void sub_22A2EE0E0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x22A2EE0E8);
  objc_terminate();
}

void sub_22A2EE0F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *exc_buf)
{
  _Unwind_Exception *v12;

  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(a1);
      NSLog((NSString *)CFSTR("Caught exception trying to zip the output: %@"));
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
    }
    JUMPOUT(0x22A2EE014);
  }
  _Unwind_Resume(v12);
}

uint64_t SFUZipCurrentDosTime()
{
  tm *v0;
  int tm_year;
  time_t v3;

  v3 = time(0);
  v0 = localtime(&v3);
  tm_year = v0->tm_year;
  if (tm_year <= 81)
    tm_year = 81;
  return ((tm_year << 25) + 1610612736) | ((v0->tm_mon << 21) + 0x200000) | (v0->tm_mday << 16) | (v0->tm_hour << 11) | (32 * v0->tm_min) | (v0->tm_sec >> 1);
}

void sub_22A2EEE90(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_22A2EEEB0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x22A2EEE68);
}

uint64_t SFUSimpleXmlOutputWriteCallback(void *a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(a1, "writeBuffer:size:", a2, (int)a3);
  return a3;
}

uint64_t SFUSimpleXmlOutputCloseCallback()
{
  return 0;
}

void sub_22A2F0288(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22A2F06D4(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22A2F0C78(void *a1)
{
  FILE *v1;

  objc_begin_catch(a1);
  fclose(v1);
  objc_exception_rethrow();
}

void sub_22A2F0C90(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_22A2F1230(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A2F12F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SFUHash(char *a1, uint64_t a2)
{
  return SFUHashWithSeed(a1, a2, 2166136261);
}

uint64_t SFUHashWithSeed(char *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;

  if (a2)
  {
    do
    {
      v4 = *a1++;
      a3 = (16777619 * (_DWORD)a3) ^ v4;
      --a2;
    }
    while (a2);
  }
  else
  {
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "unsigned int SFUHashWithSeed(const char *, size_t, unsigned int)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/sf/SFUHash.m"), 25, 0, "SFUHash must have at least one byte of input.");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return a3;
}

CGPath *TSUCreateRoundRectPathForRectWithRadius(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGPath *Mutable;
  CGPath *v10;
  uint64_t v12;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double v22;
  double MinX;
  double v24;
  double MinY;
  double v27;
  double MaxX;
  double v29;
  double MaxY;
  CGFloat v31;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  Mutable = CGPathCreateMutable();
  v10 = Mutable;
  v31 = a5;
  if (a5 == 0.0)
  {
    CGPathAddRectSafe(Mutable, 0, a1, a2, a3, a4);
  }
  else
  {
    if (a3 > a5 + a5 && a4 > a5 + a5)
    {
      v33.origin.x = a1;
      v33.origin.y = a2;
      v33.size.width = a3;
      v33.size.height = a4;
      *(CGRect *)&v13 = CGRectInset(v33, a5, a5);
    }
    else
    {
      TSUCenterOfRect(a1, a2, a3, a4);
      TSURectWithOriginAndSize(v12);
    }
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    MaxX = CGRectGetMaxX(*(CGRect *)&v13);
    v34.origin.x = a1;
    v34.origin.y = a2;
    v34.size.width = a3;
    v34.size.height = a4;
    v27 = CGRectGetMaxX(v34);
    v35.origin.x = v17;
    v35.origin.y = v18;
    v35.size.width = v19;
    v35.size.height = v20;
    MaxY = CGRectGetMaxY(v35);
    v36.origin.x = a1;
    v36.origin.y = a2;
    v36.size.width = a3;
    v36.size.height = a4;
    v29 = CGRectGetMaxY(v36);
    v37.origin.x = v17;
    v37.origin.y = v18;
    v37.size.width = v19;
    v37.size.height = v20;
    MinY = CGRectGetMinY(v37);
    v38.origin.x = a1;
    v38.origin.y = a2;
    v38.size.width = a3;
    v38.size.height = a4;
    v21 = CGRectGetMinY(v38);
    v39.origin.y = a2;
    v22 = v21;
    v39.origin.x = a1;
    v39.size.width = a3;
    v39.size.height = a4;
    MinX = CGRectGetMinX(v39);
    v40.origin.x = v17;
    v40.origin.y = v18;
    v40.size.width = v19;
    v40.size.height = v20;
    v24 = CGRectGetMinX(v40);
    CGPathMoveToPointSafe(v10, 0, v24, v22);
    CGPathAddLineToPointSafe(v10, 0, MaxX, v22);
    CGPathAddArcToPointSafe(v10, 0, v27, v22, v27, MinY, v31);
    CGPathAddLineToPointSafe(v10, 0, v27, MaxY);
    CGPathAddArcToPointSafe(v10, 0, v27, v29, MaxX, v29, v31);
    CGPathAddLineToPointSafe(v10, 0, v24, v29);
    CGPathAddArcToPointSafe(v10, 0, MinX, v29, MinX, MaxY, v31);
    CGPathAddLineToPointSafe(v10, 0, MinX, MinY);
    CGPathAddArcToPointSafe(v10, 0, MinX, v22, v24, v22, v31);
    CGPathCloseSubpath(v10);
  }
  return v10;
}

void std::vector<CGRect>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<CGRect>::__append((void **)a1, a2 - v2);
  }
}

char *std::vector<CGRect>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  void *__p;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v14 = *(char **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 5) + 1;
    if (v15 >> 59)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v16 = __src - v14;
    v17 = (__src - v14) >> 5;
    v18 = v7 - (_QWORD)v14;
    if (v18 >> 4 > v15)
      v15 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v15;
    v34 = a1 + 16;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(a1 + 16, v19);
    else
      v20 = 0;
    v23 = &v20[32 * v17];
    __p = v20;
    v31 = v23;
    v32 = v23;
    v33 = &v20[32 * v19];
    if (v17 == v19)
    {
      if (v16 < 1)
      {
        if (v14 == v4)
          v25 = 1;
        else
          v25 = v16 >> 4;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v8, v25);
        v23 = &v26[32 * (v25 >> 2)];
        __p = v26;
        v31 = v23;
        v33 = &v26[32 * v27];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v24 = v17 + 2;
        if (v17 >= -1)
          v24 = v17 + 1;
        v23 -= 32 * (v24 >> 1);
        v31 = v23;
      }
    }
    v28 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v3;
    *((_OWORD *)v23 + 1) = v28;
    v32 = v23 + 32;
    v4 = (char *)std::vector<CGRect>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v32 != v31)
      v32 += (v31 - v32 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v22 = *((_OWORD *)a3 + 1);
    *(_OWORD *)__src = *(_OWORD *)a3;
    *((_OWORD *)__src + 1) = v22;
    *(_QWORD *)(a1 + 8) = __src + 32;
  }
  else
  {
    v9 = __src + 32;
    v10 = v6 - 32;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v13 = *((_OWORD *)v10 + 1);
      v10 += 32;
      *v11 = v12;
      v11[1] = v13;
      v11 += 2;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-32 * ((v6 - v9) >> 5)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 32 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    v21 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v21;
  }
  return v4;
}

void sub_22A2F3E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<CGRect>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void *std::vector<CGRect>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t TSUBase64UpdateBase64StringWithChunk(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _WORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v12;
  uint64_t v13;

  if (a4 >= 3)
  {
    v5 = 0;
    v6 = (_WORD *)(a1 + 2 * a2 + 4);
    do
    {
      *(v6 - 2) = ENCODE_ALPHABETS[(unint64_t)*(unsigned __int8 *)(a3 + v5) >> 2];
      *(v6 - 1) = ENCODE_ALPHABETS[((unint64_t)*(unsigned __int8 *)(a3 + v5 + 1) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)(a3 + v5) & 3))];
      *v6 = ENCODE_ALPHABETS[((unint64_t)*(unsigned __int8 *)(a3 + v5 + 2) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(_BYTE *)(a3 + v5 + 1) & 0xF))];
      a2 += 4;
      v6[1] = ENCODE_ALPHABETS[*(_BYTE *)(a3 + v5 + 2) & 0x3F];
      v4 = v5 + 3;
      v7 = v5 + 6;
      v6 += 4;
      v5 += 3;
    }
    while (v7 <= a4);
  }
  else
  {
    v4 = 0;
  }
  if (v4 < a4)
  {
    v8 = *(unsigned __int8 *)(a3 + v4);
    v9 = a2 + 1;
    *(_WORD *)(a1 + 2 * a2) = ENCODE_ALPHABETS[v8 >> 2];
    v10 = v4 + 1;
    if (v10 >= a4)
    {
      *(_WORD *)(a1 + 2 * v9) = ENCODE_ALPHABETS[16 * (v8 & 3)];
      v12 = 61;
    }
    else
    {
      v11 = *(unsigned __int8 *)(a3 + v10);
      *(_WORD *)(a1 + 2 * v9) = ENCODE_ALPHABETS[(v11 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v8 & 3))];
      v12 = ENCODE_ALPHABETS[4 * (v11 & 0xF)];
    }
    v13 = a1 + 2 * a2;
    *(_WORD *)(v13 + 4) = v12;
    *(_WORD *)(v13 + 6) = 61;
    a2 += 4;
  }
  return a2;
}

void TSUFormatStructRelease(id *a1)
{
  int v1;
  id *v2;

  v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 266 || v1 == 261)
  {
    v2 = a1 + 2;
  }
  else
  {
    if ((v1 - 270) > 2)
      return;
    v2 = a1 + 1;

  }
}

id *TSUFormatStructRetain(id *result)
{
  int v1;
  id *v2;
  id v3;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result == 266 || v1 == 261)
  {
    v2 = result + 2;
  }
  else
  {
    if ((v1 - 270) > 2)
      return result;
    v2 = result + 1;
    v3 = result[2];
  }
  return (id *)*v2;
}

uint64_t TSUFormatStructCustomEqualKeys(void **a1, void **a2)
{
  void *v2;

  v2 = *a1;
  if (v2 == *a2)
    return 1;
  if (*a2)
    return objc_msgSend(v2, "isEqual:");
  return 0;
}

unint64_t TSUFormatStructHash(unsigned int *a1)
{
  unint64_t v1;
  uint64x2_t v2;
  int8x16_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  v1 = *a1;
  if ((v1 & 0xFFFFFFFC) == 0x100)
  {
    v2 = (uint64x2_t)vdupq_n_s64(a1[2]);
    v3 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_22A4BD460), (int8x16_t)xmmword_22A4BD490), vandq_s8((int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_22A4BD470), (int8x16_t)xmmword_22A4BD480));
    v4 = (uint64_t)vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
    v5 = (unsigned __int16)a1[2] ^ v1;
    return v5 ^ v4;
  }
  switch((int)v1)
  {
    case 261:
      v7 = __rbit32(a1[2]) >> 30;
      return objc_msgSend(*((id *)a1 + 2), "hash") ^ 0x105 ^ v7;
    case 262:
      v5 = *((char *)a1 + 8);
      v4 = 262;
      return v5 ^ v4;
    case 268:
      v5 = (4 * (a1[3] | *((_QWORD *)a1 + 2))) | HIDWORD(*((_QWORD *)a1 + 2));
      v4 = 268;
      return v5 ^ v4;
    case 269:
      return ((*((unsigned __int16 *)a1 + 4) << 9) & 0x1FFFE | (*((unsigned __int16 *)a1 + 4) >> 7) & 0x1FFFEu | (unint64_t)(*((_BYTE *)a1 + 10) & 1)) ^ 0x10D;
    default:
      if ((v1 - 270) <= 2)
      {
        v8 = objc_msgSend(*((id *)a1 + 1), "hash");
LABEL_14:
        v1 ^= v8;
        return v1;
      }
      if ((v1 - 264) < 2)
      {
        v9 = *(_OWORD *)(a1 + 6);
        v12[0] = *(_OWORD *)(a1 + 2);
        v12[1] = v9;
        v8 = TSUFormatStructControlHash((uint64_t)v12);
        goto LABEL_14;
      }
      if ((_DWORD)v1 != 266)
        return v1;
      v10 = *((_QWORD *)a1 + 1);
      v11 = objc_msgSend((id)objc_msgSend(*((id *)a1 + 2), "choices"), "hash");
      v5 = v10 ^ HIDWORD(v10);
      v4 = v11 ^ 0x10A;
      return v5 ^ v4;
  }
}

unint64_t TSUFormatStructControlHash(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = TSUHash((char *)a1, 8);
  v3 = TSUHash((char *)(a1 + 8), 8) ^ v2;
  return v3 ^ TSUHash((char *)(a1 + 16), 8) ^ *(unsigned int *)(a1 + 24) ^ (((unint64_t)*(unsigned __int8 *)(a1 + 28) >> 2) & 3 | (4 * (*(_BYTE *)(a1 + 28) & 3)));
}

void sub_22A2F725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_22A2F7554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

os_log_t TSULogCreateCategory(char *category)
{
  return os_log_create("com.apple.iwork", category);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void tsuSaObjectPage::~tsuSaObjectPage(tsuSaObjectPage *this)
{
  uint64_t i;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24F39B558;
  for (i = 8; i != 2056; i += 8)
  {
    v3 = *(void **)((char *)this + i);
    *(_QWORD *)((char *)this + i) = 0;

  }
  v4 = 2048;
  do
  {

    v4 -= 8;
  }
  while (v4);
}

{
  tsuSaObjectPage::~tsuSaObjectPage(this);
  JUMPOUT(0x22E2DD408);
}

void tsuSaObjectPage::foreach(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(id, uint64_t, uint64_t, _BYTE *);

  v10 = a2;
  v7 = 0;
  v8 = a1 + 8;
  do
  {
    if (*a4)
      break;
    v9 = *(_QWORD *)(v8 + 8 * v7);
    if (v9)
      v10[2](v10, v9, a3 + v7, a4);
    ++v7;
  }
  while (v7 != 256);

}

void sub_22A2F8800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *tsuSaObjectPage::deepCopy(tsuSaObjectPage *this)
{
  _QWORD *v2;
  uint64_t i;

  v2 = (_QWORD *)operator new();
  *v2 = &off_24F39B558;
  bzero(v2 + 1, 0x800uLL);
  for (i = 1; i != 257; ++i)
    objc_storeStrong((id *)&v2[i], *(id *)((char *)this + i * 8));
  return v2;
}

void tsuSaIndexPage::~tsuSaIndexPage(tsuSaIndexPage *this)
{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)this = &off_24F39B588;
  for (i = 8; i != 2056; i += 8)
  {
    v3 = *(_QWORD *)((char *)this + i);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F39B588;
  v2 = 8;
  while (1)
  {
    v3 = *(_QWORD *)((char *)this + v2);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 += 8;
    if (v2 == 2056)
      JUMPOUT(0x22E2DD408);
  }
}

_QWORD *tsuSaIndexPage::deepCopy(tsuSaIndexPage *this)
{
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;

  v2 = (_QWORD *)operator new();
  *v2 = &off_24F39B588;
  bzero(v2 + 1, 0x800uLL);
  for (i = 1; i != 257; ++i)
  {
    v4 = *(_QWORD *)((char *)this + i * 8);
    if (v4)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v2[i] = v4;
  }
  return v2;
}

void tsuSaIndexPage::foreach(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v7 = 0;
  v8 = a3 << 8;
  v9 = a1 + 8;
  do
  {
    if (*a4)
      break;
    v10 = *(_QWORD *)(v9 + v7);
    if (v10)
      (*(void (**)(uint64_t, id, uint64_t, _BYTE *))(*(_QWORD *)v10 + 16))(v10, v11, v8, a4);
    v8 += 256;
    v7 += 8;
  }
  while (v7 != 2048);

}

void sub_22A2F8A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A2F8BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_22A2F8C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_22A2F8D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2F8F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2F9140(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t tsuSaObjectPage::setObjectAtIndex(tsuSaObjectPage *this, objc_object *a2, uint64_t a3)
{
  char *v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v4 = (char *)this + 8 * a3;
  v7 = *((_QWORD *)v4 + 1);
  v5 = (id *)(v4 + 8);
  v6 = v7;
  if (a2)
    v8 = 0;
  else
    v8 = -1;
  if (v6)
    v9 = v8;
  else
    v9 = a2 != 0;
  objc_storeStrong(v5, a2);

  return v9;
}

void sub_22A2F9230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2F92D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2F9404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2FC274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void sub_22A2FCB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_22A2FDE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2FE204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2FE324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2FE428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2FE6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A2FF330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FF3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A2FF468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FF548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_22A2FF77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_22A2FF83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id TSU::UUIDData<TSP::UUIDData>::NSStringValue(const unsigned __int8 *a1)
{
  _BYTE v2[37];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  memset(v2, 0, sizeof(v2));
  uuid_unparse_upper(a1, v2);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_22A2FF9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_22A2FFAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_22A2FFC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_22A2FFCE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FFD54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FFDBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FFE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FFE90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FFEFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A2FFF70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A300248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3002D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__erase_unique<TSU::UUIDData<TSP::UUIDData>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::find<TSU::UUIDData<TSP::UUIDData>>(a1, a2);
  if (result)
  {
    std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::find<TSU::UUIDData<TSP::UUIDData>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = v3 ^ *a2;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3 ^ *a2;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__emplace_unique_key_args<TSU::UUIDData<TSP::UUIDData>,TSU::UUIDData<TSP::UUIDData> const&>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = a2[1];
  v7 = v6 ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v6 ^ *a2;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_42:
    *v21 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22A3007C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<TSU::UUIDData<TSP::UUIDData>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *inserted;
  _QWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      v9 = (_QWORD *)*v8;
      v10 = v8[3] ^ v8[2];
      v8[1] = v10;
      inserted = std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_prepare((uint64_t)a1, v10, v8 + 2);
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__emplace_multi<TSU::UUIDData<TSP::UUIDData> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_22A300AE4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_22A300B04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    if (v19 == a2)
    {
      v21 = v16[2] == *a3 && v16[3] == a3[1];
      v22 = v21;
    }
    else
    {
      v22 = 0;
    }
    v23 = v17 & !v22;
    v17 |= v22;
  }
  while (v23 != 1);
  return result;
}

_QWORD *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
              if (!v13)
                break;
            }
            while (i[2] == v13[2] && i[3] == v13[3]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__emplace_multi<TSU::UUIDData<TSP::UUIDData> const&>(_QWORD *a1, _OWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  v5 = v4[3] ^ v4[2];
  *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_22A301010(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<TSU::UUIDData<TSP::UUIDData>>::__init_with_size[abi:ne180100]<TSU::UUIDData<TSP::UUIDData>*,TSU::UUIDData<TSP::UUIDData>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22A301080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void sub_22A301970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void sub_22A302404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_22A3027B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A303530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A305D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A3090D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22A30948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  uint64_t v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v22 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void sub_22A309830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A30A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a68, 8);
  _Unwind_Resume(a1);
}

void sub_22A30B0A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t (*sfu_pbkdf2(uint64_t (*result)(uint64_t, uint64_t, char *, uint64_t, char *), uint64_t a2, uint64_t a3, uint64_t a4, void *__src, size_t __n, unsigned int a7, char *a8, unsigned int a9, char *a10))(uint64_t, uint64_t, char *, uint64_t, char *)
{
  uint64_t (*v16)(uint64_t, uint64_t, char *, uint64_t, char *);
  uint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  char *v26;

  v16 = result;
  v17 = a9 / a2;
  v18 = &a10[a2];
  v24 = a9 % a2;
  if (a2 <= a9)
  {
    v25 = a2;
    v19 = 1;
    do
    {
      v26 = a8;
      v23 = a8;
      v20 = a2;
      v21 = v18;
      v22 = v17;
      result = (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *))F(v16, a2, a3, a4, __src, __n, a7, v19, v23, v18);
      v17 = v22;
      v18 = v21;
      a2 = v20;
      a8 = &v26[v25];
      ++v19;
    }
    while (v19 <= v17);
  }
  else
  {
    v19 = 1;
  }
  if ((_DWORD)v24)
  {
    F(v16, a2, a3, a4, __src, __n, a7, v19, a10, v18);
    return (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *))memcpy(a8, a10, v24);
  }
  return result;
}

void *F(uint64_t (*a1)(uint64_t, uint64_t, char *, uint64_t, char *), uint64_t a2, uint64_t a3, uint64_t a4, void *__src, size_t __n, unsigned int a7, int a8, void *a9, char *a10)
{
  int v11;
  size_t v16;
  char *v17;
  char *v18;
  size_t v19;
  void *result;
  unsigned int v21;
  char *v22;
  size_t v23;
  _BYTE *v24;
  char *v25;
  char v26;

  v11 = __n;
  v16 = a2;
  v17 = a10;
  v18 = &a10[a2];
  memcpy(v18, __src, __n);
  v18[v11] = HIBYTE(a8);
  v18[v11 + 1] = BYTE2(a8);
  v18[v11 + 2] = BYTE1(a8);
  v18[v11 + 3] = a8;
  a1(a3, a4, v18, (v11 + 4), a10);
  v19 = v16;
  result = memcpy(a9, a10, v16);
  if (a7 >= 2)
  {
    v21 = 2;
    do
    {
      v22 = v18;
      result = (void *)a1(a3, a4, v17, a2, v18);
      if ((_DWORD)a2)
      {
        v23 = v19;
        v24 = a9;
        v25 = v18;
        do
        {
          v26 = *v25++;
          *v24++ ^= v26;
          --v23;
        }
        while (v23);
      }
      ++v21;
      v18 = v17;
      v17 = v22;
    }
    while (v21 <= a7);
  }
  return result;
}

id p_currencyCodeStore()
{
  if (p_currencyCodeStore_onceToken != -1)
    dispatch_once(&p_currencyCodeStore_onceToken, &__block_literal_global_29);
  return (id)sCurrencyCodeStore;
}

void __p_currencyCodeStore_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)sCurrencyCodeStore;
  sCurrencyCodeStore = v0;

}

id TSUCurrencyCodeForIndex(unsigned int a1)
{
  void *v2;
  void *v3;

  p_currencyCodeStore();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringForIndex:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_22A30CE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22A30EA98(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_22A30F898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_22A311914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void sub_22A3124B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void sub_22A312D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_22A3140D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 144), 8);
  _Block_object_dispose((const void *)(v12 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

BOOL TSUEncodedBlockInfoAreEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "encodedLength");
  if (v5 == objc_msgSend(v4, "encodedLength"))
  {
    v6 = objc_msgSend(v3, "decodedLength");
    v7 = v6 == objc_msgSend(v4, "decodedLength");
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_22A31871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

uint64_t TSUIOUtilsCGDataProviderGetBytes(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;

  v5 = a1;
  v6 = objc_msgSend(v5, "readToBuffer:size:", a2, a3);

  return v6;
}

uint64_t TSUIOUtilsCGDataProviderSkipForward(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1;
  v4 = objc_msgSend(v3, "offset");
  objc_msgSend(v3, "seekToOffset:", v4 + a2);
  v5 = objc_msgSend(v3, "offset") - v4;

  return v5;
}

void TSUIOUtilsCGDataProviderRewind(void *a1)
{
  id v1;

  v1 = a1;
  objc_msgSend(v1, "seekToOffset:", 0);

}

void TSUIOUtilsCGDataProviderReleaseInfo(void *a1)
{
  id cf;

  cf = a1;
  objc_msgSend(cf, "close");
  CFRelease(cf);

}

void sub_22A318F7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A3194E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_22A319AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A319BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void sub_22A319D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A319DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A319F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A31A014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A31A084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_22A31A0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_22A31A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_22A31A398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A31A440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);

  _Unwind_Resume(a1);
}

void sub_22A31A524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A31A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A31A6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);

  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_22A31A760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A31A7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);

  _Unwind_Resume(a1);
}

void sub_22A31A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_22A31A9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A31AAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A31AC08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A31ADEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void TSULocker::TSULocker(TSULocker *this, NSLock *a2)
{
  NSLock *v3;

  v3 = a2;
  *(_QWORD *)this = v3;
  -[NSLock lock](v3, "lock");

}

void sub_22A31AED8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TSULocker::~TSULocker(id *this)
{
  objc_msgSend(*this, "unlock");

}

char *std::vector<TSU::UUIDData<TSP::UUIDData>>::__assign_with_size[abi:ne180100]<TSU::UUIDData<TSP::UUIDData>*,TSU::UUIDData<TSP::UUIDData>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_22A31B07C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void sub_22A31B70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void sub_22A31B86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A31B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22A31C974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_22A31CA3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A31CB68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A31CCA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A31CDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A31D080()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A31CF90);
}

void sub_22A31D148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A31D220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v4);

  _Unwind_Resume(a1);
}

void sub_22A31D2F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A31D354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCBundleResourcePackageEntry;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A31EC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A31ED18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A31EDCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A31EEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A31EF90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TCDumpReadUI8(FILE *__stream)
{
  void *v1;
  void *v2;
  unsigned __int8 __ptr;

  __ptr = 0;
  if (fread(&__ptr, 1uLL, 1uLL, __stream) != 1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "UInt8 TCDumpReadUI8(FILE *)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCDump.mm");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v1, v2, 132, 0, "Unexpected number of bytes read");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return __ptr;
}

void sub_22A31F09C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TCDumpReadLEUI32(FILE *a1)
{
  int UI8;
  unsigned int v3;
  int v4;

  UI8 = TCDumpReadUI8(a1);
  v3 = UI8 | (TCDumpReadUI8(a1) << 8);
  v4 = TCDumpReadUI8(a1);
  return (v4 << 16) | (TCDumpReadUI8(a1) << 24) | v3;
}

void writeIntToXml(xmlNode *a1, uint64_t a2, int a3, int a4, void *a5, void *a6)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v23 = a5;
  v11 = a6;
  if (v23)
  {
    objc_msgSend(v23, "typeName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v23, "typeName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"enumType", v13);

    }
    objc_msgSend(v23, "nameForValue:", a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
      sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"enumValue", v14);

  }
  v15 = 117;
  if (a4)
    v15 = 115;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%ci%d"), v15, (8 * a3));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"type", v16);
  v17 = (int)a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%ld"), (int)a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a4 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%lu"), v17);
    v19 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v19;
  }
  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"dec", v18);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%08lX"), v17);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "substringFromIndex:", 8 - 2 * a3);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"hex", v21);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", v17);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "cacheValueforCurrentField:", v22);

}

void sub_22A31F318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void writeRealToXml(xmlNode *a1, int a2, double a3)
{
  id v5;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("f%d"), (8 * a2));
  v5 = (id)objc_claimAutoreleasedReturnValue();
  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"type", v5);
  sfaxmlSetDoubleNoNsProp(a1, (const xmlChar *)"real", a3);

}

void sub_22A31F3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A31F498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A31F640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A31F7D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A31FAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A31FC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A31FE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id readIntegerFromBinaryToXml(TCDumpNumeric *a1, NSString *a2, __sFILE *a3, _xmlNode *a4)
{
  TCDumpNumeric *v7;
  NSString *v8;
  xmlNode *v9;
  TCDumpBinaryToXmlState *v10;
  void *v11;

  v7 = a1;
  v8 = objc_retainAutorelease(a2);
  v9 = xmlNewNode(0, (const xmlChar *)-[NSString UTF8String](v8, "UTF8String"));
  xmlAddChild(a4, v9);
  v10 = objc_alloc_init(TCDumpBinaryToXmlState);
  -[TCDumpBinaryToXmlState setCurrentField:](v10, "setCurrentField:", v8);
  -[TCDumpNumeric fromBinary:toXml:state:](v7, "fromBinary:toXml:state:", a3, v9, v10);
  -[TCDumpBinaryToXmlState valueForCurrentField](v10, "valueForCurrentField");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_22A31FF2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3201F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A3203A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A320704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A320834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A320A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL CXOptionalStringAttribute(_xmlNode *a1, void *a2, xmlChar *a3, _QWORD *a4)
{
  CXNamespace *v7;
  _xmlAttr *v8;

  v7 = a2;
  v8 = CXFindAttribute(a1, v7, a3);
  if (v8)
    *a4 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithValueOfXmlAttribute:", v8);

  return v8 != 0;
}

void sub_22A320B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TCEnumerationMapApplier(const void *a1, const void *a2, uint64_t (**a3)(_QWORD, _QWORD, _QWORD))
{
  return ((uint64_t (**)(_QWORD, const void *, const void *))a3)[2](a3, a1, a2);
}

void sub_22A320F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A321010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3210BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A321248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A321354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A321404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A321498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A321518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32161C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A32172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

TCMessageEntry *createEntryForException(NSException *a1, ...)
{
  NSException *v1;
  void *v2;
  void *v3;
  TCMessageEntry *v4;
  id v5;
  void *v6;
  int v7;
  id v8;
  TCMessageEntry *v9;
  uint64_t v10;
  void *v11;
  va_list va;

  va_start(va, a1);
  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TCMessageEntry *createEntryForException(NSException *__strong, ...)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCMessageContext.mm");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 437, 0, "All exceptions passed to TCMessageContext should be non-nil.");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[NSException getEntry](v1, "getEntry");
    v4 = (TCMessageEntry *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = (id)TCUnknownProblemMessage;
    -[NSException name](v1, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToString:", *MEMORY[0x24BDBCB70]);

    if (v7)
    {
      v8 = (id)TCOutOfMemoryMessage;

      v5 = v8;
    }
    v9 = [TCMessageEntry alloc];
    v10 = objc_msgSend(v5, "messageTag");
    objc_msgSend(v5, "messageText");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[TCMessageEntry initWithTag:affectedObject:text:parameters:](v9, "initWithTag:affectedObject:text:parameters:", v10, 0, v11, va);

  }
  return v4;
}

void sub_22A321910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3219E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A321A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A321B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A321BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A321CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A321D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A321E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_22A321EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A321F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A321FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_22A3220A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32214C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3221DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A322350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3224F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3225C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3226B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A322774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A322870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A322938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3229B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A322C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A322E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A322F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A323158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3231DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3232DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TCVerifyInputMeetsCondition(uint64_t result)
{
  if ((result & 1) == 0)
    return +[TCMessageException raise:](TCMessageException, "raise:", TCInvalidFileFormatMessage);
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void sub_22A323500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A323714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3237E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3238A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A323AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A323CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A323EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A323F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A32414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A324240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A3242D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A324374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A324414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A3244D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A324554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3245F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A324688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A324708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A324760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3247BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A324814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3248B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A32491C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A324A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A324B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A324B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A324BD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A324C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A324D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A324E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A325010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A32517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_22A325218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3252E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32537C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3254F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id TCInvalidXmlCharacterSet(void)
{
  if (TCInvalidXmlCharacterSet(void)::onceToken != -1)
    dispatch_once(&TCInvalidXmlCharacterSet(void)::onceToken, &__block_literal_global_39);
  return (id)TCInvalidXmlCharacterSet(void)::invalidXmlCharacterSet;
}

void ___Z24TCInvalidXmlCharacterSetv_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_opt_new();
  objc_msgSend(v3, "addCharactersInString:", CFSTR("\t\r\n"));
  objc_msgSend(v3, "addCharactersInRange:", 32, 55264);
  objc_msgSend(v3, "addCharactersInRange:", 57344, 8190);
  objc_msgSend(v3, "addCharactersInRange:", 0x10000, 0x100000);
  objc_msgSend(v3, "invertedSet");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "copy");
  v2 = (void *)TCInvalidXmlCharacterSet(void)::invalidXmlCharacterSet;
  TCInvalidXmlCharacterSet(void)::invalidXmlCharacterSet = v1;

}

void sub_22A3255F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A325710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3257A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32582C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A325904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A325AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A325B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A325BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_22A325C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void sub_22A326230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3264C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32697C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A326BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TSWPNumberFromArabicString(_anonymous_namespace_ *this, NSString *a2)
{
  _anonymous_namespace_ *v2;
  void *v3;
  int v4;
  uint64_t v5;
  int v6;
  void *v7;
  int v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  float v13;
  int v14;

  v2 = this;
  objc_msgSend(MEMORY[0x24BDD17A8], "scannerWithString:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  if (objc_msgSend(v3, "scanInt:", &v14)
    && ((v4 = objc_msgSend(v3, "isAtEnd"), v5 = v14, v14 >= 0) ? (v6 = v4) : (v6 = 0), v6 == 1))
  {
    v7 = v3;
  }
  else
  {
    v13 = 0.0;
    objc_msgSend(MEMORY[0x24BDD17A8], "scannerWithString:", v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v7, "scanFloat:", &v13))
    {
      v8 = objc_msgSend(v7, "isAtEnd");
      if (v13 >= 0.0)
        v9 = v8;
      else
        v9 = 0;
      v10 = v9 == 1;
      v11 = vcvtas_u32_f32(v13);
      if (v10)
        v5 = v11;
      else
        v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  return v5;
}

void sub_22A326D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TSWPNumberFromRomanUpperLabel(_anonymous_namespace_ *this, NSString *a2)
{
  _anonymous_namespace_ *v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = objc_retainAutorelease(this);
  v3 = (char *)-[_anonymous_namespace_ UTF8String](v2, "UTF8String");
  LOBYTE(v4) = *v3;
  if (*v3)
  {
    v5 = 0;
    v6 = MEMORY[0x24BDAC740];
    while (1)
    {
      if ((v4 & 0x80) != 0)
        v7 = __maskrune((char)v4, 0x100uLL);
      else
        v7 = *(_DWORD *)(v6 + 4 * (char)v4 + 60) & 0x100;
      if (!v7 || (v8 = (*v3 & 0xFFFFFFFFFFFFFFDFLL) - 65, ((0x34FE4F3uLL >> v8) & 1) != 0))
      {
        v5 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_17;
      }
      if (!v3[1])
        break;
      if (v10 <= v9)
      {
        v4 = v3[1];
      }
      else
      {
        v9 = v10 - v9;
        v4 = v3[2];
        ++v3;
      }
      v5 += v9;
      ++v3;
      if (!v4)
        goto LABEL_17;
    }
    v5 += v9;
  }
  else
  {
    v5 = 0;
  }
LABEL_17:

  return v5;
}

void sub_22A326E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TSWPNumberFromRomanLowerLabel(_anonymous_namespace_ *this, NSString *a2)
{
  _anonymous_namespace_ *v2;
  NSString *v3;
  uint64_t v4;

  -[_anonymous_namespace_ uppercaseString](this, "uppercaseString");
  v2 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_22A326EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TSWPNumberFromAlphaUpperLabel(_anonymous_namespace_ *this, NSString *a2)
{
  _anonymous_namespace_ *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = this;
  v3 = -[_anonymous_namespace_ length](v2, "length");
  v4 = objc_retainAutorelease(v2);
  v5 = (char *)-[_anonymous_namespace_ UTF8String](v4, "UTF8String");
  v6 = *v5;
  if (v3)
  {
    v7 = 0;
    v8 = MEMORY[0x24BDAC740];
    while (v6 < 0 ? __maskrune(v6, 0x100uLL) : *(_DWORD *)(v8 + 4 * v6 + 60) & 0x100)
    {
      v6 = *v5;
      if (((v5[v7] ^ *v5) & 0xDF) != 0)
        break;
      if (v3 == ++v7)
        goto LABEL_9;
    }
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_9:
    v10 = 26 * v3 + (char)(v6 & 0xDF) - 90;
  }

  return v10;
}

void sub_22A326F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TSWPNumberFromAlphaLowerLabel(_anonymous_namespace_ *this, NSString *a2)
{
  _anonymous_namespace_ *v2;
  NSString *v3;
  uint64_t v4;

  -[_anonymous_namespace_ uppercaseString](this, "uppercaseString");
  v2 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_22A326FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A327180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A328338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TSWPArabicLabelFromNumber(_anonymous_namespace_ *this)
{
  unsigned int v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = this;
  if (!(_DWORD)this)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPArabicLabelFromNumber");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 425, 0, "Illegal value for arabic numeral topic label <= 0");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (v1 <= 1)
    v4 = 1;
  else
    v4 = v1;
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d"), v4);
}

void sub_22A328634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPRomanUpperLabelFromNumber(_anonymous_namespace_ *this)
{
  unsigned int v1;
  unsigned __int8 v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v11;

  v1 = this;
  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_22A0CC000);
  }
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPRomanUpperLabelFromNumber");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 528, 0, "Illegal value for roman numeral topic label <= 0");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (v1 <= 1)
    v5 = 1;
  else
    v5 = v1;
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 12;
  do
  {
    if (v5 >= *(_DWORD *)v8)
    {
      v9 = *((_QWORD *)v8 + 1);
      do
      {
        objc_msgSend(v6, "appendString:", v9);
        v5 -= *(_DWORD *)v8;
      }
      while (v5 >= *(_DWORD *)v8);
    }
    v11 = v7-- != 0;
  }
  while (v5 && v11);
  return v6;
}

void sub_22A3287A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPRomanLowerLabelFromNumber(_anonymous_namespace_ *this)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "lowercaseString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_22A3287F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPAlphaLowerLabelFromNumber(_anonymous_namespace_ *this)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "lowercaseString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_22A32884C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPFootnoteSymbolFromNumber(_anonymous_namespace_ *this)
{
  int v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;

  v1 = (int)this;
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = ((unint64_t)(v1 - 1) >> 2) + 1;
  do
  {
    objc_msgSend(v2, "appendFormat:", CFSTR("%C"), v3);
    --v4;
  }
  while (v4);
  return v2;
}

void sub_22A3288DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::ideographicNumberStringForValue(uint64_t a1, unsigned int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_anonymous_namespace_ *__hidden, NSMutableString *, unsigned int);
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  id v23;
  unsigned int v24;
  char v25;
  uint64_t (*v26)(_anonymous_namespace_ *__hidden, NSMutableString *, unsigned int);

  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  v6 = a2;
  if ((_DWORD)a1)
  {
    v9 = v4;
    v23 = v9;
    v24 = a2;
    v25 = 1;
    v26 = v8;
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "appendString:", v11);

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCharacters:length:", &v22, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2 && a2 != 3)
    {
      v17 = (void *)MEMORY[0x24BDBCEB8];
      objc_msgSend(v9, "componentsSeparatedByString:", v12);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "arrayWithArray:", v18);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v13, "removeObject:", &stru_24F3BFFF8);
      objc_msgSend(v13, "componentsJoinedByString:", v12);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v19, "mutableCopy");

      if ((unint64_t)objc_msgSend(v14, "length") >= 2)
      {
        v20 = objc_msgSend(v14, "characterAtIndex:", 0);
        v21 = objc_msgSend(v14, "characterAtIndex:", 1);
          && (v21 == *((unsigned __int16 *)v7 + 2)
        {
          objc_msgSend(v14, "deleteCharactersInRange:", 0, 1);
        }
      }
    }
    else
    {
      objc_msgSend(v9, "stringByReplacingOccurrencesOfString:withString:", v12, &stru_24F3BFFF8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v13, "mutableCopy");

    }
    v15 = v14;

  }
  else
  {
    v15 = v5;
  }

  return v15;
}

void sub_22A328B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPCircledNumberLabelFromNumber(_anonymous_namespace_ *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  __int16 v8;

  if (!(_DWORD)this)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPCircledNumberLabelFromNumber");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 825, 0, "Illegal value for circled number numeral topic label <= 0");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  v4 = 0;
  while (1)
  {
      break;
    if (++v4 == 3)
      goto LABEL_7;
  }
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCharacters:length:", &v8, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
LABEL_7:
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v6;
}

void sub_22A328CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPArabicLabelFromNumberAndLocale(_anonymous_namespace_ *this, void *a2, NSString *a3)
{
  unsigned int v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = this;
  v4 = a2;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPArabicLabelFromNumberAndLocale(unsigned int, NSString *__strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 437, 0, "Illegal value for arabic numeral topic label <= 0");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (v3 <= 1)
    v7 = 1;
  else
    v7 = v3;
  v8 = objc_alloc_init(MEMORY[0x24BDD16F0]);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEA0]), "initWithLocaleIdentifier:", v4);
  objc_msgSend(v8, "setLocale:", v9);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringFromNumber:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_22A328E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPArabianAbjadLabelFromNumber(_anonymous_namespace_ *this, unsigned int a2, unsigned __int16 *a3)
{
  void *v3;
  void *v4;
  _anonymous_namespace_ *v6;
  int v7;
  void *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _WORD __b[11];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (this < 0xF4240)
  {
    v6 = this;
    if ((_DWORD)this)
    {
      if (this >= 0x3E8)
      {
        v9 = this / 0x3E8;
        v7 = v10 + 1;
        __b[v10] = 39;
        v6 = (_anonymous_namespace_ *)(v6 - 1000 * v9);
      }
      else
      {
        v7 = 0;
      }
      if (v11 >= 0xC)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPArabianAbjadLabelFromNumber(uint)");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 778, 0, "string out of bounds");

        +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      }
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCharacters:length:", __b, v11);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    return v8;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPArabianAbjadLabelFromNumber(uint)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 754, 0, "number out of bounds for algorithm");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    return 0;
  }
}

void sub_22A32905C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::TSWPHebrewBiblicalLabelFromNumber(_anonymous_namespace_ *this, unsigned int a2, unsigned __int16 *a3)
{
  void *v3;
  void *v4;
  _anonymous_namespace_ *v6;
  int v7;
  void *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _WORD __b[13];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (this < 0xF4240)
  {
    v6 = this;
    if ((_DWORD)this)
    {
      if (this >= 0x3E8)
      {
        v9 = this / 0x3E8;
        v7 = v10 + 1;
        __b[v10] = 1523;
        v6 = (_anonymous_namespace_ *)(v6 - 1000 * v9);
      }
      else
      {
        v7 = 0;
      }
      if (v11 >= 0xE)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPHebrewBiblicalLabelFromNumber(uint)");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 715, 0, "string out of bounds");

        +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      }
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCharacters:length:", __b, v11);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    return v8;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPHebrewBiblicalLabelFromNumber(uint)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 693, 0, "Hebrew number out of bounds for algorithm");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    return 0;
  }
}

void sub_22A329284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A329324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A329530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3298D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A329BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A329CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A329D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::alphabeticLabelStringForValue(_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  int v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v5 = (int)this;
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v7 = (v5 - 1);
    v8 = *(unsigned __int16 *)(a2 + 2 * (v7 % a3));
    if ((int)(v7 / a3 + 1) < 100)
      v9 = v7 / a3 + 1;
    else
      v9 = 100;
    while (1)
    {
      v10 = __OFSUB__(v9--, 1);
      if (v9 < 0 != v10)
        break;
      objc_msgSend(v6, "tsu_appendCharacter:", v8);
    }
  }
  return v6;
}

void sub_22A329E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendIdeographicDigit(void *a1, unsigned int a2, int a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a1;
  if (a2 >= 0xA)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void (anonymous namespace)::appendIdeographicDigit(NSMutableString *__strong, unsigned int, TSWPListIdeographicType)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 198, 0, "inDigit is larger than single digit");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }

}

void sub_22A329F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t std::accumulate[abi:ne180100]<`anonymous namespace'::IdeographicNumber const*,unsigned int,`anonymous namespace'::BinderConvertIdeographicPowerOfTen<void (*)(NSMutableString *,unsigned int)>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  void (*v10)(id, _QWORD);
  id v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *(_DWORD *)(a4 + 8);
      v9 = *(unsigned __int8 *)(a4 + 12);
      v10 = *(void (**)(id, _QWORD))(a4 + 16);
      v11 = *(id *)a4;
      v12 = v11;
      v13 = *(_DWORD *)v7;
      v14 = a3 / *(_DWORD *)v7;
      if (((_DWORD)a3 || !v13) && (v9 || v14 != 1 || v8 && v8 != 3))
        v10(v11, a3 / v13);
      if (v13 <= a3)
        objc_msgSend(v12, "tsu_appendCharacter:", *(unsigned __int16 *)(v7 + 4));
      v15 = *(_DWORD *)v7;
      v7 += 8;
      a3 = a3 - v15 * v14;

    }
    while (v7 != a2);
  }

  return a3;
}

void sub_22A32A018(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::ideographicNumberStringForSmallValue(uint64_t a1, unsigned int a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t (*v7)(_anonymous_namespace_ *__hidden, NSMutableString *, unsigned int);
  id v8;
  unsigned int v9;
  id v11;
  unsigned int v12;
  char v13;
  uint64_t (*v14)(_anonymous_namespace_ *__hidden, NSMutableString *, unsigned int);

  if (a1 >> 4 >= 0x271)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSMutableString *(anonymous namespace)::ideographicNumberStringForSmallValue(unsigned int, TSWPListIdeographicType, BOOL)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 311, 0, "inValue too large for ideographicNumberStringForSmallValue");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  v11 = v8;
  v12 = a2;
  v13 = 0;
  v14 = v7;
  if (v9)
  return v8;
}

void sub_22A32A14C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendMultipleIdeographicDigitsJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  void *v3;
  _anonymous_namespace_ *v4;

  v4 = this;
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_anonymous_namespace_ appendString:](v4, "appendString:", v3);

}

void sub_22A32A1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendMultipleIdeographicDigitsSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  void *v3;
  _anonymous_namespace_ *v4;

  v4 = this;
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_anonymous_namespace_ appendString:](v4, "appendString:", v3);

}

void sub_22A32A254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendMultipleIdeographicDigitsTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  void *v3;
  _anonymous_namespace_ *v4;

  v4 = this;
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_anonymous_namespace_ appendString:](v4, "appendString:", v3);

}

void sub_22A32A2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendMultipleIdeographicDigitsFormalJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  void *v3;
  _anonymous_namespace_ *v4;

  v4 = this;
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_anonymous_namespace_ appendString:](v4, "appendString:", v3);

}

void sub_22A32A364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendMultipleIdeographicDigitsFormalSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  void *v3;
  _anonymous_namespace_ *v4;

  v4 = this;
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_anonymous_namespace_ appendString:](v4, "appendString:", v3);

}

void sub_22A32A3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendMultipleIdeographicDigitsFormalTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  void *v3;
  _anonymous_namespace_ *v4;

  v4 = this;
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_anonymous_namespace_ appendString:](v4, "appendString:", v3);

}

void sub_22A32A474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendIdeographicDigitJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void `anonymous namespace'::appendIdeographicDigitSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void `anonymous namespace'::appendIdeographicDigitTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void `anonymous namespace'::appendIdeographicDigitFormalJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void `anonymous namespace'::appendIdeographicDigitFormalSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void `anonymous namespace'::appendIdeographicDigitFormalTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

id `anonymous namespace'::cjkLabelStringForValue(_anonymous_namespace_ *this, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v7;
  void *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned __int16 v11;

  LODWORD(v7) = (_DWORD)this;
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((_DWORD)v7)
  {
    v9 = 0;
    do
    {
      v10 = (v7 - 1);
      if (a4)
        v11 = *(_WORD *)(a2 + 2 * (v10 % a3)) + 96;
      else
        v11 = *(_WORD *)(a2 + 2 * (v10 % a3));
      objc_msgSend(v8, "tsu_insertCharacter:atIndex:", v11, 0);
      v7 = (v10 - (v10 % a3)) / a3;
      if (!(_DWORD)v7)
        break;
    }
    while (v9++ < 0x64);
  }
  return v8;
}

void sub_22A32A574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t `anonymous namespace'::toAbjadUnder1000(_anonymous_namespace_ *this, void *__b, unsigned __int16 *a3)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v4 = this;
  if (this >= 0x190)
  {
    v5 = this / 0x190uLL;
    memset_pattern16(__b, &unk_22A4BDB10, (2 * v5));
  }
  else
  {
    v5 = 0;
  }
  if (v4 % 0x190 >= 0x64)
  {
    v5 = (v5 + 1);
  }
  v6 = v4 % 0x190 % 0x64;
  if (v6 - 15 <= 1)
  {
    *((_WORD *)__b + v5) = 1610;
    v7 = (v5 + 2);
    v8 = v6 - 11;
    LODWORD(v5) = v5 + 1;
LABEL_12:
    v5 = v7;
    goto LABEL_13;
  }
  if (v6 >= 0xA)
  {
    v5 = (v5 + 1);
  }
  if (v4 % 0x190 % 0x64 % 0xA)
  {
    v8 = v4 % 0x190 % 0x64 % 0xA - 1;
    v7 = (v5 + 1);
    goto LABEL_12;
  }
LABEL_13:
  if (v5 >= 6)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "uint (anonymous namespace)::toAbjadUnder1000(uint, unichar *)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 748, 0, "string out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return v5;
}

void sub_22A32A760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t `anonymous namespace'::toHebrewUnder1000(_anonymous_namespace_ *this, void *__b, unsigned __int16 *a3)
{
  unsigned int v4;
  unint64_t v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  void *v10;

  v4 = this;
  if (this >= 0x190)
  {
    v5 = this / 0x190uLL;
    memset_pattern16(__b, &unk_22A4BDB20, (2 * v5));
  }
  else
  {
    v5 = 0;
  }
  if (v4 % 0x190 >= 0x64)
  {
    *((_WORD *)__b + v5) = v4 % 0x190 / 0x64 + 1510;
    v5 = (v5 + 1);
  }
  v6 = v4 % 0x190 % 0x64;
  if (v6 - 15 <= 1)
  {
    v7 = v5 + 1;
    *((_WORD *)__b + v5) = 1496;
    LODWORD(v5) = v5 + 2;
    *((_WORD *)__b + v7) = v6 + 1478;
LABEL_13:
    v8 = v5;
    *((_WORD *)__b + v5) = *((_WORD *)__b + (v5 - 1));
    *((_WORD *)__b + (v5 - 1)) = 1524;
    v5 = (v5 + 1);
    if (v8 >= 6)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "uint (anonymous namespace)::toHebrewUnder1000(uint, unichar *)");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 687, 0, "string out of range");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
    return v5;
  }
  if (v4 % 0x190 % 0x64 >= 0xA)
  {
    v5 = (v5 + 1);
  }
  if (v4 % 0x190 % 0x64 % 0xA)
  {
    *((_WORD *)__b + v5) = v4 % 0x190 % 0x64 % 0xA + 1487;
    v5 = (v5 + 1);
  }
  if (v5 >= 2)
    goto LABEL_13;
  return v5;
}

void sub_22A32A964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t pTCXmlCheckName(_xmlNode *a1, CXNamespace *a2, xmlChar *str2)
{
  uint64_t result;

  if (!a1)
    return objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("TCXmlException"), CFSTR("Could not find node: %s"), str2);
  if (!xmlStrEqual(a1->name, str2))
    return objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("TCXmlException"), CFSTR("Could not find node: %s"), str2);
  result = -[CXNamespace containsNode:](a2, "containsNode:", a1);
  if ((result & 1) == 0)
    return objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("TCXmlException"), CFSTR("Could not find node: %s"), str2);
  return result;
}

xmlNodePtr CXGetRootElement(const unsigned __int8 *a1, unsigned int a2)
{
  void *v2;
  const xmlDoc *Doc;

  if (!a1 || !a2)
    return 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16A8]), "initWithBytes:length:encoding:", a1, a2, 4);
  Doc = xmlReadDoc((const xmlChar *)objc_msgSend(v2, "tc_xmlString"), 0, 0, 97);

  return xmlDocGetRootElement(Doc);
}

_xmlNode *CXRequiredLongChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, int a4)
{
  _xmlNode *result;
  char *Content;
  uint64_t v7;

  result = pCXFindChild(a1, a2, a3);
  if (result)
  {
    Content = (char *)xmlNodeGetContent(result);
    v7 = CXLongValueFromString((int)Content, Content, a4);
    ((void (*)(char *))*MEMORY[0x24BEDE758])(Content);
    return (_xmlNode *)v7;
  }
  return result;
}

uint64_t CXLongValueFromString(int a1, char *__str, int a3)
{
  double v5;
  int v8;
  double v9;
  uint64_t v10;

  v9 = 0.0;
  v8 = 0;
  CXSplitValueAndUnitXML(__str, &v9, &v8);
  if (v8)
  {
    if (a3)
    {
      v5 = CXUnitToPoint(v8);
      return (uint64_t)(v9 * (v5 / CXUnitToPoint(a3)));
    }
    else
    {
      return (uint64_t)v9;
    }
  }
  else
  {
    v10 = 0;
    if (__str)
    {
      sfaxmlXmlCharToLong(__str, &v10);
      return v10;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t CXLongValue(uint64_t a1, int a2)
{
  uint64_t v3;
  char *String;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && !*(_QWORD *)(v3 + 48) && (*(_DWORD *)(v3 + 8) - 3) <= 1)
    return CXLongValueFromString(a1, *(char **)(v3 + 80), a2);
  String = (char *)xmlNodeListGetString(*(xmlDocPtr *)(a1 + 64), (const xmlNode *)v3, 1);
  v6 = CXLongValueFromString((int)String, String, a2);
  ((void (*)(char *))*MEMORY[0x24BEDE758])(String);
  return v6;
}

void CXSplitValueAndUnitXML(char *__str, double *a2, _DWORD *a3)
{
  unsigned int v4;
  uint64_t v6;
  id v7;

  *a2 = 0.0;
  *a3 = 0;
  v4 = *__str;
  if (*__str)
  {
    v6 = 1;
    while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v4 + 60) & 0x400) != 0)
    {
      v4 = __str[v6++];
      if (!v4)
        goto LABEL_5;
    }
    v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithXmlString:", __str);
    CXSplitValueAndUnit(v7, a2, a3);

  }
  else
  {
LABEL_5:
    *a2 = (double)strtol(__str, 0, 10);
  }
}

uint64_t CXSplitValueAndUnit(void *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;

  *a2 = 0;
  *a3 = 0;
  result = objc_msgSend(a1, "length");
  v7 = result;
  if (!(_DWORD)result)
    return result;
  result = objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet");
  v8 = (void *)result;
  if (v7 < 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    while (1)
    {
      result = objc_msgSend(v8, "characterIsMember:", objc_msgSend(a1, "characterAtIndex:", v9));
      if (!(_DWORD)result)
        break;
      if (v7 == ++v9)
      {
        v10 = v7;
        goto LABEL_9;
      }
    }
    v10 = v9;
  }
LABEL_9:
  v11 = v7;
  v12 = v10;
  if (v10 >= v7)
    v13 = v7;
  else
    v13 = v10;
  v14 = v7 + 1;
  while (v11 > v12)
  {
    result = objc_msgSend(v8, "characterIsMember:", objc_msgSend(a1, "characterAtIndex:", --v11));
    --v14;
    if ((result & 1) == 0)
      goto LABEL_17;
  }
  v14 = v13;
LABEL_17:
  if (v14 == (_DWORD)v12)
    return result;
  v15 = 0;
  v16 = (v14 - v12);
  v17 = MEMORY[0x24BDAC740];
  while (1)
  {
    v18 = objc_msgSend(a1, "characterAtIndex:", v14 + v15 - 1);
    v19 = v18;
    if (v18 <= 0x7F)
      break;
    if (!__maskrune(v18, 0x100uLL))
      goto LABEL_23;
LABEL_28:
    --v15;
    if (!--v16)
      goto LABEL_29;
  }
  if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x100) != 0)
    goto LABEL_28;
LABEL_23:
  if (v19 == 37 || v19 == 0)
    goto LABEL_28;
LABEL_29:
  if ((_DWORD)v12 || v14 != v7 || v15)
  {
    result = objc_msgSend((id)objc_msgSend(a1, "substringWithRange:", v12, v14 - (int)v12 + v15), "doubleValue");
    *a2 = v21;
    if (v15)
    {
      result = CXUnitWithName((NSString *)objc_msgSend(a1, "substringWithRange:", v14 + v15, -v15));
      *a3 = result;
    }
  }
  else
  {
    result = objc_msgSend(a1, "doubleValue");
    *a2 = v22;
  }
  return result;
}

double CXUnitToPoint(int a1)
{
  int v1;
  uint64_t v2;

  v1 = a1 - 6;
  if ((a1 - 6) < 0xB && ((0x77Fu >> v1) & 1) != 0)
    return dbl_22A4BDB48[v1];
  v2 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "double CXUnitToPoint(CXUnit)");
  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCXmlUtilities.mm"), 973, 0, "Unhandled attribute value unit");
  +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  return 1.0;
}

_xmlAttr *CXRequiredLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, int a4)
{
  _xmlAttr *result;

  result = CXFindAttribute(a1, a2, a3);
  if (result)
    return (_xmlAttr *)CXLongValue((uint64_t)result, a4);
  return result;
}

BOOL CXOptionalLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t *a4, int a5)
{
  _xmlAttr *v7;
  _xmlAttr *v8;

  v7 = CXFindAttribute(a1, a2, a3);
  v8 = v7;
  if (v7)
    *a4 = CXLongValue((uint64_t)v7, a5);
  return v8 != 0;
}

uint64_t CXDefaultLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4, int a5)
{
  _xmlAttr *v7;

  v7 = CXFindAttribute(a1, a2, a3);
  if (v7)
    return CXLongValue((uint64_t)v7, a5);
  else
    return a4;
}

uint64_t CXOptionalUnsignedAttributeFromHex8X(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v6;
  NSString *v7;

  v7 = 0;
  result = CXOptionalStringAttribute(a1, a2, a3, &v7);
  if ((_DWORD)result)
  {
    v6 = 0;
    result = objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD17A8], "scannerWithString:", v7), "scanHexInt:", &v6);
    if ((_DWORD)result)
      *a4 = v6;
  }
  return result;
}

double CXFraction(NSString *a1)
{
  double result;
  double v2;
  double v3;
  int v4;
  double v5;

  v5 = 0.0;
  v4 = 0;
  CXSplitValueAndUnit(a1, &v5, &v4);
  if (v4 == 13)
  {
    v2 = v5;
    v3 = 100.0;
  }
  else
  {
    result = 0.0;
    if (v4)
      return result;
    v2 = v5;
    v3 = 100000.0;
  }
  return v2 / v3;
}

void CXRequiredFractionAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlAttr *v3;
  _xmlAttr *v4;
  _xmlNode *children;
  NSString *v6;
  NSString *v7;

  v3 = CXFindAttribute(a1, a2, a3);
  if (v3)
  {
    v4 = v3;
    children = v3->children;
    if (!children || children->next || children->type != XML_TEXT_NODE || strcmp((const char *)children->content, "0"))
    {
      v6 = (NSString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithValueOfXmlAttribute:", v4);
      if (v6)
      {
        v7 = v6;
        CXFraction(v6);

      }
    }
  }
}

BOOL CXOptionalFractionAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, double *a4)
{
  NSString *v5;
  NSString *v7;

  v7 = 0;
  CXOptionalStringAttribute(a1, a2, a3, &v7);
  v5 = v7;
  if (v7)
    *a4 = CXFraction(v7);
  return v5 != 0;
}

double CXDefaultFractionAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, double a4)
{
  NSString *v6;

  v6 = 0;
  CXOptionalStringAttribute(a1, a2, a3, &v6);
  if (v6)
    return CXFraction(v6);
  else
    return a4;
}

double CXRequiredDoubleAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlAttr *v3;

  v3 = CXFindAttribute(a1, a2, a3);
  if (v3)
    return CXDoubleValue(v3);
  else
    return 0.0;
}

BOOL CXOptionalBoolAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, BOOL *a4)
{
  _xmlAttr *v5;
  _xmlAttr *v6;

  v5 = CXFindAttribute(a1, a2, a3);
  v6 = v5;
  if (v5)
    *a4 = CXBoolValue(v5);
  return v6 != 0;
}

uint64_t CXDefaultBoolAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4)
{
  _xmlAttr *v5;

  v5 = CXFindAttribute(a1, a2, a3);
  if (v5)
    return CXBoolValue(v5);
  else
    return a4;
}

NSString *CXRequiredBase64DecodedDataAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  NSString *result;

  result = (NSString *)CXRequiredStringAttribute(a1, a2, a3);
  if (result)
    return (NSString *)decodeBase64(result);
  return result;
}

uint64_t decodeBase64(NSString *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v1 = removeCRs(a1);
  v2 = objc_msgSend(v1, "length");
  if ((v2 & 3) != 0)
    return 0;
  v4 = v2;
  v5 = 2 * v2;
  v6 = operator new[]();
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = 0;
      v14 = 0;
      do
      {
        if (v7 + v9 < v4)
          *((_BYTE *)&v14 + v9) = decodeBase64Char(objc_msgSend(v1, "characterAtIndex:"));
        ++v9;
      }
      while (v9 != 4);
      v10 = BYTE1(v14);
      v11 = v8 + 1;
      *(_BYTE *)(v6 + v8) = (BYTE1(v14) >> 4) | (4 * v14);
      v12 = BYTE2(v14);
      if (BYTE2(v14) != 64)
      {
        *(_BYTE *)(v6 + v11) = (BYTE2(v14) >> 2) | (16 * v10);
        v11 = v8 + 2;
      }
      if (HIBYTE(v14) == 64)
      {
        v8 = v11;
      }
      else
      {
        v8 = v11 + 1;
        *(_BYTE *)(v6 + v11) = HIBYTE(v14) | (v12 << 6);
      }
      v7 += 4;
    }
    while (v7 < v4 && v8 < v5);
  }
  else
  {
    v8 = 0;
  }
  v13 = objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithBytes:length:", v6, v8);
  MEMORY[0x22E2DD3F0](v6, 0x1000C8077774924);
  return v13;
}

NSString *CXChildDefaultStringContent(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, NSString *a4)
{
  _xmlNode *v5;

  v5 = pCXFindChild(a1, a2, a3);
  if (v5)
    return (NSString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithContentOfXmlNode:", v5);
  else
    return a4;
}

NSString *CXDefaultStringContent(_xmlNode *a1, NSString *a2)
{
  if (a1)
    return (NSString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithContentOfXmlNode:", a1);
  else
    return a2;
}

uint64_t CXDateForISO8601WithString(NSString *a1)
{
  NSString *v1;
  id v2;
  uint64_t result;

  v1 = a1;
  if (-[NSString hasSuffix:](a1, "hasSuffix:", CFSTR("Z")))
    v1 = -[NSString substringToIndex:](v1, "substringToIndex:", -[NSString length](v1, "length") - 1);
  v2 = objc_alloc_init(MEMORY[0x24BDD1500]);
  objc_msgSend(v2, "setTimeStyle:", 4);
  objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss.SSS"));
  result = objc_msgSend(v2, "dateFromString:", v1);
  if (!result)
  {
    objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ssZZZ"));
    result = objc_msgSend(v2, "dateFromString:", v1);
    if (!result)
    {
      objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss ZZZ"));
      result = objc_msgSend(v2, "dateFromString:", v1);
      if (!result)
      {
        objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss"));
        result = objc_msgSend(v2, "dateFromString:", v1);
        if (!result)
        {
          objc_msgSend(v2, "setDateFormat:", CFSTR("EEE, dd MMM yyyy HH:mm:ss z"));
          result = objc_msgSend(v2, "dateFromString:", v1);
          if (!result)
          {
            objc_msgSend(v2, "setDateFormat:", CFSTR("EEEE, dd-MMM-yy HH:mm:ss z"));
            result = objc_msgSend(v2, "dateFromString:", v1);
            if (!result)
            {
              objc_msgSend(v2, "setDateFormat:", CFSTR("EEE MMM d HH:mm:ss yyyy"));
              result = objc_msgSend(v2, "dateFromString:", v1);
              if (!result)
              {
                objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"));
                result = objc_msgSend(v2, "dateFromString:", v1);
                if (!result)
                {
                  objc_msgSend(v2, "setDateFormat:", &stru_24F3BFFF8);
                  return objc_msgSend(v2, "dateFromString:", v1);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t decodeBase64Char(int a1)
{
  unsigned int v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;

  v1 = a1 - 65;
  if (a1 == 47)
    v2 = 63;
  else
    v2 = -1;
  if (a1 == 61)
    v3 = 64;
  else
    v3 = v2;
  if (a1 == 43)
    v4 = 62;
  else
    v4 = v3;
  if ((a1 - 48) <= 9)
    v5 = a1 + 4;
  else
    v5 = v4;
  if ((a1 - 97) <= 0x19)
    v6 = a1 - 71;
  else
    v6 = v5;
  if (v1 > 0x19)
    LOBYTE(v1) = v6;
  return v1;
}

void *removeCRs(NSString *a1)
{
  NSUInteger v2;
  void *v3;
  NSArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  v2 = -[NSString length](a1, "length");
  v3 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithCapacity:", v2);
  v4 = -[NSString componentsSeparatedByString:](a1, "componentsSeparatedByString:", CFSTR("\n"));
  v5 = -[NSArray count](v4, "count");
  if (v5)
  {
    v6 = v5;
    for (i = 0; i != v6; ++i)
      objc_msgSend(v3, "appendString:", -[NSArray objectAtIndex:](v4, "objectAtIndex:", i));
  }
  return v3;
}

uint64_t CXUnitWithName(NSString *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v2 = (void *)CXUnitWithName(NSString *)::unitNameToUnitMap;
  if (!CXUnitWithName(NSString *)::unitNameToUnitMap)
  {
    v17 = objc_alloc(MEMORY[0x24BDBCE70]);
    v16 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 1);
    v15 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 2);
    v14 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 3);
    v13 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 5);
    v12 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 4);
    v3 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 6);
    v4 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 7);
    v5 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 8);
    v6 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 9);
    v7 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 10);
    v8 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 11);
    v9 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 11);
    v10 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 12);
    v2 = (void *)objc_msgSend(v17, "initWithObjectsAndKeys:", v16, CFSTR("f"), v15, CFSTR("fd"), v14, CFSTR("deg"), v13, CFSTR("rad"), v12, CFSTR("grad"), v3, CFSTR("pt"), v4, CFSTR("in"), v5, CFSTR("cm"), v6,
                   CFSTR("mm"),
                   v7,
                   CFSTR("px"),
                   v8,
                   CFSTR("pc"),
                   v9,
                   CFSTR("pi"),
                   v10,
                   CFSTR("emu"),
                   objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 13),
                   CFSTR("%"),
                   0);
    CXUnitWithName(NSString *)::unitNameToUnitMap = (uint64_t)v2;
  }
  return objc_msgSend((id)objc_msgSend(v2, "objectForKey:", -[NSString lowercaseString](a1, "lowercaseString")), "intValue");
}

CXNamespace *CXXmlStrEqualToNsUriOrFallbackNsUri(const unsigned __int8 *a1, CXNamespace *a2)
{
  CXNamespace *v2;
  CXNamespace *i;
  CXNamespace *result;

  v2 = a2;
  for (i = a2; !xmlStrEqual(a1, (const xmlChar *)-[CXNamespace uri](i, "uri")); v2 = i)
  {
    result = -[CXNamespace fallbackNamespace](v2, "fallbackNamespace");
    if (!result)
      return result;
    i = -[CXNamespace fallbackNamespace](v2, "fallbackNamespace");
  }
  return (CXNamespace *)1;
}

xmlAttrPtr CXXmlHasNsPropWithFallbackNs(_xmlNode *a1, const unsigned __int8 *a2, CXNamespace *a3)
{
  CXNamespace *v3;
  CXNamespace *i;
  xmlAttrPtr result;

  v3 = a3;
  for (i = a3; ; v3 = i)
  {
    result = xmlHasNsProp(a1, a2, (const xmlChar *)-[CXNamespace uri](i, "uri"));
    if (result)
      break;
    result = -[CXNamespace fallbackNamespace](v3, "fallbackNamespace");
    if (!result)
      break;
    i = -[CXNamespace fallbackNamespace](v3, "fallbackNamespace");
  }
  return result;
}

xmlNsPtr CXXmlSearchNsByHrefWithFallbackNs(_xmlDoc *a1, _xmlNode *a2, CXNamespace *a3)
{
  CXNamespace *v3;
  CXNamespace *i;
  xmlNsPtr result;

  v3 = a3;
  for (i = a3; ; v3 = i)
  {
    result = xmlSearchNsByHref(a1, a2, (const xmlChar *)-[CXNamespace uri](i, "uri"));
    if (result)
      break;
    result = -[CXNamespace fallbackNamespace](v3, "fallbackNamespace");
    if (!result)
      break;
    i = -[CXNamespace fallbackNamespace](v3, "fallbackNamespace");
  }
  return result;
}

const __CFString *TCXmlStringForBool(int a1)
{
  if (a1)
    return CFSTR("1");
  else
    return CFSTR("0");
}

uint64_t TCXmlStringForInt(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%ld"), a1);
}

uint64_t TCXmlStringForUnsignedLong(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%lu"), a1);
}

id TCXmlStringForEnum(uint64_t a1, TCEnumerationMap *a2)
{
  return -[TCEnumerationMap stringForValue:](a2, "stringForValue:", a1);
}

uint64_t TCXmlStringForDouble(double a1)
{
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%g"), *(_QWORD *)&a1);
}

void sub_22A32BE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32BF64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32C00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32C324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A32C6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sfaxmlNSMutableDataWriteCallback(void *a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(a1, "appendBytes:length:", a2, (int)a3);
  return a3;
}

id sfaxmlDumpNodeToRetainedNSData(xmlNode *a1)
{
  id v2;
  int v3;
  xmlOutputBuffer *IO;

  v2 = objc_alloc_init(MEMORY[0x24BDBCEC8]);
  if (a1)
  {
    v3 = xmlKeepBlanksDefault(0);
    IO = xmlOutputBufferCreateIO((xmlOutputWriteCallback)sfaxmlNSMutableDataWriteCallback, 0, v2, 0);
    xmlNodeDumpOutput(IO, a1->doc, a1, 0, 1, 0);
    xmlOutputBufferClose(IO);
    xmlKeepBlanksDefault(v3);
  }
  return v2;
}

const __CFString *sfaxmlNodeDescription(xmlNode *a1)
{
  id v1;
  uint64_t v2;
  char v4;

  if (!a1)
    return CFSTR("null node");
  v1 = sfaxmlDumpNodeToRetainedNSData(a1);
  v4 = 0;
  objc_msgSend(v1, "appendBytes:length:", &v4, 1);
  v2 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", objc_msgSend(v1, "bytes"));

  return (const __CFString *)v2;
}

uint64_t sfaPopZLibFileReadHandlers_libxml(int a1)
{
  uint64_t result;
  uint64_t v3;

  result = xmlPopInputCallbacks();
  if ((_DWORD)result != a1)
  {
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void sfaPopZLibFileReadHandlers_libxml(int)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFArchivingUtils.mm"), 172, 0, "Unbalanced calls to Push/PopZLibFileReadHandlers_libxml");
    return +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return result;
}

dispatch_queue_t __sfaxmlSAXParseFile_block_invoke()
{
  dispatch_queue_t result;

  if (sfaxmlInitMultiThreadedLibXMLUse::once != -1)
    dispatch_once(&sfaxmlInitMultiThreadedLibXMLUse::once, &__block_literal_global_41);
  result = dispatch_queue_create("SFArchivingUtils parsing queue", 0);
  sfaxmlSAXParseFile::parsingQueue = (uint64_t)result;
  return result;
}

uint64_t __sfaxmlSAXParseFile_block_invoke_2(uint64_t a1)
{
  int v2;
  int v3;

  v2 = xmlSubstituteEntitiesDefault(*(unsigned __int8 *)(a1 + 60));
  v3 = xmlRegisterInputCallbacks((xmlInputMatchCallback)sfagzfileMatch_libxml, (xmlInputOpenCallback)sfagzfileOpen_libxml, (xmlInputReadCallback)sfagzfileRead_libxml, (xmlInputCloseCallback)sfagzfileClose_libxml);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xmlSAXParseFile(*(xmlSAXHandlerPtr *)(a1 + 40), *(const char **)(a1 + 48), *(_DWORD *)(a1 + 56));
  sfaPopZLibFileReadHandlers_libxml(v3);
  return xmlSubstituteEntitiesDefault(v2);
}

void sub_22A32CB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32CB6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32CC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TCStringEncodingToNSString(uint64_t a1)
{
  void *v2;
  void *v3;

  TCStringEncodingEnumMap();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringForValue:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_22A32CCBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TCMacLanguageEnumMap(void)
{
  void *v0;
  unsigned __int8 v1;
  TCEnumerationMap *v2;
  void *v3;

  v0 = (void *)TCMacLanguageEnumMap(void)::theEnumMap;
  if (!TCMacLanguageEnumMap(void)::theEnumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1223, 0, &dword_22A0CC000);
    }
    v2 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &TCMacLanguageEnumMap(void)::theEnumStructs, 120, 1);
    v3 = (void *)TCMacLanguageEnumMap(void)::theEnumMap;
    TCMacLanguageEnumMap(void)::theEnumMap = (uint64_t)v2;

    v0 = (void *)TCMacLanguageEnumMap(void)::theEnumMap;
  }
  return v0;
}

id TCFontStyling::equivalentDictionary(TCFontStyling *this)
{
  void *v2;
  uint64_t fontClass;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t width;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)MEMORY[0x24BDBCE70];
  fontClass = this->fontClass;
  TCFontClassEnumMap();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForValue:", fontClass);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  TCStringEncodingToNSString(this->stringEncoding);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithChar:", this->weight);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", this->italic);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  width = this->width;
  TCFontWidthEnumMap();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringForValue:", width);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "dictionaryWithObjectsAndKeys:", v5, CFSTR("class"), v6, CFSTR("string-encoding"), v7, CFSTR("weight"), v8, CFSTR("italic"), v11, CFSTR("width"), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_22A32CE98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A32CEDC()
{
  JUMPOUT(0x22A32CED0);
}

void sub_22A32CEE4()
{
  JUMPOUT(0x22A32CED0);
}

unint64_t TCFontStyling::createWithDictionary(TCFontStyling *this, NSDictionary *a2)
{
  TCFontStyling *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v12;
  id v13;

  v2 = this;
  -[TCFontStyling objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("class"));
  v13 = (id)objc_claimAutoreleasedReturnValue();
  TCFontClassEnumMap();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "valueForString:", v13);

  -[TCFontStyling objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("string-encoding"));
  v12 = (id)objc_claimAutoreleasedReturnValue();
  TCStringEncodingEnumMap();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "valueForString:", v12);

  -[TCFontStyling objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("weight"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "intValue");
  -[TCFontStyling objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("italic"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "BOOLValue");
  -[TCFontStyling objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("width"));
  v9 = (id)objc_claimAutoreleasedReturnValue();
  TCFontWidthEnumMap();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "valueForString:", v9);

  return v4 | ((unint64_t)v6 << 32);
}

void sub_22A32D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A32D1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A32D2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (v1)
  _Unwind_Resume(a1);
}

void sub_22A32D38C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A32D3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32D500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A32D700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id TCFontMacLanguageIDToNSString(unsigned __int16 a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedShort:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringValue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_22A32D7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32D9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t TCFontMacLanguageIDFromNSString(NSString *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  TCMacLanguageEnumMap();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "valueForString:", v1);

  if ((_DWORD)v3 == -130883970)
    v3 = -[NSString intValue](v1, "intValue");

  return v3;
}

void sub_22A32DAD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32DB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32DBAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32DBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32DCDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32E108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_22A32E35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A32E4DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A32E734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A32EE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_22A32F0BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32F26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A32F3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32F588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A32F62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32F6E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32F78C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32F8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A32F9E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A32FB9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32FC08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A32FE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A32FFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A330250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A330338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TCFontFamilyIsPi(NSString *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  v2 = (void *)TCFontFamilyIsPi(NSString *)::piFontFamilies;
  if (!TCFontFamilyIsPi(NSString *)::piFontFamilies)
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCF20]), "initWithObjects:", CFSTR("Bookshelf Symbol 7"), CFSTR("Monotype Sorts"), CFSTR("MS Outlook"), CFSTR("MS Reference Specialty"), CFSTR("MT Extra"), CFSTR("Marlett"), CFSTR("Webdings"), CFSTR("Wingdings"), CFSTR("Wingdings 2"), CFSTR("Wingdings 3"), 0);
    v4 = (void *)TCFontFamilyIsPi(NSString *)::piFontFamilies;
    TCFontFamilyIsPi(NSString *)::piFontFamilies = v3;

    v2 = (void *)TCFontFamilyIsPi(NSString *)::piFontFamilies;
  }
  v5 = objc_msgSend(v2, "containsObject:", v1);

  return v5;
}

void sub_22A330454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TCFontFamilyHasCodePointsInPiRange(NSString *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  v2 = (void *)TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange;
  if (!TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange)
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCF20]), "initWithObjects:", CFSTR("Apple Chancery"), CFSTR("Hoefler Text Ornaments"), CFSTR("Type Embellishments One LET"), 0);
    v4 = (void *)TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange;
    TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange = v3;

    v2 = (void *)TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange;
  }
  v5 = objc_msgSend(v2, "containsObject:", v1);

  return v5;
}

void sub_22A3304EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TCUnicodeCharForZapfDingbatsCodePoint(int a1)
{
  if ((a1 - 32) > 0xDE)
    return 0;
  else
    return word_22A4BDBA0[(__int16)(a1 - 32)];
}

uint64_t TCUnicodeCharForWingdingsCodePoint(int a1)
{
  if ((a1 - 32) > 0xDE)
    return 0;
  else
    return word_22A4BDD5E[(__int16)(a1 - 32)];
}

uint64_t TCUnicodeCharForWingdings2CodePoint(int a1)
{
  if ((a1 - 37) > 0xD4)
    return 0;
  else
    return word_22A4BDF1C[(__int16)(a1 - 37)];
}

uint64_t TCUnicodeCharForSymbolCodePoint(int a1)
{
  unsigned __int8 v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 v8;

  v1 = a1;
  if ((a1 - 32) >= 0xE0)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "unichar TCUnicodeCharForSymbolCodePoint(UInt16)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCFontUtils.mm");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 4958, 0, "Symbol code point out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  v8 = v1;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", &v8, 1, 6, 0);
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "characterAtIndex:", 0);
  }
  else
  {
    NSLog((NSString *)CFSTR("Could not encode byte 0x%02X as symbol character"), v8);
    v6 = 0;
  }

  return v6;
}

void sub_22A33067C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t (*TCCodePointMapperForFontFamilyName(NSString *a1))(int a1)
{
  NSString *v1;
  NSString *v2;
  uint64_t (*v3)(int);

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (-[NSString caseInsensitiveCompare:](v1, "caseInsensitiveCompare:", CFSTR("Symbol")))
    {
      if (-[NSString caseInsensitiveCompare:](v2, "caseInsensitiveCompare:", CFSTR("Zapf Dingbats"))
        && -[NSString caseInsensitiveCompare:](v2, "caseInsensitiveCompare:", CFSTR("ZapfDingbats")))
      {
        if (-[NSString caseInsensitiveCompare:](v2, "caseInsensitiveCompare:", CFSTR("Wingdings")))
        {
          v3 = TCUnicodeCharForWingdings2CodePoint;
          if (-[NSString caseInsensitiveCompare:](v2, "caseInsensitiveCompare:", CFSTR("Wingdings 2"))
            && -[NSString caseInsensitiveCompare:](v2, "caseInsensitiveCompare:", CFSTR("Wingdings2")))
          {
            v3 = 0;
          }
        }
        else
        {
          v3 = TCUnicodeCharForWingdingsCodePoint;
        }
      }
      else
      {
        v3 = TCUnicodeCharForZapfDingbatsCodePoint;
      }
    }
    else
    {
      v3 = TCUnicodeCharForSymbolCodePoint;
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_22A330784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3309DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id TCFontFamilyNames(void)
{
  void *v0;
  id v1;
  void *v2;
  const __CFDictionary *v3;
  const __CTFontCollection *v4;
  const __CTFontCollection *v5;
  CFArrayRef MatchingFontDescriptors;
  CFArrayRef v7;
  const __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;
  _QWORD v21[3];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)TCFontFamilyNames(void)::fontNames;
  if (!TCFontFamilyNames(void)::fontNames)
  {
    v1 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v2 = (void *)TCFontFamilyNames(void)::fontNames;
    TCFontFamilyNames(void)::fontNames = (uint64_t)v1;

    v20 = *MEMORY[0x24BDC4C40];
    v21[0] = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
    v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v4 = CTFontCollectionCreateFromAvailableFonts(v3);
    v5 = v4;
    if (v4)
    {
      MatchingFontDescriptors = CTFontCollectionCreateMatchingFontDescriptors(v4);
      v7 = MatchingFontDescriptors;
      if (MatchingFontDescriptors)
      {
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v8 = MatchingFontDescriptors;
        v9 = -[__CFArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v16;
          v11 = (const __CFString *)*MEMORY[0x24BDC4D08];
          do
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v16 != v10)
                objc_enumerationMutation(v8);
              v13 = (void *)CTFontDescriptorCopyAttribute(*(CTFontDescriptorRef *)(*((_QWORD *)&v15 + 1) + 8 * v12), v11);
              if (v13)
                objc_msgSend((id)TCFontFamilyNames(void)::fontNames, "addObject:", v13, (_QWORD)v15);

              ++v12;
            }
            while (v9 != v12);
            v9 = -[__CFArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
          }
          while (v9);
        }

      }
      CFRelease(v5);

    }
    objc_msgSend((id)TCFontFamilyNames(void)::fontNames, "sortUsingSelector:", sel_compare_, (_QWORD)v15);

    v0 = (void *)TCFontFamilyNames(void)::fontNames;
  }
  return v0;
}

void sub_22A330BF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

CTFontRef TCCreateFontWithFamilyName(NSString *a1, int a2, unsigned int a3, CGFloat a4)
{
  NSString *v7;
  NSString *v8;
  int v9;
  uint64_t v10;
  const __CFDictionary *v11;
  const __CTFontDescriptor *v12;
  const __CTFont *v13;
  CTFontRef CopyWithSymbolicTraits;
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = v7;
  if (a2)
    v9 = 2;
  else
    v9 = 0;
  v10 = *MEMORY[0x24BDC4CF8];
  v16[0] = *MEMORY[0x24BDC4D08];
  v16[1] = v10;
  v17[0] = v7;
  v17[1] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v12 = CTFontDescriptorCreateWithAttributes(v11);

  v13 = CTFontCreateWithFontDescriptorAndOptions(v12, a4, 0, 1uLL);
  CFRelease(v12);
  if ((CTFontGetSymbolicTraits(v13) & 3) == (v9 | a3))
    goto LABEL_5;
  if (!v13)
  {
    CopyWithSymbolicTraits = 0;
    goto LABEL_10;
  }
  CopyWithSymbolicTraits = CTFontCreateCopyWithSymbolicTraits(v13, a4, 0, v9 | a3, 3u);
  if (!CopyWithSymbolicTraits)
LABEL_5:
    CopyWithSymbolicTraits = v13;
  else
    CFRelease(v13);
LABEL_10:

  return CopyWithSymbolicTraits;
}

void sub_22A330D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TCStringEncodingEnumMap(void)
{
  void *v0;
  unsigned __int8 v1;
  TCEnumerationMap *v2;
  void *v3;

  v0 = (void *)TCStringEncodingEnumMap(void)::stringEncodingEnumMap;
  if (!TCStringEncodingEnumMap(void)::stringEncodingEnumMap)
  {
    if ((v1 & 1) == 0
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1138, 0, &dword_22A0CC000);
    }
    v2 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &TCStringEncodingEnumMap(void)::stringEncodingEnumStructs, 142, 1);
    v3 = (void *)TCStringEncodingEnumMap(void)::stringEncodingEnumMap;
    TCStringEncodingEnumMap(void)::stringEncodingEnumMap = (uint64_t)v2;

    v0 = (void *)TCStringEncodingEnumMap(void)::stringEncodingEnumMap;
  }
  return v0;
}

id TCFontClassEnumMap(void)
{
  void *v0;
  unsigned __int8 v1;
  TCEnumerationMap *v2;
  void *v3;

  v0 = (void *)TCFontClassEnumMap(void)::fontClassEnumMap;
  if (!TCFontClassEnumMap(void)::fontClassEnumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1248, 0, &dword_22A0CC000);
    }
    v2 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &TCFontClassEnumMap(void)::fontClassEnumStructs, 7, 1);
    v3 = (void *)TCFontClassEnumMap(void)::fontClassEnumMap;
    TCFontClassEnumMap(void)::fontClassEnumMap = (uint64_t)v2;

    v0 = (void *)TCFontClassEnumMap(void)::fontClassEnumMap;
  }
  return v0;
}

id TCFontWidthEnumMap(void)
{
  void *v0;
  unsigned __int8 v1;
  TCEnumerationMap *v2;
  void *v3;

  v0 = (void *)TCFontWidthEnumMap(void)::fontWidthEnumMap;
  if (!TCFontWidthEnumMap(void)::fontWidthEnumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1253, 0, &dword_22A0CC000);
    }
    v2 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &TCFontWidthEnumMap(void)::fontWidthEnumStructs, 3, 1);
    v3 = (void *)TCFontWidthEnumMap(void)::fontWidthEnumMap;
    TCFontWidthEnumMap(void)::fontWidthEnumMap = (uint64_t)v2;

    v0 = (void *)TCFontWidthEnumMap(void)::fontWidthEnumMap;
  }
  return v0;
}

void __cxx_global_array_dtor_1138()
{
  uint64_t i;

  for (i = 0x8D8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_1223()
{
  uint64_t i;

  for (i = 0x778u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_1248()
{
  uint64_t i;

  for (i = 0x68u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_1253()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void sub_22A3315D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A33162C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCXmlPrefixStreamWriter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A3316AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A331704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A33177C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A331810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A331858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3318C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A331934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3319B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A331A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A331AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A331B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A331BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A331C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A331CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A331D78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A331E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A331EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A331F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A332014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCXmlTextWriterProvider;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A332164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3322A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3323F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3324DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3325E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A33263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCXmlStreamWriter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A332708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A332780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A332814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3328EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3329EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A332B00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A332B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A332C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A332CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A332D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A332E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A332EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A332F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A333010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3331AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A333354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33340C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3335F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A33373C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3337FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TCImportFontCache;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A333924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A333B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A333C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL TCFloatEqual(float a1, float a2)
{
  float v2;

  v2 = fabsf(a1) * 0.0000001;
  return vabds_f32(a1, a2) <= v2;
}

uint64_t TCObjectEqual(objc_object *a1, objc_object *a2)
{
  objc_object *v3;
  objc_object *v4;
  objc_object *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v3 && v4)
      v6 = -[objc_object isEqual:](v3, "isEqual:", v4);
  }

  return v6;
}

void sub_22A333D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TCBundle()
{
  if (TCBundle::onceToken != -1)
    dispatch_once(&TCBundle::onceToken, &__block_literal_global_43);
  return (id)TCBundle::sTCBundle;
}

uint64_t TCRemoveFileSecurely(NSString *a1)
{
  NSString *v1;
  NSString *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = a1;
  v2 = v1;
  if (v1 && -[NSString length](v1, "length"))
  {
    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 0;
    v4 = objc_msgSend(v3, "removeItemAtPath:error:", v2, &v6);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_22A333E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFStringRef xmlStringCreateDescribe(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("(xmlChar*)%s"), a1);
}

void getScaleFactorBetweenLengths(double a1, float a2)
{
  void *v2;
  void *v3;

  if (*(float *)&a1 == 0.0)
  {
    LODWORD(a1) = 1.0;
    if (a2 != 0.0)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float getScaleFactorBetweenLengths(float, float)", a1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCAffineTransformUtils.mm");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 30, 0, "Trying to map a zero-length segment onto a nonzero-length one");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
  }
}

void sub_22A333F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double getScaleFactorsBetweenRects(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGFloat v11;
  float Width;
  double v16;
  float v17;
  float v18;
  double v19;
  double Height;
  float v21;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v11 = a5;
  Width = CGRectGetWidth(*(CGRect *)&a1);
  v25.origin.x = v11;
  v25.origin.y = a6;
  v25.size.width = a7;
  v25.size.height = a8;
  v16 = CGRectGetWidth(v25);
  v17 = v16;
  *(float *)&v16 = Width;
  getScaleFactorBetweenLengths(v16, v17);
  v19 = v18;
  v26.origin.x = a1;
  v26.origin.y = a2;
  v26.size.width = a3;
  v26.size.height = a4;
  *(float *)&v11 = CGRectGetHeight(v26);
  v27.origin.x = a5;
  v27.origin.y = a6;
  v27.size.width = a7;
  v27.size.height = a8;
  Height = CGRectGetHeight(v27);
  v21 = Height;
  LODWORD(Height) = LODWORD(v11);
  getScaleFactorBetweenLengths(Height, v21);
  return v19;
}

CGFloat mapSrcRectOntoDstRect@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  double ScaleFactorsBetweenRects;
  double v18;
  CGFloat MidX;
  CGFloat MidY;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  __int128 v29;
  CGFloat result;
  CGFloat v31;
  CGFloat v32;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  ScaleFactorsBetweenRects = getScaleFactorsBetweenRects(a2, a3, a4, a5, a6, a7, a8, a9);
  v31 = v18;
  v32 = ScaleFactorsBetweenRects;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v37.origin.x = a6;
  v37.origin.y = a7;
  v37.size.width = a8;
  v37.size.height = a9;
  MidX = CGRectGetMidX(v37);
  v38.origin.x = a6;
  v38.origin.y = a7;
  v38.size.width = a8;
  v38.size.height = a9;
  MidY = CGRectGetMidY(v38);
  CGAffineTransformMakeTranslation((CGAffineTransform *)a1, MidX, MidY);
  v21 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v35.a = *(_OWORD *)a1;
  *(_OWORD *)&v35.c = v21;
  *(_OWORD *)&v35.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v36, &v35, v32, v31);
  v22 = *(_OWORD *)&v36.c;
  *(_OWORD *)a1 = *(_OWORD *)&v36.a;
  *(_OWORD *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v36.tx;
  v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v34.a = *(_OWORD *)a1;
  *(_OWORD *)&v34.c = v23;
  *(_OWORD *)&v34.tx = *(_OWORD *)(a1 + 32);
  v24 = a2;
  *(CGFloat *)&v23 = a3;
  v25 = a4;
  v26 = a5;
  v27 = -CGRectGetMidX(*(CGRect *)((char *)&v23 - 8));
  v39.origin.x = a2;
  v39.origin.y = a3;
  v39.size.width = a4;
  v39.size.height = a5;
  v28 = CGRectGetMidY(v39);
  CGAffineTransformTranslate(&v36, &v34, v27, -v28);
  v29 = *(_OWORD *)&v36.c;
  *(_OWORD *)a1 = *(_OWORD *)&v36.a;
  *(_OWORD *)(a1 + 16) = v29;
  result = v36.tx;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v36.tx;
  return result;
}

double transformRect(double *a1, double a2, double a3)
{
  void *v6;
  void *v7;
  double v8;
  void *v9;
  void *v10;

  if (a1[1] != 0.0)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGRect transformRect(CGRect, CGAffineTransform)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCAffineTransformUtils.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 63, 0, "");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  v8 = a1[2];
  if (v8 != 0.0)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGRect transformRect(CGRect, CGAffineTransform)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCAffineTransformUtils.mm");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 64, 0, "");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    v8 = a1[2];
  }
  return a1[4] + a3 * v8 + *a1 * a2;
}

void sub_22A334300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sfaxmlBoolToXmlChar(int a1, char *__str, size_t __size)
{
  const char *v3;

  v3 = "false";
  if (a1)
    v3 = "true";
  return snprintf(__str, __size, "%s", v3);
}

uint64_t sfaxmlLongToXmlChar(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, "%ld", a1);
}

uint64_t sfaxmlDoubleToXmlChar(char *a1, size_t __n, double a3)
{
  if (fabs(a3) != INFINITY)
    return snprintf(a1, __n, "%.*g", 17, a3);
  if (a3 >= 0.0)
  {
    strncpy(a1, "INF", __n);
    return 3;
  }
  else
  {
    strncpy(a1, "-INF", __n);
    return 4;
  }
}

uint64_t xmlIgnoreExternalEntity(const char *a1, const char *a2, _xmlParserCtxt *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  TCBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bundlePath");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v6, "rangeOfString:", v8))
    v9 = 0;
  else
    v9 = pDefaultExternalEntityLoader(a1, a2, a3);

  return v9;
}

void sub_22A3344F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A335340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

BOOL sfaxmlSetBoolNoNsProp(xmlNode *a1, const xmlChar *a2, int a3)
{
  unint64_t v5;
  void *v6;
  void *v7;
  xmlChar value[64];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = sfaxmlBoolToXmlChar(a3, (char *)value, 0x40uLL);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL sfaxmlSetBoolNoNsProp(xmlNodePtr, const xmlChar *, BOOL)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 81, 0, "snprintf printed zero characters? in sfaxmlSetBoolProp");
    goto LABEL_5;
  }
  if (v5 >= 0x40)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL sfaxmlSetBoolNoNsProp(xmlNodePtr, const xmlChar *, BOOL)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 82, 0, "buffer to small for snprintf in sfaxmlSetBoolProp");
LABEL_5:

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return xmlSetProp(a1, a2, value) != 0;
}

void sub_22A335560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sfaxmlSetLongNoNsProp(xmlNode *a1, const xmlChar *a2, uint64_t a3)
{
  unint64_t v5;
  void *v6;
  void *v7;
  xmlChar value[64];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = sfaxmlLongToXmlChar(a3, (char *)value, 0x40uLL);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL sfaxmlSetLongNoNsProp(xmlNodePtr, const xmlChar *, long)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 333, 0, "snprintf printed zero characters? in sfaxmlSetLongProp");
    goto LABEL_5;
  }
  if (v5 >= 0x40)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL sfaxmlSetLongNoNsProp(xmlNodePtr, const xmlChar *, long)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 334, 0, "buffer to small for snprintf in sfaxmlSetLongProp");
LABEL_5:

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return xmlSetProp(a1, a2, value) != 0;
}

void sub_22A3356FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sfaxmlSetDoubleNoNsProp(xmlNode *a1, const xmlChar *a2, double a3)
{
  unint64_t v5;
  void *v6;
  void *v7;
  xmlChar value[64];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = sfaxmlDoubleToXmlChar((char *)value, 0x40uLL, a3);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL sfaxmlSetDoubleNoNsProp(xmlNodePtr, const xmlChar *, double)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1420, 0, "snprintf printed zero characters? in sfaxmlSetDoubleProp");
    goto LABEL_5;
  }
  if (v5 >= 0x40)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL sfaxmlSetDoubleNoNsProp(xmlNodePtr, const xmlChar *, double)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1421, 0, "buffer to small for snprintf in sfaxmlSetDoubleProp");
LABEL_5:

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return xmlSetProp(a1, a2, value) != 0;
}

void sub_22A335894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sfaxmlSetNSStringNoNsProp(xmlNode *a1, const xmlChar *a2, void *a3)
{
  xmlAttrPtr v5;
  _BYTE v7[64];
  void *v8;
  xmlChar *value;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  CUTF8Converter<64>::CUTF8Converter((uint64_t)v7, a3);
  v5 = xmlSetProp(a1, a2, value);
  if (v8)
    free(v8);
  return v5 != 0;
}

void sub_22A335950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18)
    free(a18);
  _Unwind_Resume(exception_object);
}

uint64_t CUTF8Converter<64>::CUTF8Converter(uint64_t a1, void *a2)
{
  const __CFString *v3;
  __CFString *v4;
  const char *CStringPtr;
  uint64_t Length;
  UInt8 *v7;
  CFIndex usedBufLen;
  CFIndex maxBufLen;
  CFRange v11;
  CFRange v12;
  CFRange v13;

  v3 = a2;
  v4 = (__CFString *)v3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    *(_QWORD *)(a1 + 72) = CStringPtr;
    if (!CStringPtr)
    {
      Length = CFStringGetLength(v4);
      maxBufLen = 0;
      if (Length <= 14
        && (v11.location = 0,
            v11.length = Length,
            CFStringGetBytes(v4, v11, 0x8000100u, 0, 0, (UInt8 *)a1, 63, &maxBufLen) == Length))
      {
        *(_BYTE *)(a1 + maxBufLen) = 0;
        *(_QWORD *)(a1 + 72) = a1;
      }
      else if (!*(_QWORD *)(a1 + 72))
      {
        maxBufLen = 0;
        v12.location = 0;
        v12.length = Length;
        if (CFStringGetBytes(v4, v12, 0x8000100u, 0, 0, 0, 2147483646, &maxBufLen) == Length)
        {
          v7 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0xAE889FE9uLL);
          *(_QWORD *)(a1 + 64) = v7;
          if (v7)
          {
            usedBufLen = 0;
            v13.location = 0;
            v13.length = Length;
            CFStringGetBytes(v4, v13, 0x8000100u, 0, 0, v7, maxBufLen, &usedBufLen);
            if (usedBufLen == maxBufLen)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 64) + usedBufLen) = 0;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
            }
          }
        }
      }
    }
  }

  return a1;
}

void sub_22A335AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double NSScaleRect(double a1, double a2, double a3, double a4, float a5)
{
  return a1 * a5;
}

double NSScaleRect2(double a1, double a2, double a3, double a4, float a5)
{
  return a1 * a5;
}

CGContext *TCBitmapContextCreate(double a1)
{
  double v1;
  double v2;
  double v3;
  size_t v4;
  size_t v5;
  CGColorSpace *v6;
  size_t AlignedBytesPerRow;
  CGContext *v8;

  v1 = TSUCeilSize(a1);
  v3 = v2;
  v4 = (unint64_t)v1;
  v5 = (unint64_t)v2;
  v6 = (CGColorSpace *)TSUDeviceRGBColorSpace();
  AlignedBytesPerRow = TSUBitmapGetAlignedBytesPerRow(4 * v4);
  v8 = CGBitmapContextCreate(0, v4, v5, 8uLL, AlignedBytesPerRow, v6, 0x2002u);
  CGContextTranslateCTM(v8, 0.0, (double)(unint64_t)v3);
  CGContextScaleCTM(v8, 1.0, -1.0);
  return v8;
}

uint64_t OAConvertCsException(unsigned int *a1)
{
  if (*a1 - 7000 >= 0xA && *a1 - 7013 > 1)
    return OCConvertCsException(a1);
  else
    return +[TCMessageException raise:](TCMessageException, "raise:", TCInvalidFileFormatMessage);
}

void sub_22A335CDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A335ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A335F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3362EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3364FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A336678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A336700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A336764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A336840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A336990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A336AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A336BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A336C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A336E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A336F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A337090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A337198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A3372B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A337394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A337528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A3378B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_491()
{
  uint64_t i;

  for (i = 0x1D8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_525()
{
  uint64_t i;

  for (i = 0x108u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_807()
{
  uint64_t i;

  for (i = 0xBE8u; i != -8; i -= 16)

}

void sub_22A337A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A337B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A337DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A337F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A33819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A338330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3383AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A338430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3384B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A33852C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A338600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A338728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A3387D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A338854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3388D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A338DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3393C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A33950C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A3396C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A339948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A339A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A339B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A339E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A33A414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A33A57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A33A67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A33A874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33AA74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33AC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A33AF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A33B20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A33B4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A33B694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33B85C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A33B968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A33BB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_69()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&_ZZZ47__OAXFill_Private__pathGradientFillTypeEnumMap_EUb_E31pathGradientFillTypeEnumStructs
                       + i));
}

void __cxx_global_array_dtor_178()
{
  uint64_t i;

  for (i = 0x358u; i != -8; i -= 16)

}

void sub_22A33BDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A33BF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A33C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A33C13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A33C268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A33C370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A33C4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A33CC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A33CE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A33D2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A33D4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A33D634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A33DC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A33E00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33E0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_542()
{
  uint64_t i;

  for (i = 0x108u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_544()
{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&_ZZZ45__OAXGeometry_Private__formulaKeywordEnumMap_EUb1_E25formulaKeywordEnumStructs
                       + i));
}

void __cxx_global_array_dtor_558()
{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)

}

void sub_22A33E61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A33E7A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30OAXDateTimeIdentityToFormatMapv_block_invoke()
{
  uint64_t v0;
  __CFString **v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithCapacity:", 14);
  v0 = 0;
  v1 = off_24F39D230;
  do
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[OAXTextFieldIdentity identityWithGuid:type:](OAXTextFieldIdentity, "identityWithGuid:type:", *(v1 - 1), *v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v2, v3);

    ++v0;
    v1 += 2;
  }
  while (v0 != 14);
  v4 = objc_msgSend(v6, "copy");
  v5 = (void *)OAXDateTimeIdentityToFormatMap(void)::theMap;
  OAXDateTimeIdentityToFormatMap(void)::theMap = v4;

}

void sub_22A33E898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A33EA18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A33ECAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A33EEEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A33F094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A33F23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33F3D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A33F534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A33F5EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A33FA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v14;

  _Unwind_Resume(a1);
}

void sub_22A33FCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A33FEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A340008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_177()
{
  uint64_t i;

  for (i = 0x1A8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_196()
{
  uint64_t i;

  for (i = 0x88u; i != -8; i -= 16)

}

void sub_22A340120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A340404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3405EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A340920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A340A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A340B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A340D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A341268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3412C4()
{
  JUMPOUT(0x22A3412B8);
}

void sub_22A341404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_54()
{
  uint64_t i;

  for (i = 0x58u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_62()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_64()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_88()
{
  uint64_t i;

  for (i = 0xA8u; i != -8; i -= 16)

}

void sub_22A34177C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A3418C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A341B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A341C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A341DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A341E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id numberBulletSchemeEnumMap(void)
{
  if (numberBulletSchemeEnumMap(void)::once != -1)
    dispatch_once(&numberBulletSchemeEnumMap(void)::once, &__block_literal_global_53);
  return (id)numberBulletSchemeEnumMap(void)::theEnumMap;
}

void sub_22A34204C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A342274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL25numberBulletSchemeEnumMapv_block_invoke()
{
  unsigned __int8 v0;
  TCEnumerationMap *v1;
  void *v2;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_ZGVZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_14, 0, &dword_22A0CC000);
    __cxa_guard_release(&_ZGVZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs);
  }
  v1 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &_ZZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs, 41, 1);
  v2 = (void *)numberBulletSchemeEnumMap(void)::theEnumMap;
  numberBulletSchemeEnumMap(void)::theEnumMap = (uint64_t)v1;

}

void ___ZL19tabStopAlignEnumMapv_block_invoke()
{
  unsigned __int8 v0;
  TCEnumerationMap *v1;
  void *v2;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_ZGVZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_154, 0, &dword_22A0CC000);
    __cxa_guard_release(&_ZGVZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs);
  }
  v1 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &_ZZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs, 4, 1);
  v2 = (void *)tabStopAlignEnumMap(void)::theEnumMap;
  tabStopAlignEnumMap(void)::theEnumMap = (uint64_t)v1;

}

void ___ZL16textAlignEnumMapv_block_invoke()
{
  unsigned __int8 v0;
  TCEnumerationMap *v1;
  void *v2;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZZL16textAlignEnumMapvEUb1_E14theEnumStructs);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_ZGVZZL16textAlignEnumMapvEUb1_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_164, 0, &dword_22A0CC000);
    __cxa_guard_release(&_ZGVZZL16textAlignEnumMapvEUb1_E14theEnumStructs);
  }
  v1 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &_ZZZL16textAlignEnumMapvEUb1_E14theEnumStructs, 7, 1);
  v2 = (void *)textAlignEnumMap(void)::theEnumMap;
  textAlignEnumMap(void)::theEnumMap = (uint64_t)v1;

}

void ___ZL16fontAlignEnumMapv_block_invoke()
{
  unsigned __int8 v0;
  TCEnumerationMap *v1;
  void *v2;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZZL16fontAlignEnumMapvEUb2_E14theEnumStructs);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_ZGVZZL16fontAlignEnumMapvEUb2_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_176, 0, &dword_22A0CC000);
    __cxa_guard_release(&_ZGVZZL16fontAlignEnumMapvEUb2_E14theEnumStructs);
  }
  v1 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &_ZZZL16fontAlignEnumMapvEUb2_E14theEnumStructs, 5, 1);
  v2 = (void *)fontAlignEnumMap(void)::theEnumMap;
  fontAlignEnumMap(void)::theEnumMap = (uint64_t)v1;

}

void __cxx_global_array_dtor_154()
{
  uint64_t i;

  for (i = 0x38u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_164()
{
  uint64_t i;

  for (i = 0x68u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_176()
{
  uint64_t i;

  for (i = 0x48u; i != -8; i -= 16)

}

void sub_22A342678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A342760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3429BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A342BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A342F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x22E2DD408](v3, 0x10B1C40AF934621);

  _Unwind_Resume(a1);
}

void sub_22A3430E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A343224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34336C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A343430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A343540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34385C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A343A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A343B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A343D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A343FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A34427C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    if (a2 == 2)
    {

      objc_end_catch();
      JUMPOUT(0x22A344264);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22A344458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A344914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A344BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A344DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3452A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v23;

  v23 = v19;

  _Unwind_Resume(a1);
}

void sub_22A3454B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A345518()
{
  JUMPOUT(0x22A3454FCLL);
}

void sub_22A3457A0(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A345730);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A345840(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  JUMPOUT(0x22A345850);
}

void sub_22A3458AC(void *exc_buf, int a2)
{
  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A345734);
  }
  JUMPOUT(0x22A345814);
}

void sub_22A345968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3459DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A345A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A345CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A346170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A3462F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3464A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A346630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshComputedPoint>::append(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t result;

  v3 = (_QWORD *)a1[2];
  if ((unint64_t)v3 >= a1[3])
  {
    result = std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__push_back_slow_path<EshComputedPoint const&>(a1 + 1, a2);
  }
  else
  {
    for (i = 0; i != 2; ++i)
    {
      v5 = &v3[i];
      *(_BYTE *)v5 = 0;
      *((_DWORD *)v5 + 1) = 0;
    }
    *v3 = *a2;
    v3[1] = a2[1];
    result = (uint64_t)(v3 + 2);
  }
  a1[2] = result;
  return result;
}

void sub_22A346790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshComputedValue>::append(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[3];
  v4 = (uint64_t)(a1 + 3);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = *a2;
    v8 = v17 + 8;
    v20 = (char *)a1[1];
    v19 = (char *)a1[2];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)a1[1];
    }
    a1[1] = v17;
    a1[2] = v8;
    a1[3] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[2] = v8;
}

void sub_22A346C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_22A346EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshFormula>::append(uint64_t *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v3 = (_DWORD *)a1[2];
  if ((unint64_t)v3 >= a1[3])
  {
    result = std::vector<EshFormula,ChAllocator<EshFormula>>::__push_back_slow_path<EshFormula const&>(a1 + 1, a2);
    v4 = (_DWORD *)result;
  }
  else
  {
    v4 = v3 + 7;
    v5 = 1;
    do
    {
      v6 = &v3[v5];
      *v6 = 0;
      *((_WORD *)v6 + 2) = 0;
      v5 += 2;
    }
    while (v6 + 2 != v4);
    result = (uint64_t)EshFormula::operator=(v3, a2);
    a1[2] = (uint64_t)v4;
  }
  a1[2] = (uint64_t)v4;
  return result;
}

void sub_22A346F64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_22A3470CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshComputedRect>::append(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t result;

  v3 = a1[2];
  if (v3 >= a1[3])
  {
    result = std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__push_back_slow_path<EshComputedRect const&>(a1 + 1, a2);
  }
  else
  {
    for (i = 0; i != 32; i += 8)
    {
      v5 = v3 + i;
      *(_BYTE *)v5 = 0;
      *(_DWORD *)(v5 + 4) = 0;
    }
    for (j = 0; j != 32; j += 8)
      *(_QWORD *)(v3 + j) = *(_QWORD *)(a2 + j);
    result = v3 + 32;
  }
  a1[2] = result;
  return result;
}

void sub_22A3472CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshComputedValue>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<EshComputedValue>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<EshComputedValue>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1 + 8;
  std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::reserve((void **)(a1 + 8), (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  if (a1 != a2)
    std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__assign_with_size[abi:ne180100]<EshComputedValue*,EshComputedValue*>(v4, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

void std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::reserve(void **a1, unsigned int a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v3, a2);
    v7 = &v6[v5 & 0x7FFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

char *std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__assign_with_size[abi:ne180100]<EshComputedValue*,EshComputedValue*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  char *result;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int64_t v18;
  char **v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (((v8 - (unint64_t)result) >> 3) >= a4)
  {
    v21 = *(char **)(a1 + 8);
    v19 = (char **)(a1 + 8);
    v20 = v21;
    v22 = v21 - result;
    v23 = (unint64_t)(v21 - result) >> 3;
    if (v23 >= a4)
    {
      v31 = result;
      if (a2 != a3)
      {
        v32 = result;
        do
        {
          v33 = *v6++;
          *(_QWORD *)v32 = v33;
          v32 += 8;
          v31 += 8;
        }
        while (v6 != a3);
      }
      v18 = v31 - result;
    }
    else
    {
      v24 = (v22 >> 3);
      v25 = &a2[v23];
      if (v24)
      {
        v26 = 8 * v24;
        do
        {
          v27 = *v6++;
          *(_QWORD *)result = v27;
          result += 8;
          v26 -= 8;
        }
        while (v26);
        v20 = *v19;
      }
      result = v20;
      v28 = v20;
      if (v25 != a3)
      {
        v28 = v20;
        v29 = v20;
        do
        {
          v30 = *v25++;
          *(_QWORD *)v29 = v30;
          v29 += 8;
          v28 += 8;
        }
        while (v25 != a3);
      }
      v18 = v28 - v20;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v11 = v8 >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= a4)
      v12 = a4;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v9, v13);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[8 * v14];
    v15 = result;
    if (v6 != a3)
    {
      v15 = result;
      v16 = result;
      do
      {
        v17 = *v6++;
        *(_QWORD *)v16 = v17;
        v16 += 8;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v18 = v15 - result;
    v19 = (char **)(a1 + 8);
  }
  *v19 = &result[v18];
  return result;
}

BOOL EshBasicTablePropVal<EshComputedValue>::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  v3 = *(unsigned __int8 **)(a1 + 8);
  v2 = *(unsigned __int8 **)(a1 + 16);
  v4 = *(unsigned __int8 **)(a2 + 8);
  if (((unint64_t)(v2 - v3) >> 3) != ((*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 3))
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    result = *v3 == *v4 && *((_DWORD *)v3 + 1) == *((_DWORD *)v4 + 1);
    v3 += 8;
    v4 += 8;
  }
  while (result && v3 != v2);
  return result;
}

_QWORD *EshTablePropVal<EshComputedPoint>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D6A8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *EshTablePropVal<EshComputedPoint>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39D640;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedPoint>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A347714(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshComputedPoint>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<EshComputedPoint>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<EshComputedPoint>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1 + 8;
  std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::reserve((uint64_t *)(a1 + 8), (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  if (a1 != a2)
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__assign_with_size[abi:ne180100]<EshComputedPoint*,EshComputedPoint*>(v4, *(_QWORD **)(a2 + 8), *(_QWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  return a1;
}

void std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - *a1) >> 4) < a2)
  {
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v3, a2);
    v8 = (char *)__p + (v5 & 0xFFFFFFFF0);
    v9 = v8;
    v10 = (char *)__p + 16 * v6;
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
}

void sub_22A347880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 == *result)
  {
    v6 = a2[1];
  }
  else
  {
    do
    {
      v5 = 0;
      v6 = v4 - 16;
      do
      {
        v7 = v4 + v5;
        *(_BYTE *)(v7 - 16) = 0;
        *(_DWORD *)(v7 - 12) = 0;
        v5 += 8;
      }
      while (v5 != 16);
      v8 = *(_QWORD *)(v2 - 16);
      v2 -= 16;
      *(_QWORD *)(v4 - 16) = v8;
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v2 + 8);
      v4 -= 16;
    }
    while (v2 != v3);
  }
  a2[1] = v6;
  v9 = *result;
  *result = v6;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__assign_with_size[abi:ne180100]<EshComputedPoint*,EshComputedPoint*>(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  _QWORD *result;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;

  v5 = a3;
  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (((v8 - (unint64_t)result) >> 4) < a4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v11 = v8 >> 4;
    v12 = 2 * v11;
    if (2 * (int)v11 <= a4)
      v12 = a4;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v9, v13);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v14[16 * v15];
    v16 = a1;
    v17 = v6;
    a3 = v5;
    return (_QWORD *)std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__construct_at_end<EshComputedPoint*,EshComputedPoint*>(v16, v17, a3);
  }
  v18 = *(_QWORD *)(a1 + 8) - (_QWORD)result;
  if ((v18 >> 4) < a4)
  {
    v17 = &a2[2 * (v18 >> 4)];
    if ((v18 >> 4))
    {
      do
      {
        *result = *v6;
        result[1] = v6[1];
        v6 += 2;
        result += 2;
      }
      while (v6 != v17);
    }
    v16 = a1;
    return (_QWORD *)std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__construct_at_end<EshComputedPoint*,EshComputedPoint*>(v16, v17, a3);
  }
  if (a2 == a3)
  {
    v19 = result;
  }
  else
  {
    v19 = result;
    do
    {
      *result = *v6;
      result[1] = v6[1];
      v19 += 2;
      v6 += 2;
      result += 2;
    }
    while (v6 != a3);
  }
  *(_QWORD *)(a1 + 8) = v19;
  return result;
}

uint64_t std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__construct_at_end<EshComputedPoint*,EshComputedPoint*>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  v3 = *(_QWORD **)(result + 8);
  while (a2 != a3)
  {
    for (i = 0; i != 2; ++i)
    {
      v5 = &v3[i];
      *(_BYTE *)v5 = 0;
      *((_DWORD *)v5 + 1) = 0;
    }
    *v3 = *a2;
    v3[1] = a2[1];
    a2 += 2;
    v3 += 2;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

BOOL EshBasicTablePropVal<EshComputedPoint>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if (((unint64_t)(v2 - v3) >> 4) != ((unint64_t)(*(_QWORD *)(a2 + 16) - v4) >> 4))
    return 0;
  if (v3 != v2)
  {
LABEL_3:
    v5 = 0;
    v6 = 0;
    while (*(unsigned __int8 *)(v3 + 8 * v6) == *(unsigned __int8 *)(v4 + 8 * v6))
    {
      v7 = *(_DWORD *)(v3 + 8 * v6 + 4);
      v8 = *(_DWORD *)(v4 + 8 * v6 + 4);
      v6 = 1;
      v9 = (v7 == v8) & ~v5;
      v5 = 1;
      if ((v9 & 1) == 0)
      {
        v3 += 16;
        v4 += 16;
        if (v7 != v8 || v3 == v2)
          return v7 == v8;
        goto LABEL_3;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__push_back_slow_path<EshComputedPoint const&>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v6 = a1[1] - *a1;
  v7 = (unint64_t)(v5 - *a1) >> 4;
  if (2 * (int)v7 <= (v6 >> 4) + 1)
    v8 = (v6 >> 4) + 1;
  else
    v8 = 2 * v7;
  if (v7 >= 0x7FFFFFFF)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = v8;
  v22 = v4;
  if ((_DWORD)v9)
  {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v4, v9);
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = 0;
  v14 = &v10[v6 & 0xFFFFFFFF0];
  __p = v10;
  v19 = v14;
  v21 = &v10[16 * v12];
  do
  {
    v15 = &v14[v13];
    *v15 = 0;
    *((_DWORD *)v15 + 1) = 0;
    v13 += 8;
  }
  while (v13 != 16);
  *(_QWORD *)v14 = *a2;
  *((_QWORD *)v14 + 1) = a2[1];
  v20 = v14 + 16;
  std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(a1, &__p);
  v16 = a1[1];
  if (v20 != v19)
    v20 += (v19 - v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (__p)
    operator delete(__p);
  return v16;
}

void sub_22A347C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *EshTablePropVal<EshPathCommand>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D748;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshBasicTablePropVal<EshPathCommand>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<EshPathCommand>::operator==(a1, (uint64_t)result);
  return result;
}

BOOL EshBasicTablePropVal<EshPathCommand>::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  _BOOL8 result;

  v3 = *(unsigned __int16 **)(a1 + 8);
  v2 = *(unsigned __int16 **)(a1 + 16);
  v4 = *(unsigned __int16 **)(a2 + 8);
  if (((unint64_t)((char *)v2 - (char *)v3) >> 3) != ((*(_QWORD *)(a2 + 16)
                                                                                         - (_QWORD)v4) >> 3))
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    result = *v3 == *v4 && *((_DWORD *)v3 + 1) == *((_DWORD *)v4 + 1);
    v3 += 4;
    v4 += 4;
  }
  while (result && v3 != v2);
  return result;
}

_QWORD *EshTablePropVal<EshFormula>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D7E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshBasicTablePropVal<EshFormula>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<EshFormula>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<EshFormula>::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a1 + 8);
  std::vector<EshFormula,ChAllocator<EshFormula>>::reserve((uint64_t *)(a1 + 8), -1227133513 * ((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
  if (a1 != a2)
    std::vector<EshFormula,ChAllocator<EshFormula>>::__assign_with_size[abi:ne180100]<EshFormula*,EshFormula*>(v4, *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), -1227133513 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
  return a1;
}

void std::vector<EshFormula,ChAllocator<EshFormula>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (-1227133513 * ((unint64_t)(v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x24924925)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v5 = -1227133513 * ((unint64_t)(a1[1] - *a1) >> 2);
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(v3, a2);
    v8 = (char *)__p + 28 * v5;
    v9 = v8;
    v10 = (char *)__p + 28 * v6;
    std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 28) % 0x1CuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_22A347FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = (_DWORD *)*result;
  v4 = (_DWORD *)result[1];
  v6 = (_DWORD *)a2[1];
  while (v4 != v5)
  {
    v7 = 0x3FFFFFFFFFFFFFFALL;
    do
    {
      v8 = &v6[v7];
      *v8 = 0;
      *((_WORD *)v8 + 2) = 0;
      v7 += 2;
    }
    while (v8 + 2 != v6);
    v6 -= 7;
    v4 -= 7;
    result = (uint64_t *)EshFormula::operator=(v6, v4);
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = (uint64_t)v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(28 * a2);
}

_DWORD *std::vector<EshFormula,ChAllocator<EshFormula>>::__assign_with_size[abi:ne180100]<EshFormula*,EshFormula*>(void **a1, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *result;
  void *v19;

  v8 = (unint64_t)a1[2];
  v9 = *a1;
  if (-1227133513 * ((v8 - (unint64_t)*a1) >> 2) < a4)
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x24924924)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = -1227133513 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x12492492)
      v12 = 613566756;
    else
      v12 = v11;
    std::vector<EshFormula,ChAllocator<EshFormula>>::__vallocate[abi:ne180100](a1, v12);
    v13 = (uint64_t)a1;
    v14 = a2;
    v15 = a3;
    return (_DWORD *)std::vector<EshFormula,ChAllocator<EshFormula>>::__construct_at_end<EshFormula*,EshFormula*>(v13, v14, v15);
  }
  v16 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)v9) >> 2);
  if (v16 < a4)
  {
    v17 = &a2[7 * v16];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshFormula *,EshFormula *,EshFormula *,0>(a2, v17, v9);
    v13 = (uint64_t)a1;
    v14 = v17;
    v15 = a3;
    return (_DWORD *)std::vector<EshFormula,ChAllocator<EshFormula>>::__construct_at_end<EshFormula*,EshFormula*>(v13, v14, v15);
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshFormula *,EshFormula *,EshFormula *,0>(a2, a3, v9);
  a1[1] = v19;
  return result;
}

uint64_t std::vector<EshFormula,ChAllocator<EshFormula>>::__construct_at_end<EshFormula*,EshFormula*>(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  if (a2 == a3)
  {
    v6 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = a2;
    result = *(_QWORD *)(result + 8);
    do
    {
      v6 = result + 28;
      v7 = 4;
      do
      {
        v8 = result + v7;
        *(_DWORD *)v8 = 0;
        *(_WORD *)(v8 + 4) = 0;
        v7 += 8;
      }
      while (v8 + 8 != v6);
      EshFormula::operator=((_DWORD *)result, v5);
      v5 += 7;
      result = v6;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(v3 + 8) = v6;
  return result;
}

void sub_22A348304(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<EshFormula,ChAllocator<EshFormula>>::__vallocate[abi:ne180100](_QWORD *a1, unsigned int a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924925)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshFormula *,EshFormula *,EshFormula *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      EshFormula::operator=(a3, v4);
      v4 += 7;
      a3 += 7;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

BOOL EshBasicTablePropVal<EshFormula>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if (-1227133513 * ((unint64_t)(v3 - v2) >> 2) != -1227133513
                                                                       * ((unint64_t)(*(_QWORD *)(a2 + 16) - v4) >> 2))
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = EshFormula::operator==(v2, v4);
    if (!result)
      break;
    v2 += 28;
    v4 += 28;
  }
  while (v2 != v3);
  return result;
}

BOOL EshFormula::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 24) == *(unsigned __int16 *)(a2 + 24);
}

uint64_t std::vector<EshFormula,ChAllocator<EshFormula>>::__push_back_slow_path<EshFormula const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if ((v4 + 1) > 0x24924924)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = -1227133513 * ((unint64_t)(a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x12492492)
    v9 = 613566756;
  else
    v9 = v5;
  v21 = a1 + 2;
  if ((_DWORD)v9)
  {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(v7, v9);
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = &v10[28 * v4];
  __p = v10;
  v18 = v13;
  v19 = v13;
  v20 = &v10[28 * v12];
  v14 = v13 + 4;
  do
  {
    *(_DWORD *)v14 = 0;
    *((_WORD *)v14 + 2) = 0;
    v14 += 8;
  }
  while (v14 != v13 + 28);
  EshFormula::operator=(v13, a2);
  v19 += 28;
  std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(a1, &__p);
  v15 = a1[1];
  if (v19 != v18)
    v19 = &v18[(v19 - v18 - 28) % 0x1CuLL];
  if (__p)
    operator delete(__p);
  return v15;
}

void sub_22A348628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *EshTablePropVal<EshComputedRect>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D888;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshBasicTablePropVal<EshComputedRect>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<EshComputedRect>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<EshComputedRect>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1 + 8;
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::reserve((uint64_t *)(a1 + 8), (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5);
  if (a1 != a2)
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__assign_with_size[abi:ne180100]<EshComputedRect*,EshComputedRect*>(v4, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5);
  return a1;
}

void std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - *a1) >> 5) < a2)
  {
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v3, a2);
    v8 = (char *)__p + (v5 & 0x1FFFFFFFE0);
    v9 = v8;
    v10 = (char *)__p + 32 * v6;
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 += (v8 - v9 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
}

void sub_22A348810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v6 = a2[1];
  }
  else
  {
    do
    {
      v5 = 0;
      v6 = v4 - 32;
      do
      {
        v7 = v4 + v5;
        *(_BYTE *)(v7 - 32) = 0;
        *(_DWORD *)(v7 - 28) = 0;
        v5 += 8;
      }
      while (v5 != 32);
      v8 = v3 - 32;
      v9 = -32;
      do
      {
        *(_QWORD *)(v4 + v9) = *(_QWORD *)(v3 + v9);
        v9 += 8;
      }
      while (v9);
      v3 -= 32;
      v4 -= 32;
    }
    while (v8 != v2);
  }
  a2[1] = v6;
  v10 = *result;
  *result = v6;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

char *std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__assign_with_size[abi:ne180100]<EshComputedRect*,EshComputedRect*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  char *result;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t j;

  v5 = a3;
  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (((v8 - (unint64_t)result) >> 5) < a4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v11 = v8 >> 5;
    v12 = 2 * v11;
    if (2 * (int)v11 <= a4)
      v12 = a4;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v9, v13);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v14[32 * v15];
    v16 = a1;
    v17 = v6;
    a3 = v5;
    return (char *)std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__construct_at_end<EshComputedRect*,EshComputedRect*>(v16, v17, a3);
  }
  v18 = *(_QWORD *)(a1 + 8) - (_QWORD)result;
  if ((v18 >> 5) < a4)
  {
    v19 = (v18 >> 5);
    v17 = a2 + 32 * v19;
    if (v19)
    {
      do
      {
        for (i = 0; i != 32; i += 8)
          *(_QWORD *)&result[i] = *(_QWORD *)(v6 + i);
        v6 += 32;
        result += 32;
      }
      while (v6 != v17);
    }
    v16 = a1;
    return (char *)std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__construct_at_end<EshComputedRect*,EshComputedRect*>(v16, v17, a3);
  }
  while (v6 != a3)
  {
    for (j = 0; j != 32; j += 8)
      *(_QWORD *)&result[j] = *(_QWORD *)(v6 + j);
    v6 += 32;
    result += 32;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__construct_at_end<EshComputedRect*,EshComputedRect*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;

  v3 = *(_QWORD *)(result + 8);
  while (a2 != a3)
  {
    for (i = 0; i != 32; i += 8)
    {
      v5 = v3 + i;
      *(_BYTE *)v5 = 0;
      *(_DWORD *)(v5 + 4) = 0;
    }
    for (j = 0; j != 32; j += 8)
      *(_QWORD *)(v3 + j) = *(_QWORD *)(a2 + j);
    a2 += 32;
    v3 += 32;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

BOOL EshBasicTablePropVal<EshComputedRect>::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;
  char v6;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 **)(a1 + 16);
  v4 = *(unsigned __int8 **)(a2 + 8);
  if (((unint64_t)(v3 - v2) >> 5) != ((*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 5))
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<EshComputedRect,EshComputedRect>((uint64_t)&v6, v2, v4);
    if (!result)
      break;
    v2 += 32;
    v4 += 32;
  }
  while (v2 != v3);
  return result;
}

BOOL std::__equal_to::operator()[abi:ne180100]<EshComputedRect,EshComputedRect>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3;
  int *v4;
  int *v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;

  if (*a2 != *a3 || *((_DWORD *)a2 + 1) != *((_DWORD *)a3 + 1))
    return 0;
  v3 = 0;
  v4 = (int *)(a3 + 12);
  v5 = (int *)(a2 + 12);
  do
  {
    v6 = v3;
    if (v3 == 3)
      break;
    if (*((unsigned __int8 *)v5 - 4) != *((unsigned __int8 *)v4 - 4))
      break;
    v8 = *v5;
    v5 += 2;
    v7 = v8;
    v9 = *v4;
    v4 += 2;
    ++v3;
  }
  while (v7 == v9);
  return v6 > 2;
}

uint64_t std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__push_back_slow_path<EshComputedRect const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t i;
  uint64_t v17;
  void *__p;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v6 = a1[1] - *a1;
  v7 = (unint64_t)(v5 - *a1) >> 5;
  if (2 * (int)v7 <= (v6 >> 5) + 1)
    v8 = (v6 >> 5) + 1;
  else
    v8 = 2 * v7;
  if (v7 >= 0x7FFFFFFF)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = v8;
  v23 = v4;
  if ((_DWORD)v9)
  {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v9);
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = 0;
  v14 = &v10[v6 & 0x1FFFFFFFE0];
  __p = v10;
  v20 = v14;
  v22 = &v10[32 * v12];
  do
  {
    v15 = &v14[v13];
    *v15 = 0;
    *((_DWORD *)v15 + 1) = 0;
    v13 += 8;
  }
  while (v13 != 32);
  for (i = 0; i != 32; i += 8)
    *(_QWORD *)&v14[i] = *(_QWORD *)(a2 + i);
  v21 = v14 + 32;
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(a1, &__p);
  v17 = a1[1];
  if (v21 != v20)
    v21 += (v20 - v21 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v17;
}

void sub_22A348C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22A348DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A349378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A3496A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3498AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34996C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t OABTable2DArray<OABTableCell>::~OABTable2DArray(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = v2 - 24;
      v6 = 24 * v4;
      do
      {

        v6 -= 24;
      }
      while (v6);
    }
    MEMORY[0x22E2DD3F0](v3, 0x1080C80F1FA62F8);
  }
  return a1;
}

void sub_22A349CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A349DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A349F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34A224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34A3F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34A560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34A920(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = v1;

  _Unwind_Resume(a1);
}

void sub_22A34ADB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34AE58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34B0F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34B1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34B30C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34B41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34B488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34B5D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34B678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34B74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A34B8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34B988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34BBC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34BC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A34C230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34D410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34D940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A34DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A34DD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34DE20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34E070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34E0FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34E224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34E34C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34E430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34E528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34E5A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34E65C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34E760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A34E824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34E924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A34EBC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34EC84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34F0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34F250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A34F3C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A34FAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A34FEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3500D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A350454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3504C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3506C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A350800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A350A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A350B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A350E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A351028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3515A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A351A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A351AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A351C90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A351CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A351DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A352060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35221C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A35265C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A352918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35304C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3533C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3534C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A353790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35385C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3538FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A353AF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A353C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35406C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A354424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A354640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A354818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A354950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A354AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A354C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A354D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A354E50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_22A355000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3550F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id fontCollectionEnumMap(void)
{
  if (fontCollectionEnumMap(void)::once != -1)
    dispatch_once(&fontCollectionEnumMap(void)::once, &__block_literal_global_56);
  return (id)fontCollectionEnumMap(void)::theMap;
}

id baseFontEnumMap(void)
{
  if (baseFontEnumMap(void)::once != -1)
    dispatch_once(&baseFontEnumMap(void)::once, &__block_literal_global_78_0);
  return (id)baseFontEnumMap(void)::theMap;
}

unint64_t OADSchemeFontReference::schemeFontReferenceWithString(OADSchemeFontReference *this, NSString *a2)
{
  OADSchemeFontReference *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = this;
  if (-[OADSchemeFontReference length](v2, "length") == 6
    && -[OADSchemeFontReference characterAtIndex:](v2, "characterAtIndex:", 0) == 43
    && -[OADSchemeFontReference characterAtIndex:](v2, "characterAtIndex:", 3) == 45)
  {
    -[OADSchemeFontReference substringWithRange:](v2, "substringWithRange:", 1, 2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    fontCollectionEnumMap();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "valueForString:", v3);

    -[OADSchemeFontReference substringWithRange:](v2, "substringWithRange:", 4, 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    baseFontEnumMap();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "valueForString:", v6);

    v9 = 0xFFFFFFFF00000000;
    v10 = 0xFFFFFFFFLL;
    if (v5 != -130883970 && v8 != -130883970)
    {
      v9 = v8 << 32;
      v10 = v5;
    }
  }
  else
  {
    v9 = 0xFFFFFFFF00000000;
    v10 = 0xFFFFFFFFLL;
  }

  return v10 | v9;
}

void sub_22A35533C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A355400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A355490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3555C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSString *OADAbsoluteFontNameWithPossiblyRelativeFontNameAndFontScheme(NSString *a1, OADFontScheme *a2)
{
  NSString *v3;
  NSString *v4;
  OADFontScheme *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  NSString *v9;

  v3 = a1;
  v5 = a2;
  if (!v5
    || (v6 = OADSchemeFontReference::schemeFontReferenceWithString((OADSchemeFontReference *)v3, v4), (_DWORD)v6 == -1)
    || (v7 = HIDWORD(v6), HIDWORD(v6) == -1))
  {
    v9 = v3;
  }
  else
  {
    -[OADFontScheme fontForId:](v5, "fontForId:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "baseFontForId:", v7);
    v9 = (NSString *)objc_claimAutoreleasedReturnValue();

  }
  return v9;
}

void sub_22A3556B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL21fontCollectionEnumMapv_block_invoke()
{
  unsigned __int8 v0;
  TCEnumerationMap *v1;
  void *v2;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZZL21fontCollectionEnumMapvEUb_E14theStructArray);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_ZGVZZL21fontCollectionEnumMapvEUb_E14theStructArray))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_15, 0, &dword_22A0CC000);
    __cxa_guard_release(&_ZGVZZL21fontCollectionEnumMapvEUb_E14theStructArray);
  }
  v1 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &_ZZZL21fontCollectionEnumMapvEUb_E14theStructArray, 2, 1);
  v2 = (void *)fontCollectionEnumMap(void)::theMap;
  fontCollectionEnumMap(void)::theMap = (uint64_t)v1;

}

void ___ZL15baseFontEnumMapv_block_invoke()
{
  unsigned __int8 v0;
  TCEnumerationMap *v1;
  void *v2;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZZL15baseFontEnumMapvEUb0_E14theStructArray);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_ZGVZZL15baseFontEnumMapvEUb0_E14theStructArray))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_85, 0, &dword_22A0CC000);
    __cxa_guard_release(&_ZGVZZL15baseFontEnumMapvEUb0_E14theStructArray);
  }
  v1 = -[TCEnumerationMap initWithStructs:count:caseSensitive:]([TCEnumerationMap alloc], "initWithStructs:count:caseSensitive:", &_ZZZL15baseFontEnumMapvEUb0_E14theStructArray, 3, 1);
  v2 = (void *)baseFontEnumMap(void)::theMap;
  baseFontEnumMap(void)::theMap = (uint64_t)v1;

}

void __cxx_global_array_dtor_85()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void sub_22A3559D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A355AF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3562C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A35649C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3567A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A356954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3569E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A356AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A356BDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A356C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A357208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3574B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_22A357650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A35776C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3579E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A357B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A357EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A357FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A358388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A358400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3584A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35872C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3588C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3589F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A358AA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A358B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A358BBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A358C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A358C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A358DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A358E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A358F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3590BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3591D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35A114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35A514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35A6EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35A818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35A8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A35A9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A35B000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35B0B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35B218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A35B2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35B400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A35B558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35B6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A35B814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35B984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A35BAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A35BBCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35BC38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35BE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35BF38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35C1A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A35C384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35C4DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35C570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35C718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35C7F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35C924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A35CA58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35CC78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35CEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35D098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35D240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35D39C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35D4B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35D6B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35D72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A35D794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35D968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35DA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35DBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35E59C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A35EDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A35F0B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35F158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35F210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35F2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A35F448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A35F5C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35F684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A35F8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A35FD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A35FDE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A35FF6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3600D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3602F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A360488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A360520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A3605F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_22A360774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A360858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36090C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A360A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A360B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A360BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A360CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A360F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A361164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3611D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3614A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A361580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A361690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3619BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1080C409938AC02);
  _Unwind_Resume(a1);
}

uint64_t OADTFTemplateMatrix<OADTableCell * {__strong}>::operator[](uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (int)a2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OADTFTemplateMatrix<OADTableCell *>::operator[](OADTMatrixPos) [E = OADTableCell *]");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 36, 0, "Row index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (a2 < 0 || (v6 = *(_DWORD *)(a1 + 4), v6 <= SHIDWORD(a2)))
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OADTFTemplateMatrix<OADTableCell *>::operator[](OADTMatrixPos) [E = OADTableCell *]");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 37, 0, "Column index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    v6 = *(_DWORD *)(a1 + 4);
  }
  return *(_QWORD *)(a1 + 8) + 8 * (HIDWORD(a2) + v6 * (int)a2);
}

void sub_22A361B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A361CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t OADTFTemplateMatrix<OADTablePartStyle * {__strong}>::operator[](uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (int)a2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OADTFTemplateMatrix<OADTablePartStyle *>::operator[](OADTMatrixPos) [E = OADTablePartStyle *]");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 36, 0, "Row index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (a2 < 0 || (v6 = *(_DWORD *)(a1 + 4), v6 <= SHIDWORD(a2)))
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OADTFTemplateMatrix<OADTablePartStyle *>::operator[](OADTMatrixPos) [E = OADTablePartStyle *]");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 37, 0, "Column index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    v6 = *(_DWORD *)(a1 + 4);
  }
  return *(_QWORD *)(a1 + 8) + 8 * (HIDWORD(a2) + v6 * (int)a2);
}

void sub_22A361E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3622C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1080C409938AC02);
  _Unwind_Resume(a1);
}

uint64_t OADTFTemplateMatrix<OADStroke * {__strong}>::operator[](uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (int)a2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OADTFTemplateMatrix<OADStroke *>::operator[](OADTMatrixPos) [E = OADStroke *]");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 36, 0, "Row index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (a2 < 0 || (v6 = *(_DWORD *)(a1 + 4), v6 <= SHIDWORD(a2)))
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OADTFTemplateMatrix<OADStroke *>::operator[](OADTMatrixPos) [E = OADStroke *]");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 37, 0, "Column index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    v6 = *(_DWORD *)(a1 + 4);
  }
  return *(_QWORD *)(a1 + 8) + 8 * (HIDWORD(a2) + v6 * (int)a2);
}

void sub_22A362598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A362618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36275C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A362948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1080C409938AC02);
  _Unwind_Resume(a1);
}

void sub_22A362A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{

  _Unwind_Resume(a1);
}

void sub_22A3632E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3634E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3635D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A3639B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A363C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A363E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v16;

  _Unwind_Resume(a1);
}

void sub_22A363F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A363FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3641D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A3642B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3643DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A36469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A364A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A364AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A364C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v12;

  _Unwind_Resume(a1);
}

void sub_22A364E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *OADTMatrixPos::OADTMatrixPos(_DWORD *a1, int a2, int a3, unsigned int a4)
{
  int v5;
  int v6;
  void *v7;
  void *v8;

  if (a4)
    v5 = a3;
  else
    v5 = a2;
  if (a4)
    v6 = a2;
  else
    v6 = a3;
  *a1 = v5;
  a1[1] = v6;
  if (a4 >= 2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "OADTMatrixPos::OADTMatrixPos(SInt32, SInt32, OADTDir)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTable.h");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 190, 0, "Unexpected matrix direction");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  return a1;
}

void sub_22A364F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

int *OADTFTemplateMatrix<OADTableCell * {__strong}>::OADTFTemplateMatrix(int *a1, int a2, int a3, void *a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a4;
  *a1 = a2;
  a1[1] = a3;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  std::vector<OADTableCell * {__strong}>::resize((uint64_t)(a1 + 2), a3 * a2);
  if (a1[1] * *a1 >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      objc_storeStrong((id *)(*((_QWORD *)a1 + 1) + v9), a4);
      ++v10;
      v9 += 8;
    }
    while (v10 < a1[1] * (uint64_t)*a1);
  }

  return a1;
}

void sub_22A365044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void std::vector<OADTableCell * {__strong}>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != v5)
      {
        v6 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<OADTableCell * {__strong}>::__append((char **)a1, a2 - v4);
  }
}

void std::vector<OADTableCell * {__strong}>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    v24 = v15;
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    std::__split_buffer<OADTableCell * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
}

uint64_t std::__split_buffer<OADTableCell * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

int *OADTFTemplateMatrix<OADTablePartStyle * {__strong}>::OADTFTemplateMatrix(int *a1, int a2, int a3, void *a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a4;
  *a1 = a2;
  a1[1] = a3;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  std::vector<OADTableCell * {__strong}>::resize((uint64_t)(a1 + 2), a3 * a2);
  if (a1[1] * *a1 >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      objc_storeStrong((id *)(*((_QWORD *)a1 + 1) + v9), a4);
      ++v10;
      v9 += 8;
    }
    while (v10 < a1[1] * (uint64_t)*a1);
  }

  return a1;
}

void sub_22A3652F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

int *OADTFTemplateMatrix<OADStroke * {__strong}>::OADTFTemplateMatrix(int *a1, int a2, int a3, void *a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a4;
  *a1 = a2;
  a1[1] = a3;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  std::vector<OADTableCell * {__strong}>::resize((uint64_t)(a1 + 2), a3 * a2);
  if (a1[1] * *a1 >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      objc_storeStrong((id *)(*((_QWORD *)a1 + 1) + v9), a4);
      ++v10;
      v9 += 8;
    }
    while (v10 < a1[1] * (uint64_t)*a1);
  }

  return a1;
}

void sub_22A3653C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_22A365464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A365574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36561C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3656A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A365820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3658D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A365960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3659D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A365A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A365BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A365D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A365E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A366030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3660B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3662C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A36643C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A366DE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3675EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3677A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A367834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36792C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A367A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A367B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A367C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A367DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A367E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A367F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3682A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3684BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368578(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22A3685C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A368738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3687DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3688B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36897C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3689E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368A44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A368CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A368D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A368F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A369010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3690F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36920C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3692C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A369424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v14;

  _Unwind_Resume(a1);
}

void sub_22A369480()
{
  void *v0;

  JUMPOUT(0x22A369464);
}

void sub_22A36948C()
{
  JUMPOUT(0x22A369464);
}

void sub_22A369494()
{
  JUMPOUT(0x22A369468);
}

void sub_22A36995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,void *a48)
{
  uint64_t v48;
  void *v49;
  void *v50;

  v49 = *(void **)(v48 - 144);
  v50 = *(void **)(v48 - 136);

  _Unwind_Resume(a1);
}

void sub_22A369EC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = v1;

  _Unwind_Resume(a1);
}

void sub_22A36A748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_22A36AAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v14;

  _Unwind_Resume(a1);
}

void sub_22A36ABC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A36AD28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A36AEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36AFB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36B108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A36B1E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36B260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36B2F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A36B3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A36B474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36B4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A36B95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_57()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_64_0()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

id OAVReadLengthArray(NSString *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  NSString *v5;
  unint64_t i;
  void *v7;
  int v8;
  uint64_t j;
  void *v10;
  int v11;
  NSString *v12;
  int v13;
  void *v14;
  NSString *v16;
  id v17;
  double v18;

  v16 = a1;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17A8]), "initWithString:", v16);
  if (!OAVReadLengthArray(NSString *)::startOfRealNumberCharSet)
  {
    objc_msgSend(MEMORY[0x24BDD14A8], "characterSetWithCharactersInString:", CFSTR(".+-0123456789"));
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)OAVReadLengthArray(NSString *)::startOfRealNumberCharSet;
    OAVReadLengthArray(NSString *)::startOfRealNumberCharSet = v3;

  }
  objc_msgSend(v2, "scanUpToCharactersFromSet:intoString:");
  while ((objc_msgSend(v2, "isAtEnd") & 1) == 0)
  {
    v18 = 0.0;
    if ((objc_msgSend(v2, "scanDouble:", &v18) & 1) == 0)
      break;
    v17 = 0;
    objc_msgSend(v2, "scanUpToCharactersFromSet:intoString:", OAVReadLengthArray(NSString *)::startOfRealNumberCharSet, &v17);
    v5 = (NSString *)v17;
    for (i = 0; i < -[NSString length](v5, "length"); ++i)
    {
      objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "characterIsMember:", -[NSString characterAtIndex:](v5, "characterAtIndex:", i));

      if (!v8)
        break;
    }
    for (j = 0; i + j < -[NSString length](v5, "length"); ++j)
    {
      objc_msgSend(MEMORY[0x24BDD14A8], "letterCharacterSet");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "characterIsMember:", -[NSString characterAtIndex:](v5, "characterAtIndex:", i + j));

      if (!v11)
        break;
    }
    if (j && (i + j < -[NSString length](v5, "length") || objc_msgSend(v2, "isAtEnd")))
    {
      -[NSString substringWithRange:](v5, "substringWithRange:", i, j);
      v12 = (NSString *)objc_claimAutoreleasedReturnValue();

      v13 = CXUnitWithName(v12);
      v18 = CXUnitToPoint(v13) * v18;
      v5 = v12;
    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v18);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "addObject:", v14);

  }
  return v1;
}

void sub_22A36BD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A36BE80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36BFBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36C2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A36C388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36C4BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36C550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36C6C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36C76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36CB14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36CE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A36CF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A36D04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A36D0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A36D600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36D7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A36D8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A36DDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36DE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36DF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36E058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36E2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36E480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A36E564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A36E680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36E808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A36E934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36EB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A36EC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A36EE50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36EF7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A36F0D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36F370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A36F670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A36F9C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A36FB30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A36FD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double ODIRegularPolygonBounds(unint64_t a1, float a2, float a3)
{
  float v4;
  unint64_t v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  float v12;
  __float2 v13;
  float v14;

  v4 = -a2;
  if (a1)
  {
    LODWORD(v6) = 0;
    v7 = 6.28318531 / (double)a1;
    v8 = a2;
    v9 = a2;
    v10 = a3 * 3.14159265 / 180.0;
    v11 = -a2;
    do
    {
      v12 = v10 + (double)v6 * v7;
      v13 = __sincosf_stret(v12);
      v14 = v13.__sinval * a2;
      if (v8 >= (float)(v13.__cosval * a2))
        v8 = v13.__cosval * a2;
      if (v4 < (float)(v13.__cosval * a2))
        v4 = v13.__cosval * a2;
      if (v9 >= v14)
        v9 = v13.__sinval * a2;
      if (v11 < v14)
        v11 = v13.__sinval * a2;
      v6 = (v6 + 1);
    }
    while (v6 < a1);
  }
  else
  {
    return a2;
  }
  return v8;
}

void sub_22A370074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A370304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A37040C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37050C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A370550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3705C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A370660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3706F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A370794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A370A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A370B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A370C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_22A370DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A370E64()
{
  JUMPOUT(0x22A370E4CLL);
}

void sub_22A370F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A371050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A371160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A3712D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A371430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A371538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A371650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3717CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3718F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A371948()
{
  JUMPOUT(0x22A371938);
}

void sub_22A371A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A371AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A371BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A371C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A371CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3723C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3728C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A372A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A372DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A372F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37314C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3731F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A373628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_22A373920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A373CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_22A373D30()
{
  void *v0;

  JUMPOUT(0x22A373D14);
}

void sub_22A373D3C()
{
  JUMPOUT(0x22A373D14);
}

void sub_22A373D44()
{
  JUMPOUT(0x22A373D18);
}

void sub_22A373EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A374028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3740E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3741F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3742E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A374634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v11;

  _Unwind_Resume(a1);
}

void sub_22A374768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A374A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A374C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A374CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A374E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A375190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_22A3752CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3753B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37548C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A375520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A37567C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A37571C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A375810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A37595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A375A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A375C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A376064(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *exc_buf, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  objc_begin_catch(a1);
  if (a2 == 2)
  {

    if (TSUDefaultCat_init_token != -1)
      dispatch_once(&TSUDefaultCat_init_token, &__block_literal_global_67);
    objc_end_catch();
    JUMPOUT(0x22A37601CLL);
  }
  objc_exception_rethrow();
}

void sub_22A3760E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_22A37644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A376500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3766B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3767BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37681C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A376924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3772CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{

  _Unwind_Resume(a1);
}

void sub_22A37755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A37763C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A377BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A377D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *std::vector<ODIHRange,ChAllocator<ODIHRange>>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  int v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = (uint64_t *)__src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = (unint64_t)&__src[-*(_QWORD *)a1];
    v14 = (unint64_t)&v6[-*(_QWORD *)a1] >> 3;
    v15 = (v7 - *(_QWORD *)a1) >> 3;
    if (2 * (int)v15 <= (v14 + 1))
      v16 = v14 + 1;
    else
      v16 = 2 * v15;
    if (v15 >= 0x7FFFFFFF)
      v17 = 0xFFFFFFFFLL;
    else
      v17 = v16;
    v30 = a1 + 16;
    if ((_DWORD)v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 16, v17);
      v20 = v19;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v21 = &v18[8 * (v13 >> 3)];
    __p = v18;
    v27 = v21;
    v28 = v21;
    v29 = &v18[8 * v20];
    if ((v13 >> 3) == v20)
    {
      if (v20)
      {
        v21 -= (4 * v20 + 4) & 0x7FFFFFFF8;
        v27 = v21;
      }
      else
      {
        if ((v13 >> 2) <= 1)
          v22 = 1;
        else
          v22 = (v13 >> 2);
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v8, v22);
        v21 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v21;
        v29 = &v23[8 * v24];
        if (v18)
          operator delete(v18);
      }
    }
    *(_QWORD *)v21 = *v3;
    v28 = v21 + 8;
    v4 = std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += *(_QWORD *)(a1 + 8) > (unint64_t)v3;
    *v4 = *v3;
  }
  return v4;
}

void sub_22A377F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  result = (uint64_t *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = (uint64_t *)a2[1];
    do
    {
      v8 = *--v7;
      *--v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      v11 = *a3++;
      *v10++ = v11;
    }
    while (a3 != v9);
    v6 = (uint64_t *)a2[1];
  }
  a2[2] = v10;
  v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void sub_22A3781B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A378254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A378530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A378734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A378850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3788D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A378988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A378A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A378B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_22A378C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A378DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A378E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A378EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A379048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A37A19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A37A278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37A420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37A590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A37A6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A37A84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A37A934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A37AC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A37ADC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A37AEE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37B01C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37B108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37B1D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37B2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37B398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37B488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37B550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A37B6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A37B7E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A37B9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A37BABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37BB90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37BCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A37BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A37BE44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37BFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A37C1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A37C28C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A37C3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A37C688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A37C8E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A37CBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A37CD38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37CEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A37CFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A37D09C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37D3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A37D59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A37D6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A37D848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_22A37D944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A37DA00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37DB6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A37E01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

OADPointTextSpacing *OADTextSpacingWithCachedSpacing(int a1)
{
  OADPercentTextSpacing *v2;
  double v3;
  OADPointTextSpacing *v4;

  if (a1 < 0)
  {
    v4 = -[OADPointTextSpacing initWithPoints:]([OADPointTextSpacing alloc], "initWithPoints:", (int)(float)((float)-a1 * 0.125));
  }
  else
  {
    v2 = [OADPercentTextSpacing alloc];
    *(float *)&v3 = (float)a1;
    v4 = -[OADPercentTextSpacing initWithPercent:](v2, "initWithPercent:", v3);
  }
  return v4;
}

void sub_22A37E228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A37E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_22A37E864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A37E978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A37EA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void EshAlignRule::EshAlignRule(EshAlignRule *this)
{
  _QWORD *v1;

  EshAtom::EshAtom(this, 0xF013u, 0);
  *v1 = &off_24F39E170;
  v1[7] = 0;
  v1[8] = 0;
  v1[6] = 0;
  *(_QWORD *)((char *)v1 + 28) = 0;
  *(_QWORD *)((char *)v1 + 33) = 0;
}

uint64_t EshAlignRule::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1);
}

void EshAlignRule::~EshAlignRule(EshAlignRule *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F39E170;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24F39E170;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

EshObject *EshObject::setType(EshObject *this, unsigned __int16 a2)
{
  this->var1 = a2;
  return this;
}

uint64_t EshObject::getNumChildren(EshObject *this)
{
  return 0;
}

void EshObject::getChildType(EshObject *this)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = 1005;
}

void EshObject::getChildVersion(EshObject *this)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = 1005;
}

void EshObject::getChildInstance(EshObject *this)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = 1005;
}

uint64_t EshRecord::getChildHeader(EshRecord *this)
{
  return 0;
}

uint64_t EshAtom::hasUnreadBinaryData(EshAtom *this)
{
  return 0;
}

uint64_t EshAtom::operator=(uint64_t a1, uint64_t a2)
{
  EshRecord::operator=(a1, a2);
  return a1;
}

void EshAtom::~EshAtom(EshAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshBlipT<EshBitmapBlipInfo>::~EshBlipT(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24F39E440;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
}

{
  *(_QWORD *)a1 = &off_24F39E440;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
  JUMPOUT(0x22E2DD408);
}

uint64_t EshBlip::getBlipType(EshBlip *this)
{
  return EshRecord::getRecordType((EshRecord *)this) - 61464;
}

void EshClientDataModelVisitor::~EshClientDataModelVisitor(EshClientDataModelVisitor *this)
{
  *(_QWORD *)this = &off_24F39E770;
}

{
  *(_QWORD *)this = &off_24F39E770;
  JUMPOUT(0x22E2DD408);
}

void EshColor::EshColor(EshColor *this, const EshColor *a2)
{
  unsigned __int16 var1;

  this->var0.var0 = a2->var0.var0;
  switch(a2->var0.var0)
  {
    case 0:
    case 2:
    case 4:
      var1 = a2->var0.var1.var1;
      this->var0.var1.var0.var2 = a2->var0.var1.var0.var2;
      goto LABEL_6;
    case 1:
    case 8:
      var1 = a2->var0.var1.var1;
LABEL_6:
      this->var0.var1.var1 = var1;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    default:
      if ((a2->var0.var0 - 33) < 2)
        this->var0.var1 = a2->var0.var1;
      break;
  }
}

uint64_t EshColor::RGB::create(uint64_t this, char a2, char a3, _BYTE *a4, RGB *a5)
{
  *a4 = this;
  a4[1] = a2;
  a4[2] = a3;
  return this;
}

uint64_t EshColorScheme::getHostSchemeColor(EshColorScheme *this)
{
  uint64_t v1;
  _DWORD *exception;

  v1 = *(_QWORD *)this;
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7014;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t EshColorScheme::getSystemSchemeColor(uint64_t a1)
{
  uint64_t v1;
  _DWORD *exception;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7014;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t *EshContainer::insertChild(EshContainer *this, EshObject *a2, unsigned int a3)
{
  void *v6;
  EshHeader *v7;
  unsigned __int16 v8;
  EshHeader *v10;

  if (EshObject::isEscher(a2))
  {
    v7 = (EshHeader *)operator new(0x10uLL);
    EshHeader::operator=((uint64_t)v7, (uint64_t)v6 + 12);
  }
  else
  {
    v7 = (EshHeader *)operator new(0x10uLL);
    v8 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
    EshHeader::EshHeader(v7, 0, 0, v8, 0, 0);
  }
  v10 = v7;
  return std::vector<EshHeader *,ChAllocator<EshHeader *>>::insert((uint64_t)this + 32, (char *)(*((_QWORD *)this + 4) + 8 * a3), (uint64_t *)&v10);
}

void sub_22A37F048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

EshContainer *EshContainer::operator=(EshContainer *a1, uint64_t a2)
{
  uint64_t v4;
  const EshHeader *v5;

  EshContainer::removeChildren((uint64_t)a1);
  EshRecord::operator=((uint64_t)a1, a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
  {
    v4 = 0;
    do
    {
      v5 = (const EshHeader *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, v4);
      EshContainer::addChild(a1, v5);
      v4 = (v4 + 1);
    }
    while (v4 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2));
  }
  return a1;
}

uint64_t *std::vector<EshHeader *,ChAllocator<EshHeader *>>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  int v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = (uint64_t *)__src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = (unint64_t)&__src[-*(_QWORD *)a1];
    v14 = (unint64_t)&v6[-*(_QWORD *)a1] >> 3;
    v15 = (v7 - *(_QWORD *)a1) >> 3;
    if (2 * (int)v15 <= (v14 + 1))
      v16 = v14 + 1;
    else
      v16 = 2 * v15;
    if (v15 >= 0x7FFFFFFF)
      v17 = 0xFFFFFFFFLL;
    else
      v17 = v16;
    v30 = a1 + 16;
    if ((_DWORD)v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 16, v17);
      v20 = v19;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v21 = &v18[8 * (v13 >> 3)];
    __p = v18;
    v27 = v21;
    v28 = v21;
    v29 = &v18[8 * v20];
    if ((v13 >> 3) == v20)
    {
      if (v20)
      {
        v21 -= (4 * v20 + 4) & 0x7FFFFFFF8;
        v27 = v21;
      }
      else
      {
        if ((v13 >> 2) <= 1)
          v22 = 1;
        else
          v22 = (v13 >> 2);
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v8, v22);
        v21 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v21;
        v29 = &v23[8 * v24];
        if (v18)
          operator delete(v18);
      }
    }
    *(_QWORD *)v21 = *v3;
    v28 = v21 + 8;
    v4 = std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += *(_QWORD *)(a1 + 8) > (unint64_t)v3;
    *v4 = *v3;
  }
  return v4;
}

void sub_22A37F30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EshDeletedPspl::EshDeletedPspl(EshDeletedPspl *this)
{
  uint64_t v1;

  EshAtom::EshAtom(this, 0xF11Du, 0);
  *(_QWORD *)v1 = &off_24F39EA80;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 32) = 0;
}

uint64_t EshDeletedPspl::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 104))(v3, a1);
}

void EshDeletedPspl::~EshDeletedPspl(EshDeletedPspl *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshBlipT<EshDibBlipInfo>::~EshBlipT(EshBlip *a1)
{
  EshDibBlipInfo *v2;

  a1->var0 = (void **)&off_24F39ED38;
  v2 = (EshDibBlipInfo *)&a1[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&a1[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(a1);
}

{
  EshDibBlipInfo *v2;

  a1->var0 = (void **)&off_24F39ED38;
  v2 = (EshDibBlipInfo *)&a1[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&a1[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(a1);
  JUMPOUT(0x22E2DD408);
}

uint64_t EshGeometryProperties::setSimpleProperty(EshGeometryProperties *this, unsigned int a2, int a3)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 0x140u:
      *((_DWORD *)this + 3) = a3;
      goto LABEL_3;
    case 0x141u:
      *((_DWORD *)this + 4) = a3;
      goto LABEL_3;
    case 0x142u:
      *((_DWORD *)this + 5) = a3;
      goto LABEL_3;
    case 0x143u:
      *((_DWORD *)this + 6) = a3;
      goto LABEL_3;
    case 0x144u:
      *((_DWORD *)this + 34) = a3;
      goto LABEL_3;
    case 0x147u:
    case 0x148u:
    case 0x149u:
    case 0x14Au:
    case 0x14Bu:
    case 0x14Cu:
    case 0x14Du:
    case 0x14Eu:
    case 0x14Fu:
    case 0x150u:
      *((_DWORD *)this + a2 - 315) = a3;
      goto LABEL_3;
    case 0x153u:
      *((_DWORD *)this + 32) = a3;
      goto LABEL_3;
    case 0x154u:
      *((_DWORD *)this + 33) = a3;
LABEL_3:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t EshGeometryProperties::setComplexProperty(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = 0;
  switch(a2)
  {
    case 337:
      v4 = a1 + 11;
      goto LABEL_11;
    case 338:
      v4 = a1 + 12;
      goto LABEL_11;
    case 339:
    case 340:
      return v3;
    case 341:
      v4 = a1 + 13;
      goto LABEL_11;
    case 342:
      v4 = a1 + 14;
      goto LABEL_11;
    case 343:
      v4 = a1 + 15;
      goto LABEL_11;
    default:
      if (a2 == 326)
      {
        v4 = a1 + 5;
      }
      else
      {
        if (a2 != 325)
          return v3;
        v4 = a1 + 4;
      }
LABEL_11:
      *v4 = a3;
      return 1;
  }
}

uint64_t EshGeometryProperties::setFlag(EshGeometryProperties *this, int a2, char a3)
{
  uint64_t result;

  switch(a2)
  {
    case 378:
      *((_BYTE *)this + 140) = a3;
      goto LABEL_9;
    case 379:
      *((_BYTE *)this + 141) = a3;
      goto LABEL_9;
    case 380:
      *((_BYTE *)this + 142) = a3;
      goto LABEL_9;
    case 381:
      *((_BYTE *)this + 143) = a3;
      goto LABEL_9;
    case 382:
      *((_BYTE *)this + 144) = a3;
      goto LABEL_9;
    case 383:
      *((_BYTE *)this + 145) = a3;
LABEL_9:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
}

void std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::__append(void **a1, unsigned int a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (((unint64_t)(v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v7[2 * a2];
      do
      {
        *(_WORD *)v7 = 0;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v15);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = (v8 >> 3) + a2;
    v10 = (unint64_t)(v5 - (_BYTE *)*a1) >> 3;
    if (2 * (int)v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x7FFFFFFF)
      v11 = 0xFFFFFFFFLL;
    else
      v11 = v9;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    v16 = &v12[v8 & 0x7FFFFFFF8];
    v17 = &v16[8 * a2];
    v18 = v16;
    do
    {
      *(_WORD *)v18 = 0;
      *((_DWORD *)v18 + 1) = 0;
      v18 += 8;
    }
    while (v18 != v17);
    v19 = &v12[8 * v14];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v16 - 1) = v22;
        v16 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

BOOL EshHandleValuePair::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  return (_DWORD)v2 == (_DWORD)v3 && HIDWORD(v2) == HIDWORD(v3);
}

void EshBlipT<EshMetafileBlipInfo>::~EshBlipT(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24F39EEF8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 192));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
}

{
  *(_QWORD *)a1 = &off_24F39EEF8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 192));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
  JUMPOUT(0x22E2DD408);
}

EshOpt *EshOpt::operator=(EshOpt *a1, const EshOpt *a2)
{
  EshOpt::destroy(a1);
  EshOpt::copy((uint64_t **)a1, a2);
  return a1;
}

uint64_t **EshOpt::copy(uint64_t **this, const EshOpt *a2)
{
  uint64_t **v2;
  char *v3;
  char *v4;
  uint64_t **v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  int v10;
  int PropertyType;
  uint64_t **v12;
  CsString *v13;
  uint64_t *v14;
  CsData *v15;
  unsigned int v16;
  unsigned int *v17;

  v2 = (uint64_t **)((char *)a2 + 32);
  v3 = (char *)*((_QWORD *)a2 + 4);
  v4 = (char *)a2 + 40;
  if (v3 != (char *)a2 + 40)
  {
    v5 = this + 4;
    do
    {
      v6 = v3;
      v7 = (char *)*((_QWORD *)v3 + 1);
      v8 = v3;
      if (v7)
      {
        do
        {
          v3 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v3 = (char *)*((_QWORD *)v8 + 2);
          v9 = *(_QWORD *)v3 == (_QWORD)v8;
          v8 = v3;
        }
        while (!v9);
      }
      v10 = *((_DWORD *)v6 + 8);
      PropertyType = EshOpt::getPropertyType(v10);
      v16 = v10;
      v17 = &v16;
      v12 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v16, (uint64_t)&std::piecewise_construct, &v17);
      v13 = (CsString *)v12[5];
      v14 = v12[6];
      if (PropertyType > 9)
      {
        if (PropertyType == 10)
        {
          if (!v13)
            goto LABEL_19;
          v15 = (CsData *)(*((uint64_t (**)(uint64_t *))v13->var0 + 2))(v12[5]);
        }
        else
        {
          if (PropertyType != 11)
          {
LABEL_20:
            v15 = (CsData *)v12[5];
            goto LABEL_21;
          }
          if (!v13)
          {
LABEL_19:
            v15 = 0;
            goto LABEL_21;
          }
          v15 = (CsData *)operator new(0x10uLL);
          CsData::CsData(v15);
          CsData::operator=((const void **)v15, (const void **)&v13->var0);
        }
      }
      else
      {
        if (!PropertyType)
          goto LABEL_19;
        if (PropertyType != 9)
          goto LABEL_20;
        if (!v13)
          goto LABEL_19;
        v15 = (CsData *)operator new(0x18uLL);
        CsString::CsString((CsString *)v15);
        v15[1].var0 = 0;
        bzero(v15->var1, 2 * *(&v15[1].var0 + 1));
        CsString::append((CsString *)v15, v13);
      }
LABEL_21:
      v16 = v10;
      v17 = &v16;
      this = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v16, (uint64_t)&std::piecewise_construct, &v17);
      this[5] = (uint64_t *)v15;
      this[6] = v14;
    }
    while (v3 != v4);
  }
  return this;
}

void sub_22A37FA98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t EshOpt::deleteProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v5;

  EshOpt::deleteComplexPropertyValue(a1, a2);
  v5 = a2;
  return std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__erase_unique<unsigned int>(a1 + 32, &v5);
}

void *EshDataTablePropVal<unsigned char>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshDataTablePropVal<unsigned char>::operator==(a1, (uint64_t)result);
  return result;
}

BOOL EshDataTablePropVal<unsigned char>::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v5;
  int v6;
  int v7;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16))
    return 0;
  if (!v2)
    return 1;
  v5 = 0;
  do
  {
    v6 = *(unsigned __int8 *)EshDataTablePropVal<unsigned char>::operator[](a1, v5);
    v7 = *(unsigned __int8 *)EshDataTablePropVal<unsigned char>::operator[](a2, v5);
    result = v6 == v7;
    if (v6 != v7)
      break;
    ++v5;
  }
  while (v5 < *(_DWORD *)(a1 + 16));
  return result;
}

uint64_t EshDataTablePropVal<unsigned char>::operator[](uint64_t a1, unsigned int a2)
{
  _DWORD *exception;

  if (*(_DWORD *)(a1 + 16) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return *(_QWORD *)(a1 + 8) + a2;
}

uint64_t **std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void EshAsciiPropVal::~EshAsciiPropVal(EshAsciiPropVal *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24F39F288;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24F39F288;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  JUMPOUT(0x22E2DD408);
}

_DWORD *EshAsciiPropVal::clone(EshAsciiPropVal *this)
{
  _DWORD *v2;

  v2 = operator new(0x18uLL);
  v2[4] = 0;
  *(_QWORD *)v2 = &off_24F39F220;
  *((_QWORD *)v2 + 1) = 0;
  EshDataTablePropVal<char>::init((uint64_t)v2, *((_DWORD *)this + 4), *((_QWORD *)this + 1));
  return v2;
}

void sub_22A37FE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t EshAsciiPropVal::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
  else
    return 1;
}

void *EshDataTablePropVal<char>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshDataTablePropVal<unsigned char>::operator==(a1, (uint64_t)result);
  return result;
}

void *EshDataTablePropVal<char>::init(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void *result;
  uint64_t v7;

  *(_DWORD *)(a1 + 16) = a2;
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)MEMORY[0x22E2DD408](result, 0x1000C4077774924);
  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
  {
    result = operator new[](a2);
    v7 = 0;
    *(_QWORD *)(a1 + 8) = result;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v7) = *(_BYTE *)(a3 + v7);
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

_DWORD *EshRawPropVal::clone(EshRawPropVal *this)
{
  _DWORD *v2;

  v2 = operator new(0x18uLL);
  v2[4] = 0;
  *(_QWORD *)v2 = &off_24F39F2C0;
  *((_QWORD *)v2 + 1) = 0;
  EshDataTablePropVal<char>::init((uint64_t)v2, *((_DWORD *)this + 4), *((_QWORD *)this + 1));
  return v2;
}

void sub_22A37FFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *EshTablePropVal<float>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F378;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *EshTablePropVal<float>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39F310;
  v2[1] = 0;
  EshBasicTablePropVal<float>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A38009C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<float>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<float>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<float>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)(a1 + 8);
  std::vector<float,ChAllocator<float>>::reserve((void **)(a1 + 8), (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if (a1 != a2)
    std::vector<float,ChAllocator<float>>::__assign_with_size[abi:ne180100]<float *,float *>(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

void std::vector<float,ChAllocator<float>>::reserve(void **a1, unsigned int a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v3, a2);
    v7 = &v6[v5 & 0x3FFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::vector<float,ChAllocator<float>>::__assign_with_size[abi:ne180100]<float *,float *>(_QWORD *result, char *__src, char *a3, unsigned int a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  int v17;
  size_t v18;
  void **v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;

  v6 = __src;
  v7 = result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = (char *)*result;
  if (((v8 - *result) >> 2) >= a4)
  {
    v19 = (void **)(result + 1);
    v20 = (char *)result[1];
    v21 = (unint64_t)(v20 - v10) >> 2;
    if (v21 >= a4)
    {
      v18 = a3 - __src;
      if (a3 != __src)
        result = memmove((void *)*result, __src, v18);
    }
    else
    {
      v22 = &__src[4 * v21];
      if (((unint64_t)(v20 - v10) >> 2))
      {
        result = memmove((void *)*result, __src, 4 * ((unint64_t)(v20 - v10) >> 2));
        v20 = (char *)*v19;
      }
      v10 = v20;
      v23 = v20;
      if (v22 != a3)
      {
        v23 = v20;
        v24 = v20;
        do
        {
          v25 = *(_DWORD *)v22;
          v22 += 4;
          *(_DWORD *)v24 = v25;
          v24 += 4;
          v23 += 4;
        }
        while (v22 != a3);
      }
      v18 = v23 - v20;
    }
  }
  else
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v11 = v8 >> 2;
    v12 = 2 * v11;
    if (2 * (int)v11 <= a4)
      v12 = a4;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    result = std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v9, v13);
    v10 = (char *)result;
    *v7 = result;
    v7[2] = (char *)result + 4 * v14;
    v15 = (char *)result;
    if (v6 != a3)
    {
      v15 = (char *)result;
      v16 = result;
      do
      {
        v17 = *(_DWORD *)v6;
        v6 += 4;
        *v16++ = v17;
        v15 += 4;
      }
      while (v6 != a3);
    }
    v18 = v15 - (char *)result;
    v19 = (void **)(v7 + 1);
  }
  *v19 = &v10[v18];
  return result;
}

BOOL EshBasicTablePropVal<float>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  _BOOL8 result;
  BOOL v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if (((unint64_t)(v2 - v3) >> 2) != ((*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 2))
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 4;
  do
  {
    v6 = *v4++;
    result = *(float *)(v5 - 4) == v6;
    v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

_QWORD *EshTablePropVal<EshHandle>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F418;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *EshTablePropVal<EshHandle>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39F3B0;
  v2[1] = 0;
  EshBasicTablePropVal<EshHandle>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A380470(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshHandle>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<EshHandle>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<EshHandle>::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a1 + 8);
  std::vector<EshHandle,ChAllocator<EshHandle>>::reserve((uint64_t *)(a1 + 8), -252645135 * ((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
  if (a1 != a2)
    std::vector<EshHandle,ChAllocator<EshHandle>>::__assign_with_size[abi:ne180100]<EshHandle*,EshHandle*>(v4, *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), -252645135 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
  return a1;
}

void std::vector<EshHandle,ChAllocator<EshHandle>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (-252645135 * ((unint64_t)(v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xC3C3C3C4)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v5 = -252645135 * ((unint64_t)(a1[1] - *a1) >> 2);
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>(v3, a2);
    v8 = (char *)__p + 68 * v5;
    v9 = v8;
    v10 = (char *)__p + 68 * v6;
    std::vector<EshHandle,ChAllocator<EshHandle>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 68) % 0x44uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_22A380640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshHandle,ChAllocator<EshHandle>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = 0;
    v6 = v4;
    v7 = v2;
    v8 = *(_DWORD *)(v2 - 68);
    v2 -= 68;
    *(_DWORD *)(v4 - 68) = v8;
    v4 -= 68;
    do
    {
      v9 = v6 + v5;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 64) = *(_QWORD *)(v7 + v5 - 64);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(v7 + v5 - 56);
      v5 += 16;
    }
    while (v5 != 64);
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x3C3C3C3C3C3C3C4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(68 * a2);
}

_DWORD *std::vector<EshHandle,ChAllocator<EshHandle>>::__assign_with_size[abi:ne180100]<EshHandle*,EshHandle*>(void **a1, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *result;
  void *v19;

  v8 = (unint64_t)a1[2];
  v9 = *a1;
  if (-252645135 * ((v8 - (unint64_t)*a1) >> 2) < a4)
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xC3C3C3C3)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = -252645135 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x61E1E1E1)
      v12 = -1010580541;
    else
      v12 = v11;
    std::vector<EshHandle,ChAllocator<EshHandle>>::__vallocate[abi:ne180100](a1, v12);
    v13 = (uint64_t)a1;
    v14 = a2;
    v15 = a3;
    return (_DWORD *)std::vector<EshHandle,ChAllocator<EshHandle>>::__construct_at_end<EshHandle*,EshHandle*>(v13, v14, v15);
  }
  v16 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)v9) >> 2);
  if (v16 < a4)
  {
    v17 = &a2[17 * v16];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshHandle *,EshHandle *,EshHandle *,0>(a2, v17, v9);
    v13 = (uint64_t)a1;
    v14 = v17;
    v15 = a3;
    return (_DWORD *)std::vector<EshHandle,ChAllocator<EshHandle>>::__construct_at_end<EshHandle*,EshHandle*>(v13, v14, v15);
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshHandle *,EshHandle *,EshHandle *,0>(a2, a3, v9);
  a1[1] = v19;
  return result;
}

uint64_t std::vector<EshHandle,ChAllocator<EshHandle>>::__construct_at_end<EshHandle*,EshHandle*>(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = *(_DWORD **)(result + 8);
  while (a2 != a3)
  {
    v4 = 0;
    *v3 = *a2;
    do
    {
      v5 = &v3[v4];
      *(_QWORD *)(v5 + 3) = 0;
      *(_QWORD *)(v5 + 1) = 0;
      *(_QWORD *)(v5 + 1) = *(_QWORD *)&a2[v4 + 1];
      *(_QWORD *)(v5 + 3) = *(_QWORD *)&a2[v4 + 3];
      v4 += 4;
    }
    while (v4 != 16);
    a2 += 17;
    v3 += 17;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

char *std::vector<EshHandle,ChAllocator<EshHandle>>::__vallocate[abi:ne180100](_QWORD *a1, unsigned int a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xC3C3C3C4)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[68 * v4];
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshHandle *,EshHandle *,EshHandle *,0>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  uint64_t i;
  _QWORD *v4;

  if (result != a2)
  {
    do
    {
      *a3 = *result;
      for (i = 3; i != 19; i += 4)
      {
        v4 = &a3[i];
        *(v4 - 1) = *(_QWORD *)&result[i - 2];
        *v4 = *(_QWORD *)&result[i];
      }
      result += 17;
      a3 += 17;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

BOOL EshBasicTablePropVal<EshHandle>::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 **)(a1 + 16);
  v4 = *(unsigned __int8 **)(a2 + 8);
  if (-252645135 * ((unint64_t)(v3 - v2) >> 2) != -252645135
                                                                      * ((*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 2))
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = EshHandle::operator==(v2, v4);
    if (!result)
      break;
    v2 += 68;
    v4 += 68;
  }
  while (v2 != v3);
  return result;
}

BOOL EshHandle::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && EshHandleValuePair::operator==(a1 + 4, a2 + 4)
      && EshHandleValuePair::operator==(a1 + 20, a2 + 20)
      && EshHandleValuePair::operator==(a1 + 36, a2 + 36)
      && EshHandleValuePair::operator==(a1 + 4, a2 + 4);
}

_QWORD *EshTablePropVal<EshGradientStop>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F4B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *EshTablePropVal<EshGradientStop>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39F450;
  v2[1] = 0;
  EshBasicTablePropVal<EshGradientStop>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A380B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshGradientStop>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<EshGradientStop>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<EshGradientStop>::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a1 + 8);
  std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::reserve((uint64_t *)(a1 + 8), -1431655765 * ((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
  if (a1 != a2)
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__assign_with_size[abi:ne180100]<EshGradientStop*,EshGradientStop*>(v4, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), -1431655765 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
  return a1;
}

void std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (-1431655765 * ((unint64_t)(v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x55555556)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v5 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 2);
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>(v3, a2);
    v8 = (char *)__p + 12 * v5;
    v9 = v8;
    v10 = (char *)__p + 12 * v6;
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_22A380D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 12);
    v2 -= 12;
    *(_QWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

uint64_t std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__assign_with_size[abi:ne180100]<EshGradientStop*,EshGradientStop*>(void **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  unint64_t v8;
  void *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t result;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;

  v6 = a2;
  v8 = (unint64_t)a1[2];
  v9 = *a1;
  if (-1431655765 * ((v8 - (unint64_t)*a1) >> 2) < a4)
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x55555555)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = -1431655765 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x2AAAAAAA)
      v12 = 1431655765;
    else
      v12 = v11;
    result = (uint64_t)std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__vallocate[abi:ne180100](a1, v12);
    v14 = a1[1];
    while (v6 != a3)
    {
      *(_QWORD *)v14 = *(_QWORD *)v6;
      v14[2] = *(_DWORD *)(v6 + 8);
      v14 += 3;
      v6 += 12;
    }
LABEL_17:
    a1[1] = v14;
    return result;
  }
  v15 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)v9) >> 2);
  if (v15 < a4)
  {
    v16 = a2 + 12 * v15;
    result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshGradientStop *,EshGradientStop *,EshGradientStop *,0>(a2, v16, (uint64_t)v9);
    v14 = a1[1];
    if (v16 != a3)
    {
      v17 = a1[1];
      do
      {
        *(_QWORD *)v17 = *(_QWORD *)v16;
        v17[2] = *(_DWORD *)(v16 + 8);
        v14 += 3;
        v16 += 12;
        v17 += 3;
      }
      while (v16 != a3);
    }
    goto LABEL_17;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshGradientStop *,EshGradientStop *,EshGradientStop *,0>(a2, a3, (uint64_t)v9);
  a1[1] = v18;
  return result;
}

char *std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__vallocate[abi:ne180100](_QWORD *a1, unsigned int a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x55555556)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshGradientStop *,EshGradientStop *,EshGradientStop *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2)
    return a1;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)a1;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
    a3 += 12;
    a1 += 12;
  }
  while (a1 != a2);
  return a2;
}

BOOL EshBasicTablePropVal<EshGradientStop>::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 result;

  v2 = *(float **)(a1 + 8);
  v3 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if (-1431655765 * ((unint64_t)((char *)v3 - (char *)v2) >> 2) != -1431655765
                                                                                       * ((*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 2))
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = EshGradientStop::operator==(v2, v4);
    if (!result)
      break;
    v2 += 3;
    v4 += 3;
  }
  while (v2 != v3);
  return result;
}

BOOL EshGradientStop::operator==(float *a1, float *a2)
{
  return *(unsigned __int16 *)a1 == *(unsigned __int16 *)a2
      && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)
      && *((unsigned __int16 *)a1 + 2) == *((unsigned __int16 *)a2 + 2)
      && *((unsigned __int16 *)a1 + 3) == *((unsigned __int16 *)a2 + 3)
      && a1[2] == a2[2];
}

_QWORD *EshTablePropVal<int>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F558;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *EshTablePropVal<int>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39F4F0;
  v2[1] = 0;
  EshBasicTablePropVal<int>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A381188(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<int>::equals(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)EshBasicTablePropVal<int>::operator==(a1, (uint64_t)result);
  return result;
}

uint64_t EshBasicTablePropVal<int>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)(a1 + 8);
  std::vector<int,ChAllocator<int>>::reserve((void **)(a1 + 8), (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if (a1 != a2)
    std::vector<int,ChAllocator<int>>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

void std::vector<int,ChAllocator<int>>::reserve(void **a1, unsigned int a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v3, a2);
    v7 = &v6[v5 & 0x3FFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::vector<int,ChAllocator<int>>::__assign_with_size[abi:ne180100]<int *,int *>(_QWORD *result, char *__src, char *a3, unsigned int a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  int v17;
  size_t v18;
  void **v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;

  v6 = __src;
  v7 = result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = (char *)*result;
  if (((v8 - *result) >> 2) >= a4)
  {
    v19 = (void **)(result + 1);
    v20 = (char *)result[1];
    v21 = (unint64_t)(v20 - v10) >> 2;
    if (v21 >= a4)
    {
      v18 = a3 - __src;
      if (a3 != __src)
        result = memmove((void *)*result, __src, v18);
    }
    else
    {
      v22 = &__src[4 * v21];
      if (((unint64_t)(v20 - v10) >> 2))
      {
        result = memmove((void *)*result, __src, 4 * ((unint64_t)(v20 - v10) >> 2));
        v20 = (char *)*v19;
      }
      v10 = v20;
      v23 = v20;
      if (v22 != a3)
      {
        v23 = v20;
        v24 = v20;
        do
        {
          v25 = *(_DWORD *)v22;
          v22 += 4;
          *(_DWORD *)v24 = v25;
          v24 += 4;
          v23 += 4;
        }
        while (v22 != a3);
      }
      v18 = v23 - v20;
    }
  }
  else
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v11 = v8 >> 2;
    v12 = 2 * v11;
    if (2 * (int)v11 <= a4)
      v12 = a4;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    result = std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v9, v13);
    v10 = (char *)result;
    *v7 = result;
    v7[2] = (char *)result + 4 * v14;
    v15 = (char *)result;
    if (v6 != a3)
    {
      v15 = (char *)result;
      v16 = result;
      do
      {
        v17 = *(_DWORD *)v6;
        v6 += 4;
        *v16++ = v17;
        v15 += 4;
      }
      while (v6 != a3);
    }
    v18 = v15 - (char *)result;
    v19 = (void **)(v7 + 1);
  }
  *v19 = &v10[v18];
  return result;
}

BOOL EshBasicTablePropVal<int>::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v3 = a1 + 8;
  v2 = *(const void **)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 8;
  v5 = *(const void **)(a2 + 8);
  return (v4 >> 2) == ((*(_QWORD *)(v6 + 8) - (_QWORD)v5) >> 2) && memcmp(v2, v5, v4) == 0;
}

void EshRawAtom::EshRawAtom(EshRawAtom *this, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v3;

  EshAtom::EshAtom(this, a2, a3);
  *(_QWORD *)v3 = &off_24F39F590;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 32));
}

uint64_t EshRawAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 176))(v3, a1);
}

void EshRawAtom::~EshRawAtom(EshRawAtom *this)
{
  *(_QWORD *)this = &off_24F39F590;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
}

{
  *(_QWORD *)this = &off_24F39F590;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
  JUMPOUT(0x22E2DD408);
}

uint64_t EshRecord::setVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 24) = a2;
  return this;
}

uint64_t EshRecord::setInstance(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 20) = a2;
  return this;
}

uint64_t EshRecord::setRecordType(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 22) = a2;
  return this;
}

uint64_t EshRecord::getEndOffset(EshRecord *this)
{
  return (*((_DWORD *)this + 4) + *((_DWORD *)this + 3) + 8);
}

BOOL EshRecord::isEscherRecord(EshRecord *this)
{
  return (unsigned __int16)(*((_WORD *)this + 11) + 4096) < 0x123u;
}

uint64_t EshRecord::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    EshHeader::operator=(a1 + 12, a2 + 12);
  return a1;
}

void EshRectAtom::~EshRectAtom(EshRectAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshRegroupItems::EshRegroupItems(EshRegroupItems *this)
{
  _QWORD *v1;

  EshAtom::EshAtom(this, 0xF118u, 0);
  *v1 = &off_24F39F768;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
}

uint64_t EshRegroupItems::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 144))(v3, a1);
}

void EshRegroupItems::~EshRegroupItems(EshRegroupItems *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F39F768;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24F39F768;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void EshSelection::EshSelection(EshSelection *this)
{
  uint64_t v1;

  EshAtom::EshAtom(this, 0xF119u, 0);
  *(_QWORD *)v1 = &off_24F39F810;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 40) = 0;
}

uint64_t EshSelection::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 152))(v3, a1);
}

void EshSelection::~EshSelection(EshSelection *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F39F810;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24F39F810;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void EshBackground::resolveColor(EshBackground *this, CsColour *a2, EshColor *a3, const EshColorScheme *a4)
{
  EshFill *v8;
  int Red;
  EshFill *v10;
  EshContentProperties *v11;
  uint64_t Color2;
  EshColor *v13;
  int AdjustmentType;
  unsigned int Green;
  double v16;
  _DWORD *exception;

  v8 = (EshFill *)operator new(8uLL);
  LODWORD(v8->var0) = 255;
  if (a3->var0.var0 != 33)
  {
    EshContentBase::resolveColor(this, a2, a3, a4);
    goto LABEL_19;
  }
  Red = EshColor::getRed(a3);
  switch(Red)
  {
    case 240:
      v10 = (EshFill *)((char *)this + 304);
      if ((EshFill::isColorSet((EshFill *)((char *)this + 304)) & 1) == 0)
      {
LABEL_16:
        EshFill::getDefaultColor(v8, v13);
        goto LABEL_17;
      }
      break;
    case 245:
      if (!EshFill::isColor2Set((EshFill *)((char *)this + 304)))
        goto LABEL_18;
      Color2 = EshFill::getColor2((EshFill *)((char *)this + 304));
      goto LABEL_13;
    case 247:
      v10 = (EshFill *)((char *)this + 304);
      v11 = (EshContentProperties *)EshFill::isOnSet((EshFill *)((char *)this + 304));
      if ((_DWORD)v11)
      {
        if ((EshFill::getOn((EshFill *)((char *)this + 304)) & 1) == 0)
        {
LABEL_18:
          exception = __cxa_allocate_exception(4uLL);
          *exception = 1009;
        }
      }
      else if (!EshContentProperties::getDefaultAllowOverlap(v11))
      {
        goto LABEL_18;
      }
      if (!EshFill::isColorSet((EshFill *)((char *)this + 304)))
        goto LABEL_16;
      break;
    default:
      goto LABEL_18;
  }
  Color2 = EshFill::getColor(v10);
LABEL_13:
  EshColor::operator=((uint64_t)v8, Color2);
LABEL_17:
  (*(void (**)(EshBackground *, CsColour *, EshFill *, const EshColorScheme *))(*(_QWORD *)this + 112))(this, a2, v8, a4);
  AdjustmentType = EshColor::getAdjustmentType(a3);
  Green = EshColor::getGreen(a3);
  EshContentBase::adjustColour(a2, AdjustmentType, Green, v16);
LABEL_19:
  JUMPOUT(0x22E2DD408);
}

void sub_22A381D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

uint64_t EshBackground::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, a1);
}

void EshBackground::~EshBackground(EshBackground *this)
{
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x22E2DD408);
}

void EshFill::~EshFill(EshFill *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshBackgroundPropertiesImpl::isBWModeSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x304u);
}

uint64_t `non-virtual thunk to'EshBackgroundPropertiesImpl::isBWModeSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 1), 0x304u);
}

uint64_t EshBackgroundPropertiesImpl::getBWMode(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x304u);
}

uint64_t `non-virtual thunk to'EshBackgroundPropertiesImpl::getBWMode(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 1), 0x304u);
}

double EshBackgroundPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshBackgroundPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshBackgroundPropertiesImpl::isBWPureSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x305u);
}

uint64_t `non-virtual thunk to'EshBackgroundPropertiesImpl::isBWPureSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 1), 0x305u);
}

uint64_t EshBackgroundPropertiesImpl::getBWPure(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x305u);
}

uint64_t `non-virtual thunk to'EshBackgroundPropertiesImpl::getBWPure(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 1), 0x305u);
}

double EshBackgroundPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshBackgroundPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshBackgroundPropertiesImpl::isBWNormalSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x306u);
}

uint64_t `non-virtual thunk to'EshBackgroundPropertiesImpl::isBWNormalSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 1), 0x306u);
}

uint64_t EshBackgroundPropertiesImpl::getBWNormal(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x306u);
}

uint64_t `non-virtual thunk to'EshBackgroundPropertiesImpl::getBWNormal(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 1), 0x306u);
}

double EshBackgroundPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshBackgroundPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

void EshBackgroundPropertiesImpl::~EshBackgroundPropertiesImpl(EshBackgroundPropertiesImpl *this)
{
  JUMPOUT(0x22E2DD408);
}

void `non-virtual thunk to'EshBackgroundPropertiesImpl::~EshBackgroundPropertiesImpl(EshBackgroundPropertiesImpl *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshContentBase::copy(EshContentBase *this, const EshContentBase *a2)
{
  return EshContentData::operator=((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t EshContentData::operator=(uint64_t a1, uint64_t a2)
{
  EshOpt::operator=((EshOpt *)a1, (const EshOpt *)a2);
  EshOpt::operator=((EshOpt *)(a1 + 64), (const EshOpt *)(a2 + 64));
  EshOpt::operator=((EshOpt *)(a1 + 128), (const EshOpt *)(a2 + 128));
  EshAtom::operator=(a1 + 192, a2 + 192);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  return a1;
}

_WORD *EshContentBase::adjustColour(_WORD *result, int a2, unsigned int a3, double a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  int v8;
  int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  _DWORD *exception;

  switch(a2)
  {
    case 0:
      LOWORD(v4) = result[1];
      goto LABEL_10;
    case 1:
      LOWORD(a4) = result[1];
      *(double *)&v5 = (double)a3 * (double)*(unint64_t *)&a4 / 255.0;
      v4 = (int)*(double *)&v5;
      result[1] = (int)*(double *)&v5;
      LOWORD(v5) = result[2];
      *(double *)&v6 = (double)a3 * (double)v5 / 255.0;
      result[2] = (int)*(double *)&v6;
      LOWORD(v6) = result[3];
      v7 = (double)a3 * (double)v6 / 255.0;
      goto LABEL_5;
    case 2:
      v4 = (int)(255.0 - (double)a3 * (double)(255 - (unsigned __int16)result[1]) / 255.0);
      v8 = (int)(255.0 - (double)a3 * (double)(255 - (unsigned __int16)result[2]) / 255.0);
      result[1] = v4;
      result[2] = v8;
      v7 = 255.0 - (double)a3 * (double)(255 - (unsigned __int16)result[3]) / 255.0;
LABEL_5:
      v9 = (int)v7;
      goto LABEL_9;
    case 3:
      LOWORD(v4) = result[1] + a3;
      result[1] = v4;
      result[2] += a3;
      LOWORD(v9) = result[3] + a3;
      goto LABEL_9;
    case 4:
      LOWORD(v4) = result[1] - a3;
      result[1] = v4;
      result[2] -= a3;
      LOWORD(v9) = result[3] - a3;
      goto LABEL_9;
    case 5:
      LOWORD(v4) = a3 - result[1];
      result[1] = v4;
      result[2] = a3 - result[2];
      LOWORD(v9) = a3 - result[3];
LABEL_9:
      result[3] = v9;
LABEL_10:
      if ((unsigned __int16)v4 >= 0x100u)
        result[1] = 255;
      break;
    case 6:
      if ((unsigned __int16)result[1] >= a3)
        v10 = 255;
      else
        v10 = 0;
      result[1] = v10;
      if ((unsigned __int16)result[2] >= a3)
        v11 = 255;
      else
        v11 = 0;
      result[2] = v11;
      if ((unsigned __int16)result[3] >= a3)
        v12 = 255;
      else
        v12 = 0;
      result[3] = v12;
      break;
    default:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1004;
  }
  if ((unsigned __int16)result[2] >= 0x100u)
    result[2] = 255;
  if ((unsigned __int16)result[3] >= 0x100u)
    result[3] = 255;
  return result;
}

CsColour *EshContentBase::resolveColor(EshContentBase *this, CsColour *a2, EshColor *a3, const EshColorScheme *a4)
{
  int var0;
  CsColour *result;
  CsColour v9;
  _DWORD *exception;
  CsColour v11;

  var0 = a3->var0.var0;
  if (a3->var0.var0 == 34)
  {
    result = (CsColour *)EshColorScheme::getSystemSchemeColor((uint64_t)a4);
    v9 = v11;
LABEL_7:
    *a2 = v9;
    return result;
  }
  if (var0 == 8)
  {
    EshColor::getSchemeIndex(a3);
    result = (CsColour *)EshColorScheme::getHostSchemeColor(a4);
    v9 = *result;
    goto LABEL_7;
  }
  if (var0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  a2->var1 = EshColor::getRed(a3);
  a2->var2 = EshColor::getGreen(a3);
  result = (CsColour *)EshColor::getBlue(a3);
  a2->var3 = (unsigned __int16)result;
  return result;
}

uint64_t EshContentProperties::isXmlEquivalentSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x3A9u);
}

uint64_t *EshContentProperties::getXmlEquivalent(EshContentProperties *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2 + 128, 0x3A9u);
}

void `non-virtual thunk to'EshGroup::~EshGroup(EshGroup *this)
{
  EshGroup::~EshGroup((EshGroup *)((char *)this - 272));
}

{
  EshGroup::~EshGroup((EshGroup *)((char *)this - 272));
  JUMPOUT(0x22E2DD408);
}

uint64_t EshGroup::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, a1);
}

uint64_t EshGroup::isAtom(EshGroup *this)
{
  return 1;
}

uint64_t EshGroup::getContentProperties(EshGroup *this)
{
  return (uint64_t)this + 288;
}

uint64_t EshGroup::getContentLocks(EshGroup *this)
{
  return (uint64_t)this + 320;
}

uint64_t EshGroup::getContentLocksReference(EshGroup *this)
{
  return (uint64_t)this + 320;
}

uint64_t `non-virtual thunk to'EshGroup::getContentProperties(EshGroup *this)
{
  return (uint64_t)this + 16;
}

uint64_t `non-virtual thunk to'EshGroup::getContentPropertiesReference(EshGroup *this)
{
  return (uint64_t)this + 16;
}

uint64_t `non-virtual thunk to'EshGroup::getContentLocks(EshGroup *this)
{
  return (uint64_t)this + 48;
}

uint64_t `non-virtual thunk to'EshGroup::getContentLocksReference(EshGroup *this)
{
  return (uint64_t)this + 48;
}

void EshGroupProperties::~EshGroupProperties(EshGroupProperties *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshGroupLocks::~EshGroupLocks(EshGroupLocks *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshDiagram::~EshDiagram(EshDiagram *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshObject::getChildIndex(EshObject *this, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  int v8;
  uint64_t v9;

  v6 = a2;
  while (v6 < (*((unsigned int (**)(EshObject *))this->var0 + 5))(this))
  {
    if ((*((unsigned int (**)(EshObject *, uint64_t))this->var0 + 6))(this, v6) == a3)
    {
      if (a4 == -1)
        return v6;
      v8 = (*((uint64_t (**)(EshObject *, uint64_t))this->var0 + 8))(this, v6);
      v9 = v8 == a4 ? v6 : (v6 + 1);
      if (v8 == a4)
        return v6;
      v6 = v9;
    }
    else
    {
      v6 = (v6 + 1);
    }
  }
  return 0xFFFFFFFFLL;
}

void EshObject::accept()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = 7004;
}

void EshObject::~EshObject(EshObject *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshObjectFactory::isClientObject(EshObjectFactory *this)
{
  return ((unsigned __int16)((_WORD)this + 4083) < 9u) & (0x119u >> ((_BYTE)this - 13));
}

void EshObjectFactory::~EshObjectFactory(EshObjectFactory *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t **EshPath::takeConnectLocs(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(_QWORD *)(a1 + 16), 0x151u, a2);
}

uint64_t **EshPath::takeConnectAngles(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(_QWORD *)(a1 + 16), 0x152u, a2);
}

double EshPath::setLimoX(EshPath *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x153u, 2, &v4).n128_u64[0];
  return result;
}

double EshPath::setLimoY(EshPath *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x154u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t **EshPath::takeHandles(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(_QWORD *)(a1 + 16), 0x155u, a2);
}

uint64_t EshPath::getShadowOK(EshPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x17Au);
}

uint64_t EshPatriarch::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 200))(a2, a1);
}

void std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
}

void EshRoot::appendChild(EshRoot *this, EshObject *a2)
{
  void *v4;
  EshHeader *v5;
  unsigned __int16 v6;
  unint64_t v7;
  EshHeader **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  EshHeader **v18;
  char *v19;
  char *v20;
  char *v21;
  EshHeader *v22;

  if (EshObject::isEscher(a2))
  {
    v5 = (EshHeader *)operator new(0x10uLL);
    EshHeader::operator=((uint64_t)v5, (uint64_t)v4 + 12);
  }
  else
  {
    v5 = (EshHeader *)operator new(0x10uLL);
    v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
    EshHeader::EshHeader(v5, 0, 0, v6, 0, 0);
  }
  v7 = *((_QWORD *)this + 4);
  v8 = (EshHeader **)*((_QWORD *)this + 3);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *((_QWORD *)this + 2);
    v11 = (unint64_t)v8 - v10;
    v12 = (v7 - v10) >> 3;
    v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1)
      v13 = (v11 >> 3) + 1;
    if (v12 >= 0x7FFFFFFF)
      v14 = 0xFFFFFFFFLL;
    else
      v14 = v13;
    if ((_DWORD)v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 32, v14);
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = (EshHeader **)&v15[v11 & 0x7FFFFFFF8];
    v19 = &v15[8 * v17];
    *v18 = v5;
    v9 = v18 + 1;
    v21 = (char *)*((_QWORD *)this + 2);
    v20 = (char *)*((_QWORD *)this + 3);
    if (v20 != v21)
    {
      do
      {
        v22 = (EshHeader *)*((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v18;
    *((_QWORD *)this + 3) = v9;
    *((_QWORD *)this + 4) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 3) = v9;
}

void sub_22A3828BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

uint64_t EshRoot::isAtom(EshRoot *this)
{
  return 0;
}

void std::vector<EshHeader *,ChAllocator<EshHeader *>>::__append(void **a1, unsigned int a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = (unint64_t)(v5 - (_BYTE *)*a1) >> 3;
    v10 = 2 * v9;
    if (2 * (int)v9 <= (v8 >> 3) + a2)
      v10 = (v8 >> 3) + a2;
    if (v9 >= 0x7FFFFFFF)
      v11 = 0xFFFFFFFFLL;
    else
      v11 = v10;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    v15 = &v12[v8 & 0x7FFFFFFF8];
    v16 = &v12[8 * v14];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v15 - 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
}

uint64_t EshShadow::getDefaultColor2(EshShadow *this, EshColor *a2)
{
  return EshColor::rgb(203, 203, 203, (uint64_t)this);
}

uint64_t EshShape::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 208))(a2, a1);
}

void EshShape::~EshShape(EshShape *this)
{
  EshContentBase::~EshContentBase((EshContentBase *)this);
  JUMPOUT(0x22E2DD408);
}

uint64_t EshShape::getShapeDefaultsProperties(EshShape *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShape::getShapeDefaultsPropertiesReference(EshShape *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShape::getShapeDefaultsImageData(EshShape *this)
{
  return (uint64_t)this + 480;
}

uint64_t EshShape::getShapeDefaultsImageDataReference(EshShape *this)
{
  return (uint64_t)this + 480;
}

uint64_t EshShape::getContentLocks(EshShape *this)
{
  return (uint64_t)this + 456;
}

uint64_t EshShape::getContentLocksReference(EshShape *this)
{
  return (uint64_t)this + 456;
}

void `non-virtual thunk to'EshShape::~EshShape(EshShape *this)
{
  EshContentBase::~EshContentBase((EshContentBase *)((char *)this - 416));
}

{
  EshContentBase::~EshContentBase((EshContentBase *)((char *)this - 416));
  JUMPOUT(0x22E2DD408);
}

uint64_t `non-virtual thunk to'EshShape::getContentProperties(EshShape *this)
{
  return (uint64_t)this + 8;
}

uint64_t `non-virtual thunk to'EshShape::getContentPropertiesReference(EshShape *this)
{
  return (uint64_t)this + 8;
}

uint64_t `non-virtual thunk to'EshShape::getContentLocks(EshShape *this)
{
  return (uint64_t)this + 40;
}

uint64_t `non-virtual thunk to'EshShape::getContentLocksReference(EshShape *this)
{
  return (uint64_t)this + 40;
}

void EshTextBox::~EshTextBox(EshTextBox *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshStroke::~EshStroke(EshStroke *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshShadow::~EshShadow(EshShadow *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshExtrusion::~EshExtrusion(EshExtrusion *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshCallout::~EshCallout(EshCallout *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshShapeLocks::~EshShapeLocks(EshShapeLocks *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshShapeImageData::~EshShapeImageData(EshShapeImageData *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshTextPath::~EshTextPath(EshTextPath *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshPath::~EshPath(EshPath *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshSkew::~EshSkew(EshSkew *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshShapeBase::resolveColor(EshShapeBase *this, CsColour *a2, EshColor *a3, const EshColorScheme *a4, EshFill *a5)
{
  EshFill *v10;
  EshFill *v11;
  EshColor *v12;
  uint64_t Color;
  EshContentProperties *v14;
  EshColor *v15;
  EshStroke *v16;
  EshColor *v17;
  EshColor *v18;
  EshContentProperties *v19;
  EshColor *v20;
  uint64_t v21;
  int AdjustmentType;
  unsigned int Green;
  double v24;
  _DWORD *exception;

  v10 = (EshFill *)operator new(8uLL);
  LODWORD(v10->var0) = 255;
  if (a5)
    v11 = a5;
  else
    v11 = (EshFill *)((char *)this + 296);
  if (a3->var0.var0 != 33)
  {
    EshContentBase::resolveColor(this, a2, a3, a4);
    goto LABEL_37;
  }
  switch(EshColor::getRed(a3))
  {
    case 0xF0u:
      goto LABEL_11;
    case 0xF1u:
      v14 = (EshContentProperties *)EshStroke::isOnSet((EshStroke *)((char *)this + 320));
      if ((_DWORD)v14)
      {
        if ((EshStroke::getOn((EshStroke *)((char *)this + 320)) & 1) == 0)
          goto LABEL_11;
      }
      else if (!EshContentProperties::getDefaultAllowOverlap(v14))
      {
LABEL_11:
        if ((EshFill::isColorSet(v11) & 1) != 0)
        {
LABEL_12:
          Color = EshFill::getColor(v11);
          goto LABEL_19;
        }
LABEL_32:
        EshFill::getDefaultColor(v10, v15);
        goto LABEL_35;
      }
      if (EshStroke::isColorSet((EshStroke *)((char *)this + 320)))
      {
        v21 = EshStroke::getColor((EshStroke *)((char *)this + 320));
        EshColor::operator=((uint64_t)v10, v21);
      }
      else
      {
        EshStroke::getDefaultColor((EshStroke *)v10, v20);
      }
      a5 = 0;
      goto LABEL_35;
    case 0xF2u:
      v16 = (EshStroke *)((char *)this + 320);
      if ((EshStroke::isColorSet((EshStroke *)((char *)this + 320)) & 1) != 0)
        goto LABEL_16;
      goto LABEL_23;
    case 0xF3u:
      if (!EshShadow::isColorSet((EshShapeBase *)((char *)this + 344)))
      {
        EshShadow::getDefaultColor((EshShadow *)v10, v18);
        goto LABEL_35;
      }
      Color = EshShadow::getColor((EshShapeBase *)((char *)this + 344));
      goto LABEL_19;
    case 0xF5u:
      if (!EshFill::isColor2Set(v11))
      {
        EshShadow::getDefaultColor2((EshShadow *)v10, v12);
        goto LABEL_35;
      }
      Color = EshFill::getColor2(v11);
      goto LABEL_19;
    case 0xF6u:
      if (!EshStroke::isColor2Set((EshStroke *)((char *)this + 320)))
        goto LABEL_32;
      Color = EshStroke::getColor2((EshStroke *)((char *)this + 320));
      goto LABEL_19;
    case 0xF7u:
      v19 = (EshContentProperties *)EshFill::isOnSet(v11);
      if ((_DWORD)v19)
      {
        if ((EshFill::getOn(v11) & 1) == 0)
        {
LABEL_22:
          v16 = (EshStroke *)((char *)this + 320);
          if (!EshStroke::isColorSet((EshStroke *)((char *)this + 320)))
          {
LABEL_23:
            EshStroke::getDefaultColor((EshStroke *)v10, v17);
            goto LABEL_35;
          }
LABEL_16:
          Color = EshStroke::getColor(v16);
LABEL_19:
          EshColor::operator=((uint64_t)v10, Color);
LABEL_35:
          (*(void (**)(EshShapeBase *, CsColour *, EshFill *, const EshColorScheme *, EshFill *))(*(_QWORD *)this + 152))(this, a2, v10, a4, a5);
          AdjustmentType = EshColor::getAdjustmentType(a3);
          Green = EshColor::getGreen(a3);
          EshContentBase::adjustColour(a2, AdjustmentType, Green, v24);
LABEL_37:
          JUMPOUT(0x22E2DD408);
        }
      }
      else if (!EshContentProperties::getDefaultAllowOverlap(v19))
      {
        goto LABEL_22;
      }
      if (EshFill::isColorSet(v11))
        goto LABEL_12;
      goto LABEL_32;
    default:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1009;
  }
}

void sub_22A382E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

uint64_t EshShapeDefaults::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, a1);
}

uint64_t EshShapeDefaults::getShapeDefaultsProperties(EshShapeDefaults *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShapeDefaults::getShapeDefaultsPropertiesReference(EshShapeDefaults *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShapeDefaults::getShapeDefaultsImageData(EshShapeDefaults *this)
{
  return (uint64_t)this + 456;
}

uint64_t EshShapeDefaults::getShapeDefaultsImageDataReference(EshShapeDefaults *this)
{
  return (uint64_t)this + 456;
}

void EshShapeDefaultsImageData::~EshShapeDefaultsImageData(EshShapeDefaultsImageData *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshShapeDefaultsPropertiesImpl::reset(EshShapeDefaultsPropertiesImpl *this)
{
  EshOpt::deleteProperty(*((_QWORD *)this + 2), 0x304u);
  EshOpt::deleteProperty(*((_QWORD *)this + 2), 0x305u);
  EshOpt::deleteProperty(*((_QWORD *)this + 2), 0x306u);
  EshOpt::deleteProperty(*((_QWORD *)this + 2), 0x39Bu);
  EshOpt::deleteProperty(*((_QWORD *)this + 2), 0x39Cu);
  EshOpt::deleteProperty(*((_QWORD *)this + 2), 0x39Du);
  return EshOpt::deleteProperty(*((_QWORD *)this + 2), 0x39Eu);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::reset(EshShapeDefaultsPropertiesImpl *this)
{
  return EshShapeDefaultsPropertiesImpl::reset((EshShapeDefaultsPropertiesImpl *)((char *)this - 32));
}

uint64_t EshShapeDefaultsPropertiesImpl::isBWModeSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x304u);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBWModeSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 1), 0x304u);
}

{
  return EshOpt::isPropertySet(*((_QWORD *)this - 2), 0x304u);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBWMode(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x304u);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBWMode(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 1), 0x304u);
}

{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 2), 0x304u);
}

double EshShapeDefaultsPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBWPureSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x305u);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBWPureSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 1), 0x305u);
}

{
  return EshOpt::isPropertySet(*((_QWORD *)this - 2), 0x305u);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBWPure(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x305u);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBWPure(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 1), 0x305u);
}

{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 2), 0x305u);
}

double EshShapeDefaultsPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBWNormalSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x306u);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBWNormalSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 1), 0x306u);
}

{
  return EshOpt::isPropertySet(*((_QWORD *)this - 2), 0x306u);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBWNormal(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x306u);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBWNormal(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 1), 0x306u);
}

{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this - 2), 0x306u);
}

double EshShapeDefaultsPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderTopColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x39Bu);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderTopColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 2), 0x39Bu);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderTopColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this + 2), 0x39Bu);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderTopColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this - 2), 0x39Bu);
}

double EshShapeDefaultsPropertiesImpl::setBorderTopColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this + 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderTopColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this - 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderLeftColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x39Cu);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderLeftColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 2), 0x39Cu);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderLeftColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this + 2), 0x39Cu);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderLeftColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this - 2), 0x39Cu);
}

double EshShapeDefaultsPropertiesImpl::setBorderLeftColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this + 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderLeftColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this - 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderBottomColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x39Du);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderBottomColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 2), 0x39Du);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderBottomColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this + 2), 0x39Du);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderBottomColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this - 2), 0x39Du);
}

double EshShapeDefaultsPropertiesImpl::setBorderBottomColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this + 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderBottomColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this - 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderRightColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x39Eu);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderRightColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this - 2), 0x39Eu);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderRightColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this + 2), 0x39Eu);
}

uint64_t `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderRightColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this - 2), 0x39Eu);
}

double EshShapeDefaultsPropertiesImpl::setBorderRightColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this + 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderRightColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *((_QWORD *)this - 2);
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

void EshShapeDefaultsPropertiesImpl::~EshShapeDefaultsPropertiesImpl(EshShapeDefaultsPropertiesImpl *this)
{
  JUMPOUT(0x22E2DD408);
}

void `non-virtual thunk to'EshShapeDefaultsPropertiesImpl::~EshShapeDefaultsPropertiesImpl(EshShapeDefaultsPropertiesImpl *this)
{
  JUMPOUT(0x22E2DD408);
}

{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshShapeProperties::reset(EshShapeProperties *this)
{
  EshOpt::deleteProperty((uint64_t)this->var2, 0x304u);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x305u);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x306u);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x39Bu);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x39Cu);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x39Du);
  return EshOpt::deleteProperty((uint64_t)this->var2, 0x39Eu);
}

uint64_t `non-virtual thunk to'EshShapeProperties::reset(EshShapeProperties *this)
{
  return EshShapeProperties::reset((EshShapeProperties *)((char *)this - 24));
}

uint64_t EshShapeProperties::isBWModeSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x304u);
}

uint64_t `non-virtual thunk to'EshShapeProperties::isBWModeSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x304u);
}

uint64_t EshShapeProperties::getBWMode(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x304u);
}

uint64_t `non-virtual thunk to'EshShapeProperties::getBWMode(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this[-1].var3, 0x304u);
}

double EshShapeProperties::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeProperties::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBWPureSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x305u);
}

uint64_t `non-virtual thunk to'EshShapeProperties::isBWPureSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x305u);
}

uint64_t EshShapeProperties::getBWPure(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x305u);
}

uint64_t `non-virtual thunk to'EshShapeProperties::getBWPure(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this[-1].var3, 0x305u);
}

double EshShapeProperties::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeProperties::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBWNormalSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x306u);
}

uint64_t `non-virtual thunk to'EshShapeProperties::isBWNormalSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x306u);
}

uint64_t EshShapeProperties::getBWNormal(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x306u);
}

uint64_t `non-virtual thunk to'EshShapeProperties::getBWNormal(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this[-1].var3, 0x306u);
}

double EshShapeProperties::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeProperties::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 - 8);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderTopColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Bu);
}

uint64_t `non-virtual thunk to'EshShapeProperties::isBorderTopColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Bu);
}

uint64_t EshShapeProperties::getBorderTopColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Bu);
}

uint64_t `non-virtual thunk to'EshShapeProperties::getBorderTopColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Bu);
}

double EshShapeProperties::setBorderTopColor(EshShapeProperties *this, const EshColor *a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeProperties::setBorderTopColor(EshShapeProperties *this, const EshColor *a2)
{
  void **var3;
  double result;
  __n128 v4;

  var3 = this[-1].var3;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var3, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderLeftColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Cu);
}

uint64_t `non-virtual thunk to'EshShapeProperties::isBorderLeftColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Cu);
}

uint64_t EshShapeProperties::getBorderLeftColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Cu);
}

uint64_t `non-virtual thunk to'EshShapeProperties::getBorderLeftColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Cu);
}

double EshShapeProperties::setBorderLeftColor(EshShapeProperties *this, const EshColor *a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeProperties::setBorderLeftColor(EshShapeProperties *this, const EshColor *a2)
{
  void **var3;
  double result;
  __n128 v4;

  var3 = this[-1].var3;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var3, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderBottomColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Du);
}

uint64_t `non-virtual thunk to'EshShapeProperties::isBorderBottomColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Du);
}

uint64_t EshShapeProperties::getBorderBottomColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Du);
}

uint64_t `non-virtual thunk to'EshShapeProperties::getBorderBottomColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Du);
}

double EshShapeProperties::setBorderBottomColor(EshShapeProperties *this, const EshColor *a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeProperties::setBorderBottomColor(EshShapeProperties *this, const EshColor *a2)
{
  void **var3;
  double result;
  __n128 v4;

  var3 = this[-1].var3;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var3, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderRightColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Eu);
}

uint64_t `non-virtual thunk to'EshShapeProperties::isBorderRightColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Eu);
}

uint64_t EshShapeProperties::getBorderRightColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Eu);
}

uint64_t `non-virtual thunk to'EshShapeProperties::getBorderRightColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Eu);
}

double EshShapeProperties::setBorderRightColor(EshShapeProperties *this, const EshColor *a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'EshShapeProperties::setBorderRightColor(EshShapeProperties *this, const EshColor *a2)
{
  void **var3;
  double result;
  __n128 v4;

  var3 = this[-1].var3;
  v4 = (__n128)*a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var3, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::getDefaultCoordRight(EshShapeProperties *this)
{
  return 21600;
}

uint64_t EshShapeProperties::setShapeType(uint64_t a1, __int16 a2)
{
  return EshRecord::setInstance(*(_QWORD *)(a1 + 16) + 192, a2);
}

EshShapeProperties *EshShapeProperties::setHasShapeType(EshShapeProperties *this, char a2)
{
  *((_BYTE *)this->var2 + 235) = a2;
  return this;
}

uint64_t EshShapeProperties::isAltSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x381u);
}

uint64_t *EshShapeProperties::getAlt(EshShapeProperties *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x381u);
}

double EshShapeProperties::setHidden(EshShapeProperties *this, unsigned __int8 a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x3BEu, 1, &v4).n128_u64[0];
  return result;
}

void EshShapeProperties::~EshShapeProperties(EshShapeProperties *this)
{
  JUMPOUT(0x22E2DD408);
}

void `non-virtual thunk to'EshShapeProperties::~EshShapeProperties(EshShapeProperties *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t EshStroke::isBlipId(EshStroke *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x1C5u);
}

uint64_t *EshStroke::getBlipRecordReference(EshStroke *this)
{
  return EshOpt::getProperty((uint64_t)this->var2, 0x1C5u)[1];
}

uint64_t *EshStroke::getBlipName(EshStroke *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x1C6u);
}

double EshStroke::setPredefDashStyle(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x1CEu, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setWrapStyle(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x85u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setAnchor(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x87u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setFlow(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x88u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setRotate(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x89u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setDirection(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  __n128 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty(v2, 0x8Bu, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setColumnCount(EshTextBox *this, unsigned int a2)
{
  char *v2;
  double result;
  __n128 v4;

  v2 = (char *)this->var2 + 128;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)v2, 0x8Cu, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setColumnMargin(EshTextBox *this, unsigned int a2)
{
  char *v2;
  double result;
  __n128 v4;

  v2 = (char *)this->var2 + 128;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)v2, 0x8Du, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setAutoInset(EshTextBox *this, unsigned __int8 a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0xBCu, 1, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setFitShapeToText(EshTextBox *this, unsigned __int8 a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0xBEu, 1, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setFitTextToShape(EshTextBox *this, unsigned __int8 a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0xBFu, 1, &v4).n128_u64[0];
  return result;
}

uint64_t EshTextPath::isUnderlineSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xFCu);
}

uint64_t EshTextPath::isStrikethroughSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xFFu);
}

uint64_t EshTextPath::getUnderline(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xFCu);
}

uint64_t EshTextPath::getStrikethrough(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xFFu);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshAtom *a2)
{
  uint64_t v4;
  int Offset;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshAlignRule *a2)
{
  uint64_t v4;
  int Offset;
  __int16 v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 8) = v6 & 0xF;
  *((_DWORD *)a2 + 9) = v6 >> 4;
  *((_BYTE *)a2 + 40) = (v6 & 0x200) != 0;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  v9 = *((_DWORD *)a2 + 3);
  v8 = *((_DWORD *)a2 + 4);
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if (v7 >> 30
    || ((v11 = v8 + v9 + 8, v13 = v11 >= v10, v12 = v11 - v10, v13) ? (v13 = v12 >= 4 * v7) : (v13 = 0), !v13))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  for (; v7; --v7)
  {
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
    EshAlignRule::addShapeId(a2, v14);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshAlignRule::addShapeId(EshAlignRule *this, int a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;

  v4 = (char *)this + 64;
  v5 = *((_QWORD *)this + 8);
  v6 = (char *)*((_QWORD *)this + 7);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)this + 6);
    v9 = v6 - v8;
    v10 = (unint64_t)(v6 - v8) >> 2;
    v11 = (v5 - (unint64_t)v8) >> 2;
    if (2 * (int)v11 <= (v10 + 1))
      v12 = v10 + 1;
    else
      v12 = 2 * v11;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v4, v13);
      v16 = v15;
      v8 = (char *)*((_QWORD *)this + 6);
      v6 = (char *)*((_QWORD *)this + 7);
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v9 & 0x3FFFFFFFCLL];
    v18 = &v14[4 * v16];
    *(_DWORD *)v17 = a2;
    v7 = v17 + 4;
    while (v6 != v8)
    {
      v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *((_QWORD *)this + 6) = v17;
    *((_QWORD *)this + 7) = v7;
    *((_QWORD *)this + 8) = v18;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = a2;
    v7 = v6 + 4;
  }
  *((_QWORD *)this + 7) = v7;
}

uint64_t EshColorMRU::addColor(EshColorMRU *this, const EshColor *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 5);
  if (v3 >= *((_QWORD *)this + 6))
  {
    result = std::vector<EshColor,ChAllocator<EshColor>>::__push_back_slow_path<EshColor const&>((uint64_t)this + 32, a2);
  }
  else
  {
    EshColor::EshColor(*((EshColor **)this + 5), a2);
    result = v3 + 8;
    *((_QWORD *)this + 5) = v3 + 8;
  }
  *((_QWORD *)this + 5) = result;
  return result;
}

void sub_22A38415C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshDeletedPspl *a2)
{
  uint64_t v4;
  int Offset;
  int v6;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 7) = v6 & 0x3FFFFFFF;
  *((_BYTE *)a2 + 32) = (v6 & 0x40000000) != 0;
  *((_BYTE *)a2 + 33) = v6 < 0;
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshDgg::addIdCluster(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[8];
  v4 = (uint64_t)(a1 + 8);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[6];
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)a1[6];
    v19 = (char *)a1[7];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)a1[6];
    }
    a1[6] = v17;
    a1[7] = v8;
    a1[8] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[7] = v8;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshRegroupItems *a2)
{
  uint64_t v4;
  int Offset;
  int Instance;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  Instance = EshRecord::getInstance(a2);
  v7 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if (v7 < v8 || v7 - v8 < 4 * (unsigned __int16)Instance)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  if (Instance)
  {
    v9 = 0;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
      EshRegroupItems::addItem(a2, v10, v11);
      ++v9;
    }
    while ((unsigned __int16)v9 < (unsigned __int16)Instance);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshRegroupItems::addItem(EshRegroupItems *this, int a2, int a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;

  v8 = *((_QWORD *)this + 6);
  v6 = (char *)this + 48;
  v7 = v8;
  v9 = (int *)*((_QWORD *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)this + 4);
    v12 = (unint64_t)v9 - v11;
    v13 = (v7 - v11) >> 2;
    v14 = 2 * v13;
    if (2 * (int)v13 <= (v12 >> 2) + 1)
      v14 = (v12 >> 2) + 1;
    if (v13 >= 0x7FFFFFFF)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = v14;
    if ((_DWORD)v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v6, v15);
      v18 = v17;
    }
    else
    {
      v16 = 0;
      v18 = 0;
    }
    v19 = (int *)&v16[v12 & 0x3FFFFFFFCLL];
    v20 = &v16[4 * v18];
    *v19 = a2 | (a3 << 16);
    v10 = v19 + 1;
    v22 = (char *)*((_QWORD *)this + 4);
    v21 = (char *)*((_QWORD *)this + 5);
    if (v21 != v22)
    {
      do
      {
        v23 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 4) = v19;
    *((_QWORD *)this + 5) = v10;
    *((_QWORD *)this + 6) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v9 = a2 | (a3 << 16);
    v10 = v9 + 1;
  }
  *((_QWORD *)this + 5) = v10;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshSelection *a2)
{
  uint64_t v4;
  int Offset;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  v8 = *((_DWORD *)a2 + 3);
  v7 = *((_DWORD *)a2 + 4);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if (v6 >> 30 || ((v10 = v7 + v8 + 8, v12 = v10 >= v9, v11 = v10 - v9, v12) ? (v12 = v11 >= 4 * v6) : (v12 = 0), !v12))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  for (; v6; --v6)
  {
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
    EshSelection::addShapeId(a2, v13);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshSelection::addShapeId(EshSelection *this, int a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;

  v4 = (char *)this + 56;
  v5 = *((_QWORD *)this + 7);
  v6 = (char *)*((_QWORD *)this + 6);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)this + 5);
    v9 = v6 - v8;
    v10 = (unint64_t)(v6 - v8) >> 2;
    v11 = (v5 - (unint64_t)v8) >> 2;
    if (2 * (int)v11 <= (v10 + 1))
      v12 = v10 + 1;
    else
      v12 = 2 * v11;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v4, v13);
      v16 = v15;
      v8 = (char *)*((_QWORD *)this + 5);
      v6 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v9 & 0x3FFFFFFFCLL];
    v18 = &v14[4 * v16];
    *(_DWORD *)v17 = a2;
    v7 = v17 + 4;
    while (v6 != v8)
    {
      v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *((_QWORD *)this + 5) = v17;
    *((_QWORD *)this + 6) = v7;
    *((_QWORD *)this + 7) = v18;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = a2;
    v7 = v6 + 4;
  }
  *((_QWORD *)this + 6) = v7;
}

uint64_t EshSplitMenuColors::addColor(EshSplitMenuColors *this, const EshColor *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 5);
  if (v3 >= *((_QWORD *)this + 6))
  {
    result = std::vector<EshColor,ChAllocator<EshColor>>::__push_back_slow_path<EshColor const&>((uint64_t)this + 32, a2);
  }
  else
  {
    EshColor::EshColor(*((EshColor **)this + 5), a2);
    result = v3 + 8;
    *((_QWORD *)this + 5) = v3 + 8;
  }
  *((_QWORD *)this + 5) = result;
  return result;
}

void sub_22A3846D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshRawAtom *a2)
{
  uint64_t v4;
  int Offset;
  unsigned int DataLength;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  DataLength = EshRecord::getDataLength(a2);
  EshParserVisitor::readData(this, (OcBinaryData *)((char *)a2 + 32), DataLength);
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::readData(EshParserVisitor *this, OcBinaryData *a2, unsigned int a3)
{
  uint64_t result;
  _DWORD *exception;
  unsigned int v8;

  v8 = a3;
  OcBinaryData::allocBuffer(a2, a3);
  OcBinaryData::setMinimumCapacity(a2, a3);
  a2->var3 = a3;
  result = (*(uint64_t (**)(_QWORD, char *, unsigned int *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), a2->var5, &v8);
  if (v8 != a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  return result;
}

uint64_t std::vector<EshColor,ChAllocator<EshColor>>::__push_back_slow_path<EshColor const&>(uint64_t a1, const EshColor *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  EshColor *v16;
  EshColor *v17;
  char *v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v7 = (unint64_t)(v5 - *(_QWORD *)a1) >> 3;
  if (2 * (int)v7 <= (v6 >> 3) + 1)
    v8 = (v6 >> 3) + 1;
  else
    v8 = 2 * v7;
  if (v7 >= 0x7FFFFFFF)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = v8;
  v19 = v4;
  if ((_DWORD)v9)
  {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v9);
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  __p = v10;
  v16 = (EshColor *)&v10[v6 & 0x7FFFFFFF8];
  v18 = &v10[8 * v12];
  EshColor::EshColor(v16, a2);
  v17 = v16 + 1;
  std::vector<EshColor,ChAllocator<EshColor>>::__swap_out_circular_buffer((EshColor **)a1, &__p);
  v13 = *(_QWORD *)(a1 + 8);
  if (v17 != v16)
    v17 = (EshColor *)((char *)v17 + (((char *)v16 - (char *)v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_22A3848DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

EshColor *std::vector<EshColor,ChAllocator<EshColor>>::__swap_out_circular_buffer(EshColor **a1, _QWORD *a2)
{
  const EshColor *v4;
  const EshColor *v5;
  EshColor *result;
  EshColor *v7;
  EshColor *v8;
  EshColor *v9;

  v5 = *a1;
  v4 = a1[1];
  result = (EshColor *)a2[1];
  while (v4 != v5)
    result = EshColor::EshColor(result - 1, --v4);
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (EshColor *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (EshColor *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t EshPropValParserVisitor::visit(uint64_t a1, _WORD *a2)
{
  int v4;

  a2[10] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  a2[11] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  a2[12] = v4;
  *(_DWORD *)(a1 + 16) = (unsigned __int16)a2[10] * v4;
  return (*(uint64_t (**)(uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(a1, a2);
}

uint64_t EshPropValParserVisitor::visit()
{
  return 1;
}

uint64_t EshPropValParserVisitor::visit(EshPropValParserVisitor *this, EshAsciiPropVal *a2)
{
  _DWORD *exception;
  int v6;

  EshDataTablePropVal<unsigned char>::resize((uint64_t)a2, *((_DWORD *)this + 4));
  v6 = *((_DWORD *)this + 4);
  (*(void (**)(_QWORD, _QWORD, int *))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), *((_QWORD *)a2 + 1), &v6);
  if (v6 != *((_DWORD *)this + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  return 1;
}

void std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
}

void std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__append(void **a1, unsigned int a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (((unint64_t)(v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v7[2 * a2];
      do
      {
        *(_BYTE *)v7 = 0;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v15);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = (v8 >> 3) + a2;
    v10 = (unint64_t)(v5 - (_BYTE *)*a1) >> 3;
    if (2 * (int)v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x7FFFFFFF)
      v11 = 0xFFFFFFFFLL;
    else
      v11 = v9;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    v16 = &v12[v8 & 0x7FFFFFFF8];
    v17 = &v16[8 * a2];
    v18 = v16;
    do
    {
      *v18 = 0;
      *((_DWORD *)v18 + 1) = 0;
      v18 += 8;
    }
    while (v18 != v17);
    v19 = &v12[8 * v14];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v16 - 1) = v22;
        v16 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

void std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = (unint64_t)(a1[1] - *a1) >> 5;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 32 * a2;
  }
}

void std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t j;
  char *v21;
  void *__p;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v15 = v7 + 32 * a2;
      do
      {
        for (i = 0; i != 32; i += 8)
        {
          v17 = v7 + i;
          *(_BYTE *)v17 = 0;
          *(_DWORD *)(v17 + 4) = 0;
        }
        v7 += 32;
      }
      while (v7 != v15);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = (v8 >> 5) + a2;
    v10 = (unint64_t)(v5 - *a1) >> 5;
    if (2 * (int)v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x7FFFFFFF)
      v11 = 0xFFFFFFFFLL;
    else
      v11 = v9;
    v26 = v4;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    v18 = &v12[v8 & 0x1FFFFFFFE0];
    __p = v12;
    v23 = v18;
    v25 = &v12[32 * v14];
    v19 = &v18[32 * a2];
    do
    {
      for (j = 0; j != 32; j += 8)
      {
        v21 = &v18[j];
        *v21 = 0;
        *((_DWORD *)v21 + 1) = 0;
      }
      v18 += 32;
    }
    while (v18 != v19);
    v24 = v19;
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(a1, &__p);
    if (v24 != v23)
      v24 += (v23 - v24 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
}

void sub_22A384D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = (unint64_t)(a1[1] - *a1) >> 4;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 16 * a2;
  }
}

void std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t i;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t j;
  char *v21;
  void *__p;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (((unint64_t)(v6 - (_QWORD)v7) >> 4) >= a2)
  {
    if (a2)
    {
      v15 = &v7[2 * a2];
      do
      {
        for (i = 0; i != 2; ++i)
        {
          v17 = &v7[i];
          *(_BYTE *)v17 = 0;
          *((_DWORD *)v17 + 1) = 0;
        }
        *v7 = 0;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v15);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (unint64_t)v7 - *a1;
    v9 = (v8 >> 4) + a2;
    v10 = (unint64_t)(v5 - *a1) >> 4;
    if (2 * (int)v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x7FFFFFFF)
      v11 = 0xFFFFFFFFLL;
    else
      v11 = v9;
    v26 = v4;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    v18 = &v12[v8 & 0xFFFFFFFF0];
    __p = v12;
    v23 = v18;
    v25 = &v12[16 * v14];
    v19 = &v18[16 * a2];
    do
    {
      for (j = 0; j != 16; j += 8)
      {
        v21 = &v18[j];
        *v21 = 0;
        *((_DWORD *)v21 + 1) = 0;
      }
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18 += 16;
    }
    while (v18 != v19);
    v24 = v19;
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(a1, &__p);
    if (v24 != v23)
      v24 += (v23 - v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
}

void sub_22A384F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EshFormula,ChAllocator<EshFormula>>::resize(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  v2 = -1227133513 * ((unint64_t)(a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshFormula,ChAllocator<EshFormula>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 28 * a2;
  }
}

void std::vector<EshFormula,ChAllocator<EshFormula>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *__p;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (-1227133513 * ((unint64_t)(v6 - (_QWORD)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v15 = &v7[7 * a2];
      do
      {
        v16 = v7;
        *v7 = 0;
        v7 += 7;
        v17 = 1;
        do
        {
          v18 = &v16[v17];
          *v18 = 0;
          *((_WORD *)v18 + 2) = 0;
          v17 += 2;
        }
        while (v18 + 2 != v7);
      }
      while (v7 != v15);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x24924924)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = -1227133513 * ((unint64_t)(v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x12492492)
      v11 = 613566756;
    else
      v11 = v9;
    v28 = v4;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    v19 = &v12[28 * v8];
    __p = v12;
    v25 = v19;
    v27 = &v12[28 * v14];
    v20 = &v19[28 * a2];
    do
    {
      v21 = v19;
      *(_DWORD *)v19 = 0;
      v19 += 28;
      v22 = 4;
      do
      {
        v23 = &v21[v22];
        *(_DWORD *)v23 = 0;
        *((_WORD *)v23 + 2) = 0;
        v22 += 8;
      }
      while (v23 + 8 != v19);
    }
    while (v19 != v20);
    v26 = v20;
    std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(a1, &__p);
    if (v26 != v25)
      v26 = &v25[(v26 - v25 - 28) % 0x1CuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_22A385158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EshHandle,ChAllocator<EshHandle>>::resize(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  v2 = -252645135 * ((unint64_t)(a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshHandle,ChAllocator<EshHandle>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 68 * a2;
  }
}

void std::vector<EshHandle,ChAllocator<EshHandle>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  size_t v15;
  size_t v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (-252645135 * ((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v15 = 68 * ((68 * (unint64_t)a2 - 68) / 0x44) + 68;
      bzero(*(void **)(v4 - 8), v15);
      v7 += v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xC3C3C3C3)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = -252645135 * ((unint64_t)(v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x61E1E1E1)
      v11 = 3284386755;
    else
      v11 = v9;
    v21 = v4;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    __p = v12;
    v18 = &v12[68 * v8];
    v20 = &v12[68 * v14];
    v16 = 68 * ((68 * (unint64_t)a2 - 68) / 0x44) + 68;
    bzero(v18, v16);
    v19 = &v18[v16];
    std::vector<EshHandle,ChAllocator<EshHandle>>::__swap_out_circular_buffer(a1, &__p);
    if (v19 != v18)
      v19 = &v18[(v19 - v18 - 68) % 0x44uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_22A385394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::resize(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  v2 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  size_t v15;
  size_t v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (-1431655765 * ((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v15 = 12 * ((12 * (unint64_t)a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v15);
      v7 += v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x55555555)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v10 = -1431655765 * ((unint64_t)(v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAA)
      v11 = 1431655765;
    else
      v11 = v9;
    v21 = v4;
    if ((_DWORD)v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>(v4, v11);
      v14 = v13;
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    __p = v12;
    v18 = &v12[12 * v8];
    v20 = &v12[12 * v14];
    v16 = 12 * ((12 * (unint64_t)a2 - 12) / 0xC) + 12;
    bzero(v18, v16);
    v19 = &v18[v16];
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__swap_out_circular_buffer(a1, &__p);
    if (v19 != v18)
      v19 = &v18[(v19 - v18 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_22A3855C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<int,ChAllocator<int>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int,ChAllocator<int>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
}

void std::vector<int,ChAllocator<int>>::__append(char **a1, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = (v9 >> 2) + a2;
    v11 = (unint64_t)(v5 - *a1) >> 2;
    if (2 * (int)v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x7FFFFFFF)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = v10;
    if ((_DWORD)v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v12);
      v15 = v14;
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = &v13[v9 & 0x3FFFFFFFCLL];
    v17 = &v13[4 * v15];
    bzero(v16, 4 * a2);
    v18 = &v16[4 * a2];
    while (v7 != v8)
    {
      v19 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - 1) = v19;
      v16 -= 4;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = v17;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<float,ChAllocator<float>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<float,ChAllocator<float>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
}

void std::vector<float,ChAllocator<float>>::__append(char **a1, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = (v9 >> 2) + a2;
    v11 = (unint64_t)(v5 - *a1) >> 2;
    if (2 * (int)v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x7FFFFFFF)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = v10;
    if ((_DWORD)v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v12);
      v15 = v14;
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = &v13[v9 & 0x3FFFFFFFCLL];
    v17 = &v13[4 * v15];
    bzero(v16, 4 * a2);
    v18 = &v16[4 * a2];
    while (v7 != v8)
    {
      v19 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - 1) = v19;
      v16 -= 4;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = v17;
    if (v8)
      operator delete(v8);
  }
}

BOOL EshBinaryReader::isStarted(EshBinaryReader *this)
{
  return *((_QWORD *)this + 1) != 0;
}

void EshBinaryReader::mark(EshBinaryReader *this, EshMark *a2)
{
  EshBinaryReader::checkStarted((uint64_t)this);
  ChStack<EshHeader>::operator=((uint64_t)a2, (uint64_t)this + 40);
  *((_DWORD *)a2 + 8) = *((_DWORD *)this + 18);
}

void EshBinaryReader::seek(EshBinaryReader *this, const EshMark *a2)
{
  EshBinaryReader::checkStarted((uint64_t)this);
  ChStack<EshHeader>::operator=((uint64_t)this + 40, (uint64_t)a2);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 8);
}

void ChStack<EshHeader>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(unsigned int *)(a2 + 20);
  if (v4 > *(_DWORD *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 20) = v4;
    v5 = 16 * v4;
    v6 = operator new[](16 * v4 + 16);
    v7 = 0;
    *v6 = 16;
    v6[1] = v4;
    v8 = v6 + 2;
    do
    {
      EshHeader::makeDefault((EshHeader *)&v6[v7 / 8 + 2]);
      v7 += 16;
    }
    while (v5 != v7);
    *(_QWORD *)(a1 + 8) = v8;
    if (*(_QWORD *)a1)
    {
      MEMORY[0x22E2DD3F0](*(_QWORD *)a1 - 16, 0x1000C808B6DE1C6);
      v8 = *(_QWORD **)(a1 + 8);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = 0;
  }
  LODWORD(v9) = *(_DWORD *)(a2 + 16);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      EshHeader::operator=(*(_QWORD *)a1 + v10, *(_QWORD *)a2 + v10);
      ++v11;
      v9 = *(unsigned int *)(a2 + 16);
      v10 += 16;
    }
    while (v11 < v9);
  }
  *(_DWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
}

void sub_22A3859EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t EshBinaryReader::seek(EshBinaryReader *this, const EshContainer *a2, uint64_t a3)
{
  uint64_t result;
  _DWORD *exception;

  if (*(_DWORD *)(ChStack<EshHeader>::top((uint64_t)this + 40) + 4) != *((_DWORD *)a2 + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  result = (*(uint64_t (**)(const EshContainer *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3);
  *((_DWORD *)this + 18) = *(_DWORD *)(result + 4);
  return result;
}

uint64_t EshBinaryReader::seek(EshBinaryReader *this, const EshRoot *a2, uint64_t a3)
{
  uint64_t result;

  if (*((_DWORD *)this + 14))
    *((_DWORD *)this + 14) = 0;
  result = (*(uint64_t (**)(const EshRoot *, uint64_t))(*(_QWORD *)a2 + 112))(a2, a3);
  *((_DWORD *)this + 18) = *(_DWORD *)(result + 4);
  return result;
}

uint64_t EshBinaryReader::seekToEnd(EshBinaryReader *this, const EshRoot *a2)
{
  if (*((_DWORD *)this + 14))
    *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 18) = *((_DWORD *)this + 9);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

void EshMark::EshMark(EshMark *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 10;
}

void sub_22A385C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A385D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t OCDLanguageFromOfficeOrTangierString(NSString *a1)
{
  NSString *v1;
  void *v2;
  unint64_t v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[NSString isEqual:](v1, "isEqual:", v2))
    {

    }
    else
    {
      v3 = -[NSString length](v1, "length");

      if (v3 >= 2)
      {
        if (!OCDLanguageFromOfficeOrTangierString(NSString *)::languageStringToWDLanguage)
        {
          OCDLanguageFromOfficeOrTangierString(NSString *)::languageStringToWDLanguage = (uint64_t)&unk_24F46A1C8;

        }
        v4 = -[NSString characterAtIndex:](v1, "characterAtIndex:", 0);
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v5 = (id)OCDLanguageFromOfficeOrTangierString(NSString *)::languageStringToWDLanguage;
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v6)
        {
          v7 = *(_QWORD *)v18;
LABEL_9:
          v8 = 0;
          while (1)
          {
            if (*(_QWORD *)v18 != v7)
              objc_enumerationMutation(v5);
            v9 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v8);
            objc_msgSend(v9, "objectAtIndexedSubscript:", 0, (_QWORD)v17);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            v11 = objc_msgSend(v10, "characterAtIndex:", 0);

            if (v4 < v11)
              break;
            if (v4 == v11)
            {
              objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              v13 = -[NSString tc_startsWithString:](v1, "tc_startsWithString:", v12);

              if (v13)
              {
                objc_msgSend(v9, "objectAtIndexedSubscript:", 1);
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                v14 = objc_msgSend(v16, "intValue");

                goto LABEL_19;
              }
            }
            if (v6 == ++v8)
            {
              v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
              if (v6)
                goto LABEL_9;
              break;
            }
          }
        }

      }
    }
  }
  v14 = 0xFFFFLL;
LABEL_19:

  return v14;
}

void sub_22A385F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const __CFString *OCDOfficeStringFromLanguage(int a1)
{
  int v1;
  const __CFString *result;

  if (a1 > 2051)
  {
    if (a1 > 3080)
    {
      if (a1 > 4104)
      {
        if (a1 == 4105)
          return CFSTR("en-CA");
        if (a1 == 5124)
          return CFSTR("zh-MO");
      }
      else
      {
        if (a1 == 3081)
          return CFSTR("en-AU");
        if (a1 == 4100)
          return CFSTR("zh-SG");
      }
    }
    else if (a1 > 2069)
    {
      if (a1 == 2070)
        return CFSTR("pt-PT");
      if (a1 == 3076)
        return CFSTR("zh-HK");
    }
    else
    {
      if (a1 == 2052)
        return CFSTR("zh-CN");
      if (a1 == 2057)
        return CFSTR("en-GB");
    }
    return &stru_24F3BFFF8;
  }
  else
  {
    v1 = a1 - 1025;
    result = CFSTR("ar-SA");
    switch(v1)
    {
      case 0:
        return result;
      case 1:
      case 2:
      case 4:
      case 7:
      case 10:
      case 13:
      case 14:
      case 19:
      case 20:
      case 22:
      case 23:
      case 25:
      case 26:
      case 27:
        return &stru_24F3BFFF8;
      case 3:
        goto LABEL_20;
      case 5:
        return CFSTR("da-DK");
      case 6:
        return CFSTR("de-DE");
      case 8:
        return CFSTR("en-US");
      case 9:
        return CFSTR("es-ES_tradnl");
      case 11:
        return CFSTR("fr-FR");
      case 12:
        return CFSTR("he-IL");
      case 15:
        return CFSTR("it-IT");
      case 16:
        return CFSTR("ja-JP");
      case 17:
        return CFSTR("ko-KR");
      case 18:
        return CFSTR("nl-NL");
      case 21:
        return CFSTR("pt-BR");
      case 24:
        return CFSTR("ru-RU");
      case 28:
        return CFSTR("sv-SE");
      default:
        if (CFSTR("ar-SA") != 4)
          return &stru_24F3BFFF8;
LABEL_20:
        result = CFSTR("zh-TW");
        break;
    }
  }
  return result;
}

unint64_t OCNsStringEncodingForWindowsCharSet(int a1)
{
  UInt32 v2;

  if (a1 <= 253)
  {
    if (a1 != 1)
    {
      if (a1 == 2)
        return 6;
      goto LABEL_8;
    }
    return 12;
  }
  if (a1 != 254)
  {
    if (a1 != 255)
    {
LABEL_8:
      v2 = ChMapCharsetToCharacterEncoding(a1);
      return OCNsEncodingForOcEncoding(v2);
    }
    return 12;
  }
  return CFStringConvertWindowsCodepageToEncoding(0x410u);
}

void sub_22A38625C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A386AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A386E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A386FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3870A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3871BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A387494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A387580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38763C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3876F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3879C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A387A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A387B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t parsePoint(uint64_t result, int a2, int *a3, int *a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;

  if (!a5)
    return parsePoint32(result, a2, a3, a4);
  v5 = 4 * a2;
  v6 = *(unsigned __int8 *)(result + v5);
  v7 = (unsigned __int8 *)(result + (int)v5);
  *a3 = (__int16)(v7[1] << 8) | v6;
  *a4 = (__int16)(v7[3] << 8) | v7[2];
  return result;
}

void sub_22A388CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A388E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A389070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3892FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3895E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A389738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A389858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3899D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A389A64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A389AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A389B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A389CC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36,void *a37)
{
  void *v37;
  uint64_t v38;
  void *v39;

  v39 = *(void **)(v38 - 160);

  _Unwind_Resume(a1);
}

void sub_22A38A1B8()
{
  JUMPOUT(0x22A38A128);
}

void sub_22A38A1C0()
{
  JUMPOUT(0x22A38A130);
}

void sub_22A38A1C8()
{
  JUMPOUT(0x22A38A138);
}

void sub_22A38A1D0()
{
  JUMPOUT(0x22A38A140);
}

void sub_22A38A1D8()
{
  JUMPOUT(0x22A38A148);
}

void sub_22A38A1E0()
{
  JUMPOUT(0x22A38A150);
}

void sub_22A38A1E8()
{
  JUMPOUT(0x22A38A158);
}

void sub_22A38A1F0()
{
  JUMPOUT(0x22A38A160);
}

void sub_22A38A1F8()
{
  JUMPOUT(0x22A38A168);
}

void sub_22A38A200()
{
  JUMPOUT(0x22A38A16CLL);
}

void sub_22A38A208()
{
  JUMPOUT(0x22A38A174);
}

void sub_22A38A210()
{
  JUMPOUT(0x22A38A17CLL);
}

void sub_22A38A218()
{
  JUMPOUT(0x22A38A184);
}

void sub_22A38A220()
{
  JUMPOUT(0x22A38A18CLL);
}

void sub_22A38A228()
{
  JUMPOUT(0x22A38A194);
}

void sub_22A38A230()
{
  JUMPOUT(0x22A38A19CLL);
}

void sub_22A38A238()
{
  JUMPOUT(0x22A38A1A0);
}

void sub_22A38A240()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = v0;

  JUMPOUT(0x22A38A1A8);
}

void sub_22A38A250()
{
  JUMPOUT(0x22A38A1A8);
}

void sub_22A38A3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double readPoint(const unsigned __int8 *a1, __int16 a2)
{
  float v3;
  double v4;

  if ((a2 & 0x4000) != 0)
    return (double)*(__int16 *)a1;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 0);
  v4 = v3;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 4);
  return v4;
}

void sub_22A38A944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double readAffineTransform@<D0>(const unsigned __int8 *a1@<X0>, double *a2@<X8>)
{
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  float v12;
  double v13;
  float v14;
  double result;

  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 0);
  v5 = v4;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 4);
  v7 = v6;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 8);
  v9 = v8;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 12);
  v11 = v10;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 16);
  v13 = v12;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 20);
  result = v14;
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v11;
  a2[4] = v13;
  a2[5] = result;
  return result;
}

void sub_22A38B01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

double readFloat32Rect(const unsigned __int8 *a1)
{
  float v2;
  double v3;

  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 0);
  v3 = v2;
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 4);
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 8);
  +[MFByteUtils readFloat32FromByteArray:in_offset:](MFByteUtils, "readFloat32FromByteArray:in_offset:", a1, 12);
  return v3;
}

void sub_22A38B1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A38B65C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A38B754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A38B800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A38B968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A38BBA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38BD48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38BE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A38BF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A38C02C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A38C0D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double readRect(const unsigned __int8 *a1, __int16 a2)
{
  if ((a2 & 0x4000) != 0)
    return (double)*(__int16 *)a1;
  else
    return readFloat32Rect(a1);
}

void sub_22A38C198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38C280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38C394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38C4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38C5C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38C6C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38C7E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38C908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38CACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_22A38CD38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38CFFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A38D298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38D35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A38D430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A38D510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38D760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38D858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 184);
  if (v31)
  {
    *(_QWORD *)(v29 - 176) = v31;
    operator delete(v31);
  }

  _Unwind_Resume(a1);
}

uint64_t EMFPlusDrawStringLine::addWord(EMFPlusDrawStringLine *this, float a2, float a3, const unsigned __int16 *a4, unsigned int a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v10 = operator new();
  *(float *)v10 = a2;
  *(float *)(v10 + 4) = a3;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 8) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((_QWORD *)(v10 + 8), a4, (uint64_t)&a4[a5], a5);
  v11 = *((_QWORD *)this + 2);
  v12 = (uint64_t *)*((_QWORD *)this + 1);
  if ((unint64_t)v12 >= v11)
  {
    v14 = ((uint64_t)v12 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    v15 = v11 - *(_QWORD *)this;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 16, v17);
    else
      v18 = 0;
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v10;
    v13 = v19 + 1;
    v22 = *(char **)this;
    v21 = (char *)*((_QWORD *)this + 1);
    if (v21 != *(char **)this)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = *(char **)this;
    }
    *(_QWORD *)this = v19;
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v12 = v10;
    v13 = v12 + 1;
  }
  *((_QWORD *)this + 1) = v13;
  return *(v13 - 1);
}

void sub_22A38EB58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1010C40ABD0C285);
  _Unwind_Resume(a1);
}

uint64_t *destroyPointerVectorElements<EMFPlusDrawStringLine>(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;

  v1 = *result;
  if (result[1] != *result)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = *(uint64_t **)(v1 + 8 * v3);
      if (result)
      {
        EMFPlusDrawStringLine::~EMFPlusDrawStringLine((EMFPlusDrawStringLine *)result);
        result = (uint64_t *)MEMORY[0x22E2DD408]();
        v1 = *v2;
      }
      *(_QWORD *)(v1 + 8 * v3++) = 0;
      v1 = *v2;
    }
    while (v3 < (v2[1] - *v2) >> 3);
  }
  return result;
}

void sub_22A38F0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  uint64_t v18;
  void *v20;

  v20 = *(void **)(v18 + 56);
  if (v20)
  {
    *(_QWORD *)(v18 + 64) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_22A38F2F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F3F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F4B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F6D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F75C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A38F870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A38FE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22A39057C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A390FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, char a11)
{
  void *v11;
  void *v12;
  uint64_t i;

  for (i = 936; i != -8; i -= 16)
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22A3910E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void EMFPlusDrawStringLine::~EMFPlusDrawStringLine(EMFPlusDrawStringLine *this)
{
  void *v2;

  destroyPointerVectorElements<EMFPlusDrawStringWord>((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t *destroyPointerVectorElements<EMFPlusDrawStringWord>(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *result;
  if (result[1] != *result)
  {
    v2 = result;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v1 + 8 * v3);
      if (v4)
      {
        v5 = *(void **)(v4 + 8);
        if (v5)
        {
          *(_QWORD *)(v4 + 16) = v5;
          operator delete(v5);
        }
        result = (uint64_t *)MEMORY[0x22E2DD408](v4, 0x1010C40ABD0C285);
        v1 = *v2;
      }
      *(_QWORD *)(v1 + 8 * v3++) = 0;
      v1 = *v2;
    }
    while (v3 < (v2[1] - *v2) >> 3);
  }
  return result;
}

_QWORD *std::vector<CGPoint>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22A39120C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CGRect>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGRect>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_22A391280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGRect>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_22A391438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A391898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A391908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A391A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A391B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A391E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t MFWriteUInt16ToByteArray(uint64_t result, __int16 a2, unsigned int a3)
{
  *(_WORD *)(result + a3) = a2;
  return result;
}

void sub_22A39204C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3920F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A392168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3923B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A392524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A392664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A392728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A392848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A392908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3929FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A392C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A392EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A392F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A392FCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3930D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A393208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3932BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3933D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3935F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3937D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3938C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A393938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A393A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A393C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A393C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A393DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3941E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39429C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39459C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3946E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3947A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3948C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39493C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3949B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A394C58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A394D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A394DD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394E38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A394EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A394F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A395028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3950BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A395228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3952E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A395410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3954EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3955C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3956E0(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A3956C0);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A395800(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  void *v11;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A3957DCLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A39598C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A395A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A395BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A395C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A395D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A395D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A395F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_22A396390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A396504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MFPGradientBrush;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A3965E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A396868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A396A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A396B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void evaluateGradient(void *a1, double *a2, double *a3)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *a2;
  *(float *)&v4 = *a2;
  objc_msgSend(a1, "colorAtPosition:", v4);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "redComponent");
  *(_QWORD *)a3 = v5;
  objc_msgSend(v9, "greenComponent");
  *((_QWORD *)a3 + 1) = v6;
  objc_msgSend(v9, "blueComponent");
  *((_QWORD *)a3 + 2) = v7;
  objc_msgSend(v9, "alphaComponent");
  *((_QWORD *)a3 + 3) = v8;

}

void sub_22A396C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A396D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A397778(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x20C40960023A9);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<CGRect>::__init_with_size[abi:ne180100]<CGRect*,CGRect*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CGRect>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22A397904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_22A397988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A397AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A397C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A397D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A397F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39801C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A398160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A398224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A398544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A398610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3990E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_22A3992E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A399400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39951C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A399650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39974C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3997F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3998AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A399948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A399A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A399B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A399C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A399D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A399F6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39A040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39A134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39A208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39A4E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39A6E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A39AA98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39AC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39AD10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39AD98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39AE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_xmlNode *OCXFirstChildNamed(_xmlNode *a1, xmlChar *a2)
{
  _xmlNode *v2;

  v2 = CXFirstChildNamed(a1, a2);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v2);
  return v2;
}

uint64_t pOCXReplaceAlternateContentChildrenOfNode(uint64_t result)
{
  _xmlNode *v1;
  void (**v2)(xmlChar *);
  __objc2_class **i;
  _xmlNode *v4;
  _xmlNode *v5;
  _xmlNode *v6;
  const xmlChar *name;
  _xmlAttr *v8;
  xmlChar *String;
  _xmlNode *v10;
  _xmlNode *v11;
  xmlNode *v12;
  uint64_t v13;
  xmlNode *v14;
  uint64_t v15;
  xmlNode *v16;
  _xmlNode *v17;
  xmlNodePtr v18;
  void *v19;
  _xmlNode *v20;

  v20 = (_xmlNode *)result;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
    {
      v19 = **(void ***)(result + 64);
      v1 = (_xmlNode *)CXFindChild((_xmlNode *)result, (CXNamespace *)OCXMarkupCompatibilityNamespace, "AlternateContent");
      result = pOCXReplaceAlternateContentChildrenOfNode(v1);
      if (v1)
      {
        v2 = (void (**)(xmlChar *))MEMORY[0x24BEDE758];
        for (i = &OBJC_METACLASS___TCTaggedMessage.superclass;
              ;
              i = (__objc2_class **)(&OBJC_METACLASS___TCTaggedMessage + 8))
        {
          v4 = CXFirstChild(v1);
          pOCXReplaceAlternateContentChildrenOfNode(v4);
          if (v4)
            break;
          v6 = 0;
          v5 = 0;
LABEL_23:
          if (v6)
            v10 = v6;
          else
            v10 = v5;
          if (v10)
          {
            v11 = CXFirstChild(v10);
            pOCXReplaceAlternateContentChildrenOfNode(v11);
            if (v11)
            {
              v12 = xmlCopyNode(v11, 1);
              if (v12)
              {
                v13 = 0;
                v14 = 0;
                while (1)
                {
                  v15 = v13;
                  v16 = v12;
                  if (!xmlAddPrevSibling(v1, v12))
                    break;
                  v11 = CXNextSibling(v11);
                  pOCXReplaceAlternateContentChildrenOfNode(v11);
                  if (v11)
                  {
                    v12 = xmlCopyNode(v11, 1);
                    v13 = v15 + 1;
                    v14 = v16;
                    if (v12)
                      continue;
                  }
                  ++v15;
                  goto LABEL_36;
                }
                v16 = v14;
              }
              else
              {
                v15 = 0;
                v16 = 0;
              }
LABEL_36:
              if (v19)
              {
                if (v15 == 1 && v10 == v6)
                {
                  if (v5)
                  {
                    v17 = CXFirstChild(v5);
                    pOCXReplaceAlternateContentChildrenOfNode(v17);
                    if (v17)
                    {
                      v18 = xmlCopyNode(v17, 1);
                      if (v18)
                        objc_msgSend(v19, "setFallbackNode:forChoiceNode:", v18, v16);
                    }
                  }
                }
              }
            }
          }
          xmlUnlinkNode(v1);
          xmlFreeNode(v1);
          v1 = (_xmlNode *)CXFindChild(v20, (CXNamespace *)OCXMarkupCompatibilityNamespace, "AlternateContent");
          result = pOCXReplaceAlternateContentChildrenOfNode(v1);
          if (!v1)
            return result;
        }
        v5 = 0;
        v6 = 0;
        while (1)
        {
          name = v4->name;
          v8 = CXFindAttribute(v4, (xmlChar *)"Requires");
          if (v8)
          {
            String = xmlNodeListGetString(v8->doc, v8->children, 1);
            if (name)
              goto LABEL_11;
          }
          else
          {
            String = 0;
            if (name)
            {
LABEL_11:
              if (xmlStrEqual(name, (const xmlChar *)"Choice")
                && (objc_msgSend(i + 84, "isPrefixSupportedFromNodeContext:prefix:", v4, String) & 1) != 0)
              {
                v6 = v4;
              }
              else if (xmlStrEqual(name, (const xmlChar *)"Fallback"))
              {
                v5 = v4;
              }
            }
          }
          if (String)
            (*v2)(String);
          if (!v6 || !v5)
          {
            v4 = CXNextSibling(v4);
            pOCXReplaceAlternateContentChildrenOfNode(v4);
            if (v4)
              continue;
          }
          goto LABEL_23;
        }
      }
    }
  }
  return result;
}

_xmlNode *OCXNextSiblingNamed(_xmlNode *a1, xmlChar *a2)
{
  _xmlNode *v2;

  v2 = CXNextSiblingNamed(a1, a2);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v2);
  return v2;
}

uint64_t OCXFindChild(_xmlNode *a1, CXNamespace *a2, const char *a3)
{
  uint64_t v3;

  v3 = CXFindChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode(v3);
  return v3;
}

_xmlNode *OCXFindRequiredChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlNode *v3;

  v3 = CXFindRequiredChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v3);
  return v3;
}

_xmlNode *OCXFirstChild(_xmlNode *a1)
{
  _xmlNode *v1;

  v1 = CXFirstChild(a1);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v1);
  return v1;
}

_xmlNode *OCXNextSibling(_xmlNode *a1)
{
  _xmlNode *v1;

  v1 = CXNextSibling(a1);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v1);
  return v1;
}

_xmlNode *OCXFirstChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlNode *v3;

  v3 = CXFirstChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v3);
  return v3;
}

_xmlNode *OCXNextSibling(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlNode *v3;

  v3 = CXNextSibling(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v3);
  return v3;
}

xmlNodePtr OCXGetRootElement(_xmlDoc *a1)
{
  xmlNodePtr v1;

  v1 = CXGetRootElement(a1);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v1);
  return v1;
}

_xmlNode *OCXFindNextChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlNode *Child;

  Child = CXFindNextChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)Child);
  return Child;
}

xmlNode *OCXReplaceChoiceWithFallback(_xmlNode *a1)
{
  void *v2;
  xmlNode *v3;

  v2 = a1->doc->_private;
  v3 = (xmlNode *)objc_msgSend(v2, "fallbackNodeForChoiceNode:", a1);
  if (v3)
  {
    if (xmlAddPrevSibling(a1, v3))
    {
      xmlUnlinkNode(a1);
      ((void (*)(_xmlNode *))*MEMORY[0x24BEDE758])(a1);
      objc_msgSend(v2, "setFallbackNode:forChoiceNode:", 0, a1);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t OCXValidateST_PositiveCoordinate(uint64_t a1)
{
  if ((a1 & (unint64_t)~(a1 >> 63)) >= 0x1499700)
    return 21600000;
  else
    return a1 & ~(a1 >> 63);
}

void sub_22A39B36C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39B410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39B564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A39B754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39B8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A39B9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A39BB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A39BD44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A39BE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A39BEE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39BFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A39C118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39C330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39C7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_22A39C8A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39C90C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39C9A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A39CCF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39CD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A39CDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39D1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A39D360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A39D3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A39D458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A39D4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A39D590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A39E2D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39E3F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39E59C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39E718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39E7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39E8B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39E9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39EBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_22A39F76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39F860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39F95C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39FA58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39FAF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39FD50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39FE10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A39FE80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A0208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A0314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A0424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3A04D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3A05F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3A0668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A0744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A07AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A0858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A094C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3A09E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A0B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A0C74(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  id v12;

  if (a2 == 1)
  {
    v12 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A3A0D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A0DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

OCPZipPackage *OCPNewZipPackageWithBytes(const void *a1, uint64_t a2)
{
  OCPZipPackage *v2;
  void *v3;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
    if (v3)
    {
      v2 = -[OCPZipPackage initWithData:]([OCPZipPackage alloc], "initWithData:", v3);

    }
    else
    {
      v2 = 0;
    }
  }
  return v2;
}

void sub_22A3A1684(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x22A3A1658);
  }
  objc_exception_rethrow();
}

void sub_22A3A16AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

const CsData *OCPNewZipPackageWithCsData(CsData *a1)
{
  if (a1)
  {
    OCPNewZipPackageWithBytes(a1->var1, a1->var0);
    a1 = (CsData *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

const OcBinaryData *OCPNewZipPackageWithOcBinaryData(OcBinaryData *a1)
{
  if (a1)
  {
    OCPNewZipPackageWithBytes(a1->var5, a1->var3);
    a1 = (OcBinaryData *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

uint64_t storageBufferReallocFunction(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 - 8), "resizeStorageBuffer:", a2);
}

uint64_t StgModeFromSTStgMode(uint64_t result)
{
  void *v1;
  void *v2;

  if (result >= 3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "StgMode StgModeFromSTStgMode(STStgMode)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeCommon/StructuredStorage/ObjcInterface/STStgInfo.m");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v1, v2, 30, 0, "Illegal access mode found in structured storage library");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    return 2;
  }
  return result;
}

uint64_t STStgModeFromStgMode(uint64_t result)
{
  void *v1;
  void *v2;

  if (result >= 3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "STStgMode STStgModeFromStgMode(StgMode)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeCommon/StructuredStorage/ObjcInterface/STStgInfo.m");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v1, v2, 42, 0, "Illegal access mode found in structured storage library");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    return 2;
  }
  return result;
}

void sub_22A3A43B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A4498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A45FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t OCLanguageTypeForCharacter(unsigned int a1, BOOL *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  *a2 = a1 < 0x21;
  if (a1 < 0x590)
    return 0;
  if (a1 >> 5 < 0x85)
    return 2;
  v3 = a1 >> 8;
  if (a1 >> 8 < 0x11)
    return 0;
  if (a1 >> 9 < 9)
    return 1;
  if (a1 >> 7 < 0x2F)
    return 0;
  if (a1 < 0x2000)
    return 2;
  if (a1 >> 2 < 0x803)
    return 0;
  v4 = a1 >> 4;
  if (a1 >> 4 < 0x201)
    return 2;
  if (a1 < 0x202A)
    return 0;
  if (v4 < 0x203)
    return 2;
  if (v4 < 0x267)
    return 0;
  if (a1 >> 6 < 0x9F)
    return 2;
  v2 = 0;
  if (a1 >> 7 >= 0x5D && a1 != 55349)
  {
    if (a1 < 0xE000)
      return 1;
    if (a1 >= 0xF000)
    {
      if (v3 < 0xF1)
        return 3;
      if (v3 >= 0xF9)
      {
        if (v3 < 0xFB)
          return 1;
        if (a1 >= 0xFB1D)
        {
          if (v4 < 0xFE5)
            return 2;
          if (v4 >= 0xFE7)
            return v4 < 0xFFF;
        }
      }
    }
    return 0;
  }
  return v2;
}

void sub_22A3A486C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A48C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A49FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3A4ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A4B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A4BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A4C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCImporter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A3A505C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3A50D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3A5298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A53F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A5548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A55F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A5674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A5858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A59A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3A5AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A5B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void OCCAgileCryptoKey::~OCCAgileCryptoKey(OCCCryptoKey *this)
{
  void **var0;
  char *var1;
  char *var2;
  uint64_t v5;
  void **v6;
  char *v7;

  this->var0 = (void **)&off_24F3A5AC0;
  var0 = this[1].var0;
  if (var0)
  {
    OCCAgileMetaKey::~OCCAgileMetaKey((OCCAgileMetaKey *)var0);
    MEMORY[0x22E2DD408]();
  }
  var1 = this[1].var1;
  if (var1)
  {
    OCCAgileMetaKey::~OCCAgileMetaKey((OCCAgileMetaKey *)var1);
    MEMORY[0x22E2DD408]();
  }
  var2 = this[1].var2;
  if (var2)
    MEMORY[0x22E2DD3F0](var2, 0x1000C8077774924);
  v5 = *(_QWORD *)&this[1].var4;
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C8077774924);
  v6 = this[2].var0;
  if (v6)
    MEMORY[0x22E2DD3F0](v6, 0x1000C8077774924);
  v7 = this[2].var2;
  if (v7)
    MEMORY[0x22E2DD3F0](v7, 0x1000C8077774924);
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  OCCAgileCryptoKey::~OCCAgileCryptoKey(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t OCCAgileCryptoKey::create(OCCAgileCryptoKey *this, const void *a2)
{
  unint64_t v2;

  v2 = ((_DWORD)a2 - 8);
  if ((v2 & 0x80000000) != 0)
    return 0;
  else
    return OCCAgileCryptoKey::createFromXmlDescriptor((OCCAgileCryptoKey *)((char *)this + 8), (const void *)v2);
}

uint64_t OCCAgileCryptoKey::createFromXmlDescriptor(OCCAgileCryptoKey *this, const void *a2)
{
  const xmlDoc *Memory;
  uint64_t v3;
  xmlNodePtr RootElement;
  _xmlNode *v5;
  _xmlNode *v6;
  _xmlNode *v7;
  unsigned int *v8;
  OCCAgileMetaKey *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int last;
  uint64_t v16;
  int name;
  unsigned int *v19;
  unsigned __int8 *v20[2];
  unsigned __int8 *v21[2];
  unsigned __int8 *v22[2];
  _xmlNode v23;

  Memory = xmlReadMemory((const char *)this, (int)a2, 0, 0, 0);
  v3 = (uint64_t)Memory;
  if (Memory)
  {
    RootElement = xmlDocGetRootElement(Memory);
    if (RootElement)
    {
      v5 = RootElement;
      if (xmlStrEqual(RootElement->name, (const xmlChar *)"encryption"))
      {
        v7 = OCCAgileMetaKey::createByReadingRootNode(v5, v6);
        if (v7)
        {
          v9 = (OCCAgileMetaKey *)v7;
          *(_xmlNode **)((char *)&v23.last + 4) = 0;
          LODWORD(v23.last) = 0;
          *(const xmlChar **)((char *)&v23.name + 4) = 0;
          LODWORD(v23.name) = 0;
          if (OCCAgileCryptoKey::readDataIntegrityNode(v5, (_xmlNode *)((char *)&v23.last + 4), (unsigned __int8 **)&v23.last, (unsigned int *)&v23.name + 1, (unsigned __int8 **)&v23.name, v8))
          {
            *(void **)((char *)&v23._private + 4) = 0;
            LODWORD(v23._private) = 0;
            *(unsigned __int8 **)((char *)v22 + 4) = 0;
            LODWORD(v22[0]) = 0;
            *(unsigned __int8 **)((char *)v21 + 4) = 0;
            LODWORD(v21[0]) = 0;
            *(unsigned __int8 **)((char *)v20 + 4) = 0;
            LODWORD(v20[0]) = 0;
            if (OCCAgileCryptoKey::readPasswordKeyEncryptorNode(v5, (_xmlNode *)((char *)&v23._private + 4), (OCCAgileMetaKey **)&v23, (unsigned int *)v22 + 1, v22, (unsigned int *)v21 + 1, v21, (unsigned int *)v20 + 1, v20, v19))
            {
              xmlFreeDoc((xmlDocPtr)v3);
              v3 = operator new();
              v10 = (int)v23._private;
              v11 = *(uint64_t *)((char *)&v23._private + 4);
              v12 = *(uint64_t *)((char *)v20 + 4);
              v13 = (int)v20[0];
              v14 = *(uint64_t *)((char *)&v23.last + 4);
              last = (int)v23.last;
              v16 = *(uint64_t *)((char *)&v23.name + 4);
              name = (int)v23.name;
              OCCCryptoKey::OCCCryptoKey((OCCCryptoKey *)v3, *(char **)((char *)v22 + 4), *(char **)((char *)v21 + 4), v22[0], v21[0], (*(_DWORD **)((char *)&v23._private + 4))[2]);
              *(_QWORD *)v3 = &off_24F3A5AC0;
              *(_DWORD *)(v3 + 44) = v10;
              *(_QWORD *)(v3 + 48) = v11;
              *(_QWORD *)(v3 + 56) = v9;
              *(_QWORD *)(v3 + 64) = v12;
              *(_DWORD *)(v3 + 72) = v13;
              *(_QWORD *)(v3 + 80) = v14;
              *(_DWORD *)(v3 + 88) = last;
              *(_QWORD *)(v3 + 96) = v16;
              *(_DWORD *)(v3 + 104) = name;
              *(_QWORD *)(v3 + 112) = 0;
              return v3;
            }
            if (*(void **)((char *)&v23._private + 4))
            {
              OCCAgileMetaKey::~OCCAgileMetaKey(*(OCCAgileMetaKey **)((char *)&v23._private + 4));
              MEMORY[0x22E2DD408]();
            }
          }
          if (*(_xmlNode **)((char *)&v23.last + 4))
            MEMORY[0x22E2DD3F0](*(_xmlNode **)((char *)&v23.last + 4), 0x1000C8077774924);
          if (*(const xmlChar **)((char *)&v23.name + 4))
            MEMORY[0x22E2DD3F0](*(const xmlChar **)((char *)&v23.name + 4), 0x1000C8077774924);
          OCCAgileMetaKey::~OCCAgileMetaKey(v9);
          MEMORY[0x22E2DD408]();
        }
      }
    }
    xmlFreeDoc((xmlDocPtr)v3);
    return 0;
  }
  return v3;
}

void sub_22A3A6094(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C402D55F061);
  _Unwind_Resume(a1);
}

uint64_t OCCAgileCryptoKey::computeInputForHashFinalWithZeroBlockKey(const void *a1, unsigned int a2, const void *a3, unsigned int a4, uint64_t a5, int a6, void *a7, unsigned int a8)
{
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  int v21;
  void *v22;
  unsigned int v23;
  void *__src;
  void *v26;
  uint64_t v27;
  void *__p;
  char *v29;
  uint64_t v30;

  __p = 0;
  v29 = 0;
  v30 = 0;
  v16 = a4 + a2;
  if (v16)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v16);
    v17 = __p;
  }
  else
  {
    v17 = 0;
  }
  memcpy(v17, a3, a4);
  memcpy((char *)__p + a4, a1, a2);
  __src = 0;
  v26 = 0;
  v27 = 0;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5);
  if (v18)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__src, v18);
    v19 = __src;
  }
  else
  {
    v19 = 0;
  }
  (*(void (**)(uint64_t, void *, _QWORD, void *))(*(_QWORD *)a5 + 16))(a5, __p, ((_DWORD)v29 - (_DWORD)__p), v19);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5) + 4;
  if (v20 <= (int)v29 - (int)__p)
  {
    if (v20 < (int)v29 - (int)__p)
      v29 = (char *)__p + v20;
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v20 - ((_DWORD)v29 - (_DWORD)__p));
  }
  if (a6)
  {
    v21 = 0;
    do
    {
      *(_DWORD *)__p = v21;
      memcpy((char *)__p + 4, __src, ((_DWORD)v26 - (_DWORD)__src));
      (*(void (**)(uint64_t, void *, _QWORD, void *))(*(_QWORD *)a5 + 16))(a5, __p, ((_DWORD)v29 - (_DWORD)__p), __src);
      ++v21;
    }
    while (a6 != v21);
  }
  bzero(a7, a8);
  v22 = __src;
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5);
  memcpy(a7, v22, v23);
  if (__src)
  {
    v26 = __src;
    operator delete(__src);
  }
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_22A3A628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCAgileCryptoKey::getDataBlockSize(OCCAgileCryptoKey *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 8))(*(_QWORD *)(v1 + 16));
  else
    return 0;
}

uint64_t OCCAgileCryptoKey::deriveDecryptionKey(OCCAgileCryptoKey *this, void *a2)
{
  unsigned int v4;
  const void *v5;
  size_t v6;
  void *v7;
  char v8;
  uint64_t result;

  v4 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 24))(this);
  v5 = (const void *)*((_QWORD *)this + 14);
  v6 = v4;
  if (v5
    || (v7 = (void *)operator new[](),
        *((_QWORD *)this + 14) = v7,
        v8 = OCCAgileCryptoKey::decryptWithPasswordMetaKey(this, *((const void **)this + 8), *((_DWORD *)this + 18), &OCCAgileCryptoKey::DecryptionBlockKey, v7, v6), v5 = (const void *)*((_QWORD *)this + 14), (v8 & 1) != 0))
  {
    memcpy(a2, v5, v6);
    return 1;
  }
  else
  {
    if (v5)
      MEMORY[0x22E2DD3F0](*((_QWORD *)this + 14), 0x1000C8077774924);
    result = 0;
    *((_QWORD *)this + 14) = 0;
  }
  return result;
}

uint64_t OCCAgileCryptoKey::generateEncryptionMessageAuthentication(OCCAgileCryptoKey *this, SsrwOOStream *a2)
{
  OCCHmac *v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  void *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  void *v14;
  _OWORD *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;

  v4 = (OCCHmac *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 24) + 32))(*(_QWORD *)(*((_QWORD *)this + 7) + 24));
  v6 = OCCHmac::createFromName(v4, v5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 16) + 8))(*(_QWORD *)(*((_QWORD *)this + 7) + 16));
  v9 = v8 + v7 / v8 * v8;
  v10 = (void *)operator new[]();
  OCCAgileCryptoKey::deriveDecryptionKey(this, v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v12 = (_BYTE *)operator new[]();
  bzero(v12, v9);
  OCCUtilities::randomizeData(v12, (unsigned __int8 *)v11);
  (***(void (****)(_QWORD))(*((_QWORD *)this + 7) + 16))(*(_QWORD *)(*((_QWORD *)this + 7) + 16));
  v13 = (_BYTE *)operator new[]();
  OCCAgileMetaKey::computeInitializationVectorWithBlockKey(*((OCCAgileMetaKey **)this + 7), &OCCAgileCryptoKey::HmacBlockKey, 8u, v13);
  v14 = (void *)operator new[]();
  bzero(v14, v9);
  OCCCryptor::encrypt(*(OCCCryptor **)(*((_QWORD *)this + 7) + 16), v10, v13, v12, v9, v14, v9);
  v15 = (_OWORD *)operator new[]();
  v22 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  v16 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 6))(a2);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v23 = v12;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v6 + 32))(v6, v12, v17);
  v18 = (void *)operator new[]();
  bzero(v18, v9);
  SsrwOOStream::seekFromStart(a2, 0);
  for (; v16; v16 -= v24)
  {
    v15[2] = 0u;
    v15[3] = 0u;
    *v15 = 0u;
    v15[1] = 0u;
    if (v16 >= 0x40)
      v19 = 64;
    else
      v19 = v16;
    v24 = v19;
    (*((void (**)(SsrwOOStream *, _OWORD *, unsigned int *))a2->var0 + 7))(a2, v15, &v24);
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v6 + 40))(v6, v15, v24);
  }
  SsrwOOStream::seekFromStart(a2, v22);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v6 + 48))(v6, v18);
  v20 = (void *)operator new[]();
  bzero(v20, v9);
  OCCAgileMetaKey::computeInitializationVectorWithBlockKey(*((OCCAgileMetaKey **)this + 7), &OCCAgileCryptoKey::HmacValueBlockKey, 8u, v13);
  OCCCryptor::encrypt(*(OCCCryptor **)(*((_QWORD *)this + 7) + 16), v10, v13, v18, v9, v20, v9);
  *((_DWORD *)this + 22) = v9;
  memcpy(*((void **)this + 10), v14, v9);
  *((_DWORD *)this + 26) = v9;
  memcpy(*((void **)this + 12), v20, v9);
  MEMORY[0x22E2DD3F0](v20, 0x1000C8077774924);
  MEMORY[0x22E2DD3F0](v18, 0x1000C8077774924);
  MEMORY[0x22E2DD3F0](v15, 0x1000C8077774924);
  MEMORY[0x22E2DD3F0](v13, 0x1000C8077774924);
  MEMORY[0x22E2DD3F0](v14, 0x1000C8077774924);
  MEMORY[0x22E2DD3F0](v23, 0x1000C8077774924);
  MEMORY[0x22E2DD3F0](v10, 0x1000C8077774924);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return 1;
}

uint64_t OCCAgileCryptoKey::encryptionInfo(OCCAgileCryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  uint64_t v6;
  size_t v7;
  XmlBufferOutputStream *BufferStream;
  XmlOutputStream *StreamOfType;
  XmlWriter *v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  const char *v15;
  size_t v16;
  size_t v18;
  const char *v19;
  const char *v20;
  size_t v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  const char *v26;
  size_t v27;
  size_t v28;
  const char *v29;
  const char *v30;
  size_t v31;

  *a2 = 0;
  *a3 = 0;
  if (!*((_QWORD *)this + 6) || !*((_QWORD *)this + 8) || !*((_QWORD *)this + 10) || !*((_QWORD *)this + 12))
    return 0;
  *a3 = 1057;
  v6 = operator new[]();
  *a2 = (unsigned __int8 *)v6;
  v7 = *a3;
  bzero((void *)v6, v7);
  *(_QWORD *)v6 = 0x4000040004;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>";
  *(_OWORD *)(v6 + 24) = *(_OWORD *)".0\" encoding=\"UTF-8\" standalone=\"yes\"?>";
  *(_OWORD *)(v6 + 40) = *(_OWORD *)"F-8\" standalone=\"yes\"?>";
  *(_QWORD *)(v6 + 55) = *(_QWORD *)"=\"yes\"?>";
  *(_WORD *)(v6 + 63) = 2573;
  BufferStream = XmlOutputStream::createBufferStream((XmlOutputStream *)(v6 + 65), (char *)(v7 - 65));
  StreamOfType = XmlOutputStream::createStreamOfType(1, BufferStream);
  v10 = (XmlWriter *)operator new(0x80uLL);
  XmlWriter::XmlWriter(v10, StreamOfType, 0);
  *((_BYTE *)v10 + 124) = 1;
  XmlWriter::openNode(v10, "encryption", 10);
  XmlWriter::addAttribute(v10, "xmlns", "http://schemas.microsoft.com/office/2006/encryption", 51, 0);
  XmlWriter::addAttribute(v10, "xmlns:p", "http://schemas.microsoft.com/office/2006/keyEncryptor/password", 62, 0);
  XmlWriter::openNode(v10, "keyData", 7);
  XmlWriter::addAttribute((char **)v10, "saltSize", *(_DWORD *)(*((_QWORD *)this + 7) + 8), 0);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 16) + 8))(*(_QWORD *)(*((_QWORD *)this + 7) + 16));
  XmlWriter::addAttribute((char **)v10, "blockSize", v11, 0);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 16) + 16))(*(_QWORD *)(*((_QWORD *)this + 7) + 16));
  XmlWriter::addAttribute((char **)v10, "keyBits", 8 * v12, 0);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 24) + 24))(*(_QWORD *)(*((_QWORD *)this + 7) + 24));
  XmlWriter::addAttribute((char **)v10, "hashSize", v13, 0);
  v14 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 16) + 24))(*(_QWORD *)(*((_QWORD *)this + 7) + 16));
  v15 = v14;
  if (v14)
    v16 = strlen(v14);
  else
    v16 = 0;
  XmlWriter::addAttribute(v10, "cipherAlgorithm", v15, v16, 0);
  v18 = strlen(OCCAgileCryptoKey::encryptionInfo(unsigned char *&,unsigned int &)::kCipherModeTable[*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 7) + 16) + 12)]);
  XmlWriter::addAttribute(v10, "cipherChaining", OCCAgileCryptoKey::encryptionInfo(unsigned char *&,unsigned int &)::kCipherModeTable[*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 7) + 16) + 12)], v18, 0);
  v19 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 24) + 32))(*(_QWORD *)(*((_QWORD *)this + 7) + 24));
  v20 = v19;
  if (v19)
    v21 = strlen(v19);
  else
    v21 = 0;
  XmlWriter::addAttribute(v10, "hashAlgorithm", v20, v21, 0);
  XmlWriter::openAttribute(v10, "saltValue", 9);
  (**(void (***)(XmlWriter *, _QWORD, _QWORD))v10)(v10, **((_QWORD **)this + 7), *(unsigned int *)(*((_QWORD *)this + 7) + 8));
  XmlWriter::closeAttribute(v10);
  XmlWriter::closeNode((CsString *)v10);
  XmlWriter::openNode(v10, "dataIntegrity", 13);
  XmlWriter::openAttribute(v10, "encryptedHmacKey", 16);
  (**(void (***)(XmlWriter *, _QWORD, _QWORD))v10)(v10, *((_QWORD *)this + 10), *((unsigned int *)this + 22));
  XmlWriter::closeAttribute(v10);
  XmlWriter::openAttribute(v10, "encryptedHmacValue", 18);
  (**(void (***)(XmlWriter *, _QWORD, _QWORD))v10)(v10, *((_QWORD *)this + 12), *((unsigned int *)this + 26));
  XmlWriter::closeAttribute(v10);
  XmlWriter::closeNode((CsString *)v10);
  XmlWriter::openNode(v10, "keyEncryptors", 13);
  XmlWriter::openNode(v10, "keyEncryptor", 12);
  XmlWriter::addAttribute(v10, "uri", "http://schemas.microsoft.com/office/2006/keyEncryptor/password", 62, 0);
  XmlWriter::openNode(v10, "p:encryptedKey", 14);
  XmlWriter::addAttribute((char **)v10, "spinCount", *((_DWORD *)this + 11), 0);
  XmlWriter::addAttribute((char **)v10, "saltSize", *(_DWORD *)(*((_QWORD *)this + 6) + 8), 0);
  v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 8))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
  XmlWriter::addAttribute((char **)v10, "blockSize", v22, 0);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 16))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
  XmlWriter::addAttribute((char **)v10, "keyBits", 8 * v23, 0);
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 24) + 24))(*(_QWORD *)(*((_QWORD *)this + 6) + 24));
  XmlWriter::addAttribute((char **)v10, "hashSize", v24, 0);
  v25 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 24))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
  v26 = v25;
  if (v25)
    v27 = strlen(v25);
  else
    v27 = 0;
  XmlWriter::addAttribute(v10, "cipherAlgorithm", v26, v27, 0);
  v28 = strlen(OCCAgileCryptoKey::encryptionInfo(unsigned char *&,unsigned int &)::kCipherModeTable[*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 6) + 16) + 12)]);
  XmlWriter::addAttribute(v10, "cipherChaining", OCCAgileCryptoKey::encryptionInfo(unsigned char *&,unsigned int &)::kCipherModeTable[*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 6) + 16) + 12)], v28, 0);
  v29 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 24) + 32))(*(_QWORD *)(*((_QWORD *)this + 6) + 24));
  v30 = v29;
  if (v29)
    v31 = strlen(v29);
  else
    v31 = 0;
  XmlWriter::addAttribute(v10, "hashAlgorithm", v30, v31, 0);
  XmlWriter::openAttribute(v10, "saltValue", 9);
  (**(void (***)(XmlWriter *, _QWORD, _QWORD))v10)(v10, **((_QWORD **)this + 6), *(unsigned int *)(*((_QWORD *)this + 6) + 8));
  XmlWriter::closeAttribute(v10);
  XmlWriter::openAttribute(v10, "encryptedVerifierHashInput", 26);
  (**(void (***)(XmlWriter *, _QWORD, _QWORD))v10)(v10, *((_QWORD *)this + 2), *((unsigned int *)this + 8));
  XmlWriter::closeAttribute(v10);
  XmlWriter::openAttribute(v10, "encryptedVerifierHashValue", 26);
  (**(void (***)(XmlWriter *, _QWORD, _QWORD))v10)(v10, *((_QWORD *)this + 3), *((unsigned int *)this + 9));
  XmlWriter::closeAttribute(v10);
  XmlWriter::openAttribute(v10, "encryptedKeyValue", 17);
  (**(void (***)(XmlWriter *, _QWORD, _QWORD))v10)(v10, *((_QWORD *)this + 8), *((unsigned int *)this + 18));
  XmlWriter::closeAttribute(v10);
  XmlWriter::closeNode((CsString *)v10);
  XmlWriter::closeNode((CsString *)v10);
  XmlWriter::closeNode((CsString *)v10);
  XmlWriter::closeNode((CsString *)v10);
  (*(void (**)(XmlWriter *))(*(_QWORD *)v10 + 32))(v10);
  (*(void (**)(XmlOutputStream *))(*(_QWORD *)StreamOfType + 8))(StreamOfType);
  (*(void (**)(XmlBufferOutputStream *))(*(_QWORD *)BufferStream + 8))(BufferStream);
  return 1;
}

void sub_22A3A6E4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL OCCAgileCryptoKey::isVersionValid(OCCAgileCryptoKey *this, int a2)
{
  return (_DWORD)this == 4 && a2 == 4;
}

const void *OCCAgileCryptoKey::isAgile(const void *this, const OCCCryptoKey *a2)
{
  if (this)
  return this;
}

uint64_t OCCAgileCryptoKey::getSeedSize(OCCAgileCryptoKey *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 88))(this);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1) + 8;
}

uint64_t OCCAgileCryptoKey::computeKeySeed(OCCAgileCryptoKey *this, const void *a2, unsigned int a3, void *a4)
{
  uint64_t v8;
  const void *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v8 = *((_QWORD *)this + 6);
  v9 = *(const void **)v8;
  v10 = *(_DWORD *)(v8 + 8);
  v11 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 88))(this);
  v12 = *((_DWORD *)this + 11);
  v13 = (**(uint64_t (***)(OCCAgileCryptoKey *))this)(this);
  OCCAgileCryptoKey::computeInputForHashFinalWithZeroBlockKey(a2, a3, v9, v10, v11, v12, a4, v13);
  return 1;
}

uint64_t OCCAgileCryptoKey::decryptVerificationInfo(OCCAgileCryptoKey *this, const void *a2, const void *a3, void *a4, void *a5)
{
  uint64_t result;
  uint64_t v9;
  OCCCryptor *v10;
  const void *v11;
  const void *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;

  result = OCCCryptor::decrypt(*(OCCCryptor **)(*((_QWORD *)this + 6) + 16), a2, *(const void **)(*((_QWORD *)this + 6) + 32), *((const void **)this + 2), *((_DWORD *)this + 8), a4, *((_DWORD *)this + 10));
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)this + 6);
    v10 = *(OCCCryptor **)(v9 + 16);
    v11 = *(const void **)(v9 + 32);
    v12 = (const void *)*((_QWORD *)this + 3);
    v13 = *((_DWORD *)this + 9);
    v14 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 88))(this);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    return OCCCryptor::decrypt(v10, a3, v11, v12, v13, a5, v15);
  }
  return result;
}

uint64_t OCCAgileCryptoKey::getCipherKeySize(OCCAgileCryptoKey *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 16))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
}

uint64_t OCCAgileCryptoKey::getBlockKeySize(OCCAgileCryptoKey *this)
{
  return 8;
}

uint64_t OCCAgileCryptoKey::computeVerifierBlockKey(OCCAgileCryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 32))(this);
  memcpy(a2, &OCCAgileCryptoKey::VerifierBlockKey, v3);
  return 1;
}

uint64_t OCCAgileCryptoKey::computeVerifierHashBlockKey(OCCAgileCryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 32))(this);
  memcpy(a2, &OCCAgileCryptoKey::VerifierHashBlockKey, v3);
  return 1;
}

uint64_t OCCAgileCryptoKey::deriveKey(OCCAgileCryptoKey *this, _QWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  void *v13;
  void *__p;
  void *v16;
  uint64_t v17;

  v5 = *((_QWORD *)this + 1);
  *(_QWORD *)(v5 + (**(unsigned int (***)(OCCAgileCryptoKey *))this)(this) - 8) = *a2;
  __p = 0;
  v16 = 0;
  v17 = 0;
  v6 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 88))(this);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (v7)
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v7);
  v8 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 88))(this);
  v9 = *((_QWORD *)this + 1);
  v10 = (**(uint64_t (***)(OCCAgileCryptoKey *))this)(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v8 + 16))(v8, v9, v10, __p);
  v11 = (char *)__p;
  LODWORD(v9) = (_DWORD)v16;
  v12 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 24))(this);
  OCCUtilities::resizeData(v11, (char *)(v9 - (_DWORD)v11), v12, 0x36uLL, a3, v13);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_22A3A71CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCAgileCryptoKey::decryptWithPasswordMetaKey(OCCAgileCryptoKey *this, const void *a2, unsigned int a3, const void *a4, void *a5, unsigned int a6)
{
  unsigned int v12;
  void *v13;
  uint64_t v14;
  void *__p;
  void *v17;
  uint64_t v18;

  __p = 0;
  v17 = 0;
  v18 = 0;
  v12 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(_QWORD *)this + 24))(this);
  if (v12)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v12);
    v13 = __p;
  }
  else
  {
    v13 = 0;
  }
  if (((*(uint64_t (**)(OCCAgileCryptoKey *, const void *, void *))(*(_QWORD *)this + 56))(this, a4, v13) & 1) != 0)
    v14 = OCCCryptor::decrypt(*(OCCCryptor **)(*((_QWORD *)this + 6) + 16), __p, *(const void **)(*((_QWORD *)this + 6) + 32), a2, a3, a5, a6);
  else
    v14 = 0;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_22A3A72BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCAgileCryptoKey::deriveDecryptionKey(OCCAgileMetaKey **this, int a2, void *a3, unsigned __int8 **a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;

  v9 = a2;
  v6 = OCCAgileCryptoKey::deriveDecryptionKey((OCCAgileCryptoKey *)this, a3);
  if ((_DWORD)v6)
  {
    (***((void (****)(_QWORD))this[7] + 2))(*((_QWORD *)this[7] + 2));
    v7 = (unsigned __int8 *)operator new[]();
    *a4 = v7;
    OCCAgileMetaKey::computeInitializationVectorWithBlockKey(this[7], &v9, 4u, v7);
  }
  return v6;
}

uint64_t OCCAgileCryptoKey::decryptBlockUsingDecryptionKey(OCCAgileCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::decrypt(*(OCCCryptor **)(*((_QWORD *)this + 7) + 16), a2, a3, a4, a5, a6, a5);
}

uint64_t OCCAgileCryptoKey::encryptBlockUsingEncryptionKey(OCCAgileCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::encrypt(*(OCCCryptor **)(*((_QWORD *)this + 7) + 16), a2, a3, a4, a5, a6, a5);
}

uint64_t OCCAgileCryptoKey::getHashAlgorithm(OCCAgileCryptoKey *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 24);
}

OCCSegmenter *OCCAgileCryptoKey::createXmlSegmenter(OCCAgileCryptoKey *this)
{
  OCCSegmenter *v1;

  v1 = (OCCSegmenter *)operator new();
  OCCSegmenter::OCCSegmenter(v1, 4096);
  *(_QWORD *)v1 = &off_24F3A5B80;
  return v1;
}

void sub_22A3A73DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

unint64_t OCCAgileCryptoKey::readDataIntegrityNode(_xmlNode *this, _xmlNode *a2, unsigned __int8 **a3, unsigned int *a4, unsigned __int8 **a5, unsigned int *a6)
{
  unint64_t v6;
  CXNamespace *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = (unint64_t)this;
  if (this)
  {
    +[OCCDecryptor agileDescriptorNamespace](OCCDecryptor, "agileDescriptorNamespace", a3, a4, a5, a6);
    v11 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
    v6 = OCXFindChild((_xmlNode *)v6, v11, "dataIntegrity");

    if (v6)
    {
      CXRequiredBase64DecodedDataAttribute((_xmlNode *)v6, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedHmacKey");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        CXRequiredBase64DecodedDataAttribute((_xmlNode *)v6, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedHmacValue");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v13 != 0;
        if (v13)
        {
          *(_DWORD *)a3 = objc_msgSend(v12, "length");
          v14 = (void *)operator new[]();
          a2->_private = v14;
          memcpy(v14, (const void *)objc_msgSend(objc_retainAutorelease(v12), "bytes"), *(unsigned int *)a3);
          *(_DWORD *)a5 = objc_msgSend(v13, "length");
          v15 = (void *)operator new[]();
          *(_QWORD *)a4 = v15;
          memcpy(v15, (const void *)objc_msgSend(objc_retainAutorelease(v13), "bytes"), *(unsigned int *)a5);
        }

      }
      else
      {
        v6 = 0;
      }

    }
  }
  return v6;
}

void sub_22A3A7570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t OCCAgileCryptoKey::readPasswordKeyEncryptorNode(_xmlNode *this, _xmlNode *a2, OCCAgileMetaKey **a3, unsigned int *a4, unsigned __int8 **a5, unsigned int *a6, unsigned __int8 **a7, unsigned int *a8, unsigned __int8 **a9, unsigned int *a10)
{
  CXNamespace *v18;
  _xmlNode *v19;
  CXNamespace *v20;
  _xmlNode *v21;
  CXNamespace *v22;
  _xmlNode *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  _xmlNode *v27;
  uint64_t v28;
  unsigned int *v29;
  _xmlNode *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v36;
  id v37;

  if (!this)
    return 0;
  +[OCCDecryptor agileDescriptorNamespace](OCCDecryptor, "agileDescriptorNamespace");
  v18 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v19 = (_xmlNode *)OCXFindChild(this, v18, "keyEncryptors");

  if (!v19)
    return 0;
  +[OCCDecryptor agileDescriptorNamespace](OCCDecryptor, "agileDescriptorNamespace");
  v20 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v21 = (_xmlNode *)OCXFindChild(v19, v20, "keyEncryptor");

  if (!v21)
    return 0;
  +[OCCDecryptor agilePasswordKeyEncryptorNamespace](OCCDecryptor, "agilePasswordKeyEncryptorNamespace");
  v22 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v23 = (_xmlNode *)OCXFindChild(v21, v22, "encryptedKey");

  if (!v23)
    return 0;
  CXRequiredBase64DecodedDataAttribute(v23, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedVerifierHashInput");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24)
  {
    CXRequiredBase64DecodedDataAttribute(v23, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedVerifierHashValue");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v25)
    {
      v37 = v25;
      CXRequiredBase64DecodedDataAttribute(v23, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedKeyValue");
      v36 = (id)objc_claimAutoreleasedReturnValue();
      if (v36
        && (v26 = CXRequiredUnsignedLongAttribute(v23, (CXNamespace *)CXNoNamespace, (xmlChar *)"spinCount"), (*(_DWORD *)a3 = v26) != 0)&& (v30 = OCCAgileMetaKey::createByReadingKeyDataNode(v23, v27, v28, v29), (a2->_private = v30) != 0))
      {
        *(_DWORD *)a5 = objc_msgSend(v24, "length");
        v31 = (void *)operator new[]();
        *(_QWORD *)a4 = v31;
        memcpy(v31, (const void *)objc_msgSend(objc_retainAutorelease(v24), "bytes"), *(unsigned int *)a5);
        *(_DWORD *)a7 = objc_msgSend(v37, "length");
        v32 = (void *)operator new[]();
        *(_QWORD *)a6 = v32;
        memcpy(v32, (const void *)objc_msgSend(objc_retainAutorelease(v37), "bytes"), *(unsigned int *)a7);
        *(_DWORD *)a9 = objc_msgSend(v36, "length");
        v33 = (void *)operator new[]();
        *(_QWORD *)a8 = v33;
        memcpy(v33, (const void *)objc_msgSend(objc_retainAutorelease(v36), "bytes"), *(unsigned int *)a9);
        v34 = 1;
      }
      else
      {
        v34 = 0;
      }

      v25 = v37;
    }
    else
    {
      v34 = 0;
    }

  }
  else
  {
    v34 = 0;
  }

  return v34;
}

void sub_22A3A7834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t OCCSegmenterWithIncreasingSegmentNumbers::getNextSegmentNumber(OCCSegmenterWithIncreasingSegmentNumbers *this, int a2)
{
  return (a2 + 1);
}

void OCCSegmenterWithIncreasingSegmentNumbers::~OCCSegmenterWithIncreasingSegmentNumbers(OCCSegmenterWithIncreasingSegmentNumbers *this)
{
  JUMPOUT(0x22E2DD408);
}

void std::vector<unsigned char,ChAllocator<unsigned char>>::__append(char **a1, unsigned int a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char v16;

  v5 = a1[1];
  v4 = a1[2];
  if ((int)v4 - (int)v5 >= a2)
  {
    if (a2)
    {
      bzero(a1[1], a2);
      v5 += a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (char *)(v5 - *a1);
    v8 = (_DWORD)v7 + a2;
    v9 = (_DWORD)v4 - *a1;
    if (2 * v9 > v7 + a2)
      v8 = 2 * v9;
    if (v9 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v8;
    if ((_DWORD)v10)
    {
      v11 = (char *)operator new(v10);
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    v12 = &v11[v7];
    v13 = &v11[v10];
    v14 = a2;
    v15 = &v12[a2];
    bzero(v12, v14);
    if (v5 != v6)
    {
      do
      {
        v16 = *--v5;
        *--v12 = v16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

void OCCAgileMetaKey::~OCCAgileMetaKey(OCCAgileMetaKey *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C8077774924);
}

uint64_t OCCAgileMetaKey::OCCAgileMetaKey(uint64_t a1, uint64_t a2, int a3, void (***a4)(_QWORD), uint64_t a5)
{
  char *v6;
  char *v7;
  unsigned int v8;
  void *v9;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  (**a4)(a4);
  *(_QWORD *)(a1 + 32) = operator new[]();
  v6 = *(char **)a1;
  v7 = (char *)*(unsigned int *)(a1 + 8);
  v8 = (***(uint64_t (****)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 16));
  OCCUtilities::resizeData(v6, v7, v8, 0x36uLL, *(_BYTE **)(a1 + 32), v9);
  return a1;
}

_xmlNode *OCCAgileMetaKey::createByReadingRootNode(_xmlNode *this, _xmlNode *a2)
{
  _xmlNode *v2;
  CXNamespace *v3;
  _xmlNode *v4;
  _xmlNode *v5;
  uint64_t v6;
  unsigned int *v7;

  if (this)
  {
    v2 = this;
    +[OCCDecryptor agileDescriptorNamespace](OCCDecryptor, "agileDescriptorNamespace");
    v3 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
    v4 = (_xmlNode *)OCXFindChild(v2, v3, "keyData");

    return OCCAgileMetaKey::createByReadingKeyDataNode(v4, v5, v6, v7);
  }
  return this;
}

void sub_22A3A7AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_xmlNode *OCCAgileMetaKey::createByReadingKeyDataNode(_xmlNode *this, _xmlNode *a2, uint64_t a3, unsigned int *a4)
{
  _xmlNode *v4;
  OCCCryptor **v5;
  OCCHash **v6;
  uint64_t v8;
  void (***v9)(_QWORD);
  int v10;
  uint64_t v11;

  v4 = this;
  if (this)
  {
    v11 = 0;
    v10 = 0;
    if (OCCAgileMetaKey::readSaltFromNode(this, (_xmlNode *)&v11, (unsigned __int8 **)&v10, a4))
    {
      v9 = 0;
      if (OCCAgileMetaKey::readCipherAlgorithmFromNode(v4, (_xmlNode *)&v9, v5))
      {
        v8 = 0;
        if (OCCAgileMetaKey::readHashAlgorithmFromNode(v4, (_xmlNode *)&v8, v6))
        {
          v4 = (_xmlNode *)operator new();
          OCCAgileMetaKey::OCCAgileMetaKey((uint64_t)v4, v11, v10, v9, v8);
          return v4;
        }
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      if (v9)
        (*v9)[5](v9);
    }
    if (v11)
      MEMORY[0x22E2DD3F0](v11, 0x1000C8077774924);
    return 0;
  }
  return v4;
}

void sub_22A3A7BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1030C40E917E955);
  _Unwind_Resume(a1);
}

uint64_t OCCAgileMetaKey::readSaltFromNode(_xmlNode *this, _xmlNode *a2, unsigned __int8 **a3, unsigned int *a4)
{
  unsigned int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  if (!this)
    return 0;
  v7 = CXRequiredUnsignedLongAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"saltSize");
  *(_DWORD *)a3 = v7;
  if (!v7)
    return 0;
  CXRequiredBase64DecodedDataAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"saltValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8 && (v10 = *(unsigned int *)a3, objc_msgSend(v8, "length") == v10))
  {
    v11 = (void *)operator new[]();
    a2->_private = v11;
    memcpy(v11, (const void *)objc_msgSend(objc_retainAutorelease(v9), "bytes"), *(unsigned int *)a3);
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_22A3A7CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_xmlNode *OCCAgileMetaKey::readCipherAlgorithmFromNode(_xmlNode *this, _xmlNode *a2, OCCCryptor **a3)
{
  _xmlNode *v3;
  unsigned int v5;
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;

  v3 = this;
  if (this)
  {
    v5 = CXRequiredUnsignedLongAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"keyBits");
    if (v5)
      v6 = (v5 & 7) == 0;
    else
      v6 = 0;
    if (v6)
    {
      CXRequiredStringAttribute(v3, (CXNamespace *)CXNoNamespace, (xmlChar *)"cipherAlgorithm");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7 && (objc_msgSend(v7, "isEqualToString:", CFSTR("RC4")) & 1) == 0)
      {
        CXRequiredStringAttribute(v3, (CXNamespace *)CXNoNamespace, (xmlChar *)"cipherChaining");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9
          && (v10 = (void *)OCCCryptor::create((OCCCryptor *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), (const char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"), (const char *)(v5 >> 3)), (a2->_private = v10) != 0))
        {
          v11 = CXRequiredUnsignedLongAttribute(v3, (CXNamespace *)CXNoNamespace, (xmlChar *)"blockSize");
          if (v11 && (*(unsigned int (**)(void *))(*(_QWORD *)a2->_private + 8))(a2->_private) == v11)
          {
            v3 = (_xmlNode *)1;
          }
          else
          {
            if (a2->_private)
              (*(void (**)(void *))(*(_QWORD *)a2->_private + 40))(a2->_private);
            v3 = 0;
            a2->_private = 0;
          }
        }
        else
        {
          v3 = 0;
        }

      }
      else
      {
        v3 = 0;
      }

    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_22A3A7E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t OCCAgileMetaKey::readHashAlgorithmFromNode(_xmlNode *this, _xmlNode *a2, OCCHash **a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  OCCHash *v8;
  const char *v9;
  _QWORD *v10;

  if (!this)
    return 0;
  v5 = (uint64_t)CXRequiredUnsignedLongAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"hashSize");
  if ((_DWORD)v5)
  {
    CXRequiredStringAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"hashAlgorithm");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = (OCCHash *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
      v10 = OCCHash::createFromName(v8, v9);
      a2->_private = v10;
      if (v10)
      {
        if ((*(unsigned int (**)(_QWORD *))(*v10 + 24))(v10) == (_DWORD)v5)
        {
          v5 = 1;
LABEL_12:

          return v5;
        }
        if (a2->_private)
          (*(void (**)(void *))(*(_QWORD *)a2->_private + 8))(a2->_private);
      }
      v5 = 0;
      a2->_private = 0;
      goto LABEL_12;
    }
    v5 = 0;
    goto LABEL_12;
  }
  return v5;
}

void sub_22A3A7F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OCCAgileMetaKey::computeInitializationVectorWithBlockKey(OCCAgileMetaKey *this, const void *a2, unsigned int a3, _BYTE *a4)
{
  unsigned int v8;
  void *v9;
  unsigned int v10;
  void *v11;
  char *v12;
  int v13;
  unsigned int v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v8 = *((_DWORD *)this + 2);
  if (v8 + a3)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v19, v8 + a3);
    v9 = v19;
    v8 = *((_DWORD *)this + 2);
  }
  else
  {
    v9 = 0;
  }
  memcpy(v9, *(const void **)this, v8);
  memcpy((char *)v19 + *((unsigned int *)this + 2), a2, a3);
  __p = 0;
  v17 = 0;
  v18 = 0;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v10);
    v11 = __p;
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, void *, _QWORD, void *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v19, ((_DWORD)v20 - (_DWORD)v19), v11);
  v12 = (char *)__p;
  v13 = (int)v17;
  v14 = (***((uint64_t (****)(_QWORD))this + 2))(*((_QWORD *)this + 2));
  OCCUtilities::resizeData(v12, (char *)(v13 - (_DWORD)v12), v14, 0x36uLL, a4, v15);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_22A3A80A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22A3A8130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCCDecryptor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A3A81D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A824C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A8394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3A8424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A86DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_22A3A88F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A8AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3A8BC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_22A3A8D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3A9060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3A92D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A93B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A9418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3A9588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A97E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3A9904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3A9B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A3A9C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A9C90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3A9E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3A9F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3AA074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3AA1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3AA3B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3AA448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3AA598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3AA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t i;

  for (i = 112; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_22A3AAB34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3AACE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3AADA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3AAE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3AAFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3AB210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3AB388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3AB46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3AB514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3AB608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3AB70C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3AB860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3AB944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id OCXPartRelationshipsByTypeWithFallback(OCPPackagePart *a1, OCXState *a2, objc_selector *a3)
{
  OCPPackagePart *v5;
  OCXState *v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  -[OCPPackagePart relationshipsByType:](v5, "relationshipsByType:", -[OCXState performSelector:](v6, "performSelector:", a3));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v7, "count") && -[OCXState xmlFormat](v6, "xmlFormat") == 1)
  {
    -[OCXState setXmlFormat:](v6, "setXmlFormat:", 0);
    -[OCPPackagePart relationshipsByType:](v5, "relationshipsByType:", -[OCXState performSelector:](v6, "performSelector:", a3));
    v8 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v8;
    -[OCXState setXmlFormat:](v6, "setXmlFormat:", 1);
  }

  return v7;
}

void sub_22A3ABDF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id OCXFirstPartWithRelationshipOfTypeToPartWithFallback(OCPPackagePart *a1, OCXState *a2, objc_selector *a3)
{
  OCPPackagePart *v5;
  OCXState *v6;
  void *v7;

  v5 = a1;
  v6 = a2;
  -[OCPPackagePart firstPartWithRelationshipOfType:](v5, "firstPartWithRelationshipOfType:", -[OCXState performSelector:](v6, "performSelector:", a3));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    if (-[OCXState xmlFormat](v6, "xmlFormat") == 1)
    {
      -[OCXState setXmlFormat:](v6, "setXmlFormat:", 0);
      -[OCPPackagePart firstPartWithRelationshipOfType:](v5, "firstPartWithRelationshipOfType:", -[OCXState performSelector:](v6, "performSelector:", a3));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[OCXState setXmlFormat:](v6, "setXmlFormat:", 1);
    }
    else
    {
      v7 = 0;
    }
  }

  return v7;
}

void sub_22A3ABEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id NSDateWithCsDateTime(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;

  v2 = objc_alloc(MEMORY[0x24BDBCE48]);
  v3 = (void *)objc_msgSend(v2, "initWithCalendarIdentifier:", *MEMORY[0x24BDBCA18]);
  v4 = objc_alloc_init(MEMORY[0x24BDBCE68]);
  objc_msgSend(v4, "setYear:", (unsigned __int16)a1);
  objc_msgSend(v4, "setMonth:", BYTE2(a1));
  objc_msgSend(v4, "setDay:", BYTE3(a1));
  objc_msgSend(v4, "setHour:", BYTE4(a1));
  objc_msgSend(v4, "setMinute:", BYTE5(a1));
  objc_msgSend(v4, "setSecond:", BYTE6(a1));
  objc_msgSend(v3, "dateFromComponents:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_22A3ABFB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CsLeReadUInt64(uint64_t a1)
{
  return *(_QWORD *)a1;
}

double *CsLeWriteFloat64(double *result, double a2)
{
  *result = a2;
  return result;
}

double CsGetFloat64FromPackedLocation(uint64_t a1)
{
  if (a1)
    return *(double *)a1;
  else
    return 0.0;
}

uint64_t ChValueIsValidCharSet(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 <= 159)
  {
    if (((a1 - 77) > 0x3B || ((1 << (a1 - 77)) & 0xA38000000001003) == 0)
      && a1 >= 3)
    {
      return 0;
    }
  }
  else if ((a1 - 160) > 0x3E || ((1 << (a1 + 96)) & 0x400010000406000FLL) == 0)
  {
    v3 = a1 - 238;
    if (v3 > 0x11 || ((1 << v3) & 0x30001) == 0)
      return 0;
  }
  return result;
}

_WORD *ChConvertANSICharactersToUnicode(_WORD *result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned __int16 v5;

  if (result && a2)
  {
    v2 = a2;
    do
    {
      v3 = (unsigned __int16)*result;
      v4 = v3 >= 0x80;
      v5 = v3 - 128;
      if (v4 && v5 <= 0x1Fu)
        *result = word_22A4C0F26[(__int16)v5];
      ++result;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t ChMapCharsetToCharacterEncoding(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  result = 1252;
  if (a1 > 161)
  {
    if (a1 == 255)
      v3 = 4;
    else
      v3 = 1252;
    if (a1 == 238)
      v4 = 1250;
    else
      v4 = v3;
    if (a1 == 222)
      v5 = 874;
    else
      v5 = v4;
    if (a1 == 204)
      v6 = 1251;
    else
      v6 = 1252;
    if (a1 == 186)
      v7 = 1257;
    else
      v7 = v6;
    if (a1 <= 221)
      v5 = v7;
    if (a1 == 178)
      v8 = 1256;
    else
      v8 = 1252;
    if (a1 == 177)
      v9 = 1255;
    else
      v9 = v8;
    if (a1 == 163)
      v10 = 1258;
    else
      v10 = 1252;
    if (a1 == 162)
      v11 = 1254;
    else
      v11 = v10;
    if (a1 <= 176)
      v9 = v11;
    if (a1 <= 185)
      return v9;
    else
      return v5;
  }
  else if (a1 <= 127)
  {
    if (a1 == 77)
      v12 = 10000;
    else
      v12 = 1252;
    if (a1 == 2)
      v13 = 100;
    else
      v13 = v12;
    if (a1 == 1)
      return 3;
    else
      return v13;
  }
  else
  {
    switch(a1)
    {
      case 128:
        result = 932;
        break;
      case 129:
        result = 949;
        break;
      case 130:
        result = 1361;
        break;
      case 131:
      case 132:
      case 133:
      case 135:
        return result;
      case 134:
        result = 936;
        break;
      case 136:
        result = 950;
        break;
      default:
        if (a1 == 161)
          result = 1253;
        else
          result = 1252;
        break;
    }
  }
  return result;
}

const char *ChLogFunction(const char *result, int a2, int a3, char *a4, int a5)
{
  FILE *v5;
  __int16 v8;
  const char *v9;
  tm *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const char *v14;
  size_t v15;
  time_t v16;
  char __str[31];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (FILE *)g_pFile;
  if (g_pFile)
  {
    v8 = a3;
    v9 = result;
    if ((a3 & 1) != 0 || a2 && a3)
    {
      v16 = 0;
      time(&v16);
      v10 = localtime(&v16);
      snprintf(__str, 0x1FuLL, "%02d/%02d/%04d-%02d:%02d:%02d; ",
        v10->tm_mday,
        v10->tm_mon,
        v10->tm_year + 1900,
        v10->tm_hour,
        v10->tm_min,
        v10->tm_sec);
      v11 = strlen(__str);
      fwrite(__str, 1uLL, v11, v5);
      if (a4)
      {
        if (strchr(a4, 92))
          a4 = strrchr(a4, 92) + 1;
        v12 = strlen(a4);
        fwrite(a4, 1uLL, v12, v5);
        snprintf(__str, 0x1FuLL, "(%d):\n", a5);
        v13 = strlen(__str);
        fwrite(__str, 1uLL, v13, v5);
      }
      if ((unsigned __int16)(v8 - 1) > 7u)
        v14 = "MESSAGE: ";
      else
        v14 = off_24F3A5DF0[(__int16)(v8 - 1)];
      fwrite(v14, 1uLL, 9uLL, v5);
      if (v9)
      {
        v15 = strlen(v9);
        fwrite(v9, 1uLL, v15, v5);
      }
      fwrite("\n", 1uLL, 1uLL, v5);
      return (const char *)fflush(v5);
    }
  }
  return result;
}

uint64_t OCXReadBool(const unsigned __int8 *a1)
{
  if (xmlStrEqual(a1, (const xmlChar *)"true") || xmlStrEqual(a1, (const xmlChar *)"1"))
    return 1;
  if (!xmlStrEqual(a1, (const xmlChar *)"false") && !xmlStrEqual(a1, (const xmlChar *)"0"))
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("OCXException"), CFSTR("Bad BOOLean string: %s"), a1);
  return 0;
}

uint64_t OCXReadBool(_xmlNode *a1, xmlChar *nameSpace, xmlChar *name, uint64_t a4)
{
  xmlChar *NsProp;
  xmlChar *v6;

  NsProp = xmlGetNsProp(a1, name, nameSpace);
  if (NsProp)
  {
    v6 = NsProp;
    a4 = OCXReadBool(NsProp);
    ((void (*)(xmlChar *))*MEMORY[0x24BEDE758])(v6);
  }
  return a4;
}

xmlChar *OCXIsStrictXmlFile(_xmlTextReader *a1)
{
  const xmlChar *v2;
  xmlChar *result;

  v2 = xmlTextReaderConstNamespaceUri(a1);
  result = xmlTextReaderGetAttributeNs(a1, (const xmlChar *)"conformance", v2);
  if (result)
    return (xmlChar *)(xmlStrEqual(result, (const xmlChar *)"strict") != 0);
  return result;
}

uint64_t _ChMbstowcs(unsigned __int16 *a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  if (!a3)
    return 0;
  result = 0;
  while (1)
  {
    a1[result] = a2[result];
    if (!a2[result])
      break;
    if (a3 == ++result)
      return a3;
  }
  return result;
}

uint64_t CsUTF8CharFromWideChar(uint64_t result, void *__dst, int *a3)
{
  int v4;
  int __src;
  __int16 v6;

  v6 = 0;
  __src = 0;
  if (result > 0x7F)
  {
    if (result > 0x7FF)
    {
      LOBYTE(__src) = (result >> 12) | 0xE0;
      BYTE1(__src) = (result >> 6) & 0x3F | 0x80;
      BYTE2(__src) = result & 0x3F | 0x80;
      v4 = 3;
    }
    else
    {
      LOBYTE(__src) = (result >> 6) | 0xC0;
      BYTE1(__src) = result & 0x3F | 0x80;
      v4 = 2;
    }
  }
  else
  {
    LOBYTE(__src) = result;
    v4 = 1;
  }
  if (v4 <= *a3)
  {
    result = (uint64_t)memcpy(__dst, &__src, v4);
    *a3 = v4;
  }
  return result;
}

const void **CsData::operator=(const void **a1, const void **a2)
{
  const void *v4;
  size_t v5;
  void *v6;

  if (a1 != a2)
  {
    v4 = a1[1];
    if (v4)
      MEMORY[0x22E2DD3F0](v4, 0x1000C8077774924);
    a1[1] = 0;
    v5 = *(unsigned int *)a2;
    *(_DWORD *)a1 = v5;
    if ((_DWORD)v5)
    {
      v6 = operator new[](v5);
      a1[1] = v6;
      memcpy(v6, a2[1], *(unsigned int *)a1);
    }
  }
  return a1;
}

CsString *CsString::append(CsString *this, const char *a2, int a3)
{
  const char *v3;
  CsString *v4;
  unsigned int var2;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *var1;
  unsigned __int16 v9;

  if (a2)
  {
    v3 = a2;
    v4 = this;
    var2 = this->var2;
    v6 = var2 + a3;
    this = CsString::reserve(this, var2 + a3);
    v7 = v4->var2;
    var1 = v4->var1;
    if (v7 < v6)
    {
      do
      {
        v9 = *(unsigned __int8 *)v3++;
        var1[v7++] = v9;
        v4->var2 = v7;
      }
      while (v6 != v7);
      v7 = v6;
    }
    var1[v7] = 0;
  }
  return this;
}

CsString *CsString::append(CsString *this, const unsigned int *a2, int a3)
{
  const unsigned int *v3;
  CsString *v4;
  unsigned int var2;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *var1;
  int v9;

  if (a2)
  {
    v3 = a2;
    v4 = this;
    var2 = this->var2;
    v6 = var2 + a3;
    this = CsString::reserve(this, var2 + a3);
    v7 = v4->var2;
    var1 = v4->var1;
    if (v7 < v6)
    {
      do
      {
        v9 = *v3++;
        var1[v7++] = v9;
        v4->var2 = v7;
      }
      while (v6 != v7);
      v7 = v6;
    }
    var1[v7] = 0;
  }
  return this;
}

CsString *CsString::append(CsString *result, const unsigned int *a2)
{
  unsigned int v2;

  if (a2)
  {
    v2 = -1;
    do
      ++v2;
    while (a2[v2]);
    return CsString::append(result, a2, v2);
  }
  return result;
}

BOOL CsString::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v11;
  _BOOL8 result;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a1 + 16))
    return 0;
  if (!(_DWORD)v2)
    return 1;
  v3 = *(unsigned __int16 **)(a1 + 8);
  v4 = *(unsigned __int16 **)(a2 + 8);
  v5 = v2 - 1;
  do
  {
    v7 = *v3++;
    v6 = v7;
    v9 = *v4++;
    v8 = v9;
    v11 = v5-- != 0;
    result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

OcBinaryData *OcBinaryData::operator=(OcBinaryData *this, uint64_t a2)
{
  __int128 v4;

  if ((OcBinaryData *)a2 != this)
  {
    this->var7 = *(SsrwOOStream **)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&this->var1 = v4;
    if (HIDWORD(v4))
    {
      OcBinaryData::allocBuffer(this, HIDWORD(v4));
      memcpy(this->var5, *(const void **)(a2 + 24), this->var4);
    }
  }
  return this;
}

void *OcBinaryData::copyBuffer(OcBinaryData *this, const unsigned __int8 *a2, unsigned int a3)
{
  OcBinaryData::allocBuffer(this, a3);
  this->var3 = a3;
  return memcpy(this->var5, a2, a3);
}

BOOL OcBinaryData::operator==(uint64_t a1, uint64_t a2)
{
  size_t v2;
  int v3;
  _BOOL8 v4;
  BOOL v5;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 16);
  v4 = (_DWORD)v2 == v3;
  if ((_DWORD)v2)
    v5 = (_DWORD)v2 == v3;
  else
    v5 = 0;
  if (v5)
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v2) == 0;
  return v4;
}

BOOL OcBinaryReader::parsePropTypeInsideHyperlink(OcBinaryReader *this, unsigned int **a2, unsigned int *a3, int a4)
{
  unsigned int *v5;
  BOOL v6;
  int SInt32;

  if (!a2)
    return 0;
  v5 = *a2;
  if (*a2)
    v6 = v5 >= a3;
  else
    v6 = 1;
  if (v6 || (unint64_t)((char *)a3 - (char *)*a2) < 4)
    return 0;
  SInt32 = CsLeReadSInt32(v5);
  ++*a2;
  return SInt32 == a4;
}

uint64_t OcBinaryReader::parseLongPropInsideHyperlink(OcBinaryReader *this, unsigned int **a2, unsigned int *a3)
{
  _BOOL4 v5;
  unsigned int *v6;
  uint64_t result;

  v5 = OcBinaryReader::parsePropTypeInsideHyperlink(this, a2, a3, 3);
  if (!a2)
    return 0;
  if (!v5)
    return 0;
  v6 = *a2;
  if (!*a2 || v6 >= a3 || (char *)a3 - (char *)v6 < 4)
    return 0;
  result = CsLeReadSInt32(v6);
  ++*a2;
  return result;
}

void OcBinaryReader::parseStringPropInsideHyperlink(OcBinaryReader *this, unsigned __int16 **a2, unsigned __int8 *a3, CsString *a4)
{
  unsigned __int16 *v6;
  BOOL v7;
  int SInt32;
  unsigned __int8 *v11;
  unsigned int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned __int16 UInt16;
  unsigned __int8 *v19;

  if (a2)
  {
    v6 = *a2;
    v7 = !*a2 || v6 >= (unsigned __int16 *)a3;
    if (!v7 && (unint64_t)(a3 - (unsigned __int8 *)*a2) >= 4)
    {
      SInt32 = CsLeReadSInt32((unsigned int *)v6);
      v11 = (unsigned __int8 *)(*a2 + 2);
      *a2 = (unsigned __int16 *)v11;
      if (SInt32 == 31 && v11 < a3)
      {
        v13 = (_DWORD)a3 - (_DWORD)v11 - 4;
        if (((_DWORD)a3 - (_DWORD)v11) >= 4)
        {
          v14 = CsLeReadSInt32((unsigned int *)v11);
          v15 = (unsigned __int8 *)(*a2 + 2);
          *a2 = (unsigned __int16 *)v15;
          if (v14 >= 1)
          {
            v16 = 2 * v14;
            if ((v14 & 1) != 0)
            {
              if (v14 == 0x7FFFFFFF)
                return;
              v16 += 2;
            }
            if (v16 <= v13)
            {
              v17 = v14 - 1;
              if (v14 == 1)
              {
                CsLeReadUInt16((unsigned __int16 *)v15);
                v19 = (unsigned __int8 *)(*a2 + 1);
                *a2 = (unsigned __int16 *)v19;
              }
              else
              {
                do
                {
                  UInt16 = CsLeReadUInt16(*a2);
                  ++*a2;
                  CsString::append(a4, UInt16);
                  --v17;
                }
                while (v17);
                CsLeReadUInt16(*a2);
                v19 = (unsigned __int8 *)(*a2 + 1);
                *a2 = (unsigned __int16 *)v19;
                if ((v14 & 1) == 0)
                  return;
              }
              CsLeReadUInt16((unsigned __int16 *)v19);
              ++*a2;
            }
          }
        }
      }
    }
  }
}

SsrwOOStorage **OcBinaryReader::readCustomProperties(OcBinaryReader *this, OcCustomProperties *a2)
{
  SsrwOOStorage *v4;
  const unsigned __int16 *v5;
  SsrwOOStorage *v6;
  _SsrwOO_GUID *FMTIDForStreamType;
  uint64_t **v8;
  int NumberOfProperties;
  unsigned int i;
  char *v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 *v14;
  OcCustomProperty *v15;
  OcCustomProperty *v17;
  char *__s1;
  unsigned int v19;
  _BYTE v20[16];
  SsrwOOStorage *v21;

  v4 = (SsrwOOStorage *)(*((uint64_t (**)(OcBinaryReader *))this->var0 + 11))(this);
  v21 = 0;
  v5 = (const unsigned __int16 *)(*((uint64_t (**)(OcBinaryReader *))this->var0 + 12))(this);
  if (v5 && SsrwOOStorage::hasChild(v4, v5))
  {
    v6 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v4, v5);
    ChAutoPtr<SsrwOOStorage>::setValue(&v21, v6);
    v4 = v21;
  }
  FMTIDForStreamType = (_SsrwOO_GUID *)SsrwOOPropertyStorage::getFMTIDForStreamType(3);
  v8 = (uint64_t **)SsrwOOStorage::openPropertyStorage(v4, FMTIDForStreamType);
  if (v8)
  {
    SsrwOOPropVariant::SsrwOOPropVariant((SsrwOOPropVariant *)v20);
    if (SsrwOOPropertyStorage::getPropertyValue(v8, 1, (SsrwOOPropVariant *)v20))
      *((_WORD *)a2 + 4) = SsrwOOPropVariant::getSInt2Value((SsrwOOPropVariant *)v20);
    NumberOfProperties = SsrwOOPropertyStorage::getNumberOfProperties(v8);
    if (NumberOfProperties)
    {
      for (i = 0; i != NumberOfProperties; ++i)
      {
        v19 = 0;
        __s1 = 0;
        SsrwOOPropertyStorage::getPropertyNameAndIDByIndex(v8, i, &__s1, &v19);
        v11 = __s1;
        if (__s1)
        {
          if (!strncmp(__s1, "_PID_", 5uLL))
          {
            SsrwOOPropertyStorage::freePropertyName((SsrwOOPropertyStorage *)v11, v12);
          }
          else
          {
            v13 = (char *)operator new(0x18uLL);
            *(_QWORD *)v13 = 0;
            SsrwOOPropVariant::SsrwOOPropVariant((SsrwOOPropVariant *)(v13 + 8));
            v17 = (OcCustomProperty *)v13;
            if (SsrwOOPropertyStorage::getPropertyValue(v8, v19, (SsrwOOPropVariant *)(v13 + 8)))
            {
              OcCustomProperty::setName(v17, __s1);
              SsrwOOPropertyStorage::freePropertyName((SsrwOOPropertyStorage *)__s1, v14);
              v15 = v17;
              v17 = 0;
              OcCustomProperties::appendProperty(a2, v15);
            }
            else
            {
              __s1 = 0;
            }
            ChAutoPtr<OcCustomProperty>::~ChAutoPtr(&v17);
          }
        }
      }
    }
    SsrwOOPropertyStorage::close((uint64_t)v8);
    SsrwOOPropVariant::~SsrwOOPropVariant((SsrwOOPropVariant *)v20);
  }
  if (v21)
    SsrwOOStorage::close(v21, 0);
  if (v8)
    ((void (*)(uint64_t **))(*v8)[1])(v8);
  return ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v21);
}

void sub_22A3ACC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va);
  _Unwind_Resume(a1);
}

void OcBinaryReader::readMacros(OcBinaryReader *a1, uint64_t a2, SsrwOOStorage *a3)
{
  char *v6;

  v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = off_24F3A5FE0;
  CsString::CsString((CsString *)(v6 + 8));
  *(_QWORD *)v6 = &off_24F3A5F88;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 4) = 0;
  OcBinaryReader::readMacroStorage(a1, (OcMacros::OcStorage *)v6, a3);
  *(_QWORD *)(a2 + 8) = v6;
}

void sub_22A3ACDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void OcBinaryReader::readMacroStorage(OcBinaryReader *this, OcMacros::OcStorage *a2, SsrwOOStorage *a3)
{
  uint64_t v6;
  uint64_t i;
  SsrwOOStgInfo *v8;
  const unsigned __int16 *WcsName;
  int Type;
  SsrwOOStgStream *v11;
  unsigned int v12;
  unsigned int *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  OcBinaryData v19;
  unsigned int Size;
  CsString v21;
  int v22;
  SsrwOOStgInfo *v23;

  v23 = 0;
  v22 = 0;
  SsrwOOStorage::getChildrenInfo(a3, &v23, &v22);
  if (v22 >= 1)
  {
    v6 = 0;
    for (i = 0; i < v22; ++i)
    {
      v8 = (SsrwOOStgInfo *)((char *)v23 + v6);
      WcsName = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName((SsrwOOStgInfo *)((char *)v23 + v6));
      CsString::CsString(&v21);
      CsString::append(&v21, WcsName);
      Type = SsrwOOStgInfo::getType(v8);
      if (Type == 1)
      {
        v19.var0 = (void **)SsrwOOStorage::openStorage(a3, WcsName);
        v14 = (char *)operator new(0x38uLL);
        *(_OWORD *)(v14 + 40) = 0u;
        *(_OWORD *)(v14 + 24) = 0u;
        *(_OWORD *)(v14 + 8) = 0u;
        *(_QWORD *)v14 = off_24F3A5FE0;
        CsString::CsString((CsString *)(v14 + 8));
        *(_QWORD *)v14 = &off_24F3A5F88;
        *((_QWORD *)v14 + 5) = 0;
        *((_QWORD *)v14 + 6) = 0;
        *((_QWORD *)v14 + 4) = 0;
        *((_DWORD *)v14 + 6) = 0;
        bzero(*((void **)v14 + 2), 2 * *((unsigned int *)v14 + 7));
        CsString::append((CsString *)(v14 + 8), &v21);
        OcMacros::OcStorage::addChild(a2, (uint64_t)v14);
        OcBinaryReader::readMacroStorage(this, (OcMacros::OcStorage *)v14, (SsrwOOStorage *)v19.var0);
        ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)&v19);
      }
      else if (Type == 2)
      {
        v11 = SsrwOOStorage::openStream(a3, WcsName);
        Size = 0;
        Size = SsrwOOStgInfo::getSize(v8);
        OcBinaryData::OcBinaryData(&v19);
        OcBinaryData::allocBuffer(&v19, Size);
        (*(void (**)(SsrwOOStgStream *, char *, unsigned int *))(*(_QWORD *)v11 + 56))(v11, v19.var5, &Size);
        v12 = Size;
        OcBinaryData::setMinimumCapacity(&v19, Size);
        v19.var3 = v12;
        v13 = (unsigned int *)operator new(0x50uLL);
        OcMacros::OcStream::OcStream((OcMacros::OcStream *)v13);
        v13[6] = 0;
        bzero(*((void **)v13 + 2), 2 * v13[7]);
        CsString::append((CsString *)(v13 + 2), &v21);
        OcBinaryData::operator=((OcBinaryData *)(v13 + 8), (uint64_t)&v19);
        OcMacros::OcStorage::addChild(a2, (uint64_t)v13);
        OcBinaryData::~OcBinaryData(&v19);
        (*(void (**)(SsrwOOStgStream *))(*(_QWORD *)v11 + 8))(v11);
      }
      CsString::~CsString(&v21);
      v6 += 184;
    }
  }
  if (v23)
  {
    v15 = (char *)v23 - 16;
    v16 = *((_QWORD *)v23 - 1);
    if (v16)
    {
      v17 = 184 * v16;
      v18 = (char *)v23 - 184;
      do
      {
        TSURectWithOriginAndSize(&v18[v17]);
        v17 -= 184;
      }
      while (v17);
    }
    MEMORY[0x22E2DD3F0](v15, 0x1020C80285AA8CALL);
  }
}

void sub_22A3AD078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CsString *a16)
{
  void *v16;

  operator delete(v16);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)&a9);
  CsString::~CsString((CsString *)&a16);
  _Unwind_Resume(a1);
}

void OcMacros::OcStorage::addChild(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[6];
  v4 = (uint64_t)(a1 + 6);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[4];
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)a1[4];
    v19 = (char *)a1[5];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)a1[4];
    }
    a1[4] = v17;
    a1[5] = v8;
    a1[6] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[5] = v8;
}

void OcMacros::OcStorage::~OcStorage(OcMacros::OcStorage *this)
{
  OcMacros::OcStorage::~OcStorage(this);
  JUMPOUT(0x22E2DD408);
}

{
  _QWORD *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F3A5F88;
  v3 = (char *)this + 32;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (((*((_QWORD *)v3 + 1) - (_QWORD)v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      v5 = v2[v4];
      if (v5)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v5 + 8))(v2[v4]);
        v2 = (_QWORD *)*((_QWORD *)this + 4);
      }
      v2[v4++] = 0;
      v2 = (_QWORD *)*((_QWORD *)this + 4);
    }
    while (v4 < ((*((_QWORD *)this + 5) - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_24F3A5FE0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

uint64_t OcMacros::OcStorage::getType(OcMacros::OcStorage *this)
{
  return 0;
}

OcMacros::OcStream *OcMacros::OcStream::OcStream(OcMacros::OcStream *this)
{
  *(_QWORD *)this = off_24F3A5FE0;
  CsString::CsString((CsString *)((char *)this + 8));
  *(_QWORD *)this = &off_24F3A6008;
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 32));
  return this;
}

void sub_22A3AD31C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  CsString *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *v1 = v4;
  CsString::~CsString(v2);
  _Unwind_Resume(a1);
}

void OcMacros::OcStream::~OcStream(OcMacros::OcStream *this)
{
  *(_QWORD *)this = &off_24F3A6008;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
  *(_QWORD *)this = off_24F3A5FE0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24F3A6008;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
  *(_QWORD *)this = off_24F3A5FE0;
  CsString::~CsString((CsString *)((char *)this + 8));
  JUMPOUT(0x22E2DD408);
}

uint64_t OcMacros::OcStream::getType(OcMacros::OcStream *this)
{
  return 1;
}

OcCustomProperty **ChAutoPtr<OcCustomProperty>::~ChAutoPtr(OcCustomProperty **a1)
{
  OcCustomProperty *v2;

  v2 = *a1;
  if (v2)
  {
    OcCustomProperty::~OcCustomProperty(v2);
    MEMORY[0x22E2DD408]();
  }
  *a1 = 0;
  return a1;
}

SsrwOOStorage **OcBinaryWriter::copyStorageUsingTempVariables(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *a3, SsrwOOStgInfo **a4, char **a5)
{
  uint64_t v9;
  uint64_t i;
  int Type;
  SsrwOOStgInfo *v12;
  unsigned __int16 *WcsName;
  SsrwOOStgStream *Stream;
  const unsigned __int16 *v15;
  SsrwOOStgStream *v16;
  SsrwOOStream *v17;
  SsrwOOStream *v18;
  char **v19;
  SsrwOOStgInfo *v20;
  __n128 CLSID;
  unsigned __int16 *v22;
  SsrwOOStorage *Storage;
  const unsigned __int16 *v24;
  SsrwOOStorage *v25;
  char **v26;
  SsrwOOStorage *v27;
  SsrwOOStorage *v28;
  _Storage *var0;
  _Storage *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  SsrwOOStgInfo *Info;
  SsrwOOStorage *v37;
  SsrwOOStorage *v38;
  int v39;
  _SsrwOO_GUID v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v37 = 0;
  v38 = 0;
  SsrwOOStorage::getChildrenInfo(a2, (SsrwOOStgInfo **)a3, &v39);
  if (v39 >= 1)
  {
    v9 = 0;
    for (i = 0; i < v39; ++i)
    {
      Type = SsrwOOStgInfo::getType((SsrwOOStgInfo *)((char *)a3->var0 + v9));
      v12 = (SsrwOOStgInfo *)((char *)a3->var0 + v9);
      if (Type == 2)
      {
        WcsName = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v12);
        Stream = SsrwOOStorage::createStream(this, WcsName);
        v15 = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName((SsrwOOStgInfo *)((char *)a3->var0 + v9));
        v16 = SsrwOOStorage::openStream(a2, v15);
        v17 = (SsrwOOStream *)v16;
        if (Stream)
        {
          if (v16)
          {
            v18 = (SsrwOOStream *)(*(uint64_t (**)(SsrwOOStgStream *))(*(_QWORD *)v16 + 176))(v16);
            OcBinaryWriter::copyStreamUsingTempBuffer(Stream, v17, v18, a4, v19);
            v20 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))v17->var0 + 21))(v17);
            CLSID = SsrwOOStgInfo::getCLSID(v20, &v40);
            (*(void (**)(SsrwOOStgStream *, _SsrwOO_GUID *, __n128))(*(_QWORD *)Stream + 160))(Stream, &v40, CLSID);
            (*(void (**)(SsrwOOStgStream *, _QWORD))(*(_QWORD *)Stream + 152))(Stream, 0);
            (*((void (**)(SsrwOOStream *, _QWORD))v17->var0 + 19))(v17, 0);
            (*((void (**)(SsrwOOStream *))v17->var0 + 1))(v17);
          }
          (*(void (**)(SsrwOOStgStream *))(*(_QWORD *)Stream + 8))(Stream);
        }
        else if (v16)
        {
          (*(void (**)(SsrwOOStgStream *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      else
      {
        v22 = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v12);
        Storage = (SsrwOOStorage *)SsrwOOStorage::createStorage(this, v22);
        ChAutoPtr<SsrwOOStorage>::setValue(&v38, Storage);
        v24 = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName((SsrwOOStgInfo *)((char *)a3->var0 + v9));
        v25 = (SsrwOOStorage *)SsrwOOStorage::openStorage(a2, v24);
        ChAutoPtr<SsrwOOStorage>::setValue(&v37, v25);
        v27 = v38;
        if (v38)
        {
          v28 = v37;
          if (v37)
          {
            var0 = a3->var0;
            a3->var0 = 0;
            OcBinaryWriter::copyStorageUsingTempVariables((OcBinaryWriter *)v27, v28, a3, a4, v26);
            a3->var0 = var0;
            Info = SsrwOOStorage::getInfo(v37);
            SsrwOOStgInfo::getCLSID(Info, &v40);
            SsrwOOStorage::setClass(v38, &v40);
            SsrwOOStorage::close(v38, 0);
            SsrwOOStorage::close(v37, 0);
            ChAutoPtr<SsrwOOStgInfo>::~ChAutoPtr(&Info);
          }
        }
        ChAutoPtr<SsrwOOStorage>::setValue(&v38, 0);
        ChAutoPtr<SsrwOOStorage>::setValue(&v37, 0);
      }
      v9 += 184;
    }
  }
  Info = SsrwOOStorage::getInfo(a2);
  SsrwOOStgInfo::getCLSID(Info, &v40);
  SsrwOOStorage::setClass(this, &v40);
  v30 = a3->var0;
  if (a3->var0)
  {
    v31 = (char *)v30 - 16;
    v32 = *((_QWORD *)v30 - 1);
    if (v32)
    {
      v33 = 184 * v32;
      v34 = (char *)v30 - 184;
      do
      {
        TSURectWithOriginAndSize(&v34[v33]);
        v33 -= 184;
      }
      while (v33);
    }
    MEMORY[0x22E2DD3F0](v31, 0x1020C80285AA8CALL);
  }
  a3->var0 = 0;
  ChAutoPtr<SsrwOOStgInfo>::~ChAutoPtr(&Info);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v37);
  return ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v38);
}

void sub_22A3AD77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  SsrwOOStorage *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, SsrwOOStorage *);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va1);
  _Unwind_Resume(a1);
}

uint64_t OcBinaryWriter::copyStreamUsingTempBuffer(OcBinaryWriter *this, SsrwOOStream *a2, SsrwOOStream *a3, _QWORD *a4, char **a5)
{
  unsigned int v6;
  void *v9;
  uint64_t result;
  int v11;
  unsigned int v12;

  v6 = a3;
  v11 = 4000;
  v12 = a3;
  v9 = operator new[](0xFA0uLL);
  *a4 = v9;
  if (v6 >= 0xFA1)
  {
    do
    {
      v11 = 4000;
      (*((void (**)(SsrwOOStream *, _QWORD, int *))a2->var0 + 7))(a2, *a4, &v11);
      (*(void (**)(OcBinaryWriter *, _QWORD, int *))(*(_QWORD *)this + 184))(this, *a4, &v11);
      v6 -= 4000;
      v12 = v6;
    }
    while (v6 > 0xFA0);
    v9 = (void *)*a4;
  }
  (*((void (**)(SsrwOOStream *, void *, unsigned int *))a2->var0 + 7))(a2, v9, &v12);
  (*(void (**)(OcBinaryWriter *, _QWORD, unsigned int *))(*(_QWORD *)this + 184))(this, *a4, &v12);
  result = *a4;
  if (*a4)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *a4 = 0;
  return result;
}

uint64_t OcBinaryWriter::copyStreamWithName(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *__s, const char *a4)
{
  SsrwOOStream *v6;
  SsrwOOStgStream *Stream;
  SsrwOOStream *v8;
  SsrwOOStgStream *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (SsrwOOStream *)SsrwOOStorage::openStream(a2, (const char *)__s);
  if (!v6)
    return 0;
  Stream = SsrwOOStorage::createStream(this, (const char *)__s);
  v9 = Stream;
  if (Stream)
    v10 = OcBinaryWriter::copyStream(Stream, v6, v8);
  else
    v10 = 0;
  (*((void (**)(SsrwOOStream *))v6->var0 + 1))(v6);
  v11 = v10;
  if (v9)
    (*(void (**)(SsrwOOStgStream *))(*(_QWORD *)v9 + 8))(v9);
  return v11;
}

void sub_22A3AD9B8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1)
    JUMPOUT(0x22A3AD98CLL);
  JUMPOUT(0x22A3AD974);
}

uint64_t OcBinaryWriter::copyStream(OcBinaryWriter *this, SsrwOOStream *a2, SsrwOOStream *a3)
{
  uint64_t v5;
  uint64_t v6;
  SsrwOOStgInfo *v7;
  SsrwOOStream *Size;
  char **v9;
  uint64_t v11;

  v5 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  v6 = (*(uint64_t (**)(OcBinaryWriter *))(*(_QWORD *)this + 40))(this);
  (*((void (**)(SsrwOOStream *, _QWORD, _QWORD))a2->var0 + 2))(a2, 0, 0);
  (*(void (**)(OcBinaryWriter *, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, 0, 0);
  v11 = 0;
  v7 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))a2->var0 + 21))(a2);
  Size = (SsrwOOStream *)SsrwOOStgInfo::getSize(v7);
  OcBinaryWriter::copyStreamUsingTempBuffer(this, a2, Size, &v11, v9);
  (*((void (**)(SsrwOOStream *, uint64_t, _QWORD))a2->var0 + 2))(a2, v5, 0);
  (*(void (**)(OcBinaryWriter *, uint64_t, _QWORD))(*(_QWORD *)this + 16))(this, v6, 0);
  return 1;
}

void sub_22A3ADAC4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3ADAB0);
}

uint64_t OcBinaryWriter::copyStreamWithName(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *a3, const unsigned __int16 *a4)
{
  SsrwOOStream *v6;
  SsrwOOStgStream *Stream;
  SsrwOOStream *v8;
  SsrwOOStgStream *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (SsrwOOStream *)SsrwOOStorage::openStream(a2, (const unsigned __int16 *)a3);
  if (!v6)
    return 0;
  Stream = SsrwOOStorage::createStream(this, (unsigned __int16 *)a3);
  v9 = Stream;
  if (Stream)
    v10 = OcBinaryWriter::copyStream(Stream, v6, v8);
  else
    v10 = 0;
  (*((void (**)(SsrwOOStream *))v6->var0 + 1))(v6);
  v11 = v10;
  if (v9)
    (*(void (**)(SsrwOOStgStream *))(*(_QWORD *)v9 + 8))(v9);
  return v11;
}

void sub_22A3ADB9C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1)
    JUMPOUT(0x22A3ADB70);
  JUMPOUT(0x22A3ADB58);
}

uint64_t OcBinaryWriter::copyMissingChildStorageWithUnicodeName(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *a3, const unsigned __int16 *a4)
{
  uint64_t v7;
  SsrwOOStorage *Storage;
  SsrwOOStorage *v10;
  char **v11;
  SsrwOOStorage *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SsrwOOStgInfo *v18;
  uint64_t v19;

  if (!SsrwOOStorage::hasChild(a2, (const unsigned __int16 *)a3)
    || (SsrwOOStorage::hasChild(this, (const unsigned __int16 *)a3) & 1) != 0)
  {
    return 1;
  }
  v18 = 0;
  v19 = 0;
  Storage = (SsrwOOStorage *)SsrwOOStorage::createStorage(this, (unsigned __int16 *)a3);
  v10 = (SsrwOOStorage *)SsrwOOStorage::openStorage(a2, (const unsigned __int16 *)a3);
  v12 = v10;
  if (Storage && v10)
  {
    OcBinaryWriter::copyStorageUsingTempVariables(Storage, v10, (SsrwOOStorage *)&v19, &v18, v11);
    v13 = 1;
LABEL_9:
    SsrwOOStorage::~SsrwOOStorage(v12);
    MEMORY[0x22E2DD408]();
    v7 = v13;
    goto LABEL_10;
  }
  v13 = 0;
  v7 = 0;
  if (v10)
    goto LABEL_9;
LABEL_10:
  if (Storage)
  {
    SsrwOOStorage::~SsrwOOStorage(Storage);
    MEMORY[0x22E2DD408]();
  }
  if (v19)
  {
    v14 = v19 - 16;
    v15 = *(_QWORD *)(v19 - 8);
    if (v15)
    {
      v16 = 184 * v15;
      v17 = v19 - 184;
      do
      {
        TSURectWithOriginAndSize(v17 + v16);
        v16 -= 184;
      }
      while (v16);
    }
    MEMORY[0x22E2DD3F0](v14, 0x1020C80285AA8CALL);
  }
  v19 = 0;
  if (v18)
    MEMORY[0x22E2DD3F0](v18, 0x1000C8077774924);
  return v7;
}

uint64_t *OcContact::clear(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;

  v1 = *this;
  if (((this[1] - *this) & 0x7FFFFFFF8) != 0)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = *(uint64_t **)(v1 + 8 * v3);
      if (this)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
        v1 = *v2;
      }
      *(_QWORD *)(v1 + 8 * v3++) = 0;
      v1 = *v2;
    }
    while (v3 < ((unint64_t)(v2[1] - *v2) >> 3));
  }
  return this;
}

void OcContact::~OcContact(OcContact *this)
{
  void *v2;

  OcContact::clear((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void OcContactCollection::addContact(OcContactCollection *this, OcContact *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 2);
  v4 = (char *)this + 16;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (unint64_t)v7 - *(_QWORD *)this;
    v10 = (v5 - *(_QWORD *)this) >> 3;
    v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1)
      v11 = (v9 >> 3) + 1;
    if (v10 >= 0x7FFFFFFF)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = v11;
    if ((_DWORD)v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v12);
      v15 = v14;
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = &v13[v9 & 0x7FFFFFFF8];
    v17 = &v13[8 * v15];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = *(char **)this;
    v18 = (char *)*((_QWORD *)this + 1);
    if (v18 != *(char **)this)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = *(char **)this;
    }
    *(_QWORD *)this = v16;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 1) = v8;
}

void OcCustomProperty::~OcCustomProperty(OcCustomProperty *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C4077774924);
  *(_QWORD *)this = 0;
  SsrwOOPropVariant::~SsrwOOPropVariant((OcCustomProperty *)((char *)this + 8));
}

void *OcCustomProperty::setName(OcCustomProperty *this, char *__s)
{
  size_t v4;
  void *v5;

  v4 = strlen(__s) + 1;
  v5 = operator new[](v4);
  *(_QWORD *)this = v5;
  return memcpy(v5, __s, v4);
}

void XmlBufferOutputStream::XmlBufferOutputStream(XmlBufferOutputStream *this, char *a2, int a3)
{
  _DWORD *exception;

  *(_QWORD *)this = &off_24F3A6048;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = 0;
  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5100;
  }
}

void XmlBufferOutputStream::~XmlBufferOutputStream(XmlBufferOutputStream *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F3A6048;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F3A6048;
  JUMPOUT(0x22E2DD408);
}

void *XmlBufferOutputStream::write(XmlBufferOutputStream *this, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  void *result;
  _DWORD *exception;

  v5 = *((int *)this + 5);
  v6 = *((_DWORD *)this + 4) - v5;
  if (v6 >= a3)
    v7 = a3;
  else
    v7 = *((_DWORD *)this + 4) - v5;
  result = memmove((void *)(*((_QWORD *)this + 1) + v5), a2, v7);
  *((_DWORD *)this + 5) += v7;
  if (v6 < a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5100;
  }
  return result;
}

uint64_t XmlBufferOutputStream::write(XmlBufferOutputStream *this, const unsigned __int16 *a2, int a3)
{
  return (*(uint64_t (**)(XmlBufferOutputStream *, const unsigned __int16 *, _QWORD))(*(_QWORD *)this + 16))(this, a2, (2 * a3));
}

uint64_t XmlBufferOutputStream::write(XmlBufferOutputStream *this, __int16 a2)
{
  __int16 v3;

  v3 = a2;
  return (*(uint64_t (**)(XmlBufferOutputStream *, __int16 *, uint64_t))(*(_QWORD *)this + 24))(this, &v3, 1);
}

_QWORD *OcMailRecord::makeMailRecord(OcMailRecord *this, int a2)
{
  int v2;
  _QWORD *result;
  void (**v4)(MR_3 *__hidden);
  void (**v5)(MR_Unicode *__hidden);

  v2 = (int)this;
  result = 0;
  switch(v2)
  {
    case 2:
      if (a2 == 12299)
      {
        result = operator new(0x18uLL);
        v5 = &off_24F3A6268;
      }
      else
      {
        result = operator new(0x20uLL);
        v5 = &off_24F3A62B0;
      }
      goto LABEL_13;
    case 3:
    case 10:
      result = operator new(0x18uLL);
      v4 = &off_24F3A61D8;
      goto LABEL_10;
    case 4:
      result = operator new(0x30uLL);
      v4 = &off_24F3A6190;
      goto LABEL_10;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 11:
      result = operator new(0x10uLL);
      v4 = &off_24F3A60F0;
      goto LABEL_10;
    default:
      if (v2 == 31)
      {
        result = operator new(0x18uLL);
        v5 = &off_24F3A6220;
LABEL_13:
        *result = v5;
        result[2] = 0;
      }
      else
      {
        if (v2 != 64)
          return result;
        result = operator new(0x18uLL);
        v4 = &off_24F3A6148;
LABEL_10:
        *result = v4;
      }
      *((_BYTE *)result + 8) = v2;
      return result;
  }
}

void MR_3::~MR_3(MR_3 *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t MR_3::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

void MR_2::~MR_2(MR_2 *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t MR_2::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

void MR_4::~MR_4(MR_4 *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t MR_4::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

void MR_1::~MR_1(MR_1 *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t MR_1::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1);
}

void MR_Unicode::~MR_Unicode(MR_Unicode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A6220;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    MEMORY[0x22E2DD408](v2, 0x1000C40BDFB0063);
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A6220;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    MEMORY[0x22E2DD408](v2, 0x1000C40BDFB0063);
    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x22E2DD408);
}

uint64_t MR_Unicode::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
}

void MR_Ascii::~MR_Ascii(MR_Ascii *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A6268;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    MEMORY[0x22E2DD408](v2, 0x1000C4077774924);
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A6268;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    MEMORY[0x22E2DD408](v2, 0x1000C4077774924);
    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x22E2DD408);
}

uint64_t MR_Ascii::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
}

void MR_Blob::~MR_Blob(MR_Blob *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A62B0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    MEMORY[0x22E2DD408](v2, 0x1000C4077774924);
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A62B0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    MEMORY[0x22E2DD408](v2, 0x1000C4077774924);
    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x22E2DD408);
}

uint64_t MR_Blob::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1);
}

uint64_t OcMailRecordParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  int v5;
  int v6;

  v6 = 12;
  (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2 + 13, &v6);
  v5 = 16;
  return (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2 + 25, &v5);
}

{
  uint64_t result;
  int v5;

  v5 = 16;
  (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2 + 13, &v5);
  (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2 + 29, &v5);
  (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2 + 45, &v5);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(a2 + 61) = result;
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  *(_WORD *)(a2 + 14) = result;
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

{
  uint64_t result;

  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

uint64_t OcMailRecordParserVisitor::visit(OcMailRecordParserVisitor *this, MR_Ascii *a2)
{
  int v4;
  void *v5;
  int v7;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  v5 = operator new[]((v4 + 1));
  *((_QWORD *)a2 + 2) = v5;
  v7 = v4;
  return (*(uint64_t (**)(_QWORD, int *, void *))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), &v7, v5);
}

uint64_t OcMailRecordParserVisitor::visit(OcMailRecordParserVisitor *this, MR_Unicode *a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v7;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  v7 = v4 >> 1;
  v5 = operator new[]((v4 & 0xFFFFFFFE) + 2);
  *((_QWORD *)a2 + 2) = v5;
  return (*(uint64_t (**)(_QWORD, unsigned int *, void *))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), &v7, v5);
}

uint64_t OcMailRecordParserVisitor::visit(OcMailRecordParserVisitor *this, MR_Blob *a2)
{
  unsigned __int16 v4;
  void *v5;
  int v7;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  *((_WORD *)a2 + 12) = v4;
  v5 = operator new[](v4);
  *((_QWORD *)a2 + 2) = v5;
  v7 = *((unsigned __int16 *)a2 + 12);
  return (*(uint64_t (**)(_QWORD, void *, int *))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), v5, &v7);
}

void OcMailRecordParserVisitor::~OcMailRecordParserVisitor(OcMailRecordParserVisitor *this)
{
  JUMPOUT(0x22E2DD408);
}

void *OcMsoEnvelope::reserveExtraData(OcMsoEnvelope *this, unsigned int a2)
{
  void *result;

  result = operator new[](a2);
  *((_QWORD *)this + 41) = result;
  return result;
}

void OCChRectI4WithCGRect(CGRect a1@<0:D0, 8:D1, 16:D2, 24:D3>, _DWORD *a2@<X8>)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  int v7;
  int v8;
  int v9;
  double MaxY;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  v7 = llround(CGRectGetMinX(a1));
  v11.origin.x = x;
  v11.origin.y = y;
  v11.size.width = width;
  v11.size.height = height;
  v8 = llround(CGRectGetMinY(v11));
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  v9 = llround(CGRectGetMaxX(v12));
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  MaxY = CGRectGetMaxY(v13);
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v9;
  a2[3] = llround(MaxY);
}

void OcParser::~OcParser(OcParser *this)
{
  *(_QWORD *)this = &off_24F3A6380;
}

{
  *(_QWORD *)this = &off_24F3A6380;
  JUMPOUT(0x22E2DD408);
}

CsString *OcParser::makeStringFromStream(OcParser *this, CsString *a2, SsrwOOStream *a3, int a4, int a5)
{
  int v6;
  CsString *result;
  const char *v10;
  unsigned int v11[3];

  v6 = a4;
  if (a4
    || (result = (CsString *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 10))(a3), (v6 = (int)result) != 0))
  {
    CsString::reserve(a2, v6);
    v11[0] = v6;
    if (a5)
    {
      v10 = (const char *)operator new[]((v6 + 1));
      (*((void (**)(SsrwOOStream *, unsigned int *, const char *))a3->var0 + 18))(a3, v11, v10);
      result = (CsString *)_ChMbstowcs(a2->var1, v10, (int)v11[0]);
      if (v10)
        return (CsString *)MEMORY[0x22E2DD3F0](v10, 0x1000C8077774924);
    }
    else
    {
      (*((void (**)(SsrwOOStream *, unsigned int *, unsigned __int16 *))a3->var0 + 17))(a3, v11, a2->var1);
      return CsString::setCount(a2, v11[0]);
    }
  }
  return result;
}

CsString *OcParser::parseFromRecord(OcParser *this, int a2, FromRecord *a3, SsrwOOStream *a4)
{
  OcParser *v7;
  __int16 v8;
  int v9;
  unsigned int v10;
  CsString *result;
  _DWORD *exception;
  int v13;

  (*((void (**)(SsrwOOStream *))a4->var0 + 12))(a4);
  v13 = 16;
  (*((void (**)(SsrwOOStream *, char *, int *))a4->var0 + 7))(a4, (char *)a3 + 4, &v13);
  *(_WORD *)a3 = (*((uint64_t (**)(SsrwOOStream *))a4->var0 + 9))(a4);
  v7 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a4->var0 + 9))(a4);
  v8 = (__int16)v7;
  *((_WORD *)a3 + 1) = (_WORD)v7;
  if ((*(_BYTE *)a3 & 1) != 0)
  {
    v7 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a4->var0 + 12))(a4);
    v9 = -28;
  }
  else
  {
    v9 = -24;
  }
  v10 = v9 + a2;
  if ((v8 & 0x1000) != 0)
  {
    if (v10 >= 0x20000)
      goto LABEL_12;
    v10 >>= 1;
  }
  else if (v10 >= 0x10000)
  {
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8001;
  }
  OcParser::makeStringFromStream(v7, (CsString *)a3 + 1, a4, (unsigned __int16)v10, (v8 & 0x1000) == 0);
  result = (CsString *)(*((uint64_t (**)(SsrwOOStream *))a4->var0 + 9))(a4);
  if ((_DWORD)result)
    return OcParser::makeStringFromStream((OcParser *)result, (CsString *)a3 + 2, a4, (unsigned __int16)result, 0);
  return result;
}

OcParser *OcParser::parse(OcParser *this, OcMsoEnvelope *a2, SsrwOOStream *a3, uint64_t a4, int a5)
{
  int v7;
  OcParser *v9;
  OcParser *v10;
  OcParser *v11;
  OcParser *v12;
  OcParser *v13;
  CsString *StringFromStream;
  unsigned int v15;
  CsString *v16;
  int v17;
  CsString *v18;
  unsigned int v19;
  signed int v20;
  _DWORD *v21;
  _DWORD *exception;
  _DWORD *v23;
  int v24;
  unsigned int v25;

  if (a5)
  {
    v7 = a4;
    v9 = this;
    *(_BYTE *)a2 = 1;
    (*((void (**)(SsrwOOStream *, uint64_t, _QWORD))a3->var0 + 2))(a3, a4, 0);
    if ((*((unsigned int (**)(SsrwOOStream *))a3->var0 + 9))(a3) != -4070)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 8010;
    }
    (*((void (**)(SsrwOOStream *, _QWORD, _QWORD))a3->var0 + 2))(a3, (v7 + 20), 0);
    *((_DWORD *)a2 + 1) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    v10 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_DWORD *)a2 + 4) = (_DWORD)v10;
    OcParser::makeStringFromStream(v10, (CsString *)a2 + 1, a3, 0, 0);
    v11 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    if ((_DWORD)v11)
      OcParser::parseFromRecord(v11, (int)v11, (OcMsoEnvelope *)((char *)a2 + 48), a3);
    else
      (*((void (**)(SsrwOOStream *))a3->var0 + 9))(a3);
    if (!(*((unsigned int (**)(SsrwOOStream *))a3->var0 + 9))(a3))
      (*((void (**)(SsrwOOStream *))a3->var0 + 9))(a3);
    *((_DWORD *)a2 + 3) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_DWORD *)a2 + 2) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_WORD *)a2 + 60) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    v12 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_WORD *)a2 + 61) = (_WORD)v12;
    OcParser::makeStringFromStream(v12, (CsString *)((char *)a2 + 128), a3, 0, 0);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    v13 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_DWORD *)a2 + 38) = (_DWORD)v13;
    StringFromStream = OcParser::makeStringFromStream(v13, (CsString *)((char *)a2 + 160), a3, 0, 0);
    OcParser::makeStringFromStream((OcParser *)StringFromStream, (CsString *)((char *)a2 + 184), a3, 0, 1);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    OcParser::parseContactCollection(v9, (OcMsoEnvelope *)((char *)a2 + 208), a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    OcParser::parseContactCollection(v9, (OcMsoEnvelope *)((char *)a2 + 256), a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    OcParser::parseContactCollection(v9, (OcMsoEnvelope *)((char *)a2 + 232), a3);
    v15 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    if (v15 > (*((unsigned int (**)(SsrwOOStream *))a3->var0 + 6))(a3))
    {
      v23 = __cxa_allocate_exception(4uLL);
      *v23 = 8001;
    }
    for (; v15; --v15)
    {
      (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      v16 = OcMsoEnvelope::addAttachment(a2);
      v17 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 8))(a3);
      v18 = CsString::reserve(v16, v17);
      OcParser::makeStringFromStream((OcParser *)v18, v16, a3, v17, 0);
      v19 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      LODWORD(v16[1].var0) = v19;
      if (v19 > (*((unsigned int (**)(SsrwOOStream *))a3->var0 + 6))(a3))
      {
        v21 = __cxa_allocate_exception(4uLL);
        *v21 = 8001;
      }
      (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      v16[1].var1 = (unsigned __int16 *)operator new[](LODWORD(v16[1].var0));
      (*((void (**)(SsrwOOStream *))a3->var0 + 7))(a3);
    }
    v25 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    CsString::reserve((CsString *)((char *)a2 + 280), v25);
    (*((void (**)(SsrwOOStream *, _QWORD, unsigned int *))a3->var0 + 7))(a3, *((_QWORD *)a2 + 36), &v25);
    CsString::setCount((CsString *)((char *)a2 + 280), v25);
    this = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 5))(a3);
    v20 = (_DWORD)this - (a5 + v7);
    if (v20 >= 1)
    {
      v24 = (_DWORD)this - (a5 + v7);
      OcMsoEnvelope::reserveExtraData(a2, v20);
      return (OcParser *)(*((uint64_t (**)(SsrwOOStream *, _QWORD, int *))a3->var0 + 7))(a3, *((_QWORD *)a2 + 41), &v24);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return this;
}

void sub_22A3AF03C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x22A3AEFB4);
  }
  _Unwind_Resume(a1);
}

OcParser *OcParser::parseContactCollection(OcParser *this, OcContactCollection *a2, SsrwOOStream *a3)
{
  unsigned int v5;
  OcParser *result;
  int v7;
  OcContact *v8;
  unsigned int v9;
  _DWORD *exception;

  v5 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
  result = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 6))(a3);
  if (v5 > result)
    goto LABEL_9;
  if (v5)
  {
    v7 = 0;
    while (1)
    {
      v8 = (OcContact *)operator new(0x18uLL);
      OcContact::OcContact(v8);
      OcContactCollection::addContact(a2, v8);
      v9 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      if (v9 > (*((unsigned int (**)(SsrwOOStream *))a3->var0 + 6))(a3))
        break;
      for (result = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3); v9; --v9)
        result = (OcParser *)OcParser::parseMailRecord(result, v8, a3);
      if (++v7 == v5)
        return result;
    }
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8001;
  }
  return result;
}

void sub_22A3AF194(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

CsString *OcMsoEnvelope::addAttachment(OcMsoEnvelope *this)
{
  CsString *v2;
  unint64_t v3;
  CsString **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  CsString **v14;
  char *v15;
  char *v16;
  char *v17;
  CsString *v18;

  v2 = (CsString *)operator new(0x28uLL);
  CsString::CsString(v2);
  v2[1].var1 = 0;
  v4 = (CsString **)*((_QWORD *)this + 39);
  v3 = *((_QWORD *)this + 40);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 38);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 320, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (CsString **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 38);
    v16 = (char *)*((_QWORD *)this + 39);
    if (v16 != v17)
    {
      do
      {
        v18 = (CsString *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 38);
    }
    *((_QWORD *)this + 38) = v14;
    *((_QWORD *)this + 39) = v5;
    *((_QWORD *)this + 40) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 39) = v5;
  return v2;
}

void sub_22A3AF294(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OcParser::parseMailRecord(OcParser *this, OcContact *a2, SsrwOOStream *a3)
{
  OcMailRecord *v5;
  unsigned __int16 v6;
  OcContact *MailRecord;
  _QWORD v9[2];

  v5 = (OcMailRecord *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 8))(a3);
  (*((void (**)(SsrwOOStream *))a3->var0 + 8))(a3);
  v6 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 9))(a3);
  MailRecord = (OcContact *)OcMailRecord::makeMailRecord(v5, v6);
  OcContactCollection::addContact(a2, MailRecord);
  if (!(_DWORD)v5)
    return (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 9))(a3);
  *((_WORD *)MailRecord + 5) = v6;
  v9[0] = &unk_24F3A62F8;
  v9[1] = a3;
  return (*(uint64_t (**)(OcContact *, _QWORD *))(*(_QWORD *)MailRecord + 16))(MailRecord, v9);
}

uint64_t OcParser::parsePointI4FromStream@<X0>(OcParser *this@<X0>, SsrwOOStream *a2@<X1>, _DWORD *a3@<X8>)
{
  int v5;
  uint64_t result;

  v5 = (*(uint64_t (**)(OcParser *, SsrwOOStream *))(*(_QWORD *)this + 96))(this, a2);
  result = (*(uint64_t (**)(OcParser *))(*(_QWORD *)this + 96))(this);
  *a3 = v5;
  a3[1] = result;
  return result;
}

unint64_t OcParser::parseSystemTimeFromStream(OcParser *this, SsrwOOStream *a2)
{
  unsigned int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  v3 = (*(uint64_t (**)(OcParser *, SsrwOOStream *))(*(_QWORD *)this + 80))(this, a2);
  v4 = (*(uint64_t (**)(OcParser *))(*(_QWORD *)this + 80))(this);
  (*(void (**)(OcParser *))(*(_QWORD *)this + 80))(this);
  v5 = (*(uint64_t (**)(OcParser *))(*(_QWORD *)this + 80))(this);
  v6 = (*(uint64_t (**)(OcParser *))(*(_QWORD *)this + 80))(this);
  v7 = (*(uint64_t (**)(OcParser *))(*(_QWORD *)this + 80))(this);
  v8 = (*(uint64_t (**)(OcParser *))(*(_QWORD *)this + 80))(this);
  (*(void (**)(OcParser *))(*(_QWORD *)this + 80))(this);
  return ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48) | ((unint64_t)v6 << 32) | ((unint64_t)v5 << 24) | ((unint64_t)v4 << 16) | v3;
}

EshObjectFactory *OcReader::getEscherObjectFactory(OcReader *this)
{
  return this->var1;
}

void OcText::remove(OcText *this, int a2, int a3)
{
  unsigned int var3;
  char *var5;
  char isSingleByteEncoding;
  _DWORD *exception;

  if (!a3 || (var3 = this->var3, a3 + a2 > var3))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  if (a2 || var3 != a3)
  {
    isSingleByteEncoding = OcText::isSingleByteEncoding(this->var1);
    memmove(&this->var5[(a2 << (isSingleByteEncoding ^ 1)) + this->var2], &this->var5[(a2 << (isSingleByteEncoding ^ 1)) + this->var2 + (a3 << (isSingleByteEncoding ^ 1))], (var3 << (isSingleByteEncoding ^ 1)) - ((a3 << (isSingleByteEncoding ^ 1)) + (a2 << (isSingleByteEncoding ^ 1))));
    this->var3 -= a3;
  }
  else
  {
    var5 = this->var5;
    if (var5)
      bzero(var5, this->var4);
  }
}

unsigned int *OcText::convert(unsigned int *result, int a2)
{
  int v2;
  _QWORD *v4;
  uint64_t v5;
  const void **v6;
  unsigned int v7;
  _DWORD *exception;
  int v9;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    v5 = result[4];
    if (!(_DWORD)v5)
      goto LABEL_14;
    if (v2)
    {
      v6 = (const void **)(result + 8);
      result = (unsigned int *)OcText::convert((unsigned __int16 **)result + 4, *((char **)result + 3), a2, v2, v5);
      if ((_DWORD)result != -1)
      {
        v7 = result;
        if (*((_BYTE *)v4 + 40))
        {
          result = (unsigned int *)v4[3];
          if (v7 <= *((_DWORD *)v4 + 5))
          {
            memcpy(result, *v6, v7);
            result = (unsigned int *)*v6;
            if (*v6)
              result = (unsigned int *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
            *v6 = 0;
            goto LABEL_14;
          }
          if (result)
            result = (unsigned int *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
        }
        else
        {
          *((_BYTE *)v4 + 40) = 1;
        }
        v4[3] = v4[4];
        v4[4] = 0;
        *((_DWORD *)v4 + 5) = v7;
LABEL_14:
        *((_DWORD *)v4 + 2) = a2;
        return result;
      }
      exception = __cxa_allocate_exception(4uLL);
      v9 = 1009;
    }
    else
    {
      exception = __cxa_allocate_exception(4uLL);
      v9 = 1003;
    }
    *exception = v9;
  }
  return result;
}

uint64_t XmlBase64EncoderStream::XmlBase64EncoderStream(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_24F3A64E0;
  *(_QWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 20) = 0;
  return result;
}

void XmlBase64EncoderStream::~XmlBase64EncoderStream(XmlBase64EncoderStream *this)
{
  *(_QWORD *)this = &off_24F3A64E0;
  XmlBase64EncoderStream::Terminate(this);
}

{
  *(_QWORD *)this = &off_24F3A64E0;
  XmlBase64EncoderStream::Terminate(this);
  JUMPOUT(0x22E2DD408);
}

XmlBase64EncoderStream *XmlBase64EncoderStream::write(XmlBase64EncoderStream *this, char *a2, int a3)
{
  XmlBase64EncoderStream *v4;
  uint64_t v5;
  int v6;
  char v7;

  if (a3 >= 1)
  {
    v4 = this;
    v5 = a3;
    LOBYTE(v6) = *((_BYTE *)this + 20);
    do
    {
      v7 = *a2++;
      *((_BYTE *)v4 + v6 + 16) = v7;
      v6 = (*((_BYTE *)v4 + 20))++ + 1;
      if (v6 == 3)
      {
        this = (XmlBase64EncoderStream *)XmlBase64EncoderStream::flush(v4, 4);
        LOBYTE(v6) = 0;
        *((_BYTE *)v4 + 20) = 0;
      }
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t XmlBase64EncoderStream::flush(XmlBase64EncoderStream *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _WORD v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)this + 16);
  v6[0] = XmlBase64EncoderStream::flush(char)::base64Table[v2 >> 2];
  v3 = *((unsigned __int8 *)this + 17);
  v6[1] = XmlBase64EncoderStream::flush(char)::base64Table[(v3 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v2 & 3))];
  v4 = *((unsigned __int8 *)this + 18);
  v6[2] = XmlBase64EncoderStream::flush(char)::base64Table[(v4 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v3 & 0xF))];
  v6[3] = XmlBase64EncoderStream::flush(char)::base64Table[v4 & 0x3F];
  return (*(uint64_t (**)(_QWORD, _WORD *, uint64_t))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v6, a2);
}

_BYTE *XmlBase64EncoderStream::Terminate(_BYTE *this)
{
  _BYTE *v1;
  int v2;
  _QWORD *v3;
  _DWORD *exception;

  v1 = this;
  v2 = (char)this[20];
  if (this[20])
  {
    if (v2 == 2)
    {
      this[18] = 0;
      XmlBase64EncoderStream::flush((XmlBase64EncoderStream *)this, 3);
      v3 = v1 + 8;
    }
    else
    {
      if (v2 != 1)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 5100;
      }
      this[17] = 0;
      XmlBase64EncoderStream::flush((XmlBase64EncoderStream *)this, 2);
      v3 = v1 + 8;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v1 + 1) + 32))(*((_QWORD *)v1 + 1), 61);
    }
    this = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 32))(*v3, 61);
  }
  v1[20] = 0;
  return this;
}

uint64_t XmlHexEncoderStream::XmlHexEncoderStream(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24F3A6538;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = operator new[](0x40uLL);
  return a1;
}

void XmlHexEncoderStream::~XmlHexEncoderStream(XmlHexEncoderStream *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A6538;
  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A6538;
  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  JUMPOUT(0x22E2DD408);
}

uint64_t XmlHexEncoderStream::write(uint64_t this, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  signed int v9;
  int v10;

  if (a3 >= 1)
  {
    v5 = this;
    v6 = 0;
    v7 = *(_DWORD *)(this + 16);
    do
    {
      if (v7 >= 0)
        v8 = v7;
      else
        v8 = v7 + 15;
      if ((v7 & 0xF) == 0)
      {
        if (a3 > 0x10 || v7)
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 32))(*(_QWORD *)(v5 + 8), 13);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 32))(*(_QWORD *)(v5 + 8), 10);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 32))(*(_QWORD *)(v5 + 8), 9);
          v7 = *(_DWORD *)(v5 + 16);
        }
        snprintf(*(char **)(v5 + 24), 0x40uLL, "0x%08X  - ", v7);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 16))(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 24), 14);
        v7 = *(_DWORD *)(v5 + 16);
      }
      v9 = (v8 & 0xFFFFFFF0) - v7 + 16;
      if (a3 - v6 >= v9)
        v10 = v9;
      else
        v10 = a3 - v6;
      this = XmlHexEncoderStream::flushChunk((XmlHexEncoderStream *)v5, a2, v6, v10);
      v6 += v10;
      v7 = *(_DWORD *)(v5 + 16) + v10;
      *(_DWORD *)(v5 + 16) = v7;
    }
    while (v6 < a3);
  }
  return this;
}

uint64_t XmlHexEncoderStream::flushChunk(XmlHexEncoderStream *this, const char *a2, int a3, int a4)
{
  char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (char *)*((_QWORD *)this + 3);
  if (a4 < 1)
  {
    v11 = *((_QWORD *)this + 3);
  }
  else
  {
    v6 = 0;
    v7 = &a2[a3];
    v8 = a4;
    do
    {
      v9 = v7[v6];
      v10 = *((_QWORD *)this + 3);
      if (v6 == 8)
      {
        v5 += snprintf(v5, v10 - (_QWORD)v5 + 64, " ");
        v10 = *((_QWORD *)this + 3);
      }
      v5 += snprintf(v5, v10 - (_QWORD)v5 + 64, " %02X", v9);
      ++v6;
    }
    while (v8 != v6);
    v11 = *((_QWORD *)this + 3);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v11, ((_DWORD)v5 - v11));
}

uint64_t XmlHexEncoderStream::flush(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

XmlBufferOutputStream *XmlOutputStream::createBufferStream(XmlOutputStream *this, char *a2)
{
  int v2;
  XmlBufferOutputStream *v4;

  v2 = (int)a2;
  v4 = (XmlBufferOutputStream *)operator new(0x18uLL);
  XmlBufferOutputStream::XmlBufferOutputStream(v4, (char *)this, v2);
  return v4;
}

void sub_22A3AFCC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

XmlUTF8EncoderStream *XmlOutputStream::createStreamOfType(int a1, XmlOutputStream *a2)
{
  XmlUTF8EncoderStream *v3;

  if (a1 == 3)
  {
    v3 = (XmlUTF8EncoderStream *)operator new(0x20uLL);
    XmlHexEncoderStream::XmlHexEncoderStream((uint64_t)v3, (uint64_t)a2);
  }
  else if (a1 == 1)
  {
    v3 = (XmlUTF8EncoderStream *)operator new(0x10uLL);
    XmlUTF8EncoderStream::XmlUTF8EncoderStream(v3, a2);
  }
  else if (a1)
  {
    return 0;
  }
  else
  {
    v3 = (XmlUTF8EncoderStream *)operator new(0x18uLL);
    XmlBase64EncoderStream::XmlBase64EncoderStream((uint64_t)v3, (uint64_t)a2);
  }
  return v3;
}

void sub_22A3AFD68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XmlUTF8EncoderStream::XmlUTF8EncoderStream(XmlUTF8EncoderStream *this, XmlOutputStream *a2)
{
  *(_QWORD *)this = &off_24F3A6590;
  *((_QWORD *)this + 1) = a2;
}

void XmlUTF8EncoderStream::~XmlUTF8EncoderStream(XmlUTF8EncoderStream *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XmlUTF8EncoderStream::write(uint64_t this, const char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  _DWORD *exception;
  int v8;
  int __dst;
  __int16 v10;

  v10 = 0;
  v8 = 6;
  __dst = 0;
  if (a3 >= 1)
  {
    v4 = this;
    v5 = a3;
    do
    {
      v6 = *a2++;
      CsUTF8CharFromWideChar(v6, &__dst, &v8);
      if (v8 <= 0)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 5100;
      }
      this = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8), &__dst);
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t XmlUTF8EncoderStream::write(uint64_t this, const unsigned __int16 *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *exception;
  int v8;
  int __dst;
  __int16 v10;

  v10 = 0;
  __dst = 0;
  if (a3 >= 1)
  {
    v4 = this;
    v5 = a3;
    do
    {
      v8 = 6;
      v6 = *a2++;
      CsUTF8CharFromWideChar(v6, &__dst, &v8);
      if (v8 <= 0)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 5100;
      }
      this = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8), &__dst);
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t XmlUTF8EncoderStream::write(XmlUTF8EncoderStream *this, uint64_t a2)
{
  _DWORD *exception;
  int v5;
  int __dst;
  __int16 v7;

  v7 = 0;
  v5 = 6;
  __dst = 0;
  CsUTF8CharFromWideChar(a2, &__dst, &v5);
  if (v5 <= 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5100;
  }
  return (*(uint64_t (**)(_QWORD, int *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), &__dst);
}

uint64_t XmlUTF8EncoderStream::flush(XmlUTF8EncoderStream *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

void XmlWriter::XmlWriter(XmlWriter *this, XmlOutputStream *a2, int a3)
{
  int v5;
  void *v6;
  _DWORD *exception;

  *(_QWORD *)this = off_24F3A65E8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 10;
  *((_QWORD *)this + 11) = 0;
  CsString::CsString((CsString *)this + 4);
  *((_DWORD *)this + 30) = 0;
  *((_BYTE *)this + 124) = 0;
  if (a3)
    v5 = 3;
  else
    v5 = 0;
  *((_QWORD *)this + 1) = XmlOutputStream::createStreamOfType(v5, *((XmlOutputStream **)this + 3));
  XmlWriter::setIDPrefix(this, "_id");
  v6 = operator new[](0x100uLL);
  *((_QWORD *)this + 11) = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1001;
  }
}

void sub_22A3B0054(_Unwind_Exception *a1)
{
  uint64_t v1;

  ChStack<CsString>::~ChStack((uint64_t *)(v1 + 48));
  _Unwind_Resume(a1);
}

char *XmlWriter::setIDPrefix(XmlWriter *this, const char *__s)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  char *result;

  v4 = strlen(__s);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C8077774924);
  *((_QWORD *)this + 4) = 0;
  v6 = (v4 << 32) + 0x100000000;
  v7 = v6 >> 32;
  if (v6 < 0)
    v8 = -1;
  else
    v8 = v6 >> 32;
  v9 = operator new[](v8);
  *((_QWORD *)this + 4) = v9;
  bzero(v9, v7);
  result = (char *)*((_QWORD *)this + 4);
  if (result)
    return strncpy(result, __s, (int)v4);
  return result;
}

void XmlWriter::~XmlWriter(XmlWriter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24F3A65E8;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 1) = 0;
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C8077774924);
  *((_QWORD *)this + 11) = 0;
  CsString::~CsString((CsString *)this + 4);
  ChStack<CsString>::~ChStack((uint64_t *)this + 6);
}

{
  XmlWriter::~XmlWriter(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t XmlWriter::openNode(XmlWriter *this, const char *a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  _DWORD *exception;

  if (*((_DWORD *)this + 30) == 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5101;
  }
  XmlWriter::closeCurrentElement(this, 1);
  if (!*((_BYTE *)this + 124))
  {
    v6 = *((_DWORD *)this + 10) + *((_DWORD *)this + 16);
    if (v6 >= 1)
    {
      do
      {
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 9);
        --v6;
      }
      while (v6);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 60);
  result = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a2, a3);
  if ((int)a3 >= 1 && *a2 == 63)
  {
    v8 = 2;
  }
  else
  {
    result = strcmp(a2, "!DOCTYPE");
    if ((_DWORD)result)
    {
      *((_DWORD *)this + 28) = 0;
      bzero(*((void **)this + 13), 2 * *((unsigned int *)this + 29));
      CsString::append((CsString *)this + 4, a2, a3);
      result = (uint64_t)ChStack<CsString>::push((uint64_t *)this + 6, (const CsString *)this + 4);
      v8 = 3;
    }
    else
    {
      v8 = 1;
    }
  }
  *((_DWORD *)this + 30) = v8;
  return result;
}

uint64_t XmlWriter::addAttribute(char **a1, const char *a2, int a3, int a4)
{
  size_t v6;

  switch(a4)
  {
    case 2:
      dwordToBinary(a1[11], a3);
      break;
    case 1:
      snprintf(a1[11], 0x100uLL, "0x%08X");
      break;
    case 0:
      snprintf(a1[11], 0x100uLL, "%u");
      break;
  }
  if (a1[11])
    v6 = strlen(a1[11]);
  else
    v6 = 0;
  return XmlWriter::addAttribute((XmlWriter *)a1, a2, a1[11], v6, 0);
}

uint64_t dwordToBinary(char *a1, int a2)
{
  byteToBinary((uint64_t)a1, SHIBYTE(a2));
  byteToBinary((uint64_t)(a1 + 8), SBYTE2(a2));
  byteToBinary((uint64_t)(a1 + 16), SBYTE1(a2));
  return byteToBinary((uint64_t)(a1 + 24), a2);
}

uint64_t byteToBinary(uint64_t result, char a2)
{
  char v2;
  int16x8_t v3;
  char v4;
  char v5;
  char v6;

  if (result)
  {
    if (a2 >= 0)
      v2 = 48;
    else
      v2 = 49;
    *(_BYTE *)result = v2;
    v3 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a2), (int8x16_t)xmmword_22A4C1100));
    *(int8x8_t *)v3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)v3), (int8x8_t)0x30003000300030, (int8x8_t)0x31003100310031);
    *(_DWORD *)(result + 1) = vmovn_s16(v3).u32[0];
    if ((a2 & 4) != 0)
      v4 = 49;
    else
      v4 = 48;
    *(_BYTE *)(result + 5) = v4;
    if ((a2 & 2) != 0)
      v5 = 49;
    else
      v5 = 48;
    *(_BYTE *)(result + 6) = v5;
    if ((a2 & 1) != 0)
      v6 = 49;
    else
      v6 = 48;
    *(_BYTE *)(result + 7) = v6;
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

uint64_t XmlWriter::addAttribute(XmlWriter *this, const char *a2, const char *a3, uint64_t a4, int a5)
{
  const char *v5;
  const char *v6;
  int v7;
  size_t v11;
  uint64_t result;
  _DWORD *exception;

  if (a2)
    v5 = a2;
  else
    v5 = "NULL";
  if (a3)
    v6 = a3;
  else
    v6 = "NULL";
  v7 = *((_DWORD *)this + 30);
  if (!v7)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5103;
  }
  v11 = strlen(v5);
  if (v7 == 5)
    XmlWriter::closeAttribute(this);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 32);
  if ((_DWORD)v11)
  {
    (*(void (**)(_QWORD, const char *, size_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v5, v11);
    (*(void (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), "=\"", 2);
  }
  if (a5)
  {
    result = XmlWriter::escapeText(this, v6, a4, 1, 1);
    if ((_DWORD)v11)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 34);
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v6, a4);
    if ((_DWORD)v11)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 34);
  }
  return result;
}

uint64_t XmlWriter::closeAttribute(XmlWriter *this)
{
  uint64_t result;
  _DWORD *exception;

  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5106;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 34);
  *((_DWORD *)this + 30) = 3;
  return result;
}

uint64_t XmlWriter::escapeText(XmlWriter *this, const char *a2, int a3, char a4, char a5)
{
  const char *v5;
  uint64_t result;
  uint64_t v10;
  int v11;

  v5 = a2;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)result + 16))(result, a2);
  if (a3 >= 1)
  {
    v10 = a3;
    do
    {
      v11 = *(unsigned __int8 *)v5++;
      result = XmlWriter::escapeCharacter(this, v11, a4, a5);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t XmlWriter::escapeText(XmlWriter *this, const unsigned __int16 *a2, int a3, char a4, char a5)
{
  const unsigned __int16 *v5;
  uint64_t result;
  uint64_t v10;
  int v11;

  v5 = a2;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t, const unsigned __int16 *))(*(_QWORD *)result + 24))(result, a2);
  if (a3 >= 1)
  {
    v10 = a3;
    do
    {
      v11 = *v5++;
      result = XmlWriter::escapeCharacter(this, v11, a4, a5);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t XmlWriter::escapeCharacter(XmlWriter *this, int a2, char a3, char a4)
{
  const char *v5;
  uint64_t v6;

  if (a2 <= 37)
  {
    if (a2 == 10 || a2 == 13)
    {
      if ((a3 & 1) == 0)
        return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
      goto LABEL_18;
    }
    if (a2 == 34)
    {
      if ((a4 & 1) != 0)
      {
        v5 = "&quot;";
        goto LABEL_12;
      }
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    }
LABEL_15:
    if ((unsigned __int16)(a2 - 127) > 0xFFA0u)
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
LABEL_18:
    v5 = XmlWriter::escapeCharacter(unsigned short,BOOL,BOOL)::code;
    v6 = snprintf(XmlWriter::escapeCharacter(unsigned short,BOOL,BOOL)::code, 0xFuLL, "&#%d;", a2);
    return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v5, v6);
  }
  if (a2 > 59)
  {
    if (a2 == 60 || a2 == 62)
      goto LABEL_18;
    goto LABEL_15;
  }
  if (a2 == 38)
    goto LABEL_18;
  if (a2 != 39)
    goto LABEL_15;
  if ((a4 & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v5 = "&apos;";
LABEL_12:
  v6 = 6;
  return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v5, v6);
}

_DWORD *XmlWriter::closeCurrentElement(_DWORD *this, int a2)
{
  _DWORD *v2;
  int v3;
  BOOL v4;

  v2 = this;
  v3 = this[30];
  if (v3)
    v4 = v3 == 4;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 == 5)
    {
      XmlWriter::closeAttribute((XmlWriter *)this);
      v3 = v2[30];
    }
    if (v3 == 2)
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v2 + 3) + 32))(*((_QWORD *)v2 + 3), 63);
    this = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v2 + 3) + 32))(*((_QWORD *)v2 + 3), 62);
    if (a2 && !*((_BYTE *)v2 + 124))
      this = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v2 + 3) + 32))(*((_QWORD *)v2 + 3), 10);
  }
  v2[30] = 0;
  return this;
}

uint64_t XmlWriter::closeNode(CsString *this)
{
  return XmlWriter::closeNode(this, 0, 0);
}

uint64_t XmlWriter::closeNode(CsString *this, unsigned __int16 *a2, int a3)
{
  int var0;
  unsigned int var2;
  int v8;
  const CsString *v9;
  unsigned __int16 *var1;
  int v11;
  uint64_t result;
  int v13;
  const unsigned __int16 *v14;
  _DWORD *exception;

  (*(void (**)(unsigned __int16 *))(*(_QWORD *)this->var1 + 40))(this->var1);
  var0 = (int)this[5].var0;
  if (var0 == 5)
  {
    XmlWriter::closeAttribute((XmlWriter *)this);
    var0 = (int)this[5].var0;
  }
  switch(var0)
  {
    case 0:
      var2 = this[2].var2;
      if (!var2)
        goto LABEL_32;
      if (!BYTE4(this[5].var0))
      {
        v8 = var2 + this[1].var2 - 1;
        if (v8 >= 1)
        {
          do
          {
            (*((void (**)(void **, uint64_t))*this[1].var0 + 4))(this[1].var0, 9);
            --v8;
          }
          while (v8);
        }
      }
      goto LABEL_10;
    case 1:
      (*((void (**)(void **, uint64_t))*this[1].var0 + 4))(this[1].var0, 62);
      goto LABEL_16;
    case 2:
      (*((void (**)(void **, const char *, uint64_t))*this[1].var0 + 2))(this[1].var0, "?>", 2);
LABEL_16:
      v11 = 0;
      goto LABEL_19;
    case 3:
      (*((void (**)(void **, const char *, uint64_t))*this[1].var0 + 2))(this[1].var0, "/>", 2);
      break;
    case 4:
      if (!this[2].var2)
      {
LABEL_32:
        exception = __cxa_allocate_exception(4uLL);
        *exception = 5102;
      }
LABEL_10:
      (*((void (**)(void **, const char *, uint64_t))*this[1].var0 + 2))(this[1].var0, "</", 2);
      v9 = (const CsString *)ChStack<CsString>::top((uint64_t)&this[2]);
      this[4].var2 = 0;
      bzero(this[4].var1, 2 * this[4].var3);
      CsString::append(this + 4, v9);
      if (this[4].var1)
        var1 = this[4].var1;
      else
        var1 = (unsigned __int16 *)&unk_22A4C1134;
      (*((void (**)(void **, unsigned __int16 *, _QWORD))*this[1].var0 + 3))(this[1].var0, var1, this[4].var2);
      (*((void (**)(void **, uint64_t))*this[1].var0 + 4))(this[1].var0, 62);
      break;
    default:
      break;
  }
  v11 = 1;
LABEL_19:
  if (!BYTE4(this[5].var0))
    (*((void (**)(void **, uint64_t))*this[1].var0 + 4))(this[1].var0, 10);
  result = 0;
  LODWORD(this[5].var0) = 0;
  if (v11)
  {
    XmlWriter::popLevel((XmlWriter *)this, this + 4);
    result = 0;
    if (a2)
    {
      if (a3 >= 1)
      {
        v13 = (__int16)this[4].var2;
        if (v13 >= (unsigned __int16)a3 || (LOWORD(a3) = this[4].var2, v13 >= 1))
        {
          if (this[4].var1)
            v14 = this[4].var1;
          else
            v14 = (const unsigned __int16 *)&unk_22A4C1134;
          _ChWcsncpy(a2, v14, (unsigned __int16)a3);
          a2[(unsigned __int16)a3 - 1] = 0;
        }
        return 1;
      }
    }
  }
  return result;
}

CsString *XmlWriter::popLevel(XmlWriter *this, CsString *a2)
{
  const CsString *v4;
  CsString *result;

  v4 = (const CsString *)ChStack<CsString>::top((uint64_t)this + 48);
  a2->var2 = 0;
  bzero(a2->var1, 2 * a2->var3);
  result = CsString::append(a2, v4);
  --*((_DWORD *)this + 16);
  return result;
}

uint64_t XmlWriter::openAttribute(XmlWriter *this, const char *a2, uint64_t a3)
{
  uint64_t result;
  _DWORD *exception;

  if (*((_DWORD *)this + 30) != 3 || !(_DWORD)a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5104;
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 32);
  (*(void (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a2, a3);
  result = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), "=\"", 2);
  *((_DWORD *)this + 30) = 5;
  return result;
}

uint64_t XmlWriter::appendAttribute(XmlWriter *this, const unsigned __int16 *a2, int a3, int a4)
{
  _DWORD *exception;

  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5105;
  }
  if (a4)
    return XmlWriter::escapeText(this, a2, a3, 1, 1);
  else
    return (*(uint64_t (**)(_QWORD, const unsigned __int16 *))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), a2);
}

XmlWriter *XmlWriter::appendAttribute(XmlWriter *this, const char *a2, int a3, int a4)
{
  XmlWriter *v7;
  int i;
  int v9;
  uint64_t v10;
  const char *v11;
  __int16 *v12;
  __int16 v13;

  if (a3 >= 1)
  {
    v7 = this;
    for (i = 0; i < a3; i += v9)
    {
      if (a3 - i >= 35)
        v9 = 35;
      else
        v9 = a3 - i;
      if (a3 - i >= 1)
      {
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        v11 = &a2[i];
        v12 = (__int16 *)XmlWriter::appendAttribute(char const*,int,BOOL)::wideString;
        do
        {
          v13 = *v11++;
          *v12++ = v13;
          --v10;
        }
        while (v10);
      }
      this = (XmlWriter *)XmlWriter::appendAttribute(v7, XmlWriter::appendAttribute(char const*,int,BOOL)::wideString, v9, a4);
    }
  }
  return this;
}

uint64_t XmlWriter::appendAttributeBase64(XmlWriter *this, const unsigned __int16 *a2, int a3)
{
  _DWORD *exception;

  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5105;
  }
  return (*(uint64_t (**)(_QWORD, const unsigned __int16 *, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2, (2 * a3));
}

uint64_t XmlWriter::appendAttributeBase64(XmlWriter *this, const unsigned __int8 *a2)
{
  _DWORD *exception;

  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5105;
  }
  return (*(uint64_t (**)(_QWORD, const unsigned __int8 *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
}

XmlWriter *XmlWriter::appendAttributeHex(XmlWriter *this, const unsigned __int8 *a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int16 *v11;
  int v12;
  int v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  __int16 *v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *exception;
  int v26;
  XmlWriter *v27;
  int v28;

  v27 = this;
  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5105;
  }
  if (a3 < 17)
  {
    if (a3 < 1)
      return this;
  }
  else
  {
    XmlWriter::appendAttribute(this, "\n", 1, 0);
  }
  v4 = 0;
  v5 = 0;
  v6 = a3;
  do
  {
    v28 = v6 - 16;
    if (v6 >= 16)
      v7 = 16;
    else
      v7 = v6;
    if (a3 - 16 * v5 >= 16)
      v8 = 16;
    else
      v8 = a3 - 16 * v5;
    v9 = a3 - v4;
    if (a3 - (int)v4 >= 16)
      v10 = 16;
    else
      v10 = a3 - v4;
    v11 = &XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer;
    if (a3 >= 17)
    {
      v26 = v10;
      v12 = v5;
      v13 = v8;
      snprintf((char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer, 0x50uLL, "%04lX", v4);
      v14 = strlen((const char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer);
      v8 = v13;
      v5 = v12;
      v10 = v26;
      v15 = (char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer + v14;
      *(_WORD *)v15 = 8224;
      v15[2] = 32;
      v11 = (__int16 *)((char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer + v14 + 3);
    }
    if (v9 < 1)
    {
      v18 = v11;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = a2[v16];
        *(_BYTE *)v11 = sHexConversions[v17 >> 4];
        *((_BYTE *)v11 + 1) = sHexConversions[v17 & 0xF];
        v18 = (__int16 *)((char *)v11 + 3);
        *((_BYTE *)v11 + 2) = 32;
        ++v16;
        v11 = (__int16 *)((char *)v11 + 3);
      }
      while (v16 < v10);
    }
    if (a3 >= 17 && v9 <= 15)
    {
      v19 = 3 * (15 - v7);
      v20 = v10;
      memset(v18, 32, 3 * (15 - v8) + 3);
      v10 = v20;
      v18 = (__int16 *)((char *)v18 + v19 + 3);
    }
    *v18 = 8224;
    v21 = v18 + 1;
    if (v9 < 1)
    {
      v23 = v28;
    }
    else
    {
      v22 = 0;
      v23 = v28;
      do
      {
        v24 = a2[v22];
        if ((v24 - 32) >= 0x5F)
          LOBYTE(v24) = 46;
        *((_BYTE *)v21 + v22++) = v24;
      }
      while (v22 < v10);
      LODWORD(v21) = (_DWORD)v21 + v22;
    }
    this = XmlWriter::appendAttribute(v27, (const char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer, v21 - &XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer, 1);
    if (a3 > 16)
      this = XmlWriter::appendAttribute(v27, "\n", 1, 0);
    v4 += 16;
    ++v5;
    a2 += 16;
    v6 = v23;
  }
  while ((int)v4 < a3);
  return this;
}

CsString *ChStack<CsString>::push(uint64_t *a1, const CsString *a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const CsString *v12;
  CsString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CsString *v20;
  CsString *result;

  LODWORD(v4) = *((_DWORD *)a1 + 4);
  v5 = *((_DWORD *)a1 + 5);
  if ((int)v4 + 1 <= v5)
  {
    v19 = *a1;
  }
  else
  {
    v6 = *((_DWORD *)a1 + 6) + v5;
    *((_DWORD *)a1 + 5) = v6;
    v7 = operator new[](24 * v6 + 16);
    *v7 = 24;
    v7[1] = v6;
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = 24 * v6;
      do
      {
        CsString::CsString((CsString *)&v7[v8 / 8 + 2]);
        v8 += 24;
      }
      while (v9 != v8);
    }
    a1[1] = (uint64_t)(v7 + 2);
    LODWORD(v4) = *((_DWORD *)a1 + 4);
    if ((_DWORD)v4)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = (const CsString *)(*a1 + v10);
        v13 = (CsString *)(a1[1] + v10);
        v13->var2 = 0;
        bzero(v13->var1, 2 * v13->var3);
        CsString::append(v13, v12);
        ++v11;
        v4 = *((unsigned int *)a1 + 4);
        v10 += 24;
      }
      while (v11 < v4);
    }
    v14 = *a1;
    if (*a1)
    {
      v15 = v14 - 16;
      v16 = *(_QWORD *)(v14 - 8);
      if (v16)
      {
        v17 = 24 * v16;
        v18 = v14 - 24;
        do
        {
          CsString::~CsString((CsString *)(v18 + v17));
          v17 -= 24;
        }
        while (v17);
      }
      MEMORY[0x22E2DD3F0](v15, 0x1091C803BDA009ALL);
      LODWORD(v4) = *((_DWORD *)a1 + 4);
    }
    v19 = a1[1];
    *a1 = v19;
    a1[1] = 0;
  }
  v20 = (CsString *)(v19 + 24 * v4);
  v20->var2 = 0;
  bzero(v20->var1, 2 * v20->var3);
  result = CsString::append(v20, a2);
  ++*((_DWORD *)a1 + 4);
  return result;
}

void sub_22A3B11E8(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;

  for (; v2; v2 -= 24)
    CsString::~CsString((CsString *)&v1[v2 - 8]);
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t ChStack<CsString>::top(uint64_t a1)
{
  int v1;
  _DWORD *exception;

  if (!*(_QWORD *)a1 || (v1 = *(_DWORD *)(a1 + 16)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1000;
  }
  return *(_QWORD *)a1 + 24 * (v1 - 1);
}

uint64_t *ChStack<CsString>::~ChStack(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = 24 * v4;
      v6 = v2 - 24;
      do
      {
        CsString::~CsString((CsString *)(v6 + v5));
        v5 -= 24;
      }
      while (v5);
    }
    MEMORY[0x22E2DD3F0](v3, 0x1091C803BDA009ALL);
  }
  *a1 = 0;
  v7 = a1[1];
  if (v7)
  {
    v8 = v7 - 16;
    v9 = *(_QWORD *)(v7 - 8);
    if (v9)
    {
      v10 = 24 * v9;
      v11 = v7 - 24;
      do
      {
        CsString::~CsString((CsString *)(v11 + v10));
        v10 -= 24;
      }
      while (v10);
    }
    MEMORY[0x22E2DD3F0](v8, 0x1091C803BDA009ALL);
  }
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 6) = 0;
  a1[2] = 0;
  return a1;
}

void OCCCommonHmac::~OCCCommonHmac(OCCCommonHmac *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t OCCCommonHmac::getOutputSize(OCCCommonHmac *this)
{
  if (*((_DWORD *)this + 2) == 1)
    return 16;
  else
    return 20;
}

char *OCCCommonHmac::getName(OCCCommonHmac *this)
{
  return OCCCommonHmac::getName(void)const::kHmacNames[*((unsigned int *)this + 2)];
}

void OCCCommonHmac::initHmac(OCCCommonHmac *this, const void *key, size_t keyLength)
{
  CCHmacInit((CCHmacContext *)((char *)this + 12), *((_DWORD *)this + 2), key, keyLength);
}

void OCCCommonHmac::updateHmac(OCCCommonHmac *this, const void *a2, size_t dataLength)
{
  CCHmacUpdate((CCHmacContext *)((char *)this + 12), a2, dataLength);
}

void OCCCommonHmac::finalHmac(OCCCommonHmac *this, void *a2)
{
  CCHmacFinal((CCHmacContext *)((char *)this + 12), a2);
}

void OCCCommonHmac::computeHmac(OCCCommonHmac *this, const void *a2, size_t keyLength, const void *a4, size_t dataLength, void *a6)
{
  CCHmac(*((_DWORD *)this + 2), a2, keyLength, a4, dataLength, a6);
}

uint64_t OCCHmac::createFromName(OCCHmac *this, const char *a2)
{
  uint64_t result;
  __int128 v4;
  _OWORD *v5;
  int v6;

  if (!strcmp((const char *)this, "SHA1") || !strcmp((const char *)this, "SHA-1"))
  {
    result = operator new();
    *(_QWORD *)result = &off_24F3A6638;
    v4 = 0uLL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_DWORD *)(result + 392) = 0;
    *(_OWORD *)(result + 8) = 0u;
    v5 = (_OWORD *)(result + 8);
  }
  else
  {
    if (!strcmp((const char *)this, "SHA256") || !strcmp((const char *)this, "SHA-256"))
    {
      result = operator new();
      *(_QWORD *)result = &off_24F3A6638;
      v6 = 5;
    }
    else if (!strcmp((const char *)this, "SHA384") || !strcmp((const char *)this, "SHA-384"))
    {
      result = operator new();
      *(_QWORD *)result = &off_24F3A6638;
      v6 = 3;
    }
    else if (!strcmp((const char *)this, "SHA512") || !strcmp((const char *)this, "SHA-512"))
    {
      result = operator new();
      *(_QWORD *)result = &off_24F3A6638;
      v6 = 4;
    }
    else
    {
      if (strcmp((const char *)this, "MD5"))
        return 0;
      result = operator new();
      *(_QWORD *)result = &off_24F3A6638;
      v6 = 1;
    }
    *(_DWORD *)(result + 8) = v6;
    v4 = 0uLL;
    *(_OWORD *)(result + 28) = 0u;
    *(_OWORD *)(result + 44) = 0u;
    *(_OWORD *)(result + 60) = 0u;
    *(_OWORD *)(result + 76) = 0u;
    *(_OWORD *)(result + 92) = 0u;
    *(_OWORD *)(result + 108) = 0u;
    *(_OWORD *)(result + 124) = 0u;
    *(_OWORD *)(result + 140) = 0u;
    *(_OWORD *)(result + 156) = 0u;
    *(_OWORD *)(result + 172) = 0u;
    *(_OWORD *)(result + 188) = 0u;
    *(_OWORD *)(result + 204) = 0u;
    *(_OWORD *)(result + 220) = 0u;
    *(_OWORD *)(result + 236) = 0u;
    *(_OWORD *)(result + 252) = 0u;
    *(_OWORD *)(result + 12) = 0u;
    v5 = (_OWORD *)(result + 12);
  }
  v5[16] = v4;
  v5[17] = v4;
  v5[18] = v4;
  v5[19] = v4;
  v5[20] = v4;
  v5[21] = v4;
  v5[22] = v4;
  v5[23] = v4;
  return result;
}

uint64_t SsrwStrToStr2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = 0;
  if (a3)
  {
    while (*(_BYTE *)(a2 + v3))
    {
      *(_WORD *)(result + 2 * v3) = *(char *)(a2 + v3);
      if (a3 == ++v3)
      {
        v3 = a3;
        break;
      }
    }
  }
  *(_WORD *)(result + 2 * v3) = 0;
  return result;
}

FILE *SsrwFalseWFopen(uint64_t a1, uint64_t a2)
{
  size_t v4;
  uint64_t v6;
  void *v8;
  void *v9;
  const char *v10;
  char *v11;
  size_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  FILE *v16;

  v4 = 0;
  while (*(unsigned __int16 *)(a1 + 2 * v4++))
    ;
  v6 = 0;
  while (*(unsigned __int16 *)(a2 + 2 * v6++))
    ;
  v8 = malloc_type_malloc(v4, 0xC8B0443CuLL);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = (const char *)malloc_type_malloc(v4, 0xF8DC27D1uLL);
  if (!v10)
  {
    free(v9);
    return 0;
  }
  v11 = (char *)v10;
  v12 = 0;
  if (v4)
  {
    while (1)
    {
      v13 = *(_WORD *)(a1 + 2 * v12);
      if (!(_BYTE)v13)
        break;
      *((_BYTE *)v9 + v12++) = v13;
      if (v4 == v12)
      {
        v12 = v4;
        break;
      }
    }
  }
  *((_BYTE *)v9 + v12) = 0;
  v14 = 0;
  if (v6)
  {
    while (1)
    {
      v15 = *(_WORD *)(a2 + 2 * v14);
      if (!(_BYTE)v15)
        break;
      v10[v14++] = v15;
      if (v6 == v14)
      {
        v14 = v6;
        break;
      }
    }
  }
  v10[v14] = 0;
  v16 = fopen((const char *)v9, v10);
  free(v9);
  free(v11);
  return v16;
}

void sub_22A3B185C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v12;
  unsigned int *v14;
  void *v15;

  v12 = v10;

  if (a2 == 3)
  {
    v14 = (unsigned int *)__cxa_begin_catch(a1);
    OCConvertCsException(v14);
    __cxa_end_catch();
  }
  else
  {
    v15 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v15, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A3B1820);
}

void sub_22A3B1910(void *exc_buf)
{
  uint64_t v1;

  objc_begin_catch(exc_buf);
  if (!v1)
    JUMPOUT(0x22A3B1838);
  JUMPOUT(0x22A3B1828);
}

uint64_t SsrwOOMemStream::readUInt64(SsrwOOMemStream *this)
{
  uint64_t v1;
  uint64_t result;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 7)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  result = CsLeReadUInt64(**((_QWORD **)this + 1) + v1);
  *((_DWORD *)this + 5) += 8;
  return result;
}

uint64_t SsrwOOMemStream::readUInt32(SsrwOOMemStream *this)
{
  uint64_t v1;
  uint64_t result;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  result = CsLeReadSInt32((unsigned int *)(**((_QWORD **)this + 1) + v1));
  *((_DWORD *)this + 5) += 4;
  return result;
}

void SsrwOOMemStream::readFloat32(SsrwOOMemStream *this)
{
  uint64_t v1;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  CsLeReadFloat32(**((_QWORD **)this + 1) + v1);
  *((_DWORD *)this + 5) += 4;
}

uint64_t SsrwOOMemStream::readString8(uint64_t this, unsigned int *a2, char *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v6 = this;
    v7 = 0;
    while (1)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      a3[v7] = this;
      if (!(_DWORD)this)
        break;
      if (v4 == ++v7)
      {
        a3[v4] = 0;
        goto LABEL_8;
      }
    }
    LODWORD(v4) = v7 + 1;
  }
LABEL_8:
  *a2 = v4;
  return this;
}

__n128 SsrwOOMemStream::setClass(SsrwOOMemStream *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)this + 24) = *a2;
  return result;
}

uint64_t SsrwOOMemStream::seek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, a4);
}

uint64_t SsrwOOMemStream::getID(SsrwOOMemStream *this)
{
  return 0;
}

uint64_t SsrwOOPropertyStorage::getNumberOfProperties(uint64_t **this)
{
  int NumberOfProperties;
  int v3;
  _DWORD *exception;
  unsigned int v5;

  v5 = 0;
  NumberOfProperties = propertyStorageGetNumberOfProperties(this[1], &v5);
  if (NumberOfProperties)
  {
    v3 = NumberOfProperties;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

BOOL SsrwOOPropertyStorage::getPropertyNameAndIDByIndex(uint64_t **this, unsigned int a2, char **a3, unsigned int *a4)
{
  int PropertyNameAndIDByIndex;
  BOOL v5;
  int v7;
  _DWORD *exception;

  PropertyNameAndIDByIndex = propertyStorageGetPropertyNameAndIDByIndex(this[1], a2, a3, (int *)a4);
  if (PropertyNameAndIDByIndex)
    v5 = PropertyNameAndIDByIndex == 13;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = PropertyNameAndIDByIndex;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v7;
  }
  return PropertyNameAndIDByIndex != 13;
}

uint64_t SsrwOOPropertyStorage::freePropertyName(SsrwOOPropertyStorage *this, unsigned __int8 *a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;
  void *v5;

  v5 = this;
  result = freeDocumentPropertyName(&v5);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOPropVariant::getSInt2Value(SsrwOOPropVariant *this)
{
  return *(__int16 *)(*((_QWORD *)this + 1) + 8);
}

uint64_t SsrwOORootStorage::open(_QWORD *a1, const char *a2, int a3)
{
  uint64_t *v5;
  uint64_t result;
  int v7;
  _DWORD *exception;

  v5 = a1 + 10;
  if (a3)
  {
    LODWORD(result) = createStructuredStorage(a2, 1, v5);
    if ((_DWORD)result)
    {
LABEL_6:
      v7 = result;
      exception = __cxa_allocate_exception(4uLL);
      *exception = v7;
    }
  }
  else
  {
    LODWORD(result) = openStructuredStorage(a2, 0, v5);
    if ((_DWORD)result)
      goto LABEL_6;
  }
  result = getStorageFromRoot(a1[10], a1);
  if ((_DWORD)result)
    goto LABEL_6;
  return result;
}

uint64_t SsrwOORootStorage::openInStream(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v5;
  _DWORD *exception;

  LODWORD(result) = openStructuredStorageInStream(a2, a3, a1 + 10);
  if ((_DWORD)result || (result = getStorageFromRoot(a1[10], a1), (_DWORD)result))
  {
    v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  return result;
}

uint64_t SsrwOORootStorage::createInStream(SsrwOORootStorage *this, __sFILE *a2, int8x8_t a3)
{
  uint64_t result;
  int v5;
  _DWORD *exception;

  LODWORD(result) = createStructuredStorageInStream((uint64_t)a2, 1, (uint64_t *)this + 10, a3);
  if ((_DWORD)result || (result = getStorageFromRoot(*((_QWORD *)this + 10), this), (_DWORD)result))
  {
    v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  return result;
}

uint64_t SsrwOORootStorage::createRWStorageInStream(SsrwOORootStorage *this, __sFILE *a2, int8x8_t a3)
{
  uint64_t result;
  int v5;
  _DWORD *exception;

  LODWORD(result) = createStructuredStorageInStream((uint64_t)a2, 2, (uint64_t *)this + 10, a3);
  if ((_DWORD)result || (result = getStorageFromRoot(*((_QWORD *)this + 10), this), (_DWORD)result))
  {
    v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  return result;
}

void SsrwOOStgInfo::SsrwOOStgInfo(SsrwOOStgInfo *this, const _StgInfo *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  if (a2)
  {
    if (a2->var0)
    {
      *((_OWORD *)this + 2) = 0u;
      *((_OWORD *)this + 3) = 0u;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
      *((_QWORD *)this + 8) = this;
      *((_BYTE *)this + 72) = 0;
      v2 = *(_OWORD *)&a2->var7.var1;
      v4 = *(_OWORD *)&a2->var0;
      v3 = *(_OWORD *)&a2->var3;
      *((_OWORD *)this + 2) = *(_OWORD *)&a2->var5;
      *((_OWORD *)this + 3) = v2;
      *(_OWORD *)this = v4;
      *((_OWORD *)this + 1) = v3;
      *(_QWORD *)this = (char *)this + 108;
      SsrwOOStgInfo::setNamePrivate<unsigned short>((uint64_t)this, (uint64_t)a2->var0);
    }
  }
}

uint64_t SsrwOOStgInfo::setNamePrivate<unsigned short>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD *exception;

  v2 = 0;
  *(_BYTE *)(result + 72) = 0;
  while (*(unsigned __int16 *)(a2 + 2 * v2++))
    ;
  if ((unint64_t)(v2 - 1) > 0x23)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 18;
  }
  v4 = 0;
  v5 = **(_QWORD **)(result + 64);
  do
  {
    *(_WORD *)(v5 + 2 * v4) = *(_WORD *)(a2 + 2 * v4);
    ++v4;
  }
  while (v2 != v4);
  return result;
}

uint64_t SsrwOOStgInfo::getWcsName(SsrwOOStgInfo *this)
{
  return **((_QWORD **)this + 8);
}

uint64_t SsrwOOStgInfo::getType(SsrwOOStgInfo *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 8) + 8);
}

uint64_t SsrwOOStgInfo::getSize(SsrwOOStgInfo *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 8) + 16);
}

__n128 SsrwOOStgInfo::getCLSID(SsrwOOStgInfo *this, _SsrwOO_GUID *a2)
{
  __n128 result;

  result = *(__n128 *)(*((_QWORD *)this + 8) + 44);
  *a2 = (_SsrwOO_GUID)result;
  return result;
}

uint64_t SsrwOOStgStream::readUInt64(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  uint64_t v5;

  v5 = 0;
  v1 = readUInt64(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t SsrwOOStgStream::getInfo(SsrwOOStgStream *this)
{
  return (uint64_t)this + 8;
}

uint64_t SsrwOOStgStream::getCStream(SsrwOOStgStream *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t SsrwOOStgStream::writeByte(SsrwOOStgStream *this, char a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;
  unsigned int v5;
  char v6;

  v6 = a2;
  v5 = 1;
  result = streamWrite(*((_QWORD *)this + 24), (uint64_t)&v6, &v5);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeSInt16(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = writeSInt16(*((_QWORD *)this + 24), a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeUInt16(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = writeSInt16(*((_QWORD *)this + 24), a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeSInt32(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = writeSInt32(*((_QWORD *)this + 24), a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeUInt32(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = writeSInt32(*((_QWORD *)this + 24), a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeFloat32(SsrwOOStgStream *this, float a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = writeFloat32(*((_QWORD *)this + 24), a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeFloat64(SsrwOOStgStream *this, double a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = writeFloat64(*((_QWORD *)this + 24), a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeChar16(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = writeSInt16(*((_QWORD *)this + 24), a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeString16(SsrwOOStgStream *this, unsigned __int16 *a2, unsigned int *a3)
{
  uint64_t result;
  int v5;
  _DWORD *exception;
  int v7;

  v7 = *a3;
  result = writeString16(*((_QWORD *)this + 24), a2, (unsigned int *)&v7);
  if ((_DWORD)result)
  {
    v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  *a3 = v7;
  return result;
}

_QWORD *SsrwOOStorage::createStorage(SsrwOOStorage *this, const char *__s)
{
  size_t v4;

  v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::createStorage(this, this->var1);
}

SsrwOOStgStream *SsrwOOStorage::createStream(SsrwOOStorage *this, const char *__s)
{
  size_t v4;

  v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::createStream(this, this->var1);
}

void sub_22A3B2468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CsString *SsrwOOStream::readCsString(SsrwOOStream *this, CsString *a2)
{
  unsigned int v4;
  CsString *result;
  _DWORD *exception;
  unsigned int v7;

  v4 = (*((uint64_t (**)(SsrwOOStream *))this->var0 + 10))(this);
  result = CsString::setCount(a2, v4);
  if (v4)
  {
    v7 = v4;
    result = (CsString *)(*((uint64_t (**)(SsrwOOStream *, unsigned int *, unsigned __int16 *))this->var0 + 17))(this, &v7, a2->var1);
    if (v7 != v4)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 17;
    }
  }
  return result;
}

uint64_t SsrwOOStream::getSize(SsrwOOStream *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*((uint64_t (**)(SsrwOOStream *))this->var0 + 5))(this);
  (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))this->var0 + 2))(this, 0, 2);
  v3 = (*((uint64_t (**)(SsrwOOStream *))this->var0 + 5))(this);
  (*((void (**)(SsrwOOStream *, uint64_t, _QWORD))this->var0 + 2))(this, v2, 0);
  return v3;
}

uint64_t directoryInvalidate(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 92) = -1;
  *(_DWORD *)(a1 + 100) = -1;
  *(_DWORD *)(a1 + 84) = 0;
  return 0;
}

uint64_t propertyStorageGetNumberOfProperties(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *a1) != 0)
    return propertySetGetNumberOfProperties(v2, a2);
  else
    return 6;
}

uint64_t setDocumentProperty(uint64_t a1, int a2, uint64_t a3, int a4, char *__s)
{
  uint64_t v6;
  __int16 v10;
  size_t v11;
  size_t v12;
  void *v13;
  unsigned int SInt32;
  int v15;
  int v16;
  _QWORD *v17;
  void *v18;
  char *v19;
  size_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t StorageFromRoot;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t *v30;
  uint64_t *v31;

  v30 = 0;
  v31 = 0;
  if (!a1)
    return 6;
  v6 = 6;
  if ((a2 - 4) >= 0xFFFFFFFD && __s)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    switch(a4)
    {
      case 0:
        v10 = 2;
        goto LABEL_18;
      case 1:
        LOWORD(v27) = 3;
        LODWORD(v28) = *(_DWORD *)__s;
        goto LABEL_22;
      case 2:
        LOWORD(v27) = 30;
        v11 = strlen(__s);
        v6 = 5;
        if (HIDWORD(v11))
          return v6;
        v12 = (v11 + 1);
        if (!(_DWORD)v12)
          return v6;
        v13 = malloc_type_malloc(v12, 0xF0BB0765uLL);
        v28 = v13;
        if (!v13)
          return v6;
        strcpy((char *)v13, __s);
        goto LABEL_22;
      case 3:
        LOWORD(v27) = 64;
        v6 = WinFileTimeFromTime_t(*(_QWORD *)__s, (unsigned int *)&v28);
        if (!(_DWORD)v6)
          goto LABEL_22;
        return v6;
      case 4:
        LOWORD(v27) = 71;
        SInt32 = CsLeReadSInt32((unsigned int *)__s);
        v15 = CsLeReadSInt32((unsigned int *)__s + 1);
        if (SInt32 < 5)
          return 5;
        v16 = v15;
        v17 = malloc_type_malloc(0x10uLL, 0x1010040466105CCuLL);
        v28 = v17;
        if (!v17)
          return 5;
        v17[1] = malloc_type_malloc(SInt32, 0xB0440E18uLL);
        if (!*((_QWORD *)v28 + 1))
        {
          free(v28);
          return 5;
        }
        *(_DWORD *)v28 = SInt32;
        *((_DWORD *)v28 + 1) = v16;
        v18 = (void *)*((_QWORD *)v28 + 1);
        v19 = __s + 8;
        v20 = SInt32 - 4;
LABEL_21:
        memcpy(v18, v19, v20);
LABEL_22:
        if ((a2 - 1) > 2)
          v22 = 0;
        else
          v22 = *(&off_24F3A69F8 + a2 - 1);
        StorageFromRoot = getStorageFromRoot(a1, &v30);
        if ((_DWORD)StorageFromRoot || (StorageFromRoot = propertyStorageOpen(v30, v22, &v31), (_DWORD)StorageFromRoot))
        {
          v6 = StorageFromRoot;
          propVariantCleanup((uint64_t)&v27);
          return v6;
        }
        v24 = v31;
        v25 = propertyStorageSetPropertyValueWithID(v31, a3, (unsigned __int16 *)&v27);
        if ((_DWORD)v25)
        {
          v6 = v25;
          propVariantCleanup((uint64_t)&v27);
          if (v24)
            free(v24);
          return v6;
        }
        if (v24)
        {
          free(v24);
          return propVariantCleanup((uint64_t)&v27);
        }
        propVariantCleanup((uint64_t)&v27);
        break;
      case 5:
        v10 = 11;
LABEL_18:
        LOWORD(v27) = v10;
        LOWORD(v28) = *(_WORD *)__s;
        goto LABEL_22;
      case 6:
        LOWORD(v27) = 65;
        v21 = CsLeReadSInt32((unsigned int *)__s);
        v18 = malloc_type_malloc(v21, 0x4C970AF9uLL);
        v29 = v18;
        if (!v18)
          return 5;
        LODWORD(v28) = v21;
        v19 = __s + 4;
        v20 = v21;
        goto LABEL_21;
      default:
        return v6;
    }
    return 6;
  }
  return v6;
}

uint64_t propertyStorageSetPropertyValueWithID(uint64_t *a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t result;

  result = 6;
  if (a1 && a3)
  {
    result = rootStorageSetDirty(a1[1]);
    if (!(_DWORD)result)
      return propertySetPut(*a1, a2, a3);
  }
  return result;
}

uint64_t propertyStorageGetPropertyID(uint64_t *a1, char *a2, _DWORD *a3)
{
  uint64_t v3;

  if (a1 && a3 && (v3 = *a1) != 0)
    return propertySetGetPropertyID(v3, a2, a3);
  else
    return 6;
}

uint64_t freeDocumentPropertyName(void **a1)
{
  void *v2;
  uint64_t result;

  if (!a1)
    return 6;
  v2 = *a1;
  if (v2)
    free(v2);
  result = 0;
  *a1 = 0;
  return result;
}

uint64_t setDefaultDocumentProperties(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  uint64_t *DocProperties;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  char v10[56];
  uint64_t v11;
  char v12[24];
  char v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  strcpy(v13, "No title");
  strcpy(v12, " Auto-generated");
  v11 = 0x6E776F6E6B6E75;
  strcpy(v10, "SchemaSoft Structured Storage Library v 3.0");
  v2 = SsrwTime(0);
  if (!a1)
    return 6;
  v3 = v2;
  result = rootStorageSetDirty(a1);
  if ((_DWORD)result)
    return result;
  v7 = 0;
  v8[0] = 0;
  v8[1] = 0;
  DocProperties = (uint64_t *)rootStorageGetDocProperties(a1);
  if (*DocProperties)
    return 6;
  v6 = DocProperties;
  if (DocProperties[1])
    return 6;
  result = getStorageFromRoot(a1, &v9);
  if (!(_DWORD)result)
  {
    result = createStream(v9, SUMMARY_INFO_NAME, v6 + 3);
    if (!(_DWORD)result)
    {
      result = propertySetConstruct(SSRW_FMTID_SummaryInformation, 1, v6);
      if (!(_DWORD)result)
      {
        LOWORD(v7) = 30;
        v8[0] = v13;
        propertySetPut(*v6, 2, (unsigned __int16 *)&v7);
        v8[0] = v12;
        propertySetPut(*v6, 4, (unsigned __int16 *)&v7);
        v8[0] = &v11;
        propertySetPut(*v6, 3, (unsigned __int16 *)&v7);
        v8[0] = v10;
        propertySetPut(*v6, 18, (unsigned __int16 *)&v7);
        LOWORD(v7) = 3;
        LODWORD(v8[0]) = 0;
        propertySetPut(*v6, 19, (unsigned __int16 *)&v7);
        LOWORD(v7) = 64;
        WinFileTimeFromTime_t(v3, (unsigned int *)v8);
        return propertySetPut(*v6, 12, (unsigned __int16 *)&v7);
      }
    }
  }
  return result;
}

uint64_t propertyStorageGetPropertyNameAndIDByIndex(uint64_t *a1, unsigned int a2, char **a3, int *a4)
{
  uint64_t v4;

  if (a1 && a3 && (v4 = *a1) != 0)
    return propertySetGetPropertyNameAndID(v4, a2, a3, a4);
  else
    return 6;
}

uint64_t fatCompareSectors(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

uint64_t fatAddFreeSectors(uint64_t a1, void **a2, unsigned int *a3)
{
  unsigned int *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;

  if (!a1)
    return 6;
  v5 = (unsigned int *)*a2;
  v6 = *a3;
  if (*a3)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5)
      free(*a2);
    result = 0;
    *a2 = 0;
    return result;
  }
  qsort(*a2, *a3, 4uLL, (int (__cdecl *)(const void *, const void *))fatCompareSectors);
  v9 = v6 - 1;
  v10 = *((_DWORD *)*a2 + v9) + 1;
  result = fatEnsureMinSize(a1, v10);
  if ((_DWORD)result)
    return result;
  if (*(_DWORD *)(a1 + 16) < v10)
    *(_DWORD *)(a1 + 16) = v10;
  v12 = (_DWORD *)(a1 + 40);
  v13 = *(unsigned int *)(a1 + 40);
  v14 = *v5;
  if ((_DWORD)v13 == -2)
  {
    *(_DWORD *)(a1 + 40) = v14;
    v15 = *(_QWORD *)(a1 + 8);
    if (v6 != 1)
    {
      v16 = v5 + 1;
      v17 = v6 - 1;
      do
      {
        *(_DWORD *)(v15 + 4 * *(v16 - 1)) = *v16;
        ++v16;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(v15 + 4 * v5[v9]) = -2;
    goto LABEL_32;
  }
  v18 = 0;
  while (1)
  {
    if (v13 >= v14)
    {
      ++v18;
      v22 = v14;
      if (v18 < v6)
        v22 = v5[v18];
      *v12 = v14;
      v12 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14);
      v14 = v22;
      goto LABEL_26;
    }
    v19 = *(_QWORD *)(a1 + 8);
    v20 = (_DWORD *)(v19 + 4 * v13);
    v21 = *v20;
    *v12 = v13;
    if ((_DWORD)v21 == -2)
      break;
    v12 = (_DWORD *)(v19 + 4 * v13);
    v13 = v21;
LABEL_26:
    if (v18 >= v6)
    {
      *v12 = v13;
      goto LABEL_32;
    }
  }
  *v20 = v5[v18];
  if (v18 < v9)
  {
    v23 = &v5[v18 + 1];
    v24 = v9 - v18;
    do
    {
      *(_DWORD *)(v19 + 4 * *(v23 - 1)) = *v23;
      ++v23;
      --v24;
    }
    while (v24);
  }
  *(_DWORD *)(v19 + 4 * v5[v9]) = -2;
LABEL_32:
  free(*a2);
  result = 0;
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t fatAddFatToFreeSectors(uint64_t a1, uint64_t a2)
{
  return fatAddFreeSectors(a1, (void **)a2, (unsigned int *)(a2 + 24));
}

uint64_t headerEnsureV4(uint64_t a1)
{
  *(_WORD *)(a1 + 26) = 4;
  return 0;
}

float *leWriteFloat32(float *result, float a2)
{
  *result = a2;
  return result;
}

uint64_t propertySetSaveNameList(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  const char *v11;

  v6 = *(unsigned int *)(a1 + 2440);
  CsLeWriteUInt32(v6, a2);
  if ((_DWORD)v6)
  {
    v7 = a1 + 1640;
    v8 = 4;
    do
    {
      CsLeWriteUInt32(*(unsigned int *)(v7 + 8), (_DWORD *)((char *)a2 + v8));
      v9 = strlen(*(const char **)v7) + 1;
      CsLeWriteUInt32(v9, (_DWORD *)((char *)a2 + v8 + 4));
      v10 = v8 + 8;
      v11 = *(const char **)v7;
      v7 += 16;
      memcpy((char *)a2 + v10, v11, v9);
      v8 = v9 + v10;
      --v6;
    }
    while (v6);
  }
  else
  {
    v8 = 4;
  }
  *a3 = v8 + (-v8 & 3);
  return 0;
}

uint64_t propertySetGetNumberOfProperties(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 1600);
  return 0;
}

uint64_t propertySetGetPropertyNameAndID(uint64_t a1, unsigned int a2, char **a3, int *a4)
{
  int v4;
  int v6;

  if (*(_DWORD *)(a1 + 1600) <= a2)
    return 13;
  *a4 = -1;
  *a3 = 0;
  v4 = *(_DWORD *)(a1 + 1600);
  if (!v4 || v4 - 1 < a2)
    return 13;
  v6 = *(_DWORD *)(a1 + 32 * a2);
  if ((v6 + 1) < 2)
    return 13;
  *a4 = v6;
  return propertySetGetPropertyName(a1, v6, a3);
}

uint64_t propertySetGetPropertyName(uint64_t a1, int a2, char **a3)
{
  uint64_t v3;
  _DWORD *i;
  const char *v6;
  int v7;
  char *v8;

  *a3 = 0;
  v3 = *(unsigned int *)(a1 + 2440);
  if (!(_DWORD)v3)
    return 0;
  for (i = (_DWORD *)(a1 + 1648); *i != a2; i += 4)
  {
    if (!--v3)
      return 0;
  }
  v6 = (const char *)*((_QWORD *)i - 1);
  v7 = strlen(v6);
  v8 = (char *)malloc_type_malloc((v7 + 1), 0x3536DD16uLL);
  *a3 = v8;
  if (v8)
  {
    strcpy(v8, v6);
    return 0;
  }
  return 5;
}

uint64_t propertySetGetPropertyID(uint64_t a1, char *__s2, _DWORD *a3)
{
  uint64_t v3;
  const char **i;

  *a3 = -1;
  v3 = *(unsigned int *)(a1 + 2440);
  if ((_DWORD)v3)
  {
    for (i = (const char **)(a1 + 1648); strcmp(*(i - 1), __s2); i += 2)
    {
      if (!--v3)
        return 0;
    }
    *a3 = *(_DWORD *)i;
  }
  return 0;
}

uint64_t propertySetWrite(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  _DWORD *v24;
  void *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const char **v38;
  const char *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  size_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int i;
  uint64_t v59;
  _DWORD *v60;
  size_t v61;
  BOOL v62;
  unsigned int *v63;
  unsigned __int16 *v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  unsigned int v68;
  size_t v69;
  uint64_t v70;
  size_t v71;
  int v72;
  size_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  _QWORD v86[2];
  _QWORD v87[2];

  v87[1] = *MEMORY[0x24BDAC8D0];
  v86[1] = 0;
  v87[0] = 0;
  v83 = 0;
  v86[0] = 0;
  if (!a1)
    return 6;
  v3 = a3;
  *(_QWORD *)(*(_QWORD *)a3 + 1624) = a1;
  result = streamSeek(*(_QWORD *)(*(_QWORD *)a3 + 1624), 0, 0);
  if ((_DWORD)result)
    return result;
  v79 = a1;
  v7 = 0;
  v78 = a2;
  v8 = *a2 ^ 0x101B2E9CD5CDD502 | a2[1] ^ 0xAEF92C2B00089793;
  v77 = v8 != 0;
  if (v8)
    v9 = 1;
  else
    v9 = 2;
  v82 = v3;
  v80 = v9;
  do
  {
    *((_DWORD *)v86 + v7) = 0;
    v10 = *(_QWORD *)(v3 + 8 * v7);
    if (!v10)
      goto LABEL_67;
    v11 = 0x101B2E9CD5CDD505;
    v13 = *(_QWORD *)(v10 + 1608) == 0x101B2E9CD5CDD505
       && *(_QWORD *)(v10 + 1616) == 0xAEF92C2B00089793
       && *(_DWORD *)(v10 + 2440) != 0;
    LODWORD(v14) = *(_DWORD *)(v10 + 1600);
    if (v13 < v14)
    {
      do
      {
        v15 = v13;
        v16 = v10 + 32 * v13;
        v19 = *(unsigned __int16 *)(v16 + 8);
        v18 = v16 + 8;
        v17 = v19;
        if (v19 == 10 || v17 == 0)
        {
          v21 = *(unsigned int *)(v10 + 2440);
          if ((_DWORD)v21)
          {
            v22 = 0;
            v23 = (_OWORD *)(v10 + 1656);
            v24 = (_DWORD *)(v10 + 1648);
            while (*v24 != *(_DWORD *)(v10 + 32 * v13))
            {
              ++v22;
              v24 += 4;
              ++v23;
              if (v21 == v22)
                goto LABEL_30;
            }
            v25 = (void *)*((_QWORD *)v24 - 1);
            if (v25)
            {
              free(v25);
              LODWORD(v21) = *(_DWORD *)(v10 + 2440);
            }
            LODWORD(v21) = v21 - 1;
            if (v21 > v22)
            {
              do
              {
                ++v22;
                *(v23 - 1) = *v23;
                v21 = (*(_DWORD *)(v10 + 2440) - 1);
                ++v23;
              }
              while (v22 < v21);
            }
            *(_DWORD *)(v10 + 2440) = v21;
          }
LABEL_30:
          propVariantCleanup(v18);
          LODWORD(v14) = *(_DWORD *)(v10 + 1600) - 1;
          if (v13 < v14)
          {
            v26 = (_OWORD *)(v10 + 32 + 32 * v13);
            do
            {
              ++v15;
              v27 = v26[1];
              *(v26 - 2) = *v26;
              *(v26 - 1) = v27;
              v14 = (*(_DWORD *)(v10 + 1600) - 1);
              v26 += 2;
            }
            while (v15 < v14);
          }
          *(_DWORD *)(v10 + 1600) = v14;
          --v13;
        }
        ++v13;
      }
      while (v13 < v14);
      v3 = v82;
      v10 = *(_QWORD *)(v82 + 8 * v7);
      LODWORD(v14) = *(_DWORD *)(v10 + 1600);
      v11 = 0x101B2E9CD5CDD505;
    }
    if (!(_DWORD)v14)
      goto LABEL_66;
    v28 = 0;
    v29 = 8 * v14 + 8;
    v30 = v14;
    do
    {
      if (v28
        || (*(_QWORD *)(v10 + 1608) == v11 ? (v31 = *(_QWORD *)(v10 + 1616) == 0xAEF92C2B00089793) : (v31 = 0), !v31))
      {
        v32 = 0;
        v33 = *(unsigned __int16 *)(v10 + 32 * v28 + 8);
        if (v33 <= 0x1D)
        {
          switch(*(_WORD *)(v10 + 32 * v28 + 8))
          {
            case 2:
            case 0xB:
              v32 = 2;
              break;
            case 3:
              v32 = 4;
              break;
            case 5:
              v32 = 8;
              break;
            default:
              goto LABEL_63;
          }
          goto LABEL_63;
        }
        if (*(unsigned __int16 *)(v10 + 32 * v28 + 8) <= 0x40u)
        {
          if (v33 == 30)
          {
            v32 = strlen(*(const char **)(v10 + 32 * v28 + 16)) + 5;
          }
          else if (v33 == 64)
          {
            v32 = 8;
          }
          else
          {
            v32 = 0;
          }
          goto LABEL_63;
        }
        if (v33 == 65)
        {
          v34 = *(_DWORD *)(v10 + 32 * v28 + 16);
        }
        else
        {
          if (v33 != 71)
          {
LABEL_63:
            v29 += v32 + (-v32 & 3) + 4;
            goto LABEL_64;
          }
          v34 = **(_DWORD **)(v10 + 32 * v28 + 16);
        }
        v32 = v34 + 4;
        goto LABEL_63;
      }
      v35 = v11;
      v36 = *(unsigned int *)(v10 + 2440);
      v37 = (8 * v36) | 4;
      if ((_DWORD)v36)
      {
        v38 = (const char **)(v10 + 1640);
        do
        {
          v39 = *v38;
          v38 += 2;
          v37 += strlen(v39) + 1;
          --v36;
        }
        while (v36);
      }
      v29 += v37 + (-v37 & 3);
      v11 = v35;
LABEL_64:
      ++v28;
    }
    while (v28 != v30);
    LODWORD(v14) = (-v29 & 3) + v29;
    v3 = v82;
LABEL_66:
    *((_DWORD *)v86 + v7) = v14;
    v9 = v80;
LABEL_67:
    ++v7;
  }
  while (v7 != v9);
  LODWORD(v40) = 28;
  v41 = v86;
  v42 = v9;
  do
  {
    if (*v41++)
      v40 = (v40 + 20);
    else
      v40 = v40;
    --v42;
  }
  while (v42);
  v44 = v79;
  writeSInt16(v79, 4294967294);
  writeSInt16(v79, 0);
  writeSInt32(v79, 131077);
  writeSInt32(v79, 0);
  writeSInt16(v79, 0);
  writeSInt16(v79, 0);
  v84 = 8;
  streamWrite(v79, (uint64_t)v87, &v84);
  v45 = *v78 == 0x101B2E9CD5CDD502 && v78[1] == 0xAEF92C2B00089793;
  if (!v45 || (v76 = *(_QWORD *)(v3 + 8)) != 0 && *(_DWORD *)(v76 + 1600))
  {
    writeSInt32(v79, v9);
  }
  else
  {
    v9 = (v9 - 1);
    writeSInt32(v79, v9);
    if (v77)
      return 0;
  }
  v46 = 0;
  v81 = v9;
  do
  {
    if (*((_DWORD *)v86 + v46))
    {
      if (v78[1] == 0xAEF92C2B00089793 && *v78 == 0x101B2E9CD5CDD502 && v46 == 1)
        v49 = &SSRW_FMTID_UserDefinedProperties;
      else
        v49 = v78;
      v84 = 16;
      if (!writeSInt32(v79, *(unsigned int *)v49)
        && !writeSInt16(v79, *((unsigned __int16 *)v49 + 2))
        && !writeSInt16(v79, *((unsigned __int16 *)v49 + 3)))
      {
        v85 = 8;
        streamWrite(v79, (uint64_t)(v49 + 1), &v85);
      }
      writeSInt32(v79, v40);
      v40 = (*((_DWORD *)v86 + v46) + v40);
    }
    ++v46;
  }
  while (v9 != v46);
  v50 = 0;
  v51 = v82;
  while (2)
  {
    v52 = *(_QWORD *)(v51 + 8 * v50);
    if (!v52 || !*(_DWORD *)(v52 + 1600))
    {
LABEL_133:
      if (++v50 == v81)
        return 0;
      continue;
    }
    break;
  }
  v53 = *((_DWORD *)v86 + v50);
  result = writeSInt32(v44, v53);
  if ((_DWORD)result)
    return result;
  result = writeSInt32(v44, *(unsigned int *)(*(_QWORD *)(v82 + 8 * v50) + 1600));
  if ((_DWORD)result)
    return result;
  v54 = v53 - 8;
  v55 = malloc_type_malloc(v54, 0x5BF6F05BuLL);
  if (v55)
  {
    v56 = v55;
    bzero(v55, v54);
    v57 = *(unsigned int *)(*(_QWORD *)(v82 + 8 * v50) + 1600);
    i = 8 * v57;
    if ((int)v57 >= 1)
    {
      v59 = 0;
      v60 = v56;
      do
      {
        v61 = *(_QWORD *)(v82 + 8 * v50);
        if (!v59
          && (*(_QWORD *)(v61 + 1608) == 0x101B2E9CD5CDD505
            ? (v62 = *(_QWORD *)(v61 + 1616) == 0xAEF92C2B00089793)
            : (v62 = 0),
              v62))
        {
          CsLeWriteUInt32(0, v60);
          CsLeWriteUInt32(i + 8, v60 + 1);
          propertySetSaveNameList(*(_QWORD *)(v82 + 8 * v50), (_DWORD *)((char *)v56 + i), &v84);
          i += v84;
        }
        else
        {
          v63 = (unsigned int *)(v61 + 32 * v59);
          CsLeWriteUInt32(*v63, v60);
          CsLeWriteUInt32(i + 8, v60 + 1);
          v65 = *((unsigned __int16 *)v63 + 4);
          v64 = (unsigned __int16 *)(v63 + 2);
          CsLeWriteUInt32(v65, (_DWORD *)((char *)v56 + i));
          v66 = i + 4;
          v67 = (char *)v56 + v66;
          v68 = *v64;
          if (v68 > 0x1D)
          {
            if (*v64 > 0x40u)
            {
              if (v68 == 65)
              {
                v73 = v61 + 32 * v59;
                v74 = *(unsigned int *)(v73 + 16);
                LODWORD(v61) = v74 + 4;
                CsLeWriteUInt32(v74, (_DWORD *)((char *)v56 + v66));
                memcpy(v67 + 4, *(const void **)(v73 + 24), *(unsigned int *)(v73 + 16));
              }
              else
              {
                if (v68 != 71)
                  return 12;
                v69 = v61 + 32 * v59;
                v70 = **(unsigned int **)(v69 + 16);
                v61 = (v70 + 4);
                CsLeWriteUInt32(v70, (_DWORD *)((char *)v56 + v66));
                CsLeWriteUInt32(*(unsigned int *)(*(_QWORD *)(v69 + 16) + 4), (_DWORD *)v67 + 1);
                memcpy(v67 + 8, *(const void **)(*(_QWORD *)(v69 + 16) + 8), v61 - 8);
              }
            }
            else if (v68 == 30)
            {
              v71 = v61 + 32 * v59;
              v72 = strlen(*(const char **)(v71 + 16));
              v61 = (v72 + 5);
              bzero((char *)v56 + v66, v61);
              CsLeWriteUInt32((v72 + 1), (_DWORD *)((char *)v56 + v66));
              strcpy(v67 + 4, *(const char **)(v71 + 16));
            }
            else
            {
              if (v68 != 64)
                return 12;
              CsLeWriteUInt32(*(unsigned int *)(v61 + 32 * v59 + 16), (_DWORD *)((char *)v56 + v66));
              CsLeWriteUInt32(*((unsigned int *)v64 + 3), (_DWORD *)v67 + 1);
LABEL_124:
              LODWORD(v61) = 8;
            }
          }
          else
          {
            switch(*v64)
            {
              case 2u:
              case 0xBu:
                CsLeWriteUInt16(*(__int16 *)(v61 + 32 * v59 + 16), (_DWORD *)((char *)v56 + v66));
                LODWORD(v61) = 2;
                goto LABEL_127;
              case 3u:
                break;
              case 4u:
              case 6u:
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                return 12;
              case 5u:
                CsLeWriteFloat64((double *)((char *)v56 + v66), *(double *)(v61 + 32 * v59 + 16));
                goto LABEL_124;
              default:
                if (v68 != 22)
                  return 12;
                break;
            }
            CsLeWriteUInt32(*(unsigned int *)(v61 + 32 * v59 + 16), (_DWORD *)((char *)v56 + v66));
            LODWORD(v61) = 4;
          }
LABEL_127:
          v84 = v61;
          for (i = v61 + v66; (i & 3) != 0; ++i)
            *((_BYTE *)v56 + i) = 0;
        }
        v60 += 2;
        ++v59;
      }
      while (v59 != v57);
    }
    while ((i & 3) != 0)
      *((_BYTE *)v56 + i++) = 0;
    v75 = *((_DWORD *)v86 + v50) - 8;
    *((_DWORD *)v86 + v50) = v75;
    v83 = v75;
    v44 = v79;
    streamWrite(v79, (uint64_t)v56, (unsigned int *)&v83);
    free(v56);
    v51 = v82;
    goto LABEL_133;
  }
  return 5;
}

uint64_t propertySetPut(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unint64_t *v6;
  int *Info;
  int v8;
  uint64_t result;
  int RealID;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t i;

  v6 = (unint64_t *)(a1 + 1608);
  Info = propertyGetInfo((_QWORD *)(a1 + 1608), a2);
  if (Info && (v8 = Info[7], v8 != 10))
  {
    if (v8 != *a3)
      return 14;
  }
  else if (*a3 == 10)
  {
    return 12;
  }
  RealID = propertyGetRealID(a1, a2);
  v11 = *(_DWORD *)(a1 + 1600);
  if (v11)
  {
    v12 = (int *)a1;
    v13 = *(unsigned int *)(a1 + 1600);
    while (1)
    {
      v14 = *v12;
      v12 += 8;
      if (v14 == RealID)
        break;
      if (!--v13)
      {
        if (v11 > 0x31)
          return 12;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v15 = bswap64(*v6);
    v16 = bswap64(0x101B2E9CD5CDD505uLL);
    if (v15 == v16 && (v15 = bswap64(v6[1]), v16 = bswap64(0xAEF92C2B00089793), v15 == v16))
    {
      v17 = 0;
    }
    else if (v15 < v16)
    {
      v17 = -1;
    }
    else
    {
      v17 = 1;
    }
    if (!(v17 | v11))
    {
      v11 = 1;
      *(_DWORD *)(a1 + 1600) = 1;
    }
    v18 = v11;
    v19 = a2;
    if ((a2 & 0xFFFFFFFE) == 0x1000)
    {
      v20 = propertyGetInfo(v6, a2);
      if (!v20)
        return 13;
      if (v11)
      {
        v21 = v11;
        v22 = 2;
        v23 = (unsigned int *)a1;
        do
        {
          v25 = *v23;
          v23 += 8;
          v24 = v25;
          if (v25 > v22)
            v22 = v24;
          --v21;
        }
        while (v21);
        v19 = v22 + 1;
      }
      else
      {
        v19 = 3;
      }
      result = propertySetAddNamePair(a1, v19, *((char **)v20 + 1));
      if ((_DWORD)result)
        return result;
      v18 = *(_DWORD *)(a1 + 1600);
    }
    v26 = a1 + 32 * v11;
    *(_DWORD *)v26 = v19;
    *(_WORD *)(v26 + 8) = 0;
    v11 = v18 + 1;
    *(_DWORD *)(a1 + 1600) = v18 + 1;
  }
  v27 = propertyGetRealID(a1, a2);
  if (!v11)
    return 13;
  v28 = v11;
  for (i = a1 + 8; *(_DWORD *)(i - 8) != v27; i += 32)
  {
    if (!--v28)
      return 13;
  }
  result = propVariantCleanup(i);
  if (!(_DWORD)result)
    return propVariantCopyContents(a3, i);
  return result;
}

uint64_t propertySetAddNamePair(uint64_t a1, int a2, char *__s)
{
  size_t v6;
  char *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = strlen(__s);
  v7 = (char *)malloc_type_malloc(v6 + 1, 0xEF5E705BuLL);
  if (!v7)
    return 5;
  v8 = strcpy(v7, __s);
  v9 = *(_DWORD *)(a1 + 2440);
  if (v9)
  {
    v10 = 0;
    v11 = (_DWORD *)(a1 + 1648);
    while (*v11)
    {
      ++v10;
      v11 += 4;
      if (v9 == v10)
      {
        if (v9 < 0x32)
          goto LABEL_7;
        goto LABEL_10;
      }
    }
    if (v10 > 0x31)
    {
LABEL_10:
      free(v8);
      return 12;
    }
    v12 = 0;
    *v11 = a2;
    *((_QWORD *)v11 - 1) = v8;
  }
  else
  {
LABEL_7:
    v12 = 0;
    v13 = a1 + 1640 + 16 * v9;
    *(_DWORD *)(v13 + 8) = a2;
    *(_QWORD *)v13 = v8;
    *(_DWORD *)(a1 + 2440) = v9 + 1;
  }
  return v12;
}

uint64_t readGUID(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;

  result = readSInt32(a1, (_DWORD *)a2);
  if (!(_DWORD)result)
  {
    result = readUInt16(a1, (_WORD *)(a2 + 4));
    if (!(_DWORD)result)
    {
      result = readUInt16(a1, (_WORD *)(a2 + 6));
      if (!(_DWORD)result)
      {
        v5 = 8;
        return streamRead(a1, a2 + 8, &v5);
      }
    }
  }
  return result;
}

uint64_t propertySetReadSizePrefixedBlob(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t result;
  size_t v7;
  void *v8;
  size_t v9;
  unsigned int v10;

  result = readSInt32(*(_QWORD *)(a1 + 1624), a2);
  if (!(_DWORD)result)
  {
    v7 = *a2;
    v9 = 0;
    if ((int)v7 < 1)
      return 14;
    result = streamGetBytesAvailableToRead64(*(_QWORD *)(a1 + 1624), &v9);
    if ((_DWORD)result)
      return result;
    if (v9 >= v7)
    {
      v8 = malloc_type_malloc(v7, 0x2C4A3CC6uLL);
      *a3 = (uint64_t)v8;
      if (v8)
      {
        bzero(v8, v7);
        v10 = v7;
        result = streamRead(*(_QWORD *)(a1 + 1624), *a3, &v10);
        if (!(_DWORD)result)
        {
          if (v10 >= v7)
            return 0;
          else
            return 14;
        }
      }
      else
      {
        return 5;
      }
    }
    else
    {
      return 14;
    }
  }
  return result;
}

uint64_t openStructuredStorage(const char *a1, int a2, uint64_t *a3)
{
  size_t v6;
  uint64_t v7;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;

  v6 = strlen(a1);
  v7 = v6 + 1;
  if (v6 == -1)
    return 5;
  if (v7 < 0)
    return 5;
  if (!(2 * v7))
    return 5;
  v9 = malloc_type_malloc(2 * v7, 0xBF89B1ADuLL);
  if (!v9)
    return 5;
  v10 = v9;
  SsrwStrToStr2((uint64_t)v9, (uint64_t)a1, v7);
  v11 = openStructuredStorageEx(v10, a2, a3);
  free(v10);
  return v11;
}

uint64_t openStructuredStorageEx(_WORD *a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  const __int16 *v6;
  FILE **v7;
  FILE **v8;

  if (!a1)
    return 6;
  v4 = 6;
  if (a3 && *a1)
  {
    if (a2)
    {
      if (a2 != 2)
        return 2;
      v6 = L"r+b";
    }
    else
    {
      v6 = (const __int16 *)&rbMode;
    }
    v7 = SsrwOpenFile((uint64_t)a1, (uint64_t)v6);
    if (v7)
    {
      v8 = v7;
      v4 = openStructuredStorageInternal((uint64_t)v7, a3, 1, a2);
      if ((_DWORD)v4)
        SsrwFclose(v8);
    }
    else
    {
      return 1;
    }
  }
  return v4;
}

uint64_t openStructuredStorageInStream(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;

  v3 = 6;
  if (a1 && a3)
  {
    if ((a2 & 0xFFFFFFFD) != 0)
    {
      return 2;
    }
    else
    {
      SsrwConnectToExternalFile(a1);
      if (v7)
      {
        v8 = (void *)v7;
        v3 = openStructuredStorageInternal(v7, a3, 0, a2);
        if ((_DWORD)v3)
          SsrwDisconnect(v8);
      }
      else
      {
        return 1;
      }
    }
  }
  return v3;
}

uint64_t rootStorageGetDocProperties(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 48)) != 0)
    return rootStorageGetTOC(v1);
  else
    return 0;
}

uint64_t createStructuredStorage(const char *a1, int a2, uint64_t *a3)
{
  size_t v6;
  uint64_t v7;
  _WORD *v9;
  _WORD *v10;
  int8x8_t v11;
  uint64_t StructuredStorage;

  v6 = strlen(a1);
  v7 = v6 + 1;
  if (v6 == -1)
    return 5;
  if (v7 < 0)
    return 5;
  if (!(2 * v7))
    return 5;
  v9 = malloc_type_malloc(2 * v7, 0xBF89B1ADuLL);
  if (!v9)
    return 5;
  v10 = v9;
  SsrwStrToStr2((uint64_t)v9, (uint64_t)a1, v7);
  StructuredStorage = createStructuredStorageEx(v10, a2, a3, 0, v11);
  free(v10);
  return StructuredStorage;
}

uint64_t createStructuredStorageEx(_WORD *a1, int a2, uint64_t *a3, unsigned int a4, int8x8_t a5)
{
  uint64_t StructuredStorageInternal;
  uint8x8_t v8;
  FILE **v11;
  FILE **v12;

  if (!a1)
    return 6;
  StructuredStorageInternal = 6;
  if (a3)
  {
    a5.i32[0] = a4;
    v8 = (uint8x8_t)vcnt_s8(a5);
    v8.i16[0] = vaddlv_u8(v8);
    if (*a1 && v8.i32[0] <= 1u)
    {
      if ((a2 - 1) > 1)
      {
        return 2;
      }
      else
      {
        v11 = SsrwOpenFile((uint64_t)a1, (uint64_t)L"w+b");
        if (v11)
        {
          v12 = v11;
          StructuredStorageInternal = createStructuredStorageInternal((uint64_t)v11, a2, a3, 1, a4);
          if ((_DWORD)StructuredStorageInternal)
            SsrwFclose(v12);
        }
        else
        {
          return 4;
        }
      }
    }
  }
  return StructuredStorageInternal;
}

uint64_t createStructuredStorageInStream(uint64_t a1, int a2, uint64_t *a3, int8x8_t a4)
{
  return createStructuredStorageInStreamEx(a1, a2, a3, 0, a4);
}

uint64_t createStructuredStorageInStreamEx(uint64_t a1, int a2, uint64_t *a3, unsigned int a4, int8x8_t a5)
{
  uint64_t StructuredStorageInternal;
  uint8x8_t v8;
  uint64_t v10;
  void *v11;

  StructuredStorageInternal = 6;
  if (a1)
  {
    if (a3)
    {
      a5.i32[0] = a4;
      v8 = (uint8x8_t)vcnt_s8(a5);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.i32[0] <= 1u)
      {
        if ((a2 - 1) > 1)
        {
          return 2;
        }
        else
        {
          SsrwConnectToExternalFile(a1);
          if (v10)
          {
            v11 = (void *)v10;
            StructuredStorageInternal = createStructuredStorageInternal(v10, a2, a3, 0, a4);
            if ((_DWORD)StructuredStorageInternal)
              SsrwDisconnect(v11);
          }
          else
          {
            return 4;
          }
        }
      }
    }
  }
  return StructuredStorageInternal;
}

uint64_t readFatSectorsFromXFat(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int XFatSize;
  unsigned int SectorShift;
  uint64_t result;
  char v9;
  int XFatStartSector;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int SInt32;
  int v17;

  XFatSize = headerGetXFatSize(*(_QWORD *)(a1 + 16));
  SectorShift = headerGetSectorShift(*(_QWORD *)(a1 + 16));
  if (SectorShift < 2)
    return 8;
  v9 = SectorShift;
  XFatStartSector = headerGetXFatStartSector(*(_QWORD *)(a1 + 16));
  result = readSector(a1, XFatStartSector);
  if (!(_DWORD)result)
  {
    if (!a3)
      return 8;
    *a3 = XFatStartSector;
    v11 = *(unsigned int **)(a1 + 80);
    if (headerGetFatSize(*(_QWORD *)(a1 + 16)) >= 0x6E)
    {
      v12 = 1 << v9 >> 2;
      v13 = 109;
      v14 = 1;
      v15 = 1;
      do
      {
        SInt32 = CsLeReadSInt32(v11);
        v17 = SInt32;
        if (v14 % v12)
        {
          *(_DWORD *)(a2 + 4 * v13++) = SInt32;
          ++v11;
        }
        else
        {
          result = readSector(a1, SInt32);
          if ((_DWORD)result)
            return result;
          if (v15 >= XFatSize)
            return 8;
          v11 = *(unsigned int **)(a1 + 80);
          a3[v15++] = v17;
        }
        ++v14;
      }
      while (v13 < headerGetFatSize(*(_QWORD *)(a1 + 16)));
    }
    return 0;
  }
  return result;
}

uint64_t initializeSmallFat(_QWORD *a1)
{
  uint64_t v2;
  char SmallSectorShift;
  void ***v4;
  uint64_t Chain;
  uint64_t v6;
  unsigned int SmallFatStartSector;
  int SmallFatSize;
  uint64_t v10;

  v2 = a1[2];
  v10 = 0;
  SmallSectorShift = headerGetSmallSectorShift(v2);
  v4 = (void ***)(a1 + 4);
  Chain = fatConstruct((uint64_t)a1, a1 + 4, 1 << SmallSectorShift);
  if (!(_DWORD)Chain)
  {
    SmallFatSize = headerGetSmallFatSize(v2);
    v6 = a1[3];
    SmallFatStartSector = headerGetSmallFatStartSector(v2);
    Chain = fatGetChain(v6, SmallFatStartSector, (unsigned int *)&SmallFatSize, &v10);
    if ((_DWORD)Chain
      || (headerSetSmallFatSize(v2, SmallFatSize),
          fatSetFatSectors((uint64_t)*v4, v10, SmallFatSize),
          Chain = fatReadFat((unsigned int **)*v4),
          (_DWORD)Chain))
    {
      fatDestroy(v4);
      *v4 = 0;
    }
  }
  return Chain;
}

uint64_t rootStorageInitWrite(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;

  v5 = -1;
  v2 = headerWrite(*a1, a1[2]);
  if (!(_DWORD)v2)
  {
    if (SsrwFseek(*a1))
    {
      return 4;
    }
    else
    {
      v3 = 109;
      while (1)
      {
        v2 = 4;
        if (SsrwFwrite((uint64_t)&v5, 4, 1, *a1) != 1)
          break;
        if (!--v3)
          return 0;
      }
    }
  }
  return v2;
}

uint64_t SsrwDisconnect(void *a1)
{
  free(a1);
  return 0;
}

size_t SsrwFileFread(void *a1, size_t a2, size_t a3, FILE **a4)
{
  FILE *v4;

  if (a4 && a1 && (v4 = *a4) != 0)
    return fread(a1, a2, a3, v4);
  else
    return 0;
}

size_t SsrwFileFwrite(const void *a1, size_t a2, size_t a3, FILE **a4)
{
  FILE *v4;

  if (a4 && a1 && (v4 = *a4) != 0)
    return fwrite(a1, a2, a3, v4);
  else
    return 0;
}

uint64_t SsrwFileFclose(uint64_t a1)
{
  FILE *v2;

  if (a1 && (v2 = *(FILE **)a1) != 0 && (*(_BYTE *)(a1 + 8) & 1) != 0)
    return fclose(v2);
  else
    return 0;
}

uint64_t SsrwFileFseek(FILE **a1, uint64_t a2, int a3)
{
  FILE *v3;

  if (a1 && (v3 = *a1) != 0)
    return fseek(v3, a2, a3);
  else
    return 0;
}

off_t SsrwFileFtell(FILE **a1)
{
  FILE *v1;

  if (a1 && (v1 = *a1) != 0)
    return ftello(v1);
  else
    return 0;
}

uint64_t SsrwFileFtruncate(_QWORD *a1)
{
  if (a1 && *a1)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

FILE **SsrwOpenFile(uint64_t a1, uint64_t a2)
{
  FILE **v4;
  FILE **v5;
  FILE *v6;

  v4 = (FILE **)malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  v5 = v4;
  if (v4)
  {
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *(_OWORD *)v4 = 0u;
    v4[6] = (FILE *)SsrwFileFread;
    v4[7] = (FILE *)SsrwFileFwrite;
    v4[8] = (FILE *)SsrwFileFclose;
    v4[9] = (FILE *)SsrwFileFseek;
    v4[10] = (FILE *)SsrwFileFtell;
    v4[11] = (FILE *)SsrwFileFtruncate;
    *((_BYTE *)v4 + 8) = 1;
    v6 = SsrwFalseWFopen(a1, a2);
    *v5 = v6;
    if (!v6)
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

double SsrwConnectToExternalFile(uint64_t a1)
{
  char *v2;
  double result;

  v2 = (char *)malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  if (v2)
  {
    result = 0.0;
    *((_QWORD *)v2 + 5) = 0;
    *((_QWORD *)v2 + 6) = SsrwFileFread;
    *(_OWORD *)(v2 + 25) = 0u;
    *(_OWORD *)(v2 + 9) = 0u;
    *((_QWORD *)v2 + 7) = SsrwFileFwrite;
    *((_QWORD *)v2 + 8) = SsrwFileFclose;
    *((_QWORD *)v2 + 9) = SsrwFileFseek;
    *((_QWORD *)v2 + 10) = SsrwFileFtell;
    *((_QWORD *)v2 + 11) = SsrwFileFtruncate;
    v2[8] = 0;
    *(_QWORD *)v2 = a1;
  }
  return result;
}

uint64_t streamUpgradeMiniToRegular(uint64_t *a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t SmallFat;
  unsigned int v18;

  if (!streamShouldBeMini((uint64_t)a1))
    return 0;
  v2 = (unsigned int *)a1[7];
  if (v2[9] > 1)
    return 0;
  v5 = a1[3];
  v6 = malloc_type_malloc(*v2, 0xF9C4A8ACuLL);
  if (!v6)
    return 5;
  v7 = v6;
  v8 = *(_QWORD *)a1[7];
  v18 = v8;
  v9 = streamRead((uint64_t)a1, (uint64_t)v6, &v18);
  if (v9)
    v10 = 0;
  else
    v10 = v18 == (_DWORD)v8;
  if (v10)
  {
    v11 = a1[7];
    *(_WORD *)(v11 + 32) = 1;
    v12 = *(_DWORD *)(v11 + 16);
    if (v12)
      v13 = **(unsigned int **)(v11 + 8);
    else
      v13 = 0xFFFFFFFFLL;
    *(_DWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = 0;
    a1[3] = 0;
    v3 = streamWrite((uint64_t)a1, (uint64_t)v7, &v18);
    free(v7);
    if ((_DWORD)v3)
      v14 = 0;
    else
      v14 = v18 == (_DWORD)v8;
    if (v14)
    {
      v15 = streamFlushToDisk((uint64_t)a1);
      if (!(_DWORD)v15)
      {
        if ((_DWORD)v13 != -1)
        {
          SmallFat = rootStorageGetSmallFat(*a1);
          fatFreeChain(SmallFat, v13);
        }
        streamDestroy((void **)(a1[7] + 24));
        v3 = 0;
        goto LABEL_26;
      }
      v3 = v15;
    }
    v16 = a1[7];
    *(_BYTE *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 16) = v12;
    *(_QWORD *)v16 = v8;
LABEL_26:
    a1[3] = v5;
    return v3;
  }
  if (v9)
    v3 = v9;
  else
    v3 = 15;
  free(v7);
  return v3;
}

uint64_t convertToSmallStream(uint64_t a1)
{
  uint64_t *TOC;
  uint64_t Header;
  uint64_t EntryAtIndex;
  char SectorShift;
  char SmallSectorShift;
  unint64_t v7;
  uint64_t Sector;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int StartSector;
  uint64_t Fat;
  unsigned int v16;
  uint64_t SmallFat;
  unsigned int v18;

  v18 = 0;
  if (!**(_QWORD **)(a1 + 56))
    return 0;
  TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
  Fat = rootStorageGetFat(*(_QWORD *)a1);
  SmallFat = rootStorageGetSmallFat(*(_QWORD *)a1);
  Header = rootStorageGetHeader(*(_QWORD *)a1);
  EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
  SectorShift = headerGetSectorShift(Header);
  SmallSectorShift = headerGetSmallSectorShift(Header);
  StartSector = directoryGetStartSector(EntryAtIndex);
  v7 = **(_QWORD **)(a1 + 56);
  if (!v7)
    return fatFreeChain(Fat, StartSector);
  Sector = 0;
  v9 = 0;
  v16 = (1 << SectorShift) >> SmallSectorShift;
  v10 = v16 - 1;
  v11 = -1;
  while (1)
  {
    v12 = v7 >= (1 << SmallSectorShift) ? 1 << SmallSectorShift : v7;
    if ((v9 & v10) == 0)
      Sector = rootStorageReadSector(*(_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 4 * (v9 / v16)));
    result = rootStorageWriteMiniSector(*(_QWORD *)a1, Sector + ((v9 & v10) << SmallSectorShift), &v18);
    if ((_DWORD)result)
      break;
    if (v11 == -1)
    {
      result = directorySetStartSector(EntryAtIndex, v18);
      if ((_DWORD)result)
        return result;
      result = fatTerminateChain(SmallFat, v18);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      result = fatUpdate(SmallFat, v11, v18);
      if ((_DWORD)result)
        return result;
    }
    v11 = v18;
    v7 -= v12;
    ++v9;
    if (!v7)
      return fatFreeChain(Fat, StartSector);
  }
  return result;
}

uint64_t readUInt64(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 8;
  v2 = 6;
  if (a1 && a2)
  {
    v2 = streamRead(a1, (uint64_t)&v6, &v5);
    *a2 = CsLeReadSInt32(&v6);
  }
  return v2;
}

uint64_t writeSInt16(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  unsigned int v5;

  v5 = 2;
  if (!a1)
    return 6;
  CsLeWriteUInt16(a2, &v4);
  return streamWrite(a1, (uint64_t)&v4, &v5);
}

uint64_t writeSInt32(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;

  v5 = 4;
  if (!a1)
    return 6;
  CsLeWriteUInt32(a2, &v4);
  return streamWrite(a1, (uint64_t)&v4, &v5);
}

uint64_t writeFloat32(uint64_t a1, float a2)
{
  float v4;
  unsigned int v5;

  v5 = 4;
  if (!a1)
    return 6;
  leWriteFloat32(&v4, a2);
  return streamWrite(a1, (uint64_t)&v4, &v5);
}

uint64_t writeFloat64(uint64_t a1, double a2)
{
  unsigned int v4;
  double v5[2];

  v5[1] = *(double *)MEMORY[0x24BDAC8D0];
  v4 = 8;
  if (!a1)
    return 6;
  CsLeWriteFloat64(v5, a2);
  return streamWrite(a1, (uint64_t)v5, &v4);
}

uint64_t writeString16(uint64_t a1, unsigned __int16 *a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  result = 6;
  if (a1 && a2 && a3)
  {
    v7 = *a3;
    if (*a3 || (v8 = _ChWcslen(a2), v7 = v8 + 1, v8 != -1))
    {
      v9 = 0;
      v10 = v7;
      while (1)
      {
        result = writeSInt16(a1, a2[v9]);
        if ((_DWORD)result)
          break;
        if (v10 == ++v9)
        {
          result = 0;
          LODWORD(v9) = v10;
          break;
        }
      }
    }
    else
    {
      LODWORD(v9) = 0;
      result = 0;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t tocInvalidateEntry(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v5;

  if (!a1)
    return 6;
  v3 = *(_QWORD *)a1;
  if (!v3 || *(_DWORD *)(a1 + 8) <= a2)
    return 6;
  v5 = directoryGetAtIndex(v3, a2);
  if (!v5)
    return 11;
  if (*(_DWORD *)(a1 + 8) - 1 == a2)
    *(_DWORD *)(a1 + 8) = a2;
  return directoryInvalidate(v5);
}

void OCCBinaryStreamer::OCCBinaryStreamer(OCCBinaryStreamer *this, OCCCryptoKey *a2, const char *a3)
{
  _QWORD *v3;

  OCCStreamer::OCCStreamer((OCCStreamer *)this, a2, a3);
  *v3 = off_24F3A6E60;
}

BOOL OCCBinaryStreamer::replaceGarbledBytes(OCCBinaryStreamer *this, SsrwOOStream *a2, SsrwOOStream *a3, uint64_t a4, int a5)
{
  OCCBinaryStreamer *v9;

  SsrwOOStream::seekFromStart(a2, a4);
  v9 = (OCCBinaryStreamer *)SsrwOOStream::seekFromStart(a3, a4);
  return OCCBinaryStreamer::replaceGarbledBytes(v9, a2, a3, a5);
}

uint64_t sub_22A3B4AA8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

BOOL OCCBinaryStreamer::replaceGarbledBytes(OCCBinaryStreamer *this, SsrwOOStream *a2, SsrwOOStream *a3, int a4)
{
  uint64_t v7;
  _BOOL8 v8;
  int v10;
  int v11;

  v7 = operator new[]();
  v11 = a4;
  (*((void (**)(SsrwOOStream *, uint64_t, int *))a2->var0 + 7))(a2, v7, &v11);
  if (v11 == a4)
  {
    v10 = a4;
    (*((void (**)(SsrwOOStream *, uint64_t, int *))a3->var0 + 23))(a3, v7, &v10);
    v8 = v10 == a4;
  }
  else
  {
    v8 = 0;
  }
  MEMORY[0x22E2DD3F0](v7, 0x1000C8077774924);
  return v8;
}

BOOL OCCBinaryStreamer::cryptoAPI_decryptStreamOrStorage(OCCBinaryStreamer *this, const unsigned __int16 *a2, SsrwOOStream *a3, SsrwOOStorage *a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  void *v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  int v18;
  SsrwOOStream *v19;
  void *__p;
  void *v21;
  uint64_t v22;

  v9 = *(unsigned int *)a2;
  v8 = *((unsigned int *)a2 + 1);
  v10 = a2[4];
  v11 = *((unsigned __int8 *)a2 + 11);
  v12 = (unsigned __int16 *)(a2 + 8);
  *a5 = 2 * *((unsigned __int8 *)a2 + 10) + 18;
  if (!OCCBinaryStreamer::cryptoAPI_isThisStreamOrStorageNeeded(this, a2 + 8))
    return 1;
  __p = 0;
  v21 = 0;
  v22 = 0;
  if ((_DWORD)v8)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v8);
    v13 = __p;
  }
  else
  {
    v13 = 0;
  }
  v15 = OCCCryptoKey::decryptBlock(this->var1, a3, v9, v8, v10, v13);
  v14 = v15;
  if (v11)
    v16 = v15;
  else
    v16 = 0;
  if ((v16 & 1) != 0)
  {
    v19 = 0;
    if ((OCCStreamer::openOutputStream((OCCStreamer *)this, a4, &v19, v12) & 1) != 0)
    {
      v18 = v8;
      (*((void (**)(SsrwOOStream *, void *, int *))v19->var0 + 23))(v19, __p, &v18);
      (*((void (**)(SsrwOOStream *, uint64_t))v19->var0 + 19))(v19, 1);
      if (v19)
        (*((void (**)(SsrwOOStream *))v19->var0 + 1))(v19);
      v14 = v18 == (_DWORD)v8;
    }
    else
    {
      v14 = 0;
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_22A3B4CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL OCCBinaryStreamer::cryptoAPI_isThisStreamOrStorageNeeded(OCCBinaryStreamer *this, const unsigned __int16 *a2)
{
  return !_ChWcscmp(a2, (const unsigned __int16 *)&OCCBinaryStreamer::DocumentSummaryInformationStreamName)|| _ChWcscmp(a2, (const unsigned __int16 *)&OCCBinaryStreamer::SummaryInformationStreamName) == 0;
}

BOOL OCCBinaryStreamer::cryptoAPI_decryptEncryptedSummaryStream(OCCBinaryStreamer *this, SsrwOOStorage *a2)
{
  OCCStreamer *v4;
  SsrwOOStream **v5;
  const char *v6;
  _BOOL8 v7;
  SsrwOOStgInfo *v8;
  int Size;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  void *__p;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  SsrwOOStream *v23;

  v23 = 0;
  v4 = (OCCStreamer *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 3))(this);
  v5 = (SsrwOOStream **)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 10))(this);
  if (!OCCStreamer::openInputStream(v4, (SsrwOOStorage *)&v23, v5, v6))
    return 1;
  v22 = 0;
  v7 = 0;
  if (OCCCryptoKey::decryptBlock(this->var1, v23, 0, 4, 0, &v22))
  {
    v8 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))v23->var0 + 21))(v23);
    Size = SsrwOOStgInfo::getSize(v8);
    v10 = v22;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v11 = Size - v22;
    if (Size == v22)
    {
      v12 = 0;
    }
    else
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v11);
      v10 = v22;
      v12 = __p;
    }
    v13 = OCCCryptoKey::decryptBlock(this->var1, v23, v10, v11, 0, v12);
    v14 = __p;
    if (v13)
    {
      v15 = *(_DWORD *)__p;
      if (*(_DWORD *)__p)
      {
        v16 = 4;
        do
        {
          v18 = 0;
          v7 = OCCBinaryStreamer::cryptoAPI_decryptStreamOrStorage(this, (const unsigned __int16 *)((char *)__p + v16), v23, a2, &v18);
          if (!v7)
            break;
          v16 += v18;
          --v15;
        }
        while (v15);
        v14 = __p;
        if (!__p)
          goto LABEL_18;
      }
      else
      {
        v7 = 1;
      }
      goto LABEL_17;
    }
    v7 = 0;
    if (__p)
    {
LABEL_17:
      v20 = v14;
      operator delete(v14);
    }
  }
LABEL_18:
  if (v23)
    (*((void (**)(SsrwOOStream *))v23->var0 + 1))(v23);
  return v7;
}

void sub_22A3B4EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCBinaryStreamer::cryptoAPI_encryptSummaryStream(OCCBinaryStreamer *this, SsrwOOStorage *a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  OCCStreamer *v7;
  const unsigned __int16 *v8;
  SsrwOOStgInfo *v9;
  uint64_t Size;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  OCCStreamer *v15;
  const unsigned __int16 *v16;
  SsrwOOStgInfo *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int16 v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  _DWORD *v32;
  int v33;
  void *v34;
  int v35;
  int v37;
  void *__p;
  char *v39;
  uint64_t v40;
  int v41;
  void *v42;
  char *v43;
  uint64_t v44;
  SsrwOOStorage v45;

  *(_QWORD *)v45.var1 = 0;
  v4 = (const char *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 10))(this);
  v5 = OCCStreamer::openOutputStream((OCCStreamer *)this, a2, (SsrwOOStream **)v45.var1, v4);
  if (!(_DWORD)v5)
    return v5;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v45.var1 + 224))(*(_QWORD *)v45.var1, 0);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v45.var1 + 224))(*(_QWORD *)v45.var1, 0);
  v44 = 0;
  v45.var0 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v45.var1 + 40))(*(_QWORD *)v45.var1);
  v7 = (OCCStreamer *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 3))(this);
  if (OCCStreamer::openInputStream(v7, &v45, (SsrwOOStream **)&OCCBinaryStreamer::SummaryInformationStreamName, v8))
  {
    v9 = (SsrwOOStgInfo *)(*(uint64_t (**)(_Storage *))(*(_QWORD *)v45.var0 + 168))(v45.var0);
    Size = SsrwOOStgInfo::getSize(v9);
    v11 = Size;
    v12 = v42;
    if (Size <= (int)v43 - (int)v42)
    {
      if (Size < (int)v43 - (int)v42)
        v43 = (char *)v42 + Size;
    }
    else
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v42, Size - ((_DWORD)v43 - (_DWORD)v42));
      v12 = v42;
    }
    if (OCCCryptoKey::encryptBlock(this->var1, (SsrwOOStream *)v45.var0, 0, v11, 0, v12))
    {
      v41 = v11;
      (*(void (**)(_QWORD, void *, int *))(**(_QWORD **)v45.var1 + 184))(*(_QWORD *)v45.var1, v42, &v41);
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
    (*(void (**)(_Storage *, uint64_t))(*(_QWORD *)v45.var0 + 152))(v45.var0, 1);
    if (v45.var0)
      (*(void (**)(_Storage *))(*(_QWORD *)v45.var0 + 8))(v45.var0);
    v45.var0 = 0;
  }
  else
  {
    v13 = 0;
    LODWORD(v11) = 0;
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v45.var1 + 40))(*(_QWORD *)v45.var1);
  v15 = (OCCStreamer *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 3))(this);
  if (OCCStreamer::openInputStream(v15, &v45, (SsrwOOStream **)&OCCBinaryStreamer::DocumentSummaryInformationStreamName, v16))
  {
    v17 = (SsrwOOStgInfo *)(*(uint64_t (**)(_Storage *))(*(_QWORD *)v45.var0 + 168))(v45.var0);
    v18 = SsrwOOStgInfo::getSize(v17);
    v19 = v18;
    v20 = v42;
    if (v18 <= (int)v43 - (int)v42)
    {
      if (v18 < (int)v43 - (int)v42)
        v43 = (char *)v42 + v18;
    }
    else
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v42, v18 - ((_DWORD)v43 - (_DWORD)v42));
      v20 = v42;
    }
    if (OCCCryptoKey::encryptBlock(this->var1, (SsrwOOStream *)v45.var0, 0, v19, v13, v20))
    {
      v41 = v19;
      (*(void (**)(_QWORD, void *, int *))(**(_QWORD **)v45.var1 + 184))(*(_QWORD *)v45.var1, v42, &v41);
    }
    (*(void (**)(_Storage *, uint64_t))(*(_QWORD *)v45.var0 + 152))(v45.var0, 1);
    if (v45.var0)
      (*(void (**)(_Storage *))(*(_QWORD *)v45.var0 + 8))(v45.var0);
    v21 = v13;
    v22 = v6;
    v45.var0 = 0;
  }
  else
  {
    v21 = v13;
    v22 = v6;
    LODWORD(v19) = 0;
  }
  if ((_DWORD)v11)
    v23 = 60;
  else
    v23 = 4;
  if ((_DWORD)v11)
    v24 = 2;
  else
    v24 = 1;
  if ((_DWORD)v19)
    v25 = v23 + 72;
  else
    v25 = v23;
  if ((_DWORD)v19)
    v26 = v24;
  else
    v26 = v11 != 0;
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v45.var1 + 40))(*(_QWORD *)v45.var1);
  __p = 0;
  v39 = 0;
  v40 = 0;
  std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v25);
  v27 = (char *)__p;
  *(_DWORD *)__p = v26;
  if (!(_DWORD)v11)
  {
    v28 = 4;
    if (!(_DWORD)v19)
      goto LABEL_40;
    goto LABEL_39;
  }
  *((_DWORD *)v27 + 1) = v22;
  *((_DWORD *)v27 + 2) = v11;
  *(_QWORD *)(v27 + 12) = 18022400;
  *(_QWORD *)(v27 + 52) = 0x6E006F0069;
  *(_OWORD *)(v27 + 20) = OCCBinaryStreamer::SummaryInformationStreamName;
  *(_OWORD *)(v27 + 36) = unk_22A4C1372;
  v28 = 60;
  if ((_DWORD)v19)
  {
LABEL_39:
    v29 = &v27[v28];
    *(_DWORD *)v29 = v14;
    *((_DWORD *)v29 + 1) = v19;
    *((_WORD *)v29 + 4) = v21;
    v29[10] = 27;
    *((_BYTE *)__p + v28 + 11) = 1;
    v27 = (char *)__p;
    v30 = (char *)__p + v28;
    *((_DWORD *)v30 + 3) = 0;
    *((_QWORD *)v30 + 8) = 0x6E006F0069;
    *((_OWORD *)v30 + 1) = OCCBinaryStreamer::DocumentSummaryInformationStreamName;
    *((_OWORD *)v30 + 2) = unk_22A4C133A;
    *((_OWORD *)v30 + 3) = xmmword_22A4C134A;
  }
LABEL_40:
  v31 = v42;
  if (v25 <= (int)v43 - (int)v42)
  {
    if (v25 < (int)v43 - (int)v42)
      v43 = (char *)v42 + v25;
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v42, v25 - ((_DWORD)v43 - (_DWORD)v42));
    v27 = (char *)__p;
    v31 = v42;
  }
  if (OCCCryptoKey::encryptBlock(this->var1, v27, v25, 0, v31))
  {
    v41 = v25;
    (*(void (**)(_QWORD, void *, int *))(**(_QWORD **)v45.var1 + 184))(*(_QWORD *)v45.var1, v42, &v41);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v45.var1 + 16))(*(_QWORD *)v45.var1, 0, 0);
  v32 = __p;
  v33 = (_DWORD)v39 - (_DWORD)__p;
  if (((_DWORD)v39 - (_DWORD)__p) > 7)
  {
    if (v33 != 8)
      v39 = (char *)__p + 8;
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, 8 - v33);
    v32 = __p;
  }
  *v32 = v37;
  v32[1] = v25;
  v34 = v42;
  v35 = (_DWORD)v43 - (_DWORD)v42;
  if (((_DWORD)v43 - (_DWORD)v42) > 7)
  {
    if (v35 != 8)
      v43 = (char *)v42 + 8;
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v42, 8 - v35);
    v32 = __p;
    v34 = v42;
  }
  if (OCCCryptoKey::encryptBlock(this->var1, v32, 8, 0, v34))
  {
    v41 = 8;
    (*(void (**)(_QWORD, void *, int *))(**(_QWORD **)v45.var1 + 184))(*(_QWORD *)v45.var1, v42, &v41);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v45.var1 + 152))(*(_QWORD *)v45.var1, 1);
  if (*(_QWORD *)v45.var1)
    (*(void (**)(_QWORD))(**(_QWORD **)v45.var1 + 8))(*(_QWORD *)v45.var1);
  v5 = v5;
  if (__p)
  {
    v39 = (char *)__p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = (char *)v42;
    operator delete(v42);
  }
  return v5;
}

void sub_22A3B5418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCBinaryStreamer::decryptIntoFile(OCCBinaryStreamer *this, __sFILE *a2)
{
  int8x8_t v4;
  const OCCCryptoKey *v5;
  uint64_t v6;
  SsrwOOStorage v8;

  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)&v8);
  if ((OCCStreamer::openOutputRootStorage((OCCStreamer *)this, a2, (SsrwOORootStorage *)&v8, v4) & 1) != 0)
  {
    if ((*((unsigned int (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 8))(this, &v8)
      && (!OCCCryptoAPICryptoKey::isCryptoAPI(this->var1, v5)
       || OCCBinaryStreamer::cryptoAPI_decryptEncryptedSummaryStream(this, &v8)))
    {
      v6 = (*((uint64_t (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 6))(this, &v8);
    }
    else
    {
      v6 = 0;
    }
    SsrwOORootStorage::close((SsrwOORootStorage *)&v8, 1);
  }
  else
  {
    v6 = 0;
  }
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&v8);
  return v6;
}

void sub_22A3B5514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  _Unwind_Resume(a1);
}

uint64_t OCCBinaryStreamer::encryptIntoFile(OCCBinaryStreamer *this, __sFILE *a2)
{
  int8x8_t v4;
  const OCCCryptoKey *v5;
  int v6;
  uint64_t v7;
  SsrwOOStorage v9;

  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)&v9);
  if ((OCCStreamer::openOutputRootStorage((OCCStreamer *)this, a2, (SsrwOORootStorage *)&v9, v4) & 1) != 0)
  {
    if ((*((unsigned int (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 9))(this, &v9)
      && (!OCCCryptoAPICryptoKey::isCryptoAPI(this->var1, v5)
       || (!OCCCryptoAPICryptoKey::isDocPropertyInfoEncrypted((OCCCryptoAPICryptoKey *)this->var1)
         ? (v6 = (*((uint64_t (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 7))(this, &v9))
         : (v6 = OCCBinaryStreamer::cryptoAPI_encryptSummaryStream(this, &v9)),
           v6)))
    {
      v7 = (*((uint64_t (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 6))(this, &v9);
    }
    else
    {
      v7 = 0;
    }
    SsrwOORootStorage::close((SsrwOORootStorage *)&v9, 1);
  }
  else
  {
    v7 = 0;
  }
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&v9);
  return v7;
}

void sub_22A3B5608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  _Unwind_Resume(a1);
}

uint64_t OCCStreamer::getDefaultPassphraseInUTF8(OCCStreamer *this)
{
  return 0;
}

uint64_t OCCBinaryStreamer::copyUnencryptedIntoRootStorage(OCCBinaryStreamer *this, SsrwOORootStorage *a2)
{
  return 1;
}

void OCCCryptoAPICryptoKey::~OCCCryptoAPICryptoKey(OCCCryptoKey *this)
{
  void **var0;

  this->var0 = (void **)&off_24F3A6EE0;
  var0 = this[1].var0;
  if (var0)
    MEMORY[0x22E2DD3F0](var0, 0x1000C8077774924);
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  OCCCryptoAPICryptoKey::~OCCCryptoAPICryptoKey(this);
  JUMPOUT(0x22E2DD408);
}

OCCCryptoAPICryptoKey *OCCCryptoAPICryptoKey::create(OCCCryptoAPICryptoKey *this, const void *a2)
{
  unsigned int v2;
  int v4;
  OCCCryptoAPICryptoKey *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char isDocPropInfoEncrypted;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _BYTE v14[20];
  unsigned int v15;

  v2 = a2;
  OCCEncryptionHeader::OCCEncryptionHeader((OCCEncryptionHeader *)v14, this, a2);
  if ((v15 & 7) != 0
    || (v12 = 0,
        v13 = 0,
        v11 = 0,
        (OCCEncryptionHeader::getNewEncryptionVerifier((OCCEncryptionHeader *)v14, (char *)this, v2, 0x14u, &v13, &v12, &v11) & 1) == 0))
  {
    v5 = 0;
  }
  else
  {
    if (v15 >= 8)
      v4 = v15 >> 3;
    else
      v4 = 5;
    v5 = (OCCCryptoAPICryptoKey *)operator new();
    v7 = v12;
    v6 = v13;
    v8 = v11;
    isDocPropInfoEncrypted = OCCEncryptionHeader::isDocPropInfoEncrypted((OCCEncryptionHeader *)v14);
    OCCCryptoAPICryptoKey::OCCCryptoAPICryptoKey(v5, v6, (char *)v7, (char *)v8, v4, isDocPropInfoEncrypted);
  }
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)v14);
  return v5;
}

void sub_22A3B578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)va);
  _Unwind_Resume(a1);
}

void OCCCryptoAPICryptoKey::OCCCryptoAPICryptoKey(OCCCryptoAPICryptoKey *this, unsigned __int8 *a2, char *a3, char *a4, int a5, char a6)
{
  uint64_t v10;
  OCCRC4Cryptor *v11;
  int v12;

  OCCCryptoKey::OCCCryptoKey((OCCCryptoKey *)this, a3, a4, 0x10u, 0x14u, 0x10u);
  *(_QWORD *)v10 = &off_24F3A6EE0;
  *(_QWORD *)(v10 + 48) = a2;
  *(_DWORD *)(v10 + 56) = a5;
  *(_QWORD *)(v10 + 64) = &off_24F3A71F0;
  v11 = (OCCRC4Cryptor *)(v10 + 72);
  if (a5 == 5)
    v12 = 16;
  else
    v12 = a5;
  OCCRC4Cryptor::OCCRC4Cryptor(v11, v12);
  *((_BYTE *)this + 96) = a6;
}

void sub_22A3B5854(_Unwind_Exception *a1)
{
  OCCCryptoKey *v1;

  OCCCryptoKey::~OCCCryptoKey(v1);
  _Unwind_Resume(a1);
}

uint64_t OCCCryptoAPICryptoKey::encryptionInfo(OCCCryptoAPICryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  uint64_t v6;
  __int32 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  int32x2_t v14[6];

  *a2 = 0;
  *a3 = 0;
  if (!*((_QWORD *)this + 6) || !*((_QWORD *)this + 2) || !*((_QWORD *)this + 3))
    return 0;
  OCCEncryptionHeader::OCCEncryptionHeader((OCCEncryptionHeader *)v14);
  OCCEncryptionHeader::initializeForDefaultCryptioAPI((OCCEncryptionHeader *)v14);
  *a3 = v14[0].i32[0] + 72;
  v6 = operator new[]();
  *a2 = (unsigned __int8 *)v6;
  *(_DWORD *)v6 = 131076;
  *(int32x2_t *)(v6 + 4) = vrev64_s32(v14[0]);
  OCCEncryptionHeader::writeHeader((const void **)v14, (_DWORD *)(v6 + 12));
  v7 = v14[0].i32[0];
  v8 = (uint64_t)*a2;
  *(_DWORD *)&(*a2)[v14[0].i32[0] + 12] = 16;
  *(_OWORD *)(v8 + (v7 + 16)) = *(_OWORD *)*((_QWORD *)this + 6);
  *(_OWORD *)&(*a2)[v7 + 32] = *(_OWORD *)*((_QWORD *)this + 2);
  v9 = (uint64_t)*a2;
  *(_DWORD *)&(*a2)[v7 + 48] = 20;
  v10 = v9 + (v7 + 52);
  v11 = (__int128 *)*((_QWORD *)this + 3);
  v12 = *v11;
  *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
  *(_OWORD *)v10 = v12;
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)v14);
  return 1;
}

void sub_22A3B598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)&a9);
  _Unwind_Resume(a1);
}

uint64_t OCCCryptoAPICryptoKey::isDocPropertyInfoEncrypted(OCCCryptoAPICryptoKey *this)
{
  return *((unsigned __int8 *)this + 96);
}

BOOL OCCCryptoAPICryptoKey::isVersionValid(OCCCryptoAPICryptoKey *this, int a2)
{
  return ((_DWORD)this - 2) < 3 && a2 == 2;
}

const void *OCCCryptoAPICryptoKey::isCryptoAPI(const void *this, const OCCCryptoKey *a2)
{
  if (this)
  return this;
}

uint64_t OCCCryptoAPICryptoKey::getSeedSize(OCCCryptoAPICryptoKey *this)
{
  return (*(unsigned int (**)(OCCCryptoAPICryptoKey *))(*(_QWORD *)this + 32))(this) + 20;
}

uint64_t OCCCryptoAPICryptoKey::computeKeySeed(OCCCryptoAPICryptoKey *this, const void *a2, unsigned int a3, void *a4)
{
  unsigned int v8;
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a3 + 16);
  *(_OWORD *)__p = *(_OWORD *)*((_QWORD *)this + 6);
  memcpy((char *)__p + 16, a2, a3);
  v8 = (**(uint64_t (***)(OCCCryptoAPICryptoKey *))this)(this);
  bzero(a4, v8);
  OCCSHA1Hash::computeHash((OCCCryptoAPICryptoKey *)((char *)this + 64), __p, (_DWORD)v11 - (_DWORD)__p, (unsigned __int8 *)a4);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_22A3B5ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double OCCCryptoAPICryptoKey::decryptVerificationInfo(OCCCryptoAPICryptoKey *this, const void *a2, const void *a3, _OWORD *a4, _DWORD *a5)
{
  uint64_t v7;
  int v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  _OWORD v14[2];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v7 = *((_QWORD *)this + 3);
  v14[0] = *(_OWORD *)*((_QWORD *)this + 2);
  v8 = *(_DWORD *)(v7 + 16);
  v14[1] = *(_OWORD *)v7;
  v15 = v8;
  if (OCCCryptor::decrypt((OCCCryptoAPICryptoKey *)((char *)this + 72), a2, 0, v14, 0x24u, &v11, 0x24u))
  {
    result = *(double *)&v11;
    v10 = v12;
    *a4 = v11;
    a5[4] = v13;
    *(_OWORD *)a5 = v10;
  }
  return result;
}

uint64_t OCCCryptoAPICryptoKey::getCipherKeySize(OCCCryptoAPICryptoKey *this)
{
  return OCCRC4Cryptor::getKeySizeInBytes((OCCCryptoAPICryptoKey *)((char *)this + 72));
}

uint64_t OCCCryptoAPICryptoKey::getBlockKeySize(OCCCryptoAPICryptoKey *this)
{
  return 4;
}

uint64_t OCCCryptoAPICryptoKey::computeVerifierBlockKey(OCCCryptoAPICryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCCryptoAPICryptoKey *))(*(_QWORD *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

uint64_t OCCCryptoAPICryptoKey::computeVerifierHashBlockKey(OCCCryptoAPICryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCCryptoAPICryptoKey *))(*(_QWORD *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

BOOL OCCCryptoAPICryptoKey::deriveKey(OCCCryptoAPICryptoKey *this, const void *a2, char *a3)
{
  uint64_t v3;
  OCCSHA1Hash *v7;
  void *v8;
  unsigned int v9;
  const void *v10;
  CC_LONG v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL8 v14;
  size_t v15;
  size_t v16;
  _QWORD v18[2];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v7 = (OCCCryptoAPICryptoKey *)((char *)this + 64);
  v8 = (void *)(v3 + OCCSHA1Hash::getOutputSize((OCCCryptoAPICryptoKey *)((char *)this + 64)));
  v9 = (*(uint64_t (**)(OCCCryptoAPICryptoKey *))(*(_QWORD *)this + 32))(this);
  memcpy(v8, a2, v9);
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v10 = (const void *)*((_QWORD *)this + 1);
  v11 = (**(uint64_t (***)(OCCCryptoAPICryptoKey *))this)(this);
  OCCSHA1Hash::computeHash(v7, v10, v11, (unsigned __int8 *)v18);
  v12 = *((_DWORD *)this + 14);
  if (v12 == 5)
    v13 = 16;
  else
    v13 = v12;
  v14 = v13 >= v12;
  if (v13 >= v12)
  {
    if (v13 >= 0x14)
      v15 = 20;
    else
      v15 = v13;
    if (v13 <= 0x14)
      v16 = 0;
    else
      v16 = v13 - v15;
    bzero(&a3[v15], v16);
    memcpy(a3, v18, v15);
  }
  return v14;
}

uint64_t OCCCryptoAPICryptoKey::deriveDecryptionKey(OCCCryptoAPICryptoKey *this, int a2, void *a3, unsigned __int8 **a4)
{
  int v5;

  v5 = a2;
  *a4 = 0;
  return (*(uint64_t (**)(OCCCryptoAPICryptoKey *, int *, void *))(*(_QWORD *)this + 56))(this, &v5, a3);
}

uint64_t OCCCryptoAPICryptoKey::decryptBlockUsingDecryptionKey(OCCCryptoAPICryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::decrypt((OCCCryptoAPICryptoKey *)((char *)this + 72), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCCryptoAPICryptoKey::encryptBlockUsingEncryptionKey(OCCCryptoAPICryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::encrypt((OCCCryptoAPICryptoKey *)((char *)this + 72), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCCryptoAPICryptoKey::getHashAlgorithm(OCCCryptoAPICryptoKey *this)
{
  return (uint64_t)this + 64;
}

uint64_t OCCCryptoAPICryptoKey::createXmlSegmenter(OCCCryptoAPICryptoKey *this)
{
  return 0;
}

void OCCCryptoKey::~OCCCryptoKey(OCCCryptoKey *this)
{
  char *var1;
  char *var2;
  char *var3;

  this->var0 = (void **)&unk_24F3A6F88;
  var1 = this->var1;
  if (var1)
    MEMORY[0x22E2DD3F0](var1, 0x1000C8077774924);
  var2 = this->var2;
  if (var2)
    MEMORY[0x22E2DD3F0](var2, 0x1000C8077774924);
  var3 = this->var3;
  if (var3)
    MEMORY[0x22E2DD3F0](var3, 0x1000C8077774924);
}

void OCCCryptoKey::OCCCryptoKey(OCCCryptoKey *this, char *a2, char *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  this->var0 = (void **)&unk_24F3A6F88;
  this->var1 = 0;
  this->var2 = a2;
  this->var3 = a3;
  this->var4 = a4;
  this->var5 = a5;
  this->var6 = a6;
}

OCCCryptoAPICryptoKey *OCCCryptoKey::createUsingEncryptionInfoStream(OCCCryptoKey *this, SsrwOOStream *a2, SsrwOOStream *a3, const void *a4)
{
  uint64_t v8;
  OCCCryptoAPICryptoKey *UsingEncryptionInfoBuffer;
  int v11;
  void *__p;
  void *v13;
  uint64_t v14;

  v8 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  __p = 0;
  v13 = 0;
  v14 = 0;
  if ((_DWORD)a4)
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a4);
  SsrwOOStream::seekFromStart(a2, (uint64_t)a3);
  v11 = (int)a4;
  (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, __p, &v11);
  if (v11 == (_DWORD)a4)
    UsingEncryptionInfoBuffer = OCCCryptoKey::createUsingEncryptionInfoBuffer(this, (unsigned __int16 *)__p, a4);
  else
    UsingEncryptionInfoBuffer = 0;
  SsrwOOStream::seekFromStart(a2, v8);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return UsingEncryptionInfoBuffer;
}

void sub_22A3B5F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OCCCryptoAPICryptoKey *OCCCryptoKey::createUsingEncryptionInfoBuffer(OCCCryptoKey *this, unsigned __int16 *a2, const void *a3)
{
  OCCAgileCryptoKey *v5;
  int v6;

  if (a3 < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!(_DWORD)this)
      goto LABEL_3;
LABEL_7:
    if (OCCAgileCryptoKey::isVersionValid(v5, v6))
      return (OCCCryptoAPICryptoKey *)OCCAgileCryptoKey::create((OCCAgileCryptoKey *)a2, a3);
    if (OCCStandardCryptoKey::isVersionValid(v5, v6))
      return OCCStandardCryptoKey::create((OCCStandardCryptoKey *)a2, a3);
    if (!OCCRC4CryptoKey::isVersionValid(v5, v6))
      return 0;
    return OCCRC4CryptoKey::create((OCCRC4CryptoKey *)a2, a3);
  }
  v5 = (OCCAgileCryptoKey *)*a2;
  v6 = a2[1];
  if ((_DWORD)this)
    goto LABEL_7;
LABEL_3:
  if (OCCRC4CryptoKey::isVersionValid(v5, v6))
    return OCCRC4CryptoKey::create((OCCRC4CryptoKey *)a2, a3);
  if (OCCCryptoAPICryptoKey::isVersionValid(v5, v6))
    return OCCCryptoAPICryptoKey::create((OCCCryptoAPICryptoKey *)a2, a3);
  return 0;
}

BOOL OCCCryptoKey::verifyPassphrase(OCCCryptoKey *this, const void *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  char *var1;
  unsigned int v9;
  char *v10;
  _BOOL8 v11;
  unsigned int v12;
  void *v13;
  unsigned int var6;
  void *v15;
  uint64_t v16;
  void *v17;
  void *__s2;
  void *v20;
  uint64_t v21;
  void *__s1;
  void *v23;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 11))(this);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  var1 = this->var1;
  if (!var1)
  {
    ((void (*)(OCCCryptoKey *))*this->var0)(this);
    var1 = (char *)operator new[]();
    this->var1 = var1;
  }
  if (!(*((unsigned int (**)(OCCCryptoKey *, const void *, uint64_t, char *))this->var0 + 1))(this, a2, a3, var1))return 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v9 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
  v10 = 0;
  if (v9)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append(&v31, v9);
    v10 = v31;
  }
  if ((OCCCryptoKey::deriveVerifierKey(this, v10) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v12 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
    v13 = 0;
    if (v12)
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v28, v12);
      v13 = v28;
    }
    else if ((_DWORD)v29 != (_DWORD)v28)
    {
      v29 = v28;
    }
    if ((OCCCryptoKey::deriveVerifierHashKey(this, v13) & 1) != 0)
    {
      __p = 0;
      v26 = 0;
      v27 = 0;
      var6 = this->var6;
      if (var6)
        std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, var6);
      __s1 = 0;
      v23 = 0;
      v24 = 0;
      if (v7)
      {
        std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__s1, v7);
        v15 = __s1;
      }
      else
      {
        v15 = 0;
      }
      if (((*((uint64_t (**)(OCCCryptoKey *, char *, void *, void *, void *))this->var0 + 2))(this, v31, v28, __p, v15) & 1) != 0)
      {
        __s2 = 0;
        v20 = 0;
        v21 = 0;
        if (v7)
          std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__s2, v7);
        v16 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 11))(this);
        (*(void (**)(uint64_t, void *, _QWORD, void *))(*(_QWORD *)v16 + 16))(v16, __p, this->var6, __s2);
        v17 = __s2;
        v11 = memcmp(__s1, __s2, v7) == 0;
        if (v17)
        {
          v20 = v17;
          operator delete(v17);
        }
      }
      else
      {
        v11 = 0;
      }
      if (__s1)
      {
        v23 = __s1;
        operator delete(__s1);
      }
      if (__p)
      {
        v26 = __p;
        operator delete(__p);
      }
    }
    else
    {
      v11 = 0;
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
  }
  else
  {
    v11 = 0;
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  return v11;
}

void sub_22A3B62C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(_QWORD *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::deriveVerifierKey(OCCCryptoKey *this, void *a2)
{
  unsigned int v4;
  void *v5;
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v4 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 4))(this);
  if (v4)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v4);
    v5 = __p;
  }
  else
  {
    v5 = 0;
  }
  if (((*((uint64_t (**)(OCCCryptoKey *, void *))this->var0 + 5))(this, v5) & 1) != 0)
    v6 = (*((uint64_t (**)(OCCCryptoKey *, void *, void *))this->var0 + 7))(this, __p, a2);
  else
    v6 = 0;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_22A3B63E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::deriveVerifierHashKey(OCCCryptoKey *this, void *a2)
{
  unsigned int v4;
  void *v5;
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v4 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 4))(this);
  if (v4)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v4);
    v5 = __p;
  }
  else
  {
    v5 = 0;
  }
  if (((*((uint64_t (**)(OCCCryptoKey *, void *))this->var0 + 6))(this, v5) & 1) != 0)
    v6 = (*((uint64_t (**)(OCCCryptoKey *, void *, void *))this->var0 + 7))(this, __p, a2);
  else
    v6 = 0;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_22A3B64A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::decryptBlock(OCCCryptoKey *this, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v10 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v10);
    v11 = __p;
  }
  else
  {
    v11 = 0;
  }
  v14 = 0;
  if ((*((unsigned int (**)(OCCCryptoKey *, uint64_t, void *, uint64_t *))this->var0 + 8))(this, a4, v11, &v14))
  {
    v12 = (*((uint64_t (**)(OCCCryptoKey *, void *, uint64_t, const void *, uint64_t, void *))this->var0 + 9))(this, __p, v14, a2, a3, a5);
  }
  else
  {
    v12 = 0;
  }
  if (v14)
    MEMORY[0x22E2DD3F0](v14, 0x1000C8077774924);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_22A3B65AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::decryptBlock(OCCCryptoKey *this, SsrwOOStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  int v14;
  void *__p;
  void *v16;
  uint64_t v17;

  __p = 0;
  v16 = 0;
  v17 = 0;
  if ((_DWORD)a4)
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a4);
  v14 = a4;
  SsrwOOStream::seekFromStart(a2, a3);
  (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, __p, &v14);
  if (v14 == (_DWORD)a4)
    v12 = OCCCryptoKey::decryptBlock(this, __p, a4, a5, a6);
  else
    v12 = 0;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_22A3B6698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::encryptBlock(OCCCryptoKey *this, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v10 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v10);
    v11 = __p;
  }
  else
  {
    v11 = 0;
  }
  v14 = 0;
  if ((*((unsigned int (**)(OCCCryptoKey *, uint64_t, void *, uint64_t *))this->var0 + 8))(this, a4, v11, &v14))
  {
    v12 = (*((uint64_t (**)(OCCCryptoKey *, void *, uint64_t, const void *, uint64_t, void *))this->var0 + 10))(this, __p, v14, a2, a3, a5);
  }
  else
  {
    v12 = 0;
  }
  if (v14)
    MEMORY[0x22E2DD3F0](v14, 0x1000C8077774924);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_22A3B67A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::encryptBlock(OCCCryptoKey *this, SsrwOOStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  int v14;
  void *__p;
  void *v16;
  uint64_t v17;

  __p = 0;
  v16 = 0;
  v17 = 0;
  if ((_DWORD)a4)
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a4);
  v14 = a4;
  SsrwOOStream::seekFromStart(a2, a3);
  (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, __p, &v14);
  if (v14 == (_DWORD)a4)
    v12 = OCCCryptoKey::encryptBlock(this, __p, a4, a5, a6);
  else
    v12 = 0;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_22A3B6894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptor::create(OCCCryptor *this, const char *__s1, const char *a3)
{
  unsigned int v3;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(OCCCryptor *__hidden);
  uint64_t v12;
  uint64_t (**v13)(OCCCryptor *__hidden);
  char v14;

  v3 = a3;
  if (!strcmp(__s1, "ChainingModeECB"))
  {
    v7 = 0;
    v6 = 0;
  }
  else if (!strcmp(__s1, "ChainingModeCBC"))
  {
    v7 = 0;
    v6 = 1;
  }
  else
  {
    if (!strcmp(__s1, "ChainingModeCFB"))
      return 0;
    v6 = 3;
    v7 = 1;
  }
  if (!strcmp((const char *)this, "AES"))
  {
    v9 = 0;
    if (v3 <= 0x20 && ((1 << v3) & 0x101010000) != 0)
    {
      v9 = operator new();
      OCCAESCryptor::OCCAESCryptor(v9, v3, v6);
    }
    return v9;
  }
  if (!strcmp((const char *)this, "DES"))
  {
    if (v3 != 8)
      return 0;
    v12 = operator new();
    v9 = v12;
    *(_DWORD *)(v12 + 8) = 1;
    *(_DWORD *)(v12 + 12) = v6;
    v13 = off_24F3A70E8;
LABEL_21:
    *(_QWORD *)v12 = v13;
    return v9;
  }
  if (!strcmp((const char *)this, "3DES"))
  {
    if (v3 != 24)
      return 0;
    v12 = operator new();
    v9 = v12;
    *(_DWORD *)(v12 + 8) = 2;
    *(_DWORD *)(v12 + 12) = v6;
    v13 = off_24F3A7128;
    goto LABEL_21;
  }
  if (!strcmp((const char *)this, "RC4"))
  {
    v14 = v7 ^ 1;
    if (v3 - 1 > 0x1FF)
      v14 = 1;
    if ((v14 & 1) == 0)
    {
      v10 = operator new();
      v9 = v10;
      *(_QWORD *)(v10 + 8) = 0x300000004;
      v11 = off_24F3A7068;
      goto LABEL_26;
    }
    return 0;
  }
  v8 = strcmp((const char *)this, "RC2");
  v9 = 0;
  if (v3 - 1 <= 0x7F && !v8)
  {
    v10 = operator new();
    v9 = v10;
    *(_DWORD *)(v10 + 8) = 5;
    *(_DWORD *)(v10 + 12) = v6;
    v11 = off_24F3A70A8;
LABEL_26:
    *(_QWORD *)v10 = v11;
    *(_DWORD *)(v10 + 16) = v3;
  }
  return v9;
}

void sub_22A3B6B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void OCCRC4Cryptor::OCCRC4Cryptor(OCCRC4Cryptor *this, int a2)
{
  *((_QWORD *)this + 1) = 0x300000004;
  *(_QWORD *)this = off_24F3A7068;
  *((_DWORD *)this + 4) = a2;
}

uint64_t OCCCryptor::decrypt(OCCCryptor *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6, unsigned int a7)
{
  uint64_t result;
  int v15;
  CCOptions v16;
  int v17;
  uint64_t v18;
  CCAlgorithm v19;
  unsigned int v20;
  CCCryptorStatus v21;
  void *v22;
  CCAlgorithm v23;
  unsigned int v24;
  void *__p;
  void *v26;
  uint64_t v27;
  size_t v28;

  result = (*(uint64_t (**)(OCCCryptor *))(*(_QWORD *)this + 8))(this);
  if (!a3 || (_DWORD)result)
  {
    v15 = *((_DWORD *)this + 3);
    if (v15 != 2)
    {
      if (v15)
        v16 = 0;
      else
        v16 = 2;
      v28 = 0;
      if ((*(unsigned int (**)(OCCCryptor *))(*(_QWORD *)this + 8))(this))
      {
        v26 = 0;
        v27 = 0;
        __p = 0;
        v17 = (*(uint64_t (**)(OCCCryptor *))(*(_QWORD *)this + 8))(this);
        v18 = v17 + a7;
        if (v17 + a7)
          std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v18);
        v19 = *((_DWORD *)this + 2);
        v20 = (*(uint64_t (**)(OCCCryptor *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
        v21 = CCCrypt(1u, v19, v16, a2, v20, a3, a4, a5, __p, ((_DWORD)v26 - (_DWORD)__p), &v28);
        v22 = __p;
        if (v21)
        {
          if (__p)
          {
            v26 = __p;
            operator delete(__p);
          }
          return 0;
        }
        memcpy(a6, __p, a7);
        if (v22)
        {
          v26 = v22;
          operator delete(v22);
        }
        return 1;
      }
      v23 = *((_DWORD *)this + 2);
      v24 = (*(uint64_t (**)(OCCCryptor *))(*(_QWORD *)this + 16))(this);
      if (!CCCrypt(1u, v23, v16, a2, v24, a3, a4, a5, a6, a7, &v28))
        return 1;
    }
    return 0;
  }
  return result;
}

void sub_22A3B6CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptor::encrypt(OCCCryptor *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6, unsigned int a7)
{
  uint64_t result;
  int v15;
  CCOptions v16;
  int v17;
  uint64_t v18;
  CCAlgorithm v19;
  unsigned int v20;
  CCCryptorStatus v21;
  void *v22;
  CCAlgorithm v23;
  unsigned int v24;
  CCCryptorStatus v25;
  void *__p;
  void *v27;
  uint64_t v28;
  size_t v29;

  result = (*(uint64_t (**)(OCCCryptor *))(*(_QWORD *)this + 8))(this);
  if (!a3 || (_DWORD)result)
  {
    v15 = *((_DWORD *)this + 3);
    if (v15 == 2)
      return 0;
    if (v15)
      v16 = 0;
    else
      v16 = 2;
    v29 = 0;
    if ((*(unsigned int (**)(OCCCryptor *))(*(_QWORD *)this + 8))(this))
    {
      v27 = 0;
      v28 = 0;
      __p = 0;
      v17 = (*(uint64_t (**)(OCCCryptor *))(*(_QWORD *)this + 8))(this);
      v18 = v17 + a7;
      if (v17 + a7)
        std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v18);
      v19 = *((_DWORD *)this + 2);
      v20 = (*(uint64_t (**)(OCCCryptor *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
      v21 = CCCrypt(0, v19, v16, a2, v20, a3, a4, a5, __p, ((_DWORD)v27 - (_DWORD)__p), &v29);
      v22 = __p;
      if (v21)
      {
        if (__p)
        {
          v27 = __p;
          operator delete(__p);
        }
        return 0;
      }
      memcpy(a6, __p, a7);
      if (v22)
      {
        v27 = v22;
        operator delete(v22);
      }
    }
    else
    {
      v23 = *((_DWORD *)this + 2);
      v24 = (*(uint64_t (**)(OCCCryptor *))(*(_QWORD *)this + 16))(this);
      v25 = CCCrypt(0, v23, v16, a2, v24, a3, a4, a5, a6, a7, &v29);
      result = 0;
      if (v25)
        return result;
    }
    return 1;
  }
  return result;
}

void sub_22A3B6EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCAESCryptor::OCCAESCryptor(uint64_t result, unsigned int a2, int a3)
{
  _DWORD *exception;

  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)result = off_24F3A7028;
  *(_DWORD *)(result + 16) = a2;
  if (a2 > 0x20 || ((1 << a2) & 0x101010000) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return result;
}

uint64_t OCCAESCryptor::getKeySizeInBytes(OCCAESCryptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t OCCAESCryptor::getBlockSize(OCCAESCryptor *this)
{
  return 16;
}

uint64_t OCCRC4Cryptor::getKeySizeInBytes(OCCRC4Cryptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t OCCRC4Cryptor::getBlockSize(OCCRC4Cryptor *this)
{
  return 0;
}

uint64_t OCCRC2Cryptor::getKeySizeInBytes(OCCRC2Cryptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t OCCRC2Cryptor::getBlockSize(OCCRC2Cryptor *this)
{
  return 8;
}

uint64_t OCCDESCryptor::getKeySizeInBytes(OCCDESCryptor *this)
{
  return 8;
}

uint64_t OCCDESCryptor::getBlockSize(OCCDESCryptor *this)
{
  return 8;
}

uint64_t OCC3DESCryptor::getKeySizeInBytes(OCC3DESCryptor *this)
{
  return 24;
}

uint64_t OCC3DESCryptor::getBlockSize(OCC3DESCryptor *this)
{
  return 8;
}

uint64_t OCCCryptor::getInitializationVectorSize(OCCCryptor *this)
{
  return (*(uint64_t (**)(OCCCryptor *))(*(_QWORD *)this + 8))(this);
}

const char *OCCAESCryptor::getName(OCCAESCryptor *this)
{
  return "AES";
}

void OCCAESCryptor::~OCCAESCryptor(OCCAESCryptor *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCRC4Cryptor::getName(OCCRC4Cryptor *this)
{
  return "RC4";
}

void OCCRC4Cryptor::~OCCRC4Cryptor(OCCRC4Cryptor *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCRC2Cryptor::getName(OCCRC2Cryptor *this)
{
  return "RC2";
}

void OCCRC2Cryptor::~OCCRC2Cryptor(OCCRC2Cryptor *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCDESCryptor::getName(OCCDESCryptor *this)
{
  return "DES";
}

void OCCDESCryptor::~OCCDESCryptor(OCCDESCryptor *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCC3DESCryptor::getName(OCC3DESCryptor *this)
{
  return "3DES";
}

void OCC3DESCryptor::~OCC3DESCryptor(OCC3DESCryptor *this)
{
  JUMPOUT(0x22E2DD408);
}

void OCCEncryptionHeader::~OCCEncryptionHeader(OCCEncryptionHeader *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    MEMORY[0x22E2DD3F0](v1, 0x1000C8077774924);
}

void OCCEncryptionHeader::OCCEncryptionHeader(OCCEncryptionHeader *this, _DWORD *a2, unsigned int a3)
{
  int v5;
  size_t v6;
  void *v7;
  _DWORD *exception;

  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  if (a3 <= 0x23)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v5 = a2[2];
  *(_DWORD *)this = v5;
  *((_DWORD *)this + 1) = a2[3];
  *((_DWORD *)this + 2) = a2[4];
  *((_DWORD *)this + 3) = a2[5];
  *((_DWORD *)this + 4) = a2[6];
  *((_DWORD *)this + 5) = a2[7];
  *((_DWORD *)this + 6) = a2[8];
  if ((v5 - 45) <= 0xFFFFFFC6 && a3 >= 0x2C)
  {
    v6 = (v5 - 32);
    if (v6 < a3 - 44)
    {
      v7 = (void *)operator new[]();
      *((_DWORD *)this + 10) = v6;
      *((_QWORD *)this + 4) = v7;
      memcpy(v7, a2 + 11, v6);
    }
  }
}

void OCCEncryptionHeader::OCCEncryptionHeader(OCCEncryptionHeader *this)
{
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
}

uint64_t OCCEncryptionHeader::getEncryptionVerifier(OCCEncryptionHeader *this, char *a2, unsigned int a3, unsigned int *a4, const void **a5, const void **a6, unsigned int *a7, const void **a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  unint64_t v18;

  v8 = *(_DWORD *)this;
  if ((*(_DWORD *)this + 12) > 0xFFFFFFFB)
    return 0;
  v9 = v8 + 16;
  if (v8 > 0xFFFFFFF3 || v9 >= a3)
    return 0;
  v11 = *(unsigned int *)&a2[*(_DWORD *)this + 12];
  *a4 = v11;
  v12 = v11 + v9;
  if ((v12 + 16) > 0xFFFFFFFB)
    return 0;
  v13 = (v11 + v9);
  v14 = (v12 + 20);
  v15 = HIDWORD(v12) || v13 > 0xFFFFFFEF;
  if (v15 || v14 >= a3)
    return 0;
  v17 = *(unsigned int *)&a2[(v12 + 16)];
  *a7 = v17;
  v18 = v17 + v14;
  if (HIDWORD(v18) || v18 > a3)
    return 0;
  *a5 = &a2[v9];
  *a6 = &a2[v13];
  *a8 = &a2[v14];
  return 1;
}

uint64_t OCCEncryptionHeader::getNewEncryptionVerifier(OCCEncryptionHeader *this, char *a2, unsigned int a3, unsigned int a4, unsigned __int8 **a5, unsigned __int8 **a6, unsigned __int8 **a7)
{
  int EncryptionVerifier;
  uint64_t result;
  void *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned int v23;

  v23 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v19 = 0;
  EncryptionVerifier = OCCEncryptionHeader::getEncryptionVerifier(this, a2, a3, &v23, (const void **)&v22, (const void **)&v21, &v19, (const void **)&v20);
  result = 0;
  if (EncryptionVerifier)
  {
    v15 = v20;
    if ((unint64_t)v20 + a4 - (_QWORD)a2 <= a3)
    {
      result = 0;
      if (v23 >= 0x10 && v19 >= 0x10)
      {
        v16 = (unsigned __int8 *)operator new[]();
        *a5 = v16;
        *(_OWORD *)v16 = *(_OWORD *)v22;
        v17 = (unsigned __int8 *)operator new[]();
        *a6 = v17;
        *(_OWORD *)v17 = *(_OWORD *)v21;
        v18 = (unsigned __int8 *)operator new[]();
        *a7 = v18;
        memcpy(v18, v15, a4);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *OCCEncryptionHeader::initializeForDefaultCryptioAPI(OCCEncryptionHeader *this)
{
  uint64_t v2;
  void *v3;

  *(_OWORD *)this = xmmword_22A4C1430;
  *((_QWORD *)this + 2) = 0x2800008004;
  *((_DWORD *)this + 6) = 1;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_DWORD *)this + 10) = 86;
  v3 = (void *)operator new[]();
  *((_QWORD *)this + 4) = v3;
  return memcpy(v3, "M", *((unsigned int *)this + 10));
}

const void **OCCEncryptionHeader::writeHeader(const void **this, _DWORD *a2)
{
  unsigned int v2;
  size_t v3;

  *a2 = *((_DWORD *)this + 1);
  a2[1] = *((_DWORD *)this + 2);
  a2[2] = *((_DWORD *)this + 3);
  a2[3] = *((_DWORD *)this + 4);
  a2[4] = *((_DWORD *)this + 5);
  v2 = *((_DWORD *)this + 6);
  *((_QWORD *)a2 + 3) = 0;
  a2[5] = v2;
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3)
    return (const void **)memcpy(a2 + 8, this[4], v3);
  return this;
}

BOOL OCCEncryptionHeader::isDocPropInfoEncrypted(OCCEncryptionHeader *this)
{
  return (*((_BYTE *)this + 4) & 8) == 0;
}

_QWORD *OCCHash::createFromName(OCCHash *this, const char *a2)
{
  _QWORD *result;
  void (**v4)(OCCSHA1Hash *__hidden);

  if (!strcmp((const char *)this, "SHA1") || !strcmp((const char *)this, "SHA-1"))
  {
    result = (_QWORD *)operator new();
    v4 = &off_24F3A71F0;
  }
  else if (!strcmp((const char *)this, "SHA256") || !strcmp((const char *)this, "SHA-256"))
  {
    result = (_QWORD *)operator new();
    v4 = &off_24F3A7250;
  }
  else if (!strcmp((const char *)this, "SHA384") || !strcmp((const char *)this, "SHA-384"))
  {
    result = (_QWORD *)operator new();
    v4 = &off_24F3A72A0;
  }
  else if (!strcmp((const char *)this, "SHA512") || !strcmp((const char *)this, "SHA-512"))
  {
    result = (_QWORD *)operator new();
    v4 = &off_24F3A72F0;
  }
  else if (!strcmp((const char *)this, "MD5"))
  {
    result = (_QWORD *)operator new();
    v4 = &off_24F3A7340;
  }
  else if (!strcmp((const char *)this, "MD4"))
  {
    result = (_QWORD *)operator new();
    v4 = &off_24F3A7390;
  }
  else
  {
    if (strcmp((const char *)this, "MD2"))
      return 0;
    result = (_QWORD *)operator new();
    v4 = &off_24F3A73E0;
  }
  *result = v4;
  return result;
}

BOOL OCCSHA1Hash::computeHash(OCCSHA1Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA1(data, len, md) != 0;
}

uint64_t OCCSHA1Hash::getOutputSize(OCCSHA1Hash *this)
{
  return 20;
}

BOOL OCCSHA256Hash::computeHash(OCCSHA256Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA256(data, len, md) != 0;
}

uint64_t OCCSHA256Hash::getOutputSize(OCCSHA256Hash *this)
{
  return 32;
}

BOOL OCCSHA384Hash::computeHash(OCCSHA384Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA384(data, len, md) != 0;
}

uint64_t OCCSHA384Hash::getOutputSize(OCCSHA384Hash *this)
{
  return 48;
}

BOOL OCCSHA512Hash::computeHash(OCCSHA512Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA512(data, len, md) != 0;
}

uint64_t OCCSHA512Hash::getOutputSize(OCCSHA512Hash *this)
{
  return 64;
}

BOOL OCCMD5Hash::computeHash(OCCMD5Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_MD5(data, len, md) != 0;
}

uint64_t OCCMD5Hash::getOutputSize(OCCMD5Hash *this)
{
  return 16;
}

BOOL OCCMD4Hash::computeHash(OCCMD4Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_MD4(data, len, md) != 0;
}

uint64_t OCCMD4Hash::getOutputSize(OCCMD4Hash *this)
{
  return 16;
}

BOOL OCCMD2Hash::computeHash(OCCMD2Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_MD2(data, len, md) != 0;
}

uint64_t OCCMD2Hash::getOutputSize(OCCMD2Hash *this)
{
  return 16;
}

void OCCSHA1Hash::~OCCSHA1Hash(OCCSHA1Hash *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCSHA1Hash::getName(OCCSHA1Hash *this)
{
  return "SHA1";
}

void OCCSHA256Hash::~OCCSHA256Hash(OCCSHA256Hash *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCSHA256Hash::getName(OCCSHA256Hash *this)
{
  return "SHA-256";
}

void OCCSHA384Hash::~OCCSHA384Hash(OCCSHA384Hash *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCSHA384Hash::getName(OCCSHA384Hash *this)
{
  return "SHA-384";
}

void OCCSHA512Hash::~OCCSHA512Hash(OCCSHA512Hash *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCSHA512Hash::getName(OCCSHA512Hash *this)
{
  return "SHA-512";
}

void OCCMD5Hash::~OCCMD5Hash(OCCMD5Hash *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCMD5Hash::getName(OCCMD5Hash *this)
{
  return "MD5";
}

void OCCMD4Hash::~OCCMD4Hash(OCCMD4Hash *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCMD4Hash::getName(OCCMD4Hash *this)
{
  return "MD4";
}

void OCCMD2Hash::~OCCMD2Hash(OCCMD2Hash *this)
{
  JUMPOUT(0x22E2DD408);
}

const char *OCCMD2Hash::getName(OCCMD2Hash *this)
{
  return "MD2";
}

void OCCRC4CryptoKey::~OCCRC4CryptoKey(OCCCryptoKey *this)
{
  void **var0;

  this->var0 = (void **)&off_24F3A7430;
  var0 = this[1].var0;
  if (var0)
    MEMORY[0x22E2DD3F0](var0, 0x1000C8077774924);
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  OCCRC4CryptoKey::~OCCRC4CryptoKey(this);
  JUMPOUT(0x22E2DD408);
}

OCCRC4CryptoKey *OCCRC4CryptoKey::create(OCCRC4CryptoKey *this, const void *a2)
{
  OCCRC4CryptoKey *v2;
  unsigned __int8 *v4;
  char *v5;
  char *v6;

  if (a2 < 0x34)
    return 0;
  v4 = (unsigned __int8 *)operator new[]();
  *(_OWORD *)v4 = *(_OWORD *)((char *)this + 4);
  v5 = (char *)operator new[]();
  *(_OWORD *)v5 = *(_OWORD *)((char *)this + 20);
  v6 = (char *)operator new[]();
  *(_OWORD *)v6 = *(_OWORD *)((char *)this + 36);
  v2 = (OCCRC4CryptoKey *)operator new();
  OCCRC4CryptoKey::OCCRC4CryptoKey(v2, v4, v5, v6);
  return v2;
}

void sub_22A3B79D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1091C40001E8824);
  _Unwind_Resume(a1);
}

void OCCRC4CryptoKey::OCCRC4CryptoKey(OCCRC4CryptoKey *this, unsigned __int8 *a2, char *a3, char *a4)
{
  _QWORD *v5;

  OCCCryptoKey::OCCCryptoKey((OCCCryptoKey *)this, a3, a4, 0x10u, 0x10u, 0x10u);
  *v5 = &off_24F3A7430;
  v5[6] = a2;
  v5[7] = &off_24F3A7340;
  OCCRC4Cryptor::OCCRC4Cryptor((OCCRC4Cryptor *)(v5 + 8), 16);
}

void sub_22A3B7A5C(_Unwind_Exception *a1)
{
  OCCCryptoKey *v1;

  OCCCryptoKey::~OCCCryptoKey(v1);
  _Unwind_Resume(a1);
}

uint64_t OCCRC4CryptoKey::encryptionInfo(OCCRC4CryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  uint64_t v5;
  _OWORD *v6;

  *a2 = 0;
  *a3 = 0;
  if (!*((_QWORD *)this + 6) || !*((_QWORD *)this + 2) || !*((_QWORD *)this + 3))
    return 0;
  *a3 = 52;
  v5 = operator new[]();
  *a2 = (unsigned __int8 *)v5;
  *(_DWORD *)v5 = 65537;
  *(_OWORD *)(v5 + 4) = *(_OWORD *)*((_QWORD *)this + 6);
  v6 = (_OWORD *)*((_QWORD *)this + 3);
  *(_OWORD *)(v5 + 20) = *(_OWORD *)*((_QWORD *)this + 2);
  *(_OWORD *)(v5 + 36) = *v6;
  return 1;
}

BOOL OCCRC4CryptoKey::isVersionValid(OCCRC4CryptoKey *this, int a2)
{
  return (_DWORD)this == 1 && a2 == 1;
}

uint64_t OCCRC4CryptoKey::getSeedSize(OCCRC4CryptoKey *this)
{
  return 9;
}

uint64_t OCCRC4CryptoKey::computeKeySeed(OCCRC4CryptoKey *this, const void *a2, CC_LONG a3, char *a4)
{
  OCCMD5Hash *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  size_t v10;
  _QWORD v12[2];
  _OWORD data[21];
  _BYTE v14[21];
  unsigned __int8 md[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)md = 0;
  v16 = 0;
  v6 = (OCCRC4CryptoKey *)((char *)this + 56);
  OCCMD5Hash::computeHash((OCCRC4CryptoKey *)((char *)this + 56), a2, a3, md);
  v7 = 0;
  *(_DWORD *)v14 = *(_DWORD *)md;
  v14[4] = md[4];
  *(_OWORD *)&v14[5] = *(_OWORD *)*((_QWORD *)this + 6);
  memset(data, 0, sizeof(data));
  do
  {
    v8 = (char *)data + v7;
    *(_OWORD *)v8 = *(_OWORD *)v14;
    *(_QWORD *)(v8 + 13) = *(_QWORD *)&v14[13];
    v7 += 21;
  }
  while (v7 != 336);
  v12[0] = 0;
  v12[1] = 0;
  OCCMD5Hash::computeHash(v6, data, 0x150u, (unsigned __int8 *)v12);
  v9 = (**(uint64_t (***)(OCCRC4CryptoKey *))this)(this);
  if (v9 >= 6)
    v10 = v9 - 5;
  else
    v10 = 0;
  bzero(a4 + 5, v10);
  *(_DWORD *)a4 = v12[0];
  a4[4] = BYTE4(v12[0]);
  return 1;
}

double OCCRC4CryptoKey::decryptVerificationInfo(OCCRC4CryptoKey *this, const void *a2, const void *a3, _OWORD *a4, _OWORD *a5)
{
  _OWORD *v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v7 = (_OWORD *)*((_QWORD *)this + 3);
  v12[0] = *(_OWORD *)*((_QWORD *)this + 2);
  v12[1] = *v7;
  if (OCCCryptor::decrypt((OCCRC4CryptoKey *)((char *)this + 64), a2, 0, v12, 0x20u, &v10, 0x20u))
  {
    result = *(double *)&v10;
    v9 = v11;
    *a4 = v10;
    *a5 = v9;
  }
  return result;
}

uint64_t OCCRC4CryptoKey::getCipherKeySize(OCCRC4CryptoKey *this)
{
  return 16;
}

uint64_t OCCRC4CryptoKey::getBlockKeySize(OCCRC4CryptoKey *this)
{
  return 4;
}

uint64_t OCCRC4CryptoKey::computeVerifierBlockKey(OCCRC4CryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCRC4CryptoKey *))(*(_QWORD *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

uint64_t OCCRC4CryptoKey::computeVerifierHashBlockKey(OCCRC4CryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCRC4CryptoKey *))(*(_QWORD *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

BOOL OCCRC4CryptoKey::deriveKey(OCCRC4CryptoKey *this, const void *a2, _OWORD *a3)
{
  uint64_t v3;
  unsigned int v7;
  unsigned __int8 md[16];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v7 = (*(uint64_t (**)(OCCRC4CryptoKey *))(*(_QWORD *)this + 32))(this);
    memcpy((void *)(v3 + 5), a2, v7);
    memset(md, 0, sizeof(md));
    OCCMD5Hash::computeHash((OCCRC4CryptoKey *)((char *)this + 56), *((const void **)this + 1), 9u, md);
    *a3 = *(_OWORD *)md;
  }
  return v3 != 0;
}

uint64_t OCCRC4CryptoKey::deriveDecryptionKey(OCCRC4CryptoKey *this, int a2, void *a3, unsigned __int8 **a4)
{
  int v5;

  v5 = a2;
  *a4 = 0;
  return (*(uint64_t (**)(OCCRC4CryptoKey *, int *, void *))(*(_QWORD *)this + 56))(this, &v5, a3);
}

uint64_t OCCRC4CryptoKey::decryptBlockUsingDecryptionKey(OCCRC4CryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  if (a6)
    return OCCCryptor::decrypt((OCCRC4CryptoKey *)((char *)this + 64), a2, 0, a4, a5, a6, a5);
  else
    return 0;
}

uint64_t OCCRC4CryptoKey::encryptBlockUsingEncryptionKey(OCCRC4CryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  if (a6)
    return OCCCryptor::encrypt((OCCRC4CryptoKey *)((char *)this + 64), a2, 0, a4, a5, a6, a5);
  else
    return 0;
}

uint64_t OCCRC4CryptoKey::getHashAlgorithm(OCCRC4CryptoKey *this)
{
  return (uint64_t)this + 56;
}

OCCSegmenter *OCCRC4CryptoKey::createXmlSegmenter(OCCRC4CryptoKey *this)
{
  OCCSegmenter *v1;

  v1 = (OCCSegmenter *)operator new();
  OCCSegmenter::OCCSegmenter(v1, 512);
  *(_QWORD *)v1 = &off_24F3A5B80;
  return v1;
}

void sub_22A3B7EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

void OCCSegmenter::OCCSegmenter(OCCSegmenter *this, int a2)
{
  *(_QWORD *)this = &unk_24F3A74D8;
  *((_DWORD *)this + 2) = a2;
}

BOOL OCCSegmenter::writeIntoStream(OCCSegmenter *this, const void *a2, uint64_t a3, void *a4)
{
  int v4;
  int v6;

  v4 = (int)a2;
  v6 = (int)a2;
  (*(void (**)(uint64_t, OCCSegmenter *, int *, void *))(*(_QWORD *)a3 + 184))(a3, this, &v6, a4);
  return v6 == v4;
}

BOOL OCCSegmenter::writeIntoFileHandle(OCCSegmenter *this, size_t __nitems, FILE *__stream, void *a4)
{
  return fwrite(this, 1uLL, __nitems, __stream) == __nitems;
}

uint64_t OCCSegmenter::processSegmentsIntoGenericTarget(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, int a5, unsigned int a6, void *a7, unsigned int (*a8)(void *, uint64_t, void *))
{
  int v10;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v27;
  void *__p;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;

  v10 = a3;
  SsrwOOStream::seekFromStart(a2, a3);
  v13 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 6))(a2) - v10;
  if (v13 < a6)
    return 0;
  v14 = *((_DWORD *)this + 2);
  if (v14 + a6 <= v13)
    return 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if (v14)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v31, v14);
    v15 = *((_DWORD *)this + 2);
    __p = 0;
    v29 = 0;
    v30 = 0;
    if (v15)
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v15);
      LODWORD(v16) = *((_DWORD *)this + 2);
    }
    else
    {
      LODWORD(v16) = 0;
    }
  }
  else
  {
    LODWORD(v16) = 0;
    __p = 0;
    v29 = 0;
    v30 = 0;
  }
  if (v13 >= a6)
    v19 = a6;
  else
    v19 = v13;
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    LODWORD(v22) = v16;
    while (1)
    {
      v23 = *((_DWORD *)this + 2) + v21;
      v22 = v23 >= v13 ? v13 - v21 : v22;
      v16 = v23 >= a6 ? a6 - v21 : v16;
      v27 = v22;
      (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, v31, &v27);
      if (v27 != (_DWORD)v22)
        break;
      if (a5)
      {
        if ((OCCCryptoKey::decryptBlock(a4, v31, v22, v20, __p) & 1) == 0)
          break;
      }
      else if (!OCCCryptoKey::encryptBlock(a4, v31, v22, v20, __p))
      {
        break;
      }
      if (!a8(__p, v16, a7))
        break;
      v20 = (**(uint64_t (***)(OCCSegmenter *, uint64_t))this)(this, v20);
      v21 += v22;
      if (v21 >= v19)
        goto LABEL_28;
    }
    v17 = 0;
  }
  else
  {
LABEL_28:
    v17 = 1;
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  return v17;
}

void sub_22A3B8198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t OCCSegmenter::encryptSegmentsFromFileHandleIntoStream(OCCSegmenter *this, __sFILE *a2, unsigned int a3, OCCCryptoKey *a4, SsrwOOStream *a5)
{
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const OCCCryptoKey *v16;
  uint64_t v17;
  unsigned int DataBlockSize;
  float v19;
  void *__p;
  void *v22;
  uint64_t v23;
  void *__ptr;
  void *v25;
  uint64_t v26;
  int v27;

  if (!a3)
    return 0;
  __ptr = 0;
  v25 = 0;
  v26 = 0;
  v10 = *((_DWORD *)this + 2);
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__ptr, v10);
    v11 = *((_DWORD *)this + 2);
    __p = 0;
    v22 = 0;
    v23 = 0;
    if (v11)
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v11);
      LODWORD(v12) = *((_DWORD *)this + 2);
    }
    else
    {
      LODWORD(v12) = 0;
    }
  }
  else
  {
    LODWORD(v12) = 0;
    __p = 0;
    v22 = 0;
    v23 = 0;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v12 = *((_DWORD *)this + 2) + v15 >= a3 ? a3 - v15 : v12;
    if (!fread(__ptr, v12, 1uLL, a2))
      break;
    v17 = v12;
    if (v12 < *((_DWORD *)this + 2))
    {
      v17 = v12;
      if (OCCAgileCryptoKey::isAgile(a4, v16))
      {
        DataBlockSize = OCCAgileCryptoKey::getDataBlockSize((OCCAgileCryptoKey *)a4);
        v17 = v12;
        if (DataBlockSize)
        {
          v19 = (float)v12 / (float)DataBlockSize;
          if (v19 <= (float)v19)
            v17 = v12;
          else
            v17 = DataBlockSize + DataBlockSize * v19;
        }
      }
    }
    if (!OCCCryptoKey::encryptBlock(a4, __ptr, v17, v14, __p))
      break;
    v27 = v17;
    (*((void (**)(SsrwOOStream *, void *, int *))a5->var0 + 23))(a5, __p, &v27);
    if (v27 != (_DWORD)v17)
      break;
    v14 = (**(uint64_t (***)(OCCSegmenter *, uint64_t))this)(this, v14);
    v15 += v12;
    if (v15 >= a3)
    {
      v13 = 1;
      goto LABEL_24;
    }
  }
  v13 = 0;
LABEL_24:
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (__ptr)
  {
    v25 = __ptr;
    operator delete(__ptr);
  }
  return v13;
}

void sub_22A3B839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t OCCSegmenter::decryptSegmentsIntoFileHandle(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, unsigned int a5, __sFILE *a6)
{
  return OCCSegmenter::processSegmentsIntoGenericTarget(this, a2, a3, a4, 1, a5, a6, (unsigned int (*)(void *, uint64_t, void *))OCCSegmenter::writeIntoFileHandle);
}

uint64_t OCCSegmenter::decryptSegmentsIntoStream(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, unsigned int a5, SsrwOOStream *a6)
{
  SsrwOOStream::seekFromStart(a6, 0);
  return OCCSegmenter::processSegmentsIntoGenericTarget(this, a2, a3, a4, 1, a5, a6, (unsigned int (*)(void *, uint64_t, void *))OCCSegmenter::writeIntoStream);
}

uint64_t OCCSegmenter::encryptSegmentsIntoStream(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, unsigned int a5, SsrwOOStream *a6)
{
  SsrwOOStream::seekFromStart(a6, 0);
  return OCCSegmenter::processSegmentsIntoGenericTarget(this, a2, a3, a4, 0, a5, a6, (unsigned int (*)(void *, uint64_t, void *))OCCSegmenter::writeIntoStream);
}

void OCCStandardCryptoKey::~OCCStandardCryptoKey(OCCCryptoKey *this)
{
  void **var0;
  uint64_t v3;

  this->var0 = (void **)&off_24F3A7500;
  var0 = this[1].var0;
  if (var0)
    MEMORY[0x22E2DD3F0](var0, 0x1000C8077774924);
  v3 = *(_QWORD *)&this[1].var6;
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  OCCStandardCryptoKey::~OCCStandardCryptoKey(this);
  JUMPOUT(0x22E2DD408);
}

void OCCStandardCryptoKey::OCCStandardCryptoKey(OCCStandardCryptoKey *this, unsigned __int8 *a2, char *a3, char *a4, unsigned int a5, uint64_t a6)
{
  _QWORD *v9;
  _DWORD *exception;

  OCCCryptoKey::OCCCryptoKey((OCCCryptoKey *)this, a3, a4, 0x10u, a5, 0x10u);
  *v9 = &off_24F3A7500;
  v9[6] = a2;
  OCCAESCryptor::OCCAESCryptor(v9 + 7, a6, 0);
  *((_QWORD *)this + 10) = &off_24F3A71F0;
  *((_QWORD *)this + 11) = 0;
  if (a6 > 0x20 || ((1 << a6) & 0x101010000) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
}

void sub_22A3B8618(_Unwind_Exception *a1)
{
  OCCCryptoKey *v1;

  OCCCryptoKey::~OCCCryptoKey(v1);
  _Unwind_Resume(a1);
}

OCCStandardCryptoKey *OCCStandardCryptoKey::create(OCCStandardCryptoKey *this, const void *a2)
{
  unsigned int v2;
  OCCStandardCryptoKey *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _BYTE v9[20];
  unsigned int v10;

  v2 = a2;
  OCCEncryptionHeader::OCCEncryptionHeader((OCCEncryptionHeader *)v9, this, a2);
  if ((v10 & 7) != 0
    || (v7 = 0,
        v8 = 0,
        v6 = 0,
        (OCCEncryptionHeader::getNewEncryptionVerifier((OCCEncryptionHeader *)v9, (char *)this, v2, 0x20u, &v8, &v7, &v6) & 1) == 0))
  {
    v4 = 0;
  }
  else
  {
    v4 = (OCCStandardCryptoKey *)operator new();
    OCCStandardCryptoKey::OCCStandardCryptoKey(v4, v8, (char *)v7, (char *)v6, 0x20u, v10 >> 3);
  }
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)v9);
  return v4;
}

void sub_22A3B86E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x22E2DD408](v5, 0x1091C40A2FA867FLL);
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)va);
  _Unwind_Resume(a1);
}

BOOL OCCStandardCryptoKey::isVersionValid(OCCStandardCryptoKey *this, int a2)
{
  return ((_DWORD)this - 3) < 2 && a2 == 2;
}

uint64_t OCCStandardCryptoKey::getSeedSize(OCCStandardCryptoKey *this)
{
  return OCCSHA1Hash::getOutputSize((OCCStandardCryptoKey *)((char *)this + 80));
}

BOOL OCCStandardCryptoKey::computeKeySeed(OCCStandardCryptoKey *this, const void *a2, unsigned int a3, unsigned __int8 *a4)
{
  int v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  _BOOL8 v12;
  void *__p;
  void *v15;
  uint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  v8 = (*(uint64_t (**)(OCCStandardCryptoKey *))(*(_QWORD *)this + 32))(this);
  v9 = (v8 + 20);
  if (v8 != -20)
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v9);
  v10 = (const void *)*((_QWORD *)this + 6);
  v11 = (*(uint64_t (**)(OCCStandardCryptoKey *, uint64_t))(*(_QWORD *)this + 88))(this, v9);
  v12 = (OCCAgileCryptoKey::computeInputForHashFinalWithZeroBlockKey(a2, a3, v10, 0x10u, v11, 50000, __p, (int)v15 - (int)__p) & 1) != 0&& OCCSHA1Hash::computeHash((OCCStandardCryptoKey *)((char *)this + 80), __p, (_DWORD)v15 - (_DWORD)__p, a4);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_22A3B8814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OCCStandardCryptoKey::decryptVerificationInfo(OCCStandardCryptoKey *this, const void *a2, const void *a3, void *a4, void *a5)
{
  OCCCryptor *v8;
  uint64_t result;
  const void *v10;
  unsigned int v11;
  unsigned int OutputSize;

  v8 = (OCCStandardCryptoKey *)((char *)this + 56);
  result = OCCCryptor::decrypt((OCCStandardCryptoKey *)((char *)this + 56), a2, 0, *((const void **)this + 2), *((_DWORD *)this + 8), a4, *((_DWORD *)this + 10));
  if ((_DWORD)result)
  {
    v10 = (const void *)*((_QWORD *)this + 3);
    v11 = *((_DWORD *)this + 9);
    OutputSize = OCCSHA1Hash::getOutputSize((OCCStandardCryptoKey *)((char *)this + 80));
    return OCCCryptor::decrypt(v8, a3, 0, v10, v11, a5, OutputSize);
  }
  return result;
}

uint64_t OCCStandardCryptoKey::getCipherKeySize(OCCStandardCryptoKey *this)
{
  return OCCAESCryptor::getKeySizeInBytes((OCCStandardCryptoKey *)((char *)this + 56));
}

uint64_t OCCStandardCryptoKey::getBlockKeySize(OCCStandardCryptoKey *this)
{
  return 4;
}

uint64_t OCCStandardCryptoKey::computeVerifierBlockKey(OCCStandardCryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCStandardCryptoKey *))(*(_QWORD *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

uint64_t OCCStandardCryptoKey::computeVerifierHashBlockKey(OCCStandardCryptoKey *this, void *a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(OCCStandardCryptoKey *))(*(_QWORD *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

BOOL OCCStandardCryptoKey::deriveKey(OCCStandardCryptoKey *this, const void *a2, void *a3)
{
  uint64_t v3;
  unsigned int v6;
  const void *v7;
  unsigned int KeySizeInBytes;
  uint64_t i;
  unint64_t v10;
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *data;
  void *v19;
  uint64_t v20;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v6 = (**(uint64_t (***)(OCCStandardCryptoKey *, const void *))this)(this, a2);
    v7 = (const void *)*((_QWORD *)this + 11);
    if (v7)
    {
      KeySizeInBytes = OCCAESCryptor::getKeySizeInBytes((OCCStandardCryptoKey *)((char *)this + 56));
      memcpy(a3, v7, KeySizeInBytes);
    }
    data = 0;
    v19 = 0;
    v20 = 0;
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&data, 0x40u);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v15, 0x40u);
    for (i = 0; i != 20; ++i)
    {
      *((_BYTE *)data + i) = *(_BYTE *)(v3 + i) ^ 0x36;
      *((_BYTE *)v15 + i) = *(_BYTE *)(v3 + i) ^ 0x5C;
    }
    memset((char *)data + v6, 54, 64 - v6);
    memset((char *)v15 + v6, 92, 64 - v6);
    __p = 0;
    v13 = 0;
    v14 = 0;
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, 0x28u);
    OCCSHA1Hash::computeHash((OCCStandardCryptoKey *)((char *)this + 80), data, (_DWORD)v19 - (_DWORD)data, (unsigned __int8 *)__p);
    OCCSHA1Hash::computeHash((OCCStandardCryptoKey *)((char *)this + 80), data, (_DWORD)v19 - (_DWORD)data, (unsigned __int8 *)__p + 20);
    OCCAESCryptor::getKeySizeInBytes((OCCStandardCryptoKey *)((char *)this + 56));
    v10 = 0;
    *((_QWORD *)this + 11) = operator new[]();
    while (v10 < OCCAESCryptor::getKeySizeInBytes((OCCStandardCryptoKey *)((char *)this + 56)))
    {
      *(_BYTE *)(*((_QWORD *)this + 11) + v10) = *((_BYTE *)__p + v10);
      *((_BYTE *)a3 + v10) = *((_BYTE *)__p + v10);
      ++v10;
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (data)
    {
      v19 = data;
      operator delete(data);
    }
  }
  return v3 != 0;
}

void sub_22A3B8B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t OCCStandardCryptoKey::deriveDecryptionKey(OCCStandardCryptoKey *this, unsigned int a2, void *a3, unsigned __int8 **a4)
{
  *a4 = 0;
  return (*(uint64_t (**)(OCCStandardCryptoKey *, _QWORD, void *))(*(_QWORD *)this + 56))(this, 0, a3);
}

uint64_t OCCStandardCryptoKey::decryptBlockUsingDecryptionKey(OCCStandardCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::decrypt((OCCStandardCryptoKey *)((char *)this + 56), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCStandardCryptoKey::encryptBlockUsingEncryptionKey(OCCStandardCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::encrypt((OCCStandardCryptoKey *)((char *)this + 56), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCStandardCryptoKey::getHashAlgorithm(OCCStandardCryptoKey *this)
{
  return (uint64_t)this + 80;
}

OCCSegmenter *OCCStandardCryptoKey::createXmlSegmenter(OCCStandardCryptoKey *this)
{
  OCCSegmenter *v1;

  v1 = (OCCSegmenter *)operator new();
  OCCSegmenter::OCCSegmenter(v1, 4096);
  *(_QWORD *)v1 = &off_24F3A75A8;
  return v1;
}

void sub_22A3B8C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t OCCStandardCryptoKey::encryptionInfo(OCCStandardCryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  return 0;
}

uint64_t OCCStandardDecryptionSegmenter::getNextSegmentNumber(OCCStandardDecryptionSegmenter *this)
{
  return 0;
}

void OCCStandardDecryptionSegmenter::~OCCStandardDecryptionSegmenter(OCCStandardDecryptionSegmenter *this)
{
  JUMPOUT(0x22E2DD408);
}

void OCCStreamer::OCCStreamer(OCCStreamer *this, OCCCryptoKey *a2, const char *__s)
{
  this->var0 = (void **)off_24F3A75E8;
  this->var1 = a2;
  this->var2 = 0;
  OCCStreamer::setBaseStringForOutputFilename(this, __s);
}

char *OCCStreamer::setBaseStringForOutputFilename(OCCStreamer *this, const char *__s)
{
  char *result;
  char *v5;

  result = this->var2;
  if (result)
    result = (char *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  this->var2 = 0;
  if (__s)
  {
    strlen(__s);
    v5 = (char *)operator new[]();
    this->var2 = v5;
    return strcpy(v5, __s);
  }
  return result;
}

void OCCStreamer::~OCCStreamer(OCCStreamer *this)
{
  OCCCryptoKey *var1;
  char *var2;

  this->var0 = (void **)off_24F3A75E8;
  var1 = this->var1;
  if (var1)
    (*((void (**)(OCCCryptoKey *))var1->var0 + 13))(var1);
  var2 = this->var2;
  if (var2)
    MEMORY[0x22E2DD3F0](var2, 0x1000C8077774924);
}

uint64_t OCCStreamer::openInputBuf(OCCStreamer *this, const void **a2, SsrwOORootStorage **a3, SsrwOORootStorage **a4)
{
  unsigned int v5;
  SsrwOORootStorage *v7;

  v5 = a2;
  v7 = (SsrwOORootStorage *)operator new();
  SsrwOORootStorage::SsrwOORootStorage(v7);
  *a3 = v7;
  SsrwOORootStorage::openInBuf(v7, (const void **)&this->var0, v5);
  return 1;
}

void sub_22A3B8DC8(void *a1)
{
  SsrwOORootStorage **v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1020C400B9F2F10);
  __cxa_begin_catch(a1);
  if (*v1)
  {
    SsrwOORootStorage::~SsrwOORootStorage(*v1);
    MEMORY[0x22E2DD408]();
  }
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x22A3B8DB8);
}

uint64_t OCCStreamer::openInputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **__s, const char *a4)
{
  a2->var0 = (_Storage *)SsrwOOStorage::openStream((SsrwOOStorage *)this, (const char *)__s);
  return 1;
}

void sub_22A3B8E50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3B8E44);
}

uint64_t OCCStreamer::openInputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **a3, const unsigned __int16 *a4)
{
  a2->var0 = (_Storage *)SsrwOOStorage::openStream((SsrwOOStorage *)this, (const unsigned __int16 *)a3);
  return 1;
}

void sub_22A3B8E8C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3B8E80);
}

uint64_t OCCStreamer::openOutputRootStorage(OCCStreamer *this, __sFILE *a2, SsrwOORootStorage *a3, int8x8_t a4)
{
  SsrwOOStorage *v6;
  SsrwOOStgInfo *Info;
  _SsrwOO_GUID v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  SsrwOORootStorage::createInStream(a3, a2, a4);
  v6 = (SsrwOOStorage *)(*((uint64_t (**)(OCCStreamer *))this->var0 + 3))(this);
  Info = SsrwOOStorage::getInfo(v6);
  SsrwOOStgInfo::getCLSID(Info, &v9);
  SsrwOOStorage::setClass((SsrwOOStorage *)a3, &v9);
  return 1;
}

void sub_22A3B8F24(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x22A3B8EF8);
  }
  _Unwind_Resume(a1);
}

uint64_t OCCStreamer::openOutputRootStorageWithCLSID(OCCStreamer *this, __sFILE *a2, _SsrwOO_GUID a3, SsrwOORootStorage *a4, int8x8_t a5)
{
  _SsrwOO_GUID v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  SsrwOORootStorage::createRWStorageInStream(a4, a2, a5);
  SsrwOOStorage::setClass((SsrwOOStorage *)a4, &v7);
  return 1;
}

void sub_22A3B8FB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x22A3B8F84);
  }
  _Unwind_Resume(a1);
}

uint64_t OCCStreamer::openOutputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **a3, const char *__s)
{
  *a3 = (SsrwOOStream *)SsrwOOStorage::createStream(a2, __s);
  return 1;
}

{
  *a3 = (SsrwOOStream *)SsrwOOStorage::createStream(a2, __s);
  return 1;
}

void sub_22A3B8FF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3B8FECLL);
}

void sub_22A3B9038(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3B902CLL);
}

uint64_t OCCStreamer::openOutputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **a3, unsigned __int16 *a4)
{
  *a3 = (SsrwOOStream *)SsrwOOStorage::createStream(a2, a4);
  return 1;
}

void sub_22A3B9078(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3B906CLL);
}

uint64_t OCCStreamer::openOutputStorage(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStorage **a3, const char *__s)
{
  *a3 = (SsrwOOStorage *)SsrwOOStorage::createStorage(a2, __s);
  return 1;
}

void sub_22A3B90B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3B90ACLL);
}

uint64_t OCCStreamer::openOutputStorage(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStorage **a3, unsigned __int16 *a4)
{
  *a3 = (SsrwOOStorage *)SsrwOOStorage::createStorage(a2, a4);
  return 1;
}

void sub_22A3B90F8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A3B90ECLL);
}

char *OCCUtilities::resizeData(char *this, char *a2, unint64_t a3, unint64_t __c, _BYTE *a5, void *a6)
{
  char *v6;
  _BYTE *v7;
  char v8;
  BOOL v9;
  size_t v10;

  if ((unint64_t)a2 >= a3)
    v6 = (char *)a3;
  else
    v6 = a2;
  if (v6)
  {
    v7 = a5;
    do
    {
      v8 = *this++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  v9 = a3 > (unint64_t)a2;
  v10 = a3 - (_QWORD)a2;
  if (v9)
    return (char *)memset(&a2[(_QWORD)a5], __c, v10);
  return this;
}

_BYTE *OCCUtilities::randomizeData(_BYTE *this, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  int v5;

  if (this)
  {
    v2 = a2;
    if (a2)
    {
      v3 = this;
      this = (_BYTE *)random();
      v4 = 0;
      v5 = (int)this;
      do
      {
        *v3 = *((_BYTE *)&v5 + v4++);
        if (v4 == 4)
        {
          this = (_BYTE *)random();
          v4 = 0;
          v5 = (int)this;
        }
        ++v3;
        --v2;
      }
      while (v2);
    }
  }
  return this;
}

void OCCXmlStreamer::~OCCXmlStreamer(OCCStreamer *this)
{
  void **var0;
  OCCCryptoKey *var1;
  void **v4;
  char *var2;

  this->var0 = (void **)&off_24F3A7638;
  var0 = this[1].var0;
  if (var0)
    (*((void (**)(void **))*var0 + 2))(var0);
  var1 = this[1].var1;
  if (var1)
  {
    SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)var1);
    MEMORY[0x22E2DD408]();
  }
  v4 = this[2].var0;
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C8077774924);
  var2 = this[1].var2;
  if (var2)
    fclose((FILE *)var2);
  OCCStreamer::~OCCStreamer(this);
}

{
  OCCXmlStreamer::~OCCXmlStreamer(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t OCCXmlStreamer::getInputStorage(OCCXmlStreamer *this)
{
  return *((_QWORD *)this + 4);
}

OCCStreamer *OCCXmlStreamer::createUsingRootStorage(OCCStreamer *a1, _DWORD *a2, uint64_t a3, const char *a4)
{
  const void *v6;
  OCCCryptoAPICryptoKey *UsingEncryptionInfoStream;
  OCCCryptoKey *v8;
  uint64_t v9;
  void **v10;
  OCCStreamer *v11;
  SsrwOOStream *v13;

  *a2 = 8011;
  v13 = 0;
  if (OCCStreamer::openInputStream(a1, (SsrwOOStorage *)&v13, (SsrwOOStream **)"EncryptionInfo", a4))
  {
    *a2 = 8003;
    v6 = (const void *)(*((uint64_t (**)(SsrwOOStream *))v13->var0 + 6))(v13);
    UsingEncryptionInfoStream = OCCCryptoKey::createUsingEncryptionInfoStream((OCCCryptoKey *)1, v13, 0, v6);
    if (UsingEncryptionInfoStream)
    {
      v8 = (OCCCryptoKey *)UsingEncryptionInfoStream;
      v9 = (*(uint64_t (**)(OCCCryptoAPICryptoKey *))(*(_QWORD *)UsingEncryptionInfoStream + 112))(UsingEncryptionInfoStream);
      if (v9)
      {
        v10 = (void **)v9;
        if (v13)
          (*((void (**)(SsrwOOStream *))v13->var0 + 1))(v13);
        v11 = (OCCStreamer *)operator new();
        OCCStreamer::OCCStreamer(v11, v8, 0);
        v11->var0 = (void **)&off_24F3A7638;
        v11[1].var0 = v10;
        v11[1].var1 = (OCCCryptoKey *)a1;
        v11[1].var2 = 0;
        v11[2].var0 = 0;
        return v11;
      }
      (*((void (**)(OCCCryptoKey *))v8->var0 + 13))(v8);
    }
  }
  if (v13)
    (*((void (**)(SsrwOOStream *))v13->var0 + 1))(v13);
  return 0;
}

void sub_22A3B9384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0xB1C40F6989E03);
  _Unwind_Resume(a1);
}

void *OCCXmlStreamer::createUsingInputBuffer(OCCStreamer *a1, const void **a2, _DWORD *a3, SsrwOORootStorage **a4)
{
  uint64_t v5;
  const char *v6;
  void *result;
  SsrwOORootStorage *v8;

  v8 = 0;
  *a3 = 8001;
  if (!OCCStreamer::openInputBuf(a1, a2, &v8, a4)
    || (result = OCCXmlStreamer::createUsingRootStorage((OCCStreamer *)v8, a3, v5, v6)) == 0)
  {
    result = v8;
    if (v8)
    {
      SsrwOORootStorage::~SsrwOORootStorage(v8);
      MEMORY[0x22E2DD408]();
      return 0;
    }
  }
  return result;
}

char *OCCXmlStreamer::setDefaultPassphrase(OCCXmlStreamer *this, const char *__s)
{
  char *result;
  char *v5;

  result = (char *)*((_QWORD *)this + 6);
  if (result)
    result = (char *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  if (__s)
  {
    strlen(__s);
    v5 = (char *)operator new[]();
    *((_QWORD *)this + 6) = v5;
    return strcpy(v5, __s);
  }
  return result;
}

uint64_t OCCXmlStreamer::decryptIntoFile(OCCXmlStreamer *this, __sFILE *a2, uint64_t a3, const char *a4)
{
  unint64_t v6;
  uint64_t v7;
  SsrwOOStream *v9;

  v9 = 0;
  if (OCCStreamer::openInputStream(*((OCCStreamer **)this + 4), (SsrwOOStorage *)&v9, (SsrwOOStream **)"EncryptedPackage", a4)&& (v6 = (*((uint64_t (**)(SsrwOOStream *))v9->var0 + 11))(v9), !HIDWORD(v6)))
  {
    v7 = OCCSegmenter::decryptSegmentsIntoFileHandle(*((OCCSegmenter **)this + 3), v9, 8, *((OCCCryptoKey **)this + 1), v6, a2);
  }
  else
  {
    v7 = 0;
  }
  if (v9)
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  return v7;
}

uint64_t OCCXmlStreamer::encryptIntoFile(OCCStreamer *this, __sFILE *a2)
{
  int8x8_t v4;
  uint64_t v5;
  OCCCryptoKey v7;
  _SsrwOO_GUID v8;

  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)&v7);
  *(_QWORD *)&v8.var0 = 0;
  *(_QWORD *)v8.var3 = 0;
  if ((OCCStreamer::openOutputRootStorageWithCLSID(this, a2, v8, (SsrwOORootStorage *)&v7, v4) & 1) != 0)
  {
    v5 = OCCXmlStreamer::encryptIntoRootStorage(this, &v7);
    SsrwOORootStorage::close((SsrwOORootStorage *)&v7, 1);
  }
  else
  {
    v5 = 0;
  }
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&v7);
  return v5;
}

void sub_22A3B95A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  _Unwind_Resume(a1);
}

uint64_t OCCXmlStreamer::encryptIntoRootStorage(OCCStreamer *this, OCCCryptoKey *a2)
{
  int v4;
  uint64_t v5;
  SsrwOOStorage *v7;
  SsrwOOStream *v8;
  SsrwOOStream *v9;

  if (!OCCAgileCryptoKey::isAgile(this->var1, a2))
    return 0;
  v9 = 0;
  if (!OCCStreamer::openOutputStream(this, (SsrwOOStorage *)a2, &v9, "EncryptedPackage"))
    return 0;
  if (!OCCXmlStreamer::encryptPackageStream((OCCXmlStreamer *)this, v9))
    goto LABEL_14;
  if (!OCCAgileCryptoKey::generateEncryptionMessageAuthentication((OCCAgileCryptoKey *)this->var1, v9))
    goto LABEL_14;
  v8 = 0;
  if (!OCCStreamer::openOutputStream(this, (SsrwOOStorage *)a2, &v8, "EncryptionInfo"))
    goto LABEL_14;
  v4 = OCCXmlStreamer::writeEncryptionInfoStream((OCCXmlStreamer *)this, v8);
  (*((void (**)(SsrwOOStream *, uint64_t))v8->var0 + 19))(v8, 1);
  if (v8)
    (*((void (**)(SsrwOOStream *))v8->var0 + 1))(v8);
  v8 = 0;
  if (v4 && (v7 = 0, OCCStreamer::openOutputStorage(this, (SsrwOOStorage *)a2, &v7, DATA_SPACES)))
  {
    v5 = OCCXmlStreamer::writeDataSpacesStorage(this, v7);
    SsrwOOStorage::close(v7, 1);
    if (v7)
    {
      SsrwOOStorage::~SsrwOOStorage(v7);
      MEMORY[0x22E2DD408]();
    }
  }
  else
  {
LABEL_14:
    v5 = 0;
  }
  (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
  if (v9)
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  return v5;
}

FILE *OCCXmlStreamer::encryptPackageStream(OCCXmlStreamer *this, SsrwOOStream *a2)
{
  FILE *result;
  unint64_t v5;

  result = (FILE *)*((_QWORD *)this + 5);
  if (result)
  {
    fseek(result, 0, 2);
    v5 = ftello(*((FILE **)this + 5));
    fseek(*((FILE **)this + 5), 0, 0);
    result = 0;
    if (!HIDWORD(v5))
    {
      (*((void (**)(SsrwOOStream *, unint64_t))a2->var0 + 28))(a2, v5);
      (*((void (**)(SsrwOOStream *, _QWORD))a2->var0 + 28))(a2, 0);
      if ((OCCSegmenter::encryptSegmentsFromFileHandleIntoStream(*((OCCSegmenter **)this + 3), *((__sFILE **)this + 5), v5, *((OCCCryptoKey **)this + 1), a2) & 1) != 0)return (FILE *)1;
    }
  }
  return result;
}

uint64_t OCCXmlStreamer::writeEncryptionInfoStream(OCCXmlStreamer *this, SsrwOOStream *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t *, int *))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), &v6, &v5);
  if ((_DWORD)v3)
    (*((void (**)(SsrwOOStream *, uint64_t, int *))a2->var0 + 23))(a2, v6, &v5);
  return v3;
}

uint64_t OCCXmlStreamer::writeDataSpacesStorage(OCCStreamer *this, SsrwOOStorage *a2)
{
  uint64_t v4;
  SsrwOOStorage *v6;
  SsrwOOStorage *v7;
  int v8;
  SsrwOOStream *v9;

  v9 = 0;
  if (!OCCStreamer::openOutputStream(this, a2, &v9, "Version"))
    return 0;
  v8 = 76;
  (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &versionStreamData, &v8);
  (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
  if (v9)
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  v9 = 0;
  v8 = 0;
  v4 = 0;
  if (OCCStreamer::openOutputStream(this, a2, &v9, "DataSpaceMap"))
  {
    v8 = 112;
    (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &dataSpaceMapStreamData, &v8);
    (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
    if (v9)
      (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v4 = 0;
    if (OCCStreamer::openOutputStorage(this, a2, &v7, "DataSpaceInfo"))
    {
      v4 = OCCStreamer::openOutputStream(this, v7, &v9, "StrongEncryptionDataSpace");
      if ((_DWORD)v4)
      {
        v8 = 64;
        (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &strongEncryptionDataSpaceStreamData, &v8);
        (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
        if (v9)
          (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
        v9 = 0;
        v8 = 0;
      }
      SsrwOOStorage::close(v7, 1);
      if (v7)
      {
        SsrwOOStorage::~SsrwOOStorage(v7);
        MEMORY[0x22E2DD408]();
      }
      v7 = 0;
      if ((_DWORD)v4)
      {
        if (OCCStreamer::openOutputStorage(this, a2, &v7, "TransformInfo"))
        {
          v6 = 0;
          if (OCCStreamer::openOutputStorage(this, v7, &v6, "StrongEncryptionTransform"))
          {
            v4 = OCCStreamer::openOutputStream(this, v6, &v9, "Primary");
            if ((_DWORD)v4)
            {
              v8 = 200;
              (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &primaryStreamData, &v8);
              (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
              if (v9)
                (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
              v9 = 0;
              v8 = 0;
            }
            SsrwOOStorage::close(v6, 1);
            if (v6)
            {
              SsrwOOStorage::~SsrwOOStorage(v6);
              MEMORY[0x22E2DD408]();
            }
            v6 = 0;
          }
          else
          {
            v4 = 0;
          }
          SsrwOOStorage::close(v7, 1);
          if (v7)
          {
            SsrwOOStorage::~SsrwOOStorage(v7);
            MEMORY[0x22E2DD408]();
          }
          return v4;
        }
        return 0;
      }
    }
  }
  return v4;
}

uint64_t OCCXmlStreamer::getDefaultPassphraseInUTF8(OCCXmlStreamer *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t OCCXmlStreamer::getCryptoKey(OCCXmlStreamer *this)
{
  return *((_QWORD *)this + 1);
}

void sub_22A3B9B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3B9C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3B9CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3B9F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_22A3BA0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BA254(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1081C4063F6A4DALL);

  _Unwind_Resume(a1);
}

void XlChartTitle::~XlChartTitle(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A3BA35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BA3A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40A426D8F7);
  _Unwind_Resume(a1);
}

void XlChartDefaultTextFrame::~XlChartDefaultTextFrame(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A3BA4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BA5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3BA6B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BA7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlChartPlotFrame::~XlChartPlotFrame(XlChartFrameType *this)
{
  XlChartFrameType::~XlChartFrameType(this);
  JUMPOUT(0x22E2DD408);
}

void XlChartLegendFrame::~XlChartLegendFrame(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A3BA8EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BAA5C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1081C4063F6A4DALL);

  _Unwind_Resume(a1);
}

void sub_22A3BAE30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BAFD8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1081C409FBAB9B8);

  _Unwind_Resume(a1);
}

void sub_22A3BB120(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1081C40EC8FBF4ALL);

  _Unwind_Resume(a1);
}

void sub_22A3BB1CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BB274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BB494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BB60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BB6EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BB928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BBC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3BBD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3BBDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3BBEC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BC0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_22A3BC230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3BC32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3BC428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3BC4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BC51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BC580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BC5D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BC674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BC71C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BC9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BCB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3BCC94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BCD18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BCE98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BD230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BD384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3BD4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BD60C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3BD7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BD904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BDA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BDB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3BDCFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BE084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3BE278(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  _Unwind_Resume(a1);
}

void sub_22A3BE460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BE87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BEA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3BEB58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BEC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BECF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BEEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BF098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BF108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BF23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3BF4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3BF5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3BFA00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3BFD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A3BFF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A3C0388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3C06D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3C0774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C07FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C0A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A3C0BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A3C0EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A3C1148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3C1264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C136C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A3C147C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C1A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A3C1CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3C1E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3C1FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A3C20BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C2468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3C25D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C2708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C27C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C2ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_22A3C2C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3C2E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3C2FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3C3224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v14;

  _Unwind_Resume(a1);
}

void sub_22A3C333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A3C33CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C34A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3C36A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C3908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3C3AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_22A3C3F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A3C415C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3C420C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C4334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3C45F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C464C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C46A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C46FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C48A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3C4A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C4C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C4CD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C4D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C4E98(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1000C40C36A4E17);

  _Unwind_Resume(a1);
}

void sub_22A3C4F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void XlCellFormatTable::~XlCellFormatTable(void **this)
{
  *this = &off_24F3A7A80;
  CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(this + 1);
}

{
  *this = &off_24F3A7A80;
  CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

void XlCollection::~XlCollection(void **this)
{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

void XlColumnTable::~XlColumnTable(void **this)
{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

void sub_22A3C5254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EBConvertCsException(unsigned int *a1)
{
  if (*a1 == 8003)
    return +[TCMessageException raise:](TCMessageException, "raise:", ECUnsupportedVersion);
  else
    return OCConvertCsException(a1);
}

void sub_22A3C53A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C54C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C5568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C5824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlFontTable::~XlFontTable(void **this)
{
  OcText *v1;

  *this = &off_24F3A7BC8;
  v1 = (OcText *)(this + 1);
  CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(this + 8);
  OcText::~OcText(v1);
}

{
  OcText *v1;

  *this = &off_24F3A7BC8;
  v1 = (OcText *)(this + 1);
  CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(this + 8);
  OcText::~OcText(v1);
  JUMPOUT(0x22E2DD408);
}

void sub_22A3C5A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C5B5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x22E2DD408](v3, 0x10B1C40B04403CELL);

  _Unwind_Resume(a1);
}

void sub_22A3C5CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C5F2C(_Unwind_Exception *a1, XlPtg *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  XlPtg::~XlPtg((XlPtg *)&a10);

  _Unwind_Resume(a1);
}

void XlFormulaProcessor::XLFormulaInfoStream::~XLFormulaInfoStream(XlFormulaProcessor::XLFormulaInfoStream *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::Skip(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) += a2;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteByte(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteWord(uint64_t this)
{
  *(_DWORD *)(this + 8) += 2;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteDWord(uint64_t this)
{
  *(_DWORD *)(this + 8) += 4;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteDouble(uint64_t this, double a2)
{
  *(_DWORD *)(this + 8) += 8;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::Write(uint64_t this, unsigned __int8 *a2, int a3)
{
  *(_DWORD *)(this + 8) += a3;
  return this;
}

_DWORD *XlFormulaProcessor::XLFormulaInfoStream::Clone(XlFormulaProcessor::XLFormulaInfoStream *this)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F3A7C00;
  result[2] = 0;
  return result;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::PosShift(XlFormulaProcessor::XLFormulaInfoStream *this, XLFormulaStream *a2)
{
  return 0;
}

uint64_t XlFormulaProcessor::XLFormulaStream::WriteString(XlFormulaProcessor::XLFormulaStream *this, unsigned __int8 *a2, int a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t result;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v5 = *(unsigned __int16 *)a2;
  v6 = a2[3];
  if (a3)
    v7 = *(void (**)(void))(*(_QWORD *)this + 32);
  else
    v7 = *(void (**)(void))(*(_QWORD *)this + 24);
  v7();
  result = (*(uint64_t (**)(XlFormulaProcessor::XLFormulaStream *, uint64_t))(*(_QWORD *)this + 24))(this, v6);
  v9 = a2 + 4;
  if ((v6 & 1) != 0)
  {
    if (v5)
    {
      do
      {
        --v5;
        v11 = *(unsigned __int16 *)v9;
        v9 += 2;
        result = (*(uint64_t (**)(XlFormulaProcessor::XLFormulaStream *, _QWORD))(*(_QWORD *)this + 32))(this, v11);
      }
      while ((_WORD)v5);
    }
  }
  else if (v5)
  {
    do
    {
      --v5;
      v10 = *v9++;
      result = (*(uint64_t (**)(XlFormulaProcessor::XLFormulaStream *, _QWORD))(*(_QWORD *)this + 24))(this, v10);
    }
    while ((_WORD)v5);
  }
  return result;
}

void XlFormulaProcessor::XLFormulaWriteStream::~XLFormulaWriteStream(XlFormulaProcessor::XLFormulaWriteStream *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlFormulaProcessor::XLFormulaWriteStream::Skip(void **this, unsigned int a2)
{
  bzero(this[1], a2);
  this[1] = (char *)this[1] + a2;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::WriteByte(uint64_t this, char a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(this + 8);
  *(_QWORD *)(this + 8) = v2 + 1;
  *v2 = a2;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::WriteWord(XlFormulaProcessor::XLFormulaWriteStream *this, uint64_t a2)
{
  uint64_t result;

  result = CsLeWriteUInt16(a2, *((_WORD **)this + 1));
  *((_QWORD *)this + 1) += 2;
  return result;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::WriteDWord(XlFormulaProcessor::XLFormulaWriteStream *this, uint64_t a2)
{
  uint64_t result;

  result = CsLeWriteUInt32(a2, *((_DWORD **)this + 1));
  *((_QWORD *)this + 1) += 4;
  return result;
}

double *XlFormulaProcessor::XLFormulaWriteStream::WriteDouble(double **this, double a2)
{
  return CsLeWriteFloat64(this[1]++, a2);
}

void *XlFormulaProcessor::XLFormulaWriteStream::Write(void **this, unsigned __int8 *a2, size_t __n)
{
  unsigned int v3;
  void *result;

  v3 = __n;
  result = memcpy(this[1], a2, __n);
  this[1] = (char *)this[1] + v3;
  return result;
}

_QWORD *XlFormulaProcessor::XLFormulaWriteStream::Clone(XlFormulaProcessor::XLFormulaWriteStream *this)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *((_QWORD *)this + 1);
  *result = &off_24F3A7C98;
  result[1] = v3;
  return result;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::PosShift(XlFormulaProcessor::XLFormulaWriteStream *this, XlFormulaProcessor::XLFormulaStream *a2)
{
  return (*((_DWORD *)a2 + 2) - *((_DWORD *)this + 2));
}

void XlNoteTable::~XlNoteTable(void **this)
{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

void XlHyperlinkTable::~XlHyperlinkTable(void **this)
{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

void sub_22A3C6718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_22A3C6908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C6AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C6C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A3C6DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3C6FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A3C7114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C72DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A3C7464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3C7548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3C7624(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1000C40BDFB0063);

  _Unwind_Resume(a1);
}

void sub_22A3C774C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  MEMORY[0x22E2DD408](v4, 0x10B1C40C6ED1AFELL);

  _Unwind_Resume(a1);
}

void sub_22A3C7810(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C402A17B6B6);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_22A3C7A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3C7B7C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1000C400EA6A39BLL);

  _Unwind_Resume(a1);
}

uint64_t XlCellRow::getNextCell(XlCellRow *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 2);
  v1 = (char *)this + 16;
  v2 = v3;
  v4 = *((unsigned int *)v1 + 6);
  *((_DWORD *)v1 + 6) = v4 + 1;
  if (v4 >= ((unint64_t)(*((_QWORD *)v1 + 1) - v3) >> 3))
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v2 + 8 * v4);
}

uint64_t XlRowBlock::getNextRow(XlRowBlock *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 1);
  v1 = (char *)this + 8;
  v2 = v3;
  v4 = *((unsigned __int16 *)v1 + 12);
  *((_WORD *)v1 + 12) = v4 + 1;
  if (((unint64_t)(*((_QWORD *)v1 + 1) - v3) >> 3) <= v4)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v2 + 8 * v4);
}

void sub_22A3C7CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<OcText,ChAllocator<OcText>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 48;
      v7 = v4 - 48;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 48;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22A3C8168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, OcText *a5, OcText *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;

  OcText::~OcText((OcText *)&a13);
  OcText::~OcText((OcText *)&a19);

  _Unwind_Resume(a1);
}

void sub_22A3C82C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40B84AEDEBLL);
  _Unwind_Resume(a1);
}

void sub_22A3C8408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C84D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::vector<OcText,ChAllocator<OcText>>::__push_back_slow_path<OcText const&>(uint64_t *a1, const OcText *a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v15;
  OcText *v16;
  OcText *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((v4 + 1) > 0x55555555)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = -1431655765 * ((unint64_t)(a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAA)
    v9 = 1431655765;
  else
    v9 = v5;
  v19 = a1 + 2;
  if ((_DWORD)v9)
  {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<OcText>>(v7, v9);
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v15 = v10;
  v16 = (OcText *)&v10[48 * v4];
  v18 = &v10[48 * v12];
  OcText::OcText(v16, a2);
  v17 = v16 + 1;
  std::vector<OcText,ChAllocator<OcText>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<OcText,ChAllocator<OcText> &>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_22A3C85E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OcText,ChAllocator<OcText> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OcText,ChAllocator<OcText>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<ChAllocator<OcText>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<OcText>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<ChAllocator<OcText>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  OcText *v12;

  v10 = 0;
  v11 = a7 - 48;
  while (a3 + v10 != a5)
  {
    v12 = (OcText *)(v11 + v10);
    v10 -= 48;
    OcText::OcText(v12, (const OcText *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<OcText,ChAllocator<OcText> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 48);
    *(_QWORD *)(a1 + 16) = i - 48;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22A3C8988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3C8B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3C8C40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CA6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;
  uint64_t i;

  for (i = 1096; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_22A3CA81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CA930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3CAA24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CACC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3CAE50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CAF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C409D6E66E7);
  _Unwind_Resume(a1);
}

void sub_22A3CB058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CB154(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CB1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ECMappingContext;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A3CB2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;

  *(_QWORD *)(v9 + 8) = v11;
  OcText::~OcText((OcText *)&a9);

  _Unwind_Resume(a1);
}

void sub_22A3CB3BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CB58C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_22A3CB6DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CB730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CB7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CB83C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CB90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3CB9B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3CBA5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CBB08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CBBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CBC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CBD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3CC048(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_22A3CC1A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CC294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CC40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CC598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id formulaForEDCell(const EDCellHeader *a1, EDRowBlocks *a2)
{
  EDRowBlocks *v3;
  EDRowBlocks *v4;
  uint64_t var0;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = v3;
  if (a1 && (a1->var0 & 0x10000000) != 0 && (var0 = a1[1].var0, (_DWORD)var0 != -1))
  {
    -[EDRowBlocks formulas](v3, "formulas");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectAtIndex:", var0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_22A3CC6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL BOOLValueForEDCell(_BOOL8 result)
{
  int v1;
  void *v2;
  void *v3;

  if (result)
  {
    if (*(_DWORD *)result >> 29 == 1)
    {
      if ((*(_DWORD *)result & 0x10000000) != 0)
        v1 = *(unsigned __int8 *)(result + 12);
      else
        v1 = *(unsigned __int8 *)(result + 8);
      return v1 != 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL BOOLValueForEDCell(const EDCellHeader *)");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 181, 0, "Invalid Cell Type!");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
      return 0;
    }
  }
  return result;
}

void sub_22A3CC77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void setInlineNSStringValueForEDCell(EDCellHeader *a1, NSString *a2, EDResources *a3)
{
  EDResources *v5;
  EDString *v6;
  void *v7;
  NSString *v8;

  v8 = a2;
  v5 = a3;
  v6 = -[EDString initWithString:]([EDString alloc], "initWithString:", v8);
  -[EDResources strings](v5, "strings");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  setStringIndexValueForEDCell(a1, objc_msgSend(v7, "addObject:", v6));

}

void sub_22A3CC824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t edCellHasRef(uint64_t result)
{
  if (result)
    return (*(unsigned __int8 *)(result + 3) >> 3) & 1;
  return result;
}

void sub_22A3CC8BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CC928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3CCBB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CCC80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CCD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3CCFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3CD22C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CD2A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CD370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CD558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CD728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3CD7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3CD8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CD9C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CDA64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CDC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CDEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CE1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1010C405C145AC1);
  _Unwind_Resume(a1);
}

void sub_22A3CE3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CE514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CE5F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CE950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22A3CEBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CEDB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CEE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CEFB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CF030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CF0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CF164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CF318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3CF3D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CF4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3CF584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CF76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CF830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CFA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A3CFBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3CFCAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3CFD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CFE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3CFEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3CFF54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D00E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D0184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D053C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D05C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D0668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D07EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D0840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D08F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D0998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D0A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D0BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D0C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D0CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D0D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D0F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D158C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D16A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D1B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D1C28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D1C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D1F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D1FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D2620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D2740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D28E8(void *exc_buf)
{
  objc_begin_catch(exc_buf);
  JUMPOUT(0x22A3D2794);
}

void sub_22A3D29C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D2A90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D2AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D2B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3D2CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D2D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D2E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3D30EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D334C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D3464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3D3778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D37F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D3908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D39C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3D3A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D3B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D3BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D3CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D3D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D3DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D3EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D3F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3D4020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D409C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D4128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D432C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D43A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D44A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D45AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D462C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D46B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D47B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D48B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D49BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D4C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D4CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D4DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D4E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D4EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D5100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL EDValue::isStringType(EDValue *this)
{
  return this->type == 3 || this->type == 6;
}

id EDValue::resolvedEDStringValue(EDValue *this, EDResources *a2)
{
  EDResources *v3;
  EDResources *v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (this->type == 6)
  {
    -[EDResources strings](v3, "strings");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectAtIndex:", this->var0.stringIndex);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else if (this->type == 3)
  {
    EDValue::edStringValue(this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_22A3D53D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id EDValue::edStringValue(EDValue *this)
{
  void *v1;
  void *v2;

  EDValue::nsStringValue(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    +[EDString edStringWithString:](EDString, "edStringWithString:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_22A3D5444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EDValue::nsStringValue(EDValue *this)
{
  void *v1;

  if (this->type == 3 && this->var0.stringIndex)
    v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithUTF8String:", this->var0.stringIndex);
  else
    v1 = 0;
  return v1;
}

void EDValue::makeFromCell(EDValue *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = typeForEDCell(this);
  *(_DWORD *)a2 = v5;
  switch(v5)
  {
    case 0u:
      *(_QWORD *)(a2 + 8) = 0;
      break;
    case 1u:
      *(_BYTE *)(a2 + 8) = BOOLValueForEDCell((_BOOL8)this);
      break;
    case 2u:
      *(double *)(a2 + 8) = numberValueForEDCell((const EDCellHeader *)this);
      break;
    case 3u:
      *(_DWORD *)a2 = 6;
      *(_QWORD *)(a2 + 8) = stringIndexValueForEDCell((const EDCellHeader *)this);
      break;
    case 5u:
      *(_DWORD *)(a2 + 8) = errorValueForEDCell(this);
      break;
    default:
      return;
  }
}

void EDValue::makeWithNumber(EDValue *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 2;
  *(double *)(a3 + 8) = a2;
}

void EDValue::makeWithNSString(EDValue *this@<X0>, uint64_t a2@<X8>)
{
  EDValue *v4;
  const char *v5;
  EDValue *v6;

  v4 = this;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)a2 = 3;
  if (v4)
  {
    v6 = v4;
    v5 = (const char *)-[EDValue UTF8String](objc_retainAutorelease(v4), "UTF8String");
    if (v5)
    {
      *(_QWORD *)(a2 + 8) = strdup(v5);
    }
    else
    {
      *(_DWORD *)a2 = 5;
      *(_DWORD *)(a2 + 8) = 2;
    }
    v4 = v6;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
  }

}

void sub_22A3D55C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D56DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D58D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3D598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D5A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D5C40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D5E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D60C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D6184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D6228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D628C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D6320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D6384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_22A3D6534(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void sub_22A3D69D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A3D6B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3D711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A3D7320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D7414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D7720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A3D788C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3D7954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D7A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D7ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3D7CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3D80D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A3D8180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D8544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D8624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3D86DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D8898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A3D8F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_22A3D9074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3D91C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3D959C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3D9830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A3D9934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3D9F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3DA528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DA8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A3DAC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<unsigned int>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<unsigned int>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<unsigned int>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (unsigned int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(v5, a2 + 7);
      v12 = (unsigned int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_22A3DADF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<unsigned int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *std::__tree<unsigned int>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(uint64_t **a1, unsigned int *a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_22A3DB410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v15;

  _Unwind_Resume(a1);
}

void sub_22A3DB464()
{
  JUMPOUT(0x22A3DB44CLL);
}

void sub_22A3DB46C()
{
  JUMPOUT(0x22A3DB450);
}

void sub_22A3DB474()
{
  JUMPOUT(0x22A3DB454);
}

void sub_22A3DB6A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3DBB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3DBCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A3DBEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DBFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3DC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A3DCB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A3DCC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3DCD28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3DCDB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_46_0()
{
  uint64_t i;

  for (i = 0xC8u; i != -8; i -= 16)

}

void __cxx_global_array_dtor_78()
{
  uint64_t i;

  for (i = 0x128u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[EXConditionalFormattingRule conditionalFormattingRuleTypeEnumMap]::sConditionalFormattingRuleTypeStructs
                       + i));
}

void sub_22A3DCF80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3DD0BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3DD440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3DD500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3DD6AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_42_0()
{
  uint64_t i;

  for (i = 0x18u; i != -8; i -= 16)

}

void sub_22A3DD838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A3DE038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_16_0()
{
  uint64_t i;

  for (i = 0x28u; i != -8; i -= 16)

}

void sub_22A3DE1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A3DE280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3DE318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DE420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A3DE99C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DEBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3DEF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DF20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DF488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DF6EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DF9AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DFBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DFDBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3DFEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3DFF44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E0054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E0218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3E02AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E03B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E04DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E08E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;

  a14 = (void **)&a11;
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<EDReference * {__strong}>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<EDReference * {__strong}>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22A3E09EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<EDReference * {__strong}>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_22A3E0B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A3E0C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E0CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E0E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3E11F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A3E1464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (v13)

  _Unwind_Resume(a1);
}

void sub_22A3E1528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E1678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3E17CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E1874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E1A60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A3E2364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_22A3E2840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A3E2980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3E2A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3E2BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E3910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E39E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E3A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDCellIterator;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A3E3C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E3DC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_22A3E3E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3E4050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_22A3E427C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_22A3E47A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_22A3E4A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E4BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_22A3E4D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_22A3E4E58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_22A3E4EF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E4F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3E5024(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x10B1C40D583828BLL);

  _Unwind_Resume(a1);
}

void sub_22A3E5184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E5290(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

uint64_t childCountForToken(int a1)
{
  int v2;
  uint64_t result;

  v2 = categoryForType(a1);
  result = 0;
  if (!v2 || v2 == 3)
    return result;
  if (a1 > 64)
  {
    if (a1 > 96)
    {
      if (a1 != 97 && a1 != 98)
        return 0;
    }
    else if (a1 != 65 && a1 != 66)
    {
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  result = 2;
  switch(a1)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return result;
    case 18:
    case 19:
    case 20:
    case 21:
      result = 1;
      break;
    case 25:
    case 33:
    case 34:
      return 0xFFFFFFFFLL;
    default:
      return 0;
  }
  return result;
}

_WORD *copyStringToExtendedData(const unsigned __int16 *a1, unsigned __int8 *a2, int a3)
{
  _WORD *result;

  *(_WORD *)a2 = a3;
  *((_WORD *)a2 + 1) = 265;
  result = _ChWcsncpy((_WORD *)a2 + 2, a1, a3);
  *(_WORD *)&a2[2 * a3 + 4] = 0;
  return result;
}

uint64_t refTypeOf(char a1)
{
  int v1;
  unsigned int v2;

  v1 = a1 & 0x60;
  if (v1 == 64)
    v2 = 1;
  else
    v2 = -1;
  if (v1 == 96)
    v2 = 2;
  if (v1 == 32)
    return 0;
  else
    return v2;
}

uint64_t convertValueReference(uint64_t result, unsigned int a2)
{
  int v2;
  unsigned int v3;

  v2 = 32 * a2 + 32;
  if (a2 >= 3)
    v2 = 0;
  if ((result & 0x60) != 0)
  {
    v3 = result & 0xFFFFFF9F;
    if ((result & 0x60) != v2 && v3 <= 0x1B)
    {
      if (((1 << v3) & 0xC000036) != 0)
        return v3 | v2;
      if (!v3)
      {
        if (!a2)
          v2 = 96;
        return v3 | v2;
      }
    }
  }
  return result;
}

uint64_t addOperator(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "addToken:extendedDataLength:numArgs:", a2, 0, childCountForToken(a2));

  return 1;
}

void sub_22A3E5750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL addFunction(void *a1, __int16 a2, uint64_t a3)
{
  _WORD *v4;

  v4 = (_WORD *)objc_msgSend(a1, "addToken:extendedDataLength:numArgs:", 65, 2, a3);
  if (v4)
    *v4 = a2;
  return v4 != 0;
}

BOOL addVariableFunction(void *a1, __int16 a2, uint64_t a3)
{
  __int16 v3;
  _WORD *v5;

  v3 = a3;
  v5 = (_WORD *)objc_msgSend(a1, "addToken:extendedDataLength:numArgs:", 66, 8, a3);
  if (v5)
  {
    *v5 = v3;
    v5[1] = 0;
    v5[2] = a2;
    v5[3] = 0;
  }
  return v5 != 0;
}

BOOL addStringOperand(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  __int16 v6;
  _WORD *v7;
  const unsigned __int16 *v8;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v4, "length");
  v6 = v5;
  v7 = (_WORD *)objc_msgSend(v3, "addToken:extendedDataLength:", 23, (2 * v5 + 8));
  if (v7)
  {
    v8 = (const unsigned __int16 *)objc_msgSend(objc_retainAutorelease(v4), "cStringUsingEncoding:", 10);
    *v7 = v6;
    v7[1] = 265;
    _ChWcsncpy(v7 + 2, v8, v6);
    v7[v6 + 2] = 0;
  }

  return v7 != 0;
}

void sub_22A3E588C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL addNumberOperand(void *a1, double a2)
{
  id v3;
  void *v4;
  double v5;
  BOOL v6;
  _WORD *v7;
  _BOOL8 v8;

  v3 = a1;
  v4 = v3;
  if (a2 <= 65535.0 && ((v5 = trunc(a2), a2 >= 0.0) ? (v6 = v5 == a2) : (v6 = 0), v6))
  {
    v7 = (_WORD *)objc_msgSend(v3, "addToken:extendedDataLength:", 30, 2, v5);
    if (v7)
    {
      *v7 = (int)a2;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = addFloatOperand(v3, a2);
  }

  return v8;
}

void sub_22A3E5934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL addFloatOperand(void *a1, double a2)
{
  id v3;
  double *v4;
  double *v5;

  v3 = a1;
  v4 = (double *)objc_msgSend(v3, "addToken:extendedDataLength:", 31, 8);
  v5 = v4;
  if (v4)
    CsCopyFloat64ToPackedLocation(v4, a2);

  return v5 != 0;
}

void sub_22A3E59A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL addIntOperand(void *a1, __int16 a2)
{
  _WORD *v3;

  v3 = (_WORD *)objc_msgSend(a1, "addToken:extendedDataLength:", 30, 2);
  if (v3)
    *v3 = a2;
  return v3 != 0;
}

BOOL addBoolOperand(void *a1, char a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)objc_msgSend(a1, "addToken:extendedDataLength:", 29, 1);
  if (v3)
    *v3 = a2;
  return v3 != 0;
}

BOOL addRef3DOperandWithSheet(void *a1, int a2, __int16 a3, __int16 a4, __int16 a5, int a6)
{
  id v11;
  void *v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;

  v11 = a1;
  v12 = v11;
  if (a2)
  {
    if (a2 == 1)
    {
      v13 = 90;
    }
    else if (a2 == 2)
    {
      v13 = 122;
    }
    else
    {
      v13 = 26;
    }
  }
  else
  {
    v13 = 58;
  }
  v14 = (_WORD *)objc_msgSend(v11, "addToken:extendedDataLength:", v13, 6);
  v15 = v14;
  if (v14)
  {
    *v14 = a3;
    v14[1] = a4;
    v14[2] = a5;
    if (a6)
      objc_msgSend(v12, "markLastTokenAsDuration");
  }

  return v15 != 0;
}

void sub_22A3E5ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL addArea3DOperandWithSheet(void *a1, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7)
{
  id v13;
  void *v14;
  uint64_t v15;
  _WORD *v16;
  _BOOL8 v17;

  v13 = a1;
  v14 = v13;
  if (a2)
  {
    if (a2 == 1)
    {
      v15 = 91;
    }
    else if (a2 == 2)
    {
      v15 = 123;
    }
    else
    {
      v15 = 27;
    }
  }
  else
  {
    v15 = 59;
  }
  v16 = (_WORD *)objc_msgSend(v13, "addToken:extendedDataLength:", v15, 10);
  if (v16)
  {
    *v16 = a3;
    v16[1] = a4;
    v16[2] = a5;
    v16[3] = a6;
    v16[4] = a7;
  }
  v17 = v16 != 0;

  return v17;
}

void sub_22A3E5B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t addNumberToArray(void *a1, int a2, double a3)
{
  id v5;
  uint64_t v6;

  v5 = a1;
  v6 = objc_msgSend(v5, "setExtendedDataForLastTokenAtIndex:length:", (a2 + 2), 10);
  *(_BYTE *)v6 = 1;
  CsCopyFloat64ToPackedLocation((double *)(v6 + 2), a3);

  return 1;
}

void sub_22A3E5BF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL addUnicodeStringToArray(void *a1, const unsigned __int16 *a2, unint64_t a3, int a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a1;
  v8 = v7;
  if (a3 <= 0x7FFE)
  {
    v9 = objc_msgSend(v7, "setExtendedDataForLastTokenAtIndex:length:", (a4 + 2), 2 * (unsigned __int16)a3 + 8);
    *(_BYTE *)v9 = 2;
    *(_WORD *)(v9 + 2) = a3;
    v10 = v9 + 2;
    *(_WORD *)(v9 + 4) = 265;
    _ChWcsncpy((_WORD *)(v9 + 6), a2, a3);
    *(_WORD *)(v10 + 2 * a3 + 4) = 0;
  }

  return a3 < 0x7FFF;
}

void sub_22A3E5C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t addBoolToArray(void *a1, char a2, int a3)
{
  _BYTE *v4;

  v4 = (_BYTE *)objc_msgSend(a1, "setExtendedDataForLastTokenAtIndex:length:", (a3 + 2), 2);
  *v4 = 4;
  v4[1] = a2;
  return 1;
}

uint64_t addErrorToArrayAtIndex(void *a1, int a2)
{
  *(_WORD *)objc_msgSend(a1, "setExtendedDataForLastTokenAtIndex:length:", (a2 + 2), 2) = 3856;
  return 1;
}

BOOL addErrorToken(void *a1, __int16 a2)
{
  _WORD *v3;

  v3 = (_WORD *)objc_msgSend(a1, "addToken:extendedDataLength:", 28, 2);
  if (v3)
    *v3 = a2;
  return v3 != 0;
}

BOOL addAreaOperandFromRefExtendedData(void *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  id v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  _WORD *v12;
  _BOOL8 v13;
  BOOL v15[2];
  BOOL v16[2];
  int v17[2];
  int v18[2];

  v5 = a1;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)v18 = 0;
  *(_WORD *)v16 = 0;
  *(_WORD *)v15 = 0;
  extractDataFromPtgRefBuffer(a3, v18, &v15[1], v17, v15);
  extractDataFromPtgRefBuffer(a2, &v18[1], &v16[1], &v17[1], v16);
  v7 = v18[0];
  v6 = v18[1];
  if (v18[1] <= v18[0])
  {
    v8 = v18[0];
    LOWORD(v7) = v18[1];
  }
  else
  {
    v18[0] = v18[1];
    v18[1] = v7;
    v8 = v6;
  }
  v10 = v17[0];
  v9 = v17[1];
  if (v17[1] <= v17[0])
  {
    v11 = v17[0];
    v10 = v17[1];
  }
  else
  {
    v17[0] = v17[1];
    v17[1] = v10;
    v11 = v9;
  }
  if (v16[1])
  {
    v10 |= 0x8000u;
    v17[1] = v10;
  }
  if (v16[0])
  {
    v10 |= 0x4000u;
    v17[1] = v10;
  }
  if (v15[1])
  {
    v11 |= 0x8000u;
    v17[0] = v11;
  }
  if (v15[0])
  {
    v11 |= 0x4000u;
    v17[0] = v11;
  }
  v12 = (_WORD *)objc_msgSend(v5, "addToken:extendedDataLength:", 69, 8);
  if (v12)
  {
    *v12 = v7;
    v12[1] = v8;
    v12[2] = v10;
    v12[3] = v11;
  }
  v13 = v12 != 0;

  return v13;
}

void sub_22A3E5E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL addAreaOperandFromAreaExtendedData(void *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  id v5;
  int v6;
  int v7;
  int v8;
  int x;
  int v10;
  int y;
  int v12;
  _WORD *v13;
  _BOOL8 v14;
  BOOL v16[2];
  BOOL v17[2];
  BOOL v18[2];
  BOOL v19[2];
  int v20[2];
  int v21[2];
  CGRect v22;
  CGRect v23;
  CGRect v24;

  v5 = a1;
  *(_QWORD *)v20 = 0;
  *(_QWORD *)v21 = 0;
  *(_WORD *)v19 = 0;
  *(_WORD *)v18 = 0;
  *(_WORD *)v17 = 0;
  *(_WORD *)v16 = 0;
  extractDataFromPtgAreaBuffer(a3, &v21[1], &v17[1], v21, &v16[1], &v20[1], v17, v20, v16);
  v7 = v20[0];
  v6 = v20[1];
  v8 = v21[0];
  LODWORD(a3) = v21[1];
  extractDataFromPtgAreaBuffer(a2, &v21[1], &v19[1], v21, &v18[1], &v20[1], v19, v20, v18);
  v24.origin.x = (double)v6;
  v24.origin.y = (double)(int)a3;
  v24.size.width = (double)(v7 - v6);
  v24.size.height = (double)(v8 - (int)a3);
  v22.origin.x = (double)v20[1];
  v22.origin.y = (double)v21[1];
  v22.size.width = (double)(v20[0] - v20[1]);
  v22.size.height = (double)(v21[0] - v21[1]);
  v23 = CGRectUnion(v22, v24);
  x = (int)v23.origin.x;
  v10 = (int)(v23.size.width + (double)(int)v23.origin.x);
  v20[0] = v10;
  v20[1] = (int)v23.origin.x;
  y = (int)v23.origin.y;
  v12 = (int)(v23.size.height + (double)(int)v23.origin.y);
  v21[0] = v12;
  v21[1] = (int)v23.origin.y;
  if (v19[1])
  {
    x |= 0x8000u;
    v20[1] = x;
  }
  if (v19[0])
  {
    x |= 0x4000u;
    v20[1] = x;
  }
  if (v16[1])
  {
    v10 |= 0x8000u;
    v20[0] = v10;
  }
  if (v16[0])
  {
    v10 |= 0x4000u;
    v20[0] = v10;
  }
  v13 = (_WORD *)objc_msgSend(v5, "addToken:extendedDataLength:", 69, 8);
  if (v13)
  {
    *v13 = y;
    v13[1] = v12;
    v13[2] = x;
    v13[3] = v10;
  }
  v14 = v13 != 0;

  return v14;
}

void sub_22A3E6010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL addArea3DOperandFromRef3DExtendedData(void *a1, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  id v7;
  void *v8;
  void *v9;
  int v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  int v15;
  _BOOL8 v16;
  unsigned int v18;
  unsigned int v19;
  BOOL v20[2];
  BOOL v21[2];
  int v22[2];
  int v23[2];

  v7 = a1;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)v23 = 0;
  *(_WORD *)v21 = 0;
  *(_WORD *)v20 = 0;
  v18 = 0;
  v19 = 0;
  extractDataFromPtgRef3DBuffer(a4, &v18, v23, &v20[1], v22, v20);
  extractDataFromPtgRef3DBuffer(a3, &v19, &v23[1], &v21[1], &v22[1], v21);
  if (v19 != v18)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL addArea3DOperandFromRef3DExtendedData(__strong id<EDFormulaBuilding>, XL_ARGUMENT_REFERENCE_TYPE, ChUINT2 *, ChUINT2 *)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDFormulaBuilding.mm");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 417, 0, "sheets are different only the first one will be used");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  v10 = v23[0];
  v11 = v23[1];
  if (v23[1] <= v23[0])
  {
    v12 = v23[0];
    LOWORD(v10) = v23[1];
  }
  else
  {
    v23[0] = v23[1];
    v23[1] = v10;
    v12 = v11;
  }
  v13 = v22[0];
  v14 = v22[1];
  if (v22[1] <= v22[0])
  {
    v15 = v22[0];
    v13 = v22[1];
  }
  else
  {
    v22[0] = v22[1];
    v22[1] = v13;
    v15 = v14;
  }
  if (v21[1])
  {
    v13 |= 0x8000u;
    v22[1] = v13;
  }
  if (v21[0])
  {
    v13 |= 0x4000u;
    v22[1] = v13;
  }
  if (v20[1])
  {
    v15 |= 0x8000u;
    v22[0] = v15;
  }
  if (v20[0])
  {
    v15 |= 0x4000u;
    v22[0] = v15;
  }
  v16 = addArea3DOperandWithSheet(v7, a2, v19, v10, v12, v13, v15);

  return v16;
}

void sub_22A3E61D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL addArea3DOperandFromArea3DExtendedData(void *a1, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  int x;
  int v17;
  int v18;
  _BOOL8 v19;
  int v21;
  int v22;
  id v23;
  unsigned int v24[2];
  BOOL v25[2];
  BOOL v26[2];
  BOOL v27[2];
  BOOL v28[2];
  int v29[2];
  int v30[2];
  CGRect v31;
  CGRect v32;
  CGRect v33;

  v23 = a1;
  *(_QWORD *)v24 = 0;
  *(_QWORD *)v29 = 0;
  *(_QWORD *)v30 = 0;
  *(_WORD *)v28 = 0;
  *(_WORD *)v27 = 0;
  *(_WORD *)v26 = 0;
  *(_WORD *)v25 = 0;
  extractDataFromPtgArea3DBuffer(a4, v24, &v30[1], &v26[1], v30, &v25[1], &v29[1], v26, v29, v25);
  v8 = v29[0];
  v7 = v29[1];
  v9 = v30[1];
  v21 = a2;
  v22 = v30[0];
  extractDataFromPtgArea3DBuffer(a3, &v24[1], &v30[1], &v28[1], v30, &v27[1], &v29[1], v28, v29, v27);
  v11 = v29[0];
  v10 = v29[1];
  v12 = v30[0];
  v13 = v30[1];
  if (v24[1] != v24[0])
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL addArea3DOperandFromArea3DExtendedData(__strong id<EDFormulaBuilding>, XL_ARGUMENT_REFERENCE_TYPE, ChUINT2 *, ChUINT2 *)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDFormulaBuilding.mm");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 455, 0, "sheets are different only the first one will be used");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  v33.origin.x = (double)v7;
  v33.origin.y = (double)v9;
  v33.size.width = (double)(v8 - v7);
  v33.size.height = (double)(v22 - v9);
  v31.origin.x = (double)v10;
  v31.origin.y = (double)v13;
  v31.size.width = (double)(v11 - v10);
  v31.size.height = (double)(v12 - v13);
  v32 = CGRectUnion(v31, v33);
  x = (int)v32.origin.x;
  v17 = (int)(v32.size.width + (double)(int)v32.origin.x);
  v29[0] = v17;
  v29[1] = (int)v32.origin.x;
  v18 = (int)(v32.size.height + (double)(int)v32.origin.y);
  v30[0] = v18;
  v30[1] = (int)v32.origin.y;
  if (v28[1])
  {
    x |= 0x8000u;
    v29[1] = x;
  }
  if (v28[0])
  {
    x |= 0x4000u;
    v29[1] = x;
  }
  if (v25[1])
  {
    v17 |= 0x8000u;
    v29[0] = v17;
  }
  if (v25[0])
  {
    v17 |= 0x4000u;
    v29[0] = v17;
  }
  v19 = addArea3DOperandWithSheet(v23, v21, v24[1], (int)v32.origin.y, v18, x, v17);

  return v19;
}

void sub_22A3E6424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A3E686C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3E6974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E69F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E6A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3E6C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E6D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E6DD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E6E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E6EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A3E6FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E702C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E7144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A3E73A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3E74D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3E78B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A3E791C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E7970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E7AE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3E7B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3E7C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3E7EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,unsigned long>,std::__map_value_compare<long,std::__value_type<long,unsigned long>,std::less<long>,true>,std::allocator<std::__value_type<long,unsigned long>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_22A3E8214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E8320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3E83A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E8410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E84E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A3E857C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E8630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E86C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3E8760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E87FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E889C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E8AA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A3E8C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A3E8ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_22A3E9008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A3E912C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A3E9210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A3E92DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x10B1C4028190DF1);

  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XlChartScatterPlot::~XlChartScatterPlot(XlChartScatterPlot *this)
{
  XlChartPlot *v1;

  v1 = (XlChartScatterPlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartScatterPlot::~XlChartScatterPlot((XlChartScatterPlot *)((char *)this - 144));
}

void sub_22A3E940C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void EDBuildablePtg::EDBuildablePtg(EDBuildablePtg *this, const EDBuildablePtg *a2)
{
  char **p_var1;
  __int128 v5;
  __int128 v6;

  p_var1 = &this->var1;
  XlPtg::XlPtg((XlPtg *)&this->var1);
  this->var0 = (void **)&off_24F3A8160;
  *(_OWORD *)&this->var5 = 0u;
  *(_OWORD *)&this->var7 = 0u;
  this->var9 = 0;
  *(_QWORD *)&this->var10 = 0;
  if (a2)
  {
    XlPtg::operator=((uint64_t)p_var1, (uint64_t)&a2->var1);
    v5 = *(_OWORD *)&a2->var5;
    v6 = *(_OWORD *)&a2->var7;
    *(_OWORD *)((char *)&this->var8 + 4) = *(_OWORD *)((char *)&a2->var8 + 4);
    *(_OWORD *)&this->var5 = v5;
    *(_OWORD *)&this->var7 = v6;
    this->var9 = a2->var9;
    this->var10 = a2->var10;
    *(_DWORD *)&this->var11 = *(_DWORD *)&a2->var11;
  }
}

void sub_22A3E94CC(_Unwind_Exception *a1)
{
  XlPtg *v1;

  XlPtg::~XlPtg(v1);
  _Unwind_Resume(a1);
}

uint64_t EDBuildablePtg::EDBuildablePtg(uint64_t a1, int a2)
{
  XlPtg::XlPtg(a1 + 8, a2);
  *(_QWORD *)a1 = &off_24F3A8160;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  return a1;
}

